using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.Text;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Web.Services;
using System.Xml.Serialization;
using WebCallLog.Controllers;
using WebCallLog.DAL;
using WebCallLog.Helpers;
using WebCallLog.Hubs;
using WebCallLog.NhatTinWebService;

namespace WebCallLog.Models
{
    public class RequestsController : Controller
    {
        CallLogDbContext db = new CallLogDbContext();
        InsideDbContext insDB = new InsideDbContext();
        SqlDBHelper sql = new SqlDBHelper();
        ItemDAL itemDal = new ItemDAL();

        //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
        WebCallLog.KerryWebService.Service1 g_KerryWebService = new KerryWebService.Service1();
        string g_KerryWebService_Token = ConfigurationManager.AppSettings["KerryWebService_Token"].ToString();
        //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

        NTWebService serviceNhatTin = new NTWebService();//Hàm tạo
        NTWebService l_NtWebService = new NTWebService();//Hàm hủy
        DTO_Kerry_Response responseKerryDTO = new DTO_Kerry_Response();

        #region  Create
        public ActionResult Create()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (UserManager.CheckPermisionMenu(Request.RawUrl) != true)
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            ViewBag.MaPhongBanGui = UserManager.CurrentUser.OrganizationHierachyCode;

            var shopDetail = new ShopDAL().Get(UserManager.CurrentUser.WarehouseCode);
            if (shopDetail != null)
            {
                ViewBag.ShopDetail = (shopDetail.Address).ToString();
            }

            if (Session[Key.Session.EcomId] != null)
            {
                ViewBag.g_EcomId = Session[Key.Session.EcomId].ToString();
            }

            string empDetail = string.Empty;
            string empDatailB1 = string.Empty; //NgoanHT - 02/11/2017 - Loại: 181 - Thêm empDatailB1
            DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
            if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
            {
                empDetail += " - " + tableEmpDetail.Rows[0]["Region"];
                empDetail += " - " + tableEmpDetail.Rows[0]["PlaceToWork"];
                ViewBag.Shop = empDetail;
                //▼ Add - NgoanHT - 02/11/2017 - Loại: 181 - Thêm empDatailB1
                empDatailB1 += " - " + tableEmpDetail.Rows[0]["Region"];
                empDatailB1 += " - " + tableEmpDetail.Rows[0]["WarehouseCodeB1"];
                empDatailB1 += " - " + tableEmpDetail.Rows[0]["PlaceToWork"];
                ViewBag.ShopB1 = empDatailB1;
                //▲ Add - NgoanHT - 02/11/2017 - Loại: 181 - Thêm empDatailB1
                //▼  Add - LuanNT44 - 06/03/2018 - Loại 204 - Chốt CR qua Calllog
                ViewBag.EmployeeName = UserManager.CurrentUser.EmployeeName;
                ViewBag.InsideCode = UserManager.CurrentUser.InsideCode;
                //▲  Add - LuanNT44 - 06/03/2018 - Loại 204 - Chốt CR qua Calllog
                ViewBag.NameNotCode = tableEmpDetail.Rows[0]["EmployeeName"];
                ViewBag.WarehouseCode = tableEmpDetail.Rows[0]["WarehouseCode"];
                ViewBag.WarehouseCodeB1 = tableEmpDetail.Rows[0]["WarehouseCodeB1"];//Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                ViewBag.g_JobTitleCode = tableEmpDetail.Rows[0]["JobTitleCode"];
                ViewBag.WarehouseName = tableEmpDetail.Rows[0]["WarehouseName"]; // Edit - ThuongNM2 -2018.10.05 - Sửa quy trình loại 187 - 191
            }

            Session[Key.Session.EcomId] = null;

            ViewBag.TimeOut = Session.Timeout;
            return View(new Request());
        }
        [HttpPost, ValidateAntiForgeryToken, ValidateInput(false)]
        public ActionResult Create(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    DateTime dateFrom = DateTime.Parse(form["dateFrom"].ToString());
                    DateTime dateTo = DateTime.Parse(form["dateTo"].ToString());
                    var timeSend = TimeSpan.Parse(form["timeSend"].ToString());
                    var schedule = form["schedule"];
                    var scheduleTypeData = form["scheduleTypeData"];

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    var strdetailsLimited = Convert.ToString(form["DetailsLimited"]);
                    var detailsLimited = JsonConvert.DeserializeObject<dynamic>(strdetailsLimited);

                    int countDetail = 0;
                    #endregion

                    #region Verify
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                    }
                    //===========================Thêm Xét duyệt không có detail thì hủy CallLog  - TRUNGNC3 - 21.10.2016 - Loại 155
                    if (countDetail == 0 && new List<int>() { 23, 37, 60, 22, 63, 28, 32, 68, 115, 130, 152, 155, 161, 163 }.Contains(request.TypeId))
                    {
                        TempData["Message"] = "Yêu cầu không có thông tin chi tiết<br/>Yêu cầu đã bị hủy.";
                        return RedirectToAction("Create", "Requests");
                    }
                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;
                    //▼ Edit - ChuongNT3 - 18/12/2017 - Bỏ bước ASM
                    var rq_stepNo = 0;
                    byte rq_Status = 0;
                    //▼  Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC 
                    //▼  LuanNT44-13/11/2019-23
                    if (request.TypeId == 23)
                    {
                        string CompanyCodeB1_Inside = GetOrganizationHierachiesBySenderHC_23(); // LuanNT44-10/01/2020-Hân YC thêm mã kho truyền sang POS
                        DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
                        string job_23 = "";
                        string Region_23 = "";
                        if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
                        {
                            job_23 = tableEmpDetail.Rows[0]["JobTitleCode"].ToString();
                            Region_23 = tableEmpDetail.Rows[0]["Region"].ToString();
                        }
                        if (job_23 == "00304")
                        {
                            DataTable dt_details = new DataTable();
                            dt_details.Columns.Add("ProductGroup", typeof(string));
                            dt_details.Columns.Add("Item", typeof(int));
                            dt_details.Columns.Add("ItemGroup", typeof(int));
                            dt_details.Columns.Add("QuantityTonKho", typeof(string));
                            dt_details.Columns.Add("Quantity", typeof(int));
                            dt_details.Columns.Add("Price", typeof(int));
                            dt_details.Columns.Add("Sum", typeof(int));
                            dt_details.Columns.Add("Unit", typeof(string));
                            dt_details.Columns.Add("Note", typeof(string));
                            dt_details.Columns.Add("NhanVienTT", typeof(string));
                            dt_details.Columns.Add("SoLuongTT", typeof(string));
                            dt_details.Columns.Add("ShopDatAo", typeof(string));
                            dt_details.Columns.Add("SLDat", typeof(string));
                            dt_details.Columns.Add("GhiChuDat", typeof(string));
                            dt_details.Columns.Add("MaPB_BO", typeof(string));
                            dt_details.Columns.Add("CompanyCodeB1", typeof(string)); // LuanNT44-10/01/2020-Hân YC thêm mã kho truyền sang POS
                            foreach (var item in details)
                            {
                                if (item.Item > 0)
                                {
                                    //▼ LuanNT44-10/01/2020-Hân YC thêm mã kho truyền sang POS
                                    string CompanyCodeB1_Request = item.CompanyCodeB1;
                                    if (CompanyCodeB1_Request == "" || CompanyCodeB1_Request == null)
                                    {
                                        CompanyCodeB1_Request = CompanyCodeB1_Inside;
                                    }
                                    dt_details.Rows.Add(
                                        item.ProductGroup,
                                        item.Item,
                                        item.ItemGroup,
                                        item.QuantityTonKho,
                                        item.Quantity,
                                        item.Price,
                                        item.Sum,
                                        item.Unit,
                                        item.Note,
                                        item.NhanVienTT,
                                        item.SoLuongTT,
                                        item.ShopDatAo,
                                        item.SLDat,
                                        item.GhiChuDat,
                                        item.MaPB_BO,
                                        CompanyCodeB1_Request
                                    );
                                    //▲ LuanNT44-10/01/2020-Hân YC thêm mã kho truyền sang POS
                                }
                            }

                            if (dt_details.Rows.Count > 0)
                            {
                                string shopSender23 = "";
                                if (shopUserSent != null)
                                {
                                    shopSender23 = shopUserSent.WarehouseCode;
                                }
                                else
                                {
                                    shopSender23 = UserManager.CurrentUser.WarehouseCode;
                                }
                                try
                                {
                                    bool Approved_23 = (form["PassApproved"] != null && form["PassApproved"].ToString() == "1") ? true : false;
                                    SqlParameter[] para = {
                                    new SqlParameter("@Details",dt_details),
                                    new SqlParameter("@Title",Convert.ToString(form["TitleRequest"])),
                                    new SqlParameter("@Sender", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@FromShop",shopSender23),
                                    new SqlParameter("@FromOffice", UserManager.CurrentUser.OrganizationHierachyCode),
                                    new SqlParameter("@Message", message),
                                    new SqlParameter("@Approved", Approved_23),
                                    new SqlParameter("@Region", Region_23)};

                                    DataTable tableCreateRequest000304 = sql.ExecuteCommand("sp_CreateRequestDetails_23_job_00304", CommandType.StoredProcedure, para);
                                    long IdRequest_not00304 = 0;
                                    List<long> IdRequest_00304 = new List<long>();
                                    string message_23 = "";
                                    int Result_23 = 0;
                                    if (tableCreateRequest000304 != null && tableCreateRequest000304.Rows.Count > 0)
                                    {
                                        Result_23 = int.Parse(tableCreateRequest000304.Rows[0]["Resutl"].ToString());
                                        message_23 = tableCreateRequest000304.Rows[0]["message_23"].ToString();
                                        if (Result_23 == 1)
                                        {
                                            foreach (DataRow row in tableCreateRequest000304.Rows)
                                            {
                                                if (int.Parse(row["TypeCreate"].ToString()) == 1)
                                                {
                                                    IdRequest_not00304 = long.Parse(row["IdRequest"].ToString());
                                                }
                                                else
                                                {
                                                    IdRequest_00304.Add(long.Parse(row["IdRequest"].ToString()));
                                                }
                                            }
                                        }
                                        else
                                        {
                                            TempData["Message"] = message_23;
                                            return RedirectToAction("Index", "Home");
                                        }
                                    }
                                    if (Result_23 == 1)
                                    {
                                        if (IdRequest_not00304 > 0)
                                        {
                                            DataTable dt = new DataTable();
                                            //dt.Columns.Add("ItemGroup", typeof(string));
                                            dt.Columns.Add("MaNhom", typeof(string));
                                            dt.Columns.Add("DinhMuc", typeof(string));
                                            dt.Columns.Add("Vuot", typeof(string));
                                            dt.Columns.Add("Sum", typeof(string));
                                            dt.Columns.Add("shopUserSent", typeof(string));
                                            dt.Columns.Add("request", typeof(string));
                                            foreach (var item in detailsLimited)
                                            {
                                                if (item.Vuot > 0)
                                                {
                                                    if (item.MaNhom != 1)
                                                    {
                                                        dt.Rows.Add(
                                                            //item.ItemGroup,
                                                            item.ItemGroup,
                                                            item.DinhMuc,
                                                             item.HanMuc,
                                                            item.Sum,
                                                            item.shopUserSent = (shopUserSent == null ? string.Empty : shopUserSent.WarehouseCodeB1),
                                                            IdRequest_not00304
                                                        );
                                                    }
                                                }
                                            }
                                            if (dt.Rows.Count > 0)
                                            {
                                                SqlParameter[] para23 = {
                                                    new SqlParameter("@Table",dt),
                                                    new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode),
                                                    new SqlParameter("@ShopCode", UserManager.CurrentUser.WarehouseCode)};

                                                DataTable tableSentMail = sql.ExecuteCommand("sp_sentmailvuotdinhmuc", CommandType.StoredProcedure, para23);
                                            }
                                            //tách CL sau tạo:
                                            SqlParameter[] paramtach_23 = new SqlParameter[] { new SqlParameter("@RequestId", IdRequest_not00304), };
                                            DataTable tableSpl = sql.ExecuteCommand("Request_CupParent_ProductHC", CommandType.StoredProcedure, paramtach_23);

                                            //Sinh phiếu vi phạm:
                                            string DK = form["CheckViolation"].ToString();
                                            if (DK == "1")
                                            {
                                                SqlParameter[] paramViPham = new SqlParameter[] {
                                                    new SqlParameter("@RequestId",IdRequest_not00304),
                                                    new SqlParameter("@Shop",UserManager.CurrentUser.WarehouseCode),
                                                    new SqlParameter("@Sender",UserManager.CurrentUser.InsideCode)};
                                                sql.ExecuteWithoutResult("sp_CreatePhieuViPham_DoDungHanhChinh", CommandType.StoredProcedure, paramViPham);
                                            }
                                        }
                                        TempData["Message"] = message_23;
                                        return RedirectToAction("Index", "Home");
                                    }

                                }
                                catch (Exception ex)
                                {
                                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                                    return RedirectToAction("Index", "Home");
                                }

                            }
                            TempData["Message"] = "Không tạo được Request ! Details null";
                            return RedirectToAction("Index", "Home");
                        }
                        else
                        {
                            if (UserManager.CurrentUser.WarehouseCode != null && UserManager.CurrentUser.WarehouseCode != "")
                            {
                                rq_stepNo = 2;
                                rq_Status = Key.StatusRequest.Processing;
                            }
                            else
                            {
                                //▼ LuanNT44-09/10/2019-23  // LuanNT44-15/10/2019-23
                                //▼ LuanNT44-10/01/2020-Hân YC thêm mã kho truyền sang POS
                                if (details != null)
                                {
                                    string CompanyCodeB1_flag = details[0].CompanyCodeB1;
                                    if (CompanyCodeB1_flag == "" || CompanyCodeB1_flag == null)
                                    {
                                        CompanyCodeB1_flag = CompanyCodeB1_Inside;
                                    }
                                    request.CompanyCodeB1 = CompanyCodeB1_flag;
                                    request.SenderOffice_BI = details[0].MaPB_BO;
                                }
                                //▲ LuanNT44-10/01/2020-Hân YC thêm mã kho truyền sang POS
                                //▲ LuanNT44-09/10/2019-23
                                if (GetLeaderOrganizationByEmp() == 1)
                                {
                                    rq_stepNo = 2;
                                    rq_Status = Key.StatusRequest.Processing;
                                }
                                else
                                {
                                    rq_stepNo = 1;
                                    rq_Status = Key.StatusRequest.Waitting;

                                }
                            }
                        }
                    }
                    //▲ LuanNT44-13/11/2019-23
                    //▲  Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC
                    //▼ Add - LuanNT44 - 18/04/2018 - Bỏ bước Trưởng bộ phận duyệt
                    else if (request.TypeId == 204)
                    {
                        rq_stepNo = 2;
                        rq_Status = Key.StatusRequest.Waitting;
                    }
                    //▲ Add - LuanNT44 - 18/04/2018 - Bỏ bước Trưởng bộ phận duyệt
                    else
                    {
                        rq_stepNo = 1;
                        rq_Status = Key.StatusRequest.Waitting;
                    }
                    request.StepNo = rq_stepNo;
                    request.Status = rq_Status;
                    //▲ Edit - ChuongNT3 - 18/12/2017 - Bỏ bước ASM
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (request.TypeId == 165)
                    {
                        request.FromShop = details[0].ShopCode;
                    }
                    //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                    else if (request.TypeId == 22)
                    {
                        request.FromShop = details[0].ShopCode;
                    }
                    //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                    else if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;
                    //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                    if (request.TypeId == 22)
                    {
                        request.FromShop = details[0].ShopCode;
                        if (UserManager.CurrentUser.WarehouseCode == "" || UserManager.CurrentUser.WarehouseCode == null)
                        {
                            request.Status = 2;
                            request.StepNo = 2;
                            RequestStep requeststep = new RequestStep();
                            requeststep.RequestId = request.Id;
                            requeststep.StepNo = 1;
                            requeststep.TimeStart = DateTime.Now;
                            requeststep.TimeEnd = DateTime.Now;
                            requeststep.Assigner = UserManager.CurrentUser.InsideCode;
                            requeststep.TimeCreate = DateTime.Now;
                            requeststep.Status = Key.Status.Available;
                            db.RequestSteps.Add(requeststep);
                        }
                    }
                    //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                    if (new List<int>() {44, 45, 1, 2, 3, 4, 16, 25, 40, 41, 43, 132  //LuanNT44 - 11/04/2020 - 24 - edit
                        
                        //▼	Add - VietMXH - 15/11/2017 - 184:Hỗ trợ F.Friends==================================================
                        , 184
                        //▲	Add - VietMXH - 15/11/2017 - 184:Hỗ trợ F.Friends==================================================

                     }.Contains(request.TypeId))
                    {
                        #region sữa chữa cơ sở vật chất , IT , Hỗ trợ hệ thống
                        request.GroupId = form["GroupId"].ToString().EParseToInt();
                        if (request.TypeId == 3)
                        {
                            request.TimeFutureFinish = null;
                        }//▼  Add - LuanNT44 - 25/06/2019 - Màn hình định nghĩa CL Hỗ trợ bán hàng
                        if (request.TypeId == 25)
                        {
                            string Function25 = form["ID_function"].ToString(); // Add-LuanNT44-20/08/2019-25
                            request.Note = Function25; // Add-LuanNT44-20/08/2019-25
                            string Note25 = form["NoteHDSD"].ToString();
                            Conversation message25 = new Conversation();
                            message25.RequestId = request.Id;
                            message25.Message = Note25;
                            message25.StepNo = 0;
                            message25.TimeCreate = DateTime.Now;
                            message25.Type = 15;
                            message25.Status = 1;
                            message25.Sender = UserManager.CurrentUser.InsideCode;
                            message25.CreateBy = UserManager.CurrentUser.InsideCode;
                            db.Conversations.Add(message25);
                        }//▲  Add - LuanNT44 - 25/06/2019 - Màn hình định nghĩa CL Hỗ trợ bán hàng
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        #endregion
                    }
                    else if (request.TypeId == 60)
                    {
                        #region Xác nhận công nợ
                        foreach (var item in details)
                        {
                            string shop = item.shopId;
                            ShopDAL shopDalX = new ShopDAL();
                            var ware = shopDalX.Get(shop);

                            string timeStart = item.dateStart;
                            string timeEnd = item.dateEnd;
                            string[] timeArr = timeStart.Split('/');
                            string[] timeArr2 = timeEnd.Split('/');
                            if (!requestDics.ContainsKey(shop))
                            {
                                var requestAnother = new Request();
                                requestAnother.Sender = request.Sender;
                                requestAnother.StepNo = request.StepNo;

                                if (ware != null) requestAnother.Title = ware.WarehouseName + " - " + request.Title;
                                else requestAnother.Title = request.Title;

                                requestAnother.StepStatus = request.StepStatus;
                                requestAnother.TimeCreate = request.TimeCreate;
                                requestAnother.TimeAppear = request.TimeAppear;
                                requestAnother.isHighlight = request.isHighlight;
                                requestAnother.isParent = request.isParent;
                                requestAnother.Status = Key.Status.Available;
                                requestAnother.CreateBy = request.CreateBy;
                                requestAnother.FromShop = request.FromShop;
                                requestAnother.FromOffice = request.FromOffice;
                                requestAnother.TypeId = request.TypeId;
                                requestAnother.ToShop = item.shopId;
                                requestAnother.GroupId = 0;
                                requestAnother.TimeFutureFinish = request.TimeFutureFinish;
                                db.Requests.Add(requestAnother);
                                db.SaveChanges();
                                requestDics.Add(shop, requestAnother);

                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = requestAnother.Id;
                                detail.ShopCode = item.shopId;
                                detail.CustomerCode = item.customerId;
                                detail.CustomerName = item.customerName;
                                detail.SaleCode = item.saleCode;

                                if (timeArr.Length == 3)
                                {
                                    string format = String.Format("{0}/{1}/{2}"
                                       , timeArr[0].Length == 1 ? "d" : "dd"
                                       , timeArr[1].Length == 1 ? "M" : "MM"
                                       , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                    detail.Time1 = timeStart.EParseToDateTime(format);
                                }
                                if (timeArr2.Length == 3)
                                {
                                    string format = String.Format("{0}/{1}/{2}"
                                        , timeArr2[0].Length == 1 ? "d" : "dd"
                                        , timeArr2[1].Length == 1 ? "M" : "MM"
                                        , timeArr2[2].Length == 2 ? "yy" : "yyyy");
                                    detail.Time2 = timeEnd.EParseToDateTime(format);
                                }

                                detail.Note = item.note;
                                detail.Money1 = float.Parse(item.priceTc.ToString());
                                detail.Money2 = float.Parse(item.priceTcout.ToString());
                                detail.Money3 = float.Parse(item.priceTcout.ToString());
                                detail.Status = Key.Status.Available;
                                db.RequestDetails.Add(detail);

                                // default cc :
                                sql.ExecuteWithoutResult("Assigner_InsertByJob", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@RequestId",requestAnother.Id),
                                new SqlParameter("@Jobtitle","00241,00002"),//ASM, RSM
                                new SqlParameter("@StepNo",0),
                                new SqlParameter("@Type",Key.TypeAssigner.Cc)
                                });
                            }
                            else
                            {
                                var requestAnother = requestDics.FirstOrDefault(x => x.Key == shop).Value;
                                if (requestAnother != null)
                                {
                                    RequestDetail detail = new RequestDetail();
                                    detail.RequestId = requestAnother.Id;
                                    detail.ShopCode = item.shopId;
                                    detail.CustomerCode = item.customerId;
                                    detail.CustomerName = item.customerName;
                                    detail.SaleCode = item.saleCode;
                                    if (timeArr.Length == 3)
                                    {
                                        string format = String.Format("{0}/{1}/{2}"
                                           , timeArr[0].Length == 1 ? "d" : "dd"
                                           , timeArr[1].Length == 1 ? "M" : "MM"
                                           , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                        detail.Time1 = timeStart.EParseToDateTime(format);
                                    }
                                    if (timeArr2.Length == 3)
                                    {
                                        string format = String.Format("{0}/{1}/{2}"
                                            , timeArr2[0].Length == 1 ? "d" : "dd"
                                            , timeArr2[1].Length == 1 ? "M" : "MM"
                                            , timeArr2[2].Length == 2 ? "yy" : "yyyy");
                                        detail.Time2 = timeEnd.EParseToDateTime(format);
                                    }
                                    detail.Note = item.note;
                                    detail.Money1 = float.Parse(item.priceTc.ToString());
                                    detail.Money2 = float.Parse(item.priceTcout.ToString());
                                    detail.Money3 = float.Parse(item.priceTcout.ToString());
                                    detail.Status = Key.Status.Available;
                                    db.RequestDetails.Add(detail);
                                }
                            }
                        }
                        db.SaveChanges();
                        #endregion
                    }
                    //▼  Add - LuanNT44 - 11/04/2020 - 24 - edit
                    else if (request.TypeId == 24)
                    {
                        #region add type "CSVC"
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;

                            detail.Property1 = item.Nhomhangmuc;
                            detail.Property2 = item.Chitiethangmuc;
                            if (item.Ngaydukien.ToString() != "" && item.Ngaydukien.ToString() != null)
                            {
                                detail.Time1 = DateTime.ParseExact(item.Ngaydukien.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            }
                            detail.Property3 = item.Donvi;
                            detail.Quantity = item.Soluong;
                            if (item.Dongia > 0)
                            {
                                detail.Quantity1 = item.Dongia;
                                detail.Quantity4 = item.Soluong * item.Dongia;
                            }
                            detail.Quantity2 = item.DongiaThuc;
                            detail.Quantity3 = item.Soluong * item.DongiaThuc;
                            detail.Approved = item.isShop;
                            detail.Quantity5 = item.Type;
                            detail.Note = item.Ghichu;
                            detail.Property4 = item.idNhomHangmuc;
                            db.RequestDetails.Add(detail);

                        }
                        if (details[0].Type == 1)
                        {
                            var content_24 = new Conversation();
                            content_24.RequestId = request.Id;
                            content_24.Status = 1;
                            content_24.StepNo = 0;
                            content_24.Type = 1;
                            content_24.CreateBy = UserManager.CurrentUser.InsideCode;
                            content_24.TimeCreate = DateTime.Now;
                            content_24.Message = details[0].content;
                            db.Conversations.Add(content_24);
                        }
                        db.SaveChanges();
                        #endregion
                    }
                    //▲  Add - LuanNT44 - 11/04/2020 - 24 - edit
                    else if (new List<int>() { 23, 22, 63, 28, 32, 68, 161 }.Contains(request.TypeId))
                    {
                        #region Code
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        if (request.TypeId == 23)
                        {
                            #region Chi tiết va vượt mức

                            foreach (var item in details)
                            {
                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = request.Id;
                                detail.ItemId = item.Item;
                                detail.Quantity = item.Quantity;
                                if (item.QuantityTonKho >= 0 && item.QuantityTonKho != null)
                                {
                                    detail.Quantity3 = item.QuantityTonKho;
                                }
                                detail.Sum = item.Quantity * item.Price;
                                detail.Note = item.Note;
                                detail.Price = item.Price;
                                detail.EmpCode3 = item.ProductGroup;
                                detail.Property13 = item.NhanVienTT; // LuanNT44-06/09/2019-23
                                detail.Property14 = item.SoLuongTT; // LuanNT44-06/09/2019-23  -- LuanNT44-20/09/2019-23
                                detail.Status = Key.Status.Available;
                                detail.Approved = (form["PassApproved"] != null && form["PassApproved"].ToString() == "1") ? true : false;
                                db.RequestDetails.Add(detail);
                            }
                            ////=========== Nghia tv5 21/09/2017 Code sent mail vượt định mức (STAR)
                            DataTable dt = new DataTable();
                            //dt.Columns.Add("ItemGroup", typeof(string));
                            dt.Columns.Add("MaNhom", typeof(string));
                            dt.Columns.Add("DinhMuc", typeof(string));
                            dt.Columns.Add("Vuot", typeof(string));
                            dt.Columns.Add("Sum", typeof(string));
                            dt.Columns.Add("shopUserSent", typeof(string));
                            dt.Columns.Add("request", typeof(string));
                            foreach (var item in detailsLimited)
                            {

                                if (item.Vuot > 0) // Add - NghiaTV5 - 03/10/2017 - thêm điều kiện vượt lớn hơn 0  (STAR)
                                {
                                    //Edit - ThuongNM2 - 2018/10/15 Thay đổi rule HM
                                    if (item.MaNhom != 1)
                                    {
                                        dt.Rows.Add(
                                                  //item.ItemGroup,
                                                  item.ItemGroup,
                                                  item.DinhMuc,
                                                   item.HanMuc,//Add - TrungNC3 - 20/10/2017 - Thêm hạn mức trả về khi gọi - Cập nhật mã nhóm sản phẩm
                                                  item.Sum,
                                                  item.shopUserSent = (shopUserSent == null ? string.Empty : shopUserSent.WarehouseCodeB1),
                                                  request.Id
                                              );
                                    }
                                    //Edit - ThuongNM2 - 2018/10/15 Thay đổi rule HM
                                }// Add - NghiaTV5 - 03/10/2017 - thêm điều kiện vượt lớn hơn 0 (END)
                            }

                            if (dt.Rows.Count > 0)// Add - NghiaTV5 - 03/10/2017 -thêm điều kiện dt lớn 0 (STAR)
                            {
                                SqlParameter[] para = {
                                new SqlParameter("@Table",dt),
                                new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@ShopCode", UserManager.CurrentUser.WarehouseCode)
                            };

                                DataTable tableSentMail = sql.ExecuteCommand("sp_sentmailvuotdinhmuc", CommandType.StoredProcedure, para);
                            }// Add - NghiaTV5 - 03/10/2017 - thêm điều kiện dt lớn 0 (END)

                            //▲ Add - NghiaTV5 - 02/10/2017 - Code sent mail vượt định mức (END)

                            //var itemUsed = new ItemUsedTmp();
                            //foreach (var item in detailsLimited)
                            //{
                            //    var itemUsed = new ItemUsedTmp();
                            //    itemUsed.GroupId = item.MaNhom;
                            //    itemUsed.GroupValue = 0 - Int32.Parse(item.Sum.ToString());
                            //    itemUsed.ShopCodeB1 = shopUserSent == null ? string.Empty : shopUserSent.WarehouseCodeB1;
                            //    itemUsed.RequestId = request.Id;
                            //    itemUsed.Month = DateTime.Now.Month;
                            //    itemUsed.Year = DateTime.Now.Year;
                            //    itemUsed.Status = Key.Status.Available;
                            //    db.ItemUsedTmps.Add(itemUsed);
                            //}
                            #endregion
                        }
                        else if (request.TypeId == 63)
                        {
                            #region chit tiet apple
                            foreach (var item in details)
                            {
                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = request.Id;
                                detail.ProductCode = item.productId;
                                detail.ProductName = item.productName;
                                detail.Quantity = item.quantity;
                                detail.Note = item.note;
                                detail.Status = Key.Status.Available;
                                db.RequestDetails.Add(detail);
                            }
                            request.Status = Key.StatusRequest.Complete;
                            #endregion
                        }
                        //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                        else if (request.TypeId == 22)
                        {
                            #region chi tiet maketing order

                            foreach (var item in details)
                            {
                                RequestDetail requestDetail = new RequestDetail();
                                requestDetail.RequestId = request.Id;
                                requestDetail.ItemId = item.ItemId;
                                requestDetail.ProductName = item.ItemName;
                                requestDetail.Quantity = item.Quantity;
                                // requestDetail.QuantityAvaiable = null;                                
                                requestDetail.Price = item.Price;
                                requestDetail.Sum = item.Sum;
                                requestDetail.Note = item.Note;
                                requestDetail.Status = Key.Status.Available;
                                requestDetail.Property1 = item.FormsProcessing;
                                if (item.FormsProcessing == "Bảo hành")
                                {
                                    requestDetail.Quantity1 = item.Quantity;
                                    requestDetail.Quantity2 = 0;
                                }
                                else if (item.FormsProcessing == "Cấp mới")
                                {
                                    requestDetail.Quantity1 = 0;
                                    requestDetail.Quantity2 = item.Quantity;
                                }
                                requestDetail.ShopCode = item.ShopCodeB1;
                                db.RequestDetails.Add(requestDetail);
                                string ShopCodeMar22 = string.Empty;
                                ShopCodeMar22 = item.ShopCodeB1 != null ? item.ShopCodeB1 : "";
                                int ItemIdMar = item.ItemId != null ? item.ItemId : null;
                                int QuantityMar = item.Quantity != null ? item.Quantity : null;
                                SqlParameter[] param = new SqlParameter[]{
                                    new SqlParameter("@ShopCode",ShopCodeMar22),
                                    new SqlParameter("@ItemId",ItemIdMar),
                                    new SqlParameter("@Quantity",QuantityMar),
                                    new SqlParameter("@RequestId",request.Id),
                                };
                                sql.ExecuteWithoutResult("sp_Insert_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                            }
                            #endregion
                        }
                        //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                        else if (request.TypeId == 161) //---- MKT khối BO
                        {
                            #region chi tiet maketing order

                            foreach (var item in details)
                            {
                                RequestDetail requestDetail = new RequestDetail();
                                requestDetail.RequestId = request.Id;
                                requestDetail.ItemId = item.ItemId;
                                requestDetail.ProductName = item.ItemName;
                                requestDetail.Quantity = item.Quantity;
                                // requestDetail.QuantityAvaiable = null;                                
                                requestDetail.Price = item.Price;
                                requestDetail.Sum = item.Sum;
                                requestDetail.Note = item.Note;
                                requestDetail.Status = Key.Status.Available;
                                requestDetail.Property1 = item.FormsProcessing;
                                if (item.FormsProcessing == "Bảo hành")
                                {
                                    requestDetail.Quantity1 = item.Quantity;
                                    requestDetail.Quantity2 = 0;
                                }
                                else if (item.FormsProcessing == "Cấp mới")
                                {
                                    requestDetail.Quantity1 = 0;
                                    requestDetail.Quantity2 = item.Quantity;
                                }
                                db.RequestDetails.Add(requestDetail);
                            }
                            #endregion
                        }
                        else if (request.TypeId == 28)
                        {
                            #region Quỹ

                            foreach (var item in details)
                            {
                                RequestDetail requestDetail = new RequestDetail();
                                requestDetail.RequestId = request.Id;
                                requestDetail.Property1 = item.FundType;

                                string time = item.TimeImport;
                                string[] timeArr = time.Split('/');
                                if (timeArr.Length == 3)
                                {
                                    string format = String.Format("{0}/{1}/{2}"
                                       , timeArr[0].Length == 1 ? "d" : "dd"
                                       , timeArr[1].Length == 1 ? "M" : "MM"
                                       , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                    requestDetail.Time1 = time.EParseToDateTime(format);
                                }
                                requestDetail.Quantity1 = item.MoneyReal;
                                requestDetail.Quantity2 = item.MoneyB1CRM;
                                requestDetail.Quantity3 = item.MoneyCA0202;
                                requestDetail.Note = item.Note;
                                requestDetail.Status = Key.Status.Available;

                                db.RequestDetails.Add(requestDetail);
                            }
                            #endregion
                        }
                        else if (request.TypeId == 32)
                        {
                            #region #MoneyAdvance 04/09/2015
                            foreach (var item in details)
                            {
                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = request.Id;
                                detail.EmpCode = item.EmployId;
                                detail.Quantity = item.Money;
                                detail.Property1 = item.Type;
                                detail.Property2 = item.BankNumber;
                                detail.Property3 = item.BankName;

                                string dateReturn = item.DateReturn;
                                string[] timeArr = dateReturn.Split('/');
                                if (timeArr.Length == 3)
                                {
                                    string format = String.Format("{0}/{1}/{2}"
                                       , timeArr[0].Length == 1 ? "d" : "dd"
                                       , timeArr[1].Length == 1 ? "M" : "MM"
                                       , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                    detail.Time1 = dateReturn.EParseToDateTime(format);
                                }

                                detail.Note = item.Reason;
                                detail.Status = Key.Status.Available;

                                db.RequestDetails.Add(detail);
                            }
                            #endregion
                        }
                        else if (request.TypeId == 68)
                        {
                            //'▼(#002)Add===================================  
                            #region InventoryCash 09/09/2015
                            foreach (var item in details)
                            {
                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = request.Id;
                                detail.Price = item.Denomination;
                                detail.Quantity = item.Quantity;
                                detail.Note = item.Note;
                                detail.Status = Key.Status.Available;
                                db.RequestDetails.Add(detail);
                            }
                            #endregion
                            //'▲(#00)Add===================================
                        }
                        #endregion
                    }
                    else if (request.TypeId == 130)
                    {
                        #region Tach Callog theo shop do hành chính tạo loại 130
                        foreach (var item in details)
                        {
                            string shop = item.ShopCode;
                            ShopDAL shopDalX = new ShopDAL();
                            var ware = shopDalX.Get(shop);

                            if (!requestDics.ContainsKey(shop))
                            {
                                var requestAnother = new Request();
                                requestAnother.Sender = UserManager.CurrentUser.InsideCode;
                                requestAnother.StepNo = request.StepNo;

                                if (ware != null) requestAnother.Title = ware.WarehouseName + " - " + request.Title;
                                else requestAnother.Title = request.Title;

                                requestAnother.StepStatus = request.StepStatus;
                                requestAnother.TimeCreate = request.TimeCreate;
                                requestAnother.TimeAppear = request.TimeAppear;
                                requestAnother.isHighlight = request.isHighlight;
                                requestAnother.isParent = request.isParent;
                                requestAnother.Status = Key.Status.Available;
                                requestAnother.CreateBy = request.CreateBy;
                                requestAnother.FromShop = item.ShopCode;
                                requestAnother.FromOffice = request.FromOffice;
                                requestAnother.TypeId = request.TypeId;
                                requestAnother.GroupId = 0;
                                requestAnother.TimeFutureFinish = request.TimeFutureFinish;
                                //  requestAnother.ErrorCode = "1";
                                db.Requests.Add(requestAnother);
                                db.SaveChanges();
                                requestDics.Add(shop, requestAnother);

                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = requestAnother.Id;
                                detail.ItemId = item.ItemId;
                                detail.Quantity = item.Quantity;
                                detail.Sum = item.Quantity * item.Price;
                                detail.Note = item.Note;
                                detail.Price = item.Price;
                                detail.Status = Key.Status.Available;
                                detail.ShopCode = item.ShopCode;
                                //---------- Số lượng tồn kho
                                detail.Quantity3 = item.InventoryNumber;
                                detail.Property1 = item.HinhThucXuat;
                                db.RequestDetails.Add(detail);


                            }
                            else
                            {
                                var requestAnother = requestDics.FirstOrDefault(x => x.Key == shop).Value;
                                if (requestAnother != null)
                                {
                                    RequestDetail detail = new RequestDetail();
                                    detail.RequestId = requestAnother.Id;
                                    detail.ItemId = item.ItemId;
                                    detail.Quantity = item.Quantity;
                                    detail.Sum = item.Quantity * item.Price;
                                    detail.Note = item.Note;
                                    detail.Price = item.Price;
                                    detail.Status = Key.Status.Available;
                                    detail.ShopCode = item.ShopCode;
                                    //---------- Số lượng tồn kho
                                    detail.Quantity3 = item.InventoryNumber;
                                    detail.Property1 = item.HinhThucXuat;
                                    db.RequestDetails.Add(detail);
                                }
                            }

                        }

                        #endregion
                    }
                    //Thêm màn hình tạo hành chính tạo shop mới - loại 155 - 18.10.2016 - TrungNC3
                    else if (request.TypeId == 155)
                    {
                        #region Tach Callog theo shop do hành chính tạo cho shop mới loại 155
                        foreach (var item in details)
                        {
                            string shop = item.ShopCode;
                            ShopDAL shopDalX = new ShopDAL();
                            var ware = shopDalX.Get(shop);

                            if (!requestDics.ContainsKey(shop))
                            {
                                var requestAnother = new Request();
                                requestAnother.Sender = UserManager.CurrentUser.InsideCode;
                                requestAnother.StepNo = 2;

                                if (ware != null) requestAnother.Title = ware.WarehouseName + " - " + request.Title;
                                else requestAnother.Title = request.Title;

                                requestAnother.StepStatus = request.StepStatus;
                                requestAnother.TimeCreate = request.TimeCreate;
                                requestAnother.TimeAppear = request.TimeAppear;
                                requestAnother.isHighlight = request.isHighlight;
                                requestAnother.isParent = request.isParent;
                                requestAnother.Status = Key.Status.Available;
                                requestAnother.CreateBy = request.CreateBy;
                                requestAnother.FromShop = item.ShopCode;
                                requestAnother.FromOffice = request.FromOffice;
                                requestAnother.TypeId = request.TypeId;
                                requestAnother.GroupId = 0;
                                requestAnother.TimeFutureFinish = request.TimeFutureFinish;
                                //  requestAnother.ErrorCode = "1";
                                db.Requests.Add(requestAnother);
                                db.SaveChanges();
                                requestDics.Add(shop, requestAnother);

                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = requestAnother.Id;
                                detail.ItemId = item.ItemId;
                                detail.Quantity = item.Quantity;
                                detail.Quantity3 = item.QuantityTonKho;
                                detail.Sum = item.Quantity * item.Price;
                                detail.Note = item.Note;
                                detail.Price = item.Price;
                                detail.Status = Key.Status.Available;
                                detail.ShopCode = item.ShopCode;
                                db.RequestDetails.Add(detail);


                            }
                            else
                            {
                                var requestAnother = requestDics.FirstOrDefault(x => x.Key == shop).Value;
                                if (requestAnother != null)
                                {
                                    RequestDetail detail = new RequestDetail();
                                    detail.RequestId = requestAnother.Id;
                                    detail.ItemId = item.ItemId;
                                    detail.Quantity = item.Quantity;
                                    detail.Quantity3 = item.QuantityTonKho;
                                    detail.Sum = item.Quantity * item.Price;
                                    detail.Note = item.Note;
                                    detail.Price = item.Price;
                                    detail.Status = Key.Status.Available;
                                    detail.ShopCode = item.ShopCode;
                                    db.RequestDetails.Add(detail);
                                }
                            }

                        }
                        #endregion
                    }
                    //Thêm màn hình tạo hành chính tạo shop mới - loại 152 - 18.10.2016 - TrungNC3
                    else if (request.TypeId == 152)
                    {
                        #region Tach Callog theo shop do phòng Đào tạo hoặc phòng Nhân sự tạo loại 152
                        foreach (var item in details)
                        {
                            string shop = item.ShopCode;
                            ShopDAL shopDalX = new ShopDAL();
                            var ware = shopDalX.Get(shop);

                            //NgoanHT - 23/10/2017 - 152 - Thêm
                            WebCallLog.Models.F03_OrganizationHierachies O = new WebCallLog.Models.F03_OrganizationHierachies();
                            if (ware == null || ware.ToString() == "")
                            {
                                O = insDB.F03_OrganizationHierachies.FirstOrDefault(x => x.OrganizationHierachyCode == shop && x.Status == Key.StatusInside.Avaiable);
                            }
                            //NgoanHT - 23/10/2017 - 152 - Thêm
                            if (!requestDics.ContainsKey(shop))
                            {
                                var requestAnother = new Request();
                                requestAnother.Sender = UserManager.CurrentUser.InsideCode;
                                requestAnother.StepNo = request.StepNo;

                                if (ware != null) requestAnother.Title = ware.WarehouseName + " - " + request.Title;
                                else if (O != null) requestAnother.Title = O.OrganizationHierachyName + " - " + request.Title; //NgoanHT - 23/10/2017 - 152 - Thêm
                                else requestAnother.Title = request.Title;

                                requestAnother.StepStatus = request.StepStatus;
                                requestAnother.TimeCreate = request.TimeCreate;
                                requestAnother.TimeAppear = request.TimeAppear;
                                requestAnother.isHighlight = request.isHighlight;
                                requestAnother.isParent = request.isParent;
                                requestAnother.Status = Key.Status.Available;
                                requestAnother.CreateBy = request.CreateBy;
                                requestAnother.FromShop = item.ShopCode;
                                requestAnother.FromOffice = request.FromOffice;
                                requestAnother.TypeId = request.TypeId;
                                requestAnother.GroupId = 0;
                                requestAnother.TimeFutureFinish = request.TimeFutureFinish;
                                db.Requests.Add(requestAnother);
                                db.SaveChanges();
                                requestDics.Add(shop, requestAnother);

                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = requestAnother.Id;
                                detail.ItemId = item.ItemId;
                                detail.Property1 = item.Quantity_S;
                                detail.Property2 = item.Quantity_M;
                                detail.Property3 = item.Quantity_L;
                                detail.Property4 = item.Quantity_XL;
                                detail.Property5 = item.Quantity_XXL;
                                detail.Quantity = ((int)item.Quantity_S + (int)item.Quantity_M + (int)item.Quantity_L + (int)item.Quantity_XL + (int)item.Quantity_XXL);
                                detail.Quantity1 = ((int)item.Quantity_S + (int)item.Quantity_M + (int)item.Quantity_L + (int)item.Quantity_XL + (int)item.Quantity_XXL);
                                detail.QuantityAvaiable = ((int)item.Quantity_S + (int)item.Quantity_M + (int)item.Quantity_L + (int)item.Quantity_XL + (int)item.Quantity_XXL);
                                detail.Sum = item.Sum;
                                detail.Note = item.Note;
                                detail.Price = item.Price;
                                detail.Status = Key.Status.Available;
                                detail.ShopCode = item.ShopCode;
                                detail.Quantity3 = item.InventoryNumber;
                                db.RequestDetails.Add(detail);

                            }
                            else
                            {
                                var requestAnother = requestDics.FirstOrDefault(x => x.Key == shop).Value;
                                if (requestAnother != null)
                                {
                                    RequestDetail detail = new RequestDetail();
                                    detail.RequestId = requestAnother.Id;
                                    detail.ItemId = item.ItemId;
                                    detail.Property1 = item.Quantity_S;
                                    detail.Property2 = item.Quantity_M;
                                    detail.Property3 = item.Quantity_L;
                                    detail.Property4 = item.Quantity_XL;
                                    detail.Property5 = item.Quantity_XXL;
                                    detail.Quantity = ((int)item.Quantity_S + (int)item.Quantity_M + (int)item.Quantity_L + (int)item.Quantity_XL + (int)item.Quantity_XXL);
                                    detail.Quantity1 = ((int)item.Quantity_S + (int)item.Quantity_M + (int)item.Quantity_L + (int)item.Quantity_XL + (int)item.Quantity_XXL);
                                    detail.QuantityAvaiable = ((int)item.Quantity_S + (int)item.Quantity_M + (int)item.Quantity_L + (int)item.Quantity_XL + (int)item.Quantity_XXL);
                                    detail.Sum = item.Sum;
                                    detail.Note = item.Note;
                                    detail.Price = item.Price;
                                    detail.Status = Key.Status.Available;
                                    detail.ShopCode = item.ShopCode;
                                    detail.Quantity3 = item.InventoryNumber;
                                    db.RequestDetails.Add(detail);

                                }
                            }
                        }

                        #endregion
                    }
                    else if (request.TypeId == 115)
                    {
                        #region Tach Callog theo shop do Mkts tạo
                        foreach (var item in details)
                        {
                            string shop = item.ShopCode;
                            ShopDAL shopDalX = new ShopDAL();
                            var ware = shopDalX.Get(shop);

                            if (!requestDics.ContainsKey(shop))
                            {
                                var requestAnother = new Request();
                                requestAnother.Sender = UserManager.CurrentUser.InsideCode;
                                requestAnother.StepNo = request.StepNo;

                                if (ware != null) requestAnother.Title = ware.WarehouseName + " - " + request.Title;
                                else requestAnother.Title = request.Title;

                                requestAnother.StepStatus = request.StepStatus;
                                requestAnother.TimeCreate = request.TimeCreate;
                                requestAnother.TimeAppear = request.TimeAppear;
                                requestAnother.isHighlight = request.isHighlight;
                                requestAnother.isParent = request.isParent;
                                requestAnother.Status = Key.Status.Available;
                                requestAnother.CreateBy = request.CreateBy;
                                requestAnother.FromShop = request.FromShop;
                                requestAnother.FromOffice = request.FromOffice;
                                requestAnother.TypeId = request.TypeId;
                                requestAnother.ToShop = item.ShopCode;
                                requestAnother.GroupId = 0;
                                requestAnother.TimeFutureFinish = request.TimeFutureFinish;
                                db.Requests.Add(requestAnother);
                                db.SaveChanges();
                                requestDics.Add(shop, requestAnother);

                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = requestAnother.Id;
                                detail.ShopCode = item.ShopCode;
                                detail.ItemId = item.ItemId;
                                detail.ProductName = item.ItemName;
                                detail.Imei = item.Imei;
                                detail.Quantity = item.Quantity;
                                detail.Price = item.Price;
                                detail.Sum = item.Sum;
                                detail.Property1 = item.FormsProcessing;
                                detail.Note = item.Note;
                                if (request.TypeId == 115 && detail.Property1 == "Cấp mới")
                                {
                                    detail.Quantity1 = 0;
                                    detail.Quantity2 = item.Quantity;
                                }
                                else if (request.TypeId == 115 && detail.Property1 == "Bảo hành")
                                {
                                    detail.Quantity1 = item.Quantity;
                                    detail.Quantity2 = 0;
                                }
                                detail.Status = Key.Status.Available;
                                db.RequestDetails.Add(detail);


                            }
                            else
                            {
                                var requestAnother = requestDics.FirstOrDefault(x => x.Key == shop).Value;
                                if (requestAnother != null)
                                {
                                    RequestDetail detail = new RequestDetail();
                                    detail.RequestId = requestAnother.Id;
                                    detail.ShopCode = item.ShopCode;
                                    detail.ItemId = item.ItemId;
                                    detail.ProductName = item.ItemName;
                                    detail.Imei = item.Imei;
                                    detail.Quantity = item.Quantity;
                                    detail.Price = item.Price;
                                    detail.Sum = item.Sum;
                                    detail.Property1 = item.FormsProcessing;
                                    detail.Note = item.Note;
                                    if (request.TypeId == 115 && detail.Property1 == "Cấp mới")
                                    {
                                        detail.Quantity1 = 0;
                                        detail.Quantity2 = item.Quantity;
                                    }
                                    else if (request.TypeId == 115 && detail.Property1 == "Bảo hành")
                                    {
                                        detail.Quantity1 = item.Quantity;
                                        detail.Quantity2 = 0;
                                    }
                                    detail.Status = Key.Status.Available;
                                    db.RequestDetails.Add(detail);
                                }
                            }

                        }
                        foreach (var item in detailsLimited)
                        {
                            var itemUsed = new ItemUsedTmp();
                            itemUsed.GroupId = item.MaNhom;
                            itemUsed.GroupValue = Int32.Parse(item.Sum.ToString());
                            itemUsed.ShopCodeB1 = shopUserSent == null ? string.Empty : shopUserSent.WarehouseCodeB1;
                            itemUsed.RequestId = request.Id;
                            itemUsed.Month = DateTime.Now.Month;
                            itemUsed.Year = DateTime.Now.Year;
                            itemUsed.Status = Key.Status.Available;

                            db.ItemUsedTmps.Add(itemUsed);
                        }
                        #endregion
                    }
                    else if (new List<int>() { 71, 88, 89 }.Contains(request.TypeId))
                    {
                        #region Tach Callog
                        foreach (var item in details)
                        {
                            string shop = item.ShopCode;
                            ShopDAL shopDalX = new ShopDAL();
                            var ware = shopDalX.Get(shop);

                            if (!requestDics.ContainsKey(shop))
                            {
                                var requestAnother = new Request();
                                requestAnother.Sender = UserManager.CurrentUser.InsideCode;
                                requestAnother.StepNo = request.StepNo;

                                if (ware != null) requestAnother.Title = ware.WarehouseName + " - " + request.Title;
                                else requestAnother.Title = request.Title;

                                requestAnother.StepStatus = request.StepStatus;
                                requestAnother.TimeCreate = request.TimeCreate;
                                requestAnother.TimeAppear = request.TimeAppear;
                                requestAnother.isHighlight = request.isHighlight;
                                requestAnother.isParent = request.isParent;
                                requestAnother.Status = Key.Status.Available;
                                requestAnother.CreateBy = request.CreateBy;
                                requestAnother.FromShop = request.FromShop;
                                requestAnother.FromOffice = request.FromOffice;
                                requestAnother.TypeId = request.TypeId;
                                requestAnother.ToShop = item.ShopCode;
                                requestAnother.GroupId = 0;
                                requestAnother.TimeFutureFinish = request.TimeFutureFinish;
                                db.Requests.Add(requestAnother);
                                db.SaveChanges();
                                requestDics.Add(shop, requestAnother);

                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = requestAnother.Id;
                                detail.ShopCode = item.ShopCode;
                                detail.ProductCode = item.ProductCode;
                                detail.ProductName = item.ProductName;
                                detail.Imei = item.Imei;
                                detail.Quantity = item.Quantity;
                                if (request.TypeId == 89)
                                {
                                    detail.Quantity1 = item.Quantity1;
                                }
                                detail.Status = Key.Status.Available;
                                db.RequestDetails.Add(detail);


                            }
                            else
                            {
                                var requestAnother = requestDics.FirstOrDefault(x => x.Key == shop).Value;
                                if (requestAnother != null)
                                {
                                    RequestDetail detail = new RequestDetail();
                                    detail.RequestId = requestAnother.Id;
                                    detail.ShopCode = item.ShopCode;
                                    detail.ProductCode = item.ProductCode;
                                    detail.ProductName = item.ProductName;
                                    detail.Imei = item.Imei;
                                    detail.Quantity = item.Quantity;
                                    if (request.TypeId == 89)
                                    {
                                        detail.Quantity1 = item.Quantity1;
                                    }
                                    detail.Status = Key.Status.Available;
                                    db.RequestDetails.Add(detail);
                                }
                            }

                        }
                        #endregion
                    }
                    else if (request.TypeId == 82)
                    {
                        #region tách cấu hình
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;
                            detail.Property1 = item.Property1;
                            detail.Property2 = item.Property2;
                            detail.Property3 = item.Property3;
                            detail.Property4 = item.Property4;
                            detail.Property5 = item.Property5;
                            detail.Property6 = item.Property6;
                            detail.Property7 = item.Property7;
                            detail.Property8 = item.Property8;
                            detail.Property9 = item.Property9;
                            detail.Quantity = item.Quantity;
                            detail.Money1 = item.Money1;
                            detail.Money2 = item.Money2;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion

                    }
                    else if (request.TypeId == 103)
                    {
                        #region xuất đổi cấu hình
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;
                            detail.ShopCode = item.ShopCode;
                            detail.Property1 = item.Property1;
                            detail.Property2 = item.Property2;
                            detail.Property3 = item.Property3;
                            detail.Property4 = item.Property4;
                            detail.Property5 = item.Property5;
                            detail.Property6 = item.Property6;
                            detail.Property7 = item.Property7;
                            detail.Property8 = item.Property8;
                            detail.Property9 = item.Property9;
                            detail.Quantity = item.Quantity;
                            detail.Money1 = item.Money1;
                            detail.Money2 = item.Money2;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion
                    }
                    else if (request.TypeId == 104)
                    {
                        #region xuất đổi cấu hình pm máy cũ
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;
                            detail.ShopCode = item.ShopCode;
                            detail.Property1 = item.Property1;
                            detail.Property2 = item.Property2;
                            detail.Property3 = item.Property3;
                            detail.Property4 = item.Property4;
                            detail.Property5 = item.Property5;
                            detail.Property6 = item.Property6;
                            detail.Property7 = item.Property7;
                            detail.Property8 = item.Property8;
                            detail.Property9 = item.Property9;
                            detail.Quantity = item.Quantity;
                            detail.Money1 = item.Money1;
                            detail.Money2 = item.Money2;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion
                    }
                    else if (request.TypeId == 35)
                    {
                        #region Tuyen Dụng
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;
                            detail.Property1 = item.Property1;
                            detail.Property2 = item.Property2;
                            detail.Property3 = item.Property3;
                            detail.Property4 = item.Property4;
                            detail.Property5 = item.Property5;
                            detail.Property6 = item.ShopCode;
                            detail.Property7 = item.JobCode1;
                            detail.Property8 = item.Time1;
                            detail.Property9 = item.Quantity;
                            detail.Property10 = item.Quantity1;
                            detail.CustomerName = item.JobCode2;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion
                    }
                    else if (request.TypeId == 112)
                    {
                        #region Tạo Seri Voucher
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        string timeStart;
                        string timeWork;
                        string timeEnd;
                        //string timeEnd = item.dateEnd;
                        string[] timeArr;
                        string[] timeArr2;
                        string[] timeArr3;
                        foreach (var item in details)
                        {
                            timeStart = item.Time1;
                            timeArr = timeStart.Split('/');
                            timeWork = item.Time2;
                            timeArr2 = timeWork.Split('/');
                            timeEnd = item.Time3;
                            timeArr3 = timeEnd.Split('/');
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;
                            detail.ProductCode = item.ProductCode;
                            detail.ProductName = item.ProductName;
                            detail.Note = item.Note;
                            detail.Quantity = item.Quantity;
                            detail.Quantity1 = item.Quantity1;
                            detail.Money1 = item.Money1;
                            detail.Property1 = item.Property1;
                            detail.Property2 = item.Property2;
                            if (timeArr.Length == 3)
                            {
                                string format = String.Format("{0}/{1}/{2}"
                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                detail.Time1 = timeStart.EParseToDateTime(format);
                            }
                            detail.Quantity2 = item.Quantity2;
                            if (timeArr2.Length == 3)
                            {
                                string format = String.Format("{0}/{1}/{2}"
                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                detail.Time2 = timeWork.EParseToDateTime(format);
                            }
                            if (timeArr3.Length == 3)
                            {
                                string format = String.Format("{0}/{1}/{2}"
                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                detail.Time3 = timeEnd.EParseToDateTime(format);
                            }
                            detail.Property3 = item.Property3;
                            detail.Property4 = item.Property4;
                            detail.Property5 = item.Property5;
                            detail.Property6 = item.Property6;
                            detail.Property7 = item.Property7;
                            detail.Property8 = item.Property8;
                            detail.Property9 = item.Property9;
                            detail.Property10 = item.Property10;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion
                    }
                    else if (request.TypeId == 163)
                    {
                        #region add type "Cấp mới bóng đèn"
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.ItemId = item.ItemId;
                            detail.Property1 = item.GroupId;
                            detail.Quantity = item.Quantity;
                            detail.Sum = item.Quantity * item.Price;
                            detail.Note = item.Note;
                            detail.Price = item.Price;
                            detail.Status = Key.Status.Available;
                            detail.ShopCode = item.ShopCode;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion
                    }
                    //▼ Edit - NghiaTV5 - 8/12/2017 - 165 - tách Calllog theo shop hoặc loại cấp
                    else if (request.TypeId == 165)
                    {
                        #region Tach Callog theo shop va loai calllog
                        Dictionary<string, Request> request_Shop = new Dictionary<string, Request>();
                        Dictionary<string, Request> request_Loai = new Dictionary<string, Request>();
                        int i = 0;
                        foreach (var item in details)
                        {
                            string shop = item.ShopCode;
                            ShopDAL shopDalX = new ShopDAL();
                            var ware = shopDalX.Get(shop);
                            string LoaiCallLog = string.Empty;
                            // ▼ Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                            var step_create = 0;
                            var assigner_create = string.Empty;
                            var status_create = string.Empty;
                            // ▲ Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                            byte rqStatus = 0; //Add - ChuongNT3 - 14/12/2017 - Thêm trạng thái - 165
                            if (item.Quantity1 != null)
                            {
                                LoaiCallLog = item.Quantity1.ToString();
                            }

                            int typeID_Create = 0;
                            if (LoaiCallLog == "1")
                            {
                                typeID_Create = 165;
                                // ▼ Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                                step_create = 2;
                                status_create = "Đã nhận";
                                request.Assigner = "-3";
                                // ▲ Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                                rqStatus = 2; //Edit - ChuongNT3 - 14/12/2017 - Thêm trạng thái - 165
                            }
                            else if (LoaiCallLog == "2")
                            {
                                typeID_Create = 188;
                                step_create = 1;// Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                                rqStatus = 1; //Edit - ChuongNT3 - 14/12/2017 - Thêm trạng thái - 165
                            }
                            if (!request_Shop.ContainsKey(shop))
                            {
                                var requestAnother = new Request();
                                requestAnother.Sender = UserManager.CurrentUser.InsideCode;
                                requestAnother.StepNo = step_create;   // Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165

                                if (ware != null) requestAnother.Title = ware.WarehouseName + " - " + request.Title;
                                else requestAnother.Title = request.Title;
                                requestAnother.Assigner = request.Assigner;   //  Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                                requestAnother.StepStatus = request.StepStatus;
                                requestAnother.TimeCreate = request.TimeCreate;
                                requestAnother.TimeAppear = request.TimeAppear;
                                requestAnother.isHighlight = request.isHighlight;
                                requestAnother.isParent = request.isParent;
                                requestAnother.Status = rqStatus; //Edit - ChuongNT3 - 14/12/2017 - Thêm trạng thái - 165
                                requestAnother.CreateBy = request.CreateBy;
                                requestAnother.FromShop = item.ShopCode;
                                requestAnother.FromOffice = request.FromOffice;
                                requestAnother.TypeId = typeID_Create;
                                requestAnother.GroupId = 0;
                                requestAnother.ReferenceCode = item.Quantity1;
                                requestAnother.TimeFutureFinish = request.TimeFutureFinish;
                                db.Requests.Add(requestAnother);
                                db.SaveChanges();
                                request_Shop.Add(shop, requestAnother);
                                request_Loai.Add(LoaiCallLog + shop + '-' + i.ToString(), requestAnother);
                                requestDics.Add("single" + shop + '-' + i.ToString(), requestAnother);

                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = requestAnother.Id;
                                detail.ItemId = item.ItemCode;
                                detail.ProductCode = item.ProductCode;
                                detail.ProductName = item.ProductName;
                                detail.ShopCode = item.ShopCode;
                                detail.Property2 = item.ShopName; // ten shop
                                detail.Property1 = item.ItemName; // Hệ thống
                                detail.Quantity = item.Quantity;
                                detail.Property3 = status_create;   // Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                                detail.Quantity1 = item.Quantity1;// Add - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v1
                                detail.Status = Key.Status.Available;
                                db.RequestDetails.Add(detail);


                            }
                            else
                            {
                                var key = request_Loai.FirstOrDefault(x => x.Key.Split('-')[0] == (LoaiCallLog + shop)).Key;
                                if (key == null)
                                {
                                    var requestAnother_ID = new Request();
                                    requestAnother_ID.Sender = UserManager.CurrentUser.InsideCode;
                                    requestAnother_ID.StepNo = step_create;    // Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165

                                    if (ware != null) requestAnother_ID.Title = ware.WarehouseName + " - " + request.Title;
                                    else requestAnother_ID.Title = request.Title;

                                    requestAnother_ID.Assigner = request.Assigner;     //  Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                                    requestAnother_ID.StepStatus = request.StepStatus;
                                    requestAnother_ID.TimeCreate = request.TimeCreate;
                                    requestAnother_ID.TimeAppear = request.TimeAppear;
                                    requestAnother_ID.isHighlight = request.isHighlight;
                                    requestAnother_ID.isParent = request.isParent;
                                    requestAnother_ID.Status = rqStatus; //Edit - ChuongNT3 - 14/12/2017 - Thêm trạng thái - 165
                                    requestAnother_ID.CreateBy = request.CreateBy;
                                    requestAnother_ID.FromShop = item.ShopCode;
                                    requestAnother_ID.FromOffice = request.FromOffice;
                                    requestAnother_ID.TypeId = typeID_Create;
                                    requestAnother_ID.GroupId = 0;
                                    requestAnother_ID.ReferenceCode = item.Quantity1;
                                    requestAnother_ID.TimeFutureFinish = request.TimeFutureFinish;
                                    db.Requests.Add(requestAnother_ID);
                                    db.SaveChanges();
                                    request_Loai.Add(LoaiCallLog + shop + '-' + i.ToString(), requestAnother_ID);
                                    requestDics.Add("single1" + shop + i.ToString(), requestAnother_ID);

                                    RequestDetail detail = new RequestDetail();
                                    detail.RequestId = requestAnother_ID.Id;
                                    detail.ItemId = item.ItemCode;
                                    detail.ProductCode = item.ProductCode;
                                    detail.ProductName = item.ProductName;
                                    detail.ShopCode = item.ShopCode;
                                    detail.Property2 = item.ShopName; // ten shop
                                    detail.Property1 = item.ItemName; // Hệ thống
                                    detail.Quantity = item.Quantity;
                                    detail.Property3 = status_create;    // Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                                    detail.Quantity1 = item.Quantity1;// Add - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v1
                                    detail.Status = Key.Status.Available;
                                    db.RequestDetails.Add(detail);
                                }
                                else
                                {
                                    var requestAnother = request_Shop.FirstOrDefault(x => x.Key == shop).Value;
                                    if (requestAnother != null)
                                    {
                                        var requestLoaiID = request_Loai.FirstOrDefault(x => x.Key.Split('-')[0] == (LoaiCallLog + shop)).Value;
                                        if (requestLoaiID != null)
                                        {
                                            RequestDetail detail = new RequestDetail();
                                            detail.RequestId = requestLoaiID.Id;
                                            detail.ItemId = item.ItemCode;
                                            detail.ProductCode = item.ProductCode;
                                            detail.ProductName = item.ProductName;
                                            detail.ShopCode = item.ShopCode;
                                            detail.Property2 = item.ShopName; // ten shop
                                            detail.Property1 = item.ItemName; // Hệ thống
                                            detail.Quantity = item.Quantity;
                                            detail.Property3 = status_create;  // Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                                            detail.Quantity1 = item.Quantity1;// Add - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v1
                                            detail.Status = Key.Status.Available;
                                            db.RequestDetails.Add(detail);
                                        }
                                    }
                                }
                            }
                            i++;
                        }

                        #endregion
                    }
                    //▲ Edit - NghiaTV5 - 8/12/2017 - 165 - tách Calllog theo shop hoặc loại cấp
                    else if (request.TypeId == 169)
                    {
                        #region add type "duyệt mua máy tính bảng"
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.ProductCode = item.Product;
                            detail.ShopCode = UserManager.CurrentUser.WarehouseCode;
                            detail.EmpCode = UserManager.CurrentUser.InsideCode;
                            detail.ShopCode2 = item.ShopSales;
                            detail.Status = Key.Status.Available;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion
                    }
                    else if (request.TypeId == 170)
                    {
                        #region add type "duyệt mua máy tính xách tay"
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.ProductCode = item.Product;
                            detail.ShopCode = UserManager.CurrentUser.WarehouseCode;
                            detail.OfficeCode = UserManager.CurrentUser.OrganizationHierachyCode;
                            detail.EmpCode = UserManager.CurrentUser.InsideCode;
                            detail.ShopCode2 = item.ShopSales;
                            detail.Status = Key.Status.Available;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion
                    }
                    else if (request.TypeId == 171)
                    {
                        #region Import calllog chờ xử lý
                        db.Requests.Add(request);
                        db.SaveChanges();

                        string ToS = string.Empty;
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;
                            detail.ShopCode = item.WarehouseCode;
                            detail.ProductCode = item.ProductsCode;
                            detail.ProductName = item.ProductsName;
                            detail.Property1 = item.SLIM;
                            detail.Property2 = item.NoiDung;
                            detail.Note = item.Notes;
                            ToS = item.WarehouseCode;
                            db.RequestDetails.Add(detail);
                        }
                        request.ToShop = ToS;
                        db.SaveChanges();
                        #endregion
                    }
                    //▼ Add - TrungNC3 - 2017.09.01 - Thêm loại 175 - Hành chính hỗ trợ shop
                    else if (request.TypeId == 175)
                    {
                        #region Import calllog Hành chính hổ trợ
                        db.Requests.Add(request);
                        db.SaveChanges();

                        string ToS = string.Empty;
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;
                            detail.Property1 = item.NoiDung;
                            detail.Property2 = item.LoaiYeuCau;
                            detail.Property3 = item.XuLy;
                            detail.Property4 = item.GhiChu;
                            db.RequestDetails.Add(detail);
                        }
                        #endregion
                    }
                    //▲ Add - =======================================

                    //▼  Add - LuanNT44 - 27/03/2018 - Loại 204 - Chốt CR qua Calllog
                    else if (request.TypeId == 204)
                    {
                        #region add type "Chốt CR qua Calllog"
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;

                            detail.Property8 = item.MaID;
                            detail.OfficeCode = item.PhongBan;
                            detail.Property5 = item.NhomHeThong;
                            detail.EmpCode = item.NguoiYC;
                            detail.Property1 = item.He_Thong;
                            detail.Property2 = item.NoiDungYC;
                            detail.Property3 = item.MoTaYC;
                            //detail.Quantity=DateTime.ParseExact(item.NgayYC.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            detail.Time1 = DateTime.ParseExact(item.NgayChotYC.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            //detail.Property6=item.TrangThai;
                            //detail.Property7=item.KPI;
                            if (item.Uutien != "")
                            {
                                detail.Quantity1 = item.Uutien;
                            }

                            //detail.Property4=item.NhomHT;
                            detail.Note = item.GhiChu;

                            db.RequestDetails.Add(detail);
                            db.SaveChanges(); // Add - LuanNT44 - 18/04/2018 - Bỏ bước Trưởng bộ phận duyệt
                        }
                        #endregion
                    }
                    //▲  Add - LuanNT44 - 27/03/2018 - Loại 204 - Chốt CR qua Calllog
                    //▼  Add - TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216
                    else if (request.TypeId == 216)
                    {
                        #region add type "Calllog phụ cấp trực đêm"
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;

                            detail.ShopCode = item.ShopCode;
                            detail.EmpCode = item.EmployeeCode;
                            detail.Time1 = DateTime.ParseExact(item.NgayTruc.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            detail.Property1 = item.LyDo;

                            db.RequestDetails.Add(detail);
                            db.SaveChanges();
                        }
                        #endregion
                    }
                    //▲  Add - TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216
                    //▼  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                    else if (request.TypeId == 223)
                    {
                        #region add "CallLog in ấn POSM(CL cha)"
                        request.isParent = true;
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);
                        RequestDetail detail = new RequestDetail();
                        foreach (var item in details)
                        {
                            detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.Status = Key.Status.Available;

                            detail.ShopCode = item.ShopCodeB1;
                            detail.Property1 = item.LoaiInAn;
                            detail.Property2 = item.NoiDung;
                            detail.Property3 = item.ChatLieu;
                            detail.Property4 = item.Width;
                            detail.Property5 = item.Height;
                            detail.Property6 = item.SoLuong;
                            detail.Property7 = item.LinkTaiFileInAn;
                            detail.Property8 = item.GhiChu;
                            detail.Property9 = item.ShopName;
                            detail.Property10 = item.DienTich;
                            detail.Property11 = item.DonGia;
                            detail.Property12 = item.ThanhTien;
                            db.RequestDetails.Add(detail);
                            db.SaveChanges();
                        }
                        #endregion
                    }
                    //▲  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                    else
                    {
                        #region Automatic
                        db.Requests.Add(request);
                        db.SaveChanges();
                        requestDics.Add("single", request);

                        #region old code :(
                        foreach (var item in details)
                        {
                            RequestDetail detail = new RequestDetail();
                            detail.RequestId = request.Id;
                            detail.ItemId = item.ItemId;
                            detail.Quantity = item.Quantity;
                            detail.Note = item.Note;
                            detail.Status = Key.Status.Available;
                            detail.Sum = item.Sum;
                            detail.QuantityAvaiable = item.QuantityAvaiable;
                            detail.EmpCode = item.EmpCode;
                            detail.Price = item.Price;
                            detail.NoticeAlertId = item.NoticeAlertId;
                            detail.ShopCode = item.ShopCode;
                            detail.OfficeCode = item.OfficeCode;
                            detail.CustomerCode = item.CustomerCode;
                            detail.CustomerName = item.CustomerName;
                            detail.SaleCode = item.SaleCode;
                            detail.Time1 = item.Time1;
                            detail.Time2 = item.Time2;
                            detail.Money1 = item.Money1;
                            detail.Money2 = item.Money2;
                            detail.ProductCode = item.ProductCode;
                            detail.ProductName = item.ProductName;
                            detail.Imei = item.Imei;
                            detail.Time3 = item.Time3;
                            detail.Money3 = item.Money3;
                            detail.Money4 = item.Money4;
                            detail.Approved = item.Approved;
                            detail.EmpCode1 = item.EmpCode1;
                            detail.EmpCode2 = item.EmpCode2;
                            detail.Quantity1 = item.Quantity1;
                            detail.Quantity2 = item.Quantity2;
                            detail.Quantity3 = item.Quantity3;
                            detail.Quantity4 = item.Quantity4;
                            detail.Property1 = item.Property1;
                            detail.Property2 = item.Property2;
                            detail.Property3 = item.Property3;
                            detail.Property4 = item.Property4;
                            detail.JobCode1 = item.JobCode1;
                            detail.JobCode2 = item.JobCode2;
                            detail.EmpCode3 = item.EmpCode3;
                            detail.ShopCode2 = item.ShopCode2;
                            //ChuongNT3 - 14/08/2018 - loại 37
                            detail.Property6 = item.Property6;
                            detail.Property13 = item.Property13;
                            //ChuongNT3 - 14/08/2018 - loại 37
                            db.RequestDetails.Add(detail);
                        }
                        #endregion

                        if (request.TypeId == 53)
                        {
                            #region loai 2 lưới bàn giao quỹ giưa ca
                            foreach (var item in detailsLimited)
                            {
                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = request.Id;
                                detail.ItemId = item.ItemId;
                                detail.Quantity = item.Quantity;
                                detail.Note = item.Note;
                                detail.Status = Key.Status.Available;
                                detail.Sum = item.Sum;
                                detail.QuantityAvaiable = item.QuantityAvaiable;
                                detail.EmpCode = item.EmpCode;
                                detail.Price = item.Price;
                                detail.NoticeAlertId = item.NoticeAlertId;
                                detail.ShopCode = item.ShopCode;
                                detail.OfficeCode = item.OfficeCode;
                                detail.CustomerCode = item.CustomerCode;
                                detail.CustomerName = item.CustomerName;
                                detail.SaleCode = item.SaleCode;
                                detail.Time1 = item.Time1;
                                detail.Time2 = item.Time2;
                                detail.Money1 = item.Money1;
                                detail.Money2 = item.Money2;
                                detail.ProductCode = item.ProductCode;
                                detail.ProductName = item.ProductName;
                                detail.Imei = item.Imei;
                                detail.Time3 = item.Time3;
                                detail.Money3 = item.Money3;
                                detail.Money4 = item.Money4;
                                detail.Approved = item.Approved;
                                detail.EmpCode1 = item.EmpCode1;
                                detail.EmpCode2 = item.EmpCode2;
                                detail.Quantity1 = item.Quantity1;
                                detail.Quantity2 = item.Quantity2;
                                detail.Quantity3 = item.Quantity3;
                                detail.Quantity4 = item.Quantity4;
                                detail.Property1 = item.Property1;
                                detail.Property2 = item.Property2;
                                detail.Property3 = item.Property3;
                                detail.Property4 = item.Property4;
                                detail.JobCode1 = item.JobCode1;
                                detail.JobCode2 = item.JobCode2;
                                detail.EmpCode3 = item.EmpCode3;
                                detail.ShopCode2 = item.ShopCode2;
                                db.RequestDetails.Add(detail);
                            }
                        }
                        #endregion

                        #region new code :( :(

                        //DataTable table = new DataTable();
                        //DataColumn column = new DataColumn();
                        //#region Column table
                        ////column.DataType = System.Type.GetType("System.Int64");
                        //column.ColumnName = "RequestId";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "ItemId";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Quantity";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "Note";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Byte");
                        //column.ColumnName = "Status";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Sum";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "QuantityAvaiable";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "EmpCode";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Price";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "NoticeAlertId";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "ShopCode";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "OfficeCode";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "CustomerCode";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "CustomerName";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "SaleCode";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.DateTime");
                        //column.ColumnName = "Time1";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.DateTime");
                        //column.ColumnName = "Time2";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Single");
                        //column.ColumnName = "Money1";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Single");
                        //column.ColumnName = "Money2";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "ProductCode";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "ProductName";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "Imei";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.DateTime");
                        //column.ColumnName = "Time3";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Single");
                        //column.ColumnName = "Money3";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Single");
                        //column.ColumnName = "Money4";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Boolean");
                        //column.ColumnName = "Approved";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "EmpCode1";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.String");
                        //column.ColumnName = "EmpCode2";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Quantity1";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Quantity2";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Quantity3";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Quantity4";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Property1";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Property2";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Property3";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "Property4";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "JobCode1";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "JobCode2";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "EmpCode3";
                        //table.Columns.Add(column);

                        //column = new DataColumn();
                        ////column.DataType = System.Type.GetType("System.Int32");
                        //column.ColumnName = "ShopCode2";
                        //table.Columns.Add(column);
                        //#endregion

                        //if (details.ToString() != "[]")
                        //{
                        //    #region Loop
                        //    foreach (var item in details)
                        //    {
                        //        DataRow row = table.NewRow();
                        //        row["RequestId"] = request.Id;
                        //        row["ItemId"] = item.ItemId;
                        //        row["Quantity"] = item.Quantity;
                        //        row["Note"] = item.Note;
                        //        row["Status"] = Key.Status.Available;
                        //        row["Sum"] = item.Sum;
                        //        row["QuantityAvaiable"] = item.QuantityAvaiable;
                        //        row["EmpCode"] = item.EmpCode;
                        //        row["Price"] = item.Price;
                        //        row["NoticeAlertId"] = item.NoticeAlertId;
                        //        row["ShopCode"] = item.ShopCode;
                        //        row["OfficeCode"] = item.OfficeCode;
                        //        row["CustomerCode"] = item.CustomerCode;
                        //        row["CustomerName"] = item.CustomerName;
                        //        row["SaleCode"] = item.SaleCode;
                        //        row["Time1"] = item.Time1;
                        //        row["Time2"] = item.Time2;
                        //        row["Money1"] = item.Money1;
                        //        row["Money2"] = item.Money2;
                        //        row["ProductCode"] = item.ProductCode;
                        //        row["ProductName"] = item.ProductName;
                        //        row["Imei"] = item.Imei;
                        //        row["Time3"] = item.Time3;
                        //        row["Money3"] = item.Money3;
                        //        row["Money4"] = item.Money4;
                        //        row["Quantity1"] = item.Quantity1;
                        //        row["Quantity2"] = item.Quantity2;
                        //        row["Quantity3"] = item.Quantity3;
                        //        row["Quantity4"] = item.Quantity4;
                        //        row["Property1"] = item.Property1;
                        //        row["Property2"] = item.Property2;
                        //        row["Property3"] = item.Property3;
                        //        row["Property4"] = item.Property4;
                        //        row["Property1"] = item.Property1;
                        //        row["Property2"] = item.Property2;
                        //        row["Property3"] = item.Property3;
                        //        row["Property4"] = item.Property4;
                        //        row["JobCode1"] = item.JobCode1;
                        //        row["JobCode2"] = item.JobCode2;
                        //        row["EmpCode3"] = item.EmpCode3;
                        //        row["ShopCode2"] = item.ShopCode2;
                        //        table.Rows.Add(row);
                        //    }
                        //    #endregion
                        //}
                        //SqlParameter[] param = new SqlParameter[] { new SqlParameter("@table", table) };
                        //sql.ExecuteCommand("RequestDetails_Insert", CommandType.StoredProcedure, param);

                        #endregion
                        #endregion

                        #region Update Callog and Call Inside after create HR
                        if (request.TypeId == 37)
                        {
                            request.Status = Key.StatusRequest.Complete;
                            request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                            request.TimeClose = DateTime.Now;
                            request.StepStatus = Key.StatusRequest.Complete;
                            request.Assigner = "-1";
                        }
                        #endregion
                    }
                    #region old code
                    //else
                    //{
                    //    db.Requests.Add(request);
                    //    db.SaveChanges();
                    //    requestDics.Add("single", request);
                    //}
                    #endregion


                    #region Nội dung yêu cầu của người tạo
                    if (message.Length != 0)
                    {
                        foreach (var item in requestDics)
                        {
                            var converstation = new Conversation();
                            converstation.RequestId = item.Value.Id;
                            #region message và phone number

                            if (request.TypeId == 24)
                            {
                                //▼  Add - LuanNT44 - 11/04/2020 - 24 - edit
                                //if (request.FromShop != null && request.FromShop != "")
                                //{
                                //    ShopDAL shopInfo = new ShopDAL();
                                //    var shopX = shopInfo.Get(request.FromShop);
                                //    if (shopX.PhoneNumber != "" && shopX.PhoneNumber != null)
                                //    {
                                //        converstation.Message = message + "<br/> Điện thoại shop : " + shopX.PhoneNumber;
                                //    }
                                //    else
                                //    {
                                //        converstation.Message = message + "<br/> Điện thoại shop : chưa cập nhật";
                                //    }
                                //}
                                //else
                                //{
                                //    converstation.Message = message + "<br/> Điện thoại : " + UserManager.CurrentUser.PhoneNumber +
                                //                                      "<br/> Email : " + UserManager.CurrentUser.Email;
                                //}
                                //▲  Add - LuanNT44 - 11/04/2020 - 24 - edit
                            }
                            else
                            {
                                converstation.Message = message;
                            }
                            #endregion
                            converstation.Sender = UserManager.CurrentUser.InsideCode;
                            converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                            converstation.Status = Key.Status.Available;
                            converstation.StepNo = 0;
                            converstation.TimeCreate = DateTime.Now;
                            converstation.Type = Key.Conversation.Create;
                            db.Conversations.Add(converstation);
                        }
                    }
                    #endregion

                    //▼	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                    if (request.TypeId == 1 || request.TypeId == 25)
                    {
                        SqlParameter[] param = new SqlParameter[] {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@Type",1),
                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                        sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param);

                        string messageAuto = "Chào Anh/chị " + UserManager.CurrentUser.EmployeeName + ", Tổng đài 87333 đã nhận được yêu cầu hỗ trợ từ phía Anh/chị. Tổng đài đang xử lý, sẽ phản hồi Anh/chị trong 15 phút tới. Anh/chị vui lòng chờ phản hồi nhé. Xin cảm ơn.";
                        var converstationAuto = new Conversation();
                        converstationAuto.RequestId = request.Id;
                        converstationAuto.Message = messageAuto;
                        converstationAuto.Sender = UserManager.CurrentUser.InsideCode;
                        converstationAuto.CreateBy = UserManager.CurrentUser.InsideCode;
                        converstationAuto.Status = Key.Status.Available;
                        converstationAuto.StepNo = 0;
                        converstationAuto.TimeCreate = DateTime.Now;
                        converstationAuto.Type = Key.Conversation.Tongdai;
                        db.Conversations.Add(converstationAuto);
                    }
                    //▲	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================

                    #region Đặt lịch
                    if (scheduleTypeData != null)
                    {
                        foreach (var item in requestDics)
                        {
                            RequestAlarm requestAlarm = new RequestAlarm();
                            requestAlarm.RequestId = item.Value.Id;
                            requestAlarm.Time = timeSend;
                            if (schedule == null)
                                requestAlarm.DayOfMonth = scheduleTypeData.ToString();
                            else
                                requestAlarm.DayOfWeek = scheduleTypeData.ToString();
                            requestAlarm.TimeStart = dateFrom;
                            requestAlarm.TimeEnd = dateTo;
                            requestAlarm.TimeCreate = DateTime.Now;
                            requestAlarm.Status = Key.Status.Available;
                            db.RequestAlarms.Add(requestAlarm);
                        }
                    }

                    #endregion

                    #region Gán người xử lý và gọi Notification

                    string ListAssigner = string.Empty;
                    string AssignerTopOne = string.Empty;
                    foreach (var item in requestDics)
                    {
                        SqlParameter[] param;
                        if (item.Value.TypeId == 152)
                            param = new SqlParameter[]{
                                 new SqlParameter("@RequestId", item.Value.Id),
                                 new SqlParameter("@StepNo", 1),
                                    };
                        else
                            param = new SqlParameter[] { new SqlParameter("@RequestId", item.Value.Id) };
                        if (item.Value.TypeId != 165)   // Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                        {
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                            if (table != null && table.Rows.Count > 0)
                            {
                                RequestHub requestHub = new RequestHub();
                                requestHub.id = item.Value.Id;
                                requestHub.title = item.Value.Title;
                                requestHub.description = form["Description"].ToString();
                                requestHub.date = item.Value.TimeCreate.ToShortDateString() + " " + item.Value.TimeCreate.ToLongTimeString();
                                requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                                NotificationManager nf = new NotificationManager();
                                List<string> assigners = new List<string>();
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                                    assigners.Add(table.Rows[i]["EmailShort"].ToString());
                                }
                                if (table.Rows.Count > 0)
                                {
                                    AssignerTopOne = table.Rows[0]["Assigner"].ToString();
                                }
                                nf.Send(assigners, "Bạn có yêu cầu mới : " + item.Value.Id, item.Value.Id);
                                nf.RequestInsert(assigners, requestHub);
                            }  // Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                        }
                        else //▼ Add - ChuongNT3 - 13/12/2017 - Thay đổi thông báo - 165
                        {
                            ListAssigner = "Hệ Thống POS <br/>";
                        }//▲ Add - ChuongNT3 - 13/12/2017 - Thay đổi thông báo - 165
                    }


                    #endregion

                    //▼	Edit - VietMXH - 26/06/2018 - CC GroupMail 25:Hỗ trợ thông tin==================================================
                    #region ===Cc===
                    foreach (var requestItem in requestDics)
                    {
                        if (requestItem.Value.TypeId == 25)
                        //  25:Hỗ trợ thông tin
                        {
                            SqlParameter[] l_SqlParameter = new SqlParameter[]{
                                new SqlParameter("@RequestId", requestItem.Value.Id),
                                new SqlParameter("@StepNo", requestItem.Value.StepNo),
                                new SqlParameter("@Assigner", cc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 0)
                            };
                            DataTable l_DataTable = sql.ExecuteCommand("Assigner_Insert", CommandType.StoredProcedure, l_SqlParameter);
                        }
                        else
                        {
                            foreach (var item in stringCc)
                            {
                                var AssignerCc = new Assigner();
                                AssignerCc.RequestId = requestItem.Value.Id;
                                AssignerCc.EmployeeCode = item.ToString();
                                AssignerCc.StepNo = 1;
                                AssignerCc.Type = Key.TypeAssigner.Cc;
                                AssignerCc.TimeCreate = DateTime.Now;
                                AssignerCc.Status = Key.StatusRequest.Waitting;
                                db.Assigners.Add(AssignerCc);
                            }
                        }
                    }
                    #endregion
                    //▲	Edit - VietMXH - 26/06/2018 - CC GroupMail 25:Hỗ trợ thông tin==================================================

                    #region Default Cc for Event

                    if (new List<int>() { 72, 83, 84 }.Contains(request.TypeId))
                    {
                        #region Cc

                        string CcDefault = "";
                        if (request.TypeId == 72)
                        {
                            CcDefault = "00007,00010";
                        }
                        else
                        {
                            CcDefault = "00007,00010,00016";
                        }
                        SqlParameter[] param = new SqlParameter[]{
                                        new SqlParameter("@RequestId",request.Id),
                                        new SqlParameter("@Jobtitle",CcDefault),
                                        new SqlParameter("@StepNo",request.StepNo),
                                        new SqlParameter("@Type",Key.TypeAssigner.Cc),
                                        new SqlParameter("@ShopCode",UserManager.CurrentUser.WarehouseCode),
                                    };
                        sql.ExecuteWithoutResult("Assigner_InsertByJob", CommandType.StoredProcedure, param);

                        if (details.ToString() != "[]")
                        {
                            foreach (var item in details)
                            {
                                if (item.Property1 == "Khác Shop")
                                {
                                    #region Cc to 00007,00010,00004,00005
                                    string shopcode = item.ShopCode;
                                    string Cc = "00007,00010,00004,00005";
                                    SqlParameter[] param1 = new SqlParameter[]{
                                        new SqlParameter("@RequestId",request.Id),
                                        new SqlParameter("@Jobtitle",Cc),
                                        new SqlParameter("@StepNo",request.StepNo),
                                        new SqlParameter("@Type",Key.TypeAssigner.Cc),
                                        new SqlParameter("@ShopCode",shopcode),
                                    };
                                    sql.ExecuteWithoutResult("Assigner_InsertByJob", CommandType.StoredProcedure, param1);
                                    #endregion
                                }
                            }
                        }
                        #endregion
                    }

                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            HttpPostedFileBase file = Request.Files[i];
                            //Save file content goes here
                            fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);

                                foreach (var requestItem in requestDics)
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                    fileAttach.StepNo = requestItem.Value.StepNo;
                                    fileAttach.RequestId = requestItem.Value.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    db.FileAttachs.Add(fileAttach);
                                }

                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();
                    //▼ Edit - ChuongNT3 - 5/12/2017 - Thêm bước xử lý sau khi tạo - 115
                    //#region tách đồ dùng mkts theo bảo hành hoặc cấp mới
                    #region  NghiaTV5 - 10/04/2018 - Loại 24 - CSVC
                    if (request.TypeId == 24)
                    {
                        #region tạo calllog qua out side loại 24
                        var requests = request.Id;
                        if (requests > 0)
                        {
                            SqlParameter[] Pram = new SqlParameter[]
                            {
                                new SqlParameter("@RequestsId",requests),
                            };
                            sql.ExecuteCommand("sp_CreateCalllogOUTSIDE_CSVT_24", CommandType.StoredProcedure, Pram);
                        }
                        #endregion
                    }
                    #endregion NghiaTV5 - 10/04/2018 - Loại 24 - CSVC

                    #region tách đồ dùng mkts theo bảo hành hoặc cấp mới
                    string message115 = "";
                    if (request.TypeId == 115 && request.StepNo == 1)
                    {

                        List<string> myCollection = new List<string>();
                        foreach (var item in requestDics)
                        {
                            string id = item.Value.Id.ToString();
                            myCollection.Add(id);
                        }
                        SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", String.Join(", ", myCollection.ToArray())), };
                        DataTable tablesRD = sql.ExecuteCommand("hiendt23_CupParent_Marketing_MktsCreate", CommandType.StoredProcedure, param);
                        if (tablesRD != null && tablesRD.Rows.Count > 0)
                        {
                            DataRow row = tablesRD.Rows[0];
                            //message115 = row["Message"].ToString();
                        }
                    }
                    #endregion

                    #region tách đồ dùng hành chính hanh chính tạo
                    string message130 = "";
                    if ((request.TypeId == 130 || request.TypeId == 152 || request.TypeId == 155) && request.StepNo == 1)
                    {
                        List<string> myCollection = new List<string>();
                        foreach (var item in requestDics)
                        {
                            string id = item.Value.Id.ToString();
                            myCollection.Add(id);
                        }
                        //_____________HienDT23 - store tính định mức lúc tạo của loại HC - HC tạo 
                        //SqlParameter[] paramCheckLimitHC = new SqlParameter[] 
                        //{ 
                        //    new SqlParameter("@RequestId", String.Join(", ", myCollection.ToArray())), 
                        //    new SqlParameter("@Results", 0 )                        
                        //};
                        //DataTable TablesCheckLimitHC = sql.ExecuteCommand("Items_CheckLimitValue_ProductHC_NotSendBI", CommandType.StoredProcedure, paramCheckLimitHC);

                        if (request.TypeId == 130 || request.TypeId == 152 && request.StepNo == 1)
                        {
                            //_____________Store tách loại HC - HC tạo ra các loại theo định nghĩa
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", String.Join(", ", myCollection.ToArray())), };
                            DataTable tablesRD = sql.ExecuteCommand("Request_CupParent_ProductHC", CommandType.StoredProcedure, param);

                        }
                        message130 = String.Join(", ", myCollection.ToArray());
                    }
                    #endregion

                    #region tách callLog cấp mới sang bảo hành.
                    string message163 = string.Empty;
                    string requestId164 = string.Empty;
                    if (request.TypeId == 163 && request.StepNo == 1)
                    {
                        List<string> myCollection = new List<string>();
                        foreach (var item in requestDics)
                        {
                            string id = item.Value.Id.ToString();
                            myCollection.Add(id);
                        }
                        if (request.TypeId == 163 && request.StepNo == 1)
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestIds", request.Id) };
                            DataTable table = sql.ExecuteCommand("Requests_Create_NewBulbs", CommandType.StoredProcedure, param);
                            if (table != null && table.Rows.Count > 0)
                            {
                                foreach (DataRow row in table.Rows)
                                {
                                    message163 += Convert.ToString(row["Result"]) + ", ";
                                    requestId164 = row["RequestIdGoc"].ToString();
                                }
                            }
                        }
                    }
                    #endregion

                    #region "Import thong tin nhan vien FRT da mua MTB, MTXT"
                    if (request.TypeId == 169 && request.StepNo == 1)
                    {
                        List<string> myCollection = new List<string>();
                        foreach (var item in requestDics)
                        {
                            string id = item.Value.Id.ToString();
                            myCollection.Add(id);
                        }
                        if (request.TypeId == 169 && request.StepNo == 1)
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id),
                                                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                                                        new SqlParameter("@Type", 1000)};
                            sql.ExecuteWithoutResult("sp_POS_Insert_SO_Sale_NhanVienFRT", CommandType.StoredProcedure, param);

                        }
                    }
                    if (request.TypeId == 170 && request.StepNo == 1)
                    {
                        List<string> myCollection = new List<string>();
                        foreach (var item in requestDics)
                        {
                            string id = item.Value.Id.ToString();
                            myCollection.Add(id);
                        }
                        if (request.TypeId == 170 && request.StepNo == 1)
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id),
                                                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                                                        new SqlParameter("@Type", 1001)};
                            sql.ExecuteWithoutResult("sp_POS_Insert_SO_Sale_NhanVienFRT", CommandType.StoredProcedure, param);

                        }
                    }
                    #endregion

                    //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                    #region Update han mức Mar Sang BI
                    if (request.TypeId == 22)
                    {
                        SqlParameter[] param = new SqlParameter[] {
                            new SqlParameter("@RequestId",request.Id),
                        };
                        sql.ExecuteWithoutResult("sp_Update_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                    }
                    #endregion
                    //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                    #region tach do dung hanh chinh theo dinh nghia
                    string message23 = "";
                    if (request.TypeId == 23)
                    {
                        SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id), };
                        DataTable tableSpl = sql.ExecuteCommand("Request_CupParent_ProductHC", CommandType.StoredProcedure, param);
                        //if (tableSpl != null && tableSpl.Rows.Count > 0)
                        //{
                        //    message23 += " Mã CallLog tách : ";
                        //    foreach (DataRow row in tableSpl.Rows)
                        //    {
                        //        message23 += Convert.ToString(row["Id"]) + ", ";
                        //    }
                        //}
                    }
                    #endregion

                    // ▼ Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                    #region auto đẩy pos loại 165
                    foreach (var itemRequest in requestDics)
                    {
                        if (itemRequest.Value.TypeId == 165)
                        {
                            sql.ExecuteWithoutResult("POS_UpdateCapMoiITSangPOS", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@RequestID",itemRequest.Value.Id),
                                new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@ShopCode", itemRequest.Value.FromShop),
                                new SqlParameter("@OfficeCode", itemRequest.Value.FromOffice)
                            });
                        }
                    }
                    #endregion
                    // ▲ Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                    //▼ Add - NgoanHT - 16/05/2018 - Loại: 23 - Thêm form thông báo trể hạn
                    #region Sinh phiếu vi pham
                    if (request.TypeId == 23)
                    {
                        string DK = form["CheckViolation"].ToString();
                        if (DK == "1")
                        {
                            SqlParameter[] param = new SqlParameter[] {
                            new SqlParameter("@RequestId",request.Id),
                            new SqlParameter("@Shop",UserManager.CurrentUser.WarehouseCode),
                            new SqlParameter("@Sender",UserManager.CurrentUser.InsideCode)};
                            sql.ExecuteWithoutResult("sp_CreatePhieuViPham_DoDungHanhChinh", CommandType.StoredProcedure, param);
                        }
                    }
                    #endregion
                    //▲ Add - NgoanHT - 16/05/2018 - Loại: 23 - Thêm form thông báo trể hạn
                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + String.Join(",", requestDics.Values.Select(x => x.Id).ToList()) + " thành công! <br/>";
                    if (request.TypeId != 63 && request.TypeId != 60 && request.TypeId != 115) //apple
                    {
                        if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                            strReturn += "Người xử lý là : <br/>" + ListAssigner;
                        else
                            strReturn += "Không gán đươc người xử lý! <br/>";
                    }
                    if (request.TypeId == 71)
                    {
                        string Cc = "00004,00005,00007";
                        foreach (var itemRequest in requestDics)
                        {
                            SqlParameter[] param1 = new SqlParameter[]{
                                        new SqlParameter("@RequestId",itemRequest.Value.Id),
                                        new SqlParameter("@Jobtitle",Cc),
                                        new SqlParameter("@StepNo",itemRequest.Value.StepNo),
                                        new SqlParameter("@Type",Key.TypeAssigner.Cc),
                                        new SqlParameter("@ShopCode",itemRequest.Key),
                                    };
                            sql.ExecuteWithoutResult("Assigner_InsertByJob", CommandType.StoredProcedure, param1);
                        }
                    }
                    if (request.TypeId == 115)
                    {
                        if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                            strReturn += "Người xử lý là : <br/>" + ListAssigner + message115;
                        else
                            strReturn += "Không gán đươc người xử lý! <br/>";
                    }
                    if (request.TypeId == 23)
                    {
                        strReturn += message23;
                    }
                    if (request.TypeId == 163)
                    {
                        if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                            strReturn += message163;
                        else
                            strReturn += "";
                    }
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                    #region "Lấy thông tin bill từ loại cấp bóng đèn add vào session"
                    if (request.TypeId == 163 && Convert.ToString(form["PassApproved"]) == "0")
                    {
                        if (Session[Key.Session.BillInfo] != null)
                        {
                            Session[Key.Session.BillInfo] = null;
                        }
                        string UserReceiveCode = string.Empty;
                        string UserName = string.Empty;
                        string SoDienThoai = string.Empty;
                        DataTable dtEmp = new EmployeeDAL().GetDetail(AssignerTopOne);
                        if (dtEmp != null && dtEmp.Rows.Count > 0)
                        {
                            UserReceiveCode = dtEmp.Rows[0]["OrganizationHierachyCode"].ToString();
                            UserName = dtEmp.Rows[0]["EmployeeName"].ToString();
                            SoDienThoai = dtEmp.Rows[0]["PhoneNumber1"].ToString();
                        }
                        // DataTable dtBillInfor
                        DataTable dtBillInfor = new DataTable();
                        dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
                        dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
                        dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã phòng ban nhận
                        dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
                        dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
                        dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
                        dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
                        dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
                        dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
                        dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
                        dtBillInfor.Columns.Add("TypeId", typeof(string));          //Loại calllog
                        dtBillInfor.Rows.Add(
                            request.Sender,
                            "",
                            UserReceiveCode,
                            UserName,
                            SoDienThoai,
                            "1",
                            requestId164,
                            "",
                            "1",
                            "Bảo hành bóng đèn",
                            "164");
                        Session[Key.Session.BillInfo] = dtBillInfor;
                        return RedirectToAction("CreateBillFromHC", "Requests");
                    }
                    #endregion
                    else
                    {
                        return RedirectToAction("Index", "Home");
                    }

                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    return View();
                }
            }
            return View();
        }

        [HttpPost]
        public ActionResult CreateClaim(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);


                    int countDetail = 0;
                    #endregion

                    #region Verify
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                    }
                    if (countDetail == 0 && new List<int>() { 134, 143 }.Contains(request.TypeId))
                    {
                        TempData["Message"] = "Yêu cầu không có thông tin chi tiết<br/>Yêu cầu đã bị hủy.";
                        return RedirectToAction("Create", "Requests");
                    }
                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao calllog
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.StepNo = 1;
                    request.Status = Key.Status.Available;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                    db.Requests.Add(request);

                    #endregion

                    db.SaveChanges();

                    #region Tao chi tiet
                    foreach (var item in details)
                    {
                        RequestDetail rs = new RequestDetail();
                        rs.RequestId = request.Id;
                        rs.Property1 = item.note;
                        rs.Property2 = item.typeKn;
                        rs.Property3 = item.row;
                        rs.Property4 = item.Transporters;
                        rs.Property10 = item.Links;
                        //▼ ChuongNT3 - 13/03/2019 - claim nvc
                        rs.ShopCode2 = Convert.ToString(item.Shops);

                        //▼ ChuongNT3 - 10//12/2018 - thêm tgian / lý do ko nhâp
                        if (request.TypeId == 134)
                        {
                            rs.Property5 = item.NoiDungCuTheClaim;
                            rs.Property6 = item.HuongDenBu;
                            rs.Property8 = item.MaBillNhanHang;
                            rs.Property13 = item.ThoiGianChuyenHang;
                            if (item.ViTriCamShopGuiKhac != "" && item.ViTriCamShopGuiKhac != null)
                            {
                                rs.Property18 = item.ViTriCamShopGuiKhac;
                            }
                            if (item.ViTriCamShopNhanKhac != "" && item.ViTriCamShopNhanKhac != null)
                            {
                                rs.Property19 = item.ViTriCamShopNhanKhac;
                            }
                            if (item.GioChuyenHangShopGuiTu != "" && item.GioChuyenHangShopGuiTu != null && item.PhutChuyenHangShopGuiTu != "" && item.PhutChuyenHangShopGuiTu != null)
                            {
                                rs.ProductCode = Convert.ToString(item.GioChuyenHangShopGuiTu) + ':' + Convert.ToString(item.PhutChuyenHangShopGuiTu);
                            }
                            if (item.GioChuyenHangShopGuiDen != "" && item.GioChuyenHangShopGuiDen != null && item.PhutChuyenHangShopGuiDen != "" && item.PhutChuyenHangShopGuiDen != null)
                            {
                                rs.EmpCode1 = Convert.ToString(item.GioChuyenHangShopGuiDen) + ':' + Convert.ToString(item.PhutChuyenHangShopGuiDen);
                            }
                            if (item.GioChuyenHangShopNhanTu != "" && item.GioChuyenHangShopNhanTu != null && item.PhutChuyenHangShopNhanTu != "" && item.PhutChuyenHangShopNhanTu != null)
                            {
                                rs.EmpCode2 = Convert.ToString(item.GioChuyenHangShopNhanTu) + ':' + Convert.ToString(item.PhutChuyenHangShopNhanTu);
                            }
                            if (item.GioChuyenHangShopNhanDen != "" && item.GioChuyenHangShopNhanDen != null && item.PhutChuyenHangShopNhanDen != "" && item.PhutChuyenHangShopNhanDen != null)
                            {
                                rs.EmpCode3 = Convert.ToString(item.GioChuyenHangShopNhanDen) + ':' + Convert.ToString(item.PhutChuyenHangShopNhanDen);
                            }
                            rs.Property16 = item.ViTriCamShopGui;
                            rs.Property17 = item.ViTriCamShopNhan;
                            //rs.Time3 = Convert.ToDateTime(item.NgayChuyenHangShopGui);
                            //rs.Time4 = Convert.ToDateTime(item.NgayChuyenHangShopNhan);
                            rs.Time3 = DateTime.ParseExact(item.NgayChuyenHangShopGui.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            rs.Time4 = DateTime.ParseExact(item.NgayChuyenHangShopNhan.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        else if (request.TypeId == 143)
                        {
                            rs.Property15 = item.ThoiGianChuyenHang;
                        }
                        //▲ ChuongNT3 - 10//12/2018 - thêm tgian / lý do ko nhâp
                        //▲ ChuongNT3 - 13/03/2019 - claim nvc 
                        rs.Status = Key.Status.Available;
                        db.RequestDetails.Add(rs);
                        db.SaveChanges();

                        if (rs.Id != 0)
                        {
                            string fNames1 = Convert.ToString(item.ListNameFile_1) == null ? "" : Convert.ToString(item.ListNameFile_1);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "1";
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }

                            string fNames2 = Convert.ToString(item.ListNameFile_2) == null ? "" : Convert.ToString(item.ListNameFile_2);
                            string[] words2 = fNames2.Split(',');
                            foreach (string word in words2)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "2";
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }

                            string fNames3 = Convert.ToString(item.ListNameFile_3) == null ? "" : Convert.ToString(item.ListNameFile_3);
                            string[] words3 = fNames3.Split(',');
                            foreach (string word in words3)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "3";
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }

                            string fNames4 = Convert.ToString(item.ListNameFile_4) == null ? "" : Convert.ToString(item.ListNameFile_4);
                            string[] words4 = fNames4.Split(',');
                            foreach (string word in words4)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "4";
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }

                            string fNames5 = Convert.ToString(item.ListNameFile_5) == null ? "" : Convert.ToString(item.ListNameFile_5);
                            string[] words5 = fNames5.Split(',');
                            foreach (string word in words5)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "5";
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }
                            string fNames6 = Convert.ToString(item.ListNameFile_6) == null ? "" : Convert.ToString(item.ListNameFile_6);
                            string[] words6 = fNames6.Split(',');
                            foreach (string word in words6)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "6";
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }
                            string fNames7 = Convert.ToString(item.ListNameFile_7) == null ? "" : Convert.ToString(item.ListNameFile_7);
                            string[] words7 = fNames7.Split(',');
                            foreach (string word in words7)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "7";
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }
                        }
                    }
                    #endregion

                    db.SaveChanges();


                    #region Nội dung yêu cầu của người tạo
                    if (message.Length != 0)
                    {
                        var converstation = new Conversation();
                        converstation.RequestId = request.Id;
                        converstation.Message = message;
                        converstation.Sender = UserManager.CurrentUser.InsideCode;
                        converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                        converstation.Status = Key.Status.Available;
                        converstation.StepNo = 0;
                        converstation.TimeCreate = DateTime.Now;
                        converstation.Type = Key.Conversation.Create;
                        db.Conversations.Add(converstation);
                    }
                    #endregion



                    #region Gán người xử lý và gọi Notification

                    string ListAssigner = string.Empty;

                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                    if (table != null && table.Rows.Count > 0)
                    {
                        RequestHub requestHub = new RequestHub();
                        requestHub.id = request.Id;
                        requestHub.title = request.Title;
                        requestHub.description = form["Description"].ToString();
                        requestHub.date = request.TimeCreate.ToShortDateString() + " " + request.TimeCreate.ToLongTimeString();
                        requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                        NotificationManager nf = new NotificationManager();
                        List<string> assigners = new List<string>();
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                            assigners.Add(table.Rows[i]["EmailShort"].ToString());
                        }
                        nf.Send(assigners, "Bạn có yêu cầu mới : " + request.Id, request.Id);
                        nf.RequestInsert(assigners, requestHub);
                    }


                    #endregion

                    #region Cc
                    foreach (var item in stringCc)
                    {
                        var AssignerCc = new Assigner();
                        AssignerCc.RequestId = request.Id;
                        AssignerCc.EmployeeCode = item.ToString();
                        AssignerCc.StepNo = 1;
                        AssignerCc.Type = Key.TypeAssigner.Cc;
                        AssignerCc.TimeCreate = DateTime.Now;
                        AssignerCc.Status = Key.StatusRequest.Waitting;
                        db.Assigners.Add(AssignerCc);
                    }
                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + Convert.ToString(request.Id) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }

        #endregion
        [HttpPost]
        public ActionResult CreateSuaChua(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao chi tiet
                    foreach (var item in details)
                    {
                        string HangMuc = item.HangMuc;
                        string HangPT = item.Hang; //Add - NgoanHT - 10/04/2018 - Loại: 181 - thêm param
                        DataTable TableKQ = sql.ExecuteCommand("sp_Request_XetDieuKienSinhCalllog_HangDemo", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@HangMuc", HangMuc),
                                new SqlParameter("@HangPT", HangPT) //Add - NgoanHT - 10/04/2018 - Loại: 181 - thêm param
                            });
                        DataRow row = TableKQ.Rows[0];
                        string HangMuc_CoSoVatChat = row["CoSoVatChat"].ToString();
                        string HangMuc_Hang = row["Hang"].ToString();
                        string HangMuc_Marketing = row["Marketing"].ToString();
                        //ChuongNT3 - 02/10/2018 - chuyển ngươi xử lý
                        string HangMuc_HanhChinh = row["HanhChinh"].ToString();
                        if (HangMuc_HanhChinh != null && HangMuc_HanhChinh != "")
                        {
                            #region Tao calllog
                            var request_HanhChinh = new Request();
                            request_HanhChinh.TypeId = 181;
                            request_HanhChinh.Sender = UserManager.CurrentUser.InsideCode;
                            request_HanhChinh.StepNo = 1;
                            request_HanhChinh.Title = Convert.ToString(form["TitleRequest"]);
                            request_HanhChinh.StepStatus = Key.StatusRequest.Waitting;
                            request_HanhChinh.TimeCreate = DateTime.Now;
                            request_HanhChinh.TimeAppear = DateTime.Now;
                            request_HanhChinh.isHighlight = false;
                            request_HanhChinh.isParent = false;
                            request_HanhChinh.Status = Key.Status.Available;
                            request_HanhChinh.CreateBy = UserManager.CurrentUser.InsideCode;
                            request_HanhChinh.TimeLastUpdate = DateTime.Now;
                            request_HanhChinh.UpdateBy = UserManager.CurrentUser.InsideCode;
                            if (shopUserSent != null)
                            {
                                request_HanhChinh.FromShop = shopUserSent.WarehouseCode;
                            }
                            else
                                request_HanhChinh.FromShop = UserManager.CurrentUser.WarehouseCode;
                            request_HanhChinh.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                            db.Requests.Add(request_HanhChinh);
                            db.SaveChanges();
                            #endregion

                            requestDics.Add("HangDemo-HanhChinh", request_HanhChinh);

                            RequestDetail rs = new RequestDetail();
                            rs.RequestId = request_HanhChinh.Id;
                            rs.Property1 = item.LyGiaiChiTiet;
                            rs.Quantity1 = item.TenYeuCau;
                            rs.Quantity2 = item.Hang;
                            rs.Quantity3 = 4;
                            rs.Property2 = HangMuc_HanhChinh;
                            rs.Property4 = item.HangPos;
                            rs.Status = Key.Status.Available;
                            db.RequestDetails.Add(rs);
                            db.SaveChanges();

                            if (rs.Id != 0)
                            {
                                string fNames1 = Convert.ToString(item.HinhAnh);
                                string[] words1 = fNames1.Split(',');
                                foreach (string word in words1)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.FolderFileAttach + word;
                                        fileAttach.StepNo = request_HanhChinh.StepNo;
                                        fileAttach.RequestId = request_HanhChinh.Id;
                                        fileAttach.RequestDetailId = rs.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutMatTien";
                                        db.FileAttachs.Add(fileAttach);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (HangMuc_CoSoVatChat != null && HangMuc_CoSoVatChat != "")
                        {
                            #region Tao calllog
                            var request_CoSoVatChat = new Request();
                            request_CoSoVatChat.TypeId = 181;
                            request_CoSoVatChat.Sender = UserManager.CurrentUser.InsideCode;
                            request_CoSoVatChat.StepNo = 1;
                            request_CoSoVatChat.Title = Convert.ToString(form["TitleRequest"]);
                            request_CoSoVatChat.StepStatus = Key.StatusRequest.Waitting;
                            request_CoSoVatChat.TimeCreate = DateTime.Now;
                            request_CoSoVatChat.TimeAppear = DateTime.Now;
                            request_CoSoVatChat.isHighlight = false;
                            request_CoSoVatChat.isParent = false;
                            request_CoSoVatChat.Status = Key.Status.Available;
                            request_CoSoVatChat.CreateBy = UserManager.CurrentUser.InsideCode;
                            request_CoSoVatChat.TimeLastUpdate = DateTime.Now;
                            request_CoSoVatChat.UpdateBy = UserManager.CurrentUser.InsideCode;
                            if (shopUserSent != null)
                            {
                                request_CoSoVatChat.FromShop = shopUserSent.WarehouseCode;
                            }
                            else
                                request_CoSoVatChat.FromShop = UserManager.CurrentUser.WarehouseCode;
                            request_CoSoVatChat.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                            db.Requests.Add(request_CoSoVatChat);
                            db.SaveChanges();
                            #endregion

                            requestDics.Add("HangDemo-CoSoVatChat", request_CoSoVatChat);

                            RequestDetail rs = new RequestDetail();
                            rs.RequestId = request_CoSoVatChat.Id;
                            rs.Property1 = item.LyGiaiChiTiet;
                            rs.Quantity1 = item.TenYeuCau;
                            rs.Quantity2 = item.Hang;
                            rs.Quantity3 = 1;
                            rs.Property2 = HangMuc_CoSoVatChat;
                            rs.Property4 = item.HangPos;//Add - NgoanHT - 20/04/2018 - Loại: 181 - Thêm hãng pos
                            rs.Status = Key.Status.Available;
                            db.RequestDetails.Add(rs);
                            db.SaveChanges();

                            if (rs.Id != 0)
                            {
                                string fNames1 = Convert.ToString(item.HinhAnh);
                                string[] words1 = fNames1.Split(',');
                                foreach (string word in words1)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.FolderFileAttach + word;
                                        fileAttach.StepNo = request_CoSoVatChat.StepNo;
                                        fileAttach.RequestId = request_CoSoVatChat.Id;
                                        fileAttach.RequestDetailId = rs.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutMatTien";
                                        db.FileAttachs.Add(fileAttach);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (HangMuc_Marketing != null && HangMuc_Marketing != "")
                        {
                            #region Tao calllog
                            var request_Marketing = new Request();
                            request_Marketing.TypeId = 181;
                            request_Marketing.Sender = UserManager.CurrentUser.InsideCode;
                            request_Marketing.StepNo = 1;
                            request_Marketing.Title = Convert.ToString(form["TitleRequest"]);
                            request_Marketing.StepStatus = Key.StatusRequest.Waitting;
                            request_Marketing.TimeCreate = DateTime.Now;
                            request_Marketing.TimeAppear = DateTime.Now;
                            request_Marketing.isHighlight = false;
                            request_Marketing.isParent = false;
                            request_Marketing.Status = Key.Status.Available;
                            request_Marketing.CreateBy = UserManager.CurrentUser.InsideCode;
                            request_Marketing.TimeLastUpdate = DateTime.Now;
                            request_Marketing.UpdateBy = UserManager.CurrentUser.InsideCode;
                            if (shopUserSent != null)
                            {
                                request_Marketing.FromShop = shopUserSent.WarehouseCode;
                            }
                            else
                                request_Marketing.FromShop = UserManager.CurrentUser.WarehouseCode;
                            request_Marketing.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                            db.Requests.Add(request_Marketing);
                            db.SaveChanges();
                            #endregion
                            requestDics.Add("HangDemo-Marketing", request_Marketing);
                            RequestDetail rs = new RequestDetail();
                            rs.RequestId = request_Marketing.Id;
                            rs.Property1 = item.LyGiaiChiTiet;
                            rs.Quantity1 = item.TenYeuCau;
                            rs.Quantity2 = item.Hang;
                            rs.Quantity3 = 3;
                            rs.Property2 = HangMuc_Marketing;
                            rs.Property4 = item.HangPos;//Add - NgoanHT - 20/04/2018 - Loại: 181 - Thêm hãng pos
                            rs.Status = Key.Status.Available;
                            db.RequestDetails.Add(rs);
                            db.SaveChanges();

                            if (rs.Id != 0)
                            {
                                string fNames1 = Convert.ToString(item.HinhAnh);
                                string[] words1 = fNames1.Split(',');
                                foreach (string word in words1)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.FolderFileAttach + word;
                                        fileAttach.StepNo = request_Marketing.StepNo;
                                        fileAttach.RequestId = request_Marketing.Id;
                                        fileAttach.RequestDetailId = rs.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutMatTien";
                                        db.FileAttachs.Add(fileAttach);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (HangMuc_Hang != null && HangMuc_Hang != "")
                        {
                            #region Tao calllog
                            var request_Hang = new Request();
                            request_Hang.TypeId = 181;
                            request_Hang.Sender = UserManager.CurrentUser.InsideCode;
                            request_Hang.StepNo = 1;
                            request_Hang.Title = Convert.ToString(form["TitleRequest"]);
                            request_Hang.StepStatus = Key.StatusRequest.Waitting;
                            request_Hang.TimeCreate = DateTime.Now;
                            request_Hang.TimeAppear = DateTime.Now;
                            request_Hang.isHighlight = false;
                            request_Hang.isParent = false;
                            request_Hang.Status = Key.Status.Available;
                            request_Hang.CreateBy = UserManager.CurrentUser.InsideCode;
                            request_Hang.TimeLastUpdate = DateTime.Now;
                            request_Hang.UpdateBy = UserManager.CurrentUser.InsideCode;
                            if (shopUserSent != null)
                            {
                                request_Hang.FromShop = shopUserSent.WarehouseCode;
                            }
                            else
                                request_Hang.FromShop = UserManager.CurrentUser.WarehouseCode;
                            request_Hang.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                            db.Requests.Add(request_Hang);
                            db.SaveChanges();
                            #endregion
                            requestDics.Add("HangDemo-Hang", request_Hang);
                            RequestDetail rs = new RequestDetail();
                            rs.RequestId = request_Hang.Id;
                            rs.Property1 = item.LyGiaiChiTiet;
                            rs.Quantity1 = item.TenYeuCau;
                            rs.Quantity2 = item.Hang;
                            rs.Quantity3 = 2;
                            rs.Property2 = HangMuc_Hang;
                            rs.Property4 = item.HangPos;//Add - NgoanHT - 20/04/2018 - Loại: 181 - Thêm hãng pos
                            rs.Status = Key.Status.Available;
                            db.RequestDetails.Add(rs);
                            db.SaveChanges();

                            if (rs.Id != 0)
                            {
                                string fNames1 = Convert.ToString(item.HinhAnh);
                                string[] words1 = fNames1.Split(',');
                                foreach (string word in words1)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.FolderFileAttach + word;
                                        fileAttach.StepNo = request_Hang.StepNo;
                                        fileAttach.RequestId = request_Hang.Id;
                                        fileAttach.RequestDetailId = rs.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutMatTien";
                                        db.FileAttachs.Add(fileAttach);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }

                    }
                    #endregion

                    db.SaveChanges();

                    #region Gán người xử lý và gọi Notification

                    //ChuongNT3 - 14/06/2018 - Sửa thông báo
                    string AssCode = string.Empty;
                    int temAss = 0;
                    //ChuongNT3 - 14/06/2018 - Sửa thông báo
                    string ListAssigner = string.Empty;
                    //ChuongNT3 - 14/08/2018 - auto mail tạo
                    long reqIdCL = 0;
                    string titleCL = "";
                    foreach (var item in requestDics)
                    {
                        //ChuongNT3 - 14/08/2018 - auto mail tạo
                        reqIdCL = item.Value.Id;
                        titleCL = item.Value.Title;
                        SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", item.Value.Id), new SqlParameter("@StepNo", 1) };
                        DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                        if (table != null && table.Rows.Count > 0)
                        {
                            RequestHub requestHub = new RequestHub();
                            requestHub.id = item.Value.Id;
                            requestHub.title = item.Value.Title;
                            requestHub.description = form["Description"].ToString();
                            requestHub.date = item.Value.TimeCreate.ToShortDateString() + " " + item.Value.TimeCreate.ToLongTimeString();
                            requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                            NotificationManager nf = new NotificationManager();
                            List<string> assigners = new List<string>();
                            for (int i = 0; i < table.Rows.Count; i++)
                            {
                                //ChuongNT3 - 14/06/2018 - Sửa thông báo
                                if (table.Rows[0][3].ToString() == "" && request.TypeId == 181)
                                    temAss++;
                                AssCode += table.Rows[i]["Assigner"];
                                //ChuongNT3 - 14/06/2018 - Sửa thông báo
                                ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                                assigners.Add(table.Rows[i]["EmailShort"].ToString());
                            }
                            nf.Send(assigners, "Bạn có yêu cầu mới : " + item.Value.Id, item.Value.Id);
                            nf.RequestInsert(assigners, requestHub);
                        }
                    }

                    #endregion

                    #region Cc
                    foreach (var item in stringCc)
                    {
                        var AssignerCc = new Assigner();
                        AssignerCc.RequestId = reqIdCL; //ChuongNT3 - 06/09/2018 - sửa người cc;
                        AssignerCc.EmployeeCode = item.ToString();
                        AssignerCc.StepNo = 1;
                        AssignerCc.Type = Key.TypeAssigner.Cc;
                        AssignerCc.TimeCreate = DateTime.Now;
                        AssignerCc.Status = Key.StatusRequest.Waitting;
                        db.Assigners.Add(AssignerCc);
                    }
                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    #region Gửi calllog sang Outside
                    foreach (var item in requestDics)
                    {
                        if (item.Key == "HangDemo-Hang")
                        {
                            SqlParameter[] param = new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId",item.Value.Id),
                                };
                            sql.ExecuteCommand("sp_OUT_Request_InsertLightboxHangDemo", CommandType.StoredProcedure, param);
                        }
                    }
                    #endregion

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + String.Join(",", requestDics.Values.Select(x => x.Id).ToList()) + " thành công! <br/>";
                    //ChuongNT3 - 14/06/2018 - Sửa thông báo
                    if (temAss > 0)
                    {
                        SqlParameter[] param = new SqlParameter[]
                                {
                                    new SqlParameter("@Code",AssCode.Substring(1,AssCode.Length - 1))
                                };
                        DataTable tb = sql.ExecuteCommand("sp_GetAssignerHangDemo", CommandType.StoredProcedure, param);
                        if (tb != null && tb.Rows.Count > 0)
                        {
                            var a = tb.Rows[0]["Assigner"].ToString().Split('-');
                            ListAssigner = tb.Rows[0]["Assigner"].ToString().Replace(a[0], AssCode);
                        }
                    }
                    //ChuongNT3 - 14/06/2018 - Sửa thông báo
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    //ChuongNT3 - 14/08/2018 - auto mail tạo
                    XMail.Send(reqIdCL, "[CallLog] - " + titleCL, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }
        //▲ Add========================================================
        [HttpPost]
        public ActionResult CreateClaimSubsidy(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao calllog

                    request.StepNo = 1;
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.Status = Key.Status.Available;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                    db.Requests.Add(request);

                    #endregion

                    db.SaveChanges();

                    #region Tao chi tiet
                    foreach (var item in details)
                    {

                        RequestDetail rs = new RequestDetail();
                        rs.RequestId = request.Id;
                        rs.Property1 = item.ChonNhaMang;
                        rs.Property2 = item.PhanLoaiVanDe;
                        rs.Property3 = item.LiDo;
                        rs.Property4 = item.ThongTinKH;
                        rs.Property5 = item.SDTLienHe;
                        rs.Property6 = item.SDTDangKi;
                        rs.Property7 = item.DiaChiKh;
                        rs.Property8 = item.Tinh;
                        rs.Property9 = item.NoiDungChiTiet;
                        rs.Property11 = item.loaiLyDokhac;
                        rs.Status = Key.Status.Available;
                        db.RequestDetails.Add(rs);
                        //db.SaveChanges();

                        if (rs.Id != 0)
                        {
                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    db.FileAttachs.Add(fileAttach);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    #endregion

                    //▼	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                    if (request.TypeId == 186)
                    {
                        SqlParameter[] param186 = new SqlParameter[] {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@Type",1),
                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                        sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param186);

                        string messageAuto = "Chào Anh/chị " + UserManager.CurrentUser.EmployeeName + ", Tổng đài 87333 đã nhận được yêu cầu hỗ trợ từ phía Anh/chị. Tổng đài đang xử lý, sẽ phản hồi Anh/chị trong 15 phút tới. Anh/chị vui lòng chờ phản hồi nhé. Xin cảm ơn.";
                        var converstationAuto = new Conversation();
                        converstationAuto.RequestId = request.Id;
                        converstationAuto.Message = messageAuto;
                        converstationAuto.Sender = UserManager.CurrentUser.InsideCode;
                        converstationAuto.CreateBy = UserManager.CurrentUser.InsideCode;
                        converstationAuto.Status = Key.Status.Available;
                        converstationAuto.StepNo = 0;
                        converstationAuto.TimeCreate = DateTime.Now;
                        converstationAuto.Type = Key.Conversation.Tongdai;
                        db.Conversations.Add(converstationAuto);
                    }
                    //▲	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================

                    db.SaveChanges();

                    //#region Nội dung yêu cầu của người tạo
                    //if (message.Length != 0)
                    //{
                    //    var converstation = new Conversation();
                    //    converstation.RequestId = request.Id;
                    //    converstation.Message = message;
                    //    converstation.Sender = UserManager.CurrentUser.InsideCode;
                    //    converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                    //    converstation.Status = Key.Status.Available;
                    //    converstation.StepNo = 0;
                    //    converstation.TimeCreate = DateTime.Now;
                    //    converstation.Type = Key.Conversation.Create;
                    //    db.Conversations.Add(converstation);
                    //}
                    //#endregion

                    #region Gán người xử lý và gọi Notification

                    string ListAssigner = string.Empty;

                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                    if (table != null && table.Rows.Count > 0)
                    {
                        RequestHub requestHub = new RequestHub();
                        requestHub.id = request.Id;
                        requestHub.title = request.Title;
                        requestHub.description = form["Description"].ToString();
                        requestHub.date = request.TimeCreate.ToShortDateString() + " " + request.TimeCreate.ToLongTimeString();
                        requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                        NotificationManager nf = new NotificationManager();
                        List<string> assigners = new List<string>();
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                            assigners.Add(table.Rows[i]["EmailShort"].ToString());
                        }
                        nf.Send(assigners, "Bạn có yêu cầu mới : " + request.Id, request.Id);
                        nf.RequestInsert(assigners, requestHub);
                    }


                    #endregion

                    #region Cc
                    foreach (var item in stringCc)
                    {
                        var AssignerCc = new Assigner();
                        AssignerCc.RequestId = request.Id;
                        AssignerCc.EmployeeCode = item.ToString();
                        AssignerCc.StepNo = 1;
                        AssignerCc.Type = Key.TypeAssigner.Cc;
                        AssignerCc.TimeCreate = DateTime.Now;
                        AssignerCc.Status = Key.StatusRequest.Waitting;
                        db.Assigners.Add(AssignerCc);
                    }
                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + Convert.ToString(request.Id) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }
        //▼ Add  - PhiN - 02 / 01 / 2017 - add category 187 - ThayDoiLayOutMatTien==================================================
        //▼ Edit - ThuongNM2 -2018.10.05 - Sửa quy trình loại 187 - 191
        [HttpPost]
        public ActionResult CreateLayOutMatTien(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);
                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
                    string JobTitleCodeEmpCreate = "";
                    DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
                    if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
                    {
                        JobTitleCodeEmpCreate = tableEmpDetail.Rows[0]["JobTitleCode"].ToString();
                    }
                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao chi tiet
                    int j = 0;
                    foreach (var item in details)
                    {
                        int loaiyeucau = item.loaiYeuCau;
                        string LoaiCallLog = string.Empty;
                        var step_create = 0;
                        var assigner_create = string.Empty;
                        var status_create = string.Empty;
                        string Title = "Cập nhật thay đổi Layout mặt tiền & mặt bằng shop - " + item.TenVungMien + " - " + item.MaShopB1 + " - " + item.TenShop + " - " + DateTime.Now.Day + "/" + DateTime.Now.Month + "/" + DateTime.Now.Year;
                        byte rqStatus = Key.StatusRequest.Waitting;
                        if (item.loaiYeuCau != null)
                        {
                            LoaiCallLog = item.loaiYeuCau.ToString();
                        }

                        int typeID_Create = 0;
                        if (item.loaiYeuCau == "190")
                        {
                            typeID_Create = 190;
                            step_create = 1;
                            rqStatus = Key.StatusRequest.Waitting;
                        }
                        else if (item.loaiYeuCau == "191")
                        {
                            Title = "Cập nhật Layout shop thông thường - " + item.TenVungMien + " - " + item.MaShopB1 + " - " + item.TenShop + " - " + DateTime.Now.Day + "/" + DateTime.Now.Month + "/" + DateTime.Now.Year;
                            typeID_Create = 191;
                            step_create = (JobTitleCodeEmpCreate == "00069" || JobTitleCodeEmpCreate == "00245") ? 2 : 1; // Edit - ThuongNM2 - 2018/10/24 Thay đổi chức danh để tạo CL
                            if (step_create == 2)
                            {
                                rqStatus = Key.StatusRequest.Processing;
                            }
                        }
                        if (loaiyeucau == 190 || loaiyeucau == 191)
                        {
                            var requestAnother = new Request();
                            requestAnother.Sender = UserManager.CurrentUser.InsideCode;
                            requestAnother.Assigner = "-1";
                            requestAnother.StepNo = step_create;
                            requestAnother.Title = Title;
                            requestAnother.StepStatus = Key.StatusRequest.Waitting;
                            requestAnother.TimeCreate = DateTime.Now;
                            if (DateTime.ParseExact(item.ThoiGianHienThi.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture) == DateTime.Now.Date)
                            {
                                requestAnother.TimeAppear = DateTime.ParseExact(item.ThoiGianHienThi.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                requestAnother.TimeAppear = null;
                            }
                            requestAnother.isParent = false;
                            requestAnother.Status = rqStatus;
                            requestAnother.CreateBy = UserManager.CurrentUser.InsideCode;

                            requestAnother.FromShop = item.MaShop;
                            requestAnother.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;
                            requestAnother.TypeId = typeID_Create;
                            requestAnother.GroupId = 0;
                            requestAnother.ReferenceCode = item.Quantity1;
                            db.Requests.Add(requestAnother);
                            db.SaveChanges();

                            requestDics.Add("single" + loaiyeucau.ToString() + '-' + j.ToString(), requestAnother);

                            RequestDetail rs = new RequestDetail();
                            rs.RequestId = requestAnother.Id;
                            rs.Property2 = item.MaShopB1;
                            rs.Property3 = item.tenLoaiYeucau;
                            rs.Property4 = item.loaiYeuCau;
                            rs.Property5 = item.thongTinThayDoiLayout;
                            rs.Property10 = DateTime.Now.ToShortTimeString();
                            rs.Time1 = DateTime.ParseExact(item.ThoiGianHienThi.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            rs.Status = Key.Status.Available;
                            db.RequestDetails.Add(rs);
                            db.SaveChanges();
                            string fNames1 = Convert.ToString(item.HinhLayoutMatTien);
                            string fNames2 = Convert.ToString(item.HinhLayoutmatBang);
                            string fNames3 = Convert.ToString(item.HinhAnhThucTeShop);
                            if (fNames1 != null && fNames1 != "" && fNames1.Length > 0)
                            {
                                string[] words1 = fNames1.Split(',');
                                foreach (string word in words1)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                        fileAttach.StepNo = requestAnother.StepNo;
                                        fileAttach.RequestId = requestAnother.Id;
                                        fileAttach.RequestDetailId = rs.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutMatTien";
                                        db.FileAttachs.Add(fileAttach);

                                    }
                                }
                            }
                            if (fNames2 != null && fNames2 != "" && fNames2.Length > 0)
                            {
                                string[] words2 = fNames2.Split(',');
                                foreach (string word in words2)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                        fileAttach.StepNo = requestAnother.StepNo;
                                        fileAttach.RequestId = requestAnother.Id;
                                        fileAttach.RequestDetailId = rs.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutmatBang";
                                        db.FileAttachs.Add(fileAttach);
                                    }
                                }
                            }
                            if (fNames3 != null && fNames3 != "" && fNames3.Length > 0)
                            {
                                string[] words3 = fNames3.Split(',');
                                foreach (string word in words3)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                        fileAttach.StepNo = requestAnother.StepNo;
                                        fileAttach.RequestId = requestAnother.Id;
                                        fileAttach.RequestDetailId = rs.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutthucshop";
                                        db.FileAttachs.Add(fileAttach);
                                    }
                                }
                            }

                        }
                        j++;
                    }

                    #endregion

                    db.SaveChanges();
                    #region Gán người xử lý và gọi Notification

                    string ListAssigner = string.Empty;
                    foreach (var item in requestDics)
                    {
                        #region Cc
                        foreach (var itemcc in stringCc)
                        {
                            var AssignerCc = new Assigner();
                            AssignerCc.RequestId = item.Value.Id;
                            AssignerCc.EmployeeCode = itemcc.ToString();
                            AssignerCc.StepNo = item.Value.StepNo;
                            AssignerCc.Type = Key.TypeAssigner.Cc;
                            AssignerCc.TimeCreate = DateTime.Now;
                            AssignerCc.Status = Key.StatusRequest.Waitting;
                            db.Assigners.Add(AssignerCc);
                        }
                        #endregion
                        if (item.Value.TimeAppear != null)
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", item.Value.Id) };
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                            if (table != null && table.Rows.Count > 0)
                            {
                                RequestHub requestHub = new RequestHub();
                                requestHub.id = item.Value.Id;
                                requestHub.title = item.Value.Title;
                                requestHub.description = form["Description"].ToString();
                                requestHub.date = item.Value.TimeCreate.ToShortDateString() + " " + item.Value.TimeCreate.ToLongTimeString();
                                requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                                NotificationManager nf = new NotificationManager();
                                List<string> assigners = new List<string>();
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                                    assigners.Add(table.Rows[i]["EmailShort"].ToString());
                                }
                                nf.Send(assigners, "Bạn có yêu cầu mới : " + item.Value.Id, item.Value.Id);
                                nf.RequestInsert(assigners, requestHub);
                            }
                        }
                    }
                    #endregion
                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + String.Join(",", requestDics.Values.Select(x => x.Id).ToList()) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    TempData["Message"] = strReturn;


                    //▲ Edit  - NgoanHT - 10/01/2018 - Loại: 187 - sửa tạo calllog

                    #region Lưu ảnh
                    string fName = string.Empty;
                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                if (fName.Contains("fileUpload")) // file đính kèm của CL
                                {
                                    foreach (var item in requestDics)
                                    {
                                        fName = item.Value.Id.ToString() + file.FileName;
                                        var path = string.Format("{0}\\{1}", pathString, fName);
                                        file.SaveAs(path);
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                        fileAttach.StepNo = item.Value.StepNo;
                                        fileAttach.RequestId = item.Value.Id;
                                        fileAttach.RequestDetailId = null;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = null;
                                        db.FileAttachs.Add(fileAttach);
                                    }

                                }
                                else
                                {
                                    var path = string.Format("{0}\\{1}", pathString, fName);
                                    file.SaveAs(path);
                                }


                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0}", ex.ToString()));
                    }
                    #endregion

                    db.SaveChanges();
                    foreach (var item in requestDics)
                    {
                        XMail.Send(item.Value.Id, "[CallLog] - " + item.Value.Title, XMail.ProcessType.Create);
                    }


                    // gửi email :

                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0}", ex.ToString()));
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }
        //▲ Edit - ThuongNM2 -2018.10.05 - Sửa quy trình loại 187 - 191
        //▲ Edit  - NgoanHT - 29/01/2018 - Loại: 187 - Sửa hàm ThayDoiLayOutMatTien
        //▲ Add  - PhiN - 02 / 01 / 2017 - add category 187 - ThayDoiLayOutMatTien==================================================
        #region  Details
        public ActionResult Details(long? Id)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            if (Id == null)
            {
                TempData["Message"] = "Request không tồn tại!";
                return RedirectToAction("Index", "Home");
            }
            var request = new Request();
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                request = db.Requests.FirstOrDefault(x => x.Id == Id);
            }
            var request_ARCH = new Requests_ARCH();
            if (request == null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    request_ARCH = db.Requests_ARCH.FirstOrDefault(x => x.Id == Id);
                }
            }

            if (request == null && request_ARCH != null)
            {
                request = new Models.Request();
                request.Id = request_ARCH.Id;
                request.Sender = request_ARCH.Sender;
                request.Assigner = request_ARCH.Assigner;
                request.Title = request_ARCH.Title;
                request.GroupId = request_ARCH.GroupId;
                request.TypeId = request_ARCH.TypeId;
                request.StepNo = request_ARCH.StepNo;
                request.StepStatus = request_ARCH.StepStatus;
                request.TimeCreate = request_ARCH.TimeCreate;
                request.TimeAppear = request_ARCH.TimeAppear;
                request.TimeFinish = request_ARCH.TimeFinish;
                request.TimeClose = request_ARCH.TimeClose;
                request.TimeFutureFinish = request_ARCH.TimeFutureFinish;
                request.TimeReceipt = request_ARCH.TimeReceipt;
                request.TimeUat = request_ARCH.TimeUat;
                request.TimeGolive = request_ARCH.TimeGolive;
                request.ToShop = request_ARCH.ToShop;
                request.ToOffice = request_ARCH.ToOffice;
                request.isHighlight = request_ARCH.isHighlight;
                request.isParent = request_ARCH.isParent;
                request.RequestIdRefer = request_ARCH.RequestIdRefer;
                request.TotalRequestSplit = request_ARCH.TotalRequestSplit;
                request.TotalRequestComplete = request_ARCH.TotalRequestComplete;
                request.Remark = request_ARCH.Remark;
                request.Status = request_ARCH.Status;
                request.CreateBy = request_ARCH.CreateBy;
                request.FromShop = request_ARCH.FromShop;
                request.FromOffice = request_ARCH.FromOffice;
                request.StillShowing = request_ARCH.StillShowing;
                request.Repeat = request_ARCH.Repeat;
                request.ErrorCode = request_ARCH.ErrorCode;
                request.ReferenceCode = request_ARCH.ReferenceCode;
                request.TimeLastUpdate = request_ARCH.TimeLastUpdate;
                request.UpdateBy = request_ARCH.UpdateBy;
                request.SumtimeComplete = request_ARCH.SumtimeComplete;
                request.ReviewComplete = request_ARCH.ReviewComplete;
                request.LastAdminUpdate = request_ARCH.LastAdminUpdate;
                request.TimeLastAdminUpdate = request_ARCH.TimeLastAdminUpdate;
                request.TimeGoliveExpected = request_ARCH.TimeGoliveExpected;
            }
            EmployeeDAL empJobTitle = new EmployeeDAL();
            ViewBag.EmpJobTitle_134 = empJobTitle.GetJobtitle_134(UserManager.CurrentUser.InsideCode); // Add - LuanNT44 - 28 / 03 / 2019 - Loại 134 - xét điều kiện chức danh show conversation
            ViewBag.EmpJobTitleFlag = empJobTitle.GetEmpOfJobtitle(UserManager.CurrentUser.InsideCode);
            ViewBag.EmpJobTitleCSKH_GQKNFlag = empJobTitle.GetEmpOfJobtitleCSKH_GQKN(UserManager.CurrentUser.InsideCode);
            ViewBag.EmpJobTitleCSKH_QA_Flag = empJobTitle.CheckJobtitle_CSKH_QA(UserManager.CurrentUser.InsideCode);
            //TuanNA89 - 03/03/2020 - cho phép chức danh Điều phối hãng cập nhật HXL KH
            ViewBag.ShowPopup_HXLKH_Type19 = empJobTitle.Check_ShowPopup_HXLKH_Type19(request.Id, UserManager.CurrentUser.InsideCode);
            if (request != null)
            {
                try
                {
                    sql.ExecuteWithoutResult("sp_Web_Requests_Details_Assigners_Update_IsRead", CommandType.StoredProcedure, new SqlParameter[]{
                                new SqlParameter("@RequestId",request.Id),
                                new SqlParameter("@EmployeeCode",UserManager.CurrentUser.InsideCode)});
                    var permissons = GetPermissions(request.Id);
                    //▼  Add - LuanNT44 - 30/05/2018 - Loại 48 - Xử lý vi phạm
                    //if (request.TypeId == 48 && !permissons.Contains(Permission.Assigner) && !permissons.Contains(Permission.Sender))
                    //{
                    //    TempData["Message"] = "Rất tiếc bạn không phải người xử lý CallLog này";
                    //    return RedirectToAction("Index", "Home");
                    //}
                    //▲  Add - LuanNT44 - 30/05/2018 - Loại 48 - Xử lý vi phạm
                    if (request.TypeId == 19 && (request.TotalRequestComplete != null) && request.Status < Key.StatusRequest.Complete)
                    {
                        var requestNoti = new Request();
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                        {
                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                        }))
                        {
                            requestNoti = db.Requests.FirstOrDefault(x => x.Id == request.TotalRequestComplete
                                            && (x.Status == Key.StatusRequest.Processing || x.Status == Key.StatusRequest.Complete));
                        }

                        EmployeeDAL empJ = new EmployeeDAL();
                        if (requestNoti != null && (TempData["Message"] == null) && empJ.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == false)
                        {
                            TempData["Message"] = "TH này đã được xử lý ngoài giờ hành chính, vui lòng liên hệ người trực hotline để cập nhật!";
                        }
                    }

                    #region Process
                    ViewBag.TimeOut = Session.Timeout;
                    JsonConvert.DefaultSettings = (() =>
                    {
                        var settings = new JsonSerializerSettings();
                        settings.Converters.Add(new StringEnumConverter { CamelCaseText = true });
                        return settings;
                    });

                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        var images = (from f in db.FileAttachs
                                      where f.RequestId == request.Id && f.Status == Key.Status.Available && f.RequestDetailId == null
                                      select new
                                      {
                                          Id = f.Id,
                                          Uri = (f.Domain != null && f.Domain.Length > 0) ? f.Domain + f.Uri : f.Uri,
                                          ApproveStatus = f.ApproveStatus
                                      }).ToList().Select(x => new FileAttach { Id = x.Id, Uri = x.Uri, ApproveStatus = x.ApproveStatus });

                        if (images.Count() == 0)
                        {
                            var imagesARCH = (from f in db.FileAttachs_ARCH
                                              where f.RequestId == request.Id && f.Status == Key.Status.Available && f.RequestDetailId == null
                                              select new
                                              {
                                                  Id = f.Id,
                                                  Uri = (f.Domain != null && f.Domain.Length > 0) ? f.Domain + f.Uri : f.Uri,
                                                  ApproveStatus = f.ApproveStatus
                                              }).ToList().Select(x => new FileAttachs_ARCH { Id = x.Id, Uri = x.Uri, ApproveStatus = x.ApproveStatus });
                            ViewBag.fa = imagesARCH;
                            ViewBag.Count = imagesARCH != null ? imagesARCH.Count() : 0;
                        }
                        else
                        {
                            ViewBag.fa = images;
                            ViewBag.Count = images != null ? images.Count() : 0;
                        }
                    }

                    //▼	Edit - VietMXH - 03/12/2018 - Fix Load AssinerName==================================================
                    EmployeeDAL l__EmployeeDAL = new EmployeeDAL();
                    var emp = l__EmployeeDAL.Get(request.Sender);
                    if (request.Sender == "-1")
                    {
                        emp = new F03_Employees();
                        emp.EmployeeName = "Hệ thống";
                    }
                    if (emp != null)
                    {
                        var empJobShop = l__EmployeeDAL.GetByJobAndShop(request.Sender);
                        if (empJobShop != null && empJobShop.Rows.Count > 0)
                        {
                            ViewBag.EmpJobShop = empJobShop.Rows[0]["EmpJobShop"].ToString();
                        }
                        ViewBag.Email = emp.Email;
                        ViewBag.EmployeeName = emp.EmployeeName;

                        string l_Domain__Inside = ConfigurationManager.AppSettings["Domain__Inside"];
                        if (string.IsNullOrEmpty(l_Domain__Inside))
                        {
                            l_Domain__Inside = "";
                        }

                        ViewBag.Avatar = (emp.AvatarImageLink == null || emp.AvatarImageLink == "") ? "/assets/images/people.png" : l_Domain__Inside + emp.AvatarImageLink.Replace("~", "");

                        var assigners = l__EmployeeDAL.Get(UserManager.CurrentUser.InsideCode);
                        if (assigners != null)
                        {
                            ViewBag.Jobtiles = assigners.JobTitle;
                        }
                    }

                    if (permissons.Contains(Permission.Assigner) && request.StepStatus == Key.StatusRequest.Waitting)
                    {
                        ViewBag.AssinerName = UserManager.CurrentUser.InsideCode + "--" + UserManager.CurrentUser.EmployeeName;
                    }
                    else
                    {
                        string userAssignerCode = string.Empty;
                        if (request.Assigner != null && request.Assigner.Length > 0)
                            userAssignerCode = request.Assigner;
                        else
                        {
                            SqlParameter[] l__SqlParameter_Arr = new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@StepNo", request.StepNo)
                            };
                            DataTable l__DataTable = sql.ExecuteCommand("sp__WEB__Requests__Details__Assigners__GetByStepNo", CommandType.StoredProcedure, l__SqlParameter_Arr);
                            if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                            {
                                userAssignerCode = l__DataTable.Rows[0]["EmployeeCode"].ToString();
                            }
                        }
                        var assigner = l__EmployeeDAL.Get(userAssignerCode);
                        if (assigner != null)
                        {
                            ViewBag.AssinerName = assigner.EmployeeCode + "--" + assigner.EmployeeName;
                        }
                        else if (userAssignerCode == "-1")
                        {
                            ViewBag.AssinerName = "Hệ thống";
                        }
                        else if (userAssignerCode == "-2")
                        {
                            ViewBag.AssinerName = "Nhà vận chuyển";
                        }
                        else if (userAssignerCode == "-3")
                        {
                            ViewBag.AssinerName = "Hệ thống POS";
                        }
                        else if (userAssignerCode.Length > 0 && userAssignerCode.Substring(0, 1) == "H")
                        {
                            SqlParameter[] param = new SqlParameter[]
                                {
                                    new SqlParameter("@Code",userAssignerCode.Substring(1,userAssignerCode.Length - 1))
                                };
                            DataTable tb = sql.ExecuteCommand("sp_GetAssignerHangDemo", CommandType.StoredProcedure, param);
                            if (tb != null && tb.Rows.Count > 0)
                            {
                                ViewBag.AssinerName = tb.Rows[0]["Assigner"].ToString();
                            }
                            else
                            {
                                ViewBag.AssinerName = "Chưa có người xử lý";
                            }
                        }
                        else
                        {
                            ViewBag.AssinerName = "Chưa có người xử lý";
                        }
                    }
                    //▲	Edit - VietMXH - 03/12/2018 - Fix Load AssinerName==================================================

                    ViewBag.Permissions = permissons;
                    ViewBag.Pers = JsonConvert.SerializeObject(permissons);
                    var permissonList = permissons.Select(x => x.ToString()).ToList();
                    var requestDetail = new RequestDetail();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                    }))
                    {
                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id && x.Status == Key.Status.Available);
                    }

                    //▼ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                    if (request.TypeId == 19 && requestDetail != null)
                    {
                        ViewBag.LoaiKN_19 = requestDetail.Property1;
                    }
                    //▲ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                    var requestMain = new Request();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                    }))
                    {
                        requestMain = db.Requests.FirstOrDefault(x => x.Id == Id);
                    }
                    dynamic actions;
                    if (requestMain != null)
                    {
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            if (request.TypeId == 126 && request.ErrorCode == "1")
                            {
                                actions = (from a in db.DirectionActions
                                           where a.TypeId == 130 && a.StepNo == request.StepNo
                                           && a.Status == Key.Status.Available
                                           && permissonList.Contains(a.Permission)
                                           select new
                                           {
                                               ActionName = a.ActionName,
                                               ActionType = a.ActionType,
                                               ClassName = a.ActionType == "comment" ? "fa-comments" :
                                               a.ActionType == "changeStep" ? "fa-arrow-right" :
                                               a.ActionType == "complete" ? "fa-circle-o-notch" :
                                               a.ActionType == "changeAssigner" ? "fa fa-users" :
                                               a.ActionType == "reply" ? "fa-reply" :
                                               a.ActionType == "sendPartner" ? "fa-paper-plane" :
                                               a.ActionType == "changePart" ? "fa-share-square-o" : ""//TrungNC3 - 26/12/2017 - Add button xử lý
                                           }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                            }
                            else if (request.TypeId == 19 && request.StepNo == 2 && requestDetail.Property3 != "Bảo hành" && requestDetail.Property3 != "Bảo hành vàng")
                            {
                                actions = (from a in db.DirectionActions
                                           where a.TypeId == 19 && a.StepNo == request.StepNo
                                           && a.Status == Key.Status.Available
                                           && permissonList.Contains(a.Permission)
                                           && a.ActionType != "changeStep"
                                           select new
                                           {
                                               ActionName = a.ActionName,
                                               ActionType = a.ActionType,
                                               ClassName = a.ActionType == "comment" ? "fa-comments" :
                                               a.ActionType == "changeStep" ? "fa-arrow-right" :
                                               a.ActionType == "complete" ? "fa-circle-o-notch" :
                                               a.ActionType == "changeAssigner" ? "fa fa-users" :
                                               a.ActionType == "reply" ? "fa-reply" :
                                               a.ActionType == "sendPartner" ? "fa-paper-plane" :
                                               a.ActionType == "changePart" ? "fa-share-square-o" : ""//TrungNC3 - 26/12/2017 - Add button xử lý
                                           }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                            }
                            else if (request.TypeId == 19 && request.StepNo == 2 && (requestDetail.Property3 == "Bảo hành" || requestDetail.Property3 == "Bảo hành vàng"))
                            {
                                actions = (from a in db.DirectionActions
                                           where a.TypeId == 19 && a.StepNo == request.StepNo
                                           && a.Status == Key.Status.Available
                                           && permissonList.Contains(a.Permission)
                                           && (a.ActionType != "complete" || a.Permission == "Admin")
                                           select new
                                           {
                                               ActionName = a.ActionName,
                                               ActionType = a.ActionType,
                                               ClassName = a.ActionType == "comment" ? "fa-comments" :
                                               a.ActionType == "changeStep" ? "fa-arrow-right" :
                                               a.ActionType == "complete" ? "fa-circle-o-notch" :
                                               a.ActionType == "changeAssigner" ? "fa fa-users" :
                                               a.ActionType == "reply" ? "fa-reply" :
                                               a.ActionType == "sendPartner" ? "fa-paper-plane" :
                                               a.ActionType == "changePart" ? "fa-share-square-o" : ""//TrungNC3 - 26/12/2017 - Add button xử lý
                                           }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                            }
                            //▼ Add - TuanNA89 - 22/10/2019 - Calllog khiếu nại, loại khiếu nại Ecom
                            else if (request.TypeId == 19 && request.StepNo == 1 && requestDetail.Property1 == "Ecom")
                            {
                                actions = (from a in db.DirectionActions
                                           where a.TypeId == 19 && a.StepNo == request.StepNo
                                           && a.Status == Key.Status.Available
                                           && permissonList.Contains(a.Permission)
                                           && a.ActionType != "changeStep"
                                           select new
                                           {
                                               ActionName = a.ActionName,
                                               ActionType = a.ActionType,
                                               ClassName = a.ActionType == "comment" ? "fa-comments" :
                                               a.ActionType == "changeStep" ? "fa-arrow-right" :
                                               a.ActionType == "complete" ? "fa-circle-o-notch" :
                                               a.ActionType == "changeAssigner" ? "fa fa-users" :
                                               a.ActionType == "reply" ? "fa-reply" :
                                               a.ActionType == "sendPartner" ? "fa-paper-plane" :
                                               a.ActionType == "changePart" ? "fa-share-square-o" : ""
                                           }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                            }
                            //▲ Add - TuanNA89 - 22/10/2019 - Calllog khiếu nại, loại khiếu nại Ecom
                            else
                            {
                                actions = (from a in db.DirectionActions
                                           where a.TypeId == request.TypeId && a.StepNo == request.StepNo
                                           && a.Status == Key.Status.Available
                                           && permissonList.Contains(a.Permission)
                                           select new
                                           {
                                               ActionName = a.ActionName,
                                               ActionType = a.ActionType,
                                               ClassName = a.ActionType == "comment" ? "fa-comments" :
                                               a.ActionType == "changeStep" ? "fa-arrow-right" :
                                               a.ActionType == "complete" ? "fa-circle-o-notch" :
                                               a.ActionType == "changeAssigner" ? "fa fa-users" :
                                               a.ActionType == "reply" ? "fa-reply" :
                                               a.ActionType == "sendPartner" ? "fa-paper-plane" :
                                               a.ActionType == "changePart" ? "fa-share-square-o" : ""//TrungNC3 - 26/12/2017 - Add button xử lý
                                           }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                            }
                        }
                    }
                    else
                    {
                        actions = "";
                    }

                    ViewBag.Actions = actions;
                    DataSet infors = sql.ExecuteCommandDataSet("Request_GetDetail", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id)
                    });
                    ViewBag.Converstation = infors.Tables[0].Rows;
                    ViewBag.rowCreate = infors.Tables[1].Rows;
                    ViewBag.RequestSteps = infors.Tables[2].Rows;
                    ViewBag.Cc = infors.Tables[3].Rows;
                    //▼  Add - LuanNT44 - 25/06/2019 - Màn hình định nghĩa CL Hỗ trợ bán hàng LuanNT44-30/08/2019
                    if (request.TypeId == 25)
                    {
                        DataTable t215 = sql.ExecuteCommand("Converstation_Get", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@RequestId",request.Id),
                            new SqlParameter("@Type",15)
                        });
                        ViewBag.ConverstationHDSD_25 = t215.Rows;
                    }
                    //▲ Add - LuanNT44 - 25/06/2019 - Màn hình định nghĩa CL Hỗ trợ bán hàng LuanNT44-30/08/2019

                    dynamic flagGrAssigner;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        var permissionIDList = (from a in db.Permissions
                                                where a.TypeId == 19
                                                && a.StepNo == 1 && a.Status == Key.Status.Available
                                                select a.Id).ToList();

                        flagGrAssigner = db.Assignments.FirstOrDefault(x => x.Status == Key.Status.Available
                        && x.Assigner == UserManager.CurrentUser.InsideCode && permissionIDList.Contains(x.PermissionId));
                    }

                    if (flagGrAssigner != null)
                        ViewBag.FlagAssignerStep1 = true;
                    else
                        ViewBag.FlagAssignerStep1 = false;

                    List<SelectListItem> errors;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        if (request.TypeId == 45)
                        {
                            errors = (from m in db.MasterDatas
                                      where m.Group == "ErrorItSupport"
                                      select new SelectListItem
                                      {
                                          Text = m.Name,
                                          Value = m.Code,
                                          Selected = m.Code == request.ErrorCode
                                      }).ToList();
                        }
                        else
                        {
                            errors = (from m in db.MasterDatas
                                      where m.Group == "Error"
                                      select new SelectListItem
                                      {
                                          Text = m.Name,
                                          Value = m.Code,
                                          Selected = m.Code == request.ErrorCode
                                      }).ToList();
                        }
                    }

                    //▼  Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside
                    List<SelectListItem> GetShop215 = new List<SelectListItem>();
                    GetShop215.Add(new SelectListItem { Value = "0", Text = "Chọn shop", Selected = true });
                    if (request.TypeId == 215)//TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216 - Bỏ code cũ
                    {
                        DataTable tb215 = GetAllShop215(request.Id);  // LuanNT44-23/10/2019-215
                        if (tb215 != null && tb215.Rows.Count > 0)
                        {
                            foreach (DataRow row in tb215.Rows)
                            {
                                GetShop215.Add(new SelectListItem { Value = row["WarehouseCode"].ToString(), Text = row["value"].ToString() });
                            }
                        }
                    }
                    ViewBag.GetShopAll215 = GetShop215;
                    //▲ Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside
                    ViewBag.Ass = UserManager.CurrentUser.InsideCode;
                    ViewBag.Errors = errors;
                    return View(request);
                    #endregion
                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController Detail(long?Id)", ex.ToString());
                    TempData["Message"] = "Lỗi Load Request! " + ex.Message;
                    return RedirectToAction("Index", "Home");
                }
            }
            else
            {
                TempData["Message"] = "Request không tồn tại!";
                return RedirectToAction("Index", "Home");
            }
        }

        //▼ ChuongNT3 - 17/09/2018 - checkCSHK
        public bool checkCSKH()
        {
            if (UserManager.CurrentUser != null)
            {
                EmployeeDAL empJ = new EmployeeDAL();
                if (empJ.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == true)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        //▲ ChuongNT3 - 17/09/2018 - checkCSHK


        //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý

        [ValidateInput(false)]
        public ActionResult InsertOrUpdateProcessingResults(long requestId, string message)
        {

            if (UserManager.CurrentUser != null)
            {
                EmployeeDAL empJ = new EmployeeDAL();
                if (empJ.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == false
                    //TuanNA89 - 03/03/2020 - cho phép chức danh Điều phối hãng cập nhật HXL KH
                    && empJ.Check_ShowPopup_HXLKH_Type19(requestId, UserManager.CurrentUser.InsideCode) == false
                    )
                {
                    TempData["Message"] = "Chức năng thuộc phân quyền của CSKH";
                    return RedirectToAction("Details", new { Id = requestId });
                }
                var requestMain = new Request();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    requestMain = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }
                if (requestMain != null && requestMain.Status == Key.StatusRequest.Complete && requestMain.TypeId == 19)
                {
                    return Json('0', JsonRequestBehavior.AllowGet);
                }
                else
                {
                    RequestDetail requestDetail = new RequestDetail();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId && x.Status == Key.Status.Available);
                    }
                    if (requestDetail != null)
                    {
                        requestDetail.Note = message;
                    }
                    Request request = new Request();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        request = db.Requests.FirstOrDefault(x => x.RequestIdRefer == requestId);
                    }
                    Conversation cv = new Conversation();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        cv = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                        && x.Type == Key.Conversation.ProcessingResults
                        && x.Status == Key.Status.Available);
                    }
                    Conversation cv2 = new Conversation();
                    if (request != null)
                    {
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            cv2 = db.Conversations.FirstOrDefault(x => x.RequestId == request.Id
                            && x.Type == Key.Conversation.ProcessingResults
                            && x.Status == Key.Status.Available);
                        }
                    }
                    if (cv == null)
                    {
                        Conversation conver = new Conversation
                        {
                            RequestId = requestId,
                            StepNo = 0,
                            Sender = UserManager.CurrentUser.InsideCode,
                            Message = message,
                            CreateBy = UserManager.CurrentUser.InsideCode,
                            Type = Key.Conversation.ProcessingResults,
                            Status = Key.Status.Available,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(conver);
                        if (request != null)
                        {
                            Conversation conver2 = new Conversation
                            {
                                RequestId = request.Id,
                                StepNo = 0,
                                Sender = UserManager.CurrentUser.InsideCode,
                                Message = message,
                                CreateBy = UserManager.CurrentUser.InsideCode,
                                Type = Key.Conversation.ProcessingResults,
                                Status = Key.Status.Available,
                                TimeCreate = DateTime.Now
                            };
                            db.Conversations.Add(conver2);
                        }
                    }
                    else
                    {
                        cv.Message = message;
                        cv.Sender = UserManager.CurrentUser.InsideCode;
                        cv.TimeCreate = DateTime.Now;
                        if (cv2 != null && request != null)
                        {
                            cv2.Message = message;
                            cv2.Sender = UserManager.CurrentUser.InsideCode;
                            cv2.TimeCreate = DateTime.Now;
                        }
                    }
                    db.SaveChanges();
                }
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
        [ValidateInput(false)]
        public ActionResult InsertOrUpdateConversation(long requestId, string message, string listShop = "", string type19 = "") //ChuongNT3 - 13/06/2018 - loai 19 
        {
            if (UserManager.CurrentUser != null)
            {
                var requestMain = new Request();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    requestMain = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }
                if (requestMain != null && requestMain.Status == Key.StatusRequest.Complete && requestMain.TypeId == 19)
                {
                    return Json('0', JsonRequestBehavior.AllowGet);
                }
                else
                {
                    RequestDetail requestDetail = new RequestDetail();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId && x.Status == Key.Status.Available);
                    }

                    // Add - TuanNA89 - 05/05/2020 - Ghi log cập nhật HXL KH
                    string messageLog = "";
                    if (requestDetail.Property6 != listShop)
                    {
                        messageLog = Environment.NewLine + "- Shop vi phạm từ " + requestDetail.Property6 + " sang " + listShop;
                    }
                    if (type19 != "")
                    {
                        if (requestDetail.Property4 != type19)
                        {
                            messageLog = Environment.NewLine + "- Loại CallLog từ " + requestDetail.Property4 + " sang " + type19;
                        }
                    }
                    if (messageLog.Length > 0)
                    {
                        Conversation cv_Log = new Conversation
                        {
                            RequestId = requestMain.Id,
                            StepNo = 0,
                            Sender = "-1",
                            Message = "User " + UserManager.CurrentUser.InsideCode + " cập nhật HXL khách hàng:" + messageLog,
                            CreateBy = "-1",
                            Type = 0,
                            Status = 0,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(cv_Log);
                    }
                    // Add - TuanNA89 - 05/05/2020 - Ghi log cập nhật HXL KH

                    requestDetail.Property6 = listShop;
                    //ChuongNT3 - 13/06/2018 - loại 19
                    if (type19 != "")
                    {
                        requestDetail.Property4 = type19;
                    }
                    //ChuongNT3 - 13/06/2018 - loại 19

                    Conversation cv = new Conversation();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        cv = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                        && x.Type == Key.Conversation.Trouble
                        && x.Status == Key.Status.Available);
                    }

                    Request request = new Request();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        request = db.Requests.FirstOrDefault(x => x.RequestIdRefer == requestId);
                    }

                    Conversation cv2 = new Conversation();
                    if (request != null)
                    {
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            cv2 = db.Conversations.FirstOrDefault(x => x.RequestId == request.Id
                            && x.Type == Key.Conversation.Trouble
                            && x.Status == Key.Status.Available);
                        }
                    }

                    if (cv == null)
                    {
                        Conversation conver = new Conversation
                        {
                            RequestId = requestId,
                            StepNo = 0,
                            Sender = UserManager.CurrentUser.InsideCode,
                            Message = message,
                            CreateBy = UserManager.CurrentUser.InsideCode,
                            Type = Key.Conversation.Trouble,
                            Status = Key.Status.Available,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(conver);
                        if (request != null)
                        {
                            Conversation conver2 = new Conversation
                            {
                                RequestId = request.Id,
                                StepNo = 0,
                                Sender = UserManager.CurrentUser.InsideCode,
                                Message = message,
                                CreateBy = UserManager.CurrentUser.InsideCode,
                                Type = Key.Conversation.Trouble,
                                Status = Key.Status.Available,
                                TimeCreate = DateTime.Now
                            };
                            db.Conversations.Add(conver2);
                        }
                        //TuanNA89 - 25/05/2020 - Bắn mail khi có cập nhật HXL KH
                        XMail.Send(requestId, "", XMail.ProcessType.Communicate);
                    }
                    else
                    {
                        cv.Message = message;
                        cv.Sender = UserManager.CurrentUser.InsideCode;
                        cv.TimeCreate = DateTime.Now;
                        if (cv2 != null && request != null)
                        {
                            cv2.Message = message;
                            cv2.Sender = UserManager.CurrentUser.InsideCode;
                            cv2.TimeCreate = DateTime.Now;
                        }
                        //TuanNA89 - 25/05/2020 - Bắn mail khi có cập nhật HXL KH
                        XMail.Send(requestId, "", XMail.ProcessType.Communicate);
                    }

                    List<Permission> permissions = GetPermissions(requestId);
                    if (permissions.Contains(RequestsController.Permission.Assigner)
                            && permissions.Contains(RequestsController.Permission.GroupAssigner))
                    {
                        if (requestMain != null && requestMain.Status != Key.StatusRequest.Complete)
                        {
                            requestMain.Status = Key.StatusRequest.Processing;
                            requestMain.Assigner = UserManager.CurrentUser.InsideCode;
                        }
                    }

                    db.SaveChanges();
                    //ChuongNT3 - 10/07/2018 - Update ASM 
                    sql.ExecuteCommand("UpdateASM", CommandType.StoredProcedure, new SqlParameter[] {
                        new SqlParameter("@RequestId",requestId)
                        });
                    //ChuongNT3 - 10/07/2018 - Update ASM 
                    return Json('1', JsonRequestBehavior.AllowGet);
                }
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        //▼ Add - TrungNC3 - 2017.09.01 - Thêm hướng xử lí hành chính

        [ValidateInput(false)]
        public ActionResult InsertOrUpdateConversationHXLHC(long requestId, string message)
        {
            if (UserManager.CurrentUser != null)
            {
                var requestMain = new Request();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    requestMain = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }

                if (requestMain != null && requestMain.Status == Key.StatusRequest.Complete && requestMain.TypeId == 19)
                {
                    return Json('0', JsonRequestBehavior.AllowGet);
                }
                else
                {
                    //var requestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId &&
                    //        x.Status == Key.Status.Available);
                    //requestDetail.Property6 = listShop;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                    }))
                    {
                        Conversation cv = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                        && x.Type == Key.Conversation.HXLHC
                        && x.Status == Key.Status.Available);
                        //RequestDetail dt = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                        //    && x.Status == Key.Status.Available);
                        var request = db.Requests.FirstOrDefault(x => x.RequestIdRefer == requestId);
                        Conversation cv2 = new Conversation();
                        if (request != null)
                        {
                            cv2 = db.Conversations.FirstOrDefault(x => x.RequestId == request.Id
                            && x.Type == Key.Conversation.HXLHC
                            && x.Status == Key.Status.Available);
                        }

                        if (cv == null)
                        {
                            Conversation conver = new Conversation
                            {
                                RequestId = requestId,
                                StepNo = requestMain.StepNo,
                                Sender = UserManager.CurrentUser.InsideCode,
                                Message = message,
                                CreateBy = UserManager.CurrentUser.InsideCode,
                                Type = Key.Conversation.HXLHC,
                                Status = Key.Status.Available,
                                TimeCreate = DateTime.Now
                            };
                            db.Conversations.Add(conver);
                            if (request != null)
                            {
                                Conversation conver2 = new Conversation
                                {
                                    RequestId = request.Id,
                                    StepNo = 0,
                                    Sender = UserManager.CurrentUser.InsideCode,
                                    Message = message,
                                    CreateBy = UserManager.CurrentUser.InsideCode,
                                    Type = Key.Conversation.HXLHC,
                                    Status = Key.Status.Available,
                                    TimeCreate = DateTime.Now
                                };
                                db.Conversations.Add(conver2);
                            }

                        }
                        else
                        {
                            cv.Message = message;
                            cv.Sender = UserManager.CurrentUser.InsideCode;
                            cv.TimeCreate = DateTime.Now;
                            if (cv2 != null && request != null)
                            {
                                cv2.Message = message;
                                cv2.Sender = UserManager.CurrentUser.InsideCode;
                                cv2.TimeCreate = DateTime.Now;
                            }

                        }

                        List<Permission> permissions = GetPermissions(requestId);
                        if (permissions.Contains(RequestsController.Permission.Assigner)
                                && permissions.Contains(RequestsController.Permission.GroupAssigner))
                        {
                            if (requestMain != null && requestMain.Status != Key.StatusRequest.Complete)
                            {
                                requestMain.Status = Key.StatusRequest.Processing;
                                requestMain.Assigner = UserManager.CurrentUser.InsideCode;
                            }
                        }

                    }
                    db.SaveChanges();

                    return Json('1', JsonRequestBehavior.AllowGet);
                }
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        //▲ Add - =======================================
        public string CheckHXL24h_19(long requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                RequestDetail dt = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                    && x.Status == Key.Status.Available);
                Conversation converHXL = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                                && (x.Type == Key.Conversation.HXLTT || x.Type == Key.Conversation.Trouble)
                                && x.Status == Key.Status.Available);
                if (dt != null && dt.Quantity6 == 0 && converHXL != null)
                {
                    return "1";
                }
                return string.Empty;
            }
        }
        public ActionResult InsertOrUpdateConversation_CSVC(long requestId, string message)
        {
            if (UserManager.CurrentUser != null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    Conversation cv = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                                        && x.Type == Key.Conversation.CSVC
                                        && x.Status == Key.Status.Available);
                    if (cv == null)
                    {
                        Conversation conver = new Conversation
                        {
                            RequestId = requestId,
                            StepNo = 0,
                            Sender = UserManager.CurrentUser.InsideCode,
                            Message = message,
                            CreateBy = UserManager.CurrentUser.InsideCode,
                            Type = Key.Conversation.CSVC,
                            Status = Key.Status.Available,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(conver);
                    }
                    else
                    {
                        cv.Message = message;
                        cv.Sender = UserManager.CurrentUser.InsideCode;
                        cv.TimeCreate = DateTime.Now;
                    }
                }
                db.SaveChanges();
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        public ActionResult UpdateChiPhiCSKHConfirm(long requestId, string moneyConfirm, string soSO, string moneySave, string Note)// Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
        {
            if (UserManager.CurrentUser != null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    RequestDetail dt = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId && x.Status == Key.Status.Available);
                    var request = db.Requests.FirstOrDefault(x => x.RequestIdRefer == requestId);
                    RequestDetail dt2 = new RequestDetail();
                    if (request != null)
                    {
                        dt2 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id && x.Status == Key.Status.Available);
                    }

                    if (dt != null)
                    {
                        dt.Property9 = moneyConfirm;
                        dt.Imei = UserManager.CurrentUser.InsideCode;
                        dt.Time1 = DateTime.Now;
                        dt.SaleCode = soSO;
                        //▼ Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
                        dt.Money1 = Convert.ToDouble(moneySave);
                        if (Note != "")
                        {
                            dt.Property11 = Note;
                        }
                        //▲ Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
                    }
                    if (dt2 != null && request != null)
                    {
                        dt2.Property9 = moneyConfirm;
                        dt.Imei = UserManager.CurrentUser.InsideCode;
                        dt.Time1 = DateTime.Now;
                    }
                }

                db.SaveChanges();
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        // ChuongNT3 - 08/08/2018 - cập nhật hướng xử lý nội bộ 
        public ActionResult InsertOrUpdateConversationInternal(long requestId, long requestIdRefer, string message)
        {
            if (UserManager.CurrentUser != null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    Conversation cv = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                    && x.Type == Key.Conversation.Internal
                    && x.Status == Key.Status.Available);
                    long idCL_Cha = 0;
                    if (requestIdRefer == -1)
                    {
                        idCL_Cha = requestId;
                    }
                    else
                    {
                        if (requestId > requestIdRefer)
                        {
                            idCL_Cha = requestIdRefer;
                        }
                        else if (requestId < requestIdRefer)
                        {
                            idCL_Cha = requestId;
                        }
                    }
                    if (cv == null)
                    {
                        Conversation conver = new Conversation
                        {
                            RequestId = requestId,
                            StepNo = 0,
                            Sender = UserManager.CurrentUser.InsideCode,
                            Message = "Số Calllog KNKH: " + idCL_Cha + ". " + message,
                            CreateBy = UserManager.CurrentUser.InsideCode,
                            Type = Key.Conversation.Internal,
                            Status = Key.Status.Available,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(conver);
                    }
                    else
                    {
                        string[] re_message_check = message.Split(' ');
                        string[] re_message = message.Split('.');
                        string r_msg = "";
                        for (int i = 1; i < re_message.Length; i++)
                        {
                            r_msg = r_msg + re_message[i] + ".";
                        }
                        if (cv.Message != message)
                        {
                            if (re_message_check[0] == "Số" && re_message_check[1] == "Calllog" && re_message_check[2] == "KNKH:" && re_message_check[3] == idCL_Cha.ToString() + ".")
                            {
                                cv.Message = "Số Calllog KNKH: " + idCL_Cha + ". " + r_msg;
                            }
                            else
                            {
                                cv.Message = "Số Calllog KNKH: " + idCL_Cha + ". " + message;
                            }
                            cv.Sender = UserManager.CurrentUser.InsideCode;
                            cv.TimeCreate = DateTime.Now;
                        }
                    }

                    var r2 = db.Requests.FirstOrDefault(x => x.RequestIdRefer == requestId);
                    if (r2 != null)
                    {
                        Conversation cv2 = db.Conversations.FirstOrDefault(x => x.RequestId == r2.Id
                        && x.Type == Key.Conversation.Internal
                        && x.Status == Key.Status.Available);

                        if (cv2 == null)
                        {
                            Conversation conver2 = new Conversation
                            {
                                RequestId = r2.Id,
                                StepNo = 0,
                                Sender = UserManager.CurrentUser.InsideCode,
                                Message = "Số Calllog KNKH: " + idCL_Cha + ". " + message,
                                CreateBy = UserManager.CurrentUser.InsideCode,
                                Type = Key.Conversation.Internal,
                                Status = Key.Status.Available,
                                TimeCreate = DateTime.Now
                            };
                            db.Conversations.Add(conver2);
                        }
                        else
                        {
                            string[] re_message_check_2 = message.Split(' ');
                            string[] re_message_2 = message.Split('.');
                            string r_msg = "";
                            for (int i = 1; i < re_message_2.Length; i++)
                            {
                                r_msg = r_msg + re_message_2[i] + ".";
                            }
                            // TuanNA89 - 25/02/2020 - fix lỗi không cập nhật được HXL nội bộ
                            if (re_message_check_2[0] == "Số" && re_message_check_2[1] == "Calllog" && re_message_check_2[2] == "KNKH:" && re_message_check_2[3] == idCL_Cha.ToString() + ".")
                            {
                                cv2.Message = "Số Calllog KNKH: " + idCL_Cha + ". " + r_msg;
                            }
                            else
                            {
                                cv2.Message = "Số Calllog KNKH: " + idCL_Cha + ". " + message;
                            }
                            cv2.Sender = UserManager.CurrentUser.InsideCode;
                            cv2.TimeCreate = DateTime.Now;
                        }
                    }
                }

                db.SaveChanges();
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        // ChuongNT3 - 08/08/2018 - cập nhật hướng xử lý nội bộ 
        //▼ Add - TrungNC3 - 2017.10.02 - Bổ sung yêu cầu Chất lượng xử lý CSKH
        public ActionResult InsertOrUpdateConversationInfomation(long requestId, string message)
        {
            if (UserManager.CurrentUser != null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    Conversation cv = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                                        && x.Type == Key.Conversation.Infomation
                                        && x.Status == Key.Status.Available);
                    if (cv == null)
                    {
                        Conversation conver = new Conversation
                        {
                            RequestId = requestId,
                            StepNo = 0,
                            Sender = UserManager.CurrentUser.InsideCode,
                            Message = message,
                            CreateBy = UserManager.CurrentUser.InsideCode,
                            Type = Key.Conversation.Infomation,
                            Status = Key.Status.Available,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(conver);
                    }
                    else
                    {
                        if (cv.Message != message)
                        {
                            cv.Message = message;
                            cv.Sender = UserManager.CurrentUser.InsideCode;
                            cv.TimeCreate = DateTime.Now;
                        }
                    }

                    var r2 = db.Requests.FirstOrDefault(x => x.RequestIdRefer == requestId);
                    if (r2 != null)
                    {
                        Conversation cv2 = db.Conversations.FirstOrDefault(x => x.RequestId == r2.Id
                        && x.Type == Key.Conversation.Infomation
                        && x.Status == Key.Status.Available);

                        if (cv2 == null)
                        {
                            Conversation conver2 = new Conversation
                            {
                                RequestId = r2.Id,
                                StepNo = 0,
                                Sender = UserManager.CurrentUser.InsideCode,
                                Message = message,
                                CreateBy = UserManager.CurrentUser.InsideCode,
                                Type = Key.Conversation.Infomation,
                                Status = Key.Status.Available,
                                TimeCreate = DateTime.Now
                            };
                            db.Conversations.Add(conver2);
                        }
                        else
                        {
                            cv2.Message = message;
                            cv2.Sender = UserManager.CurrentUser.InsideCode;
                            cv2.TimeCreate = DateTime.Now;
                        }
                    }
                }
                db.SaveChanges();
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        //▲ Add - TrungNC3 - 2017.10.02 - Bổ sung yêu cầu Chất lượng xử lý CSKH
        public ActionResult UpdatePhanLoai_KhieuNai(long requestId, string phanLoai, string phanLoaiCha)
        {
            if (UserManager.CurrentUser != null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    RequestDetail rd = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                    && x.Status == Key.Status.Available);

                    // Add - TuanNA89 - 05/05/2020 - Ghi log cập nhật HXL KH
                    Request request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                    string messageLog = "";
                    if (rd.Property1 != phanLoai || rd.Property3 != phanLoaiCha)
                    {
                        messageLog = Environment.NewLine + "- Loại KN từ " + rd.Property3 + "/" + rd.Property1 + " sang " + phanLoaiCha + "/" + phanLoai;
                    }

                    if (messageLog.Length > 0)
                    {
                        Conversation cv_Log = new Conversation
                        {
                            RequestId = request.Id,
                            StepNo = 0,
                            Sender = "-1",
                            Message = "User " + UserManager.CurrentUser.InsideCode + " cập nhật HXL khách hàng:" + messageLog,
                            CreateBy = "-1",
                            Type = 0,
                            Status = 0,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(cv_Log);
                    }
                    // Add - TuanNA89 - 05/05/2020 - Ghi log cập nhật HXL KH

                    rd.Property3 = phanLoaiCha;
                    rd.Property1 = phanLoai;
                    rd.EmpCode = UserManager.CurrentUser.InsideCode;
                    rd.Time2 = DateTime.Now;//ChuongNT3 - 19/12/2018 - thời gian update loại kn
                    var r2 = db.Requests.FirstOrDefault(x => x.Id == requestId);
                    RequestDetail rd2 = db.RequestDetails.FirstOrDefault(x => x.RequestId == r2.RequestIdRefer
                        && x.Status == Key.Status.Available);
                    if (rd2 != null)
                    {
                        rd2.Property3 = phanLoaiCha;
                        rd2.Property1 = phanLoai;
                        rd2.EmpCode = UserManager.CurrentUser.InsideCode;
                        rd2.Time2 = DateTime.Now;//ChuongNT3 - 19/12/2018 - thời gian update loại kn
                    }
                }
                db.SaveChanges();

                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        //ChuongNT3 - 11/07/2018 - update cl con
        //public ActionResult UpdateCalllogType_157(long requestId)
        //{
        //    if (UserManager.CurrentUser != null)
        //    {
        //        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
        //        {
        //            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
        //        }))
        //        {

        //            Request rq = db.Requests.FirstOrDefault(x => x.Id == requestId && x.TypeId == 157);
        //            if (rq != null)
        //            {
        //                rq.Status = 4;
        //            }
        //        }
        //        db.SaveChanges();
        //        return Json('1', JsonRequestBehavior.AllowGet);
        //    }
        //    else
        //        return Json('0', JsonRequestBehavior.AllowGet);
        //}
        public ActionResult UpdateCalllogType_19(long requestId, string typeCalllog)
        {
            if (UserManager.CurrentUser != null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    RequestDetail rd = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                    && x.Status == Key.Status.Available);
                    rd.Property4 = typeCalllog;

                    var r2 = db.Requests.FirstOrDefault(x => x.Id == requestId);
                    RequestDetail rd2 = db.RequestDetails.FirstOrDefault(x => x.RequestId == r2.RequestIdRefer
                        && x.Status == Key.Status.Available);
                    if (rd2 != null)
                        rd2.Property4 = typeCalllog;
                }
                db.SaveChanges();
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        public ActionResult ReplacePhanLoai(long requestId, string phanLoaiChaNew)
        {
            if (UserManager.CurrentUser != null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    Request r = db.Requests.FirstOrDefault(x => x.Id == requestId);
                    RequestDetail rd = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                        && x.Status == Key.Status.Available);
                    if (rd.Property1 != "" && rd.Property1 != null)
                    {
                        r.Title = r.Title.Replace(rd.Property1, phanLoaiChaNew);
                    }

                    Request r2 = db.Requests.FirstOrDefault(x => x.Id == r.RequestIdRefer);
                    if (r2 != null)
                    {
                        RequestDetail rd2 = db.RequestDetails.FirstOrDefault(x => x.RequestId == r2.Id
                        && x.Status == Key.Status.Available);
                        //ChuongNT3 - 13/06/2018 - loại 19 - fix tiêu đề 
                        //if (rd2.Property3 != "" && rd2.Property3 != null)
                        //{
                        //    r2.Title = r2.Title.Replace(rd2.Property3, phanLoaiChaNew);
                        //}
                        rd2.Property3 = rd.Property3;
                        r2.Title = r.Title;
                        //ChuongNT3 - 13/06/2018 - loại 19 - fix tiêu đề 
                    }
                }
                db.SaveChanges();
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        public ActionResult UpdateChucDanh_19(long requestId, string listJobTitle)
        {
            if (UserManager.CurrentUser != null)
            {
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    RequestDetail rd = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                    && x.Status == Key.Status.Available);

                    rd.Property7 = listJobTitle;

                    var request2 = db.Requests.FirstOrDefault(x => x.Id == requestId);
                    RequestDetail rd2 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request2.RequestIdRefer
                        && x.Status == Key.Status.Available);
                    if (rd2 != null)
                        rd2.Property7 = listJobTitle;
                }
                db.SaveChanges();
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetByJobAndShop(string employeeCode)
        {
            try
            {
                SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@EmployeeCode",employeeCode)
                };
                var table = sql.ExecuteCommand("GetByJobShop", CommandType.StoredProcedure, param);
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestsController GetByJobAndShop()", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }

        }

        [HttpGet, ValidateInput(false)]
        public ActionResult EditDetail(int requestId, int typeId, int groupId, string title, string ErrorCode,
                    bool Repeat, bool newTypeIdflag)
        {
            Request request = new Request();
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            }

            if (request != null)
            {
                //  ▼ ChuongNT3 - 02/03/2019 - log thay đổi thông tin CL 
                sql.ExecuteCommand("sp_Log_EditDetail", CommandType.StoredProcedure, new SqlParameter[] {
                    new SqlParameter("@RequestId",request.Id),
                    new SqlParameter("@TypeId",request.TypeId),
                    new SqlParameter("@GroupId",request.GroupId),
                    new SqlParameter("@NewTypeId",typeId),
                    new SqlParameter("@NewGroupId",groupId),
                    new SqlParameter("@Note","EditDetail"),
                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
                });
                //  ▲ ChuongNT3 - 02/03/2019 - log thay đổi thông tin CL 

                request.TypeId = typeId;
                request.GroupId = groupId;
                request.Title = title;
                request.ErrorCode = ErrorCode;
                request.Repeat = Repeat;
                request.StepStatus = Key.StatusRequest.Waitting;
                db.SaveChanges();
                if ((typeId == 45 || typeId == 4) && newTypeIdflag == true)
                {
                    request.TimeCreate = DateTime.Now;
                    request.TimeFinish = null;

                    (from a in db.RequestSteps
                     where a.RequestId == request.Id
                     && a.StepNo == request.StepNo
                     && a.Status == Key.Status.Available
                     select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);

                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[] {
                    new SqlParameter("@RequestId",request.Id),
                    new SqlParameter("@StepNo",request.StepNo)});
                    if (table != null && table.Rows.Count > 0)
                        request.Assigner = table.Rows[0]["Assigner"].ToString();
                    else
                        request.Assigner = string.Empty;

                    db.SaveChanges();
                }
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        //▼ Add - NgoanHT - 20/11/2017 - Loại: 184 - Thêm
        [HttpGet, ValidateInput(false)]
        public ActionResult EditDetailFFHT(int requestId, string title, string ErrorCode)
        {
            Request request = new Request();
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            }
            if (request != null)
            {
                request.Title = title;
                request.ErrorCode = ErrorCode;
                request.StepStatus = Key.StatusRequest.Waitting;
                db.SaveChanges();
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //▲ Add - NgoanHT - 20/11/2017 - Loại: 184 - Thêm

        [HttpGet, ValidateInput(false)]
        public ActionResult EditErrorType_45(long requestId, int typeId, string title)
        {
            Request request = new Request();
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            }

            if (request != null)
            {
                //  ▼ ChuongNT3 - 02/03/2019 - log thay đổi thông tin CL 
                sql.ExecuteCommand("sp_Log_EditDetail", CommandType.StoredProcedure, new SqlParameter[] {
                    new SqlParameter("@RequestId",request.Id),
                    new SqlParameter("@TypeId",request.TypeId),
                    new SqlParameter("@GroupId",request.GroupId),
                    new SqlParameter("@NewTypeId",typeId),
                    new SqlParameter("@NewGroupId",request.GroupId),
                    new SqlParameter("@Note","EditErrorType_45"),
                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
                });
                //  ▲ ChuongNT3 - 02/03/2019 - log thay đổi thông tin CL 

                request.TypeId = typeId;
                request.Title = title;
                if (typeId == 1)
                {
                    request.TimeCreate = DateTime.Now;
                    (from a in db.RequestSteps
                     where a.RequestId == request.Id
                     && a.StepNo == request.StepNo
                     && a.Status == Key.Status.Available
                     select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                }
                db.SaveChanges();

                if (typeId == 1)
                {
                    (from a in db.Assigners
                     where a.RequestId == request.Id
                     && a.StepNo == request.StepNo
                     && a.Type == Key.TypeAssigner.To
                     select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                    db.SaveChanges();
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[] {
                    new SqlParameter("@RequestId",request.Id),
                    new SqlParameter("@StepNo",request.StepNo)});
                    if (table != null && table.Rows.Count > 0)
                        request.Assigner = table.Rows[0]["Assigner"].ToString();
                    else
                        request.Assigner = string.Empty;
                    db.SaveChanges();
                }
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        #endregion

        #region Trao đổi , trả lời ,chuyển bước , hoàn thành , print , Gửi đối tác, chuyển bộ phận liên quan

        [HttpPost, ValidateInput(false)]
        public ActionResult Conversation(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            int requestId = form["RequestId"].EParseToInt();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                string message = Convert.ToString(form["Message"]);
                string imageChecked = Convert.ToString(form["ImageValidate"]);
                var details = Convert.ToString(form["Details"]);
                var objects = JsonConvert.DeserializeObject<dynamic>(details);

                var detailsCc = Convert.ToString(form["DetailsCc"]);
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);

                string CheckImagesApproved = Convert.ToString(form["CheckApprovedImages_166"]);
                bool FlagUpdateCallLogMkts = false;// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                var request = new Request();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }
                //ChuongNT3 - 22/10/2018 - thêm hình up thêm
                string shop_cu = string.Empty;
                string shop_moi = string.Empty;
                if (request != null)
                {
                    #region Verify
                    //▼	Edit - VietMXH - 12/10/2018 - Tối ưu==================================================
                    if (request.Status == Key.StatusRequest.Complete)
                    {
                        if (request.TypeId == 19)
                        {
                            TempData["Message"] = "Trạng Thái Request đã hoàn tất không thể trao đổi!";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                    }
                    else if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }

                    if (message.Length == 0)
                    {
                        TempData["Message"] = "Trao đổi phải nhập nội dung";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    //▲	Edit - VietMXH - 12/10/2018 - Tối ưu==================================================
                    #endregion

                    #region Insert Converstation
                    var conversation = new Conversation();
                    conversation.RequestId = request.Id;
                    conversation.Sender = sender;
                    conversation.Message = message;
                    conversation.Status = Key.Status.Available;
                    conversation.TimeCreate = DateTime.Now;
                    conversation.Type = Key.Conversation.Comment;
                    conversation.StepNo = request.StepNo;
                    // TuanNA89 - 26/02/2020 - Ghi nhận thêm IpClient
                    conversation.IPClient = UserManager.CurrentUser.IPClient;
                    db.Conversations.Add(conversation);
                    if ((request.TypeId == 19 || request.TypeId == 157) && request.RequestIdRefer != null)
                    {
                        var conversationAdd = new Conversation();
                        conversationAdd.RequestId = Convert.ToInt64(request.RequestIdRefer);
                        conversationAdd.Sender = sender;
                        conversationAdd.Message = message;
                        conversationAdd.Status = Key.Status.Available;
                        conversationAdd.TimeCreate = DateTime.Now;
                        conversationAdd.Type = Key.Conversation.Comment;
                        conversationAdd.StepNo = request.StepNo;
                        // TuanNA89 - 26/02/2020 - Ghi nhận thêm IpClient
                        conversationAdd.IPClient = UserManager.CurrentUser.IPClient;
                        db.Conversations.Add(conversationAdd);
                    }
                    #endregion

                    #region Cập nhật lại trạng thái khi người xử lý là  Assigner hoặc Assigner

                    var permissions = GetPermissions(request.Id);
                    EmployeeDAL emp = new EmployeeDAL();
                    if (permissions.Contains(Permission.Assigner) ||
                        permissions.Contains(Permission.GroupAssigner) ||
                        (permissions.Contains(Permission.Admin) && request.TypeId != 19) ||
                        permissions.Contains(Permission.SupperAdmin))
                    {
                        if (request.Status != Key.StatusRequest.Complete && request.Status != Key.StatusRequest.Reply)
                        {
                            request.Status = Key.StatusRequest.Processing;
                            request.StepStatus = Key.StatusRequest.Processing;
                            if (request.TypeId != 19 || (request.TypeId == 19 && emp.CheckJobtitle_Support(UserManager.CurrentUser.InsideCode) == true))
                            {
                                request.Assigner = sender;
                            }
                            if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                request.TimeLastAdminUpdate = DateTime.Now;
                                request.LastAdminUpdate = sender;
                            }

                            #region Update or Insert RequestStep
                            var step = new RequestStep();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                step = db.RequestSteps.FirstOrDefault(
                                               x => x.RequestId == request.Id
                                               && x.Status == Key.Status.Available
                                               && x.StepNo == request.StepNo);
                            }

                            if (step != null)
                            {
                                step.Assigner = sender;
                            }
                            else
                            {
                                var oldStep = new RequestStep();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    oldStep = (from s in db.RequestSteps
                                               where s.RequestId == request.Id
                                               && s.StepNo == request.StepNo - 1
                                               && s.Status == Key.Status.Available
                                               select s).FirstOrDefault();
                                }

                                step = new RequestStep();
                                step.RequestId = request.Id;
                                step.TimeCreate = DateTime.Now;
                                step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                                step.Assigner = sender;
                                step.StepNo = request.StepNo;
                                step.Status = Key.Status.Available;
                                db.RequestSteps.Add(step);
                            }
                            #endregion
                        }
                    }

                    //if ((permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin)) && request.Status == Key.StatusRequest.Reply)
                    if (request.Status == Key.StatusRequest.Reply)
                    {
                        request.StillShowing = true;
                    }
                    else if (request.Status == Key.StatusRequest.Complete && (request.TypeId == 19 || request.TypeId == 1 || request.TypeId == 3))
                    {
                        request.StillShowing = true;
                    }

                    if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && (request.StepNo == 1 || request.StepNo == 3))
                    {
                        string timeRecipt = form["dateRecive"];
                        string timeUat = form["dateUAT"];
                        string timeGolive = form["dateGolive"];
                        string timeGoliveDK = form["dateGoliveDK"];
                        //string timeFuFi = form["dateFuFi"];

                        if (timeRecipt == "") { request.TimeReceipt = null; }
                        else { request.TimeReceipt = DateTime.Parse(timeRecipt); }

                        if (timeUat == "") { request.TimeUat = null; }
                        else { request.TimeUat = DateTime.Parse(timeUat); }

                        if (timeGolive == "") { request.TimeGolive = null; }
                        else { request.TimeGolive = DateTime.Parse(timeGolive); }

                        if (timeGoliveDK == "") { request.TimeGoliveExpected = null; }
                        else { request.TimeGoliveExpected = DateTime.Parse(timeGoliveDK); }

                        //if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        //else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }

                    }
                    else if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && request.StepNo == 2)
                    {
                        string timeFuFi = form["dateFuFi"];
                        if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }
                    }


                    #endregion

                    #region Insert Cc
                    if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc) || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                    {
                        string strCc = "";
                        foreach (var item in Ccs) { strCc += item.id + ","; }
                        if (strCc.Length > 0)
                        {
                            strCc = strCc.Substring(0, strCc.Length - 1);
                            sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                        }
                        else
                        {
                            (from a in db.Assigners
                             where a.RequestId == request.Id
                             && a.Type == Key.TypeAssigner.Cc
                             select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                        }


                    }
                    #endregion

                    #region Update Item
                    if (new List<int> { 23, 125, 126, 127, 129, 162 }.Contains(request.TypeId))
                    {
                        #region Đồ dùng hc
                        if (permissions.Contains(Permission.Sender)
                            || permissions.Contains(Permission.Admin)
                            || permissions.Contains(Permission.SupperAdmin)
                            || permissions.Contains(Permission.Assigner)
                            || permissions.Contains(Permission.GroupAssigner))
                        {
                            #region update dinh muc
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityUpdate = item.QuantityAvaiable == null
                                                 ? quantityUpdate = 0 : quantityUpdate = item.QuantityAvaiable; // Edit - ThuongNM2 - 05/06/2018 - Chỉnh sửa bước 5 trao đổi không cập nhật QuantityAvailable
                                int thanhtien = item.Sum;
                                var requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                    int quantityNewest = requestDetail.QuantityAvaiable == null
                                                        ? requestDetail.Quantity.GetValueOrDefault(0)
                                                        : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                    int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        //'▼(#005)Update=================================== 
                                        //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                        //                                       && x.Month == request.TimeCreate.Month
                                        //                                       && x.Year == request.TimeCreate.Year);
                                        ItemUsedTmp itemUsed = new ItemUsedTmp();
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                && x.Month == request.TimeCreate.Month
                                                                                && x.Year == request.TimeCreate.Year);
                                        }

                                        //'▲(#005)Update===================================

                                        ////==== Hiền.Đoàn 21.02.2017 Lưu trừ hạn mức loại 23, 126 khi bước >=4
                                        if ((request.TypeId == 23 && request.StepNo == 4) ||
                                            (request.TypeId == 126 && request.StepNo >= 4) ||
                                            (request.TypeId == 162 && request.StepNo >= 4) ||
                                            (request.TypeId == 125 && request.StepNo == 4) ||
                                            (request.TypeId == 127 && request.StepNo == 3) ||
                                            new List<int> { 129 }.Contains(request.TypeId))
                                        {
                                            if (itemUsed == null)
                                            {
                                                itemUsed = new ItemUsedTmp();
                                                itemUsed.GroupId = item.GroupId;
                                                itemUsed.GroupValue = moneyDifference;
                                                itemUsed.Month = request.TimeCreate.Month;
                                                itemUsed.Year = request.TimeCreate.Year;
                                                itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                itemUsed.RequestId = request.Id;
                                                itemUsed.Status = Key.Status.Available;
                                                itemUseds.Add(itemUsed);
                                            }
                                            else
                                            {
                                                itemUsed.GroupValue += moneyDifference;
                                            }
                                            //db.ItemUsedTmps.Add(itemUsed);
                                        }

                                    }
                                    //▼ Edit - ThuongNM2 - 06/06/2018 - Thay đổi Sum = Quantity1*Price
                                    if (request.TypeId == 23) // Edit -ThuongNM2 - 05/06/2018 Thay đổi tất cả các trao đổi không lưu QuantityAvailable
                                    {
                                        requestDetail.QuantityAvaiable = null;
                                        requestDetail.Sum = item.Quantity1 * requestDetail.Price.GetValueOrDefault(0);
                                    }
                                    else
                                    {
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                    }
                                    //▲ Edit - ThuongNM2 - 06/06/2018 - Thay đổi Sum = Quantity1*Price
                                    requestDetail.Quantity1 = item.Quantity1;
                                    requestDetail.Quantity3 = item.Quantity3;

                                    string Property2 = string.Empty;
                                    if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                    {
                                        if (item.HTX == item.HinhThucXuat)
                                        {
                                            Property2 = null;
                                        }
                                        else
                                        {
                                            Property2 = item.HTX + "->" + item.HinhThucXuat;
                                        }
                                    }
                                    else
                                    {
                                        if (item.HinhThucXuat == requestDetail.Property1)
                                        {
                                            Property2 = requestDetail.Property2;
                                        }
                                        else
                                        {
                                            if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                            {
                                                Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                            }
                                            else
                                            {
                                                Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                            }
                                        }
                                    }
                                    requestDetail.Property2 = Property2;
                                    requestDetail.Property1 = item.HinhThucXuat;
                                    string timeF = (item.TimeConfirm != null || item.TimeConfirm.ToString() != "") ? item.TimeConfirm : "";
                                    //▼ Edit - ThuongNM2 - 27/09/2018 - Fix lỗi nếu như TimeF = null
                                    if (timeF != null)
                                    {
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestDetail.Time3 = timeF.EParseToDateTime(format);
                                        }
                                    }
                                    //▲ Edit - ThuongNM2 - 27/09/2018 - Fix lỗi nếu như TimeF = null

                                }
                            }
                            if (itemUseds.Count > 0)
                            {
                                db.ItemUsedTmps.AddRange(itemUseds);
                            }
                            #endregion
                        }


                        #endregion
                    }

                    //▼	LuanNT44 - 14/05/2018 - Loại 24 - Sửa chữa CSVC  -- LuanNT44 - 11/04/2020 - 24 - edit
                    else if (request.TypeId == 24)
                    {
                        #region Automatic

                        #endregion
                    }
                    //▲	LuanNT44 - 14/05/2018 - Loại 24 - Sửa chữa CSVC -- LuanNT44 - 11/04/2020 - 24 - edit

                    else if (request.TypeId == 28)
                    {
                        //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    var l__TienChenhLech__Old = (requestdetail.Money3 != 0) ? requestdetail.Money3 : 0;
                                    double l__TienChenhLech__New = double.TryParse(item.TienChenhLech.ToString(), out l__TienChenhLech__New) ? l__TienChenhLech__New : 0;

                                    //requestdetail.Approved = item.Approved;
                                    requestdetail.Money2 = item.TienChoXuLy;
                                    //requestdetail.Property1 = item.HXuLy;
                                    requestdetail.Money3 = item.TienChenhLech;
                                    requestdetail.Money4 = item.TienSoPhuNH;
                                    requestdetail.Property4 = item.NguyenNhanChenhLech;
                                    requestdetail.Property5 = item.HuongXuLyCuaKTHO;
                                    requestdetail.SaleCode = item.SoSO;
                                    requestdetail.Numeric1 = item.SoTienTruyThu;

                                    #region Lưu lịch sử cập nhật
                                    if (l__TienChenhLech__Old != l__TienChenhLech__New)
                                    {
                                        RequestDetail detailsNew = new RequestDetail();
                                        detailsNew.RequestId = request.Id;
                                        detailsNew.Status = Key.Status.Unavailable;
                                        detailsNew.Quantity = request.StepNo;
                                        detailsNew.Time1 = DateTime.Now;
                                        detailsNew.EmpCode = UserManager.CurrentUser.InsideCode;
                                        //detailsNew.Approved = item.Approved;
                                        detailsNew.Money2 = item.TienChoXuLy;
                                        //detailsNew.Property1 = item.HXuLy;
                                        detailsNew.Money3 = item.TienChenhLech;
                                        detailsNew.Money4 = item.TienSoPhuNH;
                                        //detailsNew.Property2 = item.GTTienChenhB1;
                                        //detailsNew.Property3 = item.GTTienChenhB3;
                                        detailsNew.Property4 = item.NguyenNhanChenhLech;
                                        detailsNew.Property5 = item.HuongXuLyCuaKTHO;
                                        detailsNew.SaleCode = item.SoSO;
                                        detailsNew.Numeric1 = item.SoTienTruyThu;
                                        db.RequestDetails.Add(detailsNew);
                                    }
                                    #endregion
                                }
                            }
                        }
                        #endregion
                        //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                    }
                    else if (request.TypeId == 130)
                    {
                        if (request.StepNo >= 2 && permissions.Contains(Permission.Assigner))
                        {
                            #region Đồ dùng hc
                            if (permissions.Contains(Permission.Sender)
                                || permissions.Contains(Permission.Admin)
                                || permissions.Contains(Permission.SupperAdmin)
                                || permissions.Contains(Permission.Assigner)
                                || permissions.Contains(Permission.GroupAssigner))
                            {
                                #region update dinh muc
                                ShopDAL shopDal = new ShopDAL();
                                var shopCreate = shopDal.Get(request.FromShop);
                                List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    int quantityUpdate = item.QuantityAvaiable;
                                    int thanhtien = item.Sum;
                                    var requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }

                                    if (requestDetail != null && requestDetail.Quantity != null)
                                    {
                                        // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                        int quantityNewest = requestDetail.QuantityAvaiable == null
                                                            ? requestDetail.Quantity.GetValueOrDefault(0)
                                                            : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                        int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                        if (moneyDifference != 0 && shopCreate != null)
                                        {
                                            //'▼(#005)Update=================================== 
                                            //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                            //                                       && x.Month == request.TimeCreate.Month
                                            //                                       && x.Year == request.TimeCreate.Year);
                                            ItemUsedTmp itemUsed = new ItemUsedTmp();
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                            {
                                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                            }))
                                            {
                                                itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                   && x.Month == request.TimeCreate.Month
                                                                                   && x.Year == request.TimeCreate.Year);
                                            }

                                            //'▲(#005)Update===================================

                                            if (itemUsed == null)
                                            {
                                                itemUsed = new ItemUsedTmp();
                                                itemUsed.GroupId = item.GroupId;
                                                itemUsed.GroupValue = moneyDifference;
                                                itemUsed.Month = request.TimeCreate.Month;
                                                itemUsed.Year = request.TimeCreate.Year;
                                                itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                itemUsed.RequestId = request.Id;
                                                itemUsed.Status = Key.Status.Available;
                                                itemUseds.Add(itemUsed);
                                            }
                                            else
                                            {
                                                itemUsed.GroupValue += moneyDifference;
                                            }
                                            //db.ItemUsedTmps.Add(itemUsed);
                                        }
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                        requestDetail.Quantity1 = item.Quantity1;
                                        requestDetail.Quantity3 = item.Quantity3;

                                        string Property2 = string.Empty;
                                        if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                        {
                                            if (item.HTX == item.HinhThucXuat)
                                            {
                                                Property2 = null;
                                            }
                                            else
                                            {
                                                Property2 = item.HTX + "->" + item.HinhThucXuat;
                                            }
                                        }
                                        else
                                        {
                                            if (item.HinhThucXuat == requestDetail.Property1)
                                            {
                                                Property2 = requestDetail.Property2;
                                            }
                                            else
                                            {
                                                if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                                {
                                                    Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                                }
                                                else
                                                {
                                                    Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                                }
                                            }
                                        }
                                        requestDetail.Property2 = Property2;
                                        requestDetail.Property1 = item.HinhThucXuat;

                                    }

                                }
                                if (itemUseds.Count > 0)
                                {
                                    db.ItemUsedTmps.AddRange(itemUseds);
                                }
                                #endregion
                            }


                            #endregion
                        }

                    }
                    //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                    else if (request.TypeId == 22)
                    {
                        #region Đồ dùng mko
                        ShopDAL shopDal = new ShopDAL();
                        var shopCreate = shopDal.Get(request.FromShop);
                        foreach (var item in objects)
                        {
                            int id = item.Id;
                            int quantityBaohanh = item.Quantity1;
                            int quantityCapMoi = item.Quantity2;
                            int quantity = item.Quantity;
                            int thanhtien = item.Sum;
                            var hinnthucxuly = item.Property1;
                            var requestDetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            }

                            var sum = 0;
                            var summoi = quantityBaohanh + quantityCapMoi;
                            if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                            {
                                sum = requestDetail.Quantity.GetValueOrDefault(0);
                            }
                            else
                            {
                                sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                            }
                            if (requestDetail != null && requestDetail.Quantity != null)
                            {
                                // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop                                   

                                int moneyDifference = (sum - summoi);
                                if (moneyDifference != 0 && shopCreate != null)
                                {
                                    SqlParameter[] param = new SqlParameter[]{
                                        new SqlParameter("@ShopCode",requestDetail.ShopCode),
                                        new SqlParameter("@ItemId", requestDetail.ItemId),
                                        new SqlParameter("@Quantity",moneyDifference),// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                        new SqlParameter("@RequestId",request.Id),
                                    };
                                    sql.ExecuteWithoutResult("sp_Insert_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                                    FlagUpdateCallLogMkts = true;// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                }
                                requestDetail.Quantity1 = quantityBaohanh;
                                requestDetail.Quantity2 = quantityCapMoi;
                                requestDetail.Quantity = quantity;
                                requestDetail.Property1 = hinnthucxuly;
                                requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                            }
                        }
                        #endregion
                    }
                    //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                    else if (request.TypeId == 161)
                    {
                        #region Đồ dùng mko khối BO
                        ShopDAL shopDal = new ShopDAL();
                        var shopCreate = shopDal.Get(request.FromShop);

                        foreach (var item in objects)
                        {
                            int id = item.Id;
                            int quantityBaohanh = item.Quantity1;
                            int quantityCapMoi = item.Quantity2;
                            int quantity = item.Quantity;
                            int thanhtien = item.Sum;
                            var hinnthucxuly = item.Property1;
                            var requestDetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            }

                            var sum = 0;
                            var summoi = quantityBaohanh + quantityCapMoi;
                            if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                            {
                                sum = requestDetail.Quantity.GetValueOrDefault(0);
                            }
                            else
                            {
                                sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                            }
                            if (requestDetail != null && requestDetail.Quantity != null)
                            {
                                requestDetail.Quantity1 = quantityBaohanh;
                                requestDetail.Quantity2 = quantityCapMoi;
                                requestDetail.Quantity = quantity;
                                requestDetail.Property1 = hinnthucxuly;
                                requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 115)
                    {
                        #region Đồ dùng mko Mkt tạo
                        ShopDAL shopDal = new ShopDAL();
                        var shopCreate = shopDal.Get(request.FromShop);
                        List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                        foreach (var item in objects)
                        {
                            int id = item.Id;
                            int quantityBaohanh = item.Quantity1;
                            int quantityCapMoi = item.Quantity2;
                            int quantity = item.Quantity;
                            int thanhtien = item.Sum;
                            var hinnthucxuly = item.Property1;
                            var requestDetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            }

                            var sum = 0;
                            var summoi = quantityBaohanh + quantityCapMoi;
                            if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                            {
                                sum = requestDetail.Quantity.GetValueOrDefault(0);
                            }
                            else
                            {
                                sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                            }
                            if (requestDetail != null && requestDetail.Quantity != null)
                            {
                                // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop                                   

                                int moneyDifference = (sum - summoi) * requestDetail.Price.GetValueOrDefault(0);
                                if (moneyDifference != 0 && shopCreate != null)
                                {
                                    //'▼(#005)Update=================================== 
                                    //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                    //                                       && x.Month == request.TimeCreate.Month
                                    //                                       && x.Year == request.TimeCreate.Year);
                                    ItemUsedTmp itemUsed = new ItemUsedTmp();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                           && x.Month == request.TimeCreate.Month
                                                                           && x.Year == request.TimeCreate.Year);
                                    }

                                    if (itemUsed == null)
                                    {
                                        itemUsed = new ItemUsedTmp();
                                        itemUsed.GroupId = item.GroupId;
                                        itemUsed.GroupValue = moneyDifference;
                                        itemUsed.Month = request.TimeCreate.Month;
                                        itemUsed.Year = request.TimeCreate.Year;
                                        itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                        itemUsed.RequestId = request.Id;
                                        itemUsed.Status = Key.Status.Available;
                                        itemUseds.Add(itemUsed);
                                    }
                                    else
                                    {
                                        itemUsed.GroupValue += moneyDifference;
                                    }
                                    //db.ItemUsedTmps.Add(itemUsed);
                                    //'▲(#005)Update===================================
                                }
                                requestDetail.Quantity1 = quantityBaohanh;
                                requestDetail.Quantity2 = quantityCapMoi;
                                requestDetail.Quantity = quantity;
                                requestDetail.Property1 = hinnthucxuly;
                                requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                            }
                        }
                        if (itemUseds.Count > 0)
                        {
                            db.ItemUsedTmps.AddRange(itemUseds);
                        }
                        #endregion
                    }
                    else if (request.TypeId == 61)
                    {
                        #region đơn hàng 100 tr
                        if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                var requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestDetail != null)
                                {
                                    requestDetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 60)
                    {
                        #region Xác nhận công nợ
                        if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Sender) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin)

                            //▼	Add - VietMXH - 02/10/2017 - User xử lý Bước 1 được nhập Giải trình cho CL Bước 2======================
                            || (request.StepNo == 2 && permissions.Contains(Permission.OldStepAssigner))
                            //▼	Add====================================================================================================

                            )
                        {
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            foreach (var item in objects)
                            {
                                int id = item.Id;

                                ////int money3 = item.Money3;   //  VietMXH - 24/09/2017 - Không dùng

                                string conversations = item.EnterConversations;
                                bool? approted = item.Approved;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                //▼	Delete - VietMXH - 24/09/2017 - Không dùng================================================================
                                ////if (requestDetail != null && money3 != 0)
                                ////{
                                ////    requestDetail.Money3 = money3;
                                ////}
                                //▼	Delete====================================================================================================

                                if (request.Sender == UserManager.CurrentUser.InsideCode)
                                {
                                    requestDetail.Approved = approted;
                                }

                                if (item.EnterConversations != null && item.EnterConversations != "")
                                {
                                    Conversation conversationRequestDetails = new Conversation();
                                    conversationRequestDetails.RequestId = request.Id;
                                    conversationRequestDetails.Sender = sender;
                                    conversationRequestDetails.Message = conversations;
                                    conversationRequestDetails.Status = Key.Status.Available;
                                    conversationRequestDetails.TimeCreate = DateTime.Now;
                                    conversationRequestDetails.Type = Key.Conversation.Comment;
                                    conversationRequestDetails.StepNo = request.StepNo;
                                    conversationRequestDetails.RequestDetailId = id;
                                    db.Conversations.Add(conversationRequestDetails);

                                    request.isHighlight = true;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 97)
                    {
                        #region Xác nhận công nợ
                        if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Sender) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int money3 = item.Money3;
                                string conversations = item.EnterConversations;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestDetail != null && money3 != 0)
                                {
                                    requestDetail.Money3 = money3;
                                }


                                if (item.EnterConversations != null && item.EnterConversations != "")
                                {
                                    Conversation conversationRequestDetails = new Conversation();
                                    conversationRequestDetails.RequestId = request.Id;
                                    conversationRequestDetails.Sender = sender;
                                    conversationRequestDetails.Message = conversations;
                                    conversationRequestDetails.Status = Key.Status.Available;
                                    conversationRequestDetails.TimeCreate = DateTime.Now;
                                    conversationRequestDetails.Type = Key.Conversation.Comment;
                                    conversationRequestDetails.StepNo = request.StepNo;
                                    conversationRequestDetails.RequestDetailId = id;
                                    db.Conversations.Add(conversationRequestDetails);

                                    request.isHighlight = true;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 68)
                    {
                        //'▼(#003)Add===================================   
                        #region Kiểm tra tồn quỹ

                        foreach (var item in objects)
                        {
                            int id = item.Id;
                            int Money = item.Money;
                            string Reason = item.Reason;
                            string CompensationPlans = item.CompensationPlans;
                            RequestDetail requestDetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            }

                            if (requestDetail != null)
                            {
                                if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                    permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                {
                                    requestDetail.Quantity1 = Money;
                                    requestDetail.Property1 = Reason;
                                    requestDetail.Property2 = CompensationPlans;
                                }
                            }

                        }

                        #endregion
                        //'▲(#003)Add===================================  
                    }
                    else if (request.TypeId == 69)
                    {
                        //'▼(#001)Add===================================  
                        #region Apple
                        foreach (var item in objects)
                        {
                            int id = item.Id;
                            bool Approved = false;
                            if (item.Approved == true)
                            {
                                Approved = true;
                            }
                            string imei = item.Imei;
                            RequestDetail requestDetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            }

                            if (requestDetail != null)
                            {
                                if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                    permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                {
                                    requestDetail.Approved = Approved;
                                }
                            }
                        }
                        #endregion
                        //'▲(#001)Add===================================
                    }
                    else if (request.TypeId == 53)
                    {
                        #region Bàn giao quy giữa ca
                        if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestDetail != null)
                                {
                                    requestDetail.Money3 = item.Money3;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 100)
                    {
                        #region kiem ke kho tong
                        if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestDetail != null)
                                {
                                    requestDetail.EmpCode1 = item.EmpCode1;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 82)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Property7 = item.Property7;
                                    requestdetail.Property8 = item.Property8;
                                    requestdetail.Money2 = item.Money2;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 103)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int l__RequestDetail__Id = item.Id;
                                if (l__RequestDetail__Id > 0)
                                {
                                    RequestDetail l__RequestDetail = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        l__RequestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == l__RequestDetail__Id);
                                    }
                                    if (l__RequestDetail != null)
                                    {
                                        l__RequestDetail.Approved = item.Approved;
                                        l__RequestDetail.Money2 = item.Money2;
                                        l__RequestDetail.Property5 = item.Property5;
                                        l__RequestDetail.Property6 = item.Property6;
                                        l__RequestDetail.Property7 = item.Property7;
                                        l__RequestDetail.Property8 = item.Property8;
                                    }
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                        #endregion
                    }
                    else if (request.TypeId == 104)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Money2 = item.Money2;
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Property7 = item.Property7;
                                    requestdetail.Property8 = item.Property8;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 51)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity3 = item.Approved;
                                    requestdetail.Property7 = item.Property7;
                                    requestdetail.Quantity4 = item.Quantity4;
                                    requestdetail.Property8 = item.Property8;
                                }
                                //▼ ADD - LuanNT44 - 14/07/2020 - Ghi log old CL 51 DGG
                                int Approved_51 = item.Approved;
                                int Quantity4_51 = item.Quantity4;
                                string Property7_51 = item.Property7;
                                string Property8_51 = item.Property8;
                                SqlParameter[] param_log_51 = new SqlParameter[]
                                    {
                                            new SqlParameter("@RequestId", request.Id),
                                            new SqlParameter("@UserName", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@Quantity3", Approved_51),
                                            new SqlParameter("@Quantity4", Quantity4_51),
                                            new SqlParameter("@Property7", Property7_51),
                                            new SqlParameter("@Property8", Property8_51),
                                            new SqlParameter("@TypeButton", "Conversation")
                                    };
                                sql.ExecuteWithoutResult("sp_Calllog_CreateLogDuyetGG_old_51", CommandType.StoredProcedure, param_log_51);
                                //▲ ADD - LuanNT44 - 14/07/2020 - Ghi log old CL 51 DGG
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 56)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.Quantity2 = item.Quantity;
                                    requestdetail.Note = item.Note;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 108)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Note = item.Note;
                                    requestdetail.Property2 = item.Property2;
                                }

                            }
                        }
                        #endregion
                    }

                    //▼	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================
                    else if (request.TypeId == 109)
                    {
                        #region MyRegion
                        if (request.StepNo == 1)
                        {
                            #region ===Bước 1===
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Sender))
                            {
                                var details2 = Convert.ToString(form["Details2"]);
                                var objects2 = JsonConvert.DeserializeObject<dynamic>(details2);
                                if (objects2 != null && objects2.ToString() != "[]")
                                {
                                    foreach (var item in objects2)
                                    {
                                        int id = item.Id;
                                        RequestDetail requestdetail = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestdetail != null)
                                        {
                                            requestdetail.Property1 = item.SoSO;
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.StepNo == 2)
                        {
                            #region ===Bước 2===
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                            {
                                if (objects != null && objects.ToString() != "[]")
                                {
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        (from p in db.RequestDetails
                                         where p.RequestId == request.Id && p.Status == 1 && p.Quantity1 == 1
                                         select p).ToList().ForEach(x => x.Status = Key.Status.Unavailable);

                                        foreach (var item in objects)
                                        {
                                            int id = item.Id;
                                            if (id == 0)
                                            {
                                                RequestDetail requestdetail = new RequestDetail();
                                                requestdetail.RequestId = request.Id;
                                                requestdetail.Status = Key.Status.Available;
                                                requestdetail.Quantity1 = 1;
                                                requestdetail.Property2 = item.Property2;
                                                requestdetail.Money1 = item.Money1;
                                                requestdetail.Money3 = item.Money3;
                                                requestdetail.Money4 = item.Money4;
                                                requestdetail.Quantity = item.Quantity;
                                                requestdetail.ShopCode = request.FromShop == null ? request.ToShop : request.FromShop;
                                                requestdetail.OfficeCode = request.FromOffice == null ? request.ToOffice : request.FromOffice;
                                                string timeF = item.Time3;
                                                string[] timeArrAss = timeF.Split('/');
                                                if (timeArrAss.Length == 3)
                                                {
                                                    string format = String.Format("{0}/{1}/{2}"
                                                       , timeArrAss[0].Length == 1 ? "d" : "dd"
                                                       , timeArrAss[1].Length == 1 ? "M" : "MM"
                                                       , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                                    requestdetail.Time3 = timeF.EParseToDateTime(format);
                                                }
                                                db.RequestDetails.Add(requestdetail);
                                            }
                                            else
                                            {
                                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                                if (requestdetail != null)
                                                {
                                                    requestdetail.Quantity1 = 1;
                                                    requestdetail.Property2 = item.Property2;
                                                    requestdetail.Money1 = item.Money1;
                                                    requestdetail.Money3 = item.Money3;
                                                    requestdetail.Money4 = item.Money4;
                                                    requestdetail.Quantity = item.Quantity;
                                                    requestdetail.Status = Key.Status.Available;
                                                    requestdetail.ShopCode = request.FromShop == null ? request.ToShop : request.FromShop;
                                                    requestdetail.OfficeCode = request.FromOffice == null ? request.ToOffice : request.FromOffice;
                                                    string timeF = item.Time3;
                                                    string[] timeArrAss = timeF.Split('/');
                                                    if (timeArrAss.Length == 3)
                                                    {
                                                        string format = String.Format("{0}/{1}/{2}"
                                                           , timeArrAss[0].Length == 1 ? "d" : "dd"
                                                           , timeArrAss[1].Length == 1 ? "M" : "MM"
                                                           , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                                        requestdetail.Time3 = timeF.EParseToDateTime(format);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                        #endregion
                    }
                    //▲	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================

                    else if (request.TypeId == 112)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 75)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 147)
                    {

                    }
                    //▼ Edit - TuanNA89 - 09/01/2019 - fix lỗi mất detail loại 65,114
                    else if (request.TypeId == 65) //&& (request.Status == Key.StatusRequest.Waitting || request.Status == Key.StatusRequest.Processing))
                    {
                        #region Automatic
                        #endregion
                    }
                    else if (request.TypeId == 114)
                    {
                        #region Automatic
                        #endregion
                    }
                    //▲ Edit - TuanNA89 - 09/01/2019 - fix lỗi mất detail loại 65,114
                    else if (request.TypeId == 120)
                    {
                        #region Gom hàng phòng bảo hành
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    string timeF = item.Time;
                                    string[] timeArrAss = timeF.Split('/');
                                    if (timeArrAss.Length == 3)
                                    {
                                        string format = String.Format("{0}/{1}/{2}"
                                           , timeArrAss[0].Length == 1 ? "d" : "dd"
                                           , timeArrAss[1].Length == 1 ? "M" : "MM"
                                           , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                        requestdetail.Time1 = timeF.EParseToDateTime(format);
                                    }
                                    requestdetail.Approved = item.Approved;
                                    //requestdetail.Money2 = item.SoTienTruyThuDieuChinh;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 122)
                    {
                        #region Gom hàng phòng bảo hành
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    string timeF = item.Time;
                                    string[] timeArrAss = timeF.Split('/');
                                    if (timeArrAss.Length == 3)
                                    {
                                        string format = String.Format("{0}/{1}/{2}"
                                           , timeArrAss[0].Length == 1 ? "d" : "dd"
                                           , timeArrAss[1].Length == 1 ? "M" : "MM"
                                           , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                        requestdetail.Time1 = timeF.EParseToDateTime(format);
                                    }
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.Money2 = item.SoTienTruyThuDieuChinh;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 123)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 124)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null && item.Imei == "")
                                {
                                    requestdetail.Quantity = item.Quantity;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 102)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 134)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    requestdetail.Time1 = item.Property9 == requestdetail.Property9 ? requestdetail.Time1 : DateTime.Now;
                                    requestdetail.Time2 = item.CalllogBill == requestdetail.CustomerName ? requestdetail.Time2 : DateTime.Now;
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.Property10 = item.Property10;
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Property8 = item.Property8;
                                    requestdetail.Property9 = item.Property9;
                                    requestdetail.Note = item.Note;
                                    requestdetail.CustomerName = item.CalllogBill;
                                    requestdetail.Property11 = item.SoHoaDon;
                                    requestdetail.Property13 = item.ThoiGianChuyenHang;
                                    requestdetail.Property14 = item.LyDoKhongNhap;
                                    //▼ ChuongNT3 - 13/03/2019 - claim nvc 
                                    requestdetail.ProductCode = Convert.ToString(item.GioChuyenHangShopGuiTu) + ':' + Convert.ToString(item.PhutChuyenHangShopGuiTu);
                                    //requestdetail.EmpCode1 = Convert.ToString(item.GioChuyenHangShopGuiDen) + ':' + Convert.ToString(item.PhutChuyenHangShopGuiDen);
                                    requestdetail.EmpCode2 = Convert.ToString(item.GioChuyenHangShopNhanTu) + ':' + Convert.ToString(item.PhutChuyenHangShopNhanTu);
                                    //requestdetail.EmpCode3 = Convert.ToString(item.GioChuyenHangShopNhanDen) + ':' + Convert.ToString(item.PhutChuyenHangShopNhanDen);
                                    requestdetail.Property16 = item.ViTriCamShopGui;
                                    requestdetail.Property17 = item.ViTriCamShopNhan;
                                    if (item.ViTriCamShopGuiKhac != "" && item.ViTriCamShopGuiKhac != null)
                                    {
                                        requestdetail.Property18 = item.ViTriCamShopGuiKhac;
                                    }
                                    if (item.ViTriCamShopNhanKhac != "" && item.ViTriCamShopNhanKhac != null)
                                    {
                                        requestdetail.Property19 = item.ViTriCamShopNhanKhac;
                                    }
                                    requestdetail.Time3 = DateTime.ParseExact(item.NgayChuyenHangShopGui.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    requestdetail.Time4 = DateTime.ParseExact(item.NgayChuyenHangShopNhan.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    if (item.GioChuyenHangShopGuiDen != "" && item.GioChuyenHangShopGuiDen != null && item.PhutChuyenHangShopGuiDen != "" && item.PhutChuyenHangShopGuiDen != null)
                                    {
                                        requestdetail.EmpCode1 = Convert.ToString(item.GioChuyenHangShopGuiDen) + ':' + Convert.ToString(item.PhutChuyenHangShopGuiDen);
                                    }
                                    if (item.GioChuyenHangShopNhanDen != "" && item.GioChuyenHangShopNhanDen != null && item.PhutChuyenHangShopNhanDen != "" && item.PhutChuyenHangShopNhanDen != null)
                                    {
                                        requestdetail.EmpCode3 = Convert.ToString(item.GioChuyenHangShopNhanDen) + ':' + Convert.ToString(item.PhutChuyenHangShopNhanDen);
                                    }
                                    //▲ ChuongNT3 - 13/03/2019 - claim nvc 
                                    shop_cu = requestdetail.ShopCode2;
                                    shop_moi = item.Shops;
                                    requestdetail.ShopCode2 = shop_moi;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 143)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.Property10 = Convert.ToString(item.Property10);
                                    requestdetail.Property11 = item.SoHoaDon;
                                    requestdetail.Property13 = item.SoVanDon;
                                    requestdetail.Property14 = item.HuongXLNB;
                                    requestdetail.Property15 = item.ThoiGianChuyenHang;
                                    requestdetail.ProductName = item.LyDoKhongNhap;
                                    requestdetail.Note = item.Note;
                                    shop_cu = requestdetail.ShopCode2;
                                    shop_moi = item.Shops;
                                    requestdetail.ShopCode2 = shop_moi;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 135)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 137)
                    {
                        #region Automatic

                        //▼	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    string timeF = item.Time;
                                    string[] timeArrAss = timeF.Split('/');
                                    if (timeArrAss.Length == 3)
                                    {
                                        string format = String.Format("{0}/{1}/{2}"
                                           , timeArrAss[0].Length == 1 ? "d" : "dd"
                                           , timeArrAss[1].Length == 1 ? "M" : "MM"
                                           , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                        requestdetail.Time2 = timeF.EParseToDateTime(format);
                                    }
                                    requestdetail.Approved = item.Approved;

                                    string l__MessageGiaiTrinh = item.MessageGiaiTrinh;
                                    if (!string.IsNullOrEmpty(l__MessageGiaiTrinh))
                                    {
                                        DateTime l__TimeGiaiTrinh = item.TimeGiaiTrinh;
                                        Conversation l__Conversation = new Conversation();
                                        l__Conversation.RequestId = request.Id;
                                        l__Conversation.RequestDetailId = requestdetail.Id;
                                        l__Conversation.StepNo = request.StepNo;
                                        l__Conversation.Message = l__MessageGiaiTrinh;
                                        l__Conversation.Sender = UserManager.CurrentUser.InsideCode;
                                        l__Conversation.Type = Key.Conversation.Comment;
                                        l__Conversation.Status = Key.Status.Available;
                                        l__Conversation.TimeCreate = l__TimeGiaiTrinh;
                                        l__Conversation.CreateBy = UserManager.CurrentUser.InsideCode;
                                        db.Conversations.Add(l__Conversation);
                                    }
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================

                        #endregion
                    }
                    else if (request.TypeId == 64)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 145)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.Property4 = item.HXLTrangThaiPhieu;
                                    requestdetail.Property5 = item.NoiDungHXLKhac;
                                    requestdetail.Property7 = item.HXLKeyTrongKho;
                                    requestdetail.Property6 = item.PhanLoai;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 132)
                    {
                        if (objects != "" && objects != null)
                        {
                            sql.ExecuteWithoutResult("UpdateTimeCommitError", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@Time", objects)
                            });
                        }
                    }
                    else if (request.TypeId == 150)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    //======= Nếu EmpCode = 'Khác' thì cột EmpCode = null, insert Property5 = 'Khác...', GhiChu = Property6
                                    requestdetail.Quantity2 = item.SoLuong; // LuanNT44-12/09/2019-Loại 150-Thêm cột
                                    requestdetail.Approved = item.Approved;
                                    if (item.EmpCode == "Khác...")
                                    {
                                        requestdetail.EmpCode = null;
                                        requestdetail.Property5 = "Khác...";
                                    }
                                    else
                                    {
                                        requestdetail.EmpCode = item.EmpCode;
                                        requestdetail.Property5 = null;
                                    }
                                    #region Time1
                                    if (item.ThoiHanXuLy == null)
                                    {
                                        requestdetail.Time1 = null;
                                    }
                                    else
                                    {
                                        string ThoiHanXuLy = item.ThoiHanXuLy;
                                        string[] timeArr = ThoiHanXuLy.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = ThoiHanXuLy.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                    }
                                    #endregion
                                    requestdetail.Property6 = item.GhiChu;
                                    requestdetail.Property7 = item.HangNhaTraGop;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 152)
                    {
                        #region Áo đồng phục phòng hành chình và nhân sự
                        //'▼(#006)Add===================================    
                        ShopDAL shopDal = new ShopDAL();
                        var shopCreate = shopDal.Get(request.ToShop);
                        List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();

                        foreach (var item in objects)
                        {
                            int id = item.Id;
                            int quantityUpdate = request.StepNo != 4 ? item.Quantity1 : item.QuantityAvaiable;
                            int thanhtien = item.Sum;
                            var requestDetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            }

                            if (requestDetail != null && requestDetail.Quantity != null)
                            {
                                // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                int quantityNewest = requestDetail.QuantityAvaiable == null || request.StepNo != 4
                                                    ? requestDetail.Quantity1.GetValueOrDefault(0)
                                                    : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                if (moneyDifference != 0 && shopCreate != null)
                                {
                                    //'▼(#005)Update=================================== 
                                    ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == 4
                                                                           && x.Month == request.TimeCreate.Month
                                                                           && x.Year == request.TimeCreate.Year);
                                    //'▲(#005)Update===================================
                                    if (request.StepNo >= 3)
                                    {
                                        if (itemUsed == null)
                                        {
                                            itemUsed = new ItemUsedTmp();
                                            itemUsed.GroupId = 4;
                                            itemUsed.GroupValue = moneyDifference;
                                            itemUsed.Month = request.TimeCreate.Month;
                                            itemUsed.Year = request.TimeCreate.Year;
                                            itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                            itemUsed.RequestId = request.Id;
                                            itemUsed.Status = Key.Status.Available;
                                            db.ItemUsedTmps.Add(itemUsed);
                                        }
                                        else
                                        {
                                            itemUsed.GroupValue += moneyDifference;
                                        }
                                        //db.ItemUsedTmps.Add(itemUsed);
                                    }
                                }
                                requestDetail.QuantityAvaiable = request.StepNo != 4 ? item.Quantity : quantityUpdate;
                                requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                requestDetail.Quantity1 = item.Quantity1;
                                requestDetail.Quantity3 = item.Quantity3;
                            }

                        }
                        #endregion

                        #region Cập nhật nội dung vào bảng RequestDetail
                        foreach (var item in objects)
                        {
                            int id = item.Id;
                            var requestDetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            }

                            requestDetail.Property1 = item.Property1;
                            requestDetail.Property2 = item.Property2;
                            requestDetail.Property3 = item.Property3;
                            requestDetail.Property4 = item.Property4;
                            requestDetail.Property5 = item.Property5;
                            //requestDetail.Quantity1 = item.Quantity1;
                            //requestDetail.QuantityAvaiable = request.StepNo != 4 ? item.Quantity : item.QuantityAvaiable;
                            //requestDetail.Sum = item.Sum;
                            //▼Add - TrungNC3 - 10/10/2017 - Thêm Nhóm SP & Hình thức xuất
                            string Property6 = string.Empty;
                            if (requestDetail.Property6 == null || requestDetail.Property6 == "")
                            {
                                if (item.HTX == item.HinhThucXuat)
                                {
                                    Property6 = null;
                                }
                                else
                                {
                                    Property6 = item.HTX + "->" + item.HinhThucXuat;
                                }
                            }
                            else
                            {
                                if (item.HinhThucXuat == requestDetail.Property6)
                                {
                                    Property6 = requestDetail.Property7;
                                }
                                else
                                {
                                    if (requestDetail.Property7 == null || requestDetail.Property7 == "")
                                    {
                                        Property6 = requestDetail.Property6 + "->" + item.HinhThucXuat;
                                    }
                                    else
                                    {
                                        Property6 = requestDetail.Property7 + "->" + item.HinhThucXuat;
                                    }
                                }
                            }
                            requestDetail.Property7 = Property6;
                            requestDetail.Property6 = item.HinhThucXuat;
                        }
                        #endregion
                    }
                    else if (request.TypeId == 42)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.RequestId = request.Id;
                                    requestdetail.Property1 = item.Property1;
                                    requestdetail.Property2 = item.Property2;
                                    requestdetail.Property3 = item.Property3;
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Property7 = item.Property7;
                                    requestdetail.Quantity = item.Quantity;
                                    requestdetail.Quantity1 = item.Quantity1;
                                    requestdetail.Sum = item.Sum;
                                    requestdetail.Note = item.Note;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 154)
                    {
                        #region Automatic
                        if (request.FromForm.Contains("Ver2") && request.StepNo == 1 && request.Status < 4)
                        {
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    if (item.DuyetNVC == 1 || item.DuyetNVC == 0)
                                    {
                                        int id = item.Id;
                                        RequestDetail requestdetail = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestdetail != null)
                                        {
                                            requestdetail.QuantityAvaiable = item.DuyetNVC;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    //===========================Thêm xử lý cho nut trao đổi  - TRUNGNC3 - 21.10.2016 - Loại 155
                    else if (request.TypeId == 155)
                    {
                        if (request.StepNo >= 2 && permissions.Contains(Permission.Assigner))
                        {
                            #region Đồ dùng hc
                            if (permissions.Contains(Permission.Sender)
                                || permissions.Contains(Permission.Admin)
                                || permissions.Contains(Permission.SupperAdmin)
                                || permissions.Contains(Permission.Assigner)
                                || permissions.Contains(Permission.GroupAssigner))
                            {
                                #region update dinh muc
                                ShopDAL shopDal = new ShopDAL();
                                var shopCreate = shopDal.Get(request.FromShop);
                                List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    int quantityUpdate = item.QuantityAvaiable;
                                    int thanhtien = item.Sum;
                                    var requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }

                                    if (requestDetail != null && requestDetail.Quantity != null)
                                    {
                                        // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                        int quantityNewest = requestDetail.QuantityAvaiable == null
                                                            ? requestDetail.Quantity.GetValueOrDefault(0)
                                                            : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                        int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                        if (moneyDifference != 0 && shopCreate != null)
                                        {
                                            //'▼(#005)Update=================================== 
                                            //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                            //                                       && x.Month == request.TimeCreate.Month
                                            //                                       && x.Year == request.TimeCreate.Year);
                                            ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                   && x.Month == request.TimeCreate.Month
                                                                                   && x.Year == request.TimeCreate.Year);
                                            //'▲(#005)Update===================================
                                            if (request.StepNo >= 4)
                                            {
                                                if (itemUsed == null)
                                                {
                                                    itemUsed = new ItemUsedTmp();
                                                    itemUsed.GroupId = item.GroupId;
                                                    itemUsed.GroupValue = moneyDifference;
                                                    itemUsed.Month = request.TimeCreate.Month;
                                                    itemUsed.Year = request.TimeCreate.Year;
                                                    itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                    itemUsed.RequestId = request.Id;
                                                    itemUsed.Status = Key.Status.Available;
                                                    itemUseds.Add(itemUsed);
                                                }
                                                else
                                                {
                                                    itemUsed.GroupValue += moneyDifference;
                                                }
                                                //db.ItemUsedTmps.Add(itemUsed);
                                            }
                                        }
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                        requestDetail.Quantity1 = item.Quantity1;
                                        //▼ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                        string Property2 = string.Empty;
                                        if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                        {
                                            if (item.HTX == item.HinhThucXuat)
                                            {
                                                Property2 = null;
                                            }
                                            else
                                            {
                                                Property2 = item.HTX + "->" + item.HinhThucXuat;
                                            }
                                        }
                                        else
                                        {
                                            if (item.HinhThucXuat == requestDetail.Property1)
                                            {
                                                Property2 = requestDetail.Property2;
                                            }
                                            else
                                            {
                                                if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                                {
                                                    Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                                }
                                                else
                                                {
                                                    Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                                }
                                            }
                                        }
                                        requestDetail.Property2 = Property2;
                                        requestDetail.Property1 = item.HinhThucXuat;
                                        //▲ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                    }
                                }
                                if (itemUseds.Count > 0)
                                {
                                    db.ItemUsedTmps.AddRange(itemUseds);
                                }
                                #endregion
                            }


                            #endregion
                        }
                    }
                    //===========================Thêm xử lý cho nut trao đổi  - TRUNGNC3 - 21.10.2016 - Loại 155
                    else if (request.TypeId == 156)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion

                    }
                    else if (request.TypeId == 158)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.Property1 = item.NganhHang;
                                    requestdetail.Property2 = item.NhanHang;
                                    requestdetail.Money1 = item.DonGiaTruyTHu;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 45)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                        {
                            string shopOrOffice = objects[0].ShopCode;
                            if (shopOrOffice != "" && shopOrOffice != null)
                            {
                                var checkShop = new Warehouse();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    checkShop = insDB.Warehouses.FirstOrDefault(x => x.WarehouseCode == shopOrOffice);
                                }

                                if (checkShop != null)
                                    request.FromShop = shopOrOffice;
                                else
                                    request.FromOffice = shopOrOffice;
                            }
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Property8 = item.Property8;
                                    requestdetail.Property1 = item.Property1;
                                    requestdetail.Property2 = item.Property2;
                                    requestdetail.Property3 = item.Property3;
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.Quantity = item.Quantity;
                                    requestdetail.Quantity3 = item.ParentIdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                    requestdetail.Quantity4 = item.IdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Quantity1 = item.Quantity1;
                                    requestdetail.Property7 = item.Property7;
                                    requestdetail.Property9 = item.Property9;
                                    requestdetail.Property10 = item.Property10;
                                    requestdetail.Property11 = item.Code; //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 
                                    requestdetail.Note = item.Note;
                                    requestdetail.SaleCode = item.SaleCode; // xác nhận hết hạn bh
                                    requestdetail.ShopCode = item.ShopCode;
                                }
                                else
                                {
                                    requestdetail = new RequestDetail();
                                    requestdetail.RequestId = request.Id;
                                    requestdetail.Status = Key.Status.Available;
                                    requestdetail.Property8 = item.Property8;
                                    requestdetail.Property1 = item.Property1;
                                    requestdetail.Property2 = item.Property2;
                                    requestdetail.Property3 = item.Property3;
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.Quantity = item.Quantity;
                                    requestdetail.Quantity3 = item.ParentIdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                    requestdetail.Quantity4 = item.IdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Quantity1 = item.Quantity1;
                                    requestdetail.Property7 = item.Property7;
                                    requestdetail.Property9 = item.Property9;
                                    requestdetail.Property10 = item.Property10;
                                    requestdetail.Property11 = item.Code; //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 
                                    requestdetail.Note = item.Note;
                                    requestdetail.SaleCode = item.SaleCode; // xác nhận hết hạn bh
                                    requestdetail.ShopCode = item.ShopCode;
                                    db.RequestDetails.Add(requestdetail);
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 164)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity1 = item.Quantity1;
                                    requestdetail.Quantity2 = item.Quantity2;
                                    requestdetail.Quantity3 = item.Quantity3;
                                    requestdetail.Quantity4 = item.Quantity4;
                                    requestdetail.Quantity5 = item.Quantity5;
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Note = item.Note;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 163)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity1 = item.Quantity1;
                                    requestdetail.Quantity2 = item.Quantity2;
                                    if (request.StepNo < 3)
                                    {
                                        requestdetail.Property1 = item.Quantity1;
                                        requestdetail.Property2 = item.Quantity2;
                                    }
                                    else
                                    {
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                    }
                                    requestdetail.Note = item.Note;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 165)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            var cfReplaceProduct = objects[0].cfReceiveSPMoi;// Edit - NghiaTV5 - 8/12/2017 - 165 – Xác Nhận 
                            db.RequestDetails
                                .Where(x => x.RequestId == request.Id
                                    && x.Status == Key.Status.Available)
                                .ToList().ForEach(x => x.Property3 = cfReplaceProduct);
                        }
                        #endregion
                    }
                    else if (request.TypeId == 166)
                    {
                        var TraoThuong = Convert.ToString(form["TraoThuongId"]);
                        var IMEI = Convert.ToString(form["Emei166"]);
                        var SoTienThue = Convert.ToString(form["Thue166"]);

                        RequestDetail requestdetail = new RequestDetail();
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                        {
                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                        }))
                        {
                            requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                        }

                        if (requestdetail != null)
                        {
                            requestdetail.Property5 = TraoThuong;
                            requestdetail.Property8 = IMEI;
                            if (SoTienThue != null && SoTienThue != "")
                            {
                                requestdetail.Money1 = (float)Convert.ToDouble(SoTienThue);
                            }
                        }
                    }
                    else if (request.TypeId == 168)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.Note = item.Note;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 169)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                { }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 170)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                { }
                            }
                        }
                        #endregion
                    }

                    else if (request.TypeId == 172)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion
                    }
                    //▼ Add - TrungNC3 - 2017.09.06 - Up thực loại chuyển shop khác vùng
                    else if (request.TypeId == 173)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.ShopCode2 = item.JobtitleNew;
                                    string timeF = item.JobtitleDateStart;
                                    string[] timeArrAss = timeF.Split('/');
                                    if (timeArrAss.Length == 3)
                                    {
                                        string format = String.Format("{0}/{1}/{2}"
                                           , timeArrAss[0].Length == 1 ? "d" : "dd"
                                           , timeArrAss[1].Length == 1 ? "M" : "MM"
                                           , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                        requestdetail.Time1 = timeF.EParseToDateTime(format);
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ Add - =======================================
                    //▼ Add - TrungNC3 - 2017.09.01 - Thêm nội dung trao đổi loại 175
                    else if (request.TypeId == 175)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                //RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                //if (requestdetail != null)
                                //{
                                //    requestdetail.Property2 = item.LoaiYeuCau;
                                //    requestdetail.Note = item.GhiChu;
                                //}
                                //db.SaveChanges();
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = (from RQ in db.RequestDetails
                                                     where RQ.Id == id
                                                     select RQ).First();
                                }

                                //▼ Edit - TrungNC3-NgoanHT - 2017.09.07 - Sửa loại hành chính hỗ trợ - 175
                                if (requestdetail != null)
                                {
                                    requestdetail.Property1 = item.NoiDung;
                                    requestdetail.Property2 = item.LoaiYeuCau;
                                    requestdetail.Property3 = item.XuLy;
                                    requestdetail.Property4 = item.GhiChu;
                                }
                                //▲ Add - =======================================
                            }
                            db.SaveChanges();
                        }
                        #endregion
                    }
                    //▲ Add - =======================================
                    //▼ Edit - NghiaTV5 - 23/10/2017 - update trạng thái duyệt
                    else if (request.TypeId == 179)
                    {
                        #region
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }

                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion
                    }
                    //▼ Add - TrungNC3 - 14/11/2017 - Calllog duyệt bill Hỏa tốc
                    else if (request.TypeId == 180)
                    {
                        #region
                        //▼ Edit - NgoanHT - 14/11/2017 - Sửa trao đổi
                        if (request.StepStatus < 4 && permissions.Contains(RequestsController.Permission.Assigner))
                        {
                            foreach (var item in objects)
                            {
                                int id = item.ID;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Duyet;
                                }
                            }
                        }
                        //▲ Edit - NgoanHT - 14/11/2017 - Sửa trao đổi
                        #endregion
                    }
                    //▲ Add - TrungNC3 - 14/11/2017 - Calllog duyệt bill Hỏa tốc
                    //▼ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu
                    else if (request.TypeId == 181)
                    {
                        #region
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity5 = item.XacNhan;
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu

                    //▼ Edit - NgoanHT - Loại: 182 - 17/11/2017 - Sửa loại 182
                    else if (request.TypeId == 182)
                    {
                        #region
                        if (permissions.Contains(RequestsController.Permission.Assigner))
                        {
                            if (request.StepStatus < 4)
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.ID;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Duyet;
                                    }
                                }
                            }
                            else if (request.StepStatus == 4)
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.ID;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null && requestdetail.Approved == false)
                                    {
                                        requestdetail.Approved = item.Duyet;
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ Edit========================================================

                    else if (request.TypeId == 183)
                    {
                        #region MyRegion
                        #endregion
                    }
                    //▼ Edit - ThuongNM2 - 03/10/2018 - Insert Log Type 185
                    else if (request.TypeId == 185)
                    {
                        #region
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    string logid = "Conversation 185 - " + request.Id + " Assginer: " + UserManager.CurrentUser.InsideCode;
                                    string Mess = item.Id + " Change Money1 (XNTTBO) - XacNhanTruyThu: ";
                                    Mess += requestdetail.Money1 != null ? requestdetail.Money1.ToString() : "money1 - rong";
                                    Mess += " -> " + item.XacNhanTruyThuBO + "--- SoTienCanGiu: ";
                                    Mess += requestdetail.Property1 != null ? requestdetail.Property1.ToString() : "Property1 - rong";
                                    Mess += " -> " + item.SoTienCanGiu;
                                    requestdetail.Money1 = item.XacNhanTruyThuBO; //Add - NgoanHT - 24/05/2018 - Loại: 185 - sửa biến truyền vào
                                    requestdetail.Property1 = item.SoTienCanGiu; //Add - NgoanHT - 30/05/2018 - Loại: 185 - sửa biến truyền vào
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@Id", logid),
                                        new SqlParameter("@Mes",Mess)
                                    };
                                    sql.ExecuteWithoutResult("Log_Insert", CommandType.StoredProcedure, param);
                                }
                            }

                        }
                        #endregion
                    }
                    //▲ Edit - ThuongNM2 - 03/10/2018 - Insert Log Type 185
                    //▼ Add - PhiN - 11/12/2017 - add category 186
                    else if (request.TypeId == 186)
                    {

                    }

                    //▼ Add - NghiaTV5 - 8/12/2017 - 188 - bổ sung 
                    else if (request.TypeId == 188)
                    {
                        #region Automatic
                        if (request.StepNo == 1)
                        {
                            if (objects != null && objects.ToString() != "[]")
                            {
                                var cfReplaceProduct = objects[0].CfReplaceProduct;
                                db.RequestDetails
                                    .Where(x => x.RequestId == request.Id
                                        && x.Status == Key.Status.Available)
                                    .ToList().ForEach(x => x.Property3 = cfReplaceProduct);
                            }
                        }
                        else if (request.StepNo == 2)
                        {
                            if (objects != null && objects.ToString() != "[]")
                            {
                                var cfReplaceProduct = objects[0].cfReceiveSPMoi188;
                                db.RequestDetails
                                    .Where(x => x.RequestId == request.Id
                                        && x.Status == Key.Status.Available)
                                    .ToList().ForEach(x => x.Property4 = cfReplaceProduct);
                            }
                        }
                        #endregion
                    }
                    //▼ Add - NghiaTV5 - 11/01/2018 - 192 - Nợ khuyến mãi 
                    //▼ Add - PhiN - 10/01/2018 - add category 190-Conversation
                    else if (request.TypeId == 190)
                    {

                    }
                    //▼ Add - NghiaTV5 - 11/01/2018 - 192 - Nợ khuyến mãi 
                    //▼ Add - NgoanHT - 29/01/2018 - Loại: 191,194,195 - Thêm Lưu thây đổi "Thông tin thây đổi"
                    else if (request.TypeId == 191)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property5 = item.ThongTinThayDoi;
                                    requestdetail.Approved = item.Approved;// Add - ThuongNM2 - 2018/11/07 - lưu thông tin Approved
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 194)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property5 = item.ThongTinThayDoi;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 195)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property5 = item.ThongTinThayDoi;
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ Add - NgoanHT - 29/01/2018 - Loại: 191,194,195 - Thêm Lưu thây đổi "Thông tin thây đổi"
                    //▼  Edit - ChuongNT3 - 06/03/2018 - Truy thu số lượng MDNH loại 197
                    else if (request.TypeId == 197)
                    {
                        #region
                        var details2 = Convert.ToString(form["Details2"]);
                        var objects2 = JsonConvert.DeserializeObject<dynamic>(details2);
                        //if (objects != null || objects != "")
                        //{
                        //        foreach (var item in objects)
                        //        {
                        //            int id = item.Id;
                        //            var requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        //            requestDetail.Quantity2 = item.SoLuongThucNhan;
                        //            requestDetail.Money2 = item.ThanhTienTruyThu;
                        //            requestDetail.ShopCode = item.KhoXuat;
                        //            requestDetail.Money1 = item.GiaBan;
                        //            requestDetail.ProductCode = item.MaSanPham;
                        //            requestDetail.ProductName = item.TenSanPham;
                        //            requestDetail.Property1 = item.SoYCDC;
                        //            requestDetail.Quantity1 = item.SoLuongNhapKho;
                        //            requestDetail.ShopCode2 = item.KhoNhap;
                        //            requestDetail.Quantity3 = item.ChenhLech;
                        //        }
                        //}
                        if (objects2 != null || objects2 != "")
                        {
                            foreach (var item in objects2)
                            {
                                if (item.Key == 0) //Edit - ChuongNT3 - Loại 197
                                {
                                    RequestDetail requestDetail = new RequestDetail();
                                    requestDetail.RequestId = request.Id;
                                    requestDetail.EmpCode = item.NhanVienBiTruyThu;
                                    requestDetail.Money1 = item.SoTienBiTruyThu;
                                    requestDetail.Quantity = item.ThangBiTruyThu;
                                    //requestDetail.Quantity1 = item.ThoiGian;
                                    requestDetail.Status = 1;
                                    requestDetail.ShopCode = request.FromShop;
                                    requestDetail.Money2 = item.SoTienLuongThang;
                                    db.RequestDetails.Add(requestDetail);
                                }
                                else
                                {
                                    int id = item.Id;
                                    var requestDetail2 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    requestDetail2.RequestId = request.Id;
                                    requestDetail2.EmpCode = item.NhanVienBiTruyThu;
                                    requestDetail2.Money1 = item.SoTienBiTruyThu;
                                    requestDetail2.Quantity = item.ThangBiTruyThu;
                                    //requestDetail2.Quantity1 = item.ThoiGian;
                                    requestDetail2.Status = 1;
                                    requestDetail2.ShopCode = request.FromShop;
                                    requestDetail2.Money2 = item.SoTienLuongThang;
                                }
                            }
                        }
                        #endregion
                    }
                    //▲    Edit - ChuongNT3 - 06/03/2018 - Truy thu số lượng MDNH loại 197
                    //▼  Edit - ChuongNT3 - 06/03/2018 - Truy thu MDNH loại 196
                    else if (request.TypeId == 196)
                    {
                        if (objects != null || objects != "")
                        {
                            foreach (var item in objects)
                            {
                                if (item.Key == 0) //Edit - ChuongNT3 - Loại 196
                                {
                                    RequestDetail requestDetail = new RequestDetail();
                                    requestDetail.RequestId = request.Id;
                                    requestDetail.EmpCode = item.NhanVienBiTruyThu;
                                    requestDetail.Money1 = item.SoTienBiTruyThu;
                                    requestDetail.Quantity = item.ThangBiTruyThu;
                                    //requestDetail.Quantity1 = item.ThoiGian;
                                    requestDetail.Status = 1;
                                    requestDetail.ShopCode = request.FromShop;
                                    requestDetail.Money2 = item.SoTienLuongThang;
                                    db.RequestDetails.Add(requestDetail);
                                }
                                else
                                {
                                    int id = item.Id;
                                    var requestDetail2 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    requestDetail2.RequestId = request.Id;
                                    requestDetail2.EmpCode = item.NhanVienBiTruyThu;
                                    requestDetail2.Money1 = item.SoTienBiTruyThu;
                                    requestDetail2.Quantity = item.ThangBiTruyThu;
                                    //requestDetail2.Quantity1 = item.ThoiGian;
                                    requestDetail2.Status = 1;
                                    requestDetail2.ShopCode = request.FromShop;
                                    requestDetail2.Money2 = item.SoTienLuongThang;
                                }
                            }
                        }
                    }
                    //▲  Edit - ChuongNT3 - 06/03/2018 - Truy thu MDNH loại 196
                    //▼ Add - NghiaTV5 - 16/01/2018 - 192 - Nợ khuyến mãi 192
                    else if (request.TypeId == 192)
                    {
                        #region Automatic

                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                string Note = item.GhiChu;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property7 = Note;//  Add - NghiaTV5 - 29/01/2018 - requestdetail.Property7 = Note loại  196
                                    if (Note == "Chưa liên hệ KH")
                                    {
                                        requestdetail.Quantity5 = 1;
                                    }
                                    else
                                    {
                                        requestdetail.Quantity5 = 2;
                                    }
                                }
                            }
                        }

                        #endregion
                    }
                    //▲ Add - NghiaTV5 - 16/01/2018 - 192 - Nợ khuyến mãi 192
                    //▼ Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ
                    else if (request.TypeId == 198)
                    {
                        #region Automatic
                        var conversationAdd = new Conversation();
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                if (item.GiaiTrinh != null && item.GiaiTrinh != "")
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    conversationAdd.RequestId = request.Id;
                                    conversationAdd.RequestDetailId = Convert.ToInt64(requestdetail.Id);
                                    conversationAdd.Sender = sender;
                                    conversationAdd.Message = item.GiaiTrinh;
                                    conversationAdd.Status = Key.Status.Available;
                                    conversationAdd.TimeCreate = DateTime.Now;
                                    conversationAdd.Type = 198;
                                    conversationAdd.StepNo = request.StepNo;
                                    db.Conversations.Add(conversationAdd);
                                }

                            }
                        }
                        if (request.StepNo == 2)
                        {
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Duyet;
                                    }
                                }
                            }
                        }

                        #endregion

                    }
                    //▲ Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ
                    //▼  Add - LuanNT44 - 29/01/2018 - Loại 200 - Chuyển cọc đơn hàng ecom   
                    else if (request.TypeId == 200)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property3 = item.Ecom_new;
                                }
                            }
                        }
                        #endregion
                    }
                    //▲  Add - LuanNT44 - 29/01/2018 - Loại 200 - Chuyển cọc đơn hàng ecom
                    //▼  Add - LuanNT44 - 09/04/2018 - Loại 201 - Kiểm hàng online
                    else if (request.TypeId == 201)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            if (request.StepNo == 1)
                            {
                                foreach (var item in objects)
                                {
                                    if (item.RequestDId != null)
                                    {
                                        int id = item.RequestDId;
                                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        if (requestdetail != null)
                                        {
                                            requestdetail.SaleCode = item.NguoiKiemKe;
                                            requestdetail.Time1 = DateTime.ParseExact(item.NgayKiemKe.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                            requestdetail.Property1 = item.ModelKiem;
                                            requestdetail.Quantity = item.SoLuongModelKiem;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    //▲  Add - LuanNT44 - 09/04/2018 - Loại 201 - Kiểm hàng online
                    //▼  Add - LuanNT44 - 16/03/2018 - Loại 204 - Chốt CR qua Calllog
                    else if (request.TypeId == 204)
                    {
                        #region Automatic_204
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    if (request.StepNo == 1)
                                    {
                                        if (item.Uutien != null && item.Uutien != "")
                                        {
                                            requestdetail.Quantity1 = item.Uutien;
                                        }
                                    }
                                    if (request.StepNo == 2)
                                    {
                                        if (item.NgayChotYC != null && item.NgayChotYC != "")
                                        {
                                            requestdetail.Time1 = DateTime.ParseExact(item.NgayChotYC.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        if (item.NgayThucTeUAT != null && item.NgayThucTeUAT != "")
                                        {
                                            requestdetail.Time2 = DateTime.ParseExact(item.NgayThucTeUAT.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        if (item.NgayThucTeGoLive != null && item.NgayThucTeGoLive != "")
                                        {
                                            requestdetail.Time3 = DateTime.ParseExact(item.NgayThucTeGoLive.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        if (item.KPI != null && item.KPI != "")
                                        {
                                            requestdetail.Property7 = item.KPI;
                                        }
                                    }
                                    if (request.StepNo == 3)
                                    {
                                        requestdetail.Property6 = item.TrangThai;
                                        if (item.KPI != null && item.KPI != "")
                                        {
                                            requestdetail.Property7 = item.KPI;
                                        }
                                        requestdetail.Property9 = item.ThangTinhKPI.ToString();
                                        requestdetail.Property10 = item.ThangLamCR.ToString();

                                        requestdetail.Property8 = item.MaID;
                                        requestdetail.OfficeCode = item.PhongBan;
                                        requestdetail.Property5 = item.NhomHeThong;
                                        requestdetail.Property1 = item.He_Thong;
                                        if (item.NgayChotYC != null && item.NgayChotYC != "")
                                        {
                                            requestdetail.Time1 = DateTime.ParseExact(item.NgayChotYC.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        requestdetail.Property11 = item.NgayDuKienUAT;
                                        requestdetail.Property12 = item.NgayDuKienGoLive;
                                        if (item.NgayThucTeUAT != null && item.NgayThucTeUAT != "")
                                        {
                                            requestdetail.Time2 = DateTime.ParseExact(item.NgayThucTeUAT.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        if (item.NgayThucTeGoLive != null && item.NgayThucTeGoLive != "")
                                        {
                                            requestdetail.Time3 = DateTime.ParseExact(item.NgayThucTeGoLive.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        requestdetail.Quantity1 = item.Uutien;
                                        requestdetail.Note = item.GhiChu;
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    //▲  Add - LuanNT44 - 16/03/2018 - Loại 204 - Chốt CR qua Calllog

                    //▼ Add - NghiaTV5 - 10/04/2018 - Loại 205 - claim nhà bảo hiểm
                    else if (request.TypeId == 205)
                    {
                        #region
                        // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                        // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                        #endregion
                    }
                    //▲ Add - NghiaTV5 - 10/04/2018 - Loại 205 - claim nhà bảo hiểm

                    //▼ ChuongNT3 - 08/06/2018 - Truy thu sim
                    else if (request.TypeId == 206)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                if (item.Key == 0)
                                {
                                    RequestDetail requestDetail = new RequestDetail();
                                    requestDetail.RequestId = request.Id;
                                    requestDetail.EmpCode = item.NhanVienBiTruyThu;
                                    requestDetail.Money1 = item.SoTienBiTruyThu;
                                    requestDetail.Quantity = item.ThangTruyThu;
                                    requestDetail.Quantity1 = item.NamTruyThu;
                                    requestDetail.Status = 1;
                                    requestDetail.ShopCode = request.FromShop;
                                    requestDetail.Money2 = item.SoTienLuongThang;
                                    db.RequestDetails.Add(requestDetail);
                                }
                                else
                                {
                                    var requestDetail2 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    requestDetail2.RequestId = request.Id;
                                    requestDetail2.EmpCode = item.NhanVienBiTruyThu;
                                    requestDetail2.Money1 = item.SoTienBiTruyThu;
                                    requestDetail2.Quantity = item.ThangTruyThu;
                                    requestDetail2.Quantity1 = item.NamTruyThu;
                                    requestDetail2.Status = 1;
                                    requestDetail2.ShopCode = request.FromShop;
                                    requestDetail2.Money2 = item.SoTienLuongThang;
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ ChuongNT3 - 08/06/2018 - Truy thu sim
                    //▼ Add - ThuongNM2 - 02/08/2018 - Loại 207 Chiến giá đại bàng
                    else if (request.TypeId == 207)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.IdRequestDetail;
                                var requestDetail207 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                requestDetail207.Property2 = item.CompetitorCode;
                                requestDetail207.Property3 = item.Competitor;
                            }
                        }
                        #endregion
                    }
                    //▲ Add - ThuongNM2 - 02/08/2018 - Loại 207 Chiến giá đại bàng
                    //▼ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
                    else if (request.TypeId == 210)
                    {
                        #region Automatic

                        #endregion
                    }
                    //▲ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
                    //▼ Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA
                    else if (request.TypeId == 213)
                    {
                        #region Automatic

                        #endregion
                    }
                    //▲ Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA
                    //▼ Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside
                    else if (request.TypeId == 215)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {

                                    requestdetail.Note = item.GhiChu;
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside
                    //▼ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                    else if (request.TypeId == 217)
                    {
                        #region Automatic
                        if (request.Status < 4)
                        {
                            #region == Update data detail calllog ==
                            var dataUpdate = Convert.ToString(form["DataUpdate"]);
                            var objectsUpdate = JsonConvert.DeserializeObject<dynamic>(dataUpdate);

                            if (objectsUpdate != null && objectsUpdate.ToString() != "[]")
                            {
                                foreach (var item in objectsUpdate)
                                {
                                    long detailId = item.requestDetailId;
                                    RequestDetail detail_217 = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        detail_217 = db.RequestDetails.FirstOrDefault(x => x.Id == detailId && x.Status == 1);
                                    }
                                    if (detail_217 != null)
                                    {
                                        string log_OldData = "";
                                        if (item.HoTenKH != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property2: Old Data (", detail_217.Property2, ") => New Data (", item.HoTenKH, ")", Environment.NewLine);
                                            detail_217.Property2 = item.HoTenKH;
                                        }
                                        if (item.CMND != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property3: Old Data (", detail_217.Property3, ") => New Data (", item.CMND, ")", Environment.NewLine);
                                            detail_217.Property3 = item.CMND;
                                        }
                                        if (item.SDT != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property4: Old Data (", detail_217.Property4, ") => New Data (", item.SDT, ")", Environment.NewLine);
                                            detail_217.Property4 = item.SDT;
                                        }
                                        if (item.SoSO != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property5: Old Data (", detail_217.Property5, ") => New Data (", item.SoSO, ")", Environment.NewLine);
                                            detail_217.Property5 = item.SoSO;
                                        }
                                        if (item.SoTienHoanTra != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property6: Old Data (", detail_217.Property6, ") => New Data (", item.SoTienHoanTra, ")", Environment.NewLine);
                                            detail_217.Property6 = item.SoTienHoanTra;
                                        }
                                        if (item.ShopKH != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property7: Old Data (", detail_217.Property7, ") => New Data (", item.ShopKH, ")", Environment.NewLine);
                                            detail_217.Property7 = item.ShopKH;
                                        }
                                        db.SaveChanges();
                                        if (log_OldData != "")
                                        {
                                            Conversation conv_log = new Conversation();
                                            conv_log.RequestId = request.Id;
                                            conv_log.StepNo = request.StepNo;
                                            conv_log.Sender = UserManager.CurrentUser.InsideCode;
                                            conv_log.Message = log_OldData;
                                            conv_log.CreateBy = UserManager.CurrentUser.InsideCode;
                                            conv_log.Type = Key.Conversation.Infomation;
                                            conv_log.Status = Key.Status.Unavailable;
                                            conv_log.TimeCreate = DateTime.Now;
                                            db.Conversations.Add(conv_log);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                            #endregion
                            #region == Update thông tin duyệt hình ==
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    long id = item.FileAttachId;
                                    FileAttach fileAttach = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        fileAttach = db.FileAttachs.FirstOrDefault(x => x.Id == id && x.Status == 1);
                                    }
                                    if (fileAttach != null)
                                    {
                                        fileAttach.ApproveStatus = item.Approved;
                                    }

                                    if (item.NoiDungTraoDoi != null)
                                    {
                                        Conversation conv_217 = new Conversation();
                                        conv_217.RequestId = request.Id;
                                        conv_217.StepNo = request.StepNo;
                                        conv_217.Sender = UserManager.CurrentUser.InsideCode;
                                        conv_217.Message = item.NoiDungTraoDoi.ToString();
                                        conv_217.CreateBy = UserManager.CurrentUser.InsideCode;
                                        conv_217.Type = Key.Conversation.Comment;
                                        conv_217.Status = Key.Status.Available;
                                        conv_217.TimeCreate = DateTime.Now;
                                        db.Conversations.Add(conv_217);
                                        db.SaveChanges();
                                    }

                                }
                                db.SaveChanges();
                            }
                            #endregion
                        }
                        #endregion
                    }
                    //▲ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                    //▼ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                    else if (request.TypeId == 218)
                    {
                        #region Automatic
                        if (request.StepNo == 1 && request.Status < 4)
                        {
                            if (objects.ToString() != "[]")
                            {
                                int id = 0;
                                long DetailId = 0;
                                string Msg_Update = "";
                                List<RequestDetail> requestDetails = new List<RequestDetail>();
                                foreach (var item in objects)
                                {
                                    id = item.Id;
                                    DetailId = item.Id;
                                    if (id > 0)
                                    {
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            requestDetails = (from a in db.RequestDetails
                                                              where a.RequestId == request.Id && a.Status == 1
                                                              select a).ToList();
                                        }
                                        if (requestDetails != null && requestDetails.Count() > 0)
                                        {
                                            foreach (var detail in requestDetails)
                                            {
                                                Msg_Update = "";
                                                if (DetailId == detail.Id)
                                                {
                                                    if (item.ItemCode != null && detail.ProductCode != item.ItemCode.ToString())
                                                    {
                                                        detail.ProductCode = item.ItemCode;
                                                        Msg_Update += " Cập nhật ProductCode cũ: '" + detail.ProductCode + "' => : '" + item.ItemCode.ToString() + "'";
                                                    }
                                                    if (item.ItemName != null && detail.ProductName != item.ItemName.ToString())
                                                    {
                                                        detail.ProductName = item.ItemName;
                                                        if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                        Msg_Update += "- Cập nhật ProductName cũ: " + detail.ProductName + "' => : '" + item.ItemName.ToString() + "'";
                                                    }
                                                    if (item.Imei != null && detail.Property1 != item.Imei.ToString())
                                                    {
                                                        detail.Property1 = item.Imei;
                                                        if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                        Msg_Update += "- Cập nhật Property1(Imei) cũ: " + detail.Property1 + "' => : '" + item.Imei.ToString() + "'";
                                                    }
                                                    if (item.LyDo != null && detail.Property3 != item.LyDo.ToString())
                                                    {
                                                        detail.Property3 = item.LyDo;
                                                        if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                        Msg_Update += "- Cập nhật Property3(Lý do) cũ: " + detail.Property3 + "' => : '" + item.LyDo.ToString() + "'";
                                                    }

                                                    if (item.SoLuong != null)
                                                    {
                                                        int out_SL = 0;
                                                        out_SL = int.TryParse(item.SoLuong.ToString(), out out_SL) ? out_SL : 0;
                                                        if (detail.Quantity != out_SL)
                                                        {
                                                            detail.Quantity = out_SL;
                                                            if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                            Msg_Update += "- Cập nhật Quantity(Số lượng) cũ: " + detail.Quantity + "' => : '" + out_SL.ToString();
                                                        }
                                                    }
                                                    db.SaveChanges();

                                                    if (Msg_Update != "")
                                                    {
                                                        Conversation ConvUpdate_218 = new Conversation();
                                                        ConvUpdate_218.RequestId = request.Id;
                                                        ConvUpdate_218.RequestDetailId = detail.Id;
                                                        ConvUpdate_218.Message = Msg_Update;
                                                        ConvUpdate_218.StepNo = request.StepNo;
                                                        ConvUpdate_218.TimeCreate = DateTime.Now;
                                                        ConvUpdate_218.Type = Key.Conversation.System;
                                                        ConvUpdate_218.Status = 1;
                                                        ConvUpdate_218.Sender = UserManager.CurrentUser.InsideCode;
                                                        ConvUpdate_218.CreateBy = UserManager.CurrentUser.InsideCode;
                                                        db.Conversations.Add(ConvUpdate_218);

                                                        db.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                db.SaveChanges();
                            }
                        }
                        #endregion
                    }
                    //▲  Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                    //▼  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                    else if (request.TypeId == 223)
                    {
                        #region Update detail calllog
                        if (request.StepNo == 1 && request.Status < 4)
                        {
                            if (objects.ToString() != "[]")
                            {
                                long DetailId = 0;
                                string Msg_Update = "";
                                var detail = new RequestDetail();
                                foreach (var item in objects)
                                {
                                    Msg_Update = "";
                                    DetailId = item.Id;
                                    if (DetailId > 0)
                                    {
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            detail = (from a in db.RequestDetails
                                                      where a.RequestId == request.Id && a.Id == DetailId && a.Status == 1
                                                      select a).FirstOrDefault();
                                        }
                                        if (detail != null && detail.Id > 0)
                                        {
                                            if (item.LoaiInAn != null && detail.Property1 != item.LoaiInAn.ToString())
                                            {
                                                Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property1(Loại in ấn) cũ: '" + detail.Property1 + "' => : '" + item.LoaiInAn.ToString() + "'";
                                                detail.Property1 = item.LoaiInAn;
                                            }
                                            if (item.NoiDung != null && detail.Property2 != item.NoiDung.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property2(Nội dung) cũ: '" + detail.Property2 + "' => : '" + item.NoiDung.ToString() + "'";
                                                detail.Property2 = item.NoiDung;
                                            }
                                            if (item.ChatLieu != null && detail.Property3 != item.ChatLieu.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property3(Chất liệu) cũ: '" + detail.Property3 + "' => : '" + item.ChatLieu.ToString() + "'";
                                                detail.Property3 = item.ChatLieu;
                                            }
                                            if (item.Width != null && detail.Property4 != item.Width.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property4(Chiều dài) cũ: '" + detail.Property4 + "' => : '" + item.Width.ToString() + "'";
                                                detail.Property4 = item.Width;
                                            }
                                            if (item.Height != null && detail.Property5 != item.Height.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property5(Chiều rộng) cũ: '" + detail.Property5 + "' => : '" + item.Height.ToString() + "'";
                                                detail.Property5 = item.Height;
                                            }
                                            if (item.SoLuong != null && detail.Property6 != item.SoLuong.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property6(Số lượng) cũ: '" + detail.Property6 + "' => : '" + item.SoLuong.ToString() + "'";
                                                detail.Property6 = item.SoLuong;
                                            }
                                            if (item.LinkTaiFileInAn != null && detail.Property7 != item.LinkTaiFileInAn.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property7(Link tải file in ấn) cũ: '" + detail.Property7 + "' => : '" + item.LinkTaiFileInAn.ToString() + "'";
                                                detail.Property7 = item.LinkTaiFileInAn;
                                            }
                                            if (item.GhiChu != null && detail.Property8 != item.GhiChu.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property8(Ghi chú) cũ: '" + detail.Property8 + "' => : '" + item.GhiChu.ToString() + "'";
                                                detail.Property8 = item.GhiChu;
                                            }
                                            if (item.DienTich != null && detail.Property10 != item.DienTich.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property10(Diện tích) cũ: '" + detail.Property10 + "' => : '" + item.DienTich.ToString() + "'";
                                                detail.Property10 = item.DienTich;
                                            }
                                            if (item.DonGia != null && detail.Property11 != item.DonGia.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property11(Đơn giá) cũ: '" + detail.Property11 + "' => : '" + item.DonGia.ToString() + "'";
                                                detail.Property11 = item.DonGia;
                                            }
                                            if (item.ThanhTien != null && detail.Property12 != item.ThanhTien.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property12(Thành tiền) cũ: '" + detail.Property12 + "' => : '" + item.ThanhTien.ToString() + "'";
                                                detail.Property12 = item.ThanhTien;
                                            }

                                            db.SaveChanges();

                                            if (Msg_Update != "")
                                            {
                                                Msg_Update = "Id detail " + detail.Id.ToString() + " được cập nhật khi trao đổi:" + Environment.NewLine + Msg_Update;
                                                Conversation ConvUpdate = new Conversation();
                                                ConvUpdate.RequestId = request.Id;
                                                ConvUpdate.RequestDetailId = detail.Id;
                                                ConvUpdate.Message = Msg_Update;
                                                ConvUpdate.StepNo = request.StepNo;
                                                ConvUpdate.TimeCreate = DateTime.Now;
                                                ConvUpdate.Type = Key.Conversation.System;
                                                ConvUpdate.Status = 0;
                                                ConvUpdate.Sender = UserManager.CurrentUser.InsideCode;
                                                ConvUpdate.CreateBy = UserManager.CurrentUser.InsideCode;
                                                db.Conversations.Add(ConvUpdate);

                                                db.SaveChanges();
                                            }
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    //▲  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                    else if (request.TypeId == 225)
                    {
                        //▼	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                        #region MyRegion
                        if (request.StepNo == 1 && request.Status < 4)
                        {
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = (item.XNLoi == 1 || item.XNLoi == 0) ? item.XNLoi : null;
                                        requestdetail.Property1 = item.NVViPham;
                                        requestdetail.Numeric1 = item.SoTienTruyThu;
                                        requestdetail.Property4 = item.LoaiLoi;
                                        requestdetail.Note = item.GhiChu;
                                    }
                                }
                            }
                        }
                        #endregion
                        //▲	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                    }
                    //▼ Add - LuanNT44 - 10/02/2020 - Loại 226 - Duyệt hạn mức thẻ cào/Momo/Viettel pay
                    else if (request.TypeId == 226)
                    {
                        #region region
                        #endregion
                    }
                    //▲  Add - LuanNT44 - 10/02/2020 - Loại 226 - Duyệt hạn mức thẻ cào/Momo/Viettel pay
                    else
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    requestdetail.ItemId = item.ItemId;
                                    requestdetail.Quantity = item.Quantity;
                                    requestdetail.Note = item.Note;
                                    //requestdetail.Status = item.Status
                                    requestdetail.Sum = item.Sum;
                                    requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                    requestdetail.EmpCode = item.EmpCode;
                                    requestdetail.Price = item.Price;
                                    //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                    requestdetail.ShopCode = item.ShopCode;
                                    requestdetail.ShopCode2 = item.ShopCode2;
                                    requestdetail.OfficeCode = item.OfficeCode;
                                    requestdetail.CustomerCode = item.CustomerCode;
                                    requestdetail.CustomerName = item.CustomerName;
                                    requestdetail.SaleCode = item.SaleCode;
                                    #region Time1
                                    if (item.Time1 == null)
                                    {
                                        requestdetail.Time1 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time1;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                    }
                                    #endregion
                                    #region Time2
                                    if (item.Time2 == null)
                                    {
                                        requestdetail.Time2 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time2;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                    }
                                    #endregion
                                    #region Time3
                                    if (item.Time3 == null)
                                    {
                                        requestdetail.Time3 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time3;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                    }
                                    #endregion
                                    requestdetail.Money1 = item.Money1;
                                    requestdetail.Money2 = item.Money2;
                                    requestdetail.Money3 = item.Money3;
                                    requestdetail.Money4 = item.Money4;
                                    requestdetail.ProductCode = item.ProductCode;
                                    requestdetail.ProductName = item.ProductName;
                                    requestdetail.Imei = item.Imei;
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.EmpCode1 = item.EmpCode1;
                                    requestdetail.EmpCode2 = item.EmpCode2;
                                    requestdetail.EmpCode3 = item.EmpCode3;
                                    requestdetail.Quantity1 = item.Quantity1;
                                    requestdetail.Quantity2 = item.Quantity2;
                                    requestdetail.Quantity3 = item.Quantity3;
                                    requestdetail.Quantity4 = item.Quantity4;
                                    requestdetail.Property1 = item.Property1;
                                    requestdetail.Property2 = item.Property2;
                                    requestdetail.Property3 = item.Property3;
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.JobCode1 = item.JobCode1;
                                    requestdetail.JobCode2 = item.JobCode2;

                                }
                            }
                        }
                        #endregion
                    }
                    #endregion

                    #region UploadImage
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        //Save file content goes here
                        string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database

                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = request.Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);

                            //================ Hiền.Đoàn 29.09.2016 Lưu ảnh vào Bảng duyệt ảnh
                            DataTable tablesImages = sql.ExecuteCommand("FileAttach_InsertToTableDuyetAnh", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID", request.Id),
                                new SqlParameter("@LinkAnh", Keyword.GetFolderFileAttach() + fName),
                                new SqlParameter("@Status", 2 ),
                                new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode)
                            });
                        }
                    }
                    #endregion

                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;

                    //▼ Edit - ThuongNM2 - 22/06/2018 - HighLight Type 185
                    if (request.TypeId == 185)
                    {
                        if (request.Assigner == UserManager.CurrentUser.InsideCode)
                        {

                            request.isHighlight = true;
                        }
                    }
                    //▲ Edit - ThuongNM2 - 22/06/2018 - HighLight Type 185

                    db.SaveChanges();

                    //▼	Edit - VietMXH - 25/12/2018 - Tối ưu==================================================
                    #region ===Xử lý sau Trao đổi===
                    switch (request.TypeId)
                    {
                        case 0:
                            #region MyRegion
                            #endregion
                            break;
                        case 1:
                            #region MyRegion
                            //▼ Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                            {
                                SqlParameter[] param_1 = new SqlParameter[] {
                                    new SqlParameter("@RequestId",request.Id),
                                    new SqlParameter("@Type",2),
                                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                                sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param_1);

                                if (request.FromForm == "OneApp-Android" || request.FromForm == "OneApp-iOS")
                                {
                                    SqlParameter[] l_SqlParameter_1 = new SqlParameter[]{
                                        new SqlParameter("@ReqId", request.Id),
                                        new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
                                    };
                                    sql.ExecuteWithoutResult("sp__WEB__Req__Det__UserIssue__PushNotiOneApp", CommandType.StoredProcedure, l_SqlParameter_1);
                                }
                            }
                            //▲ Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            #endregion
                            break;
                        case 19:
                            #region MyRegion
                            Conversation converHXLKH = new Conversation();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                converHXLKH = db.Conversations.FirstOrDefault(x => x.RequestId == request.Id && x.Status == Key.Status.Available && x.Type == Key.Conversation.Trouble);
                            }

                            EmployeeDAL empJ = new EmployeeDAL();

                            if (converHXLKH != null
                                && ((DateTime.Now.Hour >= 18 && DateTime.Now.Hour <= 23) ||
                                    (DateTime.Now.Hour >= 0 && DateTime.Now.Hour < 8) ||
                                        (DateTime.Now.Hour == 8 && DateTime.Now.Minute < 30))
                                && empJ.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == false
                                )
                            {
                                sql.ExecuteWithoutResult("sp_NotifyGQKN_CreateCallLog", CommandType.StoredProcedure, new SqlParameter[]{
                                        new SqlParameter("@RequestID",request.Id),
                                        new SqlParameter("@Title",request.Title),
                                        new SqlParameter("@FromUser",UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@ToUser","1601"),
                                        new SqlParameter("@Conversation",message),
                                        new SqlParameter("@SDT_SM_ShopGui",string.Empty),
                                        new SqlParameter("@RequestID_NotifyGQKN",request.Id)
                                });
                            }
                            #endregion
                            break;
                        case 22:
                            #region MyRegion
                            if (FlagUpdateCallLogMkts == true)// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                            {
                                SqlParameter[] param_22 = new SqlParameter[] {
                                    new SqlParameter("@RequestId",request.Id),
                                };
                                sql.ExecuteWithoutResult("sp_Update_ItemMarUsedTmp", CommandType.StoredProcedure, param_22);
                            }
                            #endregion
                            break;
                        case 23:
                            #region MyRegion
                            if (request.StepNo == 4)
                            {
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id)
                                });
                            }
                            #endregion
                            break;
                        case 25:
                            #region MyRegion
                            //▼ Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                            {
                                SqlParameter[] param_25 = new SqlParameter[] {
                                    new SqlParameter("@RequestId",request.Id),
                                    new SqlParameter("@Type",2),
                                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                                sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param_25);
                            }
                            //▲ Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            #endregion
                            break;
                        case 48:
                            #region MyRegion
                            //▼	Edit - VietMXH - 20/02/2019 - Chặn Update Trạng thái phiếu XLVP nếu CL đã Hoàn tất==================================================
                            if (request.Status == Key.StatusRequest.Complete)
                            {
                                //  CallLog đã Hoàn tất => Không Update Trạng thái Phiếu XLVP sang Inside
                            }
                            else
                            {
                                //  CallLog chưa Hoàn tất => Được Update Trạng thái Phiếu XLVP sang Inside
                                SqlParameter[] param_48 = new SqlParameter[] {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@Status", 2)
                                };
                                DataTable table1 = sql.ExecuteCommand("INS_F09_UpdateStatus_ViolationVoteRecordCode", CommandType.StoredProcedure, param_48);
                            }
                            //▲	Edit - VietMXH - 20/02/2019 - Chặn Update Trạng thái phiếu XLVP nếu CL đã Hoàn tất==================================================
                            #endregion
                            break;
                        case 51:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetGG", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                            #endregion
                            break;
                        case 56:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetYCDC", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                            #endregion
                            break;
                        case 61:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetDonHangTren100Trieu", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                            #endregion
                            break;
                        case 64:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetHuyYCDC", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                            #endregion
                            break;
                        case 125:
                            #region MyRegion
                            sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id)
                            });
                            #endregion
                            break;
                        case 126:
                            #region MyRegion
                            if (request.StepNo >= 4)
                            {
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id)
                                });
                            }
                            #endregion
                            break;
                        case 127:
                            #region MyRegion
                            if (request.StepNo == 3)
                            {
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id)
                                });
                            }
                            #endregion
                            break;
                        case 130:
                            #region MyRegion
                            sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id)
                            });
                            #endregion
                            break;
                        case 134:
                            #region MyRegion
                            sql.ExecuteCommand("Change_CC_SM_Shop", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id)
                            });
                            #endregion
                            break;
                        case 143:
                            #region MyRegion
                            sql.ExecuteCommand("Change_CC_SM_Shop", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id)
                            });
                            #endregion
                            break;
                        case 145:
                            #region MyRegion
                            SqlParameter[] param_145 = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                            sql.ExecuteWithoutResult("Callog_CallCRMXuLyKey", CommandType.StoredProcedure, param_145);
                            #endregion
                            break;
                        case 150:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_GiamSatHinhAnhCamera", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                            #endregion
                            break;
                        case 152:
                            #region MyRegion
                            if (request.StepNo >= 3)
                            {
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id)
                                });
                            }
                            #endregion
                            break;
                        case 155:
                            #region MyRegion
                            if (request.StepNo >= 4)
                            {
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id)
                                });
                            }
                            #endregion
                            break;
                        case 162:
                            #region MyRegion
                            if (request.StepNo >= 4)
                            {
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id)
                                });
                            }
                            #endregion
                            break;
                        case 181:
                            #region MyRegion
                            //▼ Add - NgoanHT - 18/04/2018 - Loại: 181 - Thêm hàm
                            int StatusSentOUT = form["StatusSentOUT"].EParseToInt();
                            if (StatusSentOUT == 1)
                            {
                                SqlParameter[] param = new SqlParameter[] {
                                    new SqlParameter("@CalllogID", request.Id)
                                };
                                sql.ExecuteWithoutResult("sp_SentIMGToOutSide_LightboxHangDemo", CommandType.StoredProcedure, param);
                            }
                            //▲ Add - NgoanHT - 18/04/2018 - Loại: 181 - Thêm hàm
                            #endregion
                            break;
                        case 183:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetLoiThamMy", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                            #endregion
                            break;
                        case 186:
                            #region MyRegion
                            //▼ Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                            {
                                SqlParameter[] param_186 = new SqlParameter[] {
                                    new SqlParameter("@RequestId",request.Id),
                                    new SqlParameter("@Type",2),
                                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                                sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param_186);
                            }
                            //▲ Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            #endregion
                            break;
                        default:
                            break;
                    }
                    #endregion
                    //▲	Edit - VietMXH - 25/12/2018 - Tối ưu==================================================

                    #region UpdateImageChecked
                    if (imageChecked != "" && permissions.Contains(Permission.Sender))
                    {
                        SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id), new SqlParameter("@FileAttachIds", imageChecked) };
                        sql.ExecuteWithoutResult("FileAttach_Update", CommandType.StoredProcedure, param);
                    }
                    #endregion

                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Communicate);

                    EmployeeDAL empJChek = new EmployeeDAL();
                    if (request.TypeId == 19
                        && ((DateTime.Now.Hour >= 18 && DateTime.Now.Hour <= 23) ||
                                (DateTime.Now.Hour >= 0 && DateTime.Now.Hour < 8) ||
                                    (DateTime.Now.Hour == 8 && DateTime.Now.Minute < 30))
                        && empJChek.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == false
                        )
                    {
                        TempData["MessageError"] = "Nếu TH của bạn là khẩn cấp, vui lòng liên hệ số hotline 0938123776 để được hỗ trợ nhanh nhất.";
                    }
                    else
                    {
                        TempData["Message"] = "Gửi Trao Đổi Thành Công!";
                    }

                    //▼	Edit - VietMXH - 22/02/2019 - EmptyPageForMobile==================================================
                    if (request.TypeId == 51)
                    {
                        if (Convert.ToString(form["nguyenNhanGiamGia_Select"]) == "1")
                        {
                            return null;
                        }
                        if (Convert.ToString(form["g__FromForm"]) == "Mobile")
                        {
                            return RedirectToAction("EmptyPageForMobile", "Requests");
                        }
                    }

                    if (permissions.Contains(Permission.Sender))
                    {
                        return RedirectToAction("Sent", "Home");
                    }
                    return RedirectToAction("Index", "Home");
                    //▲	Edit - VietMXH - 22/02/2019 - EmptyPageForMobile==================================================

                }
                else
                {
                    #region Not Valid
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region Ghi log
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1} - Sender:{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }
        [ValidateInput(false)]
        public ActionResult Reply(FormCollection form)
        {
            #region kiem tra dang nhap
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            #endregion
            var requestId = form["RequestId"].EParseToLong();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                #region lấy thông tin
                string message = form["Message"].ToString();
                string details = form["Details"].ToString();
                string imageChecked = form["ImageValidate"].ToString();
                var objects = JsonConvert.DeserializeObject<dynamic>(details);

                var detailsCc = form["DetailsCc"].ToString();
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);

                #endregion

                var firstTimeUpdate = false;
                bool FlagUpdateCallLogMkts = false;// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                if (request != null)
                {
                    #region UploadImage
                    var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                    string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        //Save file content goes here
                        string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = request.Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);

                            ////================ Hiền.Đoàn 29.09.2016 Lưu ảnh vào Bảng duyệt ảnh
                            DataTable tablesImages = sql.ExecuteCommand("FileAttach_InsertToTableDuyetAnh", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID", request.Id),
                                new SqlParameter("@LinkAnh", Keyword.GetFolderFileAttach() + fName),
                                new SqlParameter("@Status", 2 ),
                                new SqlParameter("@CreateBy", sender)
                            });
                        }
                    }
                    db.SaveChanges();
                    #endregion

                    #region File
                    List<FileAttach> fileAttaches = new List<FileAttach>();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                    }))
                    {
                        fileAttaches = (from f in db.FileAttachs
                                        where f.RequestId == request.Id
                                        && f.Status == Key.Status.Available
                                        && f.StepNo == request.StepNo
                                        select f).ToList();
                    }

                    #endregion
                    List<Permission> permissions = GetPermissions(request.Id);
                    #region Verify
                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (request.TypeId == 24)
                    {
                        var checkConversation = db.Conversations.Where(x => x.RequestId == request.Id && x.Type == Key.Conversation.CSVC
                                && x.Status == Key.Status.Available).FirstOrDefault();
                        if (checkConversation == null)
                        {
                            TempData["Message"] = "Nhập hướng xử lý trước khi đóng CallLog!";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                    }
                    if (message.Length == 0)
                    {
                        TempData["Message"] = "Trả lời phải nhập tin nhắn!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (request.TypeId == 20 && !permissions.Contains(Permission.SupperAdmin))
                    {
                        if (fileAttaches.Count == 0)
                        {
                            TempData["Message"] = "Phải đính kèm file khi trả lời Calllog thông báo";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                    }
                    if (request.TypeId == 60 && request.StepNo < 2 && !permissions.Contains(Permission.SupperAdmin))
                    {
                        TempData["Message"] = "Yêu cầu xác nhận công nợ không thể thực hiện trả lời ở bước " + request.StepNo;
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    #endregion

                    RequestStep step = new RequestStep();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                    }))
                    {
                        step = db.RequestSteps.FirstOrDefault(
                                              x => x.RequestId == request.Id
                                              && x.Status == Key.Status.Available
                                              && x.StepNo == request.StepNo);
                    }

                    if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                         && request.TypeId == 3 && (request.StepNo == 1 || request.StepNo == 3))
                    {
                        string timeRecipt = form["dateRecive"];
                        string timeUat = form["dateUAT"];
                        string timeGolive = form["dateGolive"];
                        string timeGoliveDK = form["dateGoliveDK"];
                        //string timeFuFi = form["dateFuFi"];

                        if (timeRecipt == "") { request.TimeReceipt = null; }
                        else { request.TimeReceipt = DateTime.Parse(timeRecipt); }

                        if (timeUat == "") { request.TimeUat = null; }
                        else { request.TimeUat = DateTime.Parse(timeUat); }

                        if (timeGolive == "") { request.TimeGolive = null; }
                        else { request.TimeGolive = DateTime.Parse(timeGolive); }

                        if (timeGoliveDK == "") { request.TimeGoliveExpected = null; }
                        else { request.TimeGoliveExpected = DateTime.Parse(timeGoliveDK); }

                        //if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        //else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }

                    }
                    else if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && request.StepNo == 2)
                    {
                        string timeFuFi = form["dateFuFi"];
                        if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }
                    }


                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin) || permissions.Contains(Permission.Sender))
                    {
                        #region Insert Converstation
                        var conversation = new Conversation();
                        conversation.RequestId = request.Id;
                        conversation.Sender = sender;
                        conversation.Message = message;
                        conversation.Status = Key.Status.Available;
                        conversation.TimeCreate = DateTime.Now;
                        conversation.Type = Key.Conversation.Reply;
                        conversation.StepNo = request.StepNo;
                        db.Conversations.Add(conversation);
                        #endregion

                        #region Cập nhật bước
                        byte oldStatus = request.Status;
                        if (request.Status != Key.StatusRequest.Complete)
                        {
                            request.Status = Key.StatusRequest.Reply;
                            request.StepStatus = Key.StatusRequest.Reply;
                            request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish.Value;
                            request.Assigner = sender;
                            request.StillShowing = false;
                            if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                request.TimeLastAdminUpdate = DateTime.Now;
                                request.LastAdminUpdate = sender;
                            }
                            #region Update or Insert RequestStep
                            if (step != null)
                            {
                                step.TimeEnd = step.TimeEnd == null ? DateTime.Now : step.TimeEnd;
                                step.Assigner = sender;
                            }
                            else
                            {
                                RequestStep oldStep = new RequestStep();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    oldStep = (from s in db.RequestSteps
                                               where s.RequestId == request.Id
                                               && s.StepNo == request.StepNo - 1
                                               && s.Status == Key.Status.Available
                                               select s).FirstOrDefault();
                                }

                                step = new RequestStep();
                                step.RequestId = request.Id;
                                step.TimeCreate = DateTime.Now;
                                step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                                step.TimeEnd = DateTime.Now;
                                step.Assigner = sender;
                                step.StepNo = request.StepNo;
                                step.Status = Key.Status.Available;
                                db.RequestSteps.Add(step);
                            }
                            #endregion
                        }
                        else if (request.Status == Key.StatusRequest.Complete && (request.TypeId == 1 || request.TypeId == 3))
                        {
                            request.StillShowing = false;
                        }
                        #endregion

                        #region Insert Cc
                        if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner) ||
                            permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            string strCc = "";
                            foreach (var item in Ccs) { strCc += item.id + ","; }
                            if (strCc.Length > 0)
                            {
                                strCc = strCc.Substring(0, strCc.Length - 1);
                                sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                            }
                            else
                            {
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    (from a in db.Assigners
                                     where a.RequestId == request.Id
                                     && a.Type == Key.TypeAssigner.Cc
                                     select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                                }

                            }
                        }
                        #endregion

                        #region Update Item
                        if (new List<int> { 23, 125, 126, 127, 129, 162 }.Contains(request.TypeId))
                        {
                            #region Cập nhật đồ dùng hc
                            if (((request.TypeId == 23 && request.StepNo == 4) || (request.TypeId == 126 && request.StepNo == 4)) && Convert.ToString(form["Approved_HuongXL_45"]) == "1")
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request.Id;
                                converstation.Message = "Hệ thống auto sinh mã BBBG do shop được định nghĩa nội thành: " + request.Id.ToString();
                                converstation.Sender = "-1";
                                converstation.CreateBy = "-1";
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 2;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Comment;
                                db.Conversations.Add(converstation);
                            }

                            //'▼(#006)Add===================================    
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityUpdate = item.QuantityAvaiable == null
                                                 ? quantityUpdate = 0 : quantityUpdate = item.QuantityAvaiable; // Edit - ThuongNM2 - 06/06/2018 - Không cập nhật QuantityAvalible
                                int thanhtien = item.Sum;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                    int quantityNewest = requestDetail.QuantityAvaiable == null
                                                        ? requestDetail.Quantity.GetValueOrDefault(0)
                                                        : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                    int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        //'▼(#005)Update=================================== 
                                        //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                        //                                       && x.Month == request.TimeCreate.Month
                                        //                                       && x.Year == request.TimeCreate.Year);
                                        ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                && x.Month == request.TimeCreate.Month
                                                                                && x.Year == request.TimeCreate.Year);
                                        //'▲(#005)Update===================================
                                        if ((request.TypeId == 23 && request.StepNo == 4) ||
                                            (request.TypeId == 126 && request.StepNo >= 4) ||
                                            (request.TypeId == 162 && request.StepNo >= 4) ||
                                            (request.TypeId == 125 && request.StepNo == 4) ||
                                            (request.TypeId == 127 && request.StepNo == 3) ||
                                            new List<int> { 129 }.Contains(request.TypeId))
                                        {
                                            if (itemUsed == null)
                                            {
                                                itemUsed = new ItemUsedTmp();
                                                itemUsed.GroupId = item.GroupId;
                                                itemUsed.GroupValue = moneyDifference;
                                                itemUsed.Month = request.TimeCreate.Month;
                                                itemUsed.Year = request.TimeCreate.Year;
                                                itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                itemUsed.RequestId = request.Id;
                                                itemUsed.Status = Key.Status.Available;
                                                itemUseds.Add(itemUsed);
                                            }
                                            else
                                            {
                                                itemUsed.GroupValue += moneyDifference;
                                            }
                                            //db.ItemUsedTmps.Add(itemUsed);    
                                        }
                                    }
                                    //▼ Edit - ThuongNM2 - 06/06/2018 - Thay đổi Sum = Quantity1*Price
                                    if (request.TypeId == 23)
                                    {
                                        requestDetail.QuantityAvaiable = null;
                                        requestDetail.Sum = item.Quantity1 * requestDetail.Price.GetValueOrDefault(0);
                                    }
                                    else
                                    {
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                    }
                                    //▲ Edit - ThuongNM2 - 06/06/2018 - Thay đổi Sum = Quantity1*Price                           
                                    requestDetail.Quantity1 = item.Quantity1;
                                    requestDetail.Quantity3 = item.Quantity3;

                                    string Property2 = string.Empty;
                                    if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                    {
                                        if (item.HTX == item.HinhThucXuat)
                                        {
                                            Property2 = null;
                                        }
                                        else
                                        {
                                            Property2 = item.HTX + "->" + item.HinhThucXuat;
                                        }
                                    }
                                    else
                                    {
                                        if (item.HinhThucXuat == requestDetail.Property1)
                                        {
                                            Property2 = requestDetail.Property2;
                                        }
                                        else
                                        {
                                            if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                            {
                                                Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                            }
                                            else
                                            {
                                                Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                            }
                                        }
                                    }
                                    requestDetail.Property2 = Property2;
                                    requestDetail.Property1 = item.HinhThucXuat;
                                }

                            }
                            if (itemUseds.Count > 0)
                            {
                                db.ItemUsedTmps.AddRange(itemUseds);
                            }
                            //'▲(#006)Add===================================
                            //'▼(#006)Delete - Lý do xóa ======================        
                            //ShopDAL shopDal = new ShopDAL();
                            //var shopCreate = shopDal.Get(request.FromShop);
                            //foreach (var item in objects)
                            //{
                            //    int id = item.Id;
                            //    int quantityUpdate = item.QuantityAvaiable;
                            //    int thanhtien = item.Sum;
                            //    var requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            //    if (requestDetail != null && requestDetail.Quantity != null)
                            //    {
                            //         Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                            //        int quantityNewest = requestDetail.QuantityAvaiable == null
                            //                            ? requestDetail.Quantity.GetValueOrDefault(0)
                            //                            : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                            //        int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                            //        if (moneyDifference != 0 && shopCreate != null)
                            //        {
                            //            var itemUsed = new ItemUsedTmp();
                            //            itemUsed.GroupId = item.GroupId;
                            //            itemUsed.GroupValue = moneyDifference;
                            //            itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                            //            itemUsed.RequestId = request.Id;
                            //            itemUsed.Month = request.TimeCreate.Month;
                            //            itemUsed.Year = request.TimeCreate.Year;
                            //            itemUsed.Status = Key.Status.Available;
                            //            db.ItemUsedTmps.Add(itemUsed);
                            //        }
                            //        requestDetail.QuantityAvaiable = quantityUpdate;
                            //        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                            //    }

                            //}
                            //'▲(#006)Delete===================================



                            #endregion
                        }
                        else if (request.TypeId == 28)
                        {
                            //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        var l__TienChenhLech__Old = (requestdetail.Money3 != 0) ? requestdetail.Money3 : 0;
                                        double l__TienChenhLech__New = double.TryParse(item.TienChenhLech.ToString(), out l__TienChenhLech__New) ? l__TienChenhLech__New : 0;

                                        requestdetail.Money3 = item.TienChenhLech;
                                        requestdetail.Money4 = item.TienSoPhuNH;
                                        requestdetail.Money2 = item.TienChoXuLy;
                                        requestdetail.Property4 = item.NguyenNhanChenhLech;
                                        requestdetail.Property5 = item.HuongXuLyCuaKTHO;
                                        requestdetail.SaleCode = item.SoSO;
                                        requestdetail.Numeric1 = item.SoTienTruyThu;

                                        #region Lưu lịch sử cập nhật
                                        if (l__TienChenhLech__Old != l__TienChenhLech__New)
                                        {
                                            RequestDetail detailsNew = new RequestDetail();
                                            detailsNew.RequestId = request.Id;
                                            detailsNew.Status = Key.Status.Unavailable;
                                            detailsNew.Quantity = request.StepNo;
                                            detailsNew.Time1 = DateTime.Now;
                                            detailsNew.EmpCode = UserManager.CurrentUser.InsideCode;
                                            detailsNew.Money2 = item.TienChoXuLy;
                                            detailsNew.Money3 = item.TienChenhLech;
                                            detailsNew.Money4 = item.TienSoPhuNH;
                                            detailsNew.Property4 = item.NguyenNhanChenhLech;
                                            detailsNew.Property5 = item.HuongXuLyCuaKTHO;
                                            detailsNew.SaleCode = item.SoSO;
                                            detailsNew.Numeric1 = item.SoTienTruyThu;
                                            db.RequestDetails.Add(detailsNew);
                                        }
                                        #endregion
                                    }
                                }
                            }
                            #endregion
                            //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        }
                        else if (request.TypeId == 130)
                        {
                            if (request.StepNo == 2)
                            {
                                #region Đồ dùng hc
                                if (permissions.Contains(Permission.Sender)
                                    || permissions.Contains(Permission.Admin)
                                    || permissions.Contains(Permission.SupperAdmin)
                                    || permissions.Contains(Permission.Assigner)
                                    || permissions.Contains(Permission.GroupAssigner))
                                {
                                    #region update dinh muc
                                    ShopDAL shopDal = new ShopDAL();
                                    var shopCreate = shopDal.Get(request.FromShop);
                                    List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                                    foreach (var item in objects)
                                    {
                                        int id = item.Id;
                                        int quantityUpdate = item.QuantityAvaiable;
                                        int thanhtien = item.Sum;
                                        RequestDetail requestDetail = new RequestDetail();
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestDetail != null && requestDetail.Quantity != null)
                                        {
                                            // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                            int quantityNewest = requestDetail.QuantityAvaiable == null
                                                                ? requestDetail.Quantity.GetValueOrDefault(0)
                                                                : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                            int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                            if (moneyDifference != 0 && shopCreate != null)
                                            {
                                                //'▼(#005)Update=================================== 
                                                //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                                //                                       && x.Month == request.TimeCreate.Month
                                                //                                       && x.Year == request.TimeCreate.Year);
                                                ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                       && x.Month == request.TimeCreate.Month
                                                                                       && x.Year == request.TimeCreate.Year);
                                                //'▲(#005)Update===================================

                                                if (itemUsed == null)
                                                {
                                                    itemUsed = new ItemUsedTmp();
                                                    itemUsed.GroupId = item.GroupId;
                                                    itemUsed.GroupValue = moneyDifference;
                                                    itemUsed.Month = request.TimeCreate.Month;
                                                    itemUsed.Year = request.TimeCreate.Year;
                                                    itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                    itemUsed.RequestId = request.Id;
                                                    itemUsed.Status = Key.Status.Available;
                                                    itemUseds.Add(itemUsed);
                                                }
                                                else
                                                {
                                                    itemUsed.GroupValue += moneyDifference;
                                                }
                                                //db.ItemUsedTmps.Add(itemUsed);
                                            }
                                            requestDetail.QuantityAvaiable = quantityUpdate;
                                            requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                            requestDetail.Quantity1 = item.Quantity1;
                                            requestDetail.Quantity3 = item.Quantity3;

                                            string Property2 = string.Empty;
                                            if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                            {
                                                if (item.HTX == item.HinhThucXuat)
                                                {
                                                    Property2 = null;
                                                }
                                                else
                                                {
                                                    Property2 = item.HTX + "->" + item.HinhThucXuat;
                                                }
                                            }
                                            else
                                            {
                                                if (item.HinhThucXuat == requestDetail.Property1)
                                                {
                                                    Property2 = requestDetail.Property2;
                                                }
                                                else
                                                {
                                                    if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                                    {
                                                        Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                                    }
                                                    else
                                                    {
                                                        Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                                    }
                                                }
                                            }
                                            requestDetail.Property2 = Property2;
                                            requestDetail.Property1 = item.HinhThucXuat;
                                        }

                                    }
                                    if (itemUseds.Count > 0)
                                    {
                                        db.ItemUsedTmps.AddRange(itemUseds);
                                    }
                                    #endregion
                                }


                                #endregion
                            }

                        }
                        //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                        else if (request.TypeId == 22)
                        {
                            #region Đồ dùng mko
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop                                   

                                    int moneyDifference = (sum - summoi);
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        SqlParameter[] param = new SqlParameter[]{
                                            new SqlParameter("@ShopCode",requestDetail.ShopCode),
                                            new SqlParameter("@ItemId",requestDetail.ItemId),// Edit - TrungNC3 - 1/12/2017 - Fix lôi không cập nhật đc trạng thái duyệt
                                            new SqlParameter("@Quantity",moneyDifference),// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                            new SqlParameter("@RequestId",request.Id),
                                        };
                                        sql.ExecuteWithoutResult("sp_Insert_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                                        FlagUpdateCallLogMkts = true;// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                    }
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                }
                            }
                            #endregion
                        }
                        //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                        //-------- Hiền.Đoàn 08.11.2016 thêm loại MKT khối BO
                        else if (request.TypeId == 161)
                        {
                            #region Đồ dùng mko khối BO
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);

                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 60)
                        {
                            #region Xác nhận công nợ
                            if (request.StepNo == 1)
                            {
                                TempData["Message"] = "Xác nhận công nợ không thể thực hiện Trả lời khi đang ở bước 1.";
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            foreach (var item in objects)
                            {
                                int id = item.Id;

                                ////int money3 = item.Money3;   //  VietMXH - 24/09/2017 - Không dùng

                                string conversations = item.EnterConversations;
                                bool? approved = item.Approved;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null)
                                {

                                    //▼	Delete - VietMXH - 24/09/2017 - Không dùng================================================================
                                    ////if (money3 != 0)
                                    ////    requestDetail.Money3 = money3;
                                    //▲	Delete====================================================================================================

                                    if (request.StepNo == 1 && requestDetail.Quantity >= 7 && requestDetail.Approved == null)
                                    {
                                        TempData["Message"] = "Không thể trả lời vì chưa có xác nhận của Kế toán HO";
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                }
                                if (request.Sender == UserManager.CurrentUser.InsideCode)
                                {
                                    requestDetail.Approved = approved;
                                }
                                if (item.EnterConversations != null && item.EnterConversations != "")
                                {
                                    Conversation conversationRequestDetails = new Conversation();
                                    conversationRequestDetails.RequestId = request.Id;
                                    conversationRequestDetails.Sender = sender;
                                    conversationRequestDetails.Message = conversations;
                                    conversationRequestDetails.Status = Key.Status.Available;
                                    conversationRequestDetails.TimeCreate = DateTime.Now;
                                    conversationRequestDetails.Type = Key.Conversation.Comment;
                                    conversationRequestDetails.StepNo = request.StepNo;
                                    conversationRequestDetails.RequestDetailId = id;
                                    db.Conversations.Add(conversationRequestDetails);

                                    request.isHighlight = true;
                                }

                            }

                            #endregion
                        }
                        //▼ Add - TuanNA89 - 29/12/2017 - Calllog hàng Demo 65,114
                        else if (new List<int> { 65, 114 }.Contains(request.TypeId))
                        {
                            #region Automatic
                            #endregion
                        }
                        //▲ Add - TuanNA89 - 29/12/2017 - Calllog hàng Demo 65,114
                        else if (request.TypeId == 97)
                        {
                            #region Xác nhận công nợ
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Sender) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                ShopDAL shopDal = new ShopDAL();
                                var shopCreate = shopDal.Get(request.FromShop);
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    int money3 = item.Money3;
                                    string conversations = item.EnterConversations;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null && money3 != 0)
                                    {
                                        requestDetail.Money3 = money3;
                                    }


                                    if (item.EnterConversations != null && item.EnterConversations != "")
                                    {
                                        Conversation conversationRequestDetails = new Conversation();
                                        conversationRequestDetails.RequestId = request.Id;
                                        conversationRequestDetails.Sender = sender;
                                        conversationRequestDetails.Message = conversations;
                                        conversationRequestDetails.Status = Key.Status.Available;
                                        conversationRequestDetails.TimeCreate = DateTime.Now;
                                        conversationRequestDetails.Type = Key.Conversation.Comment;
                                        conversationRequestDetails.StepNo = request.StepNo;
                                        conversationRequestDetails.RequestDetailId = id;
                                        db.Conversations.Add(conversationRequestDetails);

                                        request.isHighlight = true;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 68)
                        {
                            //'▼(#003)Add===================================   
                            #region Kiểm tra tồn quỹ

                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int Money = item.Money;
                                string Reason = item.Reason;
                                string CompensationPlans = item.CompensationPlans;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null)
                                {
                                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                    {
                                        requestDetail.Quantity1 = Money;
                                        requestDetail.Property1 = Reason;
                                        requestDetail.Property2 = CompensationPlans;
                                    }

                                }

                            }

                            #endregion
                            //'▲(#003)Add===================================  
                        }
                        else if (request.TypeId == 69)
                        {
                            //'▼(#001)Add===================================  
                            #region NEw
                            foreach (var item in objects)
                            {
                                string EmpCode = item.EmpCode;
                                var CcExist = new Assigner();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    CcExist = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                                                                       && x.Type == Key.TypeAssigner.Cc
                                                                       && x.EmployeeCode == EmpCode);
                                }

                                if (CcExist == null)
                                {
                                    CcExist = new Assigner();
                                    CcExist.RequestId = request.Id;
                                    CcExist.EmployeeCode = EmpCode;
                                    CcExist.StepNo = request.StepNo;
                                    CcExist.Type = Key.TypeAssigner.Cc;
                                    CcExist.Status = Key.Status.Available;
                                    CcExist.TimeCreate = DateTime.Now;
                                    db.Assigners.Add(CcExist);
                                }
                                else
                                    CcExist.Status = Key.Status.Available;

                                int id = item.Id;
                                bool Approved = false;
                                if (item.Approved == true)
                                {
                                    Approved = true;
                                }
                                string imei = item.Imei;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (request != null)
                                {

                                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                    {
                                        requestDetail.Approved = Approved;
                                        sql.ExecuteWithoutResult("Ins_Insert_AssetStep", CommandType.StoredProcedure, new SqlParameter[] {
                                        new SqlParameter("@IMEI", imei),
                                        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@CalllogStepNumber", request.StepNo),
                                        new SqlParameter("@CalllogStepFromDate", step.TimeStart),
                                        new SqlParameter("@CalllogStepToDate", step.TimeEnd),
                                        new SqlParameter("@CalllogID", request.Id),
                                    });
                                    }
                                }
                            }
                            #endregion
                            //'▲(#001)Add===================================

                        }
                        else if (request.TypeId == 53)
                        {
                            #region Bàn giao quy giữa ca
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null)
                                    {
                                        requestDetail.Money3 = item.Money3;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 100)
                        {
                            #region kiem ke kho tong
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null)
                                    {
                                        requestDetail.EmpCode1 = item.EmpCode1;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 82)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Money2 = item.Money2;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 103)
                        {
                            #region Automatic
                            //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            if (request.StepNo == 2)
                            {
                                if (objects != null && objects.ToString() != "[]")
                                {
                                    foreach (var item in objects)
                                    {
                                        int l__RequestDetail__Id = item.Id;
                                        if (l__RequestDetail__Id > 0)
                                        {
                                            RequestDetail l__RequestDetail = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                l__RequestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == l__RequestDetail__Id);
                                            }
                                            if (l__RequestDetail != null)
                                            {
                                                l__RequestDetail.Approved = item.Approved;
                                                l__RequestDetail.Money2 = item.Money2;
                                                l__RequestDetail.Property5 = item.Property5;
                                                l__RequestDetail.Property6 = item.Property6;
                                                l__RequestDetail.Property7 = item.Property7;
                                                l__RequestDetail.Property8 = item.Property8;
                                            }
                                        }
                                    }
                                }
                            }
                            //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            #endregion
                        }
                        else if (request.TypeId == 104)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 51)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity3 = item.Approved;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Property8 = item.Property8;
                                    }
                                    //▼ ADD - LuanNT44 - 14/07/2020 - Ghi log old CL 51 DGG
                                    int Approved_51 = item.Approved;
                                    int Quantity4_51 = item.Quantity4;
                                    string Property7_51 = item.Property7;
                                    string Property8_51 = item.Property8;
                                    SqlParameter[] param_log_51 = new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id),
                                            new SqlParameter("@UserName", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@Quantity3", Approved_51),
                                            new SqlParameter("@Quantity4", Quantity4_51),
                                            new SqlParameter("@Property7", Property7_51),
                                            new SqlParameter("@Property8", Property8_51),
                                            new SqlParameter("@TypeButton", "Reply")
                                        };
                                    sql.ExecuteWithoutResult("sp_Calllog_CreateLogDuyetGG_old_51", CommandType.StoredProcedure, param_log_51);
                                    //▲ ADD - LuanNT44 - 14/07/2020 - Ghi log old CL 51 DGG
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 56)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Quantity2 = item.Quantity;
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 108)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Note = item.Note;
                                        requestdetail.Property2 = item.Property2;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 112)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 75)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 147)
                        {

                        }
                        else if (request.TypeId == 123)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 124)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null && item.Imei == "")
                                    {
                                        requestdetail.Quantity = item.Quantity;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 122)
                        {
                            #region Gom hàng thiếu phòng bảo hành rule moi
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Money2 = item.SoTienTruyThuDieuChinh;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 120)
                        {
                            #region Gom hàng thiếu phòng bảo hành
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        // requestdetail.Money2 = item.SoTienTruyThuDieuChinh;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 102)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 134)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Time1 = item.Property9 == requestdetail.Property9 ? requestdetail.Time1 : DateTime.Now;
                                        requestdetail.Time2 = item.CalllogBill == requestdetail.CustomerName ? requestdetail.Time2 : DateTime.Now;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Note = item.Note;
                                        requestdetail.CustomerName = item.CalllogBill;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 143)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property10 = Convert.ToString(item.Property10);
                                        requestdetail.ShopCode2 = Convert.ToString(item.Shops);
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 109)
                        {

                        }
                        else if (request.TypeId == 135)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 137)
                        {
                            #region Automatic

                            //▼	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }

                                    if (requestdetail != null)
                                    {
                                        string timeF = item.Time;
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = timeF.EParseToDateTime(format);
                                        }
                                        requestdetail.Approved = item.Approved;

                                        string l__MessageGiaiTrinh = item.MessageGiaiTrinh;
                                        if (!string.IsNullOrEmpty(l__MessageGiaiTrinh))
                                        {
                                            DateTime l__TimeGiaiTrinh = item.TimeGiaiTrinh;
                                            Conversation l__Conversation = new Conversation();
                                            l__Conversation.RequestId = request.Id;
                                            l__Conversation.RequestDetailId = requestdetail.Id;
                                            l__Conversation.StepNo = request.StepNo;
                                            l__Conversation.Message = l__MessageGiaiTrinh;
                                            l__Conversation.Sender = UserManager.CurrentUser.InsideCode;
                                            l__Conversation.Type = Key.Conversation.Comment;
                                            l__Conversation.Status = Key.Status.Available;
                                            l__Conversation.TimeCreate = l__TimeGiaiTrinh;
                                            l__Conversation.CreateBy = UserManager.CurrentUser.InsideCode;
                                            db.Conversations.Add(l__Conversation);
                                        }
                                    }
                                }
                            }
                            //▲	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================

                            #endregion
                        }
                        else if (request.TypeId == 64)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 145)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Property4 = item.HXLTrangThaiPhieu;
                                        requestdetail.Property5 = item.NoiDungHXLKhac;
                                        requestdetail.Property7 = item.HXLKeyTrongKho;
                                        requestdetail.Property6 = item.PhanLoai;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 132)
                        {
                            if (objects != "" && objects != null)
                            {
                                sql.ExecuteWithoutResult("UpdateTimeCommitError", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@Time", objects)
                            });
                            }
                        }
                        else if (request.TypeId == 150)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.EmpCode = item.EmpCode;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 42)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.RequestId = request.Id;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Sum = item.Sum;
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 154)
                        {
                            #region Automatic
                            #endregion
                        }
                        //===========================Thêm xử lý cho nut trả lời  - TRUNGNC3 - 21.10.2016 - Loại 155
                        else if (request.TypeId == 155)
                        {


                            #region Đồ dùng hc
                            if (permissions.Contains(Permission.Sender)
                                || permissions.Contains(Permission.Admin)
                                || permissions.Contains(Permission.SupperAdmin)
                                || permissions.Contains(Permission.Assigner)
                                || permissions.Contains(Permission.GroupAssigner))
                            {
                                #region update dinh muc
                                ShopDAL shopDal = new ShopDAL();
                                var shopCreate = shopDal.Get(request.FromShop);
                                List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    int quantityUpdate = item.QuantityAvaiable;
                                    int thanhtien = item.Sum;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null && requestDetail.Quantity != null)
                                    {
                                        // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                        int quantityNewest = requestDetail.QuantityAvaiable == null
                                                            ? requestDetail.Quantity.GetValueOrDefault(0)
                                                            : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                        int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                        if (moneyDifference != 0 && shopCreate != null)
                                        {
                                            //'▼(#005)Update=================================== 
                                            //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                            //                                       && x.Month == request.TimeCreate.Month
                                            //                                       && x.Year == request.TimeCreate.Year);
                                            ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                   && x.Month == request.TimeCreate.Month
                                                                                   && x.Year == request.TimeCreate.Year);
                                            //'▲(#005)Update===================================

                                            if (itemUsed == null)
                                            {
                                                itemUsed = new ItemUsedTmp();
                                                itemUsed.GroupId = item.GroupId;
                                                itemUsed.GroupValue = moneyDifference;
                                                itemUsed.Month = request.TimeCreate.Month;
                                                itemUsed.Year = request.TimeCreate.Year;
                                                itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                itemUsed.RequestId = request.Id;
                                                itemUsed.Status = Key.Status.Available;
                                                itemUseds.Add(itemUsed);
                                            }
                                            else
                                            {
                                                itemUsed.GroupValue += moneyDifference;
                                            }
                                            //db.ItemUsedTmps.Add(itemUsed);
                                        }
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                        requestDetail.Quantity1 = item.Quantity1;
                                        //▼ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                        string Property2 = string.Empty;
                                        if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                        {
                                            if (item.HTX == item.HinhThucXuat)
                                            {
                                                Property2 = null;
                                            }
                                            else
                                            {
                                                Property2 = item.HTX + "->" + item.HinhThucXuat;
                                            }
                                        }
                                        else
                                        {
                                            if (item.HinhThucXuat == requestDetail.Property1)
                                            {
                                                Property2 = requestDetail.Property2;
                                            }
                                            else
                                            {
                                                if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                                {
                                                    Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                                }
                                                else
                                                {
                                                    Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                                }
                                            }
                                        }
                                        requestDetail.Property2 = Property2;
                                        requestDetail.Property1 = item.HinhThucXuat;
                                        //▲ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                    }
                                }
                                if (itemUseds.Count > 0)
                                {
                                    db.ItemUsedTmps.AddRange(itemUseds);
                                }
                                #endregion
                            }
                            #endregion
                        }
                        else if (request.TypeId == 45)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                string shopOrOffice = objects[0].ShopCode;
                                if (shopOrOffice != "" && shopOrOffice != null)
                                {
                                    var checkShop = insDB.Warehouses.FirstOrDefault(x => x.WarehouseCode == shopOrOffice);
                                    if (checkShop != null)
                                        request.FromShop = shopOrOffice;
                                    else
                                        request.FromOffice = shopOrOffice;
                                }
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Quantity3 = item.ParentIdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Quantity4 = item.IdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property11 = item.Code; //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 
                                        requestdetail.Note = item.Note;
                                        requestdetail.SaleCode = item.SaleCode; // xác nhận hết hạn bh
                                        requestdetail.ShopCode = item.ShopCode;
                                    }
                                    else
                                    {
                                        requestdetail = new RequestDetail();
                                        requestdetail.RequestId = request.Id;
                                        requestdetail.Status = Key.Status.Available;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Quantity3 = item.ParentIdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Quantity4 = item.IdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property11 = item.Code; //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 
                                        requestdetail.Note = item.Note;
                                        requestdetail.SaleCode = item.SaleCode; // xác nhận hết hạn bh
                                        requestdetail.ShopCode = item.ShopCode;
                                        db.RequestDetails.Add(requestdetail);
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 164)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        requestdetail.Quantity3 = item.Quantity3;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Quantity5 = item.Quantity5;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 163)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        if (request.StepNo < 3)
                                        {
                                            requestdetail.Property1 = item.Quantity1;
                                            requestdetail.Property2 = item.Quantity2;
                                        }
                                        else
                                        {
                                            requestdetail.Property1 = item.Property1;
                                            requestdetail.Property2 = item.Property2;
                                        }
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 166)
                        {
                            var TraoThuong = Convert.ToString(form["TraoThuongId"]);
                            var IMEI = Convert.ToString(form["Emei166"]);
                            var SoTienThue = Convert.ToString(form["Thue166"]);

                            RequestDetail requestdetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            }
                            if (requestdetail != null)
                            {
                                requestdetail.Property5 = TraoThuong;
                                requestdetail.Property8 = IMEI;
                                if (SoTienThue != null && SoTienThue != "")
                                {
                                    requestdetail.Money1 = (float)Convert.ToDouble(SoTienThue);
                                }
                            }
                            string CheckImagesApproved = Convert.ToString(form["CheckApprovedImages_166"]);
                            if (CheckImagesApproved != "" /* && (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner)) */)
                            {
                                SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@ListColumn", CheckImagesApproved) ,
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode) ,
                                new SqlParameter("@TraoThuong", TraoThuong)
                            };
                                sql.ExecuteWithoutResult("PromotionsImages_UpdateApproved", CommandType.StoredProcedure, param);
                            }
                        }

                        else if (request.TypeId == 168)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Note = item.Note;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 169)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 170)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 172)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }
                                }
                            }
                            #endregion
                        }
                        //▼ Add - TrungNC3 - 2017.09.06 - Up thực loại chuyển shop khác vùng
                        else if (request.TypeId == 173)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.ShopCode2 = item.JobtitleNew;
                                        string timeF = item.JobtitleDateStart;
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeF.EParseToDateTime(format);
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - =======================================
                        //▼ Add - PhiN - 11/12/2017 - thêm loại 186
                        else if (request.TypeId == 186)
                        {

                        }
                        //===========================Thêm xử lý cho nut trả lời  - TRUNGNC3 - 21.10.2016 - Loại 155
                        //▼ Add - ChuongNT3 - 5/12/2017 - Thêm bước xử lý sau khi tạo - 115
                        else if (request.TypeId == 115 && request.Status < 4)
                        {
                            #region Đồ dùng mko do mkt tạo
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                            // ▼ Add - ChuongNT3 - 7/12/2017 - Chỉnh sửa điều kiện đẩy POS - 115
                            var newId = "";

                            foreach (var item in objects)
                            {
                                // Cập nhật dữ liệu từ lưới
                                decimal id = item.Id;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var summoi = item.Quantity1 + item.Quantity2;

                                requestDetail.Quantity1 = item.Quantity1;
                                requestDetail.Quantity2 = item.Quantity2;
                                requestDetail.Quantity = item.Quantity;
                                requestDetail.Property1 = item.Property1;
                                requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                db.SaveChanges();
                            }
                            //Tách callog => đẩy POS
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", String.Join(", ", request.Id)), };
                            DataTable tablesRD = sql.ExecuteCommand("hiendt23_CupParent_Marketing_MktsCreate", CommandType.StoredProcedure, param);

                            foreach (DataRow row in tablesRD.Rows)
                            {
                                message = row["Message"].ToString();
                                newId = row["RequestIdNew"].ToString();
                            }
                            foreach (var item in objects)
                            {
                                decimal id = item.Id;
                                // ▲ Add - ChuongNT3 - 7/12/2017 - Chỉnh sửa điều kiện đẩy POS - 115
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                // ▼ Add - ChuongNT3 - 7/12/2017 - Chỉnh sửa điều kiện đẩy POS - 115
                                // Lấy ItemId từ ProduceName của từng RequestDetails
                                var requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                string[] iteamIdProName = requestDetail.ProductName.Split('-');
                                // Check sản phẩm có xuất kho hay không
                                SqlParameter[] paramCheck = new SqlParameter[] { new SqlParameter("@ItemId", String.Join(", ", iteamIdProName[0].Trim())), };
                                DataTable dtCheck = sql.ExecuteCommand("Chuong_CheckItemXuatKho_MKTS", CommandType.StoredProcedure, paramCheck);

                                decimal idRequest = request.Id;
                                // Trường hợp không tách calllog
                                if (newId == "")
                                {
                                    if (hinnthucxuly == "Bảo hành" || dtCheck.Rows.Count == 0)
                                    {
                                        request.StepNo = 1;
                                        request.Status = Key.StatusRequest.Complete;
                                    }
                                    else if (hinnthucxuly == "Cấp mới" && dtCheck.Rows.Count > 0)
                                    {
                                        request.StepNo = 2;
                                        request.Status = Key.StatusRequest.Processing;
                                    }
                                }
                                else
                                {
                                    idRequest = int.Parse(newId);
                                    // Cấp mới + có sp xuất kho => auto đẩy POS và chuyển sang bước 2
                                    if (hinnthucxuly == "Cấp mới" && quantityCapMoi > 0 && dtCheck != null && dtCheck.Rows.Count > 0)
                                    {
                                        //Target Request mới
                                        var newRq = db.Requests.FirstOrDefault(x => x.Id == idRequest);
                                        var newRqDetail = db.RequestDetails.Where(x => x.RequestId == newRq.Id).ToList();
                                        foreach (var i in newRqDetail)
                                        {
                                            if (i.ProductName == requestDetail.ProductName)
                                            {
                                                id = i.Id;
                                            }
                                        }
                                        //Target RequestDetails mới
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        newRq.StepNo = 2;
                                        newRq.Status = Key.StatusRequest.Processing;
                                    }
                                    else // Các trường hợp khác => auto hoàn tất ở bước 1 
                                    {
                                        request.StepNo = 1;
                                        request.Status = Key.StatusRequest.Complete;
                                    }
                                }
                                // ▲ Add - ChuongNT3 - 7/12/2017 - Chỉnh sửa điều kiện đẩy POS - 115
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop                                   

                                    int moneyDifference = (sum - summoi) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                               && x.Month == request.TimeCreate.Month
                                                                               && x.Year == request.TimeCreate.Year);
                                        if (itemUsed == null)
                                        {
                                            itemUsed = new ItemUsedTmp();
                                            itemUsed.GroupId = item.GroupId;
                                            itemUsed.GroupValue = moneyDifference;
                                            itemUsed.Month = request.TimeCreate.Month;
                                            itemUsed.Year = request.TimeCreate.Year;
                                            itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                            itemUsed.RequestId = request.Id;
                                            itemUsed.Status = Key.Status.Available;
                                            itemUseds.Add(itemUsed);
                                        }
                                        else
                                        {
                                            itemUsed.GroupValue += moneyDifference;
                                        }
                                    }
                                    //Cập nhật dữ liệu mới 
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                    db.SaveChanges();
                                }
                            }
                            if (itemUseds.Count > 0)
                            {
                                db.ItemUsedTmps.AddRange(itemUseds);
                            }
                            #endregion
                        }
                        //▲ Add - ChuongNT3 - 5/12/2017 - Thêm bước xử lý sau khi tạo - 115
                        //▼ Add - LuanNT44 - 22/03/2018 - Loại 204 - Chốt CR qua Calllog
                        else if (request.TypeId == 204)
                        {
                            #region Automatic_204
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property6 = item.TrangThai;
                                        requestdetail.Property7 = item.KPI;
                                        requestdetail.Property9 = item.ThangTinhKPI.ToString();
                                        requestdetail.Property10 = item.ThangLamCR.ToString();

                                        requestdetail.Property8 = item.MaID;
                                        requestdetail.OfficeCode = item.PhongBan;
                                        requestdetail.Property5 = item.NhomHeThong;
                                        requestdetail.Property1 = item.He_Thong;
                                        if (item.NgayChotYC != "" && item.NgayChotYC == null)
                                        {
                                            requestdetail.Time1 = DateTime.ParseExact(item.NgayChotYC.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        requestdetail.Property11 = item.NgayDuKienUAT;
                                        requestdetail.Property12 = item.NgayDuKienGoLive;
                                        if (item.NgayThucTeUAT != "" && item.NgayThucTeUAT == null)
                                        {
                                            requestdetail.Time2 = DateTime.ParseExact(item.NgayThucTeUAT.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        if (item.NgayThucTeGoLive != "" && item.NgayThucTeGoLive == null)
                                        {
                                            requestdetail.Time3 = DateTime.ParseExact(item.NgayThucTeGoLive.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        requestdetail.Quantity1 = item.Uutien;
                                        requestdetail.Note = item.GhiChu;
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - LuanNT44 - 22/03/2018 - Loại 204 - Chốt CR qua Calllog

                        //▼ Add - NghiaTV5 - 10/04/2018 - Loại 205 - claim nhà bảo hiểm
                        else if (request.TypeId == 205)
                        {
                            #region NghiaTV5 - 16/04/2018 - Loại 205 - claim nhà bảo hiểm
                            #endregion
                        }
                        //▲ Add - NghiaTV5 - 10/04/2018 - Loại 205 - claim nhà bảo hiểm
                        //▼ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
                        else if (request.TypeId == 210)
                        {
                            #region TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
                            #endregion
                        }
                        //▲ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
                        else if (request.TypeId == 225)
                        {
                            //▼	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                            #region MyRegion
                            #endregion
                            //▲	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                        }
                        else if ((new List<int> { 91, 92, 94 }.Contains(request.TypeId) && oldStatus != 3 && oldStatus != 4)
                                || (!new List<int> { 91, 92, 94 }.Contains(request.TypeId)))
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.ItemId = item.ItemId;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Note = item.Note;
                                        //requestdetail.Status = item.Status
                                        requestdetail.Sum = item.Sum;
                                        requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                        requestdetail.EmpCode = item.EmpCode;
                                        requestdetail.Price = item.Price;
                                        //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                        requestdetail.ShopCode = item.ShopCode;
                                        requestdetail.ShopCode2 = item.ShopCode2;
                                        requestdetail.OfficeCode = item.OfficeCode;
                                        requestdetail.CustomerCode = item.CustomerCode;
                                        requestdetail.CustomerName = item.CustomerName;
                                        requestdetail.SaleCode = item.SaleCode;
                                        #region Time1
                                        if (item.Time1 == null)
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time1;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time1 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time2
                                        if (item.Time2 == null)
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time2;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time2 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time3
                                        if (item.Time3 == null)
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time3;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time3 = null;
                                            }
                                        }
                                        #endregion
                                        requestdetail.Money1 = item.Money1;
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Money3 = item.Money3;
                                        requestdetail.Money4 = item.Money4;
                                        requestdetail.ProductCode = item.ProductCode;
                                        requestdetail.ProductName = item.ProductName;
                                        requestdetail.Imei = item.Imei;
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.EmpCode1 = item.EmpCode1;
                                        requestdetail.EmpCode2 = item.EmpCode2;
                                        requestdetail.EmpCode3 = item.EmpCode3;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        requestdetail.Quantity3 = item.Quantity3;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Quantity5 = item.Quantity5;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.JobCode1 = item.JobCode1;
                                        requestdetail.JobCode2 = item.JobCode2;

                                    }
                                }
                            }
                            #endregion
                            firstTimeUpdate = true;
                        }


                        #endregion

                        //▼	Edit - VietMXH - 12/10/2018 - Tối ưu==================================================
                        #region ===UpdateImageChecked===
                        if (imageChecked != "")
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id), new SqlParameter("@FileAttachIds", imageChecked) };
                            sql.ExecuteWithoutResult("FileAttach_Update", CommandType.StoredProcedure, param);
                        }
                        #endregion

                        request.TimeLastUpdate = DateTime.Now;
                        request.UpdateBy = UserManager.CurrentUser.InsideCode;
                        db.SaveChanges();

                        #region ===Biến thông báo===
                        string message23 = "";
                        string message103 = ""; //▶	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                        string message130 = "";
                        #endregion

                        #region ===Xử lý Sau Trả lời===
                        switch (request.TypeId)
                        {
                            case 0:
                                #region MyRegion
                                #endregion
                                break;
                            case 1:
                                #region MyRegion
                                //▼	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                                if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@RequestId", request.Id),
                                        new SqlParameter("@Type", 3),
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode)
                                    };
                                    sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param);

                                    if (request.FromForm == "OneApp-Android" || request.FromForm == "OneApp-iOS")
                                    {
                                        SqlParameter[] l_SqlParameter_1 = new SqlParameter[]{
                                        new SqlParameter("@ReqId", request.Id),
                                        new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
                                    };
                                        sql.ExecuteWithoutResult("sp__WEB__Req__Det__UserIssue__PushNotiOneApp", CommandType.StoredProcedure, l_SqlParameter_1);
                                    }
                                }
                                //▲	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                                #endregion
                                break;
                            case 20:
                                #region MyRegion
                                //  ===Update to Inside Thông báo hình ảnh===
                                var requestDetail = (from d in db.RequestDetails
                                                     where d.RequestId == request.Id
                                                     && d.Status == Key.Status.Available
                                                     select d).FirstOrDefault();
                                if (requestDetail != null)
                                {
                                    sql.ExecuteWithoutResult("Notice_UpdateToInside", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@AlertID", requestDetail.NoticeAlertId),
                                        new SqlParameter("@EmployeeCode",UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@WarehouseCode",request.ToShop),
                                        new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideId),
                                        new SqlParameter("@AnswerImgUrl",String.Join("*",fileAttaches.Select(x=>"http://calllog.fptshop.com.vn"+ x.Uri).ToList()) )
                                    });
                                }
                                #endregion
                                break;
                            case 22:
                                #region MyRegion
                                //  ===Update han mức Mar Sang BI===
                                if (FlagUpdateCallLogMkts == true)
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@RequestId",request.Id),
                                    };
                                    sql.ExecuteWithoutResult("sp_Update_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                                }
                                #endregion
                                break;
                            case 23:
                                #region MyRegion
                                //  ===Tách callog hàng hc nếu callog co chứa hc===
                                if (request.StepNo == 2 && request.Status < 4 && !string.IsNullOrEmpty(request.FromShop))
                                {
                                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                    DataTable tablesRD = sql.ExecuteCommand("hiendt23_CupParentRequestDetails", CommandType.StoredProcedure, param);
                                    if (tablesRD != null && tablesRD.Rows.Count > 0)
                                    {
                                        DataRow row = tablesRD.Rows[0];
                                        message23 = row["Message"].ToString();
                                    }
                                }
                                #endregion
                                break;
                            //▼	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            case 25:
                                #region MyRegion
                                if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                     new SqlParameter("@RequestId",request.Id),
                                     new SqlParameter("@Type",3),
                                     new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                                    sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param);
                                }
                                #endregion
                                break;
                            //▲	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            case 45:
                                #region MyRegion
                                //  ===Update pos IT-Support b3===
                                if (request.StepNo == 3 && objects[0].Property1 == "Bảo hành" && request.Status != Key.StatusRequest.Reply)
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@RequestID", request.Id),
                                        new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                                    sql.ExecuteWithoutResult("POS_UpdateB3_IT_Support", CommandType.StoredProcedure, param);
                                }
                                #endregion
                                break;
                            case 51:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetGG", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 56:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetYCDC", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 61:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetDonHangTren100Trieu", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 64:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetHuyYCDC", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            //▼ Add - TuanNA89 - 27/12/2017 - Calllog hàng Demo 65
                            case 65:
                                #region MyRegion
                                if (request.Status < 4)
                                {
                                    DataTable tbResultDemo_65 = sql.ExecuteCommand("sp_CalllogHangDemo_CallPOS_CheckImei", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id),
                                            new SqlParameter("@TypeId", request.TypeId),
                                            new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                        });
                                    if (tbResultDemo_65 == null)
                                    {
                                        TempData["Message"] = "Trả lời thất bại";
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                    else
                                    {
                                        if (tbResultDemo_65.Rows[0]["Result"].ToString() == "0")
                                        {
                                            TempData["Message"] = tbResultDemo_65.Rows[0]["Msg"].ToString();
                                            return RedirectToAction("Details", new { Id = request.Id });
                                        }
                                    }
                                }
                                #endregion
                                break;
                            //▲ Add - TuanNA89 - 27/12/2017 - Calllog hàng Demo 65
                            case 91:
                                #region MyRegion
                                if (firstTimeUpdate)
                                {
                                    sql.ExecuteWithoutResult("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestID",request.Id),
                                        new SqlParameter("@Check", 0),
                                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                    });
                                }
                                #endregion
                                break;
                            case 92:
                                #region MyRegion
                                if (firstTimeUpdate)
                                {
                                    sql.ExecuteWithoutResult("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestID",request.Id),
                                        new SqlParameter("@Check", 0),
                                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                    });
                                }
                                #endregion
                                break;
                            case 94:
                                #region MyRegion
                                if (firstTimeUpdate)
                                {
                                    sql.ExecuteWithoutResult("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestID",request.Id),
                                        new SqlParameter("@Check", 0),
                                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                    });
                                }
                                #endregion
                                break;
                            case 103:
                                #region MyRegion
                                //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                                if (request.Status == 3)
                                {
                                    DataTable l__Reply__TypeId_103__DataTable = sql.ExecuteCommand(
                                        "POS_CreateChungTuXuatKhacXuatDoiCauHinh",
                                        CommandType.StoredProcedure,
                                        new SqlParameter[]{
                                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@CallogID", request.Id)
                                        });
                                    if (l__Reply__TypeId_103__DataTable != null && l__Reply__TypeId_103__DataTable.Rows.Count > 0)
                                    {
                                        if (l__Reply__TypeId_103__DataTable.Rows[0]["Result"].ToString() == "1")
                                        {
                                            message103 = "Kết quả thành công! " + l__Reply__TypeId_103__DataTable.Rows[0]["Msg"].ToString();
                                        }
                                        else
                                        {
                                            message103 = "Kết quả thất bại! " + l__Reply__TypeId_103__DataTable.Rows[0]["Msg"].ToString();
                                        }
                                    }
                                    else
                                    {
                                        message103 = "Không có kết quả trả về!";
                                    }
                                }
                                //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                                #endregion
                                break;
                            //▼ Add - TuanNA89 - 28/12/2017 - Calllog nhập hàng Demo 114
                            case 114:
                                #region MyRegion
                                if (request.Status < 4)
                                {
                                    DataTable tbResultDemo_114 = sql.ExecuteCommand("sp_CalllogHangDemo_CallPOS_CheckImei", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id),
                                            new SqlParameter("@TypeId", request.TypeId),
                                            new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                        });
                                    if (tbResultDemo_114 == null)
                                    {
                                        TempData["Message"] = "Hoàn tất thất bại";
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                    else
                                    {
                                        if (tbResultDemo_114.Rows[0]["Result"].ToString() == "0")
                                        {
                                            TempData["Message"] = tbResultDemo_114.Rows[0]["Msg"].ToString();
                                            return RedirectToAction("Details", new { Id = request.Id });
                                        }
                                    }
                                }
                                #endregion
                                break;
                            //▲ Add - TuanNA89 - 28/12/2017 - Calllog nhập hàng Demo 114
                            case 125:
                                #region MyRegion
                                //  ===Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC===
                                if (request.StepNo == 2 && request.Status < 4)
                                {
                                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                    DataTable tablesRD = sql.ExecuteCommand("Request_CupParent_ProductHCCreate_SendPOS", CommandType.StoredProcedure, param);
                                    if (tablesRD != null && tablesRD.Rows.Count > 0)
                                    {
                                        DataRow row = tablesRD.Rows[0];
                                        message130 = row["Message"].ToString();
                                    }
                                }
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 126:
                                #region MyRegion
                                //  ===Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC===
                                if (request.StepNo == 2 && request.Status < 4)
                                {
                                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                    DataTable tablesRD = sql.ExecuteCommand("Request_CupParent_ProductHCCreate_SendPOS", CommandType.StoredProcedure, param);
                                    if (tablesRD != null && tablesRD.Rows.Count > 0)
                                    {
                                        DataRow row = tablesRD.Rows[0];
                                        message130 = row["Message"].ToString();
                                    }
                                }
                                else if (request.StepNo > 3)
                                {
                                    sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                }
                                #endregion
                                break;
                            case 130:
                                #region MyRegion
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 145:
                                #region MyRegion
                                SqlParameter[] param145 = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                                sql.ExecuteWithoutResult("Callog_CallCRMXuLyKey", CommandType.StoredProcedure, param145);
                                #endregion
                                break;
                            case 150:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_GiamSatHinhAnhCamera", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 152:
                                #region MyRegion
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 155:
                                #region MyRegion
                                //  ===Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC===
                                if (request.StepNo == 2 && request.Status < 4)
                                {
                                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                    DataTable tablesRD = sql.ExecuteCommand("Request_CupParent_ProductHCCreate_SendPOS", CommandType.StoredProcedure, param);
                                    if (tablesRD != null && tablesRD.Rows.Count > 0)
                                    {
                                        DataRow row = tablesRD.Rows[0];
                                        message130 = row["Message"].ToString();
                                    }
                                }
                                sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 166:
                                #region MyRegion
                                if (request.StepNo == 2)
                                {
                                    SqlParameter[] param = new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestId", request.Id),
                                        new SqlParameter("@Create", UserManager.CurrentUser.InsideCode)
                                    };
                                    sql.ExecuteWithoutResult("Calllog_SendPos_CTKM", CommandType.StoredProcedure, param);
                                }
                                #endregion
                                break;
                            case 183:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetLoiThamMy", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            //▼	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            case 186:
                                #region MyRegion
                                if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                     new SqlParameter("@RequestId",request.Id),
                                     new SqlParameter("@Type",3),
                                     new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                                    sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param);
                                }
                                #endregion
                                break;
                            //▲	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                            //▼ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
                            case 210:
                                #region MyRegion
                                if (request.Status < 4)
                                {
                                    DataTable tbResultDemo_210 = sql.ExecuteCommand("sp_CalllogHangDemo_CallPOS_CheckImei_New", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id),
                                            new SqlParameter("@TypeId", request.TypeId),
                                            new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                        });
                                    if (tbResultDemo_210 == null)
                                    {
                                        TempData["Message"] = "Trả lời thất bại";
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                    else
                                    {
                                        if (tbResultDemo_210.Rows[0]["Result"].ToString() == "0")
                                        {
                                            TempData["Message"] = tbResultDemo_210.Rows[0]["Msg"].ToString();
                                            return RedirectToAction("Details", new { Id = request.Id });
                                        }
                                    }
                                }
                                #endregion
                                break;
                            //▲ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
                            default:
                                #region MyRegion
                                #endregion
                                break;
                        }
                        #endregion

                        #region ===Send Mail===
                        XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Reply);
                        #endregion

                        #region ===Xuất Thông báo===
                        switch (request.TypeId)
                        {
                            case 23:
                                #region MyRegion
                                if (request.StepNo == 2 && !string.IsNullOrEmpty(request.FromShop))
                                {
                                    TempData["Message"] = "Gửi trả lời thành công!" + message23;
                                }
                                else
                                {
                                    TempData["Message"] = "Gửi trả lời thành công!";
                                }
                                #endregion
                                break;
                            case 103:
                                #region MyRegion
                                //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                                if (request.StepNo == 2)
                                {
                                    TempData["Message"] += "Trả lời Thành công!<br/>" + message103;
                                }
                                else
                                {
                                    TempData["Message"] = "Gửi trả lời thành công!";
                                }
                                //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                                #endregion
                                break;
                            case 115:
                                #region MyRegion
                                if (message == "Không có thực hiện tách calllog!" || message == "Không thực hiện tách calllog!")
                                    message = "";
                                if (request.Status == 4)
                                    message = "</br>Hoàn tất thành công! Hệ thống auto hoàn tất calllog mã: " + request.Id + "</b>" + message;
                                TempData["Message"] = "Gửi trả lời thành công! " + message;
                                #endregion
                                break;
                            case 125:
                            case 126:
                            case 127:
                                #region MyRegion
                                if (request.StepNo == 2)
                                {
                                    TempData["Message"] = "Gửi trả lời thành công!" + message130;
                                }
                                else
                                {
                                    TempData["Message"] = "Gửi trả lời thành công!";
                                }
                                #endregion
                                break;
                            case 130:
                                #region MyRegion
                                if (request.StepNo == 2)
                                {
                                    TempData["Message"] = "Gửi trả lời thành công!" + message130;
                                }
                                else
                                {
                                    TempData["Message"] = "Gửi trả lời thành công!";
                                }
                                #endregion
                                break;
                            default:
                                #region MyRegion
                                TempData["Message"] = "Gửi trả lời thành công!";
                                #endregion
                                break;
                        }
                        #endregion
                        //▲	Edit - VietMXH - 12/10/2018 - Tối ưu==================================================

                        if (request.TypeId == 51)
                        {

                            //▼	Edit - VietMXH - 22/02/2019 - EmptyPageForMobile==================================================
                            if (Convert.ToString(form["nguyenNhanGiamGia_Select"]) == "1")
                            {
                                return null;
                            }
                            if (Convert.ToString(form["g__FromForm"]) == "Mobile")
                            {
                                return RedirectToAction("EmptyPageForMobile", "Requests");
                            }

                            if (permissions.Contains(Permission.Sender))
                            {
                                return RedirectToAction("Sent", "Home");
                            }
                            return RedirectToAction("Index", "Home");
                            //▲	Edit - VietMXH - 22/02/2019 - EmptyPageForMobile==================================================

                        }
                        //ChuongNT3 - 28/06/2018 - chuyển loại 23 xuống nút chuyển bước
                        else if ((request.TypeId == 126 && request.StepNo == 4) && Convert.ToString(form["Approved_HuongXL_45"]) == "0")
                        {
                            if (Session[Key.Session.BillInfo] != null)
                            {
                                Session[Key.Session.BillInfo] = null;
                            }
                            var RequestDetailHC_ShopSend = (from a in db.RequestDetails
                                                            where a.RequestId == request.Id
                                                            select a).ToList();
                            // DataTable dtBillInfor
                            DataTable dtBillInfor = new DataTable();
                            dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
                            dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
                            dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã phòng ban nhận
                            dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
                            dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
                            dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
                            dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
                            dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
                            dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
                            dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
                            dtBillInfor.Columns.Add("TypeId", typeof(string));     //Mô tả loại calllog// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                            foreach (RequestDetail itemHC in RequestDetailHC_ShopSend)
                            {
                                if (itemHC.Quantity2 != null && itemHC.Quantity2 > 0)
                                {
                                    dtBillInfor.Rows.Add(
                                        UserManager.CurrentUser.InsideCode,
                                        itemHC.ItemId.ToString(),
                                        request.FromShop,
                                        "",
                                        "",
                                        "0",
                                        request.Id.ToString(),
                                        itemHC.Quantity2.ToString(),
                                        request.StepNo.ToString(),
                                        "",
                                        "23");
                                }
                            }
                            if (dtBillInfor.Rows.Count > 0)
                            {
                                Session[Key.Session.BillInfo] = dtBillInfor;
                                return RedirectToAction("CreateBillFromHC", "Requests");
                            }
                            else
                            {
                                if (permissions.Contains(Permission.Sender))
                                {
                                    return RedirectToAction("Sent", "Home");
                                }
                                return RedirectToAction("Index", "Home");
                            }

                        }
                        else
                        {
                            if (permissions.Contains(Permission.Sender))
                            {
                                return RedirectToAction("Sent", "Home");
                            }
                            return RedirectToAction("Index", "Home");
                        }
                    }
                    else
                    {
                        #region Not Valid
                        TempData["Message"] = "Bạn không có quyền để thực hiện Trả lời";
                        return RedirectToAction("Details", "Requests", new { id = request.Id });
                        #endregion
                    }
                }
                else
                {
                    #region Not Valid
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region Log lỗi
                Logger.WriteLogError("RequestsController Reply()", String.Format("{0} -  Id:{1} - sender :{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }
        [ValidateInput(false)]
        public ActionResult ChangeStep(FormCollection form)
        {
            #region kiem tra dang nhap
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            #endregion
            var requestId = form["RequestId"].EParseToLong();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                #region thong tin
                string message = form["Message"].ToString();
                var details = form["Details"].ToString();
                var objects = JsonConvert.DeserializeObject<dynamic>(details);
                string imageChecked = form["ImageValidate"].ToString();

                var detailsCc = form["DetailsCc"].ToString();
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);

                #endregion

                bool flagCLComplete = false;
                bool FlagUpdateCallLogMkts = false;// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                Models.Request request = new Models.Request();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }
                var type = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                if (request != null && type != null)
                {
                    List<Permission> permissions = GetPermissions(request.Id);

                    #region Verify
                    //▼	Edit - VietMXH - 12/10/2018 - Tối ưu==================================================
                    if (request.Status == Key.StatusRequest.Complete)
                    {
                        if (request.TypeId == 19)
                            TempData["Message"] = "Trạng Thái Request đã hoàn tất không thể cập nhật!. Bạn vui lòng tạo Request mới để CSKH xử lý.";
                        else
                            TempData["Message"] = "Trạng Thái Request đã hoàn tất không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }

                    if (request.TypeId == 126 && request.ErrorCode == "1")
                    {
                        type.StepTotal = 5;
                    }
                    if (request.StepNo >= type.StepTotal)
                    {
                        TempData["Message"] = "Không có bước kế tiếp để chuyển!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }

                    if (
                        permissions.Contains(Permission.Assigner)
                        || permissions.Contains(Permission.GroupAssigner)
                        || permissions.Contains(Permission.Admin)
                        || permissions.Contains(Permission.SupperAdmin)
                        )
                    {
                        //  Được Chuyển bước
                    }
                    else
                    {
                        if (request.TypeId == 109)
                        {
                            if (permissions.Contains(Permission.Sender))
                            {
                                //  Được Chuyển bước
                            }
                            else
                            {
                                TempData["Message"] = "Không có quyền Chuyển bước!";
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                        }
                        else
                        {
                            TempData["Message"] = "Không có quyền Chuyển bước!";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                    }

                    if (request.TypeId == 19)
                    {
                        Conversation consHXL = null;
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            consHXL = db.Conversations.FirstOrDefault(x => x.RequestId == requestId && x.Status == Key.Status.Available && x.Type == Key.Conversation.Trouble);
                        }
                        if (consHXL == null)
                        {
                            TempData["Message"] = "Vui lòng cập nhật Hướng xử lý với khách hàng trước khi chuyển bước!!";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                    }
                    //▲	Edit - VietMXH - 12/10/2018 - Tối ưu==================================================
                    //▼ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                    if (request.TypeId == 217)
                    {
                        RequestDetail l_RequestDetail_217 = null;
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            l_RequestDetail_217 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                        }
                        if (l_RequestDetail_217 == null)
                        {
                            TempData["Message"] = "Yêu cầu bị mất detail!!";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(l_RequestDetail_217.Property8) || string.IsNullOrEmpty(l_RequestDetail_217.Property9))
                            {
                                TempData["Message"] = "Yêu cầu chưa được lưu hình đầy đủ. Xin kiểm tra lại";
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                        }
                    }
                    //▲ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                    #endregion

                    if (request.TypeId == 19)
                    {
                        EmployeeDAL empC = new EmployeeDAL();
                        var empChangeStep = empC.Get(UserManager.CurrentUser.InsideCode);
                        if (message.Length > 0 && empChangeStep != null)
                        {
                            message += "<br /> Người chuyển bước: " + empChangeStep.EmployeeCode + " - " + empChangeStep.EmployeeName + " " + DateTime.Now;
                        }
                        else if (message.Length == 0 && empChangeStep != null)
                        {
                            message = "Người chuyển bước: " + empChangeStep.EmployeeCode + " - " + empChangeStep.EmployeeName + " " + DateTime.Now;
                        }
                    }
                    if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && (request.StepNo == 1 || request.StepNo == 3))
                    {
                        string timeRecipt = form["dateRecive"];
                        string timeUat = form["dateUAT"];
                        string timeGolive = form["dateGolive"];
                        string timeGoliveDK = form["dateGoliveDK"];
                        //string timeFuFi = form["dateFuFi"];

                        if (timeRecipt == "") { request.TimeReceipt = null; }
                        else { request.TimeReceipt = DateTime.Parse(timeRecipt); }

                        if (timeUat == "") { request.TimeUat = null; }
                        else { request.TimeUat = DateTime.Parse(timeUat); }

                        if (timeGolive == "") { request.TimeGolive = null; }
                        else { request.TimeGolive = DateTime.Parse(timeGolive); }

                        if (timeGoliveDK == "") { request.TimeGoliveExpected = null; }
                        else { request.TimeGoliveExpected = DateTime.Parse(timeGoliveDK); }

                        //if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        //else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }

                    }
                    else if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && request.StepNo == 2)
                    {
                        string timeFuFi = form["dateFuFi"];
                        if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }
                    }

                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin)
                        || (request.TypeId == 109 && permissions.Contains(Permission.Sender)))
                    {
                        string soSO = string.Empty;
                        #region Insert Converstation
                        if (message.Length > 0)
                        {
                            var conversation = new Conversation();
                            conversation.RequestId = request.Id;
                            conversation.Sender = sender;
                            conversation.Message = message;
                            conversation.Status = Key.Status.Available;
                            conversation.TimeCreate = DateTime.Now;
                            conversation.Type = Key.Conversation.Comment;
                            conversation.StepNo = request.StepNo;
                            db.Conversations.Add(conversation);
                        }
                        #endregion

                        #region Update or Insert RequestStep
                        RequestStep step = new RequestStep();
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                        {
                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                        }))
                        {
                            step = db.RequestSteps.FirstOrDefault(
                                           x => x.RequestId == request.Id
                                           && x.Status == Key.Status.Available
                                           && x.StepNo == request.StepNo);
                        }
                        if (step != null)
                        {
                            step.TimeEnd = step.TimeEnd == null ? DateTime.Now : step.TimeEnd;
                            step.Assigner = sender;
                        }
                        else
                        {
                            RequestStep oldStep = new RequestStep();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {

                                //▼	Edit - VietMXH - 27/06/2018 - Fix RequestStep Old==================================================
                                ////(from s in db.RequestSteps
                                //// where s.RequestId == request.Id
                                //// && s.StepNo == request.StepNo - 1
                                //// && s.Status == Key.Status.Available
                                //// select s).FirstOrDefault();
                                //-----------------------------------------------------------------------------------------------------
                                oldStep = (from s in db.RequestSteps
                                           where s.RequestId == request.Id
                                 && s.StepNo == request.StepNo - 1
                                 && s.Status == Key.Status.Available
                                           select s).FirstOrDefault();
                                //▲	Edit - VietMXH - 27/06/2018 - Fix RequestStep Old==================================================

                            }
                            step = new RequestStep();
                            step.RequestId = request.Id;
                            step.TimeCreate = DateTime.Now;

                            //▼	Edit - VietMXH - 27/06/2018 - Fix RequestStep Old==================================================
                            ////step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                            //-----------------------------------------------------------------------------------------------------
                            step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : request.TimeCreate;
                            //▲	Edit - VietMXH - 27/06/2018 - Fix RequestStep Old==================================================

                            step.TimeEnd = DateTime.Now;
                            step.Assigner = sender;
                            step.StepNo = request.StepNo;
                            step.Status = Key.Status.Available;

                            db.RequestSteps.Add(step);
                        }
                        #endregion

                        #region Insert Cc
                        if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner) ||
                            permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            string strCc = "";
                            foreach (var item in Ccs) { strCc += item.id + ","; }
                            if (strCc.Length > 0)
                            {
                                strCc = strCc.Substring(0, strCc.Length - 1);
                                sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                            }
                            else
                            {
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    (from a in db.Assigners
                                     where a.RequestId == request.Id
                                     && a.Type == Key.TypeAssigner.Cc
                                     select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                                }

                            }
                            //(from a in db.Assigners
                            // where a.RequestId == request.Id
                            // && a.Type == Key.TypeAssigner.Cc && a.GroupMail == null
                            // select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                            //foreach (var Cc in Ccs)
                            //{
                            //    //Cc.id
                            //    string EmpCode = Cc.id;
                            //    var CcExist = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                            //                                           && x.Type == Key.TypeAssigner.Cc
                            //                                           && x.EmployeeCode == EmpCode);
                            //    if (CcExist == null)
                            //    {
                            //        CcExist = new Assigner();
                            //        CcExist.RequestId = request.Id;
                            //        CcExist.EmployeeCode = EmpCode;
                            //        CcExist.StepNo = request.StepNo;
                            //        CcExist.Type = Key.TypeAssigner.Cc;
                            //        CcExist.Status = Key.Status.Available;
                            //        CcExist.TimeCreate = DateTime.Now;
                            //        db.Assigners.Add(CcExist);
                            //    }
                            //    else
                            //        CcExist.Status = Key.Status.Available;
                            //}
                        }
                        #endregion

                        bool CheckTruHanMuc127 = false;
                        int flag_step = 0;  // Add - LuanNT44 - 10/05/2018 - loại 24 - Sửa chữa CSVC
                        bool l__TypeId_154__Is_DuyetNVC = false;

                        #region Update Items
                        if (new List<int> { 23, 125, 126, 127, 162 }.Contains(request.TypeId))
                        {
                            #region Đồ dùng HC
                            if ((request.TypeId == 162 && request.StepNo == 4) && Convert.ToString(form["Approved_HuongXL_45"]) == "1")
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request.Id;
                                converstation.Message = "Hệ thống auto sinh mã BBBG do shop được định nghĩa nội thành: " + request.Id.ToString();
                                converstation.Sender = "-1";
                                converstation.CreateBy = "-1";
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 2;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Comment;
                                db.Conversations.Add(converstation);
                            }
                            //'▼(#006)Add===================================    
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityUpdate = item.QuantityAvaiable == null
                                                  ? quantityUpdate = 0 : quantityUpdate = item.QuantityAvaiable; // Edit - ThuongNM2 - 06/06/2018 - Không cập nhật QuantityAvalible
                                int thanhtien = item.Sum;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                    int quantityNewest = requestDetail.QuantityAvaiable == null
                                                        ? requestDetail.Quantity.GetValueOrDefault(0)
                                                        : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                    int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        //'▼(#005)Update=================================== 
                                        //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                        //                                       && x.Month == request.TimeCreate.Month
                                        //                                       && x.Year == request.TimeCreate.Year);
                                        ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                               && x.Month == request.TimeCreate.Month
                                                                               && x.Year == request.TimeCreate.Year);
                                        //'▲(#005)Update===================================

                                        ////==== Hiền.Đoàn 21.02.2017 Lưu trừ hạn mức loại 23 khi bước >=4
                                        if ((request.TypeId == 23 && request.StepNo == 4) ||
                                            (request.TypeId == 126 && request.StepNo >= 4) ||
                                            (request.TypeId == 162 && request.StepNo >= 4) ||
                                            (request.TypeId == 125 && request.StepNo == 4) ||
                                            (request.TypeId == 127 && request.StepNo >= 2) ||
                                            new List<int> { 129 }.Contains(request.TypeId))
                                        {
                                            if (itemUsed == null)
                                            {
                                                itemUsed = new ItemUsedTmp();
                                                itemUsed.GroupId = item.GroupId;
                                                itemUsed.GroupValue = moneyDifference;
                                                itemUsed.Month = request.TimeCreate.Month;
                                                itemUsed.Year = request.TimeCreate.Year;
                                                itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                itemUsed.RequestId = request.Id;
                                                itemUsed.Status = Key.Status.Available;
                                                itemUseds.Add(itemUsed);
                                            }
                                            else
                                            {
                                                itemUsed.GroupValue += moneyDifference;
                                            }
                                            //db.ItemUsedTmps.Add(itemUsed);
                                        }
                                    }
                                    else if (moneyDifference == 0 && shopCreate != null)
                                    {
                                        if (request.TypeId == 127 && request.StepNo >= 2)
                                        {
                                            CheckTruHanMuc127 = true;
                                        }
                                    }
                                    //▼ Edit - ThuongNM2 - 06/06/2018 - Thay đổi Sum = Quantity1*Price
                                    if (request.TypeId == 23)
                                    {
                                        requestDetail.QuantityAvaiable = null;
                                        requestDetail.Sum = item.Quantity1 * requestDetail.Price.GetValueOrDefault(0);
                                    }
                                    else
                                    {
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                    }
                                    //▲ Edit - ThuongNM2 - 06/06/2018 - Thay đổi Sum = Quantity1*Price
                                    requestDetail.Quantity1 = item.Quantity1;
                                    requestDetail.Quantity3 = item.Quantity3;

                                    string Property2 = string.Empty;
                                    if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                    {
                                        if (item.HTX == item.HinhThucXuat)
                                        {
                                            Property2 = null;
                                        }
                                        else
                                        {
                                            Property2 = item.HTX + "->" + item.HinhThucXuat;
                                        }
                                    }
                                    else
                                    {
                                        if (item.HinhThucXuat == requestDetail.Property1)
                                        {
                                            Property2 = requestDetail.Property2;
                                        }
                                        else
                                        {
                                            if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                            {
                                                Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                            }
                                            else
                                            {
                                                Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                            }
                                        }
                                    }
                                    requestDetail.Property2 = Property2;
                                    requestDetail.Property1 = item.HinhThucXuat;

                                }

                            }
                            if (itemUseds.Count > 0)
                            {
                                db.ItemUsedTmps.AddRange(itemUseds);
                            }
                            //'▲(#006)Add===================================
                            //'▼(#006)Delete - Lý do xóa ======================   
                            //ShopDAL shopDal = new ShopDAL();
                            //var shopCreate = shopDal.Get(request.FromShop);
                            //foreach (var item in objects)
                            //{
                            //    int id = item.Id;
                            //    int quantityUpdate = item.QuantityAvaiable;
                            //    int thanhtien = item.Sum;
                            //    var requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            //    if (requestDetail != null && requestDetail.Quantity != null)
                            //    {
                            //        // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                            //        int quantityNewest = requestDetail.QuantityAvaiable == null
                            //                            ? requestDetail.Quantity.GetValueOrDefault(0)
                            //                            : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                            //        int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                            //        if (moneyDifference != 0 && shopCreate != null)
                            //        {
                            //            var itemUsed = new ItemUsedTmp();
                            //            itemUsed.GroupId = item.GroupId;
                            //            itemUsed.GroupValue = moneyDifference;
                            //            itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                            //            itemUsed.RequestId = request.Id;
                            //            itemUsed.Month = request.TimeCreate.Month;
                            //            itemUsed.Year = request.TimeCreate.Year;
                            //            itemUsed.Status = Key.Status.Available;
                            //            db.ItemUsedTmps.Add(itemUsed);
                            //        }
                            //        requestDetail.QuantityAvaiable = quantityUpdate;
                            //        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                            //    }
                            //}
                            //'▲(#006)Delete===================================

                            #endregion
                        }

                        //▼ Add - LuanNT44 - 03/12/2019 - Loại 24 - CSVC -- LuanNT44 - 11/04/2020 - 24 - edit
                        else if (request.TypeId == 24)
                        {
                            #region Automatic
                            #endregion
                        }
                        //▲ Add - LuanNT44 - 03/12/2019 - Loại 24 - CSVC  -- LuanNT44 - 11/04/2020 - 24 - edit

                        else if (request.TypeId == 28)
                        {
                            //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        var l__TienChenhLech__Old = (requestdetail.Money3 != 0) ? requestdetail.Money3 : 0;
                                        double l__TienChenhLech__New = double.TryParse(item.TienChenhLech.ToString(), out l__TienChenhLech__New) ? l__TienChenhLech__New : 0;

                                        requestdetail.Money3 = item.TienChenhLech;
                                        requestdetail.Money4 = item.TienSoPhuNH;
                                        requestdetail.Money2 = item.TienChoXuLy;
                                        requestdetail.Property4 = item.NguyenNhanChenhLech;
                                        requestdetail.Property5 = item.HuongXuLyCuaKTHO;
                                        requestdetail.SaleCode = item.SoSO;
                                        requestdetail.Numeric1 = item.SoTienTruyThu;

                                        #region Lưu lịch sử cập nhật
                                        if (l__TienChenhLech__Old != l__TienChenhLech__New)
                                        {
                                            RequestDetail detailsNew = new RequestDetail();
                                            detailsNew.RequestId = request.Id;
                                            detailsNew.Status = Key.Status.Unavailable;
                                            detailsNew.Quantity = request.StepNo;
                                            detailsNew.Time1 = DateTime.Now;
                                            detailsNew.EmpCode = UserManager.CurrentUser.InsideCode;
                                            detailsNew.Money2 = item.TienChoXuLy;
                                            detailsNew.Money3 = item.TienChenhLech;
                                            detailsNew.Money4 = item.TienSoPhuNH;
                                            detailsNew.Property4 = item.NguyenNhanChenhLech;
                                            detailsNew.Property5 = item.HuongXuLyCuaKTHO;
                                            detailsNew.SaleCode = item.SoSO;
                                            detailsNew.Numeric1 = item.SoTienTruyThu;
                                            db.RequestDetails.Add(detailsNew);
                                        }
                                        #endregion
                                    }
                                }
                            }
                            #endregion
                            //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        }
                        else if (request.TypeId == 130)
                        {
                            if ((request.TypeId == 130 && request.StepNo == 2) && Convert.ToString(form["Approved_HuongXL_45"]) == "1")
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request.Id;
                                converstation.Message = "Hệ thống auto sinh mã BBBG do shop được định nghĩa nội thành: " + request.Id.ToString();
                                converstation.Sender = "-1";
                                converstation.CreateBy = "-1";
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 2;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Comment;
                                db.Conversations.Add(converstation);
                            }
                            if (request.StepNo == 2)
                            {
                                #region Đồ dùng hc
                                if (permissions.Contains(Permission.Sender)
                                    || permissions.Contains(Permission.Admin)
                                    || permissions.Contains(Permission.SupperAdmin)
                                    || permissions.Contains(Permission.Assigner)
                                    || permissions.Contains(Permission.GroupAssigner))
                                {
                                    #region update dinh muc
                                    ShopDAL shopDal = new ShopDAL();
                                    var shopCreate = shopDal.Get(request.FromShop);
                                    List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                                    foreach (var item in objects)
                                    {
                                        int id = item.Id;
                                        int quantityUpdate = item.QuantityAvaiable;
                                        int thanhtien = item.Sum;
                                        RequestDetail requestDetail = new RequestDetail();
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestDetail != null && requestDetail.Quantity != null)
                                        {
                                            // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                            int quantityNewest = requestDetail.QuantityAvaiable == null
                                                                ? requestDetail.Quantity.GetValueOrDefault(0)
                                                                : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                            int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                            if (moneyDifference != 0 && shopCreate != null)
                                            {
                                                //'▼(#005)Update=================================== 
                                                //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                                //                                       && x.Month == request.TimeCreate.Month
                                                //                                       && x.Year == request.TimeCreate.Year);
                                                ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                       && x.Month == request.TimeCreate.Month
                                                                                       && x.Year == request.TimeCreate.Year);
                                                //'▲(#005)Update===================================

                                                if (itemUsed == null)
                                                {
                                                    itemUsed = new ItemUsedTmp();
                                                    itemUsed.GroupId = item.GroupId;
                                                    itemUsed.GroupValue = moneyDifference;
                                                    itemUsed.Month = request.TimeCreate.Month;
                                                    itemUsed.Year = request.TimeCreate.Year;
                                                    itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                    itemUsed.RequestId = request.Id;
                                                    itemUsed.Status = Key.Status.Available;
                                                    itemUseds.Add(itemUsed);
                                                }
                                                else
                                                {
                                                    itemUsed.GroupValue += moneyDifference;
                                                }
                                                //db.ItemUsedTmps.Add(itemUsed);
                                            }
                                            requestDetail.QuantityAvaiable = quantityUpdate;
                                            requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                            requestDetail.Quantity1 = item.Quantity1;
                                            requestDetail.Quantity3 = item.Quantity3;

                                            string Property2 = string.Empty;
                                            if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                            {
                                                if (item.HTX == item.HinhThucXuat)
                                                {
                                                    Property2 = null;
                                                }
                                                else
                                                {
                                                    Property2 = item.HTX + "->" + item.HinhThucXuat;
                                                }
                                            }
                                            else
                                            {
                                                if (item.HinhThucXuat == requestDetail.Property1)
                                                {
                                                    Property2 = requestDetail.Property2;
                                                }
                                                else
                                                {
                                                    if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                                    {
                                                        Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                                    }
                                                    else
                                                    {
                                                        Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                                    }
                                                }
                                            }
                                            requestDetail.Property2 = Property2;
                                            requestDetail.Property1 = item.HinhThucXuat;
                                        }
                                    }
                                    if (itemUseds.Count > 0)
                                    {
                                        db.ItemUsedTmps.AddRange(itemUseds);
                                    }
                                    #endregion
                                }


                                #endregion
                            }

                        }
                        else if (request.TypeId == 154)
                        {
                            #region Automatic
                            if (request.FromForm.Contains("Ver2") && request.StepNo == 1 && request.Status < 4)
                            {
                                if (objects != null && objects.ToString() != "[]")
                                {
                                    foreach (var item in objects)
                                    {
                                        if (item.DuyetNVC == 1)
                                        {
                                            l__TypeId_154__Is_DuyetNVC = true;
                                            int id = item.Id;
                                            RequestDetail requestdetail = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                            }
                                            if (requestdetail != null)
                                            {
                                                requestdetail.QuantityAvaiable = 1;
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                        //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                        else if (request.TypeId == 22)
                        {
                            #region Đồ dùng mko
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop                                   

                                    int moneyDifference = (sum - summoi);
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        SqlParameter[] param = new SqlParameter[]{
                                            new SqlParameter("@ShopCode",requestDetail.ShopCode),
                                            new SqlParameter("@ItemId",requestDetail.ItemId),
                                            new SqlParameter("@Quantity",moneyDifference),// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                            new SqlParameter("@RequestId",request.Id),
                                        };
                                        sql.ExecuteWithoutResult("sp_Insert_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                                        FlagUpdateCallLogMkts = true;// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                    }
                                    //▼ Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                    //▲ Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                }
                            }
                            #endregion
                        }
                        //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                        else if (request.TypeId == 161) //--- MKT khối BO
                        {
                            #region Đồ dùng mko
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);

                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 115)
                        {
                            #region Đồ dùng mko do mkt tạo
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop                                   

                                    int moneyDifference = (sum - summoi) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        //'▼(#005)Update=================================== 
                                        //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                        //                                       && x.Month == request.TimeCreate.Month
                                        //                                       && x.Year == request.TimeCreate.Year);
                                        ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                               && x.Month == request.TimeCreate.Month
                                                                               && x.Year == request.TimeCreate.Year);
                                        if (itemUsed == null)
                                        {
                                            itemUsed = new ItemUsedTmp();
                                            itemUsed.GroupId = item.GroupId;
                                            itemUsed.GroupValue = moneyDifference;
                                            itemUsed.Month = request.TimeCreate.Month;
                                            itemUsed.Year = request.TimeCreate.Year;
                                            itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                            itemUsed.RequestId = request.Id;
                                            itemUsed.Status = Key.Status.Available;
                                            itemUseds.Add(itemUsed);
                                        }
                                        else
                                        {
                                            itemUsed.GroupValue += moneyDifference;
                                        }
                                        //db.ItemUsedTmps.Add(itemUsed);
                                        //'▲(#005)Update===================================
                                    }
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                }
                            }
                            if (itemUseds.Count > 0)
                            {
                                db.ItemUsedTmps.AddRange(itemUseds);
                            }
                            #endregion
                        }
                        else if (request.TypeId == 60)
                        {
                            #region Xác nhận công nợ
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            foreach (var item in objects)
                            {
                                int id = item.Id;

                                ////int money3 = item.Money3;   //  VietMXH - 24/09/2017 - Không dùng

                                string conversations = item.EnterConversations;
                                bool? approved = item.Approved;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null)
                                {
                                    //▼	Delete - VietMXH - 18/09/2017 - Tách lưới 3 phần==========================================================
                                    ////if (money3 != 0)
                                    ////    requestDetail.Money3 = money3;

                                    ////if (requestDetail.Approved == null && request.StepNo == 1 && requestDetail.Money3 != requestDetail.Money2)
                                    ////{
                                    ////    TempData["Message"] = "Không thể chuyển bước vì chưa có xác nhận của Kế toán HO";
                                    ////    return RedirectToAction("Details", new { Id = request.Id });
                                    ////}
                                    //▲	Delete====================================================================================================

                                    if (request.Sender == UserManager.CurrentUser.InsideCode)
                                    {
                                        requestDetail.Approved = approved;
                                    }
                                }
                                if (item.EnterConversations != null && item.EnterConversations != "")
                                {
                                    Conversation conversationRequestDetails = new Conversation();
                                    conversationRequestDetails.RequestId = request.Id;
                                    conversationRequestDetails.Sender = sender;
                                    conversationRequestDetails.Message = conversations;
                                    conversationRequestDetails.Status = Key.Status.Available;
                                    conversationRequestDetails.TimeCreate = DateTime.Now;
                                    conversationRequestDetails.Type = Key.Conversation.Comment;
                                    conversationRequestDetails.StepNo = request.StepNo;
                                    conversationRequestDetails.RequestDetailId = id;
                                    db.Conversations.Add(conversationRequestDetails);

                                    request.isHighlight = true;
                                }

                            }
                            #endregion
                        }
                        else if (request.TypeId == 97)
                        {
                            #region Xác nhận công nợ
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Sender) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                ShopDAL shopDal = new ShopDAL();
                                var shopCreate = shopDal.Get(request.FromShop);
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    int money3 = item.Money3;
                                    string conversations = item.EnterConversations;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null && money3 != 0)
                                    {
                                        requestDetail.Money3 = money3;
                                    }


                                    if (item.EnterConversations != null && item.EnterConversations != "")
                                    {
                                        Conversation conversationRequestDetails = new Conversation();
                                        conversationRequestDetails.RequestId = request.Id;
                                        conversationRequestDetails.Sender = sender;
                                        conversationRequestDetails.Message = conversations;
                                        conversationRequestDetails.Status = Key.Status.Available;
                                        conversationRequestDetails.TimeCreate = DateTime.Now;
                                        conversationRequestDetails.Type = Key.Conversation.Comment;
                                        conversationRequestDetails.StepNo = request.StepNo;
                                        conversationRequestDetails.RequestDetailId = id;
                                        db.Conversations.Add(conversationRequestDetails);

                                        request.isHighlight = true;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 68)
                        {
                            //'▼(#003)Add===================================   
                            #region Kiểm tra tồn quỹ

                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int Money = item.Money;
                                string Reason = item.Reason;
                                string CompensationPlans = item.CompensationPlans;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null)
                                {
                                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                    {
                                        requestDetail.Quantity1 = Money;
                                        requestDetail.Property1 = Reason;
                                        requestDetail.Property2 = CompensationPlans;
                                    }

                                }

                            }

                            #endregion
                            //'▲(#003)Add===================================  
                        }
                        else if (request.TypeId == 69)
                        {
                            //'▼(#001)Add=================================== 
                            #region
                            foreach (var item in objects)
                            {
                                string EmpCode = item.EmpCode;
                                var CcExist = new Assigner();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    CcExist = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                                                                            && x.Type == Key.TypeAssigner.Cc
                                                                            && x.EmployeeCode == EmpCode);
                                }
                                if (CcExist == null)
                                {
                                    CcExist = new Assigner();
                                    CcExist.RequestId = request.Id;
                                    CcExist.EmployeeCode = EmpCode;
                                    CcExist.StepNo = request.StepNo;
                                    CcExist.Type = Key.TypeAssigner.Cc;
                                    CcExist.Status = Key.Status.Available;
                                    CcExist.TimeCreate = DateTime.Now;
                                    db.Assigners.Add(CcExist);
                                }
                                else
                                    CcExist.Status = Key.Status.Available;

                                int id = item.Id;
                                bool Approved = false;
                                if (item.Approved == true)
                                {
                                    Approved = true;
                                }

                                string imei = item.Imei;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (request != null)
                                {
                                    RequestStep requestStep = db.RequestSteps.FirstOrDefault(x => x.RequestId == request.Id);
                                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                    {
                                        requestDetail.Approved = Approved;
                                        sql.ExecuteWithoutResult("Ins_Insert_AssetStep", CommandType.StoredProcedure, new SqlParameter[] {
                                        new SqlParameter("@IMEI", imei),
                                        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@CalllogStepNumber", request.StepNo),
                                        new SqlParameter("@CalllogStepFromDate", step.TimeStart),
                                        new SqlParameter("@CalllogStepToDate", step.TimeEnd),
                                        new SqlParameter("@CalllogID", request.Id),
                                    });
                                    }
                                }
                            }
                            #endregion
                            //'▲(#001)Add===================================

                        }
                        else if (request.TypeId == 53)
                        {
                            #region Bàn giao quy giữa ca
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null)
                                    {
                                        requestDetail.Money3 = item.Money3;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 100)
                        {
                            #region kiem ke kho tong
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null)
                                    {
                                        requestDetail.EmpCode1 = item.EmpCode1;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 82)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Money2 = item.Money2;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 103)
                        {
                            #region Automatic
                            //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int l__RequestDetail__Id = item.Id;
                                    if (l__RequestDetail__Id > 0)
                                    {
                                        RequestDetail l__RequestDetail = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            l__RequestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == l__RequestDetail__Id);
                                        }
                                        if (l__RequestDetail != null)
                                        {
                                            l__RequestDetail.Approved = item.Approved;
                                            l__RequestDetail.Money2 = item.Money2;
                                            l__RequestDetail.Property5 = item.Property5;
                                            l__RequestDetail.Property6 = item.Property6;
                                            l__RequestDetail.Property7 = item.Property7;
                                            l__RequestDetail.Property8 = item.Property8;
                                        }
                                    }
                                }
                            }
                            //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            #endregion
                        }
                        else if (request.TypeId == 104)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 51)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity3 = item.Approved;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Property8 = item.Property8;
                                    }
                                    //▼ ADD - LuanNT44 - 14/07/2020 - Ghi log old CL 51 DGG
                                    int Approved_51 = item.Approved;
                                    int Quantity4_51 = item.Quantity4;
                                    string Property7_51 = item.Property7;
                                    string Property8_51 = item.Property8;
                                    SqlParameter[] param_log_51 = new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id),
                                            new SqlParameter("@UserName", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@Quantity3", Approved_51),
                                            new SqlParameter("@Quantity4", Quantity4_51),
                                            new SqlParameter("@Property7", Property7_51),
                                            new SqlParameter("@Property8", Property8_51),
                                            new SqlParameter("@TypeButton", "ChangeStep")
                                        };
                                    sql.ExecuteWithoutResult("sp_Calllog_CreateLogDuyetGG_old_51", CommandType.StoredProcedure, param_log_51);
                                    //▲ ADD - LuanNT44 - 14/07/2020 - Ghi log old CL 51 DGG
                                    //▼ Edit - ThuongNM2 - 01/07/2019 - Thay đổi yêu cầu CL 51 DGG
                                    if ((request.StepNo == 1 || request.StepNo == 3) && (item.Approved == 2 || item.Approved == 3) && item.Quantity4 == 6)
                                    {
                                        SqlParameter[] param = new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id),
                                        };
                                        sql.ExecuteWithoutResult("sp_FRT_Web_HoanHMDGG", CommandType.StoredProcedure, param);

                                    }
                                    //▲ Edit - ThuongNM2 - 01/07/2019 - Thay đổi yêu cầu CL 51 DGG
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 56)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Quantity2 = item.Quantity;
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 108)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Note = item.Note;
                                        requestdetail.Property2 = item.Property2;
                                    }

                                }
                            }
                            #endregion
                        }

                        //▼	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================
                        else if (request.TypeId == 109)
                        {
                            #region MyRegion
                            if (request.StepNo == 1)
                            {
                                if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Sender))
                                {
                                    var details2 = Convert.ToString(form["Details2"]);
                                    var objects2 = JsonConvert.DeserializeObject<dynamic>(details2);
                                    if (objects2 != null && objects2.ToString() != "[]")
                                    {
                                        foreach (var item in objects2)
                                        {
                                            int id = item.Id;
                                            RequestDetail requestdetail = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                            }
                                            if (requestdetail != null)
                                            {
                                                requestdetail.Property1 = item.SoSO;
                                                soSO = item.SoSO;
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================

                        else if (request.TypeId == 112)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 75)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 147)
                        {

                        }
                        else if (request.TypeId == 65)
                        {
                            #region Automatic
                            //if (objects != null && objects.ToString() != "[]")
                            //{
                            //    foreach (var item in objects)
                            //    {
                            //        int id = item.Id;
                            //        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            //        if (requestdetail != null)
                            //        {
                            //            requestdetail.Property1 = item.Imeis;
                            //        }

                            //    }
                            //}
                            #endregion
                        }
                        else if (request.TypeId == 122)
                        {
                            if (request.StepNo == 2 && form["DuyetAll"].ToString() == "1")
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request.Id;
                                converstation.Message = "Shop vui lòng cập nhập thông tin truy thu và hoàn tất Call Log trong thời gian 3 ngày";
                                converstation.Sender = UserManager.CurrentUser.InsideCode;
                                converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 0;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Create;
                                db.Conversations.Add(converstation);
                            }
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                bool check = true;
                                foreach (var item in objects)
                                {
                                    int id = item.Id;

                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }

                                    if (requestdetail != null)
                                    {
                                        string timeF = item.Time;
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeF.EParseToDateTime(format);
                                        }
                                        requestdetail.Approved = item.Approved;
                                        check = item.Approved;
                                        requestdetail.Money2 = item.SoTienTruyThuDieuChinh;
                                        #region Update Duyet Gom Hàng Bảo hành sang POS
                                        if (request.StepNo == 2)
                                        {
                                            List<RequestDetail> listHangNotAp = new List<RequestDetail>();
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                            {
                                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                            }))
                                            {
                                                listHangNotAp = (from f in db.RequestDetails
                                                                 where f.RequestId == request.Id && f.Id == requestdetail.Id
                                                                 && f.Status == Key.Status.Available
                                                                 select f).ToList();
                                            }

                                            foreach (var value in listHangNotAp)
                                            {
                                                string statusPos = string.Empty;
                                                statusPos = check == true ? "C" : "K";
                                                DataTable tableResult = sql.ExecuteCommand("POS_UpdateApprovedGomhangBH", CommandType.StoredProcedure, new SqlParameter[]
                                                {
                                                    new SqlParameter("@MaYCDC", value.Property1),
                                                    new SqlParameter("@MaPhieuBH", value.Property3),
                                                    new SqlParameter("@MaPKThieu", value.Property6),
                                                    new SqlParameter("@Status",statusPos ),
                                                    new SqlParameter("@ApproveBy", UserManager.CurrentUser.InsideCode)
                                                });
                                                if (tableResult.Rows[0][0].ToString() == "0")
                                                {
                                                    TempData["Message"] = "Lỗi trong quá trình cập nhật dữ liệu sang POS!";
                                                    return RedirectToAction("Details", new { Id = request.Id });
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 123)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 124)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null && item.Imei == "")
                                    {
                                        requestdetail.Quantity = item.Quantity;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 102)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 134)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                //▼ Edit - LuanNT44 - 21/03/2019 -- thêm popup
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Time1 = item.Property9 == requestdetail.Property9 ? requestdetail.Time1 : DateTime.Now;
                                        requestdetail.Time2 = item.CalllogBill == requestdetail.CustomerName ? requestdetail.Time2 : DateTime.Now;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Note = item.Note;
                                        requestdetail.CustomerName = item.CalllogBill;
                                        requestdetail.Property11 = item.SoHoaDon;
                                        requestdetail.Property13 = item.ThoiGianChuyenHang;
                                        requestdetail.Property14 = item.LyDoKhongNhap;
                                        //▼ ChuongNT3 - 13/03/2019 - claim nvc 
                                        requestdetail.ProductCode = Convert.ToString(item.GioChuyenHangShopGuiTu) + ':' + Convert.ToString(item.PhutChuyenHangShopGuiTu);
                                        requestdetail.EmpCode2 = Convert.ToString(item.GioChuyenHangShopNhanTu) + ':' + Convert.ToString(item.PhutChuyenHangShopNhanTu);
                                        requestdetail.Property16 = item.ViTriCamShopGui;
                                        requestdetail.Property17 = item.ViTriCamShopNhan;
                                        if (item.ViTriCamShopGuiKhac != "" && item.ViTriCamShopGuiKhac != null)
                                        {
                                            requestdetail.Property18 = item.ViTriCamShopGuiKhac;
                                        }
                                        if (item.ViTriCamShopNhanKhac != "" && item.ViTriCamShopNhanKhac != null)
                                        {
                                            requestdetail.Property19 = item.ViTriCamShopNhanKhac;
                                        }
                                        requestdetail.Time3 = DateTime.ParseExact(item.NgayChuyenHangShopGui.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        requestdetail.Time4 = DateTime.ParseExact(item.NgayChuyenHangShopNhan.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        if (item.GioChuyenHangShopGuiDen != "" && item.GioChuyenHangShopGuiDen != null && item.PhutChuyenHangShopGuiDen != "" && item.PhutChuyenHangShopGuiDen != null)
                                        {
                                            requestdetail.EmpCode1 = Convert.ToString(item.GioChuyenHangShopGuiDen) + ':' + Convert.ToString(item.PhutChuyenHangShopGuiDen);
                                        }
                                        if (item.GioChuyenHangShopNhanDen != "" && item.GioChuyenHangShopNhanDen != null && item.PhutChuyenHangShopNhanDen != "" && item.PhutChuyenHangShopNhanDen != null)
                                        {
                                            requestdetail.EmpCode3 = Convert.ToString(item.GioChuyenHangShopNhanDen) + ':' + Convert.ToString(item.PhutChuyenHangShopNhanDen);
                                        }
                                        //requestdetail.Time3 = Convert.ToDateTime(item.NgayChuyenHangShopGui);
                                        //requestdetail.Time4 = Convert.ToDateTime(item.NgayChuyenHangShopNhan);
                                        //▲ ChuongNT3 - 13/03/2019 - claim nvc 

                                        string shop_cu = requestdetail.ShopCode2;
                                        string shop_moi = item.Shops;
                                        if (shop_cu != shop_moi)
                                        {
                                            requestdetail.Quantity1 = 1;
                                            requestdetail.ShopCode2 = shop_moi;
                                        }
                                    }

                                }
                            }
                            if (request.StepNo == 1)
                            {
                                sql.ExecuteCommand("sp_SinhPhieuViphamTruyThuShop_134", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestID", request.Id),
                                            new SqlParameter("@UserName", UserManager.CurrentUser.InsideCode)
                                        });
                            }
                            //▲ Edit - LuanNT44 - 21/03/2019 -- thêm popup
                            #endregion
                        }
                        else if (request.TypeId == 143)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property10 = Convert.ToString(item.Property10);
                                        requestdetail.Property11 = item.SoHoaDon;
                                        requestdetail.Property14 = item.HuongXLNB;
                                        requestdetail.Property15 = item.ThoiGianChuyenHang;
                                        requestdetail.ProductName = item.LyDoKhongNhap;
                                        requestdetail.Note = item.Note;
                                        string shop_cu = requestdetail.ShopCode2;
                                        string shop_moi = item.Shops;
                                        if (shop_cu != shop_moi)
                                        {
                                            requestdetail.Quantity1 = 1;
                                            requestdetail.ShopCode2 = shop_moi;
                                        }
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 135)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 64)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 145)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Property4 = item.HXLTrangThaiPhieu;
                                        requestdetail.Property5 = item.NoiDungHXLKhac;
                                        requestdetail.Property7 = item.HXLKeyTrongKho;
                                        requestdetail.Property6 = item.PhanLoai;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 150)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        //requestdetail.EmpCode = item.EmpCode;  // Add-LuanNT44-20/11/2019-Loại 150- Lưu thêm cột (YC 22451)
                                        requestdetail.Quantity2 = item.SoLuong; // LuanNT44-12/09/2019-Loại 150-Thêm cột
                                        //▼  Add-LuanNT44-20/11/2019-Loại 150- Lưu thêm cột (YC 22451)
                                        if (item.EmpCode == "Khác...")
                                        {
                                            requestdetail.EmpCode = null;
                                            requestdetail.Property5 = "Khác...";
                                        }
                                        else
                                        {
                                            requestdetail.EmpCode = item.EmpCode;
                                            requestdetail.Property5 = null;
                                        }
                                        #region Time1
                                        if (item.ThoiHanXuLy == null)
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                        else
                                        {
                                            string ThoiHanXuLy = item.ThoiHanXuLy;
                                            string[] timeArr = ThoiHanXuLy.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time1 = ThoiHanXuLy.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time1 = null;
                                            }
                                        }
                                        #endregion
                                        requestdetail.Property6 = item.GhiChu;
                                        requestdetail.Property7 = item.HangNhaTraGop;
                                        //▲ Add-LuanNT44-20/11/2019-Loại 150- Lưu thêm cột (YC 22451)
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 152)
                        {
                            #region Áo đồng phục phòng nhân sự và đào tạo
                            //'▼(#006)Add===================================    
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.ToShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();

                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityUpdate = request.StepNo != 4 ? item.Quantity1 : item.QuantityAvaiable;
                                int thanhtien = item.Sum;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                    int quantityNewest = requestDetail.QuantityAvaiable == null || request.StepNo != 4
                                                    ? requestDetail.Quantity1.GetValueOrDefault(0)
                                                    : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                    int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        //'▼(#005)Update=================================== 
                                        ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == 4
                                                                               && x.Month == request.TimeCreate.Month
                                                                               && x.Year == request.TimeCreate.Year);
                                        //'▲(#005)Update===================================
                                        if (request.StepNo == 4)
                                        {
                                            if (itemUsed == null)
                                            {
                                                itemUsed = new ItemUsedTmp();
                                                itemUsed.GroupId = 4;
                                                itemUsed.GroupValue = moneyDifference;
                                                itemUsed.Month = request.TimeCreate.Month;
                                                itemUsed.Year = request.TimeCreate.Year;
                                                itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                itemUsed.RequestId = request.Id;
                                                itemUsed.Status = Key.Status.Available;
                                                itemUseds.Add(itemUsed);
                                            }
                                            else
                                            {
                                                itemUsed.GroupValue += moneyDifference;
                                            }
                                            db.ItemUsedTmps.Add(itemUsed);
                                        }

                                    }
                                    requestDetail.QuantityAvaiable = request.StepNo != 4 ? item.Quantity : quantityUpdate;
                                    requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                    requestDetail.Quantity1 = item.Quantity1;
                                    requestDetail.Quantity3 = item.Quantity3;
                                    //▼Add - TrungNC3 - 10/10/2017 - Thêm Nhóm SP & Hình thức xuất
                                    string Property6 = string.Empty;
                                    if (requestDetail.Property6 == null || requestDetail.Property6 == "")
                                    {
                                        if (item.HTX == item.HinhThucXuat)
                                        {
                                            Property6 = null;
                                        }
                                        else
                                        {
                                            Property6 = item.HTX + "->" + item.HinhThucXuat;
                                        }
                                    }
                                    else
                                    {
                                        if (item.HinhThucXuat == requestDetail.Property6)
                                        {
                                            Property6 = requestDetail.Property7;
                                        }
                                        else
                                        {
                                            if (requestDetail.Property7 == null || requestDetail.Property7 == "")
                                            {
                                                Property6 = requestDetail.Property6 + "->" + item.HinhThucXuat;
                                            }
                                            else
                                            {
                                                Property6 = requestDetail.Property7 + "->" + item.HinhThucXuat;
                                            }
                                        }
                                    }
                                    requestDetail.Property7 = Property6;
                                    requestDetail.Property6 = item.HinhThucXuat;
                                }
                            }
                            #endregion
                        }
                        //===========================Thêm xử lý cho nut chuyển bước  - TRUNGNC3 - 21.10.2016 - Loại 155
                        else if (request.TypeId == 155)
                        {
                            #region Đồ dùng hc
                            if (permissions.Contains(Permission.Sender)
                                || permissions.Contains(Permission.Admin)
                                || permissions.Contains(Permission.SupperAdmin)
                                || permissions.Contains(Permission.Assigner)
                                || permissions.Contains(Permission.GroupAssigner))
                            {
                                #region update dinh muc
                                ShopDAL shopDal = new ShopDAL();
                                var shopCreate = shopDal.Get(request.FromShop);
                                List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    int quantityUpdate = item.QuantityAvaiable;
                                    int thanhtien = item.Sum;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null && requestDetail.Quantity != null)
                                    {
                                        // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                        int quantityNewest = requestDetail.QuantityAvaiable == null
                                                            ? requestDetail.Quantity.GetValueOrDefault(0)
                                                            : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                        int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                        if (moneyDifference != 0 && shopCreate != null)
                                        {
                                            //'▼(#005)Update=================================== 
                                            //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                            //                                       && x.Month == request.TimeCreate.Month
                                            //                                       && x.Year == request.TimeCreate.Year);
                                            ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                   && x.Month == request.TimeCreate.Month
                                                                                   && x.Year == request.TimeCreate.Year);
                                            //'▲(#005)Update===================================
                                            if (request.StepNo >= 4)
                                            {
                                                if (itemUsed == null)
                                                {
                                                    itemUsed = new ItemUsedTmp();
                                                    itemUsed.GroupId = item.GroupId;
                                                    itemUsed.GroupValue = moneyDifference;
                                                    itemUsed.Month = request.TimeCreate.Month;
                                                    itemUsed.Year = request.TimeCreate.Year;
                                                    itemUsed.ShopCodeB1 = shopCreate.WarehouseCodeB1;
                                                    itemUsed.RequestId = request.Id;
                                                    itemUsed.Status = Key.Status.Available;
                                                    itemUseds.Add(itemUsed);
                                                }
                                                else
                                                {
                                                    itemUsed.GroupValue += moneyDifference;
                                                }
                                                //db.ItemUsedTmps.Add(itemUsed);
                                            }
                                        }
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                        requestDetail.Quantity1 = item.Quantity1;
                                        //▼ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                        string Property2 = string.Empty;
                                        if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                        {
                                            if (item.HTX == item.HinhThucXuat)
                                            {
                                                Property2 = null;
                                            }
                                            else
                                            {
                                                Property2 = item.HTX + "->" + item.HinhThucXuat;
                                            }
                                        }
                                        else
                                        {
                                            if (item.HinhThucXuat == requestDetail.Property1)
                                            {
                                                Property2 = requestDetail.Property2;
                                            }
                                            else
                                            {
                                                if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                                {
                                                    Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                                }
                                                else
                                                {
                                                    Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                                }
                                            }
                                        }
                                        requestDetail.Property2 = Property2;
                                        requestDetail.Property1 = item.HinhThucXuat;
                                        //▲ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                    }
                                }
                                if (itemUseds.Count > 0)
                                {
                                    db.ItemUsedTmps.AddRange(itemUseds);
                                }
                                #endregion
                            }
                            #endregion
                        }
                        else if (request.TypeId == 45)
                        {
                            //▼ Add - NgoanHT - 04/12/2017 - Loại: 45 - Thêm Add BBBG
                            if ((request.StepNo == 1 || request.StepNo == 2) && Convert.ToString(form["Approved_HuongXL_45"]) == "1")
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request.Id;
                                converstation.Message = "Hệ thống auto sinh mã BBBG do shop được định nghĩa nội thành: " + request.Id.ToString();
                                converstation.Sender = "-1";
                                converstation.CreateBy = "-1";
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 2;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Comment;
                                db.Conversations.Add(converstation);
                            }
                            //▲ Add - NgoanHT - 04/12/2017 - Loại: 45 - Thêm Add BBBG
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                string shopOrOffice = objects[0].ShopCode;
                                if (shopOrOffice != "" && shopOrOffice != null)
                                {
                                    var checkShop = insDB.Warehouses.FirstOrDefault(x => x.WarehouseCode == shopOrOffice);
                                    if (checkShop != null)
                                        request.FromShop = shopOrOffice;
                                    else
                                        request.FromOffice = shopOrOffice;
                                }
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Quantity3 = item.ParentIdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Quantity4 = item.IdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property11 = item.Code; //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 
                                        requestdetail.Property12 = item.Property12; // ChuongNT3 - 13/03/2018 - IT SP - xử lý thêm cột
                                        requestdetail.Note = item.Note;
                                        requestdetail.SaleCode = item.SaleCode; // xác nhận hết hạn bh
                                        requestdetail.ShopCode = item.ShopCode;
                                    }
                                    else
                                    {
                                        requestdetail = new RequestDetail();
                                        requestdetail.RequestId = request.Id;
                                        requestdetail.Status = Key.Status.Available;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Quantity3 = item.ParentIdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Quantity4 = item.IdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property11 = item.Code; //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 
                                        requestdetail.Property12 = item.Property12;// ChuongNT3 - 13/03/2018 - IT SP - xử lý thêm cột
                                        requestdetail.Note = item.Note;
                                        requestdetail.SaleCode = item.SaleCode; // xác nhận hết hạn bh
                                        requestdetail.ShopCode = item.ShopCode;
                                        db.RequestDetails.Add(requestdetail);
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 164)
                        {
                            if (request.StepNo == 1 && form["DuyetAll"].ToString() == "1")
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request.Id;
                                converstation.Message = "Hệ thống auto chuyển bước calllog bảo hành bóng đèn vì số lượng truy thu lớn hơn 0";
                                converstation.Sender = "-1";
                                converstation.CreateBy = "-1";
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 1;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Comment;
                                db.Conversations.Add(converstation);
                            }
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {

                                        requestdetail.Quantity1 = item.Quantity1 != null ? item.Quantity1 : null;
                                        requestdetail.Quantity2 = item.Quantity2 != null ? item.Quantity2 : null;
                                        requestdetail.Quantity3 = item.Quantity3 != null ? item.Quantity3 : null;
                                        requestdetail.Quantity4 = item.Quantity4 != null ? item.Quantity4 : null;
                                        requestdetail.Quantity5 = item.Quantity5 != null ? item.Quantity5 : null;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Note = item.Note;
                                        //▼ Edit - TrungNC3 - 25/08/2017 - Sửa Bỏ điều kiện dư===============
                                        //requestdetail.Approved = item.Approved;
                                        //▲ Edit=======================================
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 163)
                        {
                            if (request.StepNo == 2 && Convert.ToString(form["Approved_HuongXL_164"]) == "1")
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request.Id;
                                converstation.Message = "Hệ thống auto sinh mã BBBG do shop được định nghĩa nội thành: " + request.Id.ToString();
                                converstation.Sender = "-1";
                                converstation.CreateBy = "-1";
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 2;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Comment;
                                db.Conversations.Add(converstation);
                            }
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        if (request.StepNo < 3)
                                        {
                                            requestdetail.Property1 = item.Quantity1;
                                            requestdetail.Property2 = item.Quantity2;
                                        }
                                        else
                                        {
                                            requestdetail.Property1 = item.Property1;
                                            requestdetail.Property2 = item.Property2;
                                        }
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 19 && request.StepNo == 1)
                        {
                            request.TimeGoliveExpected = null;
                            // TuanNA89 - 03/03/2020 - cho phép chức danh Điều phối hãng cập nhật HXL KH
                            SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                            };
                            var result_19 = sql.ExecuteCommand("Check_LoaiKN_Change2Step_Type19", CommandType.StoredProcedure, param);
                            if (result_19 != null && result_19.Rows.Count > 0)
                            {
                                request.StepNo += 1;
                            }
                        }
                        else if (request.TypeId == 165)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    var cfReplaceProduct = objects[0].cfReceiveSPMoi;// Edit - NghiaTV5 - 8/12/2017 - 165 – Xác Nhận 
                                    db.RequestDetails
                                        .Where(x => x.RequestId == request.Id
                                            && x.Status == Key.Status.Available)
                                        .ToList().ForEach(x => x.Property3 = cfReplaceProduct);
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 166)
                        {
                            var TraoThuong = Convert.ToString(form["TraoThuongId"]);
                            var IMEI = Convert.ToString(form["Emei166"]);
                            var SoTienThue = Convert.ToString(form["Thue166"]);

                            RequestDetail requestdetail = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            }
                            if (requestdetail != null)
                            {
                                requestdetail.Property5 = TraoThuong;
                                requestdetail.Property8 = IMEI;
                                if (SoTienThue != null && SoTienThue != "")
                                {
                                    requestdetail.Money1 = (float)Convert.ToDouble(SoTienThue);
                                }
                            }
                            string CheckImagesApproved = Convert.ToString(form["CheckApprovedImages_166"]);
                            if (CheckImagesApproved != "" /* && (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner)) */)
                            {
                                SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@ListColumn", CheckImagesApproved) ,
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode) ,
                                new SqlParameter("@TraoThuong", TraoThuong)
                            };
                                sql.ExecuteWithoutResult("PromotionsImages_UpdateApproved", CommandType.StoredProcedure, param);
                            }
                        }
                        else if (request.TypeId == 168)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Note = item.Note;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 169)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    { }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 170)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    { }
                                }
                            }
                            #endregion
                        }
                        //▼ Add - TrungNC3 - 2017.09.06 - Up thực loại chuyển shop khác vùng
                        else if (request.TypeId == 173)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.ShopCode2 = item.JobtitleNew;
                                        string timeF = item.JobtitleDateStart;
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeF.EParseToDateTime(format);
                                        }
                                        if (request.StepNo == 1 && request.TypeId == 173)
                                        {
                                            requestdetail.Property10 = UserManager.CurrentUser.InsideCode;
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - =======================================
                        //▼ Add - NghiaTV5 - 20/10/2017 - chuyển bước loại 179
                        else if (request.TypeId == 179) //  Edit - VietMXH - 27/10/2017 - Fix else
                        {
                            #region Automatic //  Edit - VietMXH - 27/10/2017 - Fix else
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    //▼ Add - NghiaTV5 - 25/10/2017 - update Approved UpDateStepNoCallog_CTKM_179 
                                    string Approved = item.Approved;
                                    DataTable table = sql.ExecuteCommand("UpDateStepNoCallog_CTKM_179", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                            new SqlParameter("@Callog_ID",id) ,
                                            new SqlParameter("@Approved",Approved)
                                        });
                                    //▲ Add - NghiaTV5 - 25/10/2017 - update Approved UpDateStepNoCallog_CTKM_179
                                }
                            }
                            #endregion //  Edit - VietMXH - 27/10/2017 - Fix else
                        }
                        //▲ Add - NghiaTV5 - 20/10/2017 - chuyển bước loại 179
                        //▼ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu
                        else if (request.TypeId == 181)
                        {
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity5 = item.XacNhan;
                                    }
                                }
                            }
                        }
                        //▲ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu

                        else if (request.TypeId == 183)
                        {
                            #region MyRegion
                            #endregion
                        }

                        //▼ Add - PhiN - 11/12/2017 - thêm loại 186
                        else if (request.TypeId == 186)
                        {

                        }

                        //▼ Add - NghiaTV5 - 08/01/2018 - 188 - bổ sung 
                        else if (request.TypeId == 188)// loại con của 165
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                if (request.StepNo == 1)
                                {

                                    var cfReplaceProduct = objects[0].cfReceiveSPMoi;
                                    if (cfReplaceProduct == "Duyệt")
                                    {
                                        db.RequestDetails
                                        .Where(x => x.RequestId == request.Id
                                            && x.Status == Key.Status.Available)
                                        .ToList().ForEach(x => x.Property3 = cfReplaceProduct);
                                    }
                                    else if (cfReplaceProduct == "Không duyệt")
                                    {
                                        db.RequestDetails
                                       .Where(x => x.RequestId == request.Id
                                           && x.Status == Key.Status.Available)
                                       .ToList().ForEach(x => x.Property3 = cfReplaceProduct);
                                        request.Status = 4;
                                        db.SaveChanges();
                                    }
                                }
                                else
                                {
                                    var cfReplaceProduct45 = objects[0].cfReceiveSPMoi45;
                                    db.RequestDetails
                                        .Where(x => x.RequestId == request.Id
                                            && x.Status == Key.Status.Available)
                                        .ToList().ForEach(x => x.Property4 = cfReplaceProduct45);
                                }

                            }
                            #endregion
                        }
                        //▲ Add - NghiaTV5 - 08/01/2018 - 188 - bổ sung 

                        //▼ Add - NgoanHT - 20/03/2018 - Loại: 189 - Thêm loại 189
                        else if (request.TypeId == 189)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property2 = item.ThongTinThayDoi;
                                        requestdetail.Quantity = item.MediaDanhGiaLayout;
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - NgoanHT - 20/03/2018 - Loại: 189 - Thêm loại 189

                        //▲ Add - PhiN - 11/12/2017 - thêm loại 190-ChangeStep
                        else if (request.TypeId == 190)
                        {

                        }
                        //▼ Add - NgoanHT - 29/01/2018 - Loại: 191,194,195 - Thêm Lưu thây đổi "Thông tin thây đổi"
                        else if (request.TypeId == 191)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.ThongTinThayDoi;
                                    }
                                }
                                //▼ Edit - ThuongNM2 - 29/10/2018 - Đẩy hình qua Inside
                                if (request.StepNo == 3)
                                {
                                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                                    sql.ExecuteWithoutResult("sp_Inside_ReturnLinkImage", CommandType.StoredProcedure, param);
                                }
                                //▲ Edit - ThuongNM2 - 29/10/2018 - Đẩy hình qua Inside
                            }
                            #endregion
                        }
                        //===========================Thêm xử lý cho nut chuyển bước  - TRUNGNC3 - 21.10.2016 - Loại 155
                        else if (request.TypeId == 194)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.ThongTinThayDoi;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 195)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.ThongTinThayDoi;
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - NgoanHT - 29/01/2018 - Loại: 191,194,195 - Thêm Lưu thây đổi "Thông tin thây đổi"
                        //▼   Edit - ChuongNT3 - 06/03/2018 - Truy thu số lượng MDNH loại 197
                        //else if (request.TypeId == 197 && request.StepNo == 1)
                        //{
                        //    foreach (var item in objects)
                        //    {
                        //        int id = item.Id;
                        //        var requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        //        requestDetail.Quantity2 = item.SoLuongThucNhan;
                        //        requestDetail.Money2 = item.ThanhTienTruyThu;
                        //        requestDetail.ShopCode = item.KhoXuat;
                        //        requestDetail.Money1 = item.GiaBan;
                        //        requestDetail.ProductCode = item.MaSanPham;
                        //        requestDetail.ProductName = item.TenSanPham;
                        //        requestDetail.Property1 = item.SoYCDC;
                        //        requestDetail.Quantity1 = item.SoLuongNhapKho;
                        //        requestDetail.ShopCode2 = item.KhoNhap;
                        //        requestDetail.Quantity3 = item.ChenhLech;
                        //    }
                        //}
                        //▲  Edit - ChuongNT3 - 06/03/2018 - Truy thu số lượng MDNH loại 197
                        //▼ Add - NghiaTV5 -31/01/2018 - Bảo Hành Máy Củ 198
                        else if (request.TypeId == 198)
                        {

                            #region Automatic
                            if (request.StepNo == 1)
                            {
                                var conversationAdd = new Conversation();
                                if (objects != null && objects.ToString() != "[]")
                                {
                                    foreach (var item in objects)
                                    {
                                        int id = item.Id;
                                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);

                                        if (requestdetail != null)
                                        {
                                            if (item.GiaiTrinh != null && item.GiaiTrinh != "")
                                            {
                                                conversationAdd.RequestId = request.Id;
                                                conversationAdd.RequestDetailId = Convert.ToInt64(requestdetail.Id);
                                                conversationAdd.Sender = sender;
                                                conversationAdd.Message = item.GiaiTrinh;
                                                conversationAdd.Status = Key.Status.Available;
                                                conversationAdd.TimeCreate = DateTime.Now;
                                                conversationAdd.Type = 198;
                                                conversationAdd.StepNo = request.StepNo;
                                                db.Conversations.Add(conversationAdd);
                                            }

                                        }
                                    }
                                }

                            }
                            else if (request.StepNo == 2)
                            {
                                if (objects != null && objects.ToString() != "[]")
                                {
                                    foreach (var item in objects)
                                    {
                                        int id = item.Id;
                                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        if (requestdetail != null)
                                        {
                                            requestdetail.Approved = item.Duyet;
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - NghiaTV5 -31/01/2018 - Bảo Hành Máy Củ 198
                        //▼ Add - LuanNT44 -22/03/2018 - Loại 201 - Kiểm hàng online
                        else if (request.TypeId == 201)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    if (item.RequestDId != null)
                                    {
                                        int id = item.RequestDId;
                                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        if (requestdetail != null)
                                        {
                                            requestdetail.SaleCode = item.NguoiKiemKe;
                                            requestdetail.Time1 = DateTime.ParseExact(item.NgayKiemKe.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                            requestdetail.Property1 = item.ModelKiem;
                                            requestdetail.Quantity = item.SoLuongModelKiem;
                                        }
                                    }
                                }

                            }
                            #endregion

                        }
                        //▲ Add - LuanNT44 -22/03/2018 - Loại 201 - Kiểm hàng online
                        //▼ Add - LuanNT44 -14/03/2018 - Loại 204 - Chốt CR qua Calllog
                        else if (request.TypeId == 204)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity1 = item.Uutien;

                                        if (request.StepNo == 2)
                                        {
                                            requestdetail.Time1 = DateTime.ParseExact(item.NgayChotYC.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                            requestdetail.Time2 = DateTime.ParseExact(item.NgayThucTeUAT.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                            requestdetail.Time3 = DateTime.ParseExact(item.NgayThucTeGoLive.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                            requestdetail.Property7 = item.KPI;
                                        }
                                    }
                                }
                            }
                            #endregion

                        }
                        //▲ Add - LuanNT44 -14/03/2018 - Loại 204 - Chốt CR qua Calllog
                        else if (request.TypeId == 205)
                        {
                            #region Automatic
                            //▼ Add - TuanNA89 - 28/07/2020 - Code lại theo rule mới
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "{}")
                            {

                                List<RequestDetail> details_205 = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    details_205 = db.RequestDetails.Where(x => x.RequestId == request.Id && x.Status == 1).ToList();
                                }

                                if (details_205 != null && details_205.Count > 0)
                                {
                                    if (request.StepNo != 5)
                                    {
                                        foreach (var item in objects)
                                        {
                                            long detailId = item.RdID;
                                            RequestDetail detail_205 = null;
                                            detail_205 = details_205.FirstOrDefault(x => x.Id == detailId && x.Status == 1);

                                            if (detail_205 != null)
                                            {
                                                if (request.StepNo == 1)
                                                {
                                                    detail_205.Property5 = item.LinkCamera;
                                                }
                                                else if (request.StepNo == 2)
                                                {
                                                    detail_205.Property12 = item.PhanLoaiClaim;
                                                    detail_205.Quantity1 = item.checkDieuKien;
                                                }
                                                else if (request.StepNo == 4)
                                                {
                                                    detail_205.Numeric1 = item.SoTienMienThuong;
                                                    detail_205.Numeric2 = item.SoTienClaimDuoc;
                                                    detail_205.Quantity2 = item.checkDieuKien;
                                                    detail_205.Quantity3 = item.checkDaNhanHS;
                                                }
                                            }
                                        }
                                    }
                                    else if (request.StepNo == 5)
                                    {
                                        int HXL_205 = 0;
                                        HXL_205 = int.TryParse(Convert.ToString(objects[0].HuongXuLy), out HXL_205) ? HXL_205 : 0;
                                        details_205.Select(x => x.Quantity4 = HXL_205);
                                        if (HXL_205 == 1 || request.ErrorCode == "2")
                                        {
                                            Conversation cv_205_B5 = new Conversation();
                                            cv_205_B5.RequestId = request.Id;
                                            cv_205_B5.StepNo = request.StepNo;
                                            cv_205_B5.Sender = UserManager.CurrentUser.InsideCode;
                                            cv_205_B5.Message = "LogB5:" + JsonConvert.SerializeObject(objects);
                                            cv_205_B5.CreateBy = UserManager.CurrentUser.InsideCode;
                                            cv_205_B5.Type = 0;
                                            cv_205_B5.Status = Key.Status.Available;
                                            cv_205_B5.TimeCreate = DateTime.Now;
                                            db.Conversations.Add(cv_205_B5);
                                            //var obj_DataTruyThu = JsonConvert.DeserializeObject(objects);

                                            var listNVTruyThu = new List<NhanVienTruyThu_205>();
                                            listNVTruyThu = JsonConvert.DeserializeObject<List<NhanVienTruyThu_205>>(JsonConvert.SerializeObject(objects));
                                            XConvert convert = new XConvert();
                                            var xml = convert.ToStringXML_WithoutNamespaces(listNVTruyThu);

                                            DataTable table205_B5 = sql.ExecuteCommand("CallLogClaimNhaBaoHiem_Type205_TaoCLGiuLuong", CommandType.StoredProcedure, new SqlParameter[] {
                                                new SqlParameter("@RequestId_Cha", request.Id),
                                                new SqlParameter("@Xml_Details", xml),
                                                new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                            });
                                            if (table205_B5 == null || table205_B5.Rows.Count == 0)
                                            {
                                                TempData["Message"] = "Lỗi xử lý CallLog";
                                                return RedirectToAction("Details", new { Id = request.Id });
                                            }
                                            else
                                            {
                                                var result_205 = table205_B5.Rows[0]["Result"].ToString();
                                                var msg_205 = table205_B5.Rows[0]["Message"].ToString();
                                                switch (result_205)
                                                {
                                                    case "0":
                                                        TempData["Message"] = msg_205;
                                                        return RedirectToAction("Details", new { Id = request.Id });
                                                }
                                            }
                                        }
                                    }
                                }
                                db.SaveChanges();


                                SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestId",request.Id),
                                                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                                };
                                DataTable table205 = sql.ExecuteCommand("CallLogClaimNhaBaoHiem_Type205_XuLy", CommandType.StoredProcedure, param);
                                if (table205 == null || table205.Rows.Count == 0)
                                {
                                    TempData["Message"] = "Lỗi xử lý CallLog";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                                else
                                {
                                    var result_205 = table205.Rows[0]["Result"].ToString();
                                    var msg_205 = table205.Rows[0]["Message"].ToString();
                                    switch (result_205)
                                    {
                                        case "0":
                                            TempData["Message"] = msg_205;
                                            return RedirectToAction("Details", new { Id = request.Id });
                                        case "2":
                                            TempData["Message"] = msg_205;
                                            return RedirectToAction("Index", "Home");
                                    }
                                }
                            }
                            //▲ Add - TuanNA89 - 28/07/2020 - Code lại theo rule mới
                            #endregion
                        }
                        //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        else if (request.TypeId == 214)
                        {
                            string message214 = "";
                            #region Automatic
                            var stepNo214 = request.StepNo;

                            if (objects.ToString() != "[]")
                            {
                                DateTime now214 = DateTime.Now;
                                RequestDetail requestdetail = new RequestDetail();
                                int id = 0;
                                foreach (var item in objects)
                                {
                                    id = item.Id;
                                    if (id > 0)
                                    {
                                        requestdetail = new RequestDetail();
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestdetail != null)
                                        {
                                            if (stepNo214 == 1)
                                            {
                                                requestdetail.Property3 = item.SoLuong;
                                                requestdetail.Property4 = item.SoKien;
                                                requestdetail.Property5 = item.TrongLuong;
                                                requestdetail.Property6 = item.GhiChu;
                                            }
                                            else if (stepNo214 == 2)
                                            {
                                                // xử lý Bước 2
                                                requestdetail.Property8 = item.KhoDaNhanHangLoi;

                                                // Nếu có check kho đã chuyển hàng mới => cập nhật
                                                if (item.KhoDaChuyenHangMoi == "1")
                                                {
                                                    requestdetail.Property9 = item.KhoDaChuyenHangMoi;
                                                    requestdetail.Time1 = now214;
                                                }
                                            }
                                            else if (stepNo214 == 3)
                                            {
                                                // Trường hợp chưa check "Kho đã chuyển hàng mới" => cập nhật
                                                if (requestdetail.Property9 != "1")
                                                {
                                                    requestdetail.Property9 = item.KhoDaChuyenHangMoi;
                                                    requestdetail.Time1 = now214;
                                                }
                                            }
                                            else if (stepNo214 == 4)
                                            {
                                                requestdetail.Property7 = item.ShopDaNhanHangMoi;
                                            }
                                        }
                                    }
                                }
                                db.SaveChanges();
                            }
                            #endregion
                        }
                        //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        //▼ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                        else if (request.TypeId == 217)
                        {
                            #region Automatic
                            #region == Update data detail calllog ==
                            var dataUpdate = Convert.ToString(form["DataUpdate"]);
                            var objectsUpdate = JsonConvert.DeserializeObject<dynamic>(dataUpdate);

                            if (objectsUpdate != null && objectsUpdate.ToString() != "[]")
                            {
                                foreach (var item in objectsUpdate)
                                {
                                    long detailId = item.requestDetailId;
                                    RequestDetail detail_217 = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        detail_217 = db.RequestDetails.FirstOrDefault(x => x.Id == detailId && x.Status == 1);
                                    }
                                    if (detail_217 != null)
                                    {
                                        string log_OldData = "";
                                        if (item.HoTenKH != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property2: Old Data (", detail_217.Property2, ") => New Data (", item.HoTenKH, ")", Environment.NewLine);
                                            detail_217.Property2 = item.HoTenKH;
                                        }
                                        if (item.CMND != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property3: Old Data (", detail_217.Property3, ") => New Data (", item.CMND, ")", Environment.NewLine);
                                            detail_217.Property3 = item.CMND;
                                        }
                                        if (item.SDT != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property4: Old Data (", detail_217.Property4, ") => New Data (", item.SDT, ")", Environment.NewLine);
                                            detail_217.Property4 = item.SDT;
                                        }
                                        if (item.SoSO != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property5: Old Data (", detail_217.Property5, ") => New Data (", item.SoSO, ")", Environment.NewLine);
                                            detail_217.Property5 = item.SoSO;
                                        }
                                        if (item.SoTienHoanTra != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property6: Old Data (", detail_217.Property6, ") => New Data (", item.SoTienHoanTra, ")", Environment.NewLine);
                                            detail_217.Property6 = item.SoTienHoanTra;
                                        }
                                        if (item.ShopKH != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property7: Old Data (", detail_217.Property7, ") => New Data (", item.ShopKH, ")", Environment.NewLine);
                                            detail_217.Property7 = item.ShopKH;
                                        }
                                        db.SaveChanges();
                                        if (log_OldData != "")
                                        {
                                            Conversation conv_log = new Conversation();
                                            conv_log.RequestId = request.Id;
                                            conv_log.StepNo = request.StepNo;
                                            conv_log.Sender = UserManager.CurrentUser.InsideCode;
                                            conv_log.Message = log_OldData;
                                            conv_log.CreateBy = UserManager.CurrentUser.InsideCode;
                                            conv_log.Type = Key.Conversation.Infomation;
                                            conv_log.Status = Key.Status.Unavailable;
                                            conv_log.TimeCreate = DateTime.Now;
                                            db.Conversations.Add(conv_log);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                            #endregion
                            #endregion
                        }
                        //▲ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                        //▼ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                        else if (request.TypeId == 218)
                        {
                            #region Automatic
                            if (request.StepNo == 1 && request.Status < 4)
                            {
                                if (objects.ToString() != "[]")
                                {
                                    int id = 0;
                                    long DetailId = 0;
                                    string Msg_Update = "";
                                    List<RequestDetail> requestDetails = new List<RequestDetail>();
                                    foreach (var item in objects)
                                    {
                                        id = item.Id;
                                        DetailId = item.Id;
                                        if (id > 0)
                                        {
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                            {
                                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                            }))
                                            {
                                                requestDetails = (from a in db.RequestDetails
                                                                  where a.RequestId == request.Id && a.Status == 1
                                                                  select a).ToList();
                                            }
                                            if (requestDetails != null && requestDetails.Count() > 0)
                                            {
                                                foreach (var detail in requestDetails)
                                                {
                                                    Msg_Update = "";
                                                    if (DetailId == detail.Id)
                                                    {
                                                        if (item.ItemCode != null && detail.ProductCode != item.ItemCode.ToString())
                                                        {
                                                            detail.ProductCode = item.ItemCode;
                                                            Msg_Update += " Cập nhật ProductCode cũ: '" + detail.ProductCode + "' => : '" + item.ItemCode.ToString() + "'";
                                                        }
                                                        if (item.ItemName != null && detail.ProductName != item.ItemName.ToString())
                                                        {
                                                            detail.ProductName = item.ItemName;
                                                            if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                            Msg_Update += "- Cập nhật ProductName cũ: " + detail.ProductName + "' => : '" + item.ItemName.ToString() + "'";
                                                        }
                                                        if (item.Imei != null && detail.Property1 != item.Imei.ToString())
                                                        {
                                                            detail.Property1 = item.Imei;
                                                            if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                            Msg_Update += "- Cập nhật Property1(Imei) cũ: " + detail.Property1 + "' => : '" + item.Imei.ToString() + "'";
                                                        }
                                                        if (item.LyDo != null && detail.Property3 != item.LyDo.ToString())
                                                        {
                                                            detail.Property3 = item.LyDo;
                                                            if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                            Msg_Update += "- Cập nhật Property3(Lý do) cũ: " + detail.Property3 + "' => : '" + item.LyDo.ToString() + "'";
                                                        }

                                                        if (item.SoLuong != null)
                                                        {
                                                            int out_SL = 0;
                                                            out_SL = int.TryParse(item.SoLuong.ToString(), out out_SL) ? out_SL : 0;
                                                            if (detail.Quantity != out_SL)
                                                            {
                                                                detail.Quantity = out_SL;
                                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                                Msg_Update += "- Cập nhật Quantity(Số lượng) cũ: " + detail.Quantity + "' => : '" + out_SL.ToString();
                                                            }
                                                        }
                                                        detail.Approved = item.TrangThaiDuyet;
                                                        detail.Time1 = DateTime.Now;
                                                        db.SaveChanges();

                                                        if (Msg_Update != "")
                                                        {
                                                            Conversation ConvUpdate_218 = new Conversation();
                                                            ConvUpdate_218.RequestId = request.Id;
                                                            ConvUpdate_218.RequestDetailId = detail.Id;
                                                            ConvUpdate_218.Message = Msg_Update;
                                                            ConvUpdate_218.StepNo = request.StepNo;
                                                            ConvUpdate_218.TimeCreate = DateTime.Now;
                                                            ConvUpdate_218.Type = Key.Conversation.System;
                                                            ConvUpdate_218.Status = 1;
                                                            ConvUpdate_218.Sender = UserManager.CurrentUser.InsideCode;
                                                            ConvUpdate_218.CreateBy = UserManager.CurrentUser.InsideCode;
                                                            db.Conversations.Add(ConvUpdate_218);

                                                            db.SaveChanges();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    db.SaveChanges();
                                    //Lấy toàn bộ record trong FileAttach
                                    List<RequestDetail> DetailsBiTuChoi = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        //Lấy các Record bị từ chối
                                        DetailsBiTuChoi = (from a in requestDetails
                                                           where a.Approved == false
                                                           select a).ToList();
                                    }
                                    //Nếu toàn bộ hình đều bị từ chối ==> Hoàn tất
                                    if (DetailsBiTuChoi != null && DetailsBiTuChoi.Count() == requestDetails.Count())
                                    {
                                        #region request.Status != Key.StatusRequest.Complete
                                        request.Status = Key.StatusRequest.Complete;
                                        request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                                        request.TimeClose = DateTime.Now;
                                        request.StepStatus = Key.StatusRequest.Reply;

                                        if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin) || permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                                        {
                                            request.Assigner = sender;
                                        }

                                        if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                        {
                                            request.TimeLastAdminUpdate = DateTime.Now;
                                            request.LastAdminUpdate = sender;
                                        }
                                        db.SaveChanges();

                                        Conversation conv_218 = new Conversation();
                                        conv_218.RequestId = request.Id;
                                        conv_218.StepNo = request.StepNo;
                                        conv_218.Sender = "-1";
                                        conv_218.Message = "Hệ thống auto hoàn tất calllog do các line thông tin bị từ chối duyệt";
                                        conv_218.CreateBy = "-1";
                                        conv_218.Type = Key.Conversation.System;
                                        conv_218.Status = Key.Status.Available;
                                        conv_218.TimeCreate = DateTime.Now;
                                        db.Conversations.Add(conv_218);
                                        db.SaveChanges();
                                        TempData["Message"] = "Calllog auto hoàn tất do tất cả các dòng đều bị từ chối";
                                        return RedirectToAction("Index", "Home");
                                        #endregion
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                        //▼ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                        else if (request.TypeId == 219)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity3 = item.Duyet;
                                        requestdetail.Quantity4 = item.KhongDuyet;
                                        if (item.SoTK != null && item.SoTK != "")
                                        {
                                            requestdetail.Property7 = item.SoTK;
                                        }
                                        if (item.TenNH != null && item.TenNH != "")
                                        {
                                            requestdetail.Property8 = item.TenNH;
                                        }
                                        if (item.ChiNhanhNH != null && item.ChiNhanhNH != "")
                                        {
                                            requestdetail.Property9 = item.ChiNhanhNH;
                                        }
                                        if (item.NgayTamUng != null && item.NgayTamUng != "")
                                        {
                                            requestdetail.Time2 = DateTime.ParseExact(item.NgayTamUng.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                    }
                                }
                                if (request.StepNo == 1 && objects[0].Duyet == 1)
                                {
                                    SqlParameter[] param_219 = new SqlParameter[] { new SqlParameter("@RequestId", request.Id), new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode) };
                                    sql.ExecuteCommand("sp_SendMailNgayTamUngCSVC_219", CommandType.StoredProcedure, param_219);
                                }
                            }
                            #endregion
                        }
                        //▲ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                        //▼ Add - TuanNA89 - 20/11/2019 - Calllog Hợp đồng trả góp Mirae giải ngân thất bại - Loại 220
                        else if (request.TypeId == 220)
                        {
                            #region Automatic
                            if (objects.ToString() != "[]")
                            {
                                RequestDetail requestdetail = new RequestDetail();
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property7 = item.TinhTrangXuLy.ToString();
                                        db.SaveChanges();
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - TuanNA89 - 20/11/2019 - Calllog Hợp đồng trả góp Mirae giải ngân thất bại - Loại 220
                        else if (request.TypeId == 225)
                        {
                            //▼	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                            #region MyRegion
                            #endregion
                            //▲	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                        }
                        else
                        {
                            #region Automatic
                            if (objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.ItemId = item.ItemId;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Note = item.Note;
                                        //requestdetail.Status = item.Status
                                        requestdetail.Sum = item.Sum;
                                        requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                        requestdetail.EmpCode = item.EmpCode;
                                        requestdetail.Price = item.Price;
                                        //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                        requestdetail.ShopCode = item.ShopCode;
                                        requestdetail.ShopCode2 = item.ShopCode2;
                                        requestdetail.OfficeCode = item.OfficeCode;
                                        requestdetail.CustomerCode = item.CustomerCode;
                                        requestdetail.CustomerName = item.CustomerName;
                                        requestdetail.SaleCode = item.SaleCode;
                                        #region Time1
                                        if (item.Time1 == null)
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time1;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time1 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time2
                                        if (item.Time2 == null)
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time2;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time2 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time3
                                        if (item.Time3 == null)
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time3;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time3 = null;
                                            }
                                        }
                                        #endregion
                                        requestdetail.Money1 = item.Money1;
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Money3 = item.Money3;
                                        requestdetail.Money4 = item.Money4;
                                        requestdetail.ProductCode = item.ProductCode;
                                        requestdetail.ProductName = item.ProductName;
                                        requestdetail.Imei = item.Imei;
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.EmpCode1 = item.EmpCode1;
                                        requestdetail.EmpCode2 = item.EmpCode2;
                                        requestdetail.EmpCode3 = item.EmpCode3;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        requestdetail.Quantity3 = item.Quantity3;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.JobCode1 = item.JobCode1;
                                        requestdetail.JobCode2 = item.JobCode2;

                                    }
                                }
                            }
                            #endregion

                            #region verify target and update via BI
                            if (request.TypeId == 90 && request.StepNo == 1)
                            {
                                db.SaveChanges();
                                var detail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    detail = db.RequestDetails
                                    .Where(x => x.RequestId == request.Id
                                        && x.Status == Key.Status.Available
                                        && x.Money3 == null)
                                    .FirstOrDefault();
                                }

                                if (detail != null)
                                {
                                    TempData["Message"] = "Phải nhập Target tháng ASM nhận";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    db.RequestDetails
                                   .Where(x => x.RequestId == request.Id
                                       && x.Status == Key.Status.Available)
                                   .ToList().ForEach(x => x.Money4 = x.Money3);
                                }
                            }
                            #endregion
                        }
                        #endregion

                        #region UpdateImageChecked
                        if (imageChecked != "")
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id), new SqlParameter("@FileAttachIds", imageChecked) };
                            sql.ExecuteWithoutResult("FileAttach_Update", CommandType.StoredProcedure, param);
                        }
                        #endregion

                        #region UploadImage
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            //Save file content goes here
                            string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database

                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                db.FileAttachs.Add(fileAttach);

                            }
                        }
                        #endregion

                        string message164 = "";
                        if (request.StepNo == 1 && request.TypeId == 164 && form["DuyetAll"].ToString() == "0")
                        {
                            db.SaveChanges();
                            SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User ",UserManager.CurrentUser.InsideCode),
                                                };
                            DataSet table164 = sql.ExecuteCommandDataSet("Requests_UpdateCompleteWhenEqualLamp", CommandType.StoredProcedure, param);
                            if (table164.Tables.Count > 0)
                            {
                                DataRow row = table164.Tables[table164.Tables.Count - 1].Rows[0];
                                message164 = row["Result"].ToString();
                            }
                            TempData["Message"] = message164;

                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                        //▼ Add - NghiaTV5 - 20/10/2017 - chuyển sang pos
                        if (request.StepNo == 1 && request.TypeId == 179 && form["DuyetAll"].ToString() == "1")
                        {
                            SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestId",request.Id),
                                                    new SqlParameter("@Create",UserManager.CurrentUser.InsideCode),
                                                };
                            DataTable table_179 = sql.ExecuteCommand("Calllog_SendPos_CTKM", CommandType.StoredProcedure, param);
                            if (table_179.Rows.Count > 0)
                            {
                                DataRow row = table_179.Rows[0];
                                //message164 = row["Result"].ToString();// Delete - NghiaTV5 - 25/10/2017 - bỏ message164
                                message164 = "Calllog đã được chuyển sang hệ thống POS";
                            }
                            TempData["MessageSuccess"] = message164; //NghiaTV5 - 12 / 10 / 2017 - thêm  MessageSuccess
                        }
                        //▲ Add - NghiaTV5 - 20/10/2017 - chuyển sang pos

                        string message122 = "";
                        if (request.StepNo == 2 && request.TypeId == 122 && form["DuyetAll"].ToString() == "0")
                        {
                            SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User ",UserManager.CurrentUser.InsideCode),
                                                };
                            DataSet table122 = sql.ExecuteCommandDataSet("Requests_UpdateStatusWhenAllApprovedAll", CommandType.StoredProcedure, param);
                            if (table122.Tables.Count > 0)
                            {
                                DataRow row = table122.Tables[table122.Tables.Count - 1].Rows[0];
                                message122 = row["Result1"].ToString();
                            }
                            TempData["Message"] = message122;

                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                        if (request.TypeId == 151 && request.StepNo == 1)
                        {
                            RequestDetail detailUpdatePOS = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            if (detailUpdatePOS != null)
                            {
                                DataTable table = sql.ExecuteCommand("POS_XDCHImeiKhongTonKho_ChangeStep", CommandType.StoredProcedure,
                                    new SqlParameter[] {
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@CallogID", request.Id)
                                });
                                if (table != null && table.Rows[0][0].ToString() == "1")
                                {
                                    TempData["Message"] = "Chuyển bước thành công! </br> Xuất đổi cấu hình imei không tồn kho: </br>" + table.Rows[0][1].ToString();
                                }
                                else if (table != null && table.Rows[0][0].ToString() == "0")
                                {
                                    TempData["Message"] = "Chuyển bước không thành công! </br>" + table.Rows[0][1].ToString();
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                                else
                                {
                                    TempData["Message"] = "Lỗi cập nhật sang POS để sinh chứng từ";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }

                                var noiDungMoTa = db.Conversations.FirstOrDefault(c => c.RequestId == request.Id && c.Type == 1 && c.Status == Key.Status.Available);
                                string messageMoTa = noiDungMoTa.Message + "</br>" + table.Rows[0][1].ToString();
                                noiDungMoTa.Message = messageMoTa;
                                db.SaveChanges();

                            }
                        }
                        if (request.TypeId == 145)
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                            sql.ExecuteWithoutResult("Callog_CallCRMXuLyKey", CommandType.StoredProcedure, param);
                        }
                        //------- Hiền.Đoàn 05.09.2016 Tạo param để kiểm tra điều kiện
                        bool ParamCheck = false;

                        //======== Kiểm tra loại nếu loại 150 Hiền.Đoàn 20.07.2016
                        string message150 = "";
                        if (request.TypeId == 28)
                        {
                            //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                            #region MyRegion
                            if ((request.StepNo == 1 || request.StepNo == 2) && objects[0].TienChenhLech <= 5000 && request.Status != Key.StatusRequest.Complete)
                            {
                                request.Status = Key.StatusRequest.Complete;
                                request.TimeClose = DateTime.Now;
                                request.TimeFinish = DateTime.Now;
                                request.StepStatus = Key.StatusRequest.Reply;
                            }
                            else
                            {
                                #region ===Gán Người xử lý mới===
                                request.Status = Key.StatusRequest.Processing;
                                request.StepNo += 1;
                                request.StepStatus = Key.StatusRequest.Waitting;
                                DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId",request.Id),
                                    new SqlParameter("@StepNo",request.StepNo)
                                });
                                if (table != null && table.Rows.Count > 0)
                                    request.Assigner = table.Rows[0]["Assigner"].ToString();
                                else
                                    request.Assigner = string.Empty;
                                #endregion ===Gán Người xử lý mới===
                            }
                            request.TimeLastUpdate = DateTime.Now;
                            request.UpdateBy = UserManager.CurrentUser.InsideCode;
                            #endregion
                            //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        }
                        else if (request.TypeId == 150 && request.StepNo == 1 && form["CheckDuyet"].ToString() == "1")
                        {
                            SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User ",UserManager.CurrentUser.InsideCode),
                                                };
                            DataTable table150 = sql.ExecuteCommand("Requests_UpdateStatusWhenAllApprovedNot", CommandType.StoredProcedure, param);
                            if (table150.Rows.Count > 0)
                            {
                                DataRow row = table150.Rows[0];
                                message150 = row["Result"].ToString();
                            }

                        }
                        else if (request.TypeId == 154)
                        {
                            #region MyRegion
                            if (request.FromForm.Contains("Ver2") && request.StepNo == 1 && request.Status < 4)
                            {
                                if (l__TypeId_154__Is_DuyetNVC == true) // Duyệt NVC => Chuyển bước 2 - NVC
                                {
                                    request.Status = Key.StatusRequest.Processing;
                                    request.StepNo = 2;
                                    request.StepStatus = Key.StatusRequest.Waitting;
                                    request.Assigner = "-2";
                                    request.TimeLastUpdate = DateTime.Now;
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                                }
                                else // Không Duyệt NVC => Hủy CL
                                {
                                    request.Status = Key.StatusRequest.Cancel;
                                    request.Remark = request.Remark + " - (" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "): Auto hủy CallLog do TBP từ chối duyệt!";
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                                    request.TimeLastUpdate = DateTime.Now;
                                    request.TimeClose = DateTime.Now;
                                    db.SaveChanges();
                                    TempData["Message"] = "Auto hủy CallLog do TBP từ chối duyệt!";
                                    return RedirectToAction("Index", "Home"); // chuyển về trang chủ
                                }
                            }
                            #endregion
                        }
                        //////======== Hiền.Đoàn 26.08.2016 Kiểm tra nếu là 92 và bước 2
                        else if (request.TypeId == 92 && ((request.StepNo == 2 && form["CheckDuyet_92_94"].ToString() == "0")
                                                       || (request.StepNo == 2 && form["TrungChucDanhCu"].ToString() == "Co")
                                                       || (request.StepNo == 3 && form["CheckNgayBDBangNgayKT"].ToString() == "Bang")
                                                       || (request.StepNo == 4 && form["GhiChuCuaASM"].ToString() == "ChuyenChucDanh")))
                        {
                            //---- Để trống
                            ParamCheck = true;

                        }
                        //=========== Hiền.Đoàn auto chuyển bước 5 loại chuyển chức danh
                        else if (request.TypeId == 92 && (request.StepNo == 3 && form["CheckNgayBDBangNgayKT"].ToString() != "Bang"))
                        {
                            //SqlParameter[] param_92 = new SqlParameter[] { 
                            //                        new SqlParameter("@TypeId",request.TypeId),
                            //                        new SqlParameter("@RequestId", request.Id)        
                            //                    };
                            //DataTable table_92 = sql.ExecuteCommand("Requests_AutoChuyenBuocVaHinhThucDaoTao", CommandType.StoredProcedure, param_92);
                            //if (table_92 != null && table_92.Rows.Count > 0)
                            //{
                            //    //========== Do nothing
                            //}
                            //else
                            //{
                            #region Gan nguoi xu lý mới
                            request.Status = Key.StatusRequest.Processing;
                            request.StepNo += 1;
                            request.StepStatus = Key.StatusRequest.Waitting;
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId",request.Id),
                                    new SqlParameter("@StepNo",request.StepNo)
                                });
                            if (table != null && table.Rows.Count > 0)
                                request.Assigner = table.Rows[0]["Assigner"].ToString();
                            else
                                request.Assigner = string.Empty;

                            #endregion

                            request.TimeLastUpdate = DateTime.Now;
                            request.UpdateBy = UserManager.CurrentUser.InsideCode;
                            //}

                        }
                        //======== Hiền.Đoàn 26.08.2016 Kiểm tra nếu là 94 và bước 1
                        //▼ Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                        else if (request.TypeId == 94 && ((request.StepNo == 2 && form["CheckDuyet_92_94"].ToString() == "0")
                                                       || (request.StepNo == 2 && form["TrungChucDanhCu"].ToString() == "Co")
                                                       || (request.StepNo == 3 && form["CheckNgayBDBangNgayKT"].ToString() == "Bang")
                                                       || (request.StepNo == 4 && form["GhiChuCuaASM"].ToString() == "ChuyenChucDanh")))
                        //▲ Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                        {
                            //---- Để trống
                            ParamCheck = true;
                        }
                        //=========== Hiền.Đoàn auto chuyển bước 4 loại thêm mới chức danh
                        else if (request.TypeId == 94 && (request.StepNo == 3 && form["CheckNgayBDBangNgayKT"].ToString() != "Bang"))// Add - TrungNC3 - 10 / 11 / 2017 - Thêm chức danh Thêm chức danh
                        {
                            //SqlParameter[] param_94 = new SqlParameter[] { 
                            //                        new SqlParameter("@TypeId",request.TypeId),
                            //                        new SqlParameter("@RequestId", request.Id)        
                            //                    };
                            //DataTable table_94 = sql.ExecuteCommand("Requests_AutoChuyenBuocVaHinhThucDaoTao", CommandType.StoredProcedure, param_94);
                            //if (table_94 != null && table_94.Rows.Count > 0)
                            //{
                            //    //========== Do nothing
                            //}
                            //else
                            //{
                            #region Gan nguoi xu lý mới
                            request.Status = Key.StatusRequest.Processing;
                            request.StepNo += 1;
                            request.StepStatus = Key.StatusRequest.Waitting;
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId",request.Id),
                                    new SqlParameter("@StepNo",request.StepNo)
                                });
                            if (table != null && table.Rows.Count > 0)
                                request.Assigner = table.Rows[0]["Assigner"].ToString();
                            else
                                request.Assigner = string.Empty;

                            #endregion

                            request.TimeLastUpdate = DateTime.Now;
                            request.UpdateBy = UserManager.CurrentUser.InsideCode;
                            // }
                        }

                        //▼	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================
                        else if (request.TypeId == 109 && request.StepNo == 1 && soSO != "")
                        {
                            #region MyRegion
                            SqlParameter[] param = new SqlParameter[] {
                                new SqlParameter("@RequestID", request.Id),
                                new SqlParameter("@SoSO", soSO),
                                new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                            };
                            DataTable tbRs = sql.ExecuteCommand("GetMoneySO_XuatHoaDon", CommandType.StoredProcedure, param);
                            if (tbRs != null && tbRs.Rows.Count > 0 && tbRs.Rows[0][0].ToString() == "1")
                            {
                                TempData["Message"] = tbRs.Rows[0][1].ToString();
                            }
                            else if (tbRs != null && tbRs.Rows.Count > 0 && tbRs.Rows[0][0].ToString() == "0")
                            {
                                TempData["Message"] = "Chuyển bước không thành công! </br>" + tbRs.Rows[0][1].ToString();
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                            else
                            {
                                #region ===Gán người xử lý mới===
                                request.Status = Key.StatusRequest.Processing;
                                request.StepNo += 1;
                                request.StepStatus = Key.StatusRequest.Waitting;
                                DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@StepNo", request.StepNo)
                                });
                                if (table != null && table.Rows.Count > 0)
                                    request.Assigner = table.Rows[0]["Assigner"].ToString();
                                else
                                    request.Assigner = string.Empty;
                                #endregion

                                TempData["Message"] = "Chuyển bước thành công!";
                            }
                            #endregion
                        }
                        //▲	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================

                        // gán xử lý bước 3 cho loại 169, 170 TrungNC3
                        else if (request.StepNo == 2 && request.TypeId == 169)
                        {
                            string message169 = "";

                            db.SaveChanges();
                            SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                                    new SqlParameter("@Type",0)
                                                };
                            DataSet table169 = sql.ExecuteCommandDataSet("sp_POS_Insert_SO_Sale_NhanVienFRT", CommandType.StoredProcedure, param);
                            if (table169.Tables.Count > 0)
                            {
                                DataRow row = table169.Tables[table169.Tables.Count - 1].Rows[0];
                                message169 = row["Result"].ToString();
                            }
                        }

                        else if (request.StepNo == 2 && request.TypeId == 170)
                        {
                            string message170 = "";
                            db.SaveChanges();
                            SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                                    new SqlParameter("@Type",1)
                                                };
                            DataSet table170 = sql.ExecuteCommandDataSet("sp_POS_Insert_SO_Sale_NhanVienFRT", CommandType.StoredProcedure, param);
                            if (table170.Tables.Count > 0)
                            {
                                DataRow row = table170.Tables[table170.Tables.Count - 1].Rows[0];
                                message170 = row["Result"].ToString();
                            }
                        }
                        //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        else if (request.TypeId == 214)
                        {
                            string message214 = "";
                            bool chuyenBuoc4 = false;
                            //▼ Add - TuanNA89 - 10/10/2019 - xét nếu bước 3 không check dòng nào thì chuyển lên B4 luôn
                            var checkRequestDetail214 = (from a in db.RequestDetails
                                                         where a.RequestId == request.Id && a.Property9 == "1"
                                                         select a).ToList();
                            if (request.StepNo == 3 && checkRequestDetail214.Count == 0)
                            {
                                request.StepNo += 1;
                            }
                            else
                            {
                                //▲ Add - TuanNA89 - 10/10/2019 - xét nếu bước 3 không check dòng nào thì chuyển lên B4 luôn
                                #region Xử lý Calllog
                                if (new List<int> { 2, 3 }.Contains(request.StepNo))
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                            new SqlParameter("@RequestId",request.Id),
                                            new SqlParameter("@User ",UserManager.CurrentUser.InsideCode),
                                        };
                                    DataTable table214 = sql.ExecuteCommand("CallLog_DuyetChuyenHangPK_XuLy", CommandType.StoredProcedure, param);
                                    if (table214 != null && table214.Rows.Count > 0)
                                    {
                                        if (table214.Rows[0]["Result"].ToString() == "1")
                                        {
                                            //if (request.StepNo == 2)
                                            //{
                                            //    request.StepNo = 3;
                                            //}
                                        }
                                        else if (table214.Rows[0]["Result"].ToString() == "2")
                                        {
                                            chuyenBuoc4 = true;
                                        }
                                        else
                                        {
                                            message214 = table214.Rows[0]["Msg"].ToString();
                                            TempData["Message"] = message214;
                                            return RedirectToAction("Details", new { Id = request.Id });
                                        }
                                    }
                                    db.SaveChanges();
                                }
                                #endregion

                                if (new List<int> { 1, 3 }.Contains(request.StepNo) || chuyenBuoc4)
                                {
                                    #region Tạo Bill vận chuyển bước 1 và 3

                                    var requestdetail214 = (from a in db.RequestDetails
                                                            where a.RequestId == request.Id
                                                            select a).ToList();
                                    //▼ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                    long requestIdBillVC;
                                    Request requestBillVC_214;
                                    if ((request.StepNo == 1 && !string.IsNullOrEmpty(requestdetail214[0].Property12))
                                        || (new List<int> { 2, 3 }.Contains(request.StepNo) && !string.IsNullOrEmpty(requestdetail214[0].Property13)))
                                    {
                                        if (request.StepNo == 1)
                                        {
                                            requestIdBillVC = long.Parse(requestdetail214[0].Property12);
                                        }
                                        else
                                        {
                                            requestIdBillVC = long.Parse(requestdetail214[0].Property13);
                                        }

                                        requestBillVC_214 = db.Requests.FirstOrDefault(x => x.Id == requestIdBillVC);
                                        if (requestBillVC_214 != null)
                                        {
                                            if (requestBillVC_214.Status == Key.Status.Unavailable)
                                            {
                                                message214 = "Bạn đã tạo calllog bill " + requestBillVC_214.Id + ", vui lòng vào tab Trash nhấn GỬI để chuyển calllog cho NVC";
                                                TempData["Message"] = message214;
                                                return RedirectToAction("Details", new { Id = request.Id });
                                            }
                                            else if (requestBillVC_214.Status > 4)
                                            {
                                                foreach (var item in requestdetail214)
                                                {
                                                    if (request.StepNo == 1)
                                                    {

                                                        item.Property12 = null;
                                                    }
                                                    else
                                                    {
                                                        item.Property13 = null;
                                                    }
                                                }
                                                message214 = "Calllog bill vận chuyển: " + requestBillVC_214.Id + " đã bị huỷ. Xin tạo lại Calllog bill vận chuyển khác!!";
                                                TempData["Message"] = message214;
                                                db.SaveChanges();
                                            }
                                        }
                                    }
                                    //▲ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành

                                    if ((request.StepNo == 1 && string.IsNullOrEmpty(requestdetail214[0].Property12))
                                        || (request.StepNo == 2 && string.IsNullOrEmpty(requestdetail214[0].Property13))
                                       || (request.StepNo == 3 && string.IsNullOrEmpty(requestdetail214[0].Property13)))
                                    {
                                        if (Session[Key.Session.BillInfo] != null)
                                        {
                                            Session[Key.Session.BillInfo] = null;
                                        }


                                        DataTable dtBillInfor = new DataTable();
                                        dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
                                        dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
                                        dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã người nhận
                                        dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
                                        dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
                                        dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
                                        dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
                                        dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
                                        dtBillInfor.Columns.Add("NumberOfParcels", typeof(string));        //Số kiện
                                        dtBillInfor.Columns.Add("WeightFRT", typeof(string));        //Trọng lượng
                                        dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
                                        dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
                                        dtBillInfor.Columns.Add("TypeId", typeof(string));     //Mô tả loại calllog
                                        int quantity = 0, quantity_count = 0,
                                            numberOfParcels = 0, numberOfParcels_count = 0, stepNext = 0;
                                        float weightFRT = 0, weightFRT_count = 0;
                                        string userReceiveCode = "", userReceiveName = "";
                                        string noiDungHangHoa = "";// "Gom hàng phụ kiện bảo hành";
                                        foreach (RequestDetail item in requestdetail214)
                                        {
                                            //▼ Edit - TuanNA89 - 11/10/2019 - Xét chỉ lấy detail có check cột Kho đã chuyển hàng mới
                                            if (request.StepNo == 1 || item.Property9 == "1")
                                            {
                                                quantity = int.TryParse(item.Property3, out quantity) ? quantity : 0;
                                                numberOfParcels = int.TryParse(item.Property4, out numberOfParcels) ? numberOfParcels : 0;
                                                weightFRT = float.TryParse(item.Property5, out weightFRT) ? weightFRT : 0;
                                                quantity_count += quantity;
                                                numberOfParcels_count += numberOfParcels;
                                                weightFRT_count += weightFRT;
                                                noiDungHangHoa += (item.ProductName + ",");
                                            }
                                            //▲ Edit - TuanNA89 - 11/10/2019 - Xét chỉ lấy detail có check cột Kho đã chuyển hàng mới
                                        }

                                        if (request.StepNo == 1)
                                        {
                                            stepNext = 2;
                                        }
                                        else if (chuyenBuoc4)
                                        {
                                            stepNext = 4;
                                        }

                                        DataTable tblAssigner214 = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                                                    new SqlParameter("@RequestId",request.Id),
                                                                    new SqlParameter("@StepNo",stepNext)
                                        });
                                        //▼ Edit - TuanNA89 - 16/09/2016 - fix nội dung người nhận
                                        if (stepNext == 2)
                                        {
                                            if (tblAssigner214 != null && tblAssigner214.Rows.Count > 0)
                                            {
                                                userReceiveCode = tblAssigner214.Rows[0]["Assigner"].ToString();
                                                userReceiveName = tblAssigner214.Rows[0]["EmployeeName"].ToString();
                                            }
                                        }
                                        else if (stepNext == 4)
                                        {
                                            userReceiveCode = request.FromShop;
                                        }
                                        //▲ Edit - TuanNA89 - 16/09/2016 - fix nội dung người nhận
                                        dtBillInfor.Rows.Add(
                                            UserManager.CurrentUser.InsideCode,
                                            noiDungHangHoa,
                                            userReceiveCode,
                                            userReceiveName,
                                            "",
                                            "0",
                                            request.Id.ToString(),
                                            quantity_count,
                                            "1",
                                            weightFRT_count,
                                            request.StepNo.ToString(),
                                            "Duyệt chuyển hàng phụ kiện bảo hành",
                                            "214"
                                        );

                                        if (dtBillInfor.Rows.Count > 0)
                                        {
                                            Session[Key.Session.BillInfo] = dtBillInfor;
                                            return RedirectToAction("CreateBillFromHC", "Requests");
                                        }
                                        else
                                        {
                                            if (permissions.Contains(Permission.Sender))
                                            {
                                                return RedirectToAction("Sent", "Home");
                                            }
                                            return RedirectToAction("Index", "Home");
                                        }
                                    }
                                    #endregion
                                }

                                #region Xử lý Calllog
                                if (new List<int> { 2, 3 }.Contains(request.StepNo))
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                            new SqlParameter("@RequestId",request.Id),
                                            new SqlParameter("@User ",UserManager.CurrentUser.InsideCode),
                                        };
                                    DataTable table214 = sql.ExecuteCommand("CallLog_DuyetChuyenHangPK_XuLy", CommandType.StoredProcedure, param);
                                    if (table214 != null && table214.Rows.Count > 0)
                                    {
                                        if (table214.Rows[0]["Result"].ToString() == "1")
                                        {
                                            if (request.StepNo == 2)
                                            {
                                                request.StepNo = 3;
                                            }
                                        }
                                        else if (table214.Rows[0]["Result"].ToString() == "2")
                                        {
                                            request.StepNo = 4;
                                        }
                                        else
                                        {
                                            message214 = table214.Rows[0]["Msg"].ToString();
                                            TempData["Message"] = message214;
                                            return RedirectToAction("Details", new { Id = request.Id });
                                        }
                                    }
                                    db.SaveChanges();
                                }
                                else
                                {
                                    request.StepNo += 1;
                                }
                                #endregion
                            }// Add - TuanNA89 - 10/10/2019 - xét nếu bước 3 không check dòng nào thì chuyển lên B4 luôn
                            #region Gan nguoi xu lý mới
                            request.Status = Key.StatusRequest.Processing;
                            request.StepStatus = Key.StatusRequest.Waitting;
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId",request.Id),
                                    new SqlParameter("@StepNo",request.StepNo)
                                });
                            if (table != null && table.Rows.Count > 0)
                                request.Assigner = table.Rows[0]["Assigner"].ToString();
                            else
                                request.Assigner = string.Empty;

                            #endregion

                            request.TimeLastUpdate = DateTime.Now;
                            request.UpdateBy = UserManager.CurrentUser.InsideCode;
                            db.SaveChanges();
                        }
                        //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        //============== Hiền.Đoàn 26.08.2016 Ngược lại gán người xử lý bình thường cho tất cả loại khác 
                        else
                        {
                            #region ===Gán Người xử lý mới===
                            if (request.TypeId == 219 && request.StepNo == 1 && objects[0].Duyet == 1)
                            {
                                SqlParameter[] param219 = new SqlParameter[] {
                                        new SqlParameter("@RequestId", request.Id),
                                        new SqlParameter("@InsideCode", UserManager.CurrentUser.InsideCode)
                                    };
                                sql.ExecuteCommand("sp_PushInfo_TamUng_Calllog_219", CommandType.StoredProcedure, param219);
                                request.Status = Key.StatusRequest.Complete;
                                request.TimeClose = DateTime.Now;
                                request.TimeFinish = DateTime.Now;
                                request.StepStatus = Key.StatusRequest.Reply;
                            }
                            //▲ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                            else if (request.TypeId == 45 && request.StepNo == 2 && objects[0].Property9 == "Đã nhận" && objects[0].Property1 == "Cấp mới")
                            {
                                request.Status = Key.StatusRequest.Complete;
                                request.TimeClose = DateTime.Now;
                                request.TimeFinish = DateTime.Now;
                                request.StepStatus = Key.StatusRequest.Reply;
                            }
                            else if (request.TypeId == 45 && request.StepNo == 3 && objects[0].Property1 == "Bảo hành")
                            {
                                db.SaveChanges();
                                SqlParameter[] param = new SqlParameter[]
                                {       new SqlParameter("@RequestID", request.Id),
                                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                };
                                DataTable tb = sql.ExecuteCommand("POS_UpdateB3_IT_Support", CommandType.StoredProcedure, param);
                                if (tb != null && tb.Rows.Count > 0 && tb.Rows[0][0].ToString() == "1")
                                    TempData["Message"] = "Hoàn tất thành công!";
                                else if (tb != null && tb.Rows.Count > 0 && tb.Rows[0][0].ToString() == "-1")
                                    TempData["Message"] = "Lỗi cập nhật sang POS!";
                                else
                                    TempData["Message"] = "Chuyển bước thành công!";
                            }
                            else if (request.TypeId == 45 && request.StepNo == 4)
                            {
                                request.Status = Key.StatusRequest.Processing;
                                request.StepNo += 1;
                                request.StepStatus = Key.StatusRequest.Waitting;
                                request.Assigner = "-3";

                                sql.ExecuteWithoutResult("IT_Support_Step4_UpdateToPOS", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                        new SqlParameter("@IDCallLog",request.Id),
                                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@WarehouseCode",request.FromShop),
                                        new SqlParameter("@Type",2)
                                });
                            }
                            else if (request.TypeId == 165 && request.StepNo == 1)
                            {
                                request.Status = Key.StatusRequest.Processing;
                                request.StepNo += 1;
                                request.StepStatus = Key.StatusRequest.Waitting;
                                /// request.Assigner = "-3";

                            }
                            else if (request.TypeId == 51 && ((request.StepNo == 1 && objects[0].Approved == 1) || (request.StepNo == 2 && objects[0].Approved == 2)))
                            {
                                //▼  Add-LuanNT44-29/08/2019-Loại 51- Thêm check quỹ hoàn tất
                                if (request.StepNo == 2 && objects[0].Approved == 2 && (objects[0].Property8 != null)) // LuanNT44-30/08/2019
                                {
                                    string PTGiamGia = objects[0].Property8; // LuanNT44-26/09/2019
                                    DataTable tb = sql.ExecuteCommand("sp_CalllogCheckQuyDuyetGiamGia_51", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                            new SqlParameter("@RequestID", request.Id),
                                            new SqlParameter("@Property8", PTGiamGia), // LuanNT44-26/09/2019
                                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    });

                                    if (tb.Rows.Count > 0 && tb != null)
                                    {
                                        if (int.Parse(tb.Rows[0]["ReSult"].ToString()) == 0)
                                        {
                                            TempData["Message"] = "Hết quỹ giảm giá, bạn vui lòng cập nhật % dùng số tiền giảm giá = 0!";
                                            return RedirectToAction("Details", new { Id = request.Id });
                                        }
                                        else
                                        {
                                            request.Status = Key.StatusRequest.Complete;
                                            request.StepStatus = Key.StatusRequest.Reply;
                                            request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                                            request.TimeClose = DateTime.Now;
                                            flagCLComplete = true;
                                        }
                                    }
                                }
                                else
                                {
                                    request.Status = Key.StatusRequest.Complete;
                                    request.StepStatus = Key.StatusRequest.Reply;
                                    request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                                    request.TimeClose = DateTime.Now;
                                    flagCLComplete = true;
                                }
                                //▲ Add-LuanNT44-29/08/2019-Loại 51- Thêm check quỹ hoàn tất
                                var listGiamGiaAp = (from f in db.RequestDetails
                                                     where f.RequestId == request.Id
                                                     && f.Status == Key.Status.Available
                                                     select f).ToList();
                                if (objects[0].Approved == 1)
                                {
                                    foreach (var item in listGiamGiaAp)
                                    {
                                        sql.ExecuteWithoutResult("POS_UpdateDuyetGiamGia", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                            new SqlParameter("@ID", item.SaleCode),
                                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@Status", 'C'),
                                            new SqlParameter("@LineSO", item.Property6),
                                            new SqlParameter("@RequestID", request.Id)
                                    });
                                    }
                                }
                                else if (objects[0].Approved == 2)
                                {
                                    foreach (var item in listGiamGiaAp)
                                    {
                                        sql.ExecuteWithoutResult("POS_UpdateDuyetGiamGia", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                            new SqlParameter("@ID", item.SaleCode),
                                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@Status", 'K'),
                                            new SqlParameter("@LineSO", item.Property6),
                                            new SqlParameter("@RequestID", request.Id)
                                    });
                                    }
                                }

                            }
                            else if (request.TypeId == 51 && request.StepNo == 2 && objects[0].Quantity4 == 6)// Add-LuanNT44-08/08/2019-Loại 51- Thêm check quỹ hoàn tất
                            {
                                DataTable tb = sql.ExecuteCommand("sp_FRT_Web_AutoCompleteCallLogDGGCheckQuy", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                            new SqlParameter("@RequestID", request.Id)
                                    });

                                if (tb.Rows.Count > 0 && tb != null)
                                {
                                    if (int.Parse(tb.Rows[0]["Result"].ToString()) == 1)
                                    {
                                        request.Status = Key.StatusRequest.Complete;
                                        request.StepStatus = Key.StatusRequest.Reply;
                                        request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                                        request.TimeClose = DateTime.Now;
                                        flagCLComplete = true;
                                    }
                                }
                            }
                            else if (request.TypeId == 51 && request.StepNo == 3 && objects[0].Approved == 1)
                            {
                                request.Status = Key.StatusRequest.Complete;
                                request.StepStatus = Key.StatusRequest.Reply;
                                request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                                request.TimeClose = DateTime.Now;
                                flagCLComplete = true;
                                var listGiamGiaAp = (from f in db.RequestDetails
                                                     where f.RequestId == request.Id
                                                     && f.Status == Key.Status.Available
                                                     select f).ToList();
                                if (objects[0].Approved == 1)
                                {
                                    foreach (var item in listGiamGiaAp)
                                    {
                                        sql.ExecuteWithoutResult("POS_UpdateDuyetGiamGia", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                            new SqlParameter("@ID", item.SaleCode),
                                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@Status", 'C'),
                                            new SqlParameter("@LineSO", item.Property6),
                                            new SqlParameter("@RequestID", request.Id)
                                    });
                                    }
                                }
                                else if (objects[0].Approved == 3)
                                {
                                    foreach (var item in listGiamGiaAp)
                                    {
                                        sql.ExecuteWithoutResult("POS_UpdateDuyetGiamGia", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                            new SqlParameter("@ID", item.SaleCode),
                                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@Status", 'K'),
                                            new SqlParameter("@LineSO", item.Property6),
                                            new SqlParameter("@RequestID", request.Id)
                                    });
                                    }
                                }

                            }
                            else if (request.TypeId == 51 && (request.StepNo == 1 || (request.StepNo == 3 && objects[0].Approved == 2)))
                            {
                                request.Status = Key.StatusRequest.Processing;
                                request.StepNo += 1;
                                request.StepStatus = Key.StatusRequest.Waitting;
                                int statusApproved = objects[0].Approved;
                                string maNguyenNhanGG = objects[0].Quantity4;
                                DataTable table = sql.ExecuteCommand("Assigner_InsertForCallLog_GG", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                    new SqlParameter("@RequestID",request.Id),
                                    new SqlParameter("@StatusApproved",statusApproved)
                            });
                                if (table != null && table.Rows.Count > 0)
                                    request.Assigner = table.Rows[0]["EmployeeCode"].ToString();
                                else
                                    request.Assigner = string.Empty;
                            }
                            else if (request.TypeId == 51 && request.StepNo == 2 && objects[0].Approved == 3)
                            {
                                request.Status = Key.StatusRequest.Processing;
                                request.StepNo += 1;
                                request.StepStatus = Key.StatusRequest.Waitting;
                                string maNguyenNhanGG = objects[0].Quantity4;
                                DataTable table = sql.ExecuteCommand("GG_AssignerInsertBc3", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                    new SqlParameter("@RequestID",request.Id),
                                    new SqlParameter("@NguyenNhanGG",maNguyenNhanGG)
                            });
                                if (table != null && table.Rows.Count > 0)
                                    request.Assigner = table.Rows[0]["EmployeeCode"].ToString();
                                else
                                //▼  Add - LuanNT44 - 11/04/2020 - 51 - edit
                                {
                                    //request.Assigner = string.Empty;
                                    TempData["Message"] = "Không lấy được thông tin người duyệt calllog, shop vui lòng liên hệ support để được hỗ trợ !";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                                //▲  Add - LuanNT44 - 11/04/2020 - 51 - edit
                            }
                            //▼ Edit - NghiaTV5 - 23/10/2017 - store 
                            #region update hoàn tất calllog khong duyệt - stepNO = 1
                            else if (request.TypeId == 179 && form["DuyetAll"].ToString() == "0")
                            {
                                string message179 = string.Empty;
                                SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User ",UserManager.CurrentUser.InsideCode),
                                                };
                                DataSet table179 = sql.ExecuteCommandDataSet("Requests_UpdateCMKM_179", CommandType.StoredProcedure, param);
                                if (table179.Tables.Count > 0)
                                {
                                    DataRow row = table179.Tables[table179.Tables.Count - 1].Rows[0];
                                    message179 = row["Result"].ToString();
                                }
                                TempData["Message"] = message179;
                            }
                            //▲ Edit - NghiaTV5 - 23/10/2017 - store
                            #endregion update hoàn tất calllog khong duyệt - stepNO =1
                            //▲ Add - NghiaTV5 - 21/10/2017 - không duyệt calllog

                            //▼ ChuongNT3 - 29/03/2018 - Thao tác CL Apple chuyển POS 

                            else if (request.StepNo == 1 && request.TypeId == 69)
                            {
                                var msg69 = "";
                                #region Auto đẩy POS loại CL Apple 69
                                foreach (var item in objects)
                                {
                                    decimal IdCallLog = item.IdCallLog;
                                    string ProductCode = item.ProductCode; //ChuongNT3 - 30/03/2018 - Sữa  ProductCode
                                    string WarehouseCode = item.WarehouseCode;
                                    int Quantity = item.Quantity;
                                    string User = item.User;
                                    string EmpCode = item.EmpCode;
                                    int Pay = item.ckPay == 1 ? 2 : 3;  // ChuongNT3 - 03/04/2018 - Thêm bước 2
                                    request = db.Requests.FirstOrDefault(x => x.Id == IdCallLog);
                                    RequestDetail requestDetails = db.RequestDetails.FirstOrDefault(x => x.RequestId == IdCallLog);  // ChuongNT3 - 02/04/2018 Sữa checkbox
                                    if (item.ckClick == 1)
                                    {
                                        SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@Calllog",IdCallLog),
                                        new SqlParameter("@Itemcode",ProductCode),//ChuongNT3 - 30/03/2018 - Sữa  ProductCode
                                        new SqlParameter("@ShopIns",WarehouseCode),
                                        new SqlParameter("@Type",Pay), // ChuongNT3 - 03/04/2018 - Thêm bước 2
                                        new SqlParameter("@Quantity",Quantity),
                                        new SqlParameter("@User",User),
                                        new SqlParameter("@Employee",EmpCode),
                                    };
                                        DataTable tb = sql.ExecuteCommand("sp_CL_Insert_SO_Sale_NhanVienFRT", CommandType.StoredProcedure, param);
                                        var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                                        jsonResult.MaxJsonLength = int.MaxValue;
                                        request.Assigner = "-3";
                                        request.StepNo += 1;
                                        request.Status = Key.StatusRequest.Processing;
                                        request.StepStatus = Key.StatusRequest.Waitting;
                                        msg69 = "Chuyển bước thành công. Hệ thống tự động chuyển sang POS";
                                    }
                                    else
                                    {
                                        //▼ ChuongNT3 - 03/04/2018 - Thêm bước 2
                                        #region Gan nguoi xu lý mới
                                        request.Status = Key.StatusRequest.Processing;
                                        request.StepNo += 1;
                                        request.StepStatus = Key.StatusRequest.Waitting;
                                        DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                            new SqlParameter("@RequestId",request.Id),
                                            new SqlParameter("@StepNo",request.StepNo)
                                    });
                                        if (table != null && table.Rows.Count > 0)
                                            request.Assigner = table.Rows[0]["Assigner"].ToString();
                                        else
                                            request.Assigner = string.Empty;

                                        msg69 = "Chuyển bước thành công";
                                        #endregion
                                    }
                                    requestDetails.Quantity2 = item.ckPay;
                                    requestDetails.Quantity1 = item.ckClick;
                                    //▲ ChuongNT3 - 03/04/2018 - Thêm bước 2
                                }
                                TempData["Message"] += msg69;
                                #endregion
                            }
                            //▲ ChuongNT3 - 29/03/2018 - Thao tác CL Apple chuyển POS                             
                            else if (request.TypeId != 45 || (request.TypeId == 45 && request.StepNo != 1)) // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                            {
                                if (request.TypeId == 94 && ((request.StepNo == 1 && form["CheckDuyet_92_94_NotApp"].ToString() == "0")))
                                {
                                    request.Status = Key.StatusRequest.Complete;
                                    request.StepStatus = Key.StatusRequest.Complete;
                                    request.Remark += " Update hoàn tất calllog do ASM không duyệt";//TrungNC3 - 15/12/2017 - Add Check không duyệt thì hoàn tất calllog
                                    request.TimeClose = DateTime.Now;//TrungNC3 - 15/12/2017 - Add Check không duyệt thì hoàn tất calllog
                                    request.TimeFinish = DateTime.Now;//TrungNC3 - 15/12/2017 - Add Check không duyệt thì hoàn tất calllog
                                }
                                // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                                // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                                else
                                {
                                    request.Status = Key.StatusRequest.Processing;
                                    request.StepNo += 1;
                                    request.StepStatus = Key.StatusRequest.Waitting;
                                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                                      new SqlParameter("@RequestId",request.Id),
                                                      new SqlParameter("@StepNo",request.StepNo)
                                });
                                    if (table != null && table.Rows.Count > 0)
                                        request.Assigner = table.Rows[0]["Assigner"].ToString();
                                    else
                                        request.Assigner = string.Empty;
                                }
                            }
                            #endregion

                            request.TimeLastUpdate = DateTime.Now;
                            request.UpdateBy = UserManager.CurrentUser.InsideCode;
                        }

                        db.SaveChanges();

                        if (ParamCheck == true)
                        {
                            //▼	Edit - VietMXH - 17/07/2019 - Thêm mới/Chuyển Chức danh==================================================
                            if (request.TypeId == 92
                                && (
                                    (request.StepNo == 2 && form["CheckDuyet_92_94"].ToString() == "0")
                                    || (request.StepNo == 2 && form["TrungChucDanhCu"].ToString() == "Co")
                                    || (request.StepNo == 3 && form["CheckNgayBDBangNgayKT"].ToString() == "Bang")
                                    || (request.StepNo == 4 && form["GhiChuCuaASM"].ToString() == "ChuyenChucDanh")
                                    )
                                )
                            {
                                if (request.StepNo == 4 && form["GhiChuCuaASM"].ToString() == "ChuyenChucDanh")
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@RequestID", request.Id),
                                        new SqlParameter("@Check", 1),
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@ASM_Approve", 1),
                                    };
                                    sql.ExecuteCommand("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, param);

                                    #region Gan nguoi xu lý mới
                                    request.Status = Key.StatusRequest.Processing;
                                    request.StepNo += 1;
                                    request.StepStatus = Key.StatusRequest.Waitting;
                                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestId",request.Id),
                                        new SqlParameter("@StepNo",request.StepNo)
                                    });
                                    if (table != null && table.Rows.Count > 0)
                                    {
                                        request.Assigner = table.Rows[0]["Assigner"].ToString();
                                    }
                                    else
                                    {
                                        request.Assigner = string.Empty;
                                    }
                                    #endregion

                                    request.TimeLastUpdate = DateTime.Now;
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;

                                    db.SaveChanges();
                                }
                                else
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@RequestID", request.Id),
                                        new SqlParameter("@Check", 1),
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                    };
                                    sql.ExecuteCommand("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, param);
                                }
                            }
                            else if (request.TypeId == 94
                                && (
                                    (request.StepNo == 2 && form["CheckDuyet_92_94"].ToString() == "0")
                                    || (request.StepNo == 2 && form["TrungChucDanhCu"].ToString() == "Co")
                                    || (request.StepNo == 3 && form["CheckNgayBDBangNgayKT"].ToString() == "Bang")
                                    || (request.StepNo == 4 && form["GhiChuCuaASM"].ToString() == "ChuyenChucDanh")
                                    )
                                )
                            {
                                if (request.StepNo == 4 && form["GhiChuCuaASM"].ToString() == "ChuyenChucDanh")
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@RequestID", request.Id),
                                        new SqlParameter("@Check", 1),
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@ASM_Approve", 1),
                                    };
                                    sql.ExecuteCommand("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, param);

                                    #region Gan nguoi xu lý mới
                                    request.Status = Key.StatusRequest.Processing;
                                    request.StepNo += 1;
                                    request.StepStatus = Key.StatusRequest.Waitting;
                                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestId",request.Id),
                                        new SqlParameter("@StepNo",request.StepNo)
                                    });
                                    if (table != null && table.Rows.Count > 0)
                                        request.Assigner = table.Rows[0]["Assigner"].ToString();
                                    else
                                        request.Assigner = string.Empty;
                                    #endregion

                                    request.TimeLastUpdate = DateTime.Now;
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;

                                    db.SaveChanges();
                                }
                                else
                                {
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@RequestID", request.Id),
                                        new SqlParameter("@Check", 1),
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                    };
                                    sql.ExecuteCommand("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, param);
                                }
                            }
                            //▲	Edit - VietMXH - 17/07/2019 - Thêm mới/Chuyển Chức danh==================================================
                        };

                        //===========================Thêm xử lý cho nut chuyển bước  - TRUNGNC3 - 21.10.2016 - Loại 155
                        if ((request.TypeId == 23 && request.StepNo != 1 && request.StepNo != 2) ||
                            (request.TypeId == 155 && request.StepNo != 1 && request.StepNo != 2) ||
                            (request.TypeId == 162 && request.StepNo >= 4) ||
                            (request.TypeId == 152 && request.StepNo >= 4) ||
                            (request.TypeId == 125 && request.StepNo != 1 && request.StepNo != 2) ||
                            (request.TypeId == 127 && request.StepNo >= 2) ||
                            (new List<int> { 130 }.Contains(request.TypeId)))// Add - TrungNC3 - 20 / 11 / 2017 - Up thực yêu cầu Mkts thay đổi
                        {
                            sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });

                            if (CheckTruHanMuc127 == true)
                            {
                                if (request.TypeId == 127 && request.StepNo >= 2)
                                {
                                    sql.ExecuteWithoutResult("Items_CheckLimitValue_ProductHC", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@Results", 0)
                                });
                                }
                            }
                        }
                        //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                        #region Update han mức Mar Sang BI
                        if (request.TypeId == 22 && FlagUpdateCallLogMkts == true)// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                        {
                            SqlParameter[] param = new SqlParameter[] {
                                new SqlParameter("@RequestId",request.Id),
                            };
                            sql.ExecuteWithoutResult("sp_Update_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                        }
                        #endregion
                        //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                        //▼ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                        if (request.TypeId == 219 && request.StepNo == 1 && objects[0].Duyet == 1)
                        {
                            TempData["Message"] = "Hoàn tất thành công !";
                            db.SaveChanges();
                            return RedirectToAction("Index", "Home");
                        }
                        //▲ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                        //▼  LuanNT44-18/10/2019-23
                        if (request.TypeId == 23 && request.StepNo == 5 && ((request.FromShop == null || request.FromShop == "") && (request.FromOffice != null && request.FromOffice != "")))
                        {
                            TempData["Message"] = "Hoàn tất thành công !";
                            request.StepNo = 4;
                            request.Status = Key.StatusRequest.Complete;
                            request.StepStatus = Key.StatusRequest.Reply;
                            request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                            request.TimeClose = DateTime.Now;
                            db.SaveChanges();
                            return RedirectToAction("Index", "Home");
                        }
                        //▲ LuanNT44-18/10/2019-23
                        string MessageXuatKhacPos = "";
                        if (request.TypeId == 75 && request.StepNo == 2)
                        {
                            RequestDetail checkHaveAppro = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id && (x.Approved == null || x.Approved == true));
                            if (checkHaveAppro != null)
                            {
                                DataTable tableXK = sql.ExecuteCommand("POS_CreateChungTuXuatKhac", CommandType.StoredProcedure,
                                    new SqlParameter[] {
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@RequestId", request.Id)
                                });
                                if (tableXK.Rows[0][0].ToString() == "0")
                                {
                                    TempData["Message"] = "Chuyển bước không thành công! <br/>" + tableXK.Rows[0][1].ToString();
                                    request.StepStatus = Key.StatusRequest.Processing;
                                    request.Status = Key.StatusRequest.Processing;
                                    request.StepNo = 1;
                                    RequestStep rs = db.RequestSteps.FirstOrDefault(x => x.RequestId == request.Id && x.StepNo == 1);
                                    if (rs != null)
                                    {
                                        request.Assigner = rs.Assigner;
                                    }
                                    (from p in db.Assigners
                                     where p.Status == 1 && p.StepNo == 2 && p.RequestId == request.Id
                                     select p).ToList().ForEach(x => x.Status = Key.Status.Unavailable);

                                    db.SaveChanges();
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                                else
                                    MessageXuatKhacPos = "Số chứng từ xuất khác POS : " + tableXK.Rows[0][1];
                            }
                            else
                            {
                                TempData["Message"] = "Không có dòng nào được duyệt nên callLog sẽ được hoàn tất ờ bước 1";
                                request.StepStatus = Key.StatusRequest.Reply;
                                request.Status = Key.StatusRequest.Complete;
                                request.StepNo = 1;
                                RequestStep rs = db.RequestSteps.FirstOrDefault(x => x.RequestId == request.Id && x.StepNo == 1);
                                if (rs != null)
                                {
                                    request.Assigner = rs.Assigner;
                                }
                                (from p in db.Assigners
                                 where p.Status == 1 && p.StepNo == 2 && p.RequestId == request.Id
                                 select p).ToList().ForEach(x => x.Status = Key.Status.Unavailable);

                                db.SaveChanges();
                                return RedirectToAction("Details", new { Id = request.Id });
                            }

                        }

                        string Message_50 = "";
                        //======== Loại Xuất DEMO : lên B3 sinh ra CALLLOG mới
                        if (request.TypeId == 65 && request.StepNo == 3)
                        {
                            FileAttach file = db.FileAttachs.FirstOrDefault(x => x.RequestId == request.Id && x.Uri != null);
                            if (file != null)
                            {
                                DataTable talbe = sql.ExecuteCommand("Requests_Create_Calllog_Images", CommandType.StoredProcedure,
                                new SqlParameter[] {
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Request", request.Id)
                                });

                                if (talbe != null && talbe.Rows.Count > 0)
                                {
                                    Message_50 = "Phát sinh mã calllog duyệt hình ảnh: " + talbe.Rows[0]["RequestId"].ToString();
                                }
                                else
                                {
                                    Message_50 = "Có lỗi trong quá trình phát sinh calllog hình ảnh!";
                                }
                            }
                        }
                        // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                        // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                        else if (request.TypeId == 188)// Calllog con của loại 165 
                        {
                            var cfReplaceProduct45 = objects[0].cfReceiveSPMoi45;
                            var cfReplaceProduct = objects[0].cfReceiveSPMoi;
                            if (request.StepNo == 2 && cfReplaceProduct == "Không duyệt")
                            {
                                request.Status = 4;
                                request.StepNo = 1; // Edit - NghiaTV5 - 08/01/2018 - 188 - request.StepNo = 1
                                db.SaveChanges();
                            }
                            if (request.ReferenceCode == "2" && request.StepNo == 3 && cfReplaceProduct45 == "Đã nhận")//loại cấp mới RSM xác nhận đã nhận đẩy POS
                            {
                                sql.ExecuteWithoutResult("POS_UpdateCapMoiITSangPOS", CommandType.StoredProcedure, new SqlParameter[] {
                                        new SqlParameter("@RequestID", request.Id),
                                        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@ShopCode", request.FromShop),
                                        new SqlParameter("@OfficeCode", request.FromOffice)
                                        });
                                request.Assigner = "-3"; //người sử lý bước 3 là POST
                                db.SaveChanges();
                            }

                        }
                        //▲ Add - NghiaTV5 - 08/01/2018 - 188 - bổ sung
                        else if (request.TypeId == 163 && request.StepNo == 2)
                        {
                            sql.ExecuteWithoutResult("UpdateSLTonBongDenBaoHanh", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@RequestID", request.Id),
                                new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                            });
                        }

                        //▼	Edit - VietMXH - 25/12/2018 - Tối ưu==================================================
                        #region ===Xử lý sau Chuyển bước===
                        switch (request.TypeId)
                        {
                            case 0:
                                #region MyRegion
                                #endregion
                                break;
                            case 51:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetGG", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 56:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetYCDC", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 61:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetDonHangTren100Trieu", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 64:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetHuyYCDC", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 150:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_GiamSatHinhAnhCamera", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            case 183:
                                #region MyRegion
                                sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_DuyetLoiThamMy", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                                #endregion
                                break;
                            default:
                                break;
                        }
                        #endregion
                        //▲	Edit - VietMXH - 25/12/2018 - Tối ưu==================================================

                        if (request.TypeId != 69 && request.TypeId != 151 && request.TypeId != 109 && (request.TypeId != 45 || (request.TypeId == 45 && request.StepNo != 3))) // ChuongNT3 - 29/03/2018 - Thao tác CL Apple chuyển POS 
                            TempData["Message"] = "Chuyển bước thành công!";

                        //======== Hiền.Đoàn 20.07.2016 chia trường hợp gửi mail 
                        #region Gửi mail
                        //▼ Edit - NghiaTV5 - 23/10/2017 - store 
                        #region update hoàn tất calllog khong duyệt - stepNO = 1
                        if (request.TypeId == 179 && form["DuyetAll"].ToString() == "0")
                        {
                            string message179 = string.Empty;
                            SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User ",UserManager.CurrentUser.InsideCode),
                                                };
                            DataSet table179 = sql.ExecuteCommandDataSet("Requests_UpdateCMKM_179", CommandType.StoredProcedure, param);
                            if (table179.Tables.Count > 0)
                            {
                                DataRow row = table179.Tables[table179.Tables.Count - 1].Rows[0];
                                message179 = row["Result"].ToString();
                            }
                            TempData["Message"] = message179;
                        }
                        #endregion update hoàn tất calllog khong duyệt - stepNO =1
                        //▲ Edit - NghiaTV5 - 23/10/2017 - store
                        //▲ Add - NghiaTV5 - 21/10/2017 - không duyệt calllog
                        else if (request.TypeId == 150 && request.StepNo == 1 && form["CheckDuyet"].ToString() == "1")
                        {
                            //========== Loại 150 toàn bộ không duyệt đã hoàn tất và gửi mail ở code khúc trên , không gửi mail lại -Code trong này rỗng
                        }
                        else if (request.StepNo == 2 && request.TypeId == 122 && form["DuyetAll"].ToString() == "0")
                        {
                            //========== Loại 122 nếu duyệt tất cả các line thì auto hoàn tất và không gửi mail change step
                        }
                        if (request.TypeId == 164 && request.StepNo == 1 && form["DuyetAll"].ToString() == "0")
                        {
                            //========== Loại 150 toàn bộ không duyệt đã hoàn tất và gửi mail ở code khúc trên , không gửi mail lại -Code trong này rỗng
                        }
                        else if (request.TypeId == 45 && request.StepNo == 1)
                        {
                            SqlParameter[] param = new SqlParameter[] {
                                new SqlParameter("@RequestID", request.Id),
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode )
                                 };
                            DataTable tb45 = sql.ExecuteCommand("ChangeStep_IT_Support", System.Data.CommandType.StoredProcedure, param);
                            if (tb45 != null && tb45.Rows[0][0].ToString() == "4")
                                TempData["Message"] = "Hoàn tất thành công!";
                        }
                        else
                        {
                            XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.ChangeStep);
                        }
                        #endregion

                        if (request.TypeId == 28 && (request.StepNo == 1 || request.StepNo == 2) && objects[0].TienChenhLech <= 5000)
                        {
                            //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                            TempData["Message"] = "Hoàn tất thành công!";
                            //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        }
                        else if (request.TypeId == 75 && (request.StepNo == 2 || request.StepNo == 1))
                        {
                            TempData["Message"] += "<br/>" + MessageXuatKhacPos;
                        }
                        else if (request.TypeId == 150 && request.Status == 1)
                        {
                            TempData["Message"] = message150;
                        }
                        else if (request.TypeId == 152 && request.StepNo == 4)
                        {
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure,
                                new SqlParameter[] {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@StepNo", request.StepNo),
                                    new SqlParameter("@Is_NotView", 0)
                                });
                        }
                        else if (request.TypeId == 154)
                        {
                            #region MyRegion
                            if (request.StepNo == 2)
                            {
                                TempData["Message"] += "<br/>Người xử lý Nhà vận chuyển!";
                                RequestDetail l_RequestDetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l_RequestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                }
                                if (l_RequestDetail != null)
                                {
                                    if (l_RequestDetail.Approved == true) // Có Xác nhận Tạo Bill Hỏa tốc
                                    {
                                        #region     ---Tạo CallLog Duyệt Bill Vận chuyển Hỏa tốc---
                                        string l_ResStr = BillVanChuyen__TaoCLDuyetBillVCHoaToc(request.Id);
                                        BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result l_Result = JsonConvert.DeserializeObject<BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result>(l_ResStr);
                                        if (l_Result.RequestId > 0)
                                        {
                                            TempData["Message"] += "<br/>- Tạo CL Duyệt Bill Hỏa tốc Thành công! RequestId: " + l_Result.RequestId;
                                        }
                                        else
                                        {
                                            TempData["Message"] += "<br/>- Tạo CL Duyệt Bill Hỏa tốc Thất bại! Message: " + l_Result.Message;
                                        }
                                        #endregion  ---Tạo CallLog Duyệt Bill Vận chuyển Hỏa tốc---
                                    }
                                }

                                #region     ---Tích hợp Nhà vận chuyển---
                                string l_ResStr_NVC = BillVanChuyen__TichHopNhaVanChuyen(request.Id);
                                BillVanChuyen__TichHopNhaVanChuyen__Result l_Result_NVC = JsonConvert.DeserializeObject<BillVanChuyen__TichHopNhaVanChuyen__Result>(l_ResStr_NVC);
                                TempData["Message"] += "<br/>- Tích hợp NVC " + (l_Result_NVC.Result == 1 ? "Thành công" : "Thất bại") + "! " + l_Result_NVC.Msg;
                                #endregion  ---Tích hợp Nhà vận chuyển---
                            }
                            #endregion
                        }
                        else if (request.TypeId == 183 && request.StepNo == 2)
                        {
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure,
                                new SqlParameter[] {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@StepNo", request.StepNo),
                                });
                        }
                        else if (request.TypeId == 65 && request.StepNo == 3)
                        {
                            TempData["Message"] += "<br/>" + Message_50;
                        }
                        else if (request.TypeId == 45 && request.StepNo == 2 && objects[0].Property9 == "Đã nhận" && objects[0].Property1 == "Cấp mới")
                        {
                            TempData["Message"] = "Hoàn tất thành công!";
                        }
                        else if (request.TypeId == 51 && flagCLComplete == true)
                        {
                            TempData["Message"] = "Hoàn tất thành công!";
                        }
                        else if (request.TypeId == 94 && ((request.StepNo == 1 && form["CheckDuyet_92_94"].ToString() == "0")))
                        {
                            TempData["Message"] = "Hoàn tất thành công!";
                        }
                        if (request.TypeId == 51)
                        {

                            //▼	Edit - VietMXH - 22/02/2019 - EmptyPageForMobile==================================================
                            if (Convert.ToString(form["nguyenNhanGiamGia_Select"]) == "1")
                            {
                                return null;
                            }
                            if (Convert.ToString(form["g__FromForm"]) == "Mobile")
                            {
                                return RedirectToAction("EmptyPageForMobile", "Requests");
                            }

                            if (permissions.Contains(Permission.Sender))
                            {
                                return RedirectToAction("Sent", "Home");
                            }
                            return RedirectToAction("Index", "Home");
                            //▲	Edit - VietMXH - 22/02/2019 - EmptyPageForMobile==================================================

                        }
                        #region "Tạo session đẩy thông tin CL Bill"
                        else if (request.TypeId == 163 && Convert.ToString(form["Approved_HuongXL_164"]) == "0")
                        {

                            if (Session[Key.Session.BillInfo] != null)
                            {
                                Session[Key.Session.BillInfo] = null;
                            }
                            int SoLuongTaoBill = 0;
                            var requestdetail164 = (from a in db.RequestDetails
                                                    where a.RequestId == request.Id
                                                    select a).ToList();
                            foreach (RequestDetail item164 in requestdetail164)
                            {
                                SoLuongTaoBill += Convert.ToInt16(item164.Quantity1);
                            }
                            // DataTable dtBillInfor
                            DataTable dtBillInfor = new DataTable();
                            dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
                            dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
                            dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã phòng ban nhận
                            dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
                            dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
                            dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
                            dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
                            dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
                            dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
                            dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
                            dtBillInfor.Columns.Add("TypeId", typeof(string));     //Mô tả loại calllog// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                            dtBillInfor.Rows.Add(
                                UserManager.CurrentUser.InsideCode,
                                "Bóng đèn cấp mới",
                                request.FromShop,
                                "",
                                "",
                                "0",
                                request.Id.ToString(),
                                SoLuongTaoBill.ToString(),
                                request.StepNo.ToString(),
                                "Cấp bóng đèn",
                                "163");// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                            Session[Key.Session.BillInfo] = dtBillInfor;

                            return RedirectToAction("CreateBillFromHC", "Requests");
                        }
                        //▼ Add - NgoanHT - 29/11/2017 - Loại: 154, 45 - Thêm
                        else if (request.TypeId == 45 && Convert.ToString(form["Approved_HuongXL_45"]) == "0")
                        {
                            if (Session[Key.Session.BillInfo] != null)
                            {
                                Session[Key.Session.BillInfo] = null;
                            }
                            //▼ Add - NgoanHT - 30/11/2017 - Loại: 154, 45 - Thêm biến ShopOrOffice
                            string ShopOrOffice = string.Empty;
                            if (request.FromShop != "" && request.FromShop != null)
                            {
                                ShopOrOffice = request.FromShop;
                            }
                            else
                            {
                                ShopOrOffice = request.FromOffice;
                            }
                            //▲ Add - NgoanHT - 29/11/2017 - Loại: 154, 45 - Thêm biến ShopOrOffice
                            var requestdetail45 = (from a in db.RequestDetails
                                                   where a.RequestId == request.Id
                                                   select a).ToList();
                            // DataTable dtBillInfor
                            DataTable dtBillInfor = new DataTable();
                            dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
                            dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
                            dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã phòng ban nhận
                            dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
                            dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
                            dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
                            dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
                            dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
                            dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
                            dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
                            dtBillInfor.Columns.Add("TypeId", typeof(string));     //Mô tả loại calllog// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển

                            //▼ Edit - NgoanHT - 01/12/2017 - Loại: 154, 45 - Sửa truyền dữ liệu cho session
                            if (request.StepNo == 1)
                            {
                                foreach (RequestDetail item45 in requestdetail45)
                                {
                                    if (item45.Property2 != "Không lỗi")
                                    {
                                        ShopOrOffice = (request.FromShop != "" && request.FromShop != null) ? request.FromShop : request.FromOffice;
                                        dtBillInfor.Rows.Add(UserManager.CurrentUser.InsideCode, item45.Property6.ToString(), ShopOrOffice, "", "", "0", request.Id.ToString(), Convert.ToInt16(item45.Quantity1), request.StepNo.ToString(), "", "45");// EXit - NgoanHT - 30/11/2017 - Loại: 154, 45 - Sửa nội dung hàng hóa// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                                    }
                                }
                            }
                            else
                            {
                                DataTable tb = new EmployeeDAL().GetDetail(request.Assigner);
                                DataRow dr = tb.Rows[0];
                                if (dr != null)
                                {
                                    ShopOrOffice = (dr["WarehouseCode"].ToString() != "" && dr["WarehouseCode"].ToString() != null) ? dr["WarehouseCode"].ToString() : dr["OrganizationHierachyCode"].ToString();
                                }
                                else
                                {
                                    ShopOrOffice = "";
                                }
                                foreach (RequestDetail item45 in requestdetail45)
                                {
                                    if (item45.Property2 != "Không lỗi")
                                    {
                                        dtBillInfor.Rows.Add(UserManager.CurrentUser.InsideCode, item45.Property4.ToString(), ShopOrOffice, "", "", "0", request.Id.ToString(), Convert.ToInt16(item45.Quantity1), request.StepNo.ToString(), "", "45");// EXit - NgoanHT - 30/11/2017 - Loại: 154, 45 - Sửa nội dung hàng hóa// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                                    }
                                }
                            }
                            if (dtBillInfor.Rows.Count > 0)
                            {
                                Session[Key.Session.BillInfo] = dtBillInfor;
                                return RedirectToAction("CreateBillFromHC", "Requests");
                            }
                            else
                            {
                                if (permissions.Contains(Permission.Sender))
                                {
                                    return RedirectToAction("Sent", "Home");
                                }
                                return RedirectToAction("Index", "Home");
                            }
                            //▲ Edit - NgoanHT - 01/12/2017 - Loại: 154, 45 - Sửa truyền dữ liệu cho session
                        }
                        //▲ Add - NgoanHT - 29/11/2017 - Loại: 154, 45 - Thêm
                        //ChuongNT3 - 28/06/2018 - chuyển loại 23 xuống nút chuyển bước
                        //ChuongNT3 - 19/09/2018 - thêm nút tạo bill
                        else if (((request.TypeId == 130 && request.StepNo == 3) || (request.TypeId == 162 && request.StepNo == 5) || (request.TypeId == 155 && request.StepNo == 5)) && Convert.ToString(form["Approved_HuongXL_45"]) == "0")
                        {
                            if (Session[Key.Session.BillInfo] != null)
                            {
                                Session[Key.Session.BillInfo] = null;
                            }
                            var RequestDetailHC_ShopSend = (from a in db.RequestDetails
                                                            where a.RequestId == request.Id
                                                            select a).ToList();
                            // DataTable dtBillInfor
                            DataTable dtBillInfor = new DataTable();
                            dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
                            dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
                            dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã phòng ban nhận
                            dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
                            dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
                            dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
                            dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
                            dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
                            dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
                            dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
                            dtBillInfor.Columns.Add("TypeId", typeof(string));     //Mô tả loại calllog// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                            foreach (RequestDetail itemHC in RequestDetailHC_ShopSend)
                            {
                                if (request.TypeId == 130 && itemHC.Quantity1 != null && itemHC.Quantity1 > 0)
                                {

                                    dtBillInfor.Rows.Add(
                                      UserManager.CurrentUser.InsideCode,
                                      itemHC.ItemId.ToString(),
                                      request.FromShop,
                                      "",
                                      "",
                                      "0",
                                      request.Id.ToString(),
                                      itemHC.Quantity1 != null ? itemHC.Quantity1.ToString() : "0",
                                      request.StepNo.ToString(),
                                      "",
                                      "23");
                                }
                                //ChuongNT3 - 19/09/2018 - thêm nút tạo bill
                                else if ((request.TypeId == 162 || request.TypeId == 155) && itemHC.Quantity2 != null && itemHC.Quantity2 > 0)
                                {
                                    dtBillInfor.Rows.Add(
                                      UserManager.CurrentUser.InsideCode,
                                      itemHC.ItemId.ToString(),
                                      request.FromShop,
                                      "",
                                      "",
                                      "0",
                                      request.Id.ToString(),
                                      itemHC.Quantity2.ToString(),
                                      request.StepNo.ToString(),
                                      "",
                                      "23");
                                }
                            }
                            if (dtBillInfor.Rows.Count > 0)
                            {
                                Session[Key.Session.BillInfo] = dtBillInfor;
                                return RedirectToAction("CreateBillFromHC", "Requests");
                            }
                            else
                            {
                                if (permissions.Contains(Permission.Sender))
                                {
                                    return RedirectToAction("Sent", "Home");
                                }
                                return RedirectToAction("Index", "Home");
                            }
                        }
                        #endregion
                        else
                        {
                            if (permissions.Contains(Permission.Sender))
                            {
                                return RedirectToAction("Sent", "Home");
                            }
                            return RedirectToAction("Index", "Home");
                        }
                    }
                    else
                    {
                        TempData["Message"] = "Chỉ người xử lý hoặc người trong nhóm xử lý mới được quyền chuyển bước";
                        return RedirectToAction("Details", "Requests", new { id = request.Id });
                    }

                }
                else
                {
                    #region Not Valid
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region Log lỗi
                Logger.WriteLogError("RequestsController ChangeStep()", String.Format("{0} -  Id:{1} - sender :{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }

        [ValidateInput(false)]
        public ActionResult Complete(FormCollection form)
        {
            #region ===Kiểm tra đăng nhập===
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            #endregion

            var requestId = form["RequestId"].EParseToLong();
            string sender = UserManager.CurrentUser.InsideCode;

            try
            {
                #region ===Thông tin===
                string message = form["Message"].ToString();
                var details = form["Details"].ToString();
                var objects = JsonConvert.DeserializeObject<dynamic>(details);

                var detailsCc = form["DetailsCc"].ToString();
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);

                string CapNhatPos = string.Empty;
                #endregion

                bool FlagUpdateCallLogMkts = false;// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                var firstTimeUpdate = false;

                Request request = null;
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }

                if (request != null)
                {
                    List<Permission> permissions = GetPermissions(request.Id);

                    #region ===Vetify===
                    RequestDetail requestdetail_ = null;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        requestdetail_ = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                    }

                    if (request.Status == Key.StatusRequest.Complete)
                    {
                        #region request.Status == Key.StatusRequest.Complete
                        switch (request.TypeId)
                        {
                            case 1:
                                //  Các loại này không làm gì cả
                                break;
                            case 3:
                                //  Các loại này không làm gì cả
                                break;
                            case 19:
                                TempData["Message"] = "Trạng Thái Request đã hoàn tất không thể cập nhật!. Bạn vui lòng tạo Request mới để CSKH xử lý.";
                                return RedirectToAction("Details", new { Id = request.Id });
                                break;
                            case 51:
                                //  Các loại này không làm gì cả
                                break;
                            case 56:
                                //  Các loại này không làm gì cả
                                break;
                            case 121:
                                //  Cho Duyệt nhiều lần loại 121
                                if (requestdetail_.Approved == false)
                                {
                                    TempData["Message"] = "Calllog đơn hàng ECOM đã hoàn tất và trạng thái duyệt là huỷ nên không thể cập nhật!";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                                break;
                            case 157:
                                //  Các loại này không làm gì cả
                                break;
                            case 183:
                                //  Các loại này không làm gì cả
                                break;
                            default:
                                TempData["Message"] = "Trạng Thái Request đã hoàn tất không thể cập nhật!";
                                return RedirectToAction("Details", new { Id = request.Id });
                                break;
                        }
                        #endregion
                    }

                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }

                    if (request.TypeId == 185)
                    {
                        //  Không làm gì cả
                    }
                    else
                    {
                        if (request.Status != Key.StatusRequest.Reply
                            && !permissions.Contains(RequestsController.Permission.Admin)
                            && !permissions.Contains(RequestsController.Permission.SupperAdmin)
                             && permissions.Contains(RequestsController.Permission.Sender)
                            && !permissions.Contains(RequestsController.Permission.Assigner)
                            && !permissions.Contains(RequestsController.Permission.GroupAssigner))
                        {
                            TempData["Message"] = "Người tạo yêu cầu chỉ được hoàn tất khi yêu cầu Đã trả lời !";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                    }

                    if (!permissions.Contains(Permission.Admin)
                        && !permissions.Contains(Permission.SupperAdmin)
                        && !permissions.Contains(Permission.Sender)
                        && !permissions.Contains(Permission.Assigner)
                        && !permissions.Contains(Permission.GroupAssigner)
                        && !permissions.Contains(Permission.OldStepAssigner))
                    {
                        TempData["Message"] = "Không có quyền hoàn tất";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }

                    #region switch (request.TypeId)
                    switch (request.TypeId)
                    {
                        case 19:
                            #region MyRegion
                            if (!permissions.Contains(Permission.SupperAdmin))
                            {
                                Conversation conversation = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    conversation = db.Conversations.FirstOrDefault(x => x.RequestId == request.Id && x.Type == Key.Conversation.Trouble && x.Message != null && x.Message.Length > 0);
                                }
                                if (conversation == null)
                                {
                                    TempData["Message"] = "Yêu cầu nhập thông tin hướng xử lý trước khi hoàn thành";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                            }
                            #endregion
                            break;
                        case 20:
                            #region MyRegion
                            if (request.Status != Key.StatusRequest.Reply && request.Status != Key.StatusRequest.Complete && !permissions.Contains(Permission.SupperAdmin))
                            {
                                TempData["Message"] = "Yêu cầu thông báo Inside cần thực hiện Trả lời trước khi Hoàn tất";
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                            #endregion
                            break;
                        case 22:
                            #region MyRegion
                            if (request.StepNo < 2 && !permissions.Contains(Permission.SupperAdmin))
                            {
                                TempData["Message"] = "Yêu cầu đồ dùng marketing không thể thực hiện hoàn tất ở bước " + request.StepNo;
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                            #endregion
                            break;
                        case 60:
                            #region MyRegion
                            if (request.StepNo < 2 && !permissions.Contains(Permission.SupperAdmin))
                            {
                                TempData["Message"] = "Yêu cầu xác nhận công nợ không thể thực hiện hoàn tất ở bước " + request.StepNo;
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                            #endregion
                            break;
                        //▼ Add - TuanNA89 - 27/12/2017 - Calllog hàng Demo 65
                        case 65:
                            {
                                #region MyRegion
                                RequestDetail requestdetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                }
                                if (request.Status < 4)
                                {
                                    if (requestdetail.Quantity1 == null)
                                    {
                                        TempData["Message"] = "Yêu cầu chưa được trả lời";
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                    else if (requestdetail.Quantity1 != 1)
                                    {
                                        TempData["Message"] = "POS đã trả lời kết quả thông tin kiểm tra sản phẩm và imei không hợp lệ, xin kiểm tra lại";
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                }
                                #endregion
                                break;
                            }
                        //▲ Add - TuanNA89 - 27/12/2017 - Calllog hàng Demo 65
                        //▼ Add - TuanNA89 - 29/12/2017 - Calllog nhập hàng Demo 114
                        case 114:
                            {
                                #region MyRegion
                                RequestDetail requestdetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                }
                                if (request.Status < 4)
                                {
                                    if (requestdetail.Quantity1 == null)
                                    {
                                        TempData["Message"] = "Yêu cầu chưa được trả lời";
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                    else if (requestdetail.Quantity1 != 1)
                                    {
                                        TempData["Message"] = "POS đã trả lời kết quả thông tin kiểm tra sản phẩm và imei không hợp lệ, xin kiểm tra lại";
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                }
                                #endregion
                                break;
                            }
                        //▲ Add - TuanNA89 - 29/12/2017 - Calllog nhập hàng Demo 114
                        case 145:
                            #region MyRegion
                            if (request.StepNo == 1)
                            {
                                RequestDetail requestdetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                }
                                if (requestdetail.Quantity == 2)
                                {
                                    TempData["Message"] = "Không thể hoàn tất yêu cầu có nhóm hàng này";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                            }
                            #endregion
                            break;
                        case 157:
                            #region MyRegion
                            Conversation cvInternal = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                cvInternal = db.Conversations.FirstOrDefault(x => x.RequestId == request.Id && x.Type == Key.Conversation.Internal && x.Message != null && x.Message.Length > 0);
                            }
                            if (cvInternal == null)
                            {
                                TempData["Message"] = "Vui lòng cập nhật hướng xử lý nội bộ trước khi hoàn tất";
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                            #endregion
                            break;
                        case 183:
                            #region MyRegion
                            if (request.StepNo == 2 && request.Status == 4)
                            {
                                RequestDetail requestdetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                }
                                if (requestdetail.Approved == true)
                                {
                                    TempData["Message"] = "Không thể hoàn tất yêu cầu cho Calllog này ";
                                    return RedirectToAction("Details", new { Id = request.Id }); // Add - NghiaTV5 - 20/11/2017 - RedirectToAction
                                }
                            }
                            #endregion
                            break;

                        default:
                            break;
                    }
                    #endregion

                    if (details == "" && !permissions.Contains(Permission.SupperAdmin))
                    {
                        TempData["Message"] = "Không Lấy được dữ liệu cập nhật vui lòng gửi lại!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    #endregion

                    #region ===Insert Converstation===
                    if (message.Length > 0)
                    {
                        var conversation = new Conversation();
                        conversation.RequestId = request.Id;
                        conversation.Sender = sender;
                        conversation.Message = message;
                        conversation.Status = Key.Status.Available;
                        conversation.TimeCreate = DateTime.Now;
                        conversation.Type = Key.Conversation.Comment;
                        conversation.StepNo = request.StepNo;
                        db.Conversations.Add(conversation);
                    }
                    #endregion

                    RequestStep step = null;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        step = db.RequestSteps.FirstOrDefault(
                          x => x.RequestId == request.Id
                          && x.Status == Key.Status.Available
                          && x.StepNo == request.StepNo);
                    }

                    byte oldStatus = request.Status;

                    if (request.TypeId == 3)
                    {
                        if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        {
                            if (request.StepNo == 1 || request.StepNo == 3)
                            {
                                string timeRecipt = form["dateRecive"];
                                string timeUat = form["dateUAT"];
                                string timeGolive = form["dateGolive"];
                                string timeGoliveDK = form["dateGoliveDK"];
                                //string timeFuFi = form["dateFuFi"];

                                if (timeRecipt == "") { request.TimeReceipt = null; }
                                else { request.TimeReceipt = DateTime.Parse(timeRecipt); }

                                if (timeUat == "") { request.TimeUat = null; }
                                else { request.TimeUat = DateTime.Parse(timeUat); }

                                if (timeGolive == "") { request.TimeGolive = null; }
                                else { request.TimeGolive = DateTime.Parse(timeGolive); }

                                if (timeGoliveDK == "") { request.TimeGoliveExpected = null; }
                                else { request.TimeGoliveExpected = DateTime.Parse(timeGoliveDK); }

                                //if (timeFuFi == "") { request.TimeFutureFinish = null; }
                                //else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }
                            }
                            else if (request.StepNo == 2)
                            {
                                string timeFuFi = form["dateFuFi"];
                                if (timeFuFi == "") { request.TimeFutureFinish = null; }
                                else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }
                            }
                        }
                    }

                    if (request.Status == Key.StatusRequest.Complete)
                    {
                        //  Không làm gì cả
                    }
                    else
                    {
                        #region request.Status != Key.StatusRequest.Complete
                        request.Status = Key.StatusRequest.Complete;
                        request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                        request.TimeClose = DateTime.Now;
                        request.StepStatus = Key.StatusRequest.Reply;

                        if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin) || permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        {
                            request.Assigner = sender;
                        }

                        if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            request.TimeLastAdminUpdate = DateTime.Now;
                            request.LastAdminUpdate = sender;
                        }

                        #region ===Update or Insert RequestStep===
                        if (step != null)
                        {
                            step.TimeEnd = step.TimeEnd == null ? DateTime.Now : step.TimeEnd;
                            if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin) || permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                            {
                                step.Assigner = sender;
                            }
                        }
                        else
                        {
                            RequestStep oldStep = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                oldStep = (from s in db.RequestSteps
                                           where s.RequestId == request.Id
                                           && s.StepNo == request.StepNo - 1
                                           && s.Status == Key.Status.Available
                                           select s).FirstOrDefault();
                            }

                            step = new RequestStep();
                            step.RequestId = request.Id;
                            step.TimeCreate = DateTime.Now;
                            step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                            step.TimeEnd = DateTime.Now;
                            step.Assigner = sender;
                            step.StepNo = request.StepNo;
                            step.Status = Key.Status.Available;

                            db.RequestSteps.Add(step);
                        }
                        #endregion
                        #endregion
                    }

                    //ChuongNT3 - 22/10/2018 - thêm hình up thêm
                    string shop_cu = string.Empty;
                    string shop_moi = string.Empty;
                    #region ===Update Items===
                    switch (request.TypeId) //  NOTE: Muốn sửa code switch liên hệ VietMXH hướng dẫn
                    {
                        case 19:
                            request.TimeGoliveExpected = null;
                            break;
                        case 22:
                            #region Đồ dùng mko
                            ShopDAL shopDal = new ShopDAL();
                            var shopCreate = shopDal.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop                                   

                                    int moneyDifference = (sum - summoi);//Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                    if (moneyDifference != 0 && shopCreate != null)
                                    {
                                        SqlParameter[] param = new SqlParameter[]{
                                                new SqlParameter("@ShopCode",requestDetail.ShopCode),
                                                new SqlParameter("@ItemId",requestDetail.ItemId),
                                                new SqlParameter("@Quantity",moneyDifference),//Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                                new SqlParameter("@RequestId",request.Id),
                                            };
                                        sql.ExecuteWithoutResult("sp_Insert_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                                        FlagUpdateCallLogMkts = true;//Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                                    }
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                }
                            }
                            #endregion
                            break;

                        //▼	Edit - VietMXH - 07/07/2018 - Muốn Sửa Code này liên hệ VietMXH Hướng dẫn==================================================
                        case 23:
                            //▼	Edit - ThuongNM2 - 02/01/2019 - Thay đổi Time
                            #region Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC
                            #region Automatic
                            if (objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        //requestdetail.ItemId = item.ItemId;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Note = item.Note;
                                        //requestdetail.Status = item.Status
                                        requestdetail.Sum = item.Sum;
                                        requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                        requestdetail.EmpCode = item.EmpCode;
                                        requestdetail.Price = item.Price;
                                        //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                        requestdetail.ShopCode = item.ShopCode;
                                        requestdetail.ShopCode2 = item.ShopCode2;
                                        requestdetail.OfficeCode = item.OfficeCode;
                                        requestdetail.CustomerCode = item.CustomerCode;
                                        requestdetail.CustomerName = item.CustomerName;
                                        requestdetail.SaleCode = item.SaleCode;
                                        #region Time1
                                        if (item.Time1 == null)
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time1;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time1 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time2
                                        if (item.Time2 == null)
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time2;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time2 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time3  // edit-21/08/2019
                                        if (item.TimeConfirm == null)
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.TimeConfirm;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time3 = null;
                                            }
                                        }
                                        #endregion
                                        requestdetail.Money1 = item.Money1;
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Money3 = item.Money3;
                                        requestdetail.Money4 = item.Money4;
                                        requestdetail.ProductCode = item.ProductCode;
                                        requestdetail.ProductName = item.ProductName;
                                        requestdetail.Imei = item.Imei;
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.EmpCode1 = item.EmpCode1;
                                        requestdetail.EmpCode2 = item.EmpCode2;
                                        requestdetail.EmpCode3 = item.EmpCode3;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        requestdetail.Quantity3 = item.Quantity3;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Quantity5 = item.Quantity5;
                                        requestdetail.Property1 = item.HinhThucXuat;// edit-20/08/2019
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property13 = item.NhanVienTT;  // LuanNT44-23/10/2019-23-edit SLAO shop
                                        requestdetail.Property14 = item.Property14;  // LuanNT44-23/10/2019-23-edit SLAO shop
                                        requestdetail.JobCode1 = item.JobCode1;
                                        requestdetail.JobCode2 = item.JobCode2;
                                    }
                                }
                            }
                            firstTimeUpdate = true;
                            #region Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC
                            string TPBconfirmSL = Convert.ToString(form["Approved_HuongXL_23"]);
                            if (request.StepNo == 1 && (request.FromOffice != "" && request.FromOffice != null) && (request.FromShop == "" || request.FromShop == null) && TPBconfirmSL == "1")
                            {
                                Conversation c = new Conversation();
                                c.RequestId = request.Id;
                                c.Sender = "-1";  //Add - LuanNT44 - 16/08/2019 - Loại 23 - HC
                                c.Message = "Hệ thống auto hoàn tất calllog do trưởng bộ phận confirm số lượng cấp = 0.";
                                c.Status = Key.Status.Available;
                                c.TimeCreate = DateTime.Now;
                                c.Type = Key.Conversation.Comment;
                                c.StepNo = request.StepNo;
                                db.Conversations.Add(c);


                                if (objects != null && objects.ToString() != "[]")
                                {
                                    foreach (var item in objects)
                                    {
                                        int id = item.Id;
                                        RequestDetail requestdetail_23 = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            requestdetail_23 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }

                                        if (requestdetail_23 != null)
                                        {
                                            if (request.StepNo == 1)
                                            {
                                                requestdetail_23.Quantity1 = item.Quantity1;
                                                requestdetail_23.Sum = item.Quantity1 * requestdetail_23.Price.GetValueOrDefault(0);
                                            }

                                        }
                                    }
                                }
                                db.SaveChanges();
                            }
                            #endregion
                            #endregion
                            break;
                        //#endregion
                        #endregion
                        //▲ Edit - ThuongNM2 - 02/01/2019 - Thay đổi Time
                        case 125:
                        case 126:
                        case 127:
                        case 129:
                        case 162:
                            #region Đồ dùng Hc
                            if ((request.TypeId == 127 && request.StepNo == 3) && Convert.ToString(form["Approved_HuongXL_45"]) == "1")
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request.Id;
                                converstation.Message = "Hệ thống auto sinh mã BBBG do shop được định nghĩa nội thành: " + request.Id.ToString();
                                converstation.Sender = "-1";
                                converstation.CreateBy = "-1";
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 2;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Comment;
                                db.Conversations.Add(converstation);
                            }
                            //'▼(#006)Add===================================    
                            ShopDAL shopDal_23 = new ShopDAL();
                            var shopCreate_23 = shopDal_23.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds_23 = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityUpdate = item.QuantityAvaiable == null ? 0 : item.QuantityAvaiable; // Edit - ThuongNM2 - 2018/06/01 - Chỉnh sửa bước 2 duyệt không cập nhật QuantityAvailable
                                int thanhtien = item.Sum;
                                RequestDetail requestDetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                    int quantityNewest = requestDetail.QuantityAvaiable == null
                                                        ? requestDetail.Quantity.GetValueOrDefault(0)
                                                        : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                    int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate_23 != null)
                                    {
                                        //'▼(#005)Update=================================== 
                                        //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                        //                                       && x.Month == request.TimeCreate.Month
                                        //                                       && x.Year == request.TimeCreate.Year);
                                        ItemUsedTmp itemUsed = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            itemUsed = itemUseds_23.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                   && x.Month == request.TimeCreate.Month
                                                                               && x.Year == request.TimeCreate.Year);
                                        }
                                        //'▲(#005)Update===================================

                                        ///==== Hiền.Đoàn 21.02.2017 Lưu trừ hạn mức loại 23 khi bước == 4
                                        if ((request.TypeId == 23 && request.StepNo == 4)
                                            || (request.TypeId == 125 && request.StepNo == 4)
                                            || (request.TypeId == 126 && request.StepNo == 5)
                                            || (request.TypeId == 127 && request.StepNo == 3)
                                            || (request.TypeId == 162 && request.StepNo == 5)
                                            || new List<int> { 129 }.Contains(request.TypeId))
                                        {
                                            if (itemUsed == null)
                                            {
                                                itemUsed = new ItemUsedTmp();
                                                itemUsed.GroupId = item.GroupId;
                                                itemUsed.GroupValue = moneyDifference;
                                                itemUsed.Month = request.TimeCreate.Month;
                                                itemUsed.Year = request.TimeCreate.Year;
                                                itemUsed.ShopCodeB1 = shopCreate_23.WarehouseCodeB1;
                                                itemUsed.RequestId = request.Id;
                                                itemUsed.Status = Key.Status.Available;
                                                itemUseds_23.Add(itemUsed);
                                            }
                                            else
                                            {
                                                itemUsed.GroupValue += moneyDifference;
                                            }
                                            //db.ItemUsedTmps.Add(itemUsed);
                                        }
                                    }
                                    //▼ Edit - ThuongNM2 - 06/06/2018 - Thay đổi Sum = Quantity1*Price
                                    if (request.TypeId == 23)//Duyệt
                                    {
                                        //▼	Edit - ThuongNM2 - 02/01/2019 - Thay đổi Time
                                        if (request.StepNo == 2)
                                        {
                                            request.TimeFinish = null;
                                            request.TimeClose = null;
                                            requestDetail.QuantityAvaiable = null;
                                            requestDetail.Sum = item.Quantity1 * requestDetail.Price.GetValueOrDefault(0);
                                        }
                                        //▲ Edit - ThuongNM2 - 02/01/2019 - Thay đổi Time
                                        else if (request.StepNo > 3)//Hoàn tất
                                        {
                                            requestDetail.QuantityAvaiable = quantityUpdate;
                                            requestDetail.Sum = item.Quantity1 * requestDetail.Price.GetValueOrDefault(0);
                                        }
                                    }
                                    else
                                    {
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                    }
                                    //▲ Edit - ThuongNM2 - 06/06/2018 - Thay đổi Sum = Quantity1*Price
                                    requestDetail.Quantity1 = item.Quantity1;
                                    requestDetail.Quantity3 = item.Quantity3;

                                    string Property2 = string.Empty;
                                    if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                    {
                                        if (item.HTX == item.HinhThucXuat)
                                        {
                                            Property2 = null;
                                        }
                                        else
                                        {
                                            Property2 = item.HTX + "->" + item.HinhThucXuat;
                                        }
                                    }
                                    else
                                    {
                                        if (item.HinhThucXuat == requestDetail.Property1)
                                        {
                                            Property2 = requestDetail.Property2;
                                        }
                                        else
                                        {
                                            if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                            {
                                                Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                            }
                                            else
                                            {
                                                Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                            }
                                        }
                                    }
                                    requestDetail.Property2 = Property2;
                                    requestDetail.Property1 = item.HinhThucXuat;

                                    //▼ Edit - ThuongNM2 - 29/06/2018 - Cập nhật Time3
                                    string timeF = item.TimeConfirm;
                                    if (timeF != null)
                                    {
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestDetail.Time3 = timeF.EParseToDateTime(format);
                                        }
                                    }
                                    //▲ Edit - ThuongNM2 - 29/06/2018 - Cập nhật Time3

                                }
                            }

                            if (itemUseds_23.Count > 0)
                            {
                                db.ItemUsedTmps.AddRange(itemUseds_23);
                            }
                            //'▲(#006)Add===================================
                            #endregion
                            break;
                        //▲	Edit - VietMXH - 07/07/2018 - Muốn Sửa Code này liên hệ VietMXH Hướng dẫn==================================================

                        //▼  Add - LuanNT44 - 03/12/2019 - Loại 24 - CSVC -- LuanNT44 - 11/04/2020 - 24 - edit
                        case 24:
                            #region Automatic
                            #endregion
                            break;
                        //▲  Add - LuanNT44 - 03/12/2019 - Loại 24 - CSVC -- LuanNT44 - 11/04/2020 - 24 - edit

                        case 28:
                            #region Automatic
                            //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        var l__TienChenhLech__Old = (requestdetail.Money3 != 0) ? requestdetail.Money3 : 0;
                                        double l__TienChenhLech__New = double.TryParse(item.TienChenhLech.ToString(), out l__TienChenhLech__New) ? l__TienChenhLech__New : 0;

                                        requestdetail.Money3 = item.TienChenhLech;
                                        requestdetail.Money4 = item.TienSoPhuNH;
                                        requestdetail.Money2 = item.TienChoXuLy;
                                        requestdetail.Property4 = item.NguyenNhanChenhLech;
                                        requestdetail.Property5 = item.HuongXuLyCuaKTHO;
                                        requestdetail.SaleCode = item.SoSO;
                                        requestdetail.Numeric1 = item.SoTienTruyThu;

                                        #region Lưu lịch sử cập nhật
                                        if (l__TienChenhLech__Old != l__TienChenhLech__New)
                                        {
                                            RequestDetail detailsNew = new RequestDetail();
                                            detailsNew.RequestId = request.Id;
                                            detailsNew.Status = Key.Status.Unavailable;
                                            detailsNew.Quantity = request.StepNo;
                                            detailsNew.Time1 = DateTime.Now;
                                            detailsNew.EmpCode = UserManager.CurrentUser.InsideCode;
                                            detailsNew.Money2 = item.TienChoXuLy;
                                            detailsNew.Money3 = item.TienChenhLech;
                                            detailsNew.Money4 = item.TienSoPhuNH;
                                            detailsNew.Property4 = item.NguyenNhanChenhLech;
                                            detailsNew.Property5 = item.HuongXuLyCuaKTHO;
                                            detailsNew.SaleCode = item.SoSO;
                                            detailsNew.Numeric1 = item.SoTienTruyThu;
                                            db.RequestDetails.Add(detailsNew);
                                        }
                                        #endregion
                                    }
                                }
                            }
                            //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                            #endregion
                            break;
                        case 42:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.RequestId = request.Id;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Sum = item.Sum;
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 45:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                string shopOrOffice = objects[0].ShopCode;
                                if (shopOrOffice != "" && shopOrOffice != null)
                                {
                                    var checkShop = insDB.Warehouses.FirstOrDefault(x => x.WarehouseCode == shopOrOffice);
                                    if (checkShop != null)
                                        request.FromShop = shopOrOffice;
                                    else
                                        request.FromOffice = shopOrOffice;
                                }
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Quantity3 = item.ParentIdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Quantity4 = item.IdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property11 = item.Code;  //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 
                                        requestdetail.Note = item.Note;
                                        requestdetail.SaleCode = item.SaleCode; // xác nhận hết hạn bh
                                        requestdetail.ShopCode = item.ShopCode;
                                    }
                                    else
                                    {
                                        requestdetail = new RequestDetail();
                                        requestdetail.RequestId = request.Id;
                                        requestdetail.Status = Key.Status.Available;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Quantity3 = item.ParentIdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Quantity4 = item.IdSystem;  //ChuongNT3 - 20/03/2018 - Thêm cột KPI 
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property11 = item.Code; //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 
                                        requestdetail.Note = item.Note;
                                        requestdetail.SaleCode = item.SaleCode; // xác nhận hết hạn bh
                                        requestdetail.ShopCode = item.ShopCode;
                                        db.RequestDetails.Add(requestdetail);
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 51:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity3 = item.Approved;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Property8 = item.Property8;
                                    }
                                    //▼ ADD - LuanNT44 - 14/07/2020 - Ghi log old CL 51 DGG
                                    int Approved_51 = item.Approved;
                                    int Quantity4_51 = item.Quantity4;
                                    string Property7_51 = item.Property7;
                                    string Property8_51 = item.Property8;
                                    SqlParameter[] param_log_51 = new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id),
                                            new SqlParameter("@UserName", UserManager.CurrentUser.InsideCode),
                                            new SqlParameter("@Quantity3", Approved_51),
                                            new SqlParameter("@Quantity4", Quantity4_51),
                                            new SqlParameter("@Property7", Property7_51),
                                            new SqlParameter("@Property8", Property8_51),
                                            new SqlParameter("@TypeButton", "Complete")
                                        };
                                    sql.ExecuteWithoutResult("sp_Calllog_CreateLogDuyetGG_old_51", CommandType.StoredProcedure, param_log_51);
                                    //▲ ADD - LuanNT44 - 14/07/2020 - Ghi log old CL 51 DGG
                                    //▼  Add-LuanNT44-29/08/2019-Loại 51- Thêm check quỹ hoàn tất
                                    if (request.StepNo == 4 && objects[0].Approved == 2) // LuanNT44-30/08/2019
                                    {
                                        string PTGiamGia = item.Property8; // LuanNT44-26/09/2019
                                        DataTable tb = sql.ExecuteCommand("sp_CalllogCheckQuyDuyetGiamGia_51", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                            new SqlParameter("@RequestID", request.Id),
                                            new SqlParameter("@Property8", PTGiamGia), // LuanNT44-26/09/2019
                                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    });

                                        if (tb.Rows.Count > 0 && tb != null)
                                        {
                                            if (int.Parse(tb.Rows[0]["ReSult"].ToString()) == 0)
                                            {
                                                TempData["Message"] = "Hết quỹ giảm giá, bạn vui lòng cập nhật % dùng số tiền giảm giá = 0!";
                                                return RedirectToAction("Details", new { Id = request.Id });
                                            }
                                        }
                                    }
                                    //▲ Add-LuanNT44-29/08/2019-Loại 51- Thêm check quỹ hoàn tất
                                }
                            }
                            #endregion
                            break;
                        case 53:
                            #region Bàn giao quy giữa ca
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null)
                                    {
                                        requestDetail.Money3 = item.Money3;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 56:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Quantity2 = item.Quantity;
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 60:
                            #region Xác nhận công nợ
                            ShopDAL shopDal_60 = new ShopDAL();
                            var shopCreate_60 = shopDal_60.Get(request.FromShop);
                            foreach (var item in objects)
                            {
                                int id = item.Id;

                                ////int money3 = item.Money3;   //  VietMXH - 24/09/2017 - Không dùng

                                string conversations = item.EnterConversations;
                                bool? approted = item.Approved;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null)
                                {
                                    if (request.Sender == UserManager.CurrentUser.InsideCode)
                                    {
                                        requestDetail.Approved = approted;
                                    }
                                }
                                if (item.EnterConversations != null && item.EnterConversations != "")
                                {
                                    Conversation conversationRequestDetails = new Conversation();
                                    conversationRequestDetails.RequestId = request.Id;
                                    conversationRequestDetails.Sender = sender;
                                    conversationRequestDetails.Message = conversations;
                                    conversationRequestDetails.Status = Key.Status.Available;
                                    conversationRequestDetails.TimeCreate = DateTime.Now;
                                    conversationRequestDetails.Type = Key.Conversation.Comment;
                                    conversationRequestDetails.StepNo = request.StepNo;
                                    conversationRequestDetails.RequestDetailId = id;
                                    db.Conversations.Add(conversationRequestDetails);

                                    request.isHighlight = true;
                                }

                            }
                            #endregion
                            break;
                        case 61:
                            #region Đơn hàng 100tr
                            var itemFirst = objects[0];
                            string statusSO = string.Empty;
                            int saleCode = itemFirst.SaleCode;
                            if (itemFirst.Approved == true) { statusSO = "C"; }
                            else { statusSO = "K"; }
                            SqlParameter[] param_61 = new SqlParameter[] {
                                                     new SqlParameter("@Callog_ID",request.Id),
                                                     new SqlParameter("@SO_POS",saleCode),
                                                     new SqlParameter("@Status",statusSO),
                                                     new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                                    };
                            DataTable table = sql.ExecuteCommand("POS_ApproveBigMoney", CommandType.StoredProcedure, param_61);
                            DataRow dr = table.Rows[0];
                            if (dr != null)
                            {
                                CapNhatPos = dr[1].ToString();
                                if (dr[0].ToString() == "1")
                                {
                                    ShopDAL shopDal_61 = new ShopDAL();
                                    var shopCreate_61 = shopDal_61.Get(request.FromShop);
                                    foreach (var item in objects)
                                    {
                                        int id = item.Id;
                                        RequestDetail requestDetail = new RequestDetail();
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestDetail != null)
                                        {
                                            requestDetail.Approved = item.Approved;
                                        }
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 64:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 65:
                            #region Automatic
                            #endregion
                            break;
                        case 68:
                            #region Kiểm tra tồn quỹ
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int Money = item.Money;
                                string Reason = item.Reason;
                                string CompensationPlans = item.CompensationPlans;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null)
                                {
                                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                    {
                                        requestDetail.Quantity1 = Money;
                                        requestDetail.Property1 = Reason;
                                        requestDetail.Property2 = CompensationPlans;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 69:
                            #region Code
                            foreach (var item in objects)
                            {
                                string EmpCode = item.EmpCode;
                                var CcExist = new Assigner();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    CcExist = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                                                                        && x.Type == Key.TypeAssigner.Cc
                                                                        && x.EmployeeCode == EmpCode);
                                }
                                if (CcExist == null)
                                {
                                    CcExist = new Assigner();
                                    CcExist.RequestId = request.Id;
                                    CcExist.EmployeeCode = EmpCode;
                                    CcExist.StepNo = request.StepNo;
                                    CcExist.Type = Key.TypeAssigner.Cc;
                                    CcExist.Status = Key.Status.Available;
                                    CcExist.TimeCreate = DateTime.Now;
                                    db.Assigners.Add(CcExist);
                                }
                                else
                                    CcExist.Status = Key.Status.Available;

                                int id = item.Id;
                                bool Approved = false;
                                if (item.Approved == true)
                                {
                                    Approved = true;
                                }
                                string imei = item.Imei;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (request != null)
                                {
                                    RequestStep requestStep = db.RequestSteps.FirstOrDefault(x => x.RequestId == request.Id);
                                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                                    {
                                        requestDetail.Approved = Approved;
                                        sql.ExecuteWithoutResult("Ins_Insert_AssetStep", CommandType.StoredProcedure, new SqlParameter[] {
                                        new SqlParameter("@IMEI", imei),
                                        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@CalllogStepNumber", request.StepNo),
                                        new SqlParameter("@CalllogStepFromDate", step.TimeStart),
                                        new SqlParameter("@CalllogStepToDate", step.TimeEnd),
                                        new SqlParameter("@CalllogID", request.Id),
                                    });
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 75:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 82:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Money2 = item.Money2;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 97:
                            #region Xác nhận công nợ
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Sender) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                ShopDAL shopDal_97 = new ShopDAL();
                                var shopCreate_97 = shopDal_97.Get(request.FromShop);
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    int money3 = item.Money3;
                                    string conversations = item.EnterConversations;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null && money3 != 0)
                                    {
                                        requestDetail.Money3 = money3;
                                    }

                                    if (item.EnterConversations != null && item.EnterConversations != "")
                                    {
                                        Conversation conversationRequestDetails = new Conversation();
                                        conversationRequestDetails.RequestId = request.Id;
                                        conversationRequestDetails.Sender = sender;
                                        conversationRequestDetails.Message = conversations;
                                        conversationRequestDetails.Status = Key.Status.Available;
                                        conversationRequestDetails.TimeCreate = DateTime.Now;
                                        conversationRequestDetails.Type = Key.Conversation.Comment;
                                        conversationRequestDetails.StepNo = request.StepNo;
                                        conversationRequestDetails.RequestDetailId = id;
                                        db.Conversations.Add(conversationRequestDetails);

                                        request.isHighlight = true;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 100:
                            #region kiem ke kho tong
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null)
                                    {
                                        requestDetail.EmpCode1 = item.EmpCode1;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 102:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 103:
                            #region Automatic
                            //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            #endregion
                            break;
                        case 104:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 108:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Note = item.Note;
                                        requestdetail.Property2 = item.Property2;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 109:
                            #region MyRegion
                            //▼	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================
                            if (request.StepNo == 1)
                            {
                                #region ===Bước 1===
                                if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                                {
                                    var details2 = Convert.ToString(form["Details2"]);
                                    var objects2 = JsonConvert.DeserializeObject<dynamic>(details2);
                                    if (objects2 != null && objects2.ToString() != "[]")
                                    {
                                        foreach (var item in objects2)
                                        {
                                            int id = item.Id;
                                            RequestDetail requestdetail = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                            }
                                            if (requestdetail != null)
                                            {
                                                requestdetail.Property1 = item.SoSO;
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else if (request.StepNo == 2)
                            {
                                #region ===Bước 2===
                                if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                                {
                                    if (objects != null && objects.ToString() != "[]")
                                    {
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            (from p in db.RequestDetails
                                             where p.RequestId == request.Id && p.Status == 1 && p.Quantity1 == 1
                                             select p).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                                        }

                                        foreach (var item in objects)
                                        {
                                            int id = item.Id;
                                            if (id == 0)
                                            {
                                                RequestDetail requestdetail = new RequestDetail();
                                                requestdetail.RequestId = request.Id;
                                                requestdetail.Status = Key.Status.Available;
                                                requestdetail.Quantity1 = 1;
                                                requestdetail.Property2 = item.Property2;
                                                requestdetail.Money1 = item.Money1;
                                                requestdetail.Money3 = item.Money3;
                                                requestdetail.Money4 = item.Money4;
                                                requestdetail.Quantity = item.Quantity;
                                                requestdetail.ShopCode = request.FromShop == null ? request.ToShop : request.FromShop;
                                                requestdetail.OfficeCode = request.FromOffice == null ? request.ToOffice : request.FromOffice;
                                                string timeF = item.Time3;
                                                string[] timeArrAss = timeF.Split('/');
                                                if (timeArrAss.Length == 3)
                                                {
                                                    string format = String.Format("{0}/{1}/{2}"
                                                       , timeArrAss[0].Length == 1 ? "d" : "dd"
                                                       , timeArrAss[1].Length == 1 ? "M" : "MM"
                                                       , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                                    requestdetail.Time3 = timeF.EParseToDateTime(format);
                                                }
                                                db.RequestDetails.Add(requestdetail);
                                            }
                                            else
                                            {
                                                RequestDetail requestdetail = new RequestDetail();
                                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                                {
                                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                                }
                                                if (requestdetail != null)
                                                {
                                                    requestdetail.Quantity1 = 1;
                                                    requestdetail.Property2 = item.Property2;
                                                    requestdetail.Money1 = item.Money1;
                                                    requestdetail.Money3 = item.Money3;
                                                    requestdetail.Money4 = item.Money4;
                                                    requestdetail.Quantity = item.Quantity;
                                                    requestdetail.Status = Key.Status.Available;
                                                    requestdetail.ShopCode = request.FromShop == null ? request.ToShop : request.FromShop;
                                                    requestdetail.OfficeCode = request.FromOffice == null ? request.ToOffice : request.FromOffice;
                                                    string timeF = item.Time3;
                                                    string[] timeArrAss = timeF.Split('/');
                                                    if (timeArrAss.Length == 3)
                                                    {
                                                        string format = String.Format("{0}/{1}/{2}"
                                                           , timeArrAss[0].Length == 1 ? "d" : "dd"
                                                           , timeArrAss[1].Length == 1 ? "M" : "MM"
                                                           , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                                        requestdetail.Time3 = timeF.EParseToDateTime(format);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            //▲	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================
                            #endregion
                            break;
                        case 112:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 115:
                            #region Đồ dùng mko do mkt tạo
                            ShopDAL shopDal_115 = new ShopDAL();
                            var shopCreate_115 = shopDal_115.Get(request.FromShop);
                            List<ItemUsedTmp> itemUseds_115 = new List<ItemUsedTmp>();
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop                                   

                                    int moneyDifference = (sum - summoi) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate_115 != null)
                                    {
                                        //'▼(#005)Update=================================== 
                                        //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                        //                                       && x.Month == request.TimeCreate.Month
                                        //                                       && x.Year == request.TimeCreate.Year);
                                        ItemUsedTmp itemUsed = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            itemUsed = itemUseds_115.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                           && x.Month == request.TimeCreate.Month
                                                                               && x.Year == request.TimeCreate.Year);
                                        }
                                        if (itemUsed == null)
                                        {
                                            itemUsed = new ItemUsedTmp();
                                            itemUsed.GroupId = item.GroupId;
                                            itemUsed.GroupValue = moneyDifference;
                                            itemUsed.Month = request.TimeCreate.Month;
                                            itemUsed.Year = request.TimeCreate.Year;
                                            itemUsed.ShopCodeB1 = shopCreate_115.WarehouseCodeB1;
                                            itemUsed.RequestId = request.Id;
                                            itemUsed.Status = Key.Status.Available;
                                            itemUseds_115.Add(itemUsed);
                                        }
                                        else
                                        {
                                            itemUsed.GroupValue += moneyDifference;
                                        }
                                        //db.ItemUsedTmps.Add(itemUsed);
                                        //'▲(#005)Update===================================
                                    }
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                }
                            }
                            if (itemUseds_115.Count > 0)
                            {
                                db.ItemUsedTmps.AddRange(itemUseds_115);
                            }
                            #endregion
                            break;
                        case 120:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        string timeF = item.Time;
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeF.EParseToDateTime(format);
                                            //requestdetail.Money2 = item.SoTienTruyThuDieuChinh;
                                        }
                                    }
                                    //if (request.StepNo == 3)
                                    //{
                                    //    //Gọi store gán truy thu lương cho nhân viên
                                    //    sql.ExecuteWithoutResult("Shop_UpdateRequestGomHangBaoHanh", CommandType.StoredProcedure, new SqlParameter[] 
                                    //    { 
                                    //        new SqlParameter("@RequestIds", request.Id),
                                    //        new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    //    });
                                    //}

                                }
                            }
                            #endregion
                            break;
                        case 121:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        //requestdetail.Property5 = item.Property5;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 122:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        string timeF = item.Time;
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeF.EParseToDateTime(format);
                                            requestdetail.Money2 = item.SoTienTruyThuDieuChinh;
                                        }
                                    }
                                    if (request.StepNo == 3)
                                    {
                                        //Gọi store gán truy thu lương cho nhân viên
                                        sql.ExecuteWithoutResult("Shop_UpdateRequestGomHangBaoHanh", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestIds", request.Id),
                                        new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    });
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 123:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 124:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null && item.Imei == "")
                                    {
                                        requestdetail.Quantity = item.Quantity;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 130:
                            #region MyRegion
                            if (request.StepNo == 3 && permissions.Contains(Permission.Assigner))
                            {
                                #region Đồ dùng hc
                                if (permissions.Contains(Permission.Sender)
                                    || permissions.Contains(Permission.Admin)
                                    || permissions.Contains(Permission.SupperAdmin)
                                    || permissions.Contains(Permission.Assigner)
                                    || permissions.Contains(Permission.GroupAssigner))
                                {
                                    #region update dinh muc
                                    ShopDAL shopDal_130 = new ShopDAL();
                                    var shopCreate_130 = shopDal_130.Get(request.FromShop);
                                    List<ItemUsedTmp> itemUseds_130 = new List<ItemUsedTmp>();
                                    foreach (var item in objects)
                                    {
                                        int id = item.Id;
                                        int quantityUpdate = item.QuantityAvaiable;
                                        int thanhtien = item.Sum;
                                        RequestDetail requestDetail = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestDetail != null && requestDetail.Quantity != null)
                                        {
                                            // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                            int quantityNewest = requestDetail.QuantityAvaiable == null
                                                                ? requestDetail.Quantity.GetValueOrDefault(0)
                                                                : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                            int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                            if (moneyDifference != 0 && shopCreate_130 != null)
                                            {
                                                //'▼(#005)Update=================================== 
                                                //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                                //                                       && x.Month == request.TimeCreate.Month
                                                //                                       && x.Year == request.TimeCreate.Year);
                                                ItemUsedTmp itemUsed = null;
                                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                                {
                                                    itemUsed = itemUseds_130.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                                   && x.Month == request.TimeCreate.Month
                                                                                       && x.Year == request.TimeCreate.Year);
                                                }
                                                //'▲(#005)Update===================================

                                                if (itemUsed == null)
                                                {
                                                    itemUsed = new ItemUsedTmp();
                                                    itemUsed.GroupId = item.GroupId;
                                                    itemUsed.GroupValue = moneyDifference;
                                                    itemUsed.Month = request.TimeCreate.Month;
                                                    itemUsed.Year = request.TimeCreate.Year;
                                                    itemUsed.ShopCodeB1 = shopCreate_130.WarehouseCodeB1;
                                                    itemUsed.RequestId = request.Id;
                                                    itemUsed.Status = Key.Status.Available;
                                                    itemUseds_130.Add(itemUsed);
                                                }
                                                else
                                                {
                                                    itemUsed.GroupValue += moneyDifference;
                                                }
                                                //db.ItemUsedTmps.Add(itemUsed);
                                            }
                                            requestDetail.QuantityAvaiable = quantityUpdate;
                                            requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                            requestDetail.Quantity1 = item.Quantity1;
                                            requestDetail.Quantity3 = item.Quantity3;

                                            string Property2 = string.Empty;
                                            if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                            {
                                                if (item.HTX == item.HinhThucXuat)
                                                {
                                                    Property2 = null;
                                                }
                                                else
                                                {
                                                    Property2 = item.HTX + "->" + item.HinhThucXuat;
                                                }
                                            }
                                            else
                                            {
                                                if (item.HinhThucXuat == requestDetail.Property1)
                                                {
                                                    Property2 = requestDetail.Property2;
                                                }
                                                else
                                                {
                                                    if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                                    {
                                                        Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                                    }
                                                    else
                                                    {
                                                        Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                                    }
                                                }
                                            }
                                            requestDetail.Property2 = Property2;
                                            requestDetail.Property1 = item.HinhThucXuat;
                                        }
                                    }
                                    if (itemUseds_130.Count > 0)
                                    {
                                        db.ItemUsedTmps.AddRange(itemUseds_130);
                                    }
                                    #endregion
                                }
                                #endregion
                            }
                            #endregion
                            break;
                        case 132:
                            #region MyRegion
                            if (objects != "" && objects != null)
                            {
                                sql.ExecuteWithoutResult("UpdateTimeCommitError", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@Time", objects)
                            });
                            }
                            #endregion
                            break;
                        case 134:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                //▼ Edit - LuanNT44 - 21/03/2019 -- thêm popup
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Time1 = item.Property9 == requestdetail.Property9 ? requestdetail.Time1 : DateTime.Now;
                                        requestdetail.Time2 = item.CalllogBill == requestdetail.CustomerName ? requestdetail.Time2 : DateTime.Now;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Note = item.Note;
                                        requestdetail.CustomerName = item.CalllogBill;
                                        requestdetail.Property11 = item.SoHoaDon; //ChuongNT3 - 08/05/2018 - Lưu số hóa đơn
                                        requestdetail.Property13 = item.SoVanDon;
                                        requestdetail.Property14 = item.LyDoKhongNhap; // Add - LuanNT44 - 28 / 03 / 2019 - Loại 134 - xét điều kiện chức danh show conversation
                                        if (item.ViTriCamShopGuiKhac != "" && item.ViTriCamShopGuiKhac != null)
                                        {
                                            requestdetail.Property18 = item.ViTriCamShopGuiKhac;
                                        }
                                        if (item.ViTriCamShopNhanKhac != "" && item.ViTriCamShopNhanKhac != null)
                                        {
                                            requestdetail.Property19 = item.ViTriCamShopNhanKhac;
                                        }
                                        shop_cu = requestdetail.ShopCode2;
                                        shop_moi = item.Shops;
                                        requestdetail.ShopCode2 = shop_moi;
                                    }

                                }
                            }
                            if (request.StepNo == 1)
                            {
                                sql.ExecuteCommand("sp_SinhPhieuViphamTruyThuShop_134", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestID", request.Id),
                                            new SqlParameter("@UserName", UserManager.CurrentUser.InsideCode)
                                        });
                            }
                            //▲ Edit - LuanNT44 - 21/03/2019 -- thêm popup
                            #endregion
                            break;
                        case 135:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]" && objects.ToString() != "")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 137:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }

                                    if (requestdetail != null)
                                    {
                                        string timeF = item.Time;
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = timeF.EParseToDateTime(format);
                                        }
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 143:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property10 = Convert.ToString(item.Property10);
                                        requestdetail.Property13 = item.SoVanDon;
                                        shop_cu = requestdetail.ShopCode2;
                                        shop_moi = item.Shops;
                                        requestdetail.ShopCode2 = shop_moi;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 145:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Property4 = item.HXLTrangThaiPhieu;
                                        requestdetail.Property5 = item.NoiDungHXLKhac;
                                        requestdetail.Property7 = item.HXLKeyTrongKho;
                                        requestdetail.Property6 = item.PhanLoai;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 147:
                            #region MyRegion

                            #endregion
                            break;
                        case 150:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        //======= Nếu EmpCode = 'Khác' thì cột EmpCode = null, insert Property5 = 'Khác...', GhiChu = Property6
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Quantity2 = item.SoLuong; // LuanNT44-12/09/2019-Loại 150-Thêm cột // LuanNT44-26/09/2019-150
                                        if (item.EmpCode == "Khác...")
                                        {
                                            requestdetail.EmpCode = null;
                                            requestdetail.Property5 = "Khác...";
                                        }
                                        else
                                        {
                                            requestdetail.EmpCode = item.EmpCode;
                                            requestdetail.Property5 = null;
                                        }
                                        #region Time1
                                        if (item.ThoiHanXuLy == null)
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                        else
                                        {
                                            string ThoiHanXuLy = item.ThoiHanXuLy;
                                            string[] timeArr = ThoiHanXuLy.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time1 = ThoiHanXuLy.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time1 = null;
                                            }
                                        }
                                        #endregion
                                        requestdetail.Property6 = item.GhiChu;
                                        requestdetail.Property7 = item.HangNhaTraGop;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 152:
                            #region MyRegion
                            #region Áo đồng phục phòng nhân sự và đào tạo
                            //'▼(#006)Add===================================    
                            ShopDAL shopDal_152 = new ShopDAL();
                            var shopCreate_152 = shopDal_152.Get(request.ToShop);
                            List<ItemUsedTmp> itemUseds_152 = new List<ItemUsedTmp>();

                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityUpdate = request.StepNo != 4 ? item.Quantity1 : item.QuantityAvaiable;
                                int thanhtien = item.Sum;
                                RequestDetail requestDetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                    int quantityNewest = (requestDetail.QuantityAvaiable == null || request.StepNo != 4)
                                                    ? requestDetail.Quantity1.GetValueOrDefault(0)
                                                    : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                    int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                    if (moneyDifference != 0 && shopCreate_152 != null)
                                    {
                                        //'▼(#005)Update=================================== 
                                        ItemUsedTmp itemUsed = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            itemUsed = itemUseds_152.FirstOrDefault(x => (int)x.GroupId == 4
                                                                                   && x.Month == request.TimeCreate.Month
                                                                                   && x.Year == request.TimeCreate.Year);
                                        }
                                        //'▲(#005)Update===================================
                                        if (request.StepNo == 4)
                                        {
                                            if (itemUsed == null)
                                            {
                                                itemUsed = new ItemUsedTmp();
                                                itemUsed.GroupId = 4;
                                                itemUsed.GroupValue = moneyDifference;
                                                itemUsed.Month = request.TimeCreate.Month;
                                                itemUsed.Year = request.TimeCreate.Year;
                                                itemUsed.ShopCodeB1 = shopCreate_152.WarehouseCodeB1;
                                                itemUsed.RequestId = request.Id;
                                                itemUsed.Status = Key.Status.Available;
                                                db.ItemUsedTmps.Add(itemUsed);

                                            }
                                            else
                                            {
                                                itemUsed.GroupValue += moneyDifference;
                                            }
                                        }

                                    }
                                    requestDetail.QuantityAvaiable = request.StepNo != 4 ? item.Quantity : quantityUpdate;
                                    requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                    requestDetail.Quantity1 = item.Quantity1;
                                    requestDetail.Quantity3 = item.Quantity3;
                                }
                            }

                            //== Chuyển giữa các bước
                            switch (request.StepNo)
                            {
                                case 1: request.StepNo = 2; break;
                                case 2: request.StepNo = 3; break;
                                case 3: request.StepNo = 4; break;
                                case 4: request.StepNo = 4; break;
                            }
                            #endregion

                            #region Thêm dữ liệu vào requestdetail
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestDetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                requestDetail.Property1 = item.Property1;
                                requestDetail.Property2 = item.Property2;
                                requestDetail.Property3 = item.Property3;
                                requestDetail.Property4 = item.Property4;
                                requestDetail.Property5 = item.Property5;
                                //requestDetail.Quantity1 = item.Quantity1;
                                //requestDetail.QuantityAvaiable = request.StepNo != 4 ? item.Quantity : item.QuantityAvaiable;
                                //requestDetail.Sum = item.Sum;
                                //▼Add - TrungNC3 - 10/10/2017 - Thêm Nhóm SP & Hình thức xuất
                                string Property6 = string.Empty;
                                if (requestDetail.Property6 == null || requestDetail.Property6 == "")
                                {
                                    if (item.HTX == item.HinhThucXuat)
                                    {
                                        Property6 = null;
                                    }
                                    else
                                    {
                                        Property6 = item.HTX + "->" + item.HinhThucXuat;
                                    }
                                }
                                else
                                {
                                    if (item.HinhThucXuat == requestDetail.Property6)
                                    {
                                        Property6 = requestDetail.Property7;
                                    }
                                    else
                                    {
                                        if (requestDetail.Property7 == null || requestDetail.Property7 == "")
                                        {
                                            Property6 = requestDetail.Property6 + "->" + item.HinhThucXuat;
                                        }
                                        else
                                        {
                                            Property6 = requestDetail.Property7 + "->" + item.HinhThucXuat;
                                        }
                                    }
                                }
                                requestDetail.Property7 = Property6;
                                requestDetail.Property6 = item.HinhThucXuat;
                            }
                            #endregion
                            #endregion
                            break;
                        case 154:
                            #region Automatic
                            #endregion
                            break;

                        //===========================Thêm xử lý cho nut hoàn tất  - TRUNGNC3 - 21.10.2016 - Loại 155
                        case 155:
                            #region Đồ dùng hc
                            if (permissions.Contains(Permission.Sender)
                                || permissions.Contains(Permission.Admin)
                                || permissions.Contains(Permission.SupperAdmin)
                                || permissions.Contains(Permission.Assigner)
                                || permissions.Contains(Permission.GroupAssigner))
                            {
                                #region update dinh muc
                                ShopDAL shopDal_155 = new ShopDAL();
                                var shopCreate_155 = shopDal_155.Get(request.FromShop);
                                List<ItemUsedTmp> itemUseds_155 = new List<ItemUsedTmp>();
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    int quantityUpdate = item.QuantityAvaiable;
                                    int thanhtien = item.Sum;
                                    RequestDetail requestDetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestDetail != null && requestDetail.Quantity != null)
                                    {
                                        // Cộng trừ định mức dự vào số lượng cập nhập nhận của shop
                                        int quantityNewest = requestDetail.QuantityAvaiable == null
                                                            ? requestDetail.Quantity.GetValueOrDefault(0)
                                                            : requestDetail.QuantityAvaiable.GetValueOrDefault(0);
                                        int moneyDifference = (quantityNewest - quantityUpdate) * requestDetail.Price.GetValueOrDefault(0);
                                        if (moneyDifference != 0 && shopCreate_155 != null)
                                        {
                                            //'▼(#005)Update=================================== 
                                            //ItemUsedTmp itemUsed = itemUseds.FirstOrDefault(x => x.GroupId == item.GroupId
                                            //                                       && x.Month == request.TimeCreate.Month
                                            //                                       && x.Year == request.TimeCreate.Year);
                                            ItemUsedTmp itemUsed = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                itemUsed = itemUseds_155.FirstOrDefault(x => (int)x.GroupId == (int)item.GroupId
                                                                               && x.Month == request.TimeCreate.Month
                                                                               && x.Year == request.TimeCreate.Year);
                                            }
                                            //'▲(#005)Update===================================
                                            if (request.StepNo == 5)
                                            {
                                                if (itemUsed == null)
                                                {
                                                    itemUsed = new ItemUsedTmp();
                                                    itemUsed.GroupId = item.GroupId;
                                                    itemUsed.GroupValue = moneyDifference;
                                                    itemUsed.Month = request.TimeCreate.Month;
                                                    itemUsed.Year = request.TimeCreate.Year;
                                                    itemUsed.ShopCodeB1 = shopCreate_155.WarehouseCodeB1;
                                                    itemUsed.RequestId = request.Id;
                                                    itemUsed.Status = Key.Status.Available;
                                                    itemUseds_155.Add(itemUsed);
                                                }
                                                else
                                                {
                                                    itemUsed.GroupValue += moneyDifference;
                                                }
                                                //db.ItemUsedTmps.Add(itemUsed);
                                            }

                                        }
                                        requestDetail.QuantityAvaiable = quantityUpdate;
                                        requestDetail.Sum = quantityUpdate * requestDetail.Price.GetValueOrDefault(0);
                                        requestDetail.Quantity1 = item.Quantity1;
                                        //▼ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                        string Property2 = string.Empty;
                                        if (requestDetail.Property1 == null || requestDetail.Property1 == "")
                                        {
                                            if (item.HTX == item.HinhThucXuat)
                                            {
                                                Property2 = null;
                                            }
                                            else
                                            {
                                                Property2 = item.HTX + "->" + item.HinhThucXuat;
                                            }
                                        }
                                        else
                                        {
                                            if (item.HinhThucXuat == requestDetail.Property1)
                                            {
                                                Property2 = requestDetail.Property2;
                                            }
                                            else
                                            {
                                                if (requestDetail.Property2 == null || requestDetail.Property2 == "")
                                                {
                                                    Property2 = requestDetail.Property1 + "->" + item.HinhThucXuat;
                                                }
                                                else
                                                {
                                                    Property2 = requestDetail.Property2 + "->" + item.HinhThucXuat;
                                                }
                                            }
                                        }
                                        requestDetail.Property2 = Property2;
                                        requestDetail.Property1 = item.HinhThucXuat;
                                        //▲ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                    }
                                }
                                if (itemUseds_155.Count > 0)
                                {
                                    db.ItemUsedTmps.AddRange(itemUseds_155);
                                }
                                #endregion
                            }
                            #endregion
                            break;
                        //===========================Thêm xử lý cho nut hoàn tất  - TRUNGNC3 - 21.10.2016 - Loại 155

                        case 156:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 158:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Property1 = item.NganhHang;
                                        requestdetail.Property2 = item.NhanHang;
                                        requestdetail.Money1 = item.DonGiaTruyTHu;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 161: //--- MKT khối BO
                            #region Đồ dùng mko
                            ShopDAL shopDal_161 = new ShopDAL();
                            var shopCreate_161 = shopDal_161.Get(request.FromShop);

                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                int quantityBaohanh = item.Quantity1;
                                int quantityCapMoi = item.Quantity2;
                                int quantity = item.Quantity;
                                int thanhtien = item.Sum;
                                var hinnthucxuly = item.Property1;
                                RequestDetail requestDetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                var sum = 0;
                                var summoi = quantityBaohanh + quantityCapMoi;
                                if (requestDetail.Quantity1 == 0 && requestDetail.Quantity2 == 0)
                                {
                                    sum = requestDetail.Quantity.GetValueOrDefault(0);
                                }
                                else
                                {
                                    sum = requestDetail.Quantity1.GetValueOrDefault(0) + requestDetail.Quantity2.GetValueOrDefault(0);
                                }
                                if (requestDetail != null && requestDetail.Quantity != null)
                                {
                                    requestDetail.Quantity1 = quantityBaohanh;
                                    requestDetail.Quantity2 = quantityCapMoi;
                                    requestDetail.Quantity = quantity;
                                    requestDetail.Property1 = hinnthucxuly;
                                    requestDetail.Sum = summoi * requestDetail.Price.GetValueOrDefault(0);
                                }

                                request.Assigner = UserManager.CurrentUser.InsideCode;
                            }
                            #endregion
                            break;
                        case 163:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        if (request.StepNo < 3)
                                        {
                                            requestdetail.Property1 = item.Quantity1;
                                            requestdetail.Property2 = item.Quantity2;
                                        }
                                        else
                                        {
                                            requestdetail.Property1 = item.Property1;
                                            requestdetail.Property2 = item.Property2;
                                        }
                                        requestdetail.Note = item.Note;
                                    }

                                }
                            }
                            #endregion
                            break;
                        case 164:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        requestdetail.Quantity3 = item.Quantity3;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Quantity5 = item.Quantity5;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Note = item.Note;
                                        //▼ Edit - TrungNC3 - 25/08/2017 - Sửa Bỏ điều kiện dư===============
                                        //requestdetail.Approved = item.Approved;
                                        //▲ Edit=======================================
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 166:
                            #region MyRegion
                            var TraoThuong = Convert.ToString(form["TraoThuongId"]);
                            var IMEI = Convert.ToString(form["Emei166"]);
                            var SoTienThue = Convert.ToString(form["Thue166"]);

                            RequestDetail requestdetail_166 = new RequestDetail();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                requestdetail_166 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            }
                            if (requestdetail_166 != null)
                            {
                                requestdetail_166.Property5 = TraoThuong;
                                requestdetail_166.Property8 = IMEI;
                                if (SoTienThue != null && SoTienThue != "")
                                {
                                    requestdetail_166.Money1 = (float)Convert.ToDouble(SoTienThue);
                                }
                            }
                            string CheckImagesApproved = Convert.ToString(form["CheckApprovedImages_166"]);
                            if (CheckImagesApproved != "" /* && (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner)) */)
                            {
                                SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@ListColumn", CheckImagesApproved) ,
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode) ,
                                new SqlParameter("@TraoThuong", TraoThuong)
                            };
                                sql.ExecuteWithoutResult("PromotionsImages_UpdateApproved", CommandType.StoredProcedure, param);
                            }
                            #endregion
                            break;
                        case 168:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Note = item.Note;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 169:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    { }
                                    if (request.StepNo == 1 || request.StepNo == 2)
                                    {
                                        Conversation conversation169 = new Conversation();
                                        conversation169.RequestId = request.Id;
                                        conversation169.Sender = "-1";
                                        conversation169.Message = "Hoàn tất yêu cầu do từ chối duyệt";
                                        conversation169.Status = Key.Status.Available;
                                        conversation169.TimeCreate = DateTime.Now;
                                        conversation169.Type = Key.Conversation.Comment;
                                        conversation169.StepNo = request.StepNo;
                                        db.Conversations.Add(conversation169);
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 170:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    { }
                                    if (request.StepNo == 1 || request.StepNo == 2)
                                    {
                                        Conversation conversation170 = new Conversation();
                                        conversation170.RequestId = request.Id;
                                        conversation170.Sender = "-1";
                                        conversation170.Message = "Hoàn tất yêu cầu do từ chối duyệt";
                                        conversation170.Status = Key.Status.Available;
                                        conversation170.TimeCreate = DateTime.Now;
                                        conversation170.Type = Key.Conversation.Comment;
                                        conversation170.StepNo = request.StepNo;
                                        db.Conversations.Add(conversation170);
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 172:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }
                                }
                            }
                            #endregion
                            break;

                        //▼ Add - TrungNC3 - 2017.09.06 - Up thực loại chuyển shop khác vùng
                        case 173:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.ShopCode2 = item.JobtitleNew;
                                        string timeF = item.JobtitleDateStart;
                                        string[] timeArrAss = timeF.Split('/');
                                        if (timeArrAss.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArrAss[0].Length == 1 ? "d" : "dd"
                                               , timeArrAss[1].Length == 1 ? "M" : "MM"
                                               , timeArrAss[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeF.EParseToDateTime(format);
                                        }
                                    }
                                    //if (request.StepNo == 1)
                                    //{
                                    //    Conversation conversation173 = new Conversation();
                                    //    conversation173.RequestId = request.Id;
                                    //    conversation173.Sender = "-1";
                                    //    conversation173.Message = "Hoàn tất yêu cầu do từ chối duyệt";
                                    //    conversation173.Status = Key.Status.Available;
                                    //    conversation173.TimeCreate = DateTime.Now;
                                    //    conversation173.Type = Key.Conversation.Comment;
                                    //    conversation173.StepNo = request.StepNo;
                                    //    db.Conversations.Add(conversation173);
                                    //}
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - =======================================

                        //▼ Add - TrungNC3 - 2017.09.01 - Thêm config hoàn tất loại 175
                        case 175:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    //RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    //if (requestdetail != null)
                                    //{
                                    //    requestdetail.Property2 = item.LoaiYeuCau;
                                    //    requestdetail.Note = item.GhiChu;
                                    //}
                                    //db.SaveChanges();
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    //▼ Edit - TrungNC3-NgoanHT - 2017.09.07 - Sửa loại hành chính hỗ trợ - 175
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property1 = item.NoiDung;
                                        requestdetail.Property2 = item.LoaiYeuCau;
                                        requestdetail.Property3 = item.XuLy;
                                        requestdetail.Property4 = item.GhiChu;
                                    }
                                    //▲ Edit - =======================================
                                }
                                db.SaveChanges();
                            }
                            #endregion
                            break;
                        //▲ Add - =======================================

                        //▼ Add - TrungNC3 - 14/11/2017 - Calllog duyệt bill Hỏa tốc
                        case 180:
                            #region Bill Hỏa tốc
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.ID;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Duyet; //NgoanHT - 23/10/2017 - 154 - 180: bill hỏa tốc - sửa
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - TrungNC3 - 14/11/2017 - Calllog duyệt bill Hỏa tốc

                        //▼ Edit - NgoanHT - 05/04/2018 - sửa loại 181
                        case 181:
                            #region 181
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    int DanhGiaCuaShop = item.DanhGiaCuaShop;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity3 = DanhGiaCuaShop;
                                        requestdetail.Property3 = item.LyDoKhongDat;// Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm lý do không đạt
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Edit - NgoanHT - 05/04/2018 - sửa loại 181

                        //▼ Add - NgoanHT - 09/11/2017 - Thêm loại 182
                        case 182:
                            #region Trả hàng key
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.ID;
                                    Request requests = (from R in db.Requests
                                                        where R.Id == id
                                                        select R).First();
                                    if (requests != null)
                                    {
                                        requests.StepStatus = 4;
                                        requests.Status = 4;
                                    }
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Duyet;
                                    }
                                }

                                db.SaveChanges();
                            }
                            #endregion
                            break;
                        //▲ Add========================================================

                        case 183:
                            #region MyRegion
                            #endregion
                            break;

                        //▼ Edit - ThuongNM2 - 03/10/2018 - Insert Log Type 185
                        case 185:
                            #region MyRegion
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        string logid = "Complete 185 - " + request.Id + " Assginer: " + UserManager.CurrentUser.InsideCode;
                                        string Mess = item.Id + " Change Money1 (XNTTBO) - XacNhanTruyThu: ";
                                        Mess += requestdetail.Money1 != null ? requestdetail.Money1.ToString() : "money1 - rong";
                                        Mess += " -> " + item.XacNhanTruyThuBO + "--- SoTienCanGiu: ";
                                        Mess += requestdetail.Property1 != null ? requestdetail.Property1.ToString() : "Property1 - rong";
                                        Mess += " -> " + item.SoTienCanGiu;
                                        requestdetail.Money1 = item.XacNhanTruyThuBO; //Add - NgoanHT - 24/05/2018 - Loại: 185 - sửa biến truyền vào
                                        requestdetail.Property1 = item.SoTienCanGiu; //Add - NgoanHT - 30/05/2018 - Loại: 185 - sửa biến truyền vào
                                        SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@Id", logid),
                                        new SqlParameter("@Mes",Mess)
                                    };
                                        sql.ExecuteWithoutResult("Log_Insert", CommandType.StoredProcedure, param);
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Edit - ThuongNM2 - 03/10/2018 - Insert Log Type 185

                        //▲ Add - PhiN - 11/12/2017 - thêm loại 186
                        case 186:
                            #region MyRegion

                            #endregion
                            break;

                        //▼ Add - NgoanHT - 20/03/2018 - Loại: 189 - Thêm loại 189
                        case 189:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    long requestID = request.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    Assigner Assigner = db.Assigners.FirstOrDefault(x => x.RequestId == requestID && x.StepNo == 4 && x.Status == 1);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property2 = item.ThongTinThayDoi;
                                        if (item.ShopXacNhanLayout == 0 && request.StepNo == 5)
                                        {
                                            request.StepNo = 4;
                                            request.Status = 2;
                                            request.Assigner = Assigner.EmployeeCode;
                                        }
                                        else
                                        {
                                            requestdetail.Quantity1 = item.ShopXacNhanLayout;
                                        }
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - NgoanHT - 20/03/2018 - Loại: 189 - Thêm loại 189

                        case 190:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int CoVanDe = item.CoVanDe;
                                    long Id = item.RequestId;
                                    if (CoVanDe == 1)
                                    {
                                        sql.ExecuteCommand("sp_EmailCoVanDe_CalllogCapNhatLayout", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestId", Id)
                                    });
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - NgoanHT - 05/02/2018 - Loại: 189,190 - Thêm xử lý có vấn đề

                        //▼ Add - NgoanHT - 29/01/2018 - Loại: 191,194,195 - Thêm Lưu thây đổi "Thông tin thây đổi"
                        //▼ Edit - ThuongNM2 - 24/10/2018 - Loại: 191 Thay đổi Rule Bước 1 thì lên bước 2
                        case 191:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                var checkApproved = false;
                                // Case này luôn chỉ có 1 line
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    checkApproved = item.Approved;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.ThongTinThayDoi;
                                        requestdetail.Approved = item.Approved;
                                    }
                                }
                                if (request.StepNo == 1 && checkApproved == true)
                                {
                                    DataTable tableEmpDetail = new EmployeeDAL().GetDetail(request.Sender);
                                    if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
                                    {
                                        string jobCode = tableEmpDetail.Rows[0]["JobTitleCode"].ToString();// Edit - ThuongNM2 - 2018/10/25 Change from var to string
                                        if (jobCode == "00004" || jobCode == "00005")
                                        {
                                            request.StepNo = 3;
                                        }
                                        else
                                        {
                                            request.StepNo = 2;
                                        }
                                    }
                                    else
                                    {
                                        request.StepNo = 2;
                                    }
                                    request.Assigner = null; // Eidt - ThuongNM2 - 2018/10/26 - Bắt đk null cho Assigner để phần người XL mới
                                    request.Status = Key.StatusRequest.Processing; // Edit - ThuongNM2 - 2018/11/07 - Thay đổi status 
                                    request.StepStatus = Key.StatusRequest.Waitting;
                                }
                                else if (request.StepNo == 1)
                                {

                                    var converstation = new Conversation();
                                    converstation.RequestId = request.Id;
                                    converstation.Message = "Hệ thống auto hoàn tất do calllog không được duyệt thay đổi.";
                                    converstation.Sender = "-1";
                                    converstation.CreateBy = "-1";
                                    converstation.Status = Key.Status.Available;
                                    converstation.StepNo = 1;
                                    converstation.TimeCreate = DateTime.Now;
                                    converstation.Type = Key.Conversation.Comment;
                                    db.Conversations.Add(converstation);
                                }

                            }
                            #endregion
                            break;
                        //▲  Edit - ThuongNM2 - 24/10/2018 - Loại: 191 Thay đổi Rule Bước 1 thì lên bước 2
                        //▲ Add - NgoanHT - 29/01/2018 - Loại: 191,194,195 - Thêm Lưu thây đổi "Thông tin thây đổi"

                        case 194:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.ThongTinThayDoi;
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 195:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property5 = item.ThongTinThayDoi;
                                    }
                                }
                            }
                            #endregion
                            break;

                        //▼  Edit - ChuongNT3 - 06/03/2018 - Truy thu MDNH loại 196
                        case 196:
                            #region 196
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    if (item.Key == 0) //Edit - ChuongNT3 - Loại 196
                                    {
                                        RequestDetail requestDetail = new RequestDetail();
                                        requestDetail.RequestId = request.Id;
                                        requestDetail.EmpCode = item.NhanVienBiTruyThu;
                                        requestDetail.Money1 = item.SoTienBiTruyThu;
                                        requestDetail.Quantity = item.ThangBiTruyThu;
                                        //requestDetail.Quantity1 = item.ThoiGian;
                                        requestDetail.Status = 1;
                                        requestDetail.ShopCode = request.FromShop;
                                        requestDetail.Money2 = item.SoTienLuongThang;
                                        db.RequestDetails.Add(requestDetail);
                                    }
                                    else
                                    {
                                        var requestDetail2 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        requestDetail2.RequestId = request.Id;
                                        requestDetail2.EmpCode = item.NhanVienBiTruyThu;
                                        requestDetail2.Money1 = item.SoTienBiTruyThu;
                                        requestDetail2.Quantity = item.ThangBiTruyThu;
                                        //requestDetail2.Quantity1 = item.ThoiGian;
                                        requestDetail2.Status = 1;
                                        requestDetail2.ShopCode = request.FromShop;
                                        requestDetail2.Money2 = item.SoTienLuongThang;
                                    }
                                }
                                db.SaveChanges();
                            }
                            #endregion
                            break;
                        //▲  Edit - ChuongNT3 - 06/03/2018 - Truy thu MDNH loại 196

                        //▼   Edit - ChuongNT3 - 06/03/2018 - Truy thu số lượng MDNH loại 197
                        case 197:
                            #region 197
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    if (item.Key == 0) //Edit - ChuongNT3 - Loại 197
                                    {
                                        RequestDetail requestDetail = new RequestDetail();
                                        requestDetail.RequestId = request.Id;
                                        requestDetail.EmpCode = item.NhanVienBiTruyThu;
                                        requestDetail.Money1 = item.SoTienBiTruyThu;
                                        requestDetail.Quantity = item.ThangBiTruyThu;
                                        //requestDetail.Quantity1 = item.ThoiGian;
                                        requestDetail.Status = 1;
                                        requestDetail.ShopCode = request.FromShop;
                                        requestDetail.Money2 = item.SoTienLuongThang;
                                        db.RequestDetails.Add(requestDetail);
                                    }
                                    else
                                    {
                                        var requestDetail2 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        requestDetail2.RequestId = request.Id;
                                        requestDetail2.EmpCode = item.NhanVienBiTruyThu;
                                        requestDetail2.Money1 = item.SoTienBiTruyThu;
                                        requestDetail2.Quantity = item.ThangBiTruyThu;
                                        //requestDetail2.Quantity1 = item.ThoiGian;
                                        requestDetail2.Status = 1;
                                        requestDetail2.ShopCode = request.FromShop;
                                        requestDetail2.Money2 = item.SoTienLuongThang;
                                    }
                                }
                                db.SaveChanges();
                            }
                            #endregion
                            break;
                        //▲   Edit - ChuongNT3 - 06/03/2018 - Truy thu số lượng MDNH loại 197

                        //▼   Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ
                        case 198:
                            #region 198
                            if (objects != null && objects.ToString() != "[]")
                            {
                                var conversationAdd = new Conversation();
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Duyet;// Add - NghiaTV5 - 28/03/2018 - Bảo Hành Máy Củ 198
                                        if (item.GiaiTrinh != null && item.GiaiTrinh != "")
                                        {
                                            conversationAdd.RequestId = request.Id;
                                            conversationAdd.RequestDetailId = Convert.ToInt64(requestdetail.Id);
                                            conversationAdd.Sender = sender;
                                            conversationAdd.Message = item.GiaiTrinh;
                                            conversationAdd.Status = Key.Status.Available;
                                            conversationAdd.TimeCreate = DateTime.Now;
                                            conversationAdd.Type = 198;
                                            conversationAdd.StepNo = request.StepNo;
                                            db.Conversations.Add(conversationAdd);
                                        }
                                    }
                                }

                            }
                            #endregion
                            break;
                        //▲  Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ

                        //▼  Add - LuanNT44 - 29/01/2018 - Loại 200 - Chuyển cọc đơn hàng ecom
                        case 200:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RequestDId;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property3 = item.Ecom_new;
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲  Add - LuanNT44 - 29/01/2018 - Loại 200 - Chuyển cọc đơn hàng ecom

                        //▼  Add - LuanNT44 - 02/02/2018 - Loại 201 - Kiểm hàng online
                        case 201:
                            #region Automatic
                            //if (objects != null && objects.ToString() != "[]")
                            //{
                            //    foreach (var item in objects)
                            //    {
                            //        int id = item.RequestDId;
                            //        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            //        if (requestdetail != null)
                            //        {
                            //            requestdetail.SaleCode = item.NguoiKiemKe;
                            //            requestdetail.Time1 = DateTime.ParseExact(item.NgayKiemKe.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            //            requestdetail.Property1 = item.ModelKiem;
                            //            requestdetail.Quantity = item.SoLuongModelKiem;
                            //        }
                            //    }
                            //}
                            #endregion
                            break;
                        //▲  Add - LuanNT44 - 02/02/2018 - Loại 201 - Kiểm hàng online

                        //▼  Add - LuanNT44 - 14/03/2018 - Loại 204 - Chốt CR qua Calllog
                        case 204:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property6 = item.TrangThai;
                                        requestdetail.Property7 = item.KPI;
                                        requestdetail.Property9 = item.ThangTinhKPI.ToString();
                                        requestdetail.Property10 = item.ThangLamCR.ToString();

                                        requestdetail.Property8 = item.MaID;
                                        requestdetail.OfficeCode = item.PhongBan;
                                        requestdetail.Property5 = item.NhomHeThong;
                                        requestdetail.Property1 = item.He_Thong;
                                        requestdetail.Time1 = DateTime.ParseExact(item.NgayChotYC.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        requestdetail.Property11 = item.NgayDuKienUAT;
                                        requestdetail.Property12 = item.NgayDuKienGoLive;
                                        requestdetail.Time2 = DateTime.ParseExact(item.NgayThucTeUAT.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        requestdetail.Time3 = DateTime.ParseExact(item.NgayThucTeGoLive.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        requestdetail.Quantity1 = item.Uutien;
                                        requestdetail.Note = item.GhiChu;
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲  Add - LuanNT44 - 14/03/2018 - Loại 204 - Chốt CR qua Calllog
                        // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                        // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                        //▼ ChuongNT3 - 08/06/2018 - Truy thu sim
                        case 206:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    if (item.Key == 0)
                                    {
                                        RequestDetail requestDetail = new RequestDetail();
                                        requestDetail.RequestId = request.Id;
                                        requestDetail.EmpCode = item.NhanVienBiTruyThu;
                                        requestDetail.Money1 = item.SoTienBiTruyThu;
                                        requestDetail.Quantity = item.ThangTruyThu;
                                        requestDetail.Quantity1 = item.NamTruyThu;
                                        requestDetail.Status = 1;
                                        requestDetail.ShopCode = request.FromShop;
                                        requestDetail.Money2 = item.SoTienLuongThang;
                                        db.RequestDetails.Add(requestDetail);
                                    }
                                    else
                                    {
                                        var requestDetail2 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        requestDetail2.RequestId = request.Id;
                                        requestDetail2.EmpCode = item.NhanVienBiTruyThu;
                                        requestDetail2.Money1 = item.SoTienBiTruyThu;
                                        requestDetail2.Quantity = item.ThangTruyThu;
                                        requestDetail2.Quantity1 = item.NamTruyThu;
                                        requestDetail2.Status = 1;
                                        requestDetail2.ShopCode = request.FromShop;
                                        requestDetail2.Money2 = item.SoTienLuongThang;
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ChuongNT3 - 08/06/2018 - Truy thu sim

                        //▼ Add - ThuongNM2 - 02/08/2018 - Loại 207 Chiến giá đại bàng
                        case 207:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.IdRequestDetail;
                                    var requestDetail207 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    requestDetail207.Property2 = item.CompetitorCode;
                                    requestDetail207.Property3 = item.Competitor;
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - ThuongNM2 - 02/08/2018 - Loại 207 Chiến giá đại bàng

                        //▼ Add - TuanNA89 - 23/11/2018 - Loại 208 Kiểm tra CIC khách hàng
                        case 208:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.requestId;
                                    var requestDetail208 = db.RequestDetails.FirstOrDefault(x => x.RequestId == id);
                                    requestDetail208.Quantity = item.trangThaiDuyet;
                                    requestDetail208.Property3 = item.ghiChu;
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 23/11/2018 - Loại 208 Kiểm tra CIC khách hàng
                        //▼ Add - LuanNT44 - 28/06/2019 - Loại 211 - Duyệt quỹ tự tin
                        case 211:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    var requestDetail211 = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    requestDetail211.Quantity = item.Duyet;
                                    requestDetail211.Quantity1 = item.KhongDuyet;
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 28/06/2019 - Loại 211 - Duyệt quỹ tự tin
                        //▼ Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA
                        case 213:
                            #region Automatic

                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA
                        //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        case 214:
                            #region Automatic
                            if (objects.ToString() != "[]")
                            {
                                DateTime now214 = DateTime.Now;
                                RequestDetail requestdetail = new RequestDetail();
                                int id = 0;
                                foreach (var item in objects)
                                {
                                    id = item.Id;
                                    if (id > 0)
                                    {
                                        requestdetail = new RequestDetail();
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestdetail != null)
                                        {
                                            requestdetail.Property7 = item.ShopDaNhanHangMoi;
                                        }
                                    }
                                }
                            }
                            db.SaveChanges();
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        //▼ Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside
                        case 215:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {

                                        requestdetail.Note = item.GhiChu;
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside
                        //▼ Add - TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216
                        case 216:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {

                                        requestdetail.Approved = item.TrangThaiDuyet;
                                        requestdetail.Property2 = item.LyDoKhongDuyet;
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216
                        //▼ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                        case 217:
                            #region Automatic
                            #region == Update data detail calllog ==
                            var dataUpdate = Convert.ToString(form["DataUpdate"]);
                            var objectsUpdate = JsonConvert.DeserializeObject<dynamic>(dataUpdate);

                            if (objectsUpdate != null && objectsUpdate.ToString() != "[]")
                            {
                                foreach (var item in objectsUpdate)
                                {
                                    long detailId = item.requestDetailId;
                                    RequestDetail detail_217 = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        detail_217 = db.RequestDetails.FirstOrDefault(x => x.Id == detailId && x.Status == 1);
                                    }
                                    if (detail_217 != null)
                                    {
                                        string log_OldData = "";
                                        if (item.HoTenKH != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property2: Old Data (", detail_217.Property2, ") => New Data (", item.HoTenKH, ")", Environment.NewLine);
                                            detail_217.Property2 = item.HoTenKH;
                                        }
                                        if (item.CMND != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property3: Old Data (", detail_217.Property3, ") => New Data (", item.CMND, ")", Environment.NewLine);
                                            detail_217.Property3 = item.CMND;
                                        }
                                        if (item.SDT != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property4: Old Data (", detail_217.Property4, ") => New Data (", item.SDT, ")", Environment.NewLine);
                                            detail_217.Property4 = item.SDT;
                                        }
                                        if (item.SoSO != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property5: Old Data (", detail_217.Property5, ") => New Data (", item.SoSO, ")", Environment.NewLine);
                                            detail_217.Property5 = item.SoSO;
                                        }
                                        if (item.SoTienHoanTra != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property6: Old Data (", detail_217.Property6, ") => New Data (", item.SoTienHoanTra, ")", Environment.NewLine);
                                            detail_217.Property6 = item.SoTienHoanTra;
                                        }
                                        if (item.ShopKH != null)
                                        {
                                            log_OldData = string.Concat(log_OldData, "-Property7: Old Data (", detail_217.Property7, ") => New Data (", item.ShopKH, ")", Environment.NewLine);
                                            detail_217.Property7 = item.ShopKH;
                                        }
                                        db.SaveChanges();
                                        if (log_OldData != "")
                                        {
                                            Conversation conv_log = new Conversation();
                                            conv_log.RequestId = request.Id;
                                            conv_log.StepNo = request.StepNo;
                                            conv_log.Sender = UserManager.CurrentUser.InsideCode;
                                            conv_log.Message = log_OldData;
                                            conv_log.CreateBy = UserManager.CurrentUser.InsideCode;
                                            conv_log.Type = Key.Conversation.Infomation;
                                            conv_log.Status = Key.Status.Unavailable;
                                            conv_log.TimeCreate = DateTime.Now;
                                            db.Conversations.Add(conv_log);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                            #endregion
                            #region == Update thông tin duyệt hình ==
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    long id = item.FileAttachId;
                                    FileAttach fileAttach = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        fileAttach = db.FileAttachs.FirstOrDefault(x => x.Id == id && x.Status == 1);
                                    }
                                    if (fileAttach != null)
                                    {
                                        fileAttach.ApproveStatus = item.Approved;
                                    }

                                    if (item.NoiDungTraoDoi != null)
                                    {
                                        Conversation conv_217 = new Conversation();
                                        conv_217.RequestId = request.Id;
                                        conv_217.StepNo = request.StepNo;
                                        conv_217.Sender = UserManager.CurrentUser.InsideCode;
                                        conv_217.Message = item.NoiDungTraoDoi;
                                        conv_217.CreateBy = UserManager.CurrentUser.InsideCode;
                                        conv_217.Type = Key.Conversation.Comment;
                                        conv_217.Status = Key.Status.Available;
                                        conv_217.TimeCreate = DateTime.Now;
                                        db.Conversations.Add(conv_217);
                                        db.SaveChanges();
                                    }

                                }
                                db.SaveChanges();
                            }
                            #endregion
                            #region == Check hoàn tất calllog ==
                            List<FileAttach> checkApproved_217 = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                checkApproved_217 = (from f in db.FileAttachs
                                                     where f.RequestId == request.Id
                                                        && f.Status == Key.Status.Available
                                                        && f.ApproveStatus != 1
                                                     select f).ToList();
                            }
                            if (checkApproved_217 != null && checkApproved_217.Count() > 0)
                            {
                                request.Status = Key.StatusRequest.Processing;
                                db.SaveChanges();
                                TempData["Message"] = "Yêu cầu có hình không được duyệt. Không thể hoàn tất. Yêu cầu Kế toán Shop up hình lại!!";
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                            #endregion
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                        //▼ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                        case 218:
                            #region Automatic
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                        //▼ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                        case 219:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity3 = item.Duyet;
                                        requestdetail.Quantity4 = item.KhongDuyet;
                                        if (item.SoTK != null && item.SoTK != "")
                                        {
                                            requestdetail.Property7 = item.SoTK;
                                        }
                                        if (item.NgayTamUng != null && item.NgayTamUng != "")
                                        {
                                            requestdetail.Time2 = DateTime.ParseExact(item.NgayTamUng.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                        //▼ Add - TuanNA89 - 26/11/2019 - Calllog Duyệt công nợ KH VNPT - Loại 221
                        case 221:
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {

                                        requestdetail.Approved = item.TrangThaiDuyet;
                                        requestdetail.Note = item.LyDoTuChoi;
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 26/11/2019 - Calllog Duyệt công nợ KH VNPT - Loại 221
                        //▼  Add - TuanNA89 - 26/11/2019 - Calllog Duyệt hình ảnh chứng từ hồ sơ Mirae - Loại 222
                        case 222:
                            #region Update detail calllog
                            if (objects.ToString() != "[]")
                            {
                                long DetailId = 0;
                                var detail = new RequestDetail();
                                foreach (var item in objects)
                                {
                                    DetailId = item.Id;
                                    if (DetailId > 0)
                                    {
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            detail = (from a in db.RequestDetails
                                                      where a.RequestId == request.Id && a.Id == DetailId && a.Status == 1
                                                      select a).FirstOrDefault();
                                        }
                                        if (detail != null && detail.Id > 0)
                                        {
                                            detail.Quantity1 = item.appr_HDTD1;
                                            detail.Quantity2 = item.appr_HDTD2;
                                            detail.Quantity3 = item.appr_HDTD3;
                                            detail.Quantity4 = item.appr_HDTD4;
                                            detail.Quantity5 = item.appr_HDTD5;
                                            detail.Quantity6 = item.appr_HDTD6;
                                            detail.Quantity = item.appr_BienBanXacNhan;
                                            detail.QuantityAvaiable = item.appr_AnhKhachHang;

                                            db.SaveChanges();
                                        }
                                    }
                                    //▼ Edit - TuanNA89 - 06/01/2019 - Fix loại CL 222
                                    DataTable dt_Result = sql.ExecuteCommand("CLDuyetHinhAnhHoSoMirae_Type222_Complete", CommandType.StoredProcedure, new SqlParameter[]
                                       {
                                                new SqlParameter("@RequestId",request.Id),
                                                new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                       });

                                    bool l_isSuccess_222 = true;
                                    string l_Message_222 = "";
                                    if (dt_Result == null)
                                    {
                                        l_isSuccess_222 = false;
                                        l_Message_222 = "Xảy ra lỗi trong quá trình hoàn tất CallLog!";
                                    }
                                    else
                                    {
                                        if (dt_Result.Rows[0]["Result"].ToString() == "0")
                                        {
                                            l_isSuccess_222 = false;
                                            l_Message_222 = "Xảy ra lỗi trong quá trình hoàn tất CallLog!";
                                        }
                                        else
                                        {
                                            if (dt_Result.Rows[0]["IsApprovedAll"].ToString() == "1")
                                            {
                                                var result = CallApi_DuyetHinhAnhMirae(detail.RequestId.ToString(), detail.Property13, detail.Property14);
                                                if (result == null)
                                                {
                                                    l_isSuccess_222 = false;
                                                    l_Message_222 = "Xảy ra lỗi trong quá trình gọi API MPos!";
                                                }
                                                //▼ Add - TuanNA89 - 27/03/2020 - Dùng cho beta, up thực bỏ
                                                else if (result.Message == "Cập nhật thông tin thất bại, vui lòng thử lại ( Hoặc liên hệ Support để được hỗ trợ).")
                                                {
                                                    TempData["Show_Popup_Mirae_222"] = "1";
                                                    if (permissions.Contains(Permission.Sender))
                                                    {
                                                        return RedirectToAction("Sent", "Home");
                                                    }
                                                    request.Status = 1;
                                                    db.SaveChanges();
                                                    return RedirectToAction("Index", "Home");
                                                }
                                                //▼ Add - TuanNA89 - 27/03/2020 - Dùng cho beta, up thực bỏ
                                                //▼ Add - TuanNA89 - 27/03/2020 - Show popup thông báo của Mirae
                                                else if (result.Success == true)
                                                {
                                                    TempData["Show_Popup_Mirae_222"] = "1";
                                                }
                                                //▲ Add - TuanNA89 - 27/03/2020 - Show popup thông báo của Mirae
                                                else if (result.Success == false)
                                                {
                                                    l_isSuccess_222 = false;
                                                    l_Message_222 = result.Message;
                                                }
                                            }
                                        }
                                    }
                                    if (l_isSuccess_222 == false)
                                    {
                                        request.Status = 1;
                                        db.SaveChanges();
                                        TempData["Message"] = l_Message_222;
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                    //▲ Edit - TuanNA89 - 06/01/2019 - Fix loại CL 222
                                }
                            }
                            #endregion
                            break;
                        //▲  Add - TuanNA89 - 26/11/2019 - Calllog Duyệt hình ảnh chứng từ hồ sơ Mirae - Loại 222
                        //▼  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                        case 223:
                            #region Update detail calllog
                            if (objects.ToString() != "[]")
                            {
                                long DetailId = 0;
                                string Msg_Update = "";
                                var detail = new RequestDetail();
                                foreach (var item in objects)
                                {
                                    Msg_Update = "";
                                    DetailId = item.Id;
                                    if (DetailId > 0)
                                    {
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                        {
                                            IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                        }))
                                        {
                                            detail = (from a in db.RequestDetails
                                                      where a.RequestId == request.Id && a.Id == DetailId && a.Status == 1
                                                      select a).FirstOrDefault();
                                        }
                                        if (detail != null && detail.Id > 0)
                                        {
                                            detail.Approved = item.TinhTrangDuyet;
                                            if (item.LoaiInAn != null && detail.Property1 != item.LoaiInAn.ToString())
                                            {
                                                Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property1(Loại in ấn) cũ: '" + detail.Property1 + "' => : '" + item.LoaiInAn.ToString() + "'";
                                                detail.Property1 = item.LoaiInAn;
                                            }
                                            if (item.NoiDung != null && detail.Property2 != item.NoiDung.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property2(Nội dung) cũ: '" + detail.Property2 + "' => : '" + item.NoiDung.ToString() + "'";
                                                detail.Property2 = item.NoiDung;
                                            }
                                            if (item.ChatLieu != null && detail.Property3 != item.ChatLieu.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property3(Chất liệu) cũ: '" + detail.Property3 + "' => : '" + item.ChatLieu.ToString() + "'";
                                                detail.Property3 = item.ChatLieu;
                                            }
                                            if (item.Width != null && detail.Property4 != item.Width.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property4(Chiều dài) cũ: '" + detail.Property4 + "' => : '" + item.Width.ToString() + "'";
                                                detail.Property4 = item.Width;
                                            }
                                            if (item.Height != null && detail.Property5 != item.Height.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property5(Chiều rộng) cũ: '" + detail.Property5 + "' => : '" + item.Height.ToString() + "'";
                                                detail.Property5 = item.Height;
                                            }
                                            if (item.SoLuong != null && detail.Property6 != item.SoLuong.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property6(Số lượng) cũ: '" + detail.Property6 + "' => : '" + item.SoLuong.ToString() + "'";
                                                detail.Property6 = item.SoLuong;
                                            }
                                            if (item.LinkTaiFileInAn != null && detail.Property7 != item.LinkTaiFileInAn.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property7(Link tải file in ấn) cũ: '" + detail.Property7 + "' => : '" + item.LinkTaiFileInAn.ToString() + "'";
                                                detail.Property7 = item.LinkTaiFileInAn;
                                            }
                                            if (item.GhiChu != null && detail.Property8 != item.GhiChu.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property8(Ghi chú) cũ: '" + detail.Property8 + "' => : '" + item.GhiChu.ToString() + "'";
                                                detail.Property8 = item.GhiChu;
                                            }
                                            if (item.DienTich != null && detail.Property10 != item.DienTich.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property10(Diện tích) cũ: '" + detail.Property10 + "' => : '" + item.DienTich.ToString() + "'";
                                                detail.Property10 = item.DienTich;
                                            }
                                            if (item.DonGia != null && detail.Property11 != item.DonGia.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property11(Đơn giá) cũ: '" + detail.Property11 + "' => : '" + item.DonGia.ToString() + "'";
                                                detail.Property11 = item.DonGia;
                                            }
                                            if (item.ThanhTien != null && detail.Property12 != item.ThanhTien.ToString())
                                            {
                                                if (Msg_Update != "") Msg_Update += Environment.NewLine;
                                                Msg_Update += " - Cập nhật Property12(Thành tiền) cũ: '" + detail.Property12 + "' => : '" + item.ThanhTien.ToString() + "'";
                                                detail.Property12 = item.ThanhTien;
                                            }

                                            db.SaveChanges();

                                            if (Msg_Update != "")
                                            {
                                                Msg_Update = "Id detail " + detail.Id.ToString() + " được cập nhật khi trao đổi:" + Environment.NewLine + Msg_Update;
                                                Conversation ConvUpdate = new Conversation();
                                                ConvUpdate.RequestId = request.Id;
                                                ConvUpdate.RequestDetailId = detail.Id;
                                                ConvUpdate.Message = Msg_Update;
                                                ConvUpdate.StepNo = request.StepNo;
                                                ConvUpdate.TimeCreate = DateTime.Now;
                                                ConvUpdate.Type = Key.Conversation.System;
                                                ConvUpdate.Status = 0;
                                                ConvUpdate.Sender = UserManager.CurrentUser.InsideCode;
                                                ConvUpdate.CreateBy = UserManager.CurrentUser.InsideCode;
                                                db.Conversations.Add(ConvUpdate);

                                                db.SaveChanges();
                                            }
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                            #endregion
                            break;
                        //▲  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                        //▼ Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM Shop - Loại 224
                        case 224:
                            break;
                        //▲ Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM Shop - Loại 224
                        case 225:
                            //▼	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                            #region MyRegion
                            if (request.StepNo == 1 && oldStatus < 4)
                            {
                                if (objects != null && objects.ToString() != "[]")
                                {
                                    foreach (var item in objects)
                                    {
                                        int id = item.Id;
                                        RequestDetail requestdetail = new RequestDetail();
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                        }
                                        if (requestdetail != null)
                                        {
                                            requestdetail.Approved = (item.XNLoi == 1 || item.XNLoi == 0) ? item.XNLoi : null;
                                            requestdetail.Property1 = item.NVViPham;
                                            requestdetail.Numeric1 = item.SoTienTruyThu;
                                            requestdetail.Property4 = item.LoaiLoi;
                                            requestdetail.Note = item.GhiChu;
                                        }
                                    }
                                }
                            }
                            #endregion
                            //▲	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                            break;
                        //▼ Add - LuanNT44 - 10/02/2020 - Loại 226 - Duyệt hạn mức thẻ cào/Momo/Viettel pay
                        case 226:
                            #region region
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    if (item.HanMuc_New != null)
                                    {
                                        requestdetail.Quantity1 = item.HanMuc_New;
                                    }
                                    requestdetail.Quantity2 = item.Duyet;
                                    requestdetail.Quantity3 = item.KhongDuyet;
                                    requestdetail.Note = item.Ghichu;
                                }
                            }
                            #endregion
                            break;
                        //▲  Add - LuanNT44 - 10/02/2020 - Loại 226 - Duyệt hạn mức thẻ cào/Momo/Viettel pay
                        //▼ Add - TuanNA89 - 17/04/2020 - Duyệt trả hàng bảo hiểm sức khoẻ - Loại 228
                        case 228:
                            #region region
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.TinhTrangDuyet;
                                }
                            }
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 17/04/2020 - Duyệt trả hàng bảo hiểm sức khoẻ - Loại 228                        
                        case 229:
                            #region region
                            //▼ Add - TuanNA89 - 22/07/2020 - CL POSM Duyệt hình ảnh - Type 229
                            bool isComplete = true;
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = new RequestDetail();
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.TinhTrangDuyet;
                                    requestdetail.Property8 = item.LyDoKhongDuyet;
                                    if (requestdetail.Approved == false)
                                    {
                                        isComplete = false;
                                    }
                                }
                            }
                            db.SaveChanges();
                            if (!isComplete)
                            {
                                if (request.StepNo == 2)
                                {
                                    request.StepNo += 1;
                                    request.Status = Key.StatusRequest.Processing;
                                    db.SaveChanges();
                                }
                                DataTable tbl_229 = sql.ExecuteCommand("CallLogPOSM_DuyetHinhAnh_Type229_XuLy", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId",request.Id)
                                });
                                if (tbl_229 != null && tbl_229.Rows.Count > 0)
                                {
                                    if (tbl_229.Rows[0]["Result"].ToString() == "0")
                                    {
                                        if (tbl_229.Rows[0]["Message"].ToString() != "")
                                        {
                                            TempData["Message"] = tbl_229.Rows[0]["Message"].ToString();
                                        }
                                        return RedirectToAction("Index", "Home");
                                    }
                                }
                            }

                            if (request.Status == Key.StatusRequest.Complete)
                            {
                                sql.ExecuteCommand("CallLogPOSM_DuyetHinhAnh_Type229_CapNhatVeInside", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId",request.Id)
                                });
                            }
                            //▲ Add - TuanNA89 - 22/07/2020 - CL POSM Duyệt hình ảnh - Type 229
                            #endregion
                            break;
                        default:
                            #region Automatic
                            if (objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = new RequestDetail();
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.ItemId = item.ItemId;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Note = item.Note;
                                        //requestdetail.Status = item.Status
                                        requestdetail.Sum = item.Sum;
                                        requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                        requestdetail.EmpCode = item.EmpCode;
                                        requestdetail.Price = item.Price;
                                        //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                        requestdetail.ShopCode = item.ShopCode;
                                        requestdetail.ShopCode2 = item.ShopCode2;
                                        requestdetail.OfficeCode = item.OfficeCode;
                                        requestdetail.CustomerCode = item.CustomerCode;
                                        requestdetail.CustomerName = item.CustomerName;
                                        requestdetail.SaleCode = item.SaleCode;
                                        #region Time1
                                        if (item.Time1 == null)
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time1;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time1 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time2
                                        if (item.Time2 == null)
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time2;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time2 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time3
                                        if (item.Time3 == null)
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time3;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time3 = null;
                                            }
                                        }
                                        #endregion
                                        requestdetail.Money1 = item.Money1;
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Money3 = item.Money3;
                                        requestdetail.Money4 = item.Money4;
                                        requestdetail.ProductCode = item.ProductCode;
                                        requestdetail.ProductName = item.ProductName;
                                        requestdetail.Imei = item.Imei;
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.EmpCode1 = item.EmpCode1;
                                        requestdetail.EmpCode2 = item.EmpCode2;
                                        requestdetail.EmpCode3 = item.EmpCode3;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        requestdetail.Quantity3 = item.Quantity3;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Quantity5 = item.Quantity5;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.JobCode1 = item.JobCode1;
                                        requestdetail.JobCode2 = item.JobCode2;
                                    }
                                }
                            }
                            firstTimeUpdate = true;
                            #endregion
                            break;
                    }
                    #endregion
                    //Add - ThuongNM2 - 02 / 08 / 2019 - Loại 23 - HC
                    #region ===Insert Cc===
                    if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner)
                        || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc)
                        || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                    {
                        string strCc = "";
                        foreach (var item in Ccs) { strCc += item.id + ","; }
                        if (strCc.Length > 0)
                        {
                            strCc = strCc.Substring(0, strCc.Length - 1);
                            sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                        }
                        else
                        {
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                (from a in db.Assigners
                                 where a.RequestId == request.Id
                                 && a.Type == Key.TypeAssigner.Cc
                                 select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                            }
                        }
                        //(from a in db.Assigners
                        // where a.RequestId == request.Id
                        // && a.Type == Key.TypeAssigner.Cc && a.GroupMail == null
                        // select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                        //foreach (var Cc in Ccs)
                        //{
                        //    //Cc.id
                        //    string EmpCode = Cc.id;
                        //    var CcExist = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                        //                                            && x.Type == Key.TypeAssigner.Cc
                        //                                            && x.EmployeeCode == EmpCode);
                        //    if (CcExist == null)
                        //    {
                        //        CcExist = new Assigner();
                        //        CcExist.RequestId = request.Id;
                        //        CcExist.EmployeeCode = EmpCode;
                        //        CcExist.StepNo = request.StepNo;
                        //        CcExist.Type = Key.TypeAssigner.Cc;
                        //        CcExist.Status = Key.Status.Available;
                        //        CcExist.TimeCreate = DateTime.Now;
                        //        db.Assigners.Add(CcExist);
                        //    }
                        //    else
                        //        CcExist.Status = Key.Status.Available;
                        //}
                    }
                    #endregion

                    #region ===UploadImage===
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        //Save file content goes here
                        string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database

                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = request.Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);
                        }
                    }
                    #endregion

                    request.StillShowing = false;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    //== Sau lệnh này calllog sẽ chuyển qua bước tiếp theo (và đẩy lên POS)

                    #region SaveChanges
                    try
                    {
                        // Your code...
                        // Could also be before try if you know the exception occurs in SaveChanges

                        db.SaveChanges();
                    }
                    catch (DbEntityValidationException e)
                    {
                        foreach (var eve in e.EntityValidationErrors)
                        {
                            Logger.WriteLogError(
                                "RequestsController - " + MethodBase.GetCurrentMethod().Name + "()"
                                , String.Format("Entity of type \"{0}\" in state \"{1}\" has the following validation errors: ", eve.Entry.Entity.GetType().Name, eve.Entry.State)
                                );
                            //Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                            //    eve.Entry.Entity.GetType().Name, eve.Entry.State);
                            foreach (var ve in eve.ValidationErrors)
                            {
                                Logger.WriteLogError(
                                    "RequestsController - " + MethodBase.GetCurrentMethod().Name + "()"
                                    , String.Format("- Property: \"{0}\", Error: \"{1}\"", ve.PropertyName, ve.ErrorMessage)
                                    );
                                //Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                                //    ve.PropertyName, ve.ErrorMessage);
                            }
                            //TempData["Message"] = e.Message;
                            //return RedirectToAction("Index", "Home");
                        }
                        throw;
                    }
                    #endregion

                    #region ===Biến thông báo===
                    string message22 = "", message23 = "";
                    string messageECom = "";
                    string message103 = ""; //▶	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                    string message125 = "";
                    string message130 = "";
                    string message152 = "", message155 = "";
                    string Message161 = "", message164 = string.Empty;
                    string message185 = string.Empty;
                    string Message190 = string.Empty, Message193 = string.Empty, message197 = string.Empty;
                    string message206 = string.Empty;
                    string message215 = string.Empty; //  Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside   LuanNT44-30/08/2019
                    #endregion

                    #region ===Xử lý Sau Hoàn tất===
                    switch (request.TypeId)
                    {
                        //▼	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                        case 1:
                            #region MyRegion
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                            {
                                SqlParameter[] param = new SqlParameter[] {
                                     new SqlParameter("@RequestId",request.Id),
                                     new SqlParameter("@Type",3),
                                     new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                                sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param);
                            }
                            #endregion
                            break;
                        //▲	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                        case 22:
                            #region tách đồ dùng mkts theo bảo hành hoặc cấp mới
                            if (request.StepNo == 2 && request.FromShop != null && request.FromShop.ToString() != "")
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                DataTable tablesRD = sql.ExecuteCommand("hiendt23_CupParent_Marketing", CommandType.StoredProcedure, param);
                                if (tablesRD != null && tablesRD.Rows.Count > 0)
                                {
                                    DataRow row = tablesRD.Rows[0];
                                    message22 = row["Message"].ToString();
                                }
                            }
                            else if (request.StepNo == 4 && request.FromShop != null)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }

                            //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                            #region Update han mức Mar Sang BI
                            if (FlagUpdateCallLogMkts == true)// Add - TrungNC3 - 28/11/2017 - Update Cập nhật Hạn mức Mkts sang BI Theo rule
                            {
                                SqlParameter[] param = new SqlParameter[] {
                            new SqlParameter("@RequestId",request.Id),
                        };
                                sql.ExecuteWithoutResult("sp_Update_ItemMarUsedTmp", CommandType.StoredProcedure, param);
                            }
                            #endregion
                            //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
                            #endregion
                            break;
                        case 23:
                            #region tách callog hàng hc nếu callog co chứa hc
                            if (request.StepNo == 2 && request.FromShop != null && request.FromShop.ToString() != "")
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                DataTable tablesRD = sql.ExecuteCommand("hiendt23_CupParentRequestDetails", CommandType.StoredProcedure, param);
                                if (tablesRD != null && tablesRD.Rows.Count > 0)
                                {
                                    DataRow row = tablesRD.Rows[0];
                                    message23 = row["Message"].ToString();
                                }
                            }
                            //▼ Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC
                            if (request.StepNo == 2 && (request.FromShop == null || request.FromShop == "") && (request.FromOffice != null && request.FromOffice != ""))
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                DataTable tablesRD = sql.ExecuteCommand("CupParentRequestDetails_BO", CommandType.StoredProcedure, param); // LuanNT44-15/10/2019-23
                                if (tablesRD != null && tablesRD.Rows.Count > 0) // LuanNT44-16/10/2019-23
                                {
                                    DataRow row = tablesRD.Rows[0];
                                    message23 = row["Message"].ToString();
                                    //▼ LuanNT44-16/10/2019-23  -LuanNT44-18/10/2019-23
                                    long IDTach = long.Parse(row["IDTach"].ToString());
                                    SqlParameter[] param1 = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                    sql.ExecuteCommand("sp_Items_CheckLimitValue_ProductHC_BO", CommandType.StoredProcedure, param1);
                                    SqlParameter[] param2 = new SqlParameter[] { new SqlParameter("@RequestID", IDTach), };
                                    sql.ExecuteCommand("sp_CalllogGiuLuongTruyThuAoDongPhuc_23", CommandType.StoredProcedure, param2);
                                    //▲ LuanNT44-16/10/2019-23  -LuanNT44-18/10/2019-23
                                }
                            }
                            //▲ Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC
                            else if (request.StepNo == 4 && request.FromShop != null)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            break;
                        //▼	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                        case 25:
                            #region MyRegion
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                            {
                                SqlParameter[] param = new SqlParameter[] {
                                     new SqlParameter("@RequestId",request.Id),
                                     new SqlParameter("@Type",3),
                                     new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                                sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param);
                            }
                            #endregion
                            break;
                        //▲	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                        case 28: // 28:Quỹ
                            #region MyRegion
                            //▼	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                            sql.ExecuteCommand("sp_CallLog_Quy_Completed_Buoc3_CreateCallLogXNVPQuy", CommandType.StoredProcedure, new SqlParameter[]{
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                            });
                            //▲	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                            #endregion
                            break;
                        case 48:
                            #region Cập nhật sang inside loai 48 Xử lý vi phạm
                            SqlParameter[] param_48 = new SqlParameter[] {
                            new SqlParameter("@RequestId", request.Id),
                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                            new SqlParameter("@Status", 4)
                         };
                            DataTable table1 = sql.ExecuteCommand("INS_F09_UpdateStatus_ViolationVoteRecordCode", CommandType.StoredProcedure, param_48);
                            #endregion
                            break;
                        case 51:
                            #region Update Duyet giam gia POS
                            var listGiamGiaAp = (from f in db.RequestDetails
                                                 where f.RequestId == request.Id
                                                    && f.Status == Key.Status.Available
                                                 select f).ToList();
                            foreach (var item in listGiamGiaAp)
                            {
                                sql.ExecuteWithoutResult("POS_UpdateDuyetGiamGia", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@ID", item.SaleCode),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@Status", item.Quantity3 == 1 ? "C" : "K"),
                                    new SqlParameter("@LineSO", item.Property6),
                                    new SqlParameter("@RequestID", request.Id)
                                });
                            }
                            #endregion
                            break;
                        case 56:
                            #region Update Sang POS YCDC
                            DataTable tb = sql.ExecuteCommand("POS_UpdateApproved_YCDC_ToPOS", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@Callog_ID", request.Id) ,
                            new SqlParameter("@ApproveBy",UserManager.CurrentUser.InsideCode),
                            new SqlParameter("@Result",1)
                        });
                            if (tb != null && tb.Rows.Count > 0)
                            {
                                TempData["Message"] = tb.Rows[0][1].ToString();
                                return RedirectToAction("Details", new { Id = request.Id });
                            }
                            #endregion
                            break;
                        case 64:
                            #region  Day trang thai duyet sang pos loai duyet huy ycdc
                            if (request.StepNo == 1)
                            {
                                RequestDetail res64 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                if (res64 != null)
                                {
                                    SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@Status", res64.Approved == null ||res64.Approved==false ? "K" : "C" ),
                            };
                                    //'C' - Đã duyệt *** 'K' - Từ chối duyệt
                                    sql.ExecuteWithoutResult("POS_UpdateDuyetHuyYCDC", CommandType.StoredProcedure, param);
                                }
                            }
                            #endregion
                            break;
                        case 65:
                            #region Duyet chuyen trang thai done productdemo cho loai hàng demo 65
                            sql.ExecuteWithoutResult("CompletedProductDemo_65", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@requestId", request.Id),
                                new SqlParameter("@updateBy", UserManager.CurrentUser.InsideCode),
                            });
                            #endregion
                            break;
                        case 90:
                            #region MyRegion
                            if (request.StepNo == 2)
                            {
                                var requestDetails_90 = (from a in db.RequestDetails
                                                         where a.RequestId == request.Id
                                                         && a.Money4 == null
                                                         && a.Status == Key.Status.Available
                                                         select a).FirstOrDefault();
                                if (requestDetails_90 != null)
                                {
                                    TempData["Message"] = "Phải nhập Target tháng RSM chốt";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                                sql.ExecuteWithoutResult("BI_UpdateTargetASM", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                            }
                            #endregion
                            break;
                        case 91:
                            #region MyRegion
                            if (firstTimeUpdate)
                            {
                                sql.ExecuteWithoutResult("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID",request.Id),
                                new SqlParameter("@Check", 0),
                                new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                            });
                            }
                            #endregion
                            break;
                        case 92:
                            #region MyRegion
                            if (firstTimeUpdate)
                            {
                                if (form["XacNhan"].ToString() == "DatVaDaoTao" || form["XacNhan"].ToString() == "KhongDatVaChuyenChucDanh")
                                {
                                    sql.ExecuteWithoutResult("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID",request.Id),
                                new SqlParameter("@Check", 0),
                                new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                            });
                                }
                            }
                            #endregion
                            break;
                        case 94:
                            #region MyRegion
                            if (firstTimeUpdate)
                            {
                                if (form["XacNhan"].ToString() == "DatVaDaoTao" || form["XacNhan"].ToString() == "KhongDatVaChuyenChucDanh")
                                {
                                    sql.ExecuteWithoutResult("Ins_UpdateDetailJobInfoV2", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID",request.Id),
                                new SqlParameter("@Check", 0),
                                new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                            });
                                }
                            }
                            #endregion
                            break;

                        case 103:   //  103:Xuất đổi cấu hình
                            #region MyRegion
                            //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            #endregion
                            break;

                        case 109:
                            #region MyRegion
                            //▼	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================
                            if (request.StepNo == 2)
                            {
                                //  Tạo CL Truy thu lương Xuất HĐ
                                sql.ExecuteWithoutResult("CreateCL_TruyThuLuong_XuatHoaDon", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                });
                            }
                            //▲	Edit - VietMXH - 22/10/2018 - Fix lỗi CL 109:Xuất hóa đơn==================================================
                            #endregion
                            break;
                        case 112:
                            #region Update Duyet Seri Voucher
                            var listVoucherAp = (from f in db.RequestDetails
                                                 where f.RequestId == request.Id && f.Approved == true
                                                 && f.Status == Key.Status.Available
                                                 select f).ToList();
                            foreach (var item in listVoucherAp)
                            {
                                sql.ExecuteWithoutResult("POS_UpdateApproveVoucher", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID", request.Id),
                                new SqlParameter("@DocEntry", item.Quantity6),
                                new SqlParameter("@ApproveBy", UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Status", 'C')
                            });
                            }

                            var listVoucherNotAp = (from f in db.RequestDetails
                                                    where f.RequestId == request.Id && f.Approved == false
                                                    && f.Status == Key.Status.Available
                                                    select f).ToList();
                            foreach (var item in listVoucherNotAp)
                            {
                                sql.ExecuteWithoutResult("POS_UpdateApproveVoucher", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID", request.Id),
                                new SqlParameter("@DocEntry", item.Quantity6),
                                new SqlParameter("@ApproveBy", UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Status", 'K')
                            });
                            }
                            #endregion
                            break;
                        case 114:
                            #region Duyet chuyen trang thai done productdemo cho loai nhap hàng demo 114
                            sql.ExecuteWithoutResult("CompletedProductDemo_114", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@requestId", request.Id),
                                new SqlParameter("@updateBy", UserManager.CurrentUser.InsideCode),
                            });
                            #endregion
                            break;
                        case 115:
                            #region mkt do mkt tạo - tách và cập nhật lại
                            if (request.StepNo == 3 && request.ToShop != null)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            break;
                        case 120:
                            #region Update Duyet Gom Hàng Bảo hành sang POS
                            var listHangAp = (from f in db.RequestDetails
                                              where f.RequestId == request.Id && f.Approved == true
                                              && f.Status == Key.Status.Available
                                              select f).ToList();
                            foreach (var item in listHangAp)
                            {
                                DataTable tableResult = sql.ExecuteCommand("POS_UpdateApprovedGomhangBH", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@MaYCDC", item.Property1),
                                new SqlParameter("@MaPhieuBH", item.Property3),
                                new SqlParameter("@MaPKThieu", item.Property6),
                                new SqlParameter("@Status", "C"),
                                new SqlParameter("@ApproveBy", UserManager.CurrentUser.InsideCode)
                            });
                                if (tableResult.Rows[0][0].ToString() == "0")
                                {
                                    TempData["Message"] = "Lỗi trong quá trình cập nhật dữ liệu sang POS!";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                            }

                            var listHangNotAp = (from f in db.RequestDetails
                                                 where f.RequestId == request.Id && f.Approved == false
                                                 && f.Status == Key.Status.Available
                                                 select f).ToList();
                            foreach (var item in listHangNotAp)
                            {
                                DataTable table2Result = sql.ExecuteCommand("POS_UpdateApprovedGomhangBH", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@MaYCDC", item.Property1),
                                    new SqlParameter("@MaPhieuBH", item.Property3),
                                    new SqlParameter("@MaPKThieu", item.Property6),
                                    new SqlParameter("@Status", "K"),
                                    new SqlParameter("@ApproveBy", UserManager.CurrentUser.InsideCode)
                                });
                                if (table2Result.Rows[0][0].ToString() == "0")
                                {
                                    TempData["Message"] = "Lỗi trong quá trình cập nhật dữ liệu sang POS!";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                            }
                            #endregion
                            break;
                        case 121:
                            #region HienDT23 - đẩy mã calllog DH Ecom sang POS sau khi đã duyệt
                            if (request.StepNo == 1 && request.Status == 4)
                            {
                                SqlParameter[] param = new SqlParameter[]
                        {
                            new SqlParameter("@RequestId", request.Id),
                        };
                                DataTable tablesEcom = sql.ExecuteCommand("sp_POS_UpdateApproved_DHECOM", CommandType.StoredProcedure, param);

                                if (tablesEcom != null && tablesEcom.Rows.Count > 0)
                                {
                                    messageECom = "<br/>Hoàn tất đơn hàng ECom sang POS thành công!";
                                }
                                else
                                {
                                    messageECom = "<br/>Có lỗi trong quá trình thao tác đơn hàng ECom sang POS!";
                                }
                            }
                            #endregion
                            break;
                        case 123:
                            #region Xác nhận callog miếng dán màn hình 123
                            if (request.StepNo == 1)
                            {
                                SqlParameter[] param = new SqlParameter[]
                        {
                            new SqlParameter("@Callog_ID", request.Id),
                            new SqlParameter("@Assigner", UserManager.CurrentUser.InsideCode)
                        };
                                sql.ExecuteWithoutResult("Push_ApprovedRequestMDMH", CommandType.StoredProcedure, param);
                            }
                            #endregion
                            break;
                        case 124:
                            #region Xác nhận callog Xuất khac của kiểm soát nội bộ 124
                            if (request.StepNo == 1)
                            {
                                SqlParameter[] param = new SqlParameter[]
                        {
                            new SqlParameter("@RequestId", request.Id),
                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                        };
                                sql.ExecuteWithoutResult("POS_Approve_XK_KSNB", CommandType.StoredProcedure, param);
                            }
                            #endregion
                            break;
                        case 125:
                            #region Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC
                            //===========================Thêm xử lý cho nut hoàn tất  - TRUNGNC3 - 21.10.2016 -Loại 155
                            if (request.StepNo == 2)
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                DataTable tablesRD = sql.ExecuteCommand("Request_CupParent_ProductHCCreate_SendPOS", CommandType.StoredProcedure, param);
                                if (tablesRD != null && tablesRD.Rows.Count > 0)
                                {
                                    DataRow row = tablesRD.Rows[0];
                                    message125 = row["Message"].ToString();
                                }
                            }
                            else if (request.StepNo == 4)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            break;
                        case 126:
                            #region Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC
                            //===========================Thêm xử lý cho nut hoàn tất  - TRUNGNC3 - 21.10.2016 -Loại 155
                            if (request.StepNo == 2)
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                DataTable tablesRD = sql.ExecuteCommand("Request_CupParent_ProductHCCreate_SendPOS", CommandType.StoredProcedure, param);
                                if (tablesRD != null && tablesRD.Rows.Count > 0)
                                {
                                    DataRow row = tablesRD.Rows[0];
                                    message125 = row["Message"].ToString();
                                }
                            }
                            else if (request.StepNo == 4)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            break;
                        case 127:
                            #region Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC
                            if (request.StepNo == 4)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            break;
                        case 130:
                            #region Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC
                            if (request.StepNo == 4)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            break;
                        //▼ ChuongNT3 - 22/10/2018 - thêm hình up thêm
                        case 134:
                            #region MyRegion
                            sql.ExecuteCommand("Change_CC_SM_Shop", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id)
                                        });
                            #endregion
                            break;
                        case 143:
                            #region MyRegion
                            sql.ExecuteCommand("Change_CC_SM_Shop", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                            new SqlParameter("@RequestId", request.Id)
                                        });
                            #endregion
                            break;
                        //▲ ChuongNT3 - 22/10/2018 - thêm hình up thêm
                        case 145:
                            #region MyRegion
                            SqlParameter[] param_145 = new SqlParameter[] {
                            new SqlParameter("@RequestId", request.Id),
                        };
                            sql.ExecuteWithoutResult("Callog_CallCRMXuLyKey", CommandType.StoredProcedure, param_145);
                            #endregion
                            break;
                        case 150:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_Requests_Temporary_Delete", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestID", request.Id) });
                            sql.ExecuteWithoutResult("sp_CreatePhieuViPhamAfterComplete_150", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });  // LuanNT44-19/11/2019-150-Sinh vi phạm sau hoàn tất CL
                            #endregion
                            break;
                        case 152:
                            #region MyRegion
                            if (request.StepNo == 2 && request.FromShop != null /*&& request.FromShop.ToString() != ""*/)
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                DataTable tablesRD = sql.ExecuteCommand("huypq19_CupParentRequestDetails", CommandType.StoredProcedure, param);
                                if (tablesRD != null && tablesRD.Rows.Count > 0)
                                {
                                    DataRow row = tablesRD.Rows[0];
                                    message152 = row["Message"].ToString();
                                }
                            }
                            #endregion
                            break;
                        case 155:
                            #region Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC
                            //===========================Thêm xử lý cho nut hoàn tất  - TRUNGNC3 - 21.10.2016 -Loại 155
                            if (request.StepNo == 2)
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                DataTable tablesRD = sql.ExecuteCommand("Request_CupParent_ProductHCCreate_SendPOS", CommandType.StoredProcedure, param);
                                if (tablesRD != null && tablesRD.Rows.Count > 0)
                                {
                                    DataRow row = tablesRD.Rows[0];
                                    message155 = row["Message"].ToString();
                                }
                            }
                            #endregion
                            break;
                        case 156:
                            #region MyRegion
                            ////=========== Hiền.Đoàn Đẩy INSIDE loại Duyệt thay đổi pass 156
                            Send_Value_POS_156(request.Id);
                            #endregion
                            break;
                        case 158:
                            #region Update Sang POS XBKM (Shop)
                            sql.ExecuteWithoutResult("XBKM_UpdateSangPOSNganhNhanHang", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@RequestID", request.Id) ,
                            new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                        });
                            #endregion
                            break;
                        case 161:
                            #region MyRegion
                            //============= Hiền.Đoàn 08.11.2016 Đẩy POS loại MKT khối BO tạo [Loại 161]
                            if (request.StepNo == 2 && request.FromOffice != null)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            break;
                        case 162:
                            #region Tách calllog HC do HC tạo nếu có chưa mặt hàng từ kho HC
                            //===========================Thêm xử lý cho nut hoàn tất  - TRUNGNC3 - 21.10.2016 -Loại 155
                            if (request.StepNo == 2)
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestID", request.Id), };
                                DataTable tablesRD = sql.ExecuteCommand("Request_CupParent_ProductHCCreate_SendPOS", CommandType.StoredProcedure, param);
                                if (tablesRD != null && tablesRD.Rows.Count > 0)
                                {
                                    DataRow row = tablesRD.Rows[0];
                                    message125 = row["Message"].ToString();
                                }
                            }
                            else if (request.StepNo == 4)
                            {
                                Request reques = db.Requests.FirstOrDefault(x => x.Id == request.Id && x.isParent == false);
                                if (reques != null)
                                {
                                    reques.TotalRequestComplete = 1;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            break;
                        case 169:
                            #region MyRegion
                            if ((request.StepNo == 1 || request.StepNo == 2))
                            {
                                string message169 = "";
                                SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                                    new SqlParameter("@Type",5000)
                                                };
                                DataSet table169 = sql.ExecuteCommandDataSet("sp_POS_Insert_SO_Sale_NhanVienFRT", CommandType.StoredProcedure, param);
                                if (table169.Tables.Count > 0)
                                {
                                    DataRow row = table169.Tables[table169.Tables.Count - 1].Rows[0];
                                    message169 = row["Result"].ToString();
                                }
                            }
                            #endregion
                            break;
                        case 164:
                            #region Đẩy thông tin truy thu bong đèn
                            if (request.StepNo == 2)
                            {
                                SqlParameter[] param = new SqlParameter[] {
                            new SqlParameter("@RequestId", request.Id),
                            new SqlParameter("@UpdateBy", UserManager.CurrentUser == null ?  "" : UserManager.CurrentUser .InsideCode )};
                                DataTable tableC164 = sql.ExecuteCommand("sp_CreateCallLogTruyThuFromBHBongDen", System.Data.CommandType.StoredProcedure, param);
                                if (tableC164 != null && tableC164.Rows.Count > 0)
                                {
                                    message164 = tableC164.Rows[0][0].ToString();
                                }
                            }
                            #endregion
                            break;
                        case 170:
                            #region MyRegion
                            if ((request.StepNo == 1 || request.StepNo == 2))
                            {
                                string message170 = "";
                                SqlParameter[] param = new SqlParameter[] {
                                                    new SqlParameter("@RequestID",request.Id),
                                                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                                                    new SqlParameter("@Type",5001)
                                                };
                                DataSet table169 = sql.ExecuteCommandDataSet("sp_POS_Insert_SO_Sale_NhanVienFRT", CommandType.StoredProcedure, param);
                                if (table169.Tables.Count > 0)
                                {
                                    DataRow row = table169.Tables[table169.Tables.Count - 1].Rows[0];
                                    message170 = row["Result"].ToString();
                                }
                            }
                            #endregion
                            break;
                        case 172:
                            #region MyRegion
                            if (request.Status == 4)
                            {
                                //-- Thực hiện tiếp store 
                                SqlParameter[] param_172 = new SqlParameter[] {
                                    new SqlParameter("@Result", 0),
                                    new SqlParameter("@Msg", ""),
                                    new SqlParameter("@RequestID", request.Id),
                                    new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                                };
                                sql.ExecuteWithoutResult("sp_DuyetLCNB_UpdateApprove_ToMRP", CommandType.StoredProcedure, param_172);
                            }
                            #endregion
                            break;
                        case 173:
                            //▼ Add - TrungNC3 - 2017.09.06 - Up thực loại chuyển shop khác vùng
                            #region Đẩy thông tin ngày bắt đầu chức danh mới qua inside
                            if (request.StepNo == 2)
                            {
                                sql.ExecuteWithoutResult("sp_INS_Log_ChangeShop_ChangeJob_CreateJob", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestID", request.Id),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                });
                            }
                            #endregion
                            //▲ Add - =======================================
                            break;
                        case 181:
                            #region MyRegion
                            //▼ Add - Ngoan - 09/04/2018 - Loại 181 - Gửi mail yêu cầu xử lý
                            RequestDetail requestdetail_181 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            if (requestdetail_181.Quantity3 == 3)
                            {
                                SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@CalllogID", request.Id)
                                    };
                                sql.ExecuteWithoutResult("sp_EmailXuLyKhongDenSuaChua_LightboxHangDemo", CommandType.StoredProcedure, param);
                            }
                            //▲ Add - Ngoan - 09/04/2018 - Loại 181 - Gửi mail yêu cầu xử lý
                            #endregion
                            break;
                        case 182:
                            #region MyRegion
                            //▼ Add - Ngoan - 08/12/2017 - Loại 182 - Thêm gửi trạng thái về POS
                            RequestDetail requestdetail_182 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            if (requestdetail_182.Approved == false)
                            {
                                SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@CalllogID", request.Id),
                                        new SqlParameter("@Approve", 'N'),
                                        new SqlParameter("@Updateby", UserManager.CurrentUser.InsideCode),
                                    };
                                sql.ExecuteWithoutResult("SP_CalllogKNKH_Approve", CommandType.StoredProcedure, param);
                            }
                            //▲ Add - Ngoan - 08/12/2017 - Loại 182 - Thêm gửi trạng thái về POS
                            #endregion
                            break;
                        case 183:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_Requests_Temporary_Delete", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestID", request.Id) });
                            #endregion
                            break;
                        case 185:
                            #region "Tạo calllog giữ lương từ calllog xac nhận truy thu hành chính"
                            #region Auto tạo calllog giữ lương  //   VietMXH - NOTE - Cần check lại Code
                            SqlParameter[] param_185 = new SqlParameter[] {
                            new SqlParameter("@RequestId", request.Id),
                        };
                            DataTable tableXacNhanTruyThu = sql.ExecuteCommand("sp_CreateCallLogGiuLuongFromXNTruyThu", CommandType.StoredProcedure, param_185);
                            if (tableXacNhanTruyThu != null && tableXacNhanTruyThu.Rows.Count > 0)
                            {
                                DataRow row = tableXacNhanTruyThu.Rows[0];
                                message185 = row["Msg"].ToString();
                            }
                            #endregion

                            //▼ Add - NgoanHT - 25/05/2018 - Loại: 185 - Auto tạo calllog giữ lương
                            #region Auto tạo calllog giữ lương  //   VietMXH - NOTE - Cần check lại Code
                            SqlParameter[] param_185_1 = new SqlParameter[] {
                            new SqlParameter("@RequestId", request.Id),
                        };
                            sql.ExecuteWithoutResult("sp_CreateCalllog_GiuLuong", CommandType.StoredProcedure, param_185_1);
                            #endregion
                            //▲ Add - NgoanHT - 25/05/2018 - Loại: 185 - Auto tạo calllog giữ lương
                            #endregion "Tạo calllog giữ lương từ calllog xac nhận truy thu hành chính"
                            break;
                        //▼	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                        case 186:
                            #region MyRegion
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                            {
                                SqlParameter[] param = new SqlParameter[] {
                                     new SqlParameter("@RequestId",request.Id),
                                     new SqlParameter("@Type",3),
                                     new SqlParameter("@User",UserManager.CurrentUser.InsideCode)};
                                sql.ExecuteWithoutResult("sp_Requests_AutoReply_InsertOrUpdate", CommandType.StoredProcedure, param);
                            }
                            #endregion
                            break;
                        //▲	Add - LuanNT44 - 10/12/2018 - Loại 1 : Thêm Auto trao đổi ==================================================
                        case 190:
                            #region Tạo cl Cập nhật Layout sửa chữa- Thi công sắp xếp lại Layout - Shop
                            DataTable tb_190 = sql.ExecuteCommand("sp_CreateCL_CapNhatLayoutShopMoi_Marketing", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@RequestId", request.Id) ,
                            new SqlParameter("@TypeId", 195) ,
                            new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                        });
                            if (tb_190 != null && tb_190.Rows.Count > 0)
                            {
                                DataRow row = tb_190.Rows[0];
                                Message190 = row["RequestId"].ToString();
                            }
                            #endregion
                            break;
                        //▼ Edit - ThuongNM2 - 24/10/2018 - Loại: 191 Thay đổi Rule Bước 1 thì lên bước 2
                        case 191:
                            #region Phân lại người XL CL
                            if (request.StepNo == 3 || request.StepNo == 2 && request.Status < Key.StatusRequest.Complete) // Edit - ThuongNM2 - 2018/10/26 - Thay đổi bước và bắt trạng thái CL
                            {
                                DataTable tableAs = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId",request.Id),
                                    new SqlParameter("@StepNo",request.StepNo)
                                });
                            }
                            //▼ Edit - ThuongNM2 - 29/10/2018 - Đẩy hình qua Inside
                            else if (request.StepNo == 5 && request.Status == Key.StatusRequest.Complete)
                            {
                                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                                sql.ExecuteWithoutResult("sp_Inside_ReturnLinkImage", CommandType.StoredProcedure, param);
                            }
                            //▲ Edit - ThuongNM2 - 29/10/2018 - Đẩy hình qua Inside
                            #endregion
                            break;
                        //▲  Edit - ThuongNM2 - 24/10/2018 - Loại: 191 Thay đổi Rule Bước 1 thì lên bước 2
                        case 193:
                            //▼ Add - NgoanHT - 29/01/2018 - Loại: 193,194,195 - Thêm Hàm tạo calllog loại: 193,194,195
                            #region Tạo cl Cập nhật Layout shop mới - Shop
                            DataTable tb_193 = sql.ExecuteCommand("sp_CreateCL_CapNhatLayoutShopMoi_Marketing", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@RequestId", request.Id) ,
                            new SqlParameter("@TypeId", 194) ,
                            new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                        });
                            if (tb_193 != null && tb_193.Rows.Count > 0)
                            {
                                DataRow row = tb_193.Rows[0];
                                Message193 = row["RequestId"].ToString();
                            }
                            #endregion
                            //▲ Add - NgoanHT - 29/01/2018 - Loại: 193,194,195 - Thêm Hàm tạo calllog loại: 193,194,195
                            break;

                        //▼	Edit - VietMXH - 07/07/2018 - Muốn sửa code này liên hệ VietMXH hướng dẫn==================================================
                        case 196:
                        case 197:
                            #region MyRegion
                            //▼  Edit - ChuongNT3 - 07/03/2018 - Truy thu số lượng MDNH loại 197
                            SqlParameter[] param_197 = new SqlParameter[] {
                            new SqlParameter("@RequestId", request.Id),
                        };
                            DataTable tableXacNhanTruyThu_197 = sql.ExecuteCommand("sp_CreateCallLogGiuLuongTruyThuMDMH", CommandType.StoredProcedure, param_197);
                            if (tableXacNhanTruyThu_197 != null && tableXacNhanTruyThu_197.Rows.Count > 0)
                            {
                                DataRow row = tableXacNhanTruyThu_197.Rows[0];
                                message197 = row["Msg"].ToString();
                            }
                            //▲  Edit - ChuongNT3 - 07/03/2018 - Truy thu số lượng MDNH loại 197
                            #endregion
                            break;
                        //▲	Edit - VietMXH - 07/07/2018 - Muốn sửa code này liên hệ VietMXH hướng dẫn==================================================

                        case 200:
                            #region Update Sang POS Chuyển cọc DH Ecom
                            sql.ExecuteCommand("POS_sp_Callog_Approve_Cancel", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                            new SqlParameter("@Callog",request.Id)
                        });
                            #endregion
                            break;
                        case 205:
                            #region MyRegion
                            // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                            // Edit - TuanNA89 - 10/08/2020 - Bỏ code cũ
                            #endregion
                            break;
                        case 206:
                            #region MyRegion
                            //▼  ChuongNT3 - 13/06/2018- Truy thu Sim
                            SqlParameter[] param_206 = new SqlParameter[] {
                            new SqlParameter("@RequestId", request.Id),
                        };
                            DataTable tableXacNhanTruyThu_206 = sql.ExecuteCommand("sp_CreateCallLogGiuLuongTruyThuSim", CommandType.StoredProcedure, param_206);
                            if (tableXacNhanTruyThu_206 != null && tableXacNhanTruyThu_206.Rows.Count > 0)
                            {
                                DataRow row = tableXacNhanTruyThu_206.Rows[0];
                                message206 = row["Msg"].ToString();
                            }
                            //▲  ChuongNT3 - 13/06/2018- Truy thu Sim
                            #endregion
                            break;
                        //▼ Add - TuanNA89 - 23/11/2018 - Loại 208 Kiểm tra CIC khách hàng
                        case 208:
                            #region Gọi store update qua Mobile
                            sql.ExecuteCommand("sp_SSD_KiemTraCICKhachHang_NotifyMPOS", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@RequestId",request.Id)
                        });
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 23/11/2018 - Loại 208 Kiểm tra CIC khách hàng
                        //▼ Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA
                        case 213:
                            #region Gọi store update qua Mobile
                            sql.ExecuteCommand("sp_Requests_Temporary_Delete", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@RequestID",request.Id)
                        });
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA
                        //▼ Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside  LuanNT44-30/08/2019
                        case 215:
                            #region Gọi store tách CL cha chop shop
                            if (request.RequestIdRefer == null)
                            {
                                DataTable tb215 = sql.ExecuteCommand("sp__WEB__DangKyLichDiOutsideFFs__Complete__SplitReq", CommandType.StoredProcedure, new SqlParameter[]
                                   {
                                        new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode),new SqlParameter("@ReqId",request.Id)
                                   });
                                if (tb215.Rows.Count > 0 && tb215 != null)
                                {
                                    if (int.Parse(tb215.Rows[0]["Result"].ToString()) == 1)
                                    {
                                        string listCLChild = tb215.Rows[0]["Msg"].ToString();
                                        message215 = listCLChild;
                                    }
                                }

                            }
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside LuanNT44-30/08/2019
                        //▼ Add - TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216
                        case 216:
                            #region Gọi store đẩy thông tin nhân viên trực đêm được duyệt sang Inside
                            sql.ExecuteCommand("sp_SaveThongTinNhanVienDuocDuyetPhuCap_Type216", CommandType.StoredProcedure, new SqlParameter[]
                               {
                                        new SqlParameter("@RequestId",request.Id)
                               });
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216
                        //▼ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                        case 217:
                            #region Gọi store đẩy thông tin calllog sang POS
                            sql.ExecuteCommand("GQKN_CLHoanTienKH_Type217_Complete", CommandType.StoredProcedure, new SqlParameter[]
                               {
                                        new SqlParameter("@RequestId",request.Id),
                                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                               });
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
                        //▼ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                        case 218:
                            #region Gọi store đẩy thông tin calllog sang MPOS
                            sql.ExecuteCommand("CLXuatSuDungVPKM_Type218_Complete", CommandType.StoredProcedure, new SqlParameter[]
                               {
                                        new SqlParameter("@RequestId",request.Id),
                                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                               });
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                        //▼ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                        case 219:
                            #region Gọi store đẩy thông tin calllog sang POS
                            SqlParameter[] param219 = new SqlParameter[] {
                                        new SqlParameter("@RequestId", request.Id),
                                        new SqlParameter("@InsideCode", UserManager.CurrentUser.InsideCode)
                                    };
                            sql.ExecuteCommand("sp_PushInfo_TamUng_Calllog_219", CommandType.StoredProcedure, param219);
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 10/12/2019 - Loại 219 - Tạm ứng tiền sửa chữa CSVC
                        //▼ Add - TuanNA89 - 26/11/2019 - Calllog Duyệt công nợ KH VNPT - Loại 221
                        case 221:
                            #region Automatic
                            sql.ExecuteCommand("CLDuyetCongNoKHVNPT_Type221_Complete", CommandType.StoredProcedure, new SqlParameter[]
                               {
                                        new SqlParameter("@RequestId",request.Id),
                                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                               });
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 26/11/2019 - Calllog Duyệt công nợ KH VNPT - Loại 221
                        //▼ Add - TuanNA89 - 26/11/2019 - Calllog Duyệt hình ảnh chứng từ hồ sơ Mirae - Loại 222
                        case 222:
                            #region Automatic
                            //▼ Edit - TuanNA89 - 06/01/2019 - Fix loại CL 222
                            //▲ Edit - TuanNA89 - 06/01/2019 - Fix loại CL 222
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 26/11/2019 - Calllog Duyệt hình ảnh chứng từ hồ sơ Mirae - Loại 222
                        //▼  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                        case 223:
                            #region MyRegion
                            sql.ExecuteWithoutResult("CLInAnPOSM_CalllogCon_Type223_Create", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id), new SqlParameter("@User", UserManager.CurrentUser.InsideCode) });
                            #endregion
                            break;
                        //▲  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                        case 225:
                            //▼	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                            #region MyRegion
                            sql.ExecuteCommand("sp__CallLog__XNVPQuy__SinhViPham", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                            });
                            #endregion
                            //▲	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
                            break;
                        //▼ Add - LuanNT44 - 10/02/2020 - Loại 226 - Duyệt hạn mức thẻ cào/Momo/Viettel pay
                        case 226:
                            #region Gọi store đẩy thông tin calllog sang CRM/MPOS
                            SqlParameter[] param226 = new SqlParameter[] {
                                        new SqlParameter("@RequestId", request.Id),
                                        new SqlParameter("@InsideCode", UserManager.CurrentUser.InsideCode)
                                    };
                            sql.ExecuteCommand("sp_CRM_MPOS_PushInfoHanMuc_226", CommandType.StoredProcedure, param226);
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 10/02/2020 - Loại 226 - Duyệt hạn mức thẻ cào/Momo/Viettel pay
                        case 228:
                            //▼ Add - TuanNA89 - 17/04/2020 - Duyệt trả hàng bảo hiểm sức khoẻ - Loại 228
                            #region Gọi store đẩy thông tin calllog sang CRM/MPOS
                            SqlParameter[] param228 = new SqlParameter[] {
                                        new SqlParameter("@RequestId", request.Id),
                                        new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                            sql.ExecuteCommand("CLDuyetTraHangBH_Type228_Complete", CommandType.StoredProcedure, param228);
                            #endregion
                            break;
                        //▲ Add - TuanNA89 - 17/04/2020 - Duyệt trả hàng bảo hiểm sức khoẻ - Loại 228
                        default:
                            break;
                    }
                    #endregion

                    #region ===Verify target and update via BI and Update data change shop/job/.. Inside===
                    ////======== Bỏ trừ hạn mức loại 23, loại 23 trừ luôn trong store hiendt23_CupParentRequestDetails
                    if ((request.TypeId == 23 && request.StepNo == 4) ||
                        (request.TypeId == 125 && request.StepNo == 4) ||
                        (request.TypeId == 126 && request.StepNo == 5) ||
                        (request.TypeId == 127 && request.StepNo == 3) ||
                        new List<int> { 130, 155 }.Contains(request.TypeId) ||
                        (request.TypeId == 152 && request.StepNo == 4) ||
                        (request.TypeId == 162 && request.StepNo == 5))
                    {
                        sql.ExecuteWithoutResult("Items_UpdateValueViaBI", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                    }
                    #endregion

                    #region ===Send Mail===
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Complete);
                    #endregion

                    #region ===Xuất Thông báo===
                    switch (request.TypeId)
                    {
                        case 19:
                            #region MyRegion
                            Conversation cvInternal = null;
                            //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
                            RequestDetail rd = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                cvInternal = db.Conversations.FirstOrDefault(x => x.RequestId == request.Id && x.Type == Key.Conversation.Internal && x.Message != null && x.Message.Length > 0);
                            }
                            if (cvInternal == null && rd.Property4 == "Khiếu nại")//TuanNA89 - 30/09/2019 - đổi rule tạo CL con
                            {
                                DataTable tbResultGQKN = sql.ExecuteCommand("GQKN_CreateCLCon", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestID", request.Id),
                                    new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                                });
                                TempData["Message"] = "Hoàn tất thành công! <br/> Sinh ra CallLog con là: " + tbResultGQKN.Rows[0][0].ToString();
                            }
                            else
                            {
                                TempData["Message"] = "Hoàn tất thành công! <br/>";
                            }
                            #endregion
                            break;
                        case 22:
                            #region MyRegion
                            if (request.StepNo == 2 && request.FromShop != null && request.FromShop.ToString() != "")
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + message22;
                            }
                            #endregion
                            break;
                        case 23:
                            #region MyRegion
                            //▼ Edit - ThuongNM2 - 14/01/2019 - Loại 23 - Sửa Thông báo
                            if (request.StepNo == 2 && ((request.FromShop != null && request.FromShop.ToString() != "") || ((request.FromShop == null || request.FromShop == "") && (request.FromOffice != null && request.FromOffice != "")))) // LuanNT44-16/10/2019-23
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + message23;
                            }
                            else
                            {
                                TempData["Message"] = "Hoàn tất thành công!";
                            }
                            //▲ Edit - ThuongNM2 - 14/01/2019 - Loại 23 - Sửa Thông báo
                            #endregion
                            break;
                        //▼ Add - LuanNT44 - 03/12/2019 - Loại 24 - CSVC -- LuanNT44 - 11/04/2020 - 24 - edit
                        case 24:
                            #region MyRegion
                            TempData["Message"] = "Hoàn tất thành công!";
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 03/12/2019 - Loại 24 - CSVC  -- LuanNT44 - 11/04/2020 - 24 - edit

                        case 103:   //  103:Xuất đổi cấu hình
                            #region MyRegion
                            //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            if (request.StepNo == 3)
                            {
                                TempData["Message"] += "Hoàn tất thành công! <br/>" + message103;
                            }
                            //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
                            #endregion
                            break;

                        case 121:
                            #region MyRegion
                            if (request.StepNo == 1 && request.Status == 4)
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + messageECom;
                            }
                            #endregion
                            break;

                        //▼	Edit - VietMXH - 07/07/2018 - Muốn sửa code này liên hệ VietMXH hướng dẫn==================================================
                        case 125:
                        case 126:
                        case 162:
                            #region MyRegion
                            if (request.StepNo == 2)
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + message125;
                            }
                            #endregion
                            break;
                        //▲	Edit - VietMXH - 07/07/2018 - Muốn sửa code này liên hệ VietMXH hướng dẫn==================================================

                        case 127:
                            #region MyRegion
                            if (request.StepNo == 3)
                            {
                                TempData["Message"] = "Hoàn tất thành công!";
                            }
                            #endregion
                            break;
                        case 130:
                            #region MyRegion
                            if (request.StepNo == 2)
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + message130;
                            }
                            #endregion
                            break;
                        case 152:
                            #region MyRegion
                            if (request.StepNo == 2 && request.Status == 4)
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + message152;
                            }
                            #endregion
                            break;
                        case 155:
                            #region MyRegion
                            if (request.StepNo == 2)
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + message155;
                            }
                            #endregion
                            break;
                        case 161:
                            #region MyRegion
                            if (request.StepNo == 2 && request.FromOffice != null && request.FromOffice.ToString() != "")
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + Message161;
                            }
                            #endregion
                            break;
                        case 164:
                            #region MyRegion
                            if (request.StepNo == 2)
                            {
                                TempData["Message"] = "Hoàn tất thành công!" + message164;
                            }
                            #endregion
                            break;
                        case 182:
                            #region MyRegion
                            //▼ Add - NgoanHT - 09/11/2017 - Thêm loại 182
                            if (request.Status == 4)
                            {
                                TempData["Message"] = "Hoàn tất thành công!";
                            }
                            //▲ Add========================================================
                            #endregion
                            break;
                        case 183:
                            #region MyRegion
                            if (request.StepNo == 2)
                            {
                                TempData["Message"] = "Hoàn tất thành công!";
                            }
                            #endregion
                            break;
                        case 185:
                            #region MyRegion
                            TempData["Message"] = "Hoàn tất thành công! " + message185;
                            #endregion
                            break;
                        case 190:
                            #region MyRegion
                            TempData["Message"] = "Hoàn tất thành công! <br> Tạo ra calllog con là: " + Message190;
                            #endregion
                            break;
                        //▼ Edit - ThuongNM2 - 24/10/2018 - Loại: 191 Thay đổi Rule Bước 1 thì lên bước 2 - Thông báo
                        case 191:
                            #region MyRegion
                            if ((request.StepNo == 2 || request.StepNo == 3) && request.Status != Key.StatusRequest.Complete)
                            {
                                TempData["Message"] = "Calllog " + request.Id.ToString() + " đã được duyệt và chuyển bước thành công!"; //Edit - ThuongNM2 - 2018/11/07 - Thay đổi thông báo
                            }
                            else if (request.StepNo == 1)
                            {
                                TempData["Message"] = "Hệ thống auto hoàn tất do calllog " + request.Id.ToString() + " không được duyệt thay đổi!";
                            }
                            else
                            {
                                TempData["Message"] = "Hoàn tất thành công!";
                            }
                            #endregion
                            break;
                        //▲  Edit - ThuongNM2 - 24/10/2018 - Loại: 191 Thay đổi Rule Bước 1 thì lên bước 2 - Thông báo
                        case 193:
                            #region MyRegion
                            TempData["Message"] = "Hoàn tất thành công! <br> Tạo ra calllog con là: " + Message193;
                            #endregion
                            break;

                        //▼	Edit - VietMXH - 07/07/2018 - Muốn sửa code này liên hệ VietMXH hướng dẫn==================================================
                        case 196:
                        case 197:
                            #region MyRegion
                            //▼  Add - ChuongNT3 - 23/01/2018 - Truy thu số lượng MDNH loại 197
                            TempData["Message"] = "Hoàn tất thành công! " + message197;
                            //▲  Add - ChuongNT3 - 23/01/2018 - Truy thu số lượng MDNH loại 197
                            #endregion
                            break;
                        //▲	Edit - VietMXH - 07/07/2018 - Muốn sửa code này liên hệ VietMXH hướng dẫn==================================================

                        case 198:
                            #region MyRegion
                            //▼  Add - NghiaTV5 -28/03/2018 - Bảo Hành Máy Củ 198
                            if (request.Status == 4)
                            {
                                #region Thêm điều kiện chạy store truy thu luong 198
                                string message198 = string.Empty;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                if (requestdetail.Approved == false)
                                {
                                    DataTable tabletruythubhmaycu = null;
                                    SqlParameter[] param = new SqlParameter[]
                                             {
                                                 new SqlParameter("@RequestId", request.Id),
                                                 new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode == null ?null :UserManager.CurrentUser.InsideCode),
                                             };
                                    tabletruythubhmaycu = sql.ExecuteCommand("InsertRequestCalllogGiuLuongConLoai_198", CommandType.StoredProcedure, param);

                                    if (tabletruythubhmaycu != null && tabletruythubhmaycu.Rows.Count > 0)
                                    {
                                        DataRow row = tabletruythubhmaycu.Rows[0];
                                        message198 = row["Msg"].ToString();
                                        TempData["Message"] = "Hoàn tất thành công ! </br>" + message198;
                                    }
                                }
                                #endregion
                            }
                            //▲  Add - NghiaTV5 -28/03/2018 - Bảo Hành Máy Củ 198
                            #endregion
                            break;
                        case 206:
                            #region MyRegion
                            //▼ ChuongNT3 - 13/06/2018- Truy thu Sim
                            TempData["Message"] = "Hoàn tất thành công! " + message206;
                            //▲   ChuongNT3 - 13/06/2018- Truy thu Sim   
                            #endregion
                            break;
                        //▼  Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside LuanNT44-30/08/2019
                        case 215:
                            #region MyRegion
                            TempData["Message"] = "Hoàn tất thành công! " + message215;
                            #endregion
                            break;
                        //▲ Add - LuanNT44 - 14/08/2019 - Loại 213 - Đăng ký lịch đi Outside LuanNT44-30/08/2019
                        default:
                            #region MyRegion
                            TempData["Message"] = "Hoàn tất thành công!" + CapNhatPos;
                            #endregion
                            break;
                    }
                    #endregion

                    #region ===Chuyển link===
                    switch (request.TypeId)
                    {
                        case 51:
                            #region MyRegion

                            //▼	Edit - VietMXH - 22/02/2019 - EmptyPageForMobile==================================================
                            if (Convert.ToString(form["nguyenNhanGiamGia_Select"]) == "1")
                            {
                                return null;
                            }
                            if (Convert.ToString(form["g__FromForm"]) == "Mobile")
                            {
                                return RedirectToAction("EmptyPageForMobile", "Requests");
                            }
                            //▲	Edit - VietMXH - 22/02/2019 - EmptyPageForMobile==================================================

                            #endregion
                            break;
                        case 127:
                            #region MyRegion
                            if (request.StepNo == 3 && Convert.ToString(form["Approved_HuongXL_45"]) == "0")
                            {
                                if (Session[Key.Session.BillInfo] != null)
                                {
                                    Session[Key.Session.BillInfo] = null;
                                }
                                var RequestDetailHC_ShopSend = (from a in db.RequestDetails
                                                                where a.RequestId == request.Id
                                                                select a).ToList();
                                // DataTable dtBillInfor
                                DataTable dtBillInfor = new DataTable();
                                dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
                                dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
                                dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã phòng ban nhận
                                dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
                                dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
                                dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
                                dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
                                dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
                                dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
                                dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
                                dtBillInfor.Columns.Add("TypeId", typeof(string));     //Mô tả loại calllog// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                                foreach (RequestDetail itemHC in RequestDetailHC_ShopSend)
                                {
                                    if (itemHC.Quantity1 != null && itemHC.Quantity1 > 0)
                                    {
                                        dtBillInfor.Rows.Add(
                                          UserManager.CurrentUser.InsideCode,
                                          itemHC.ItemId.ToString(),
                                          request.FromShop,
                                          "",
                                          "",
                                          "0",
                                          request.Id.ToString(),
                                          itemHC.Quantity1 != null ? itemHC.Quantity1.ToString() : "0",
                                          request.StepNo.ToString(),
                                          "",
                                          "23");
                                    }
                                }
                                if (dtBillInfor.Rows.Count > 0)
                                {
                                    Session[Key.Session.BillInfo] = dtBillInfor;
                                    return RedirectToAction("CreateBillFromHC", "Requests");
                                }
                            }
                            #endregion
                            break;
                        default:
                            #region MyRegion
                            #endregion
                            break;
                    }

                    #region ===Auto Chuyển Link nếu vẫn chạy qua được switch===
                    if (permissions.Contains(Permission.Sender))
                    {
                        return RedirectToAction("Sent", "Home");
                    }
                    return RedirectToAction("Index", "Home");
                    #endregion
                    #endregion
                }
                else
                {
                    #region ===Not Valid===
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region ===Log loi===
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1} - Sender:{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }

        [HttpPost, ValidateInput(false)]
        public ActionResult SendPartner(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            int requestId = form["RequestId"].EParseToInt();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                string message = Convert.ToString(form["Message"]);
                string messageOutSide = Convert.ToString(form["MessageNoiDungOutSideHidden"]);
                string imageChecked = Convert.ToString(form["ImageValidate"]);
                var details = Convert.ToString(form["Details"]);
                var objects = JsonConvert.DeserializeObject<dynamic>(details);

                var detailsCc = Convert.ToString(form["DetailsCc"]);
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);


                var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                if (request != null)
                {
                    #region Verify

                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }

                    #endregion

                    #region Insert Converstation
                    if (!string.IsNullOrEmpty(message) && !string.IsNullOrWhiteSpace(message))
                    {
                        var conversation = new Conversation();
                        conversation.RequestId = request.Id;
                        conversation.Sender = sender;
                        conversation.Message = message;
                        conversation.Status = Key.Status.Available;
                        conversation.TimeCreate = DateTime.Now;
                        conversation.Type = Key.Conversation.Comment;
                        conversation.StepNo = request.StepNo;
                        db.Conversations.Add(conversation);

                    }

                    #endregion

                    #region Cập nhật lại trạng thái khi người xử lý là  Assigner hoặc Assigner

                    var permissions = GetPermissions(request.Id);
                    if (permissions.Contains(Permission.Assigner) ||
                        permissions.Contains(Permission.GroupAssigner) ||
                        permissions.Contains(Permission.Admin) ||
                        permissions.Contains(Permission.SupperAdmin))
                    {
                        if (request.Status != Key.StatusRequest.Complete && request.Status != Key.StatusRequest.Reply)
                        {
                            request.Status = Key.StatusRequest.Processing;
                            request.StepStatus = Key.StatusRequest.Processing;
                            request.Assigner = sender;
                            if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                request.TimeLastAdminUpdate = DateTime.Now;
                                request.LastAdminUpdate = sender;
                            }
                            #region Update or Insert RequestStep
                            var step = db.RequestSteps.FirstOrDefault(
                                               x => x.RequestId == request.Id
                                               && x.Status == Key.Status.Available
                                               && x.StepNo == request.StepNo);
                            if (step != null)
                            {
                                step.Assigner = sender;
                            }
                            else
                            {
                                var oldStep = (from s in db.RequestSteps
                                               where s.RequestId == request.Id
                                               && s.StepNo == request.StepNo - 1
                                               && s.Status == Key.Status.Available
                                               select s).FirstOrDefault();
                                step = new RequestStep();
                                step.RequestId = request.Id;
                                step.TimeCreate = DateTime.Now;
                                step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                                step.Assigner = sender;
                                step.StepNo = request.StepNo;
                                step.Status = Key.Status.Available;
                                db.RequestSteps.Add(step);
                            }
                            #endregion
                        }
                    }

                    if ((permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin)) && request.Status == Key.StatusRequest.Reply)
                    {
                        request.StillShowing = true;
                    }

                    if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && (request.StepNo == 1 || request.StepNo == 3))
                    {
                        string timeRecipt = form["dateRecive"];
                        string timeUat = form["dateUAT"];
                        string timeGolive = form["dateGolive"];
                        string timeGoliveDK = form["dateGoliveDK"];
                        //string timeFuFi = form["dateFuFi"];

                        if (timeRecipt == "") { request.TimeReceipt = null; }
                        else { request.TimeReceipt = DateTime.Parse(timeRecipt); }

                        if (timeUat == "") { request.TimeUat = null; }
                        else { request.TimeUat = DateTime.Parse(timeUat); }

                        if (timeGolive == "") { request.TimeGolive = null; }
                        else { request.TimeGolive = DateTime.Parse(timeGolive); }

                        if (timeGoliveDK == "") { request.TimeGoliveExpected = null; }
                        else { request.TimeGoliveExpected = DateTime.Parse(timeGoliveDK); }

                        //if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        //else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }

                    }
                    else if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && request.StepNo == 2)
                    {
                        string timeFuFi = form["dateFuFi"];
                        if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }
                    }


                    #endregion

                    #region Insert Cc
                    if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc) || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                    {
                        string strCc = "";
                        foreach (var item in Ccs) { strCc += item.id + ","; }
                        if (strCc.Length > 0)
                        {
                            strCc = strCc.Substring(0, strCc.Length - 1);
                            sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                        }
                        else
                        {
                            (from a in db.Assigners
                             where a.RequestId == request.Id
                             && a.Type == Key.TypeAssigner.Cc
                             select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                        }


                    }
                    #endregion

                    #region Update itrem
                    if (request.TypeId == 134 || request.TypeId == 143) // ChuongNT3 - 05/07/2018 - loại 143
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Time1 = item.Property9 == requestdetail.Property9 ? requestdetail.Time1 : DateTime.Now;
                                    requestdetail.Time2 = item.CalllogBill == requestdetail.CustomerName ? requestdetail.Time2 : DateTime.Now;
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.Property10 = item.Property10;
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Property8 = item.Property8;
                                    requestdetail.Property9 = item.Property9;
                                    requestdetail.Property12 = item.Property12; //Add - ChuongNT3 - 02/05/2018 -- Thêm mục chọn
                                    requestdetail.SaleCode = item.SaleCode;    //ChuongNT3 - 18/07/2018 - thêm id DN
                                    //▼Edit - ChuongNT3 - 07/05/2018 -- xác nhận gởi outside
                                    if (requestdetail.Quantity != null)
                                    { requestdetail.Quantity = requestdetail.Quantity + 1; }
                                    else { requestdetail.Quantity = 1; }//1 đã gởi sang outside
                                    //▲Edit - ChuongNT3 - 07/05/2018 -- xác nhận gởi outside
                                    requestdetail.Note = item.Note;
                                    requestdetail.CustomerName = item.CalllogBill;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.Id == 186) { }
                    #endregion

                    #region UploadImage
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        //Save file content goes here
                        string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database

                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = request.Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);
                        }
                    }
                    #endregion

                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    db.SaveChanges();

                    //▼ Edit - PhiN - 21/12/2017 - CR Claim subsidy - Edit popup ==================================================

                    XMail.Send(request.Id, "[CallLog]  " + request.Title, XMail.ProcessType.Communicate);
                    DataTable table = new DataTable();
                    table = sql.ExecuteCommand("CallLog_CreateRequestOutSide", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId", request.Id),
                        new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                        new SqlParameter("@ContentOut", messageOutSide)
                    });

                    request = (new CallLogDbContext()).Requests.FirstOrDefault(x => x.Id == requestId);
                    if (table != null && table.Rows.Count > 0 && request.TypeId == 186 && request.RequestIdRefer != null)
                    {
                        TempData["Message"] = "Callog đã được gửi cho đối tác Mã CallLog của đối tác là : " + Convert.ToString(request.RequestIdRefer);
                        return RedirectToAction("Index", "Home");
                    }
                    if (request.RequestIdRefer != null)
                    {
                        var _requestdetails = (new CallLogDbContext()).RequestDetails.FirstOrDefault(x => x.RequestId == requestId); //ChuongNT3 - 10//12/2018 - thêm tgian / lý do ko nhâp
                        TempData["Message"] = "Callog đã được gửi cho đối tác Mã CallLog của đối tác là : " + Convert.ToString(_requestdetails.EmpCode); //ChuongNT3 - 10//12/2018 - thêm tgian / lý do ko nhâp
                        if (permissions.Contains(Permission.Sender))
                        {
                            return RedirectToAction("Sent", "Home");
                        }
                        return RedirectToAction("Index", "Home");
                    }
                    //▼ Edit - PhiN - 21/12/2017 - CR Claim subsidy - Edit popup ==================================================

                    if (table != null && table.Rows.Count > 0)
                    {
                        TempData["Message"] = "Gửi đối tác Thành Công! ";
                    }
                    else
                    {
                        TempData["Message"] = "Gửi đối tác không thành công vui lòng kiểm tra lại!";
                    }

                    if (permissions.Contains(Permission.Sender))
                    {
                        return RedirectToAction("Sent", "Home");
                    }
                    return RedirectToAction("Index", "Home");

                }
                else
                {
                    #region Not Valid
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region Ghi log
                Logger.WriteLogError("RequestsController SendPartner()", String.Format("{0} -  Id:{1} - sender :{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }

        [HttpPost, ValidateInput(false)]
        public ActionResult ChangePart(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            int requestId = form["RequestId"].EParseToInt();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                string message = Convert.ToString(form["Message"]);
                string imageChecked = Convert.ToString(form["ImageValidate"]);
                var details = Convert.ToString(form["Details"]);
                var objects = JsonConvert.DeserializeObject<dynamic>(details);

                var detailsCc = Convert.ToString(form["DetailsCc"]);
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);

                string CheckImagesApproved = Convert.ToString(form["CheckApprovedImages_166"]);

                var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                if (request != null)
                {
                    #region Verify

                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    else if (request.Status == Key.StatusRequest.Complete && request.TypeId == 19)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hoàn tất không thể trao đổi!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    #endregion

                    #region Insert Converstation
                    var conversation = new Conversation();
                    conversation.RequestId = request.Id;
                    conversation.Sender = sender;
                    conversation.Message = message;
                    conversation.Status = Key.Status.Available;
                    conversation.TimeCreate = DateTime.Now;
                    conversation.Type = Key.Conversation.Comment;
                    conversation.StepNo = request.StepNo;
                    db.Conversations.Add(conversation);
                    if ((request.TypeId == 19) && request.RequestIdRefer != null)
                    {
                        var conversationAdd = new Conversation();
                        conversationAdd.RequestId = Convert.ToInt64(request.RequestIdRefer);
                        conversationAdd.Sender = sender;
                        conversationAdd.Message = message;
                        conversationAdd.Status = Key.Status.Available;
                        conversationAdd.TimeCreate = DateTime.Now;
                        conversationAdd.Type = Key.Conversation.Comment;
                        conversationAdd.StepNo = request.StepNo;
                        db.Conversations.Add(conversationAdd);
                    }
                    #endregion

                    #region Cập nhật lại trạng thái khi người xử lý là  Assigner hoặc Assigner

                    var permissions = GetPermissions(request.Id);
                    if (permissions.Contains(Permission.Assigner) ||
                        permissions.Contains(Permission.GroupAssigner) ||
                        (permissions.Contains(Permission.Admin) && request.TypeId != 19) ||
                        permissions.Contains(Permission.SupperAdmin))
                    {
                        if (request.Status != Key.StatusRequest.Complete && request.Status != Key.StatusRequest.Reply)
                        {
                            request.Status = Key.StatusRequest.Processing;
                            request.StepStatus = Key.StatusRequest.Processing;
                            request.Assigner = sender;
                            if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                request.TimeLastAdminUpdate = DateTime.Now;
                                request.LastAdminUpdate = sender;
                            }
                            //#region loại tạo lịch quỹ 28
                            //if (request.TypeId == 28 && objects[0].HXuLy == "Hẹn lại" && request.Status != Key.StatusRequest.Complete)
                            //{
                            //    request.Status = Key.StatusRequest.Complete;
                            //    request.TimeFinish = DateTime.Now;
                            //    request.TimeClose = DateTime.Now;
                            //    request.StepStatus = Key.StatusRequest.Reply;
                            //    long tienNopTT = (long)objects[0].TienNopTT;
                            //    sql.ExecuteWithoutResult("POS_EventQuy_UpdateHXLHenLai", CommandType.StoredProcedure, new SqlParameter[] 
                            //    { 
                            //        new SqlParameter("@RequestID", request.Id),
                            //        new SqlParameter("@SoTienNopTT", tienNopTT)
                            //    });
                            //}
                            //#endregion

                            #region Update or Insert RequestStep
                            var step = db.RequestSteps.FirstOrDefault(
                                               x => x.RequestId == request.Id
                                               && x.Status == Key.Status.Available
                                               && x.StepNo == request.StepNo);
                            if (step != null)
                            {
                                step.Assigner = sender;
                                //if (request.TypeId == 28 && objects[0].HXuLy == "Hẹn lại")
                                //{
                                //    step.TimeEnd = DateTime.Now;
                                //}
                            }
                            else
                            {
                                var oldStep = (from s in db.RequestSteps
                                               where s.RequestId == request.Id
                                               && s.StepNo == request.StepNo - 1
                                               && s.Status == Key.Status.Available
                                               select s).FirstOrDefault();
                                step = new RequestStep();
                                step.RequestId = request.Id;
                                step.TimeCreate = DateTime.Now;
                                step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                                step.Assigner = sender;
                                step.StepNo = request.StepNo;
                                step.Status = Key.Status.Available;
                                //if (request.TypeId == 28 && objects[0].HXuLy == "Hẹn lại")
                                //{
                                //    step.TimeEnd = DateTime.Now;
                                //}
                                db.RequestSteps.Add(step);
                            }
                            #endregion
                        }
                    }

                    //if ((permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin)) && request.Status == Key.StatusRequest.Reply)
                    if (request.Status == Key.StatusRequest.Reply)
                    {
                        request.StillShowing = true;
                    }
                    else if (request.Status == Key.StatusRequest.Complete && (request.TypeId == 19 || request.TypeId == 1 || request.TypeId == 3))
                    {
                        request.StillShowing = true;
                    }

                    if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && (request.StepNo == 1 || request.StepNo == 3))
                    {
                        string timeRecipt = form["dateRecive"];
                        string timeUat = form["dateUAT"];
                        string timeGolive = form["dateGolive"];
                        string timeGoliveDK = form["dateGoliveDK"];
                        //string timeFuFi = form["dateFuFi"];

                        if (timeRecipt == "") { request.TimeReceipt = null; }
                        else { request.TimeReceipt = DateTime.Parse(timeRecipt); }

                        if (timeUat == "") { request.TimeUat = null; }
                        else { request.TimeUat = DateTime.Parse(timeUat); }

                        if (timeGolive == "") { request.TimeGolive = null; }
                        else { request.TimeGolive = DateTime.Parse(timeGolive); }

                        if (timeGoliveDK == "") { request.TimeGoliveExpected = null; }
                        else { request.TimeGoliveExpected = DateTime.Parse(timeGoliveDK); }

                        //if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        //else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }

                    }
                    else if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner))
                        && request.TypeId == 3 && request.StepNo == 2)
                    {
                        string timeFuFi = form["dateFuFi"];
                        if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }
                    }


                    #endregion

                    #region Insert Cc
                    if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc) || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                    {
                        string strCc = "";
                        foreach (var item in Ccs) { strCc += item.id + ","; }
                        if (strCc.Length > 0)
                        {
                            strCc = strCc.Substring(0, strCc.Length - 1);
                            sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                        }
                        else
                        {
                            (from a in db.Assigners
                             where a.RequestId == request.Id
                             && a.Type == Key.TypeAssigner.Cc
                             select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                        }


                    }
                    #endregion

                    #region Update Item
                    #endregion

                    #region UploadImage
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        //Save file content goes here
                        string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database

                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = request.Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);

                            //================ Hiền.Đoàn 29.09.2016 Lưu ảnh vào Bảng duyệt ảnh
                            DataTable tablesImages = sql.ExecuteCommand("FileAttach_InsertToTableDuyetAnh", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID", request.Id),
                                new SqlParameter("@LinkAnh", Keyword.GetFolderFileAttach() + fName),
                                new SqlParameter("@Status", 2 ),
                                new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode)
                            });
                        }
                    }
                    #endregion

                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    db.SaveChanges();

                    #region "Chuyển bộ phận liên quan"
                    if (request.TypeId == 19)
                    {

                    }
                    #endregion "Chuyển bộ phận liên quan"

                    #region Gửi Notification GQKN
                    if (request.TypeId == 19)
                    {
                        var converHXLKH = db.Conversations.FirstOrDefault(x => x.RequestId == request.Id
                                            && x.Status == Key.Status.Available
                                            && x.Type == Key.Conversation.Trouble);
                        EmployeeDAL empJ = new EmployeeDAL();

                        if (converHXLKH != null
                            && ((DateTime.Now.Hour >= 18 && DateTime.Now.Hour <= 23) ||
                                (DateTime.Now.Hour >= 0 && DateTime.Now.Hour < 8) ||
                                    (DateTime.Now.Hour == 8 && DateTime.Now.Minute < 30))
                            && empJ.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == false
                            )
                        {
                            sql.ExecuteWithoutResult("sp_NotifyGQKN_CreateCallLog", CommandType.StoredProcedure, new SqlParameter[]{
                                    new SqlParameter("@RequestID",request.Id),
                                    new SqlParameter("@Title",request.Title),
                                    new SqlParameter("@FromUser",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@ToUser","1601"),
                                    new SqlParameter("@Conversation",message),
                                    new SqlParameter("@SDT_SM_ShopGui",string.Empty),
                                    new SqlParameter("@RequestID_NotifyGQKN",request.Id)
                            });
                        }
                    }
                    #endregion

                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Communicate);

                    EmployeeDAL empJChek = new EmployeeDAL();
                    if (request.TypeId == 19
                        && ((DateTime.Now.Hour >= 18 && DateTime.Now.Hour <= 23) ||
                                (DateTime.Now.Hour >= 0 && DateTime.Now.Hour < 8) ||
                                    (DateTime.Now.Hour == 8 && DateTime.Now.Minute < 30))
                        && empJChek.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == false
                        )
                    {
                        TempData["MessageError"] = "Nếu TH của bạn là khẩn cấp, vui lòng liên hệ số hotline 01652366360 để được hỗ trợ nhanh nhất.";
                    }
                    else
                    {
                        TempData["Message"] = "Chuyển calllog sang bộ phận liên quan thành công!";
                    }

                    if (permissions.Contains(Permission.Sender))
                    {
                        return RedirectToAction("Sent", "Home");
                    }
                    return RedirectToAction("Index", "Home");

                }
                else
                {
                    #region Not Valid
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region Ghi log
                Logger.WriteLogError("RequestsController ChangePart()", String.Format("{0} -  Id:{1} - sender :{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }
        public ActionResult Print(long Id, int Type = 1)
        {
            try
            {
                string path = string.Empty;
                string fileName = string.Empty;
                string pathData = string.Empty;
                ViewBag.Type = Type;
                Request request = db.Requests.FirstOrDefault(x => x.Id == Id);
                if (request != null && (request.TypeId == 82 || request.TypeId == 103 || request.TypeId == 32 || request.TypeId == 77 || request.TypeId == 75 || request.TypeId == 68 || request.TypeId == 154 || request.TypeId == 154 || request.TypeId == 42))
                {
                    ViewBag.TimeCreate = request.TimeCreate;
                    if (request.TypeId == 82)
                    {
                        ShopDAL shopDal = new ShopDAL();
                        var ShopInfo = shopDal.Get(request.FromShop);
                        ViewBag.ShopName = ShopInfo.WarehouseName;
                        ViewBag.CompanyName = ShopInfo.CompanyName;
                        var Categorie = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                        ViewBag.CatagoriName = "ĐỀ NGHỊ NHẬP " + Categorie.Description.ToUpper();
                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                    }
                    else if (request.TypeId == 103)
                    {
                        ShopDAL shopDal = new ShopDAL();
                        var ShopInfo = shopDal.Get(request.FromShop);
                        ViewBag.ShopName = ShopInfo.WarehouseName;
                        ViewBag.CompanyName = ShopInfo.CompanyName;
                        var Categorie = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                        ViewBag.CatagoriName = "ĐỀ NGHỊ " + Categorie.Description.ToUpper();
                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                    }
                    else if (request.TypeId == 32)
                    {
                        ShopDAL shopDal = new ShopDAL();
                        var ShopInfo = shopDal.Get(request.FromShop);
                        ViewBag.ShopName = ShopInfo.WarehouseName;
                        ViewBag.CompanyName = ShopInfo.CompanyName;
                        var Categorie = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                        ViewBag.CatagoriName = "ĐỀ NGHỊ " + Categorie.Description.ToUpper();
                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                    }
                    else if (request.TypeId == 77)
                    {
                        ShopDAL shopDal = new ShopDAL();
                        var ShopInfo = shopDal.Get(request.FromShop);
                        ViewBag.ShopName = "Số : 4053 FAF/FRT";
                        ViewBag.CompanyName = ShopInfo.CompanyName;
                        SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id), };
                        DataTable table = sql.ExecuteCommand("Get_TitleFormPrint", CommandType.StoredProcedure, param);
                        var Categorie = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                        ViewBag.CatagoriName = "<P>CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM <BR/>" +
                                               "ĐỘC LẬP-TỰ DO-HẠNH PHÚC <BR/>" +
                                               "<span style='font-style: italic;font-size:20px'>" + table.Rows[0][0].ToString() + "</span><br/>" +
                                               "GIẤY ĐỀ NGHỊ THANH TOÁN <BR/>" +
                                               "</P>";

                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                    }
                    else if (request.TypeId == 75)
                    {
                        ShopDAL shopDal = new ShopDAL();
                        var ShopInfo = shopDal.Get(request.FromShop);
                        ViewBag.ShopName = ShopInfo.WarehouseName;
                        ViewBag.CompanyName = ShopInfo.CompanyName;
                        var Categorie = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                        ViewBag.CatagoriName = "ĐỀ NGHỊ " + Categorie.Description.ToUpper();
                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                    }
                    else if (request.TypeId == 68)
                    {
                        ShopDAL shopDal = new ShopDAL();
                        var ShopInfo = shopDal.Get(request.FromShop);
                        ViewBag.ShopName = ShopInfo.WarehouseName;
                        ViewBag.CompanyName = "";
                        var Categorie = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                        ViewBag.CatagoriName = "<P>CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM <BR/>" +
                                               "ĐỘC LẬP-TỰ DO-HẠNH PHÚC <BR/>" +
                                               "<span style='font-style: bold;font-size:30px'>BIÊN BẢN KIỂM KÊ QUỸ TIỀN MẶT</span><br/>" +
                                               "</P>";

                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                    }
                    else if (request.TypeId == 154)
                    {
                        ShopDAL shopDal = new ShopDAL();
                        var ShopInfo = shopDal.Get(request.FromShop);
                        RequestDetail RequestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == Id);
                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                    }
                    else if (request.TypeId == 42)
                    {
                        ShopDAL shopDal = new ShopDAL();
                        var ShopInfo = shopDal.Get(request.FromShop);
                        //ViewBag.ShopName = ShopInfo.WarehouseName;
                        //ViewBag.CompanyName = ShopInfo.CompanyName;
                        //var Categorie = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                        //ViewBag.CatagoriName = "ĐỀ NGHỊ NHẬP " + Categorie.Description.ToUpper();
                        RequestDetail RequestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == Id);
                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                    }
                    return View();
                }
                else if (request.TypeId == 163 || request.TypeId == 164)
                {
                    path = "~/TemplateExcel/FileBBBG.xlsx";
                    fileName = "FileBBBG.xlsx";
                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id), };
                    DataTable table_Lamp = sql.ExecuteCommand("sp_GetInfoBBBG", CommandType.StoredProcedure, param);
                    if (table_Lamp != null && table_Lamp.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets.First(); ;
                                worksheet.Cells[4, 2].Value = request.Id.ToString();
                                worksheet.Cells[4, 7].Value = DateTime.Now.ToString("dd/MM/yyyy");

                                int index = 7;
                                foreach (DataRow row in table_Lamp.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["STT"].ToString();
                                    col++; worksheet.Cells[index, col].Value = request.Id.ToString();
                                    col++; worksheet.Cells[index, col].Value = row["ItemCode"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["ItemName"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Quantity1"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Note"].ToString();

                                    index++;
                                }
                                worksheet.Cells[table_Lamp.Rows.Count + 8, 2].Value = "Bên giao";
                                worksheet.Cells[table_Lamp.Rows.Count + 8, 4].Value = "Bên nhận";

                                using (ExcelRange Rng = worksheet.Cells[7, 1, table_Lamp.Rows.Count + 7, 6])
                                {
                                    Rng.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                                    Rng.Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                                    Rng.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                                    Rng.Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                                    Rng.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                                    Rng.Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                                    Rng.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                                    Rng.Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                                }

                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=FileBBBG-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                }
                else if (request.TypeId == 23)
                {
                    path = "~/TemplateExcel/DeNghiThanhToan.xlsx";
                    fileName = "FileBBBG.xlsx";
                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                    DataTable table_DNTT = sql.ExecuteCommand("sp_GetInfoDeNghiThanhToan", CommandType.StoredProcedure, param);
                    if (table_DNTT != null && table_DNTT.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets.First(); ;
                                worksheet.Cells[8, 2].Value = UserManager.CurrentUser.EmployeeName;

                                int index = 14;
                                foreach (DataRow row in table_DNTT.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["STT"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Property9"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Item"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["QuantityAvaiable"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Unit"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Price"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Sum"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Note"].ToString();

                                    index++;
                                }
                                worksheet.Cells[table_DNTT.Rows.Count + 17, 1].Value = "Bằng chữ";
                                worksheet.Cells[table_DNTT.Rows.Count + 18, 1].Value = "Người đề nghị";
                                worksheet.Cells[table_DNTT.Rows.Count + 18, 3].Value = "Trưởng bộ phận";
                                worksheet.Cells[table_DNTT.Rows.Count + 18, 6].Value = "Kế toán trưởng";
                                worksheet.Cells[table_DNTT.Rows.Count + 18, 9].Value = "KT. Ban giám đốc";
                                worksheet.Cells[table_DNTT.Rows.Count + 24, 1].Value = UserManager.CurrentUser.EmployeeName;
                                worksheet.Cells[table_DNTT.Rows.Count + 24, 3].Value = "Nguyễn Bạch Dương";
                                worksheet.Cells[table_DNTT.Rows.Count + 24, 6].Value = "Phạm Thị Ngọc Anh";
                                worksheet.Cells[table_DNTT.Rows.Count + 24, 9].Value = "Nguyễn Bạch Dương ";

                                #region Định dạng lưới chi tiết
                                using (ExcelRange Rng = worksheet.Cells[13, 1, table_DNTT.Rows.Count + 15, 8])
                                {
                                    Rng.Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                                    Rng.Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);
                                    Rng.Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                                    Rng.Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);
                                    Rng.Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                                    Rng.Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);
                                    Rng.Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                                    Rng.Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);
                                }
                                #endregion Định dạng lưới chi tiết

                                #region Định dạng ô chi tiết
                                using (ExcelRange Rng = worksheet.Cells[table_DNTT.Rows.Count + 17, 1, table_DNTT.Rows.Count + 17, 1])
                                {
                                    Rng.Style.Font.Bold = true;
                                    Rng.Style.Font.Size = 12;
                                }
                                using (ExcelRange Rng = worksheet.Cells[table_DNTT.Rows.Count + 18, 1, table_DNTT.Rows.Count + 18, 9])
                                {
                                    Rng.Style.Font.Bold = true;
                                    Rng.Style.Font.Size = 12;
                                }
                                using (ExcelRange Rng = worksheet.Cells[table_DNTT.Rows.Count + 24, 1, table_DNTT.Rows.Count + 24, 9])
                                {
                                    Rng.Style.Font.Bold = true;
                                    Rng.Style.Font.Size = 12;
                                }
                                #endregion Định dạng ô chi tiết
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=DeNghiThanhToan-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                }
                TempData["Message"] = "Request chưa cấu hình để in!";
                return RedirectToAction("Index", "Home");
            }
            catch (Exception ex)
            {
                TempData["Message"] = "Request chưa cấu hình để in!EX";
                return RedirectToAction("Index", "Home");
            }

        }
        public ActionResult PrintInfo(long Id, int Type = 1)
        {

            Request request = db.Requests.FirstOrDefault(x => x.Id == Id);
            Dictionary<string, List<Dictionary<string, object>>> myList =
                            new Dictionary<string, List<Dictionary<string, object>>>();
            DataSet infors = sql.ExecuteCommandDataSet("Request_GetDetail", CommandType.StoredProcedure, new SqlParameter[] {
            new SqlParameter("@RequestId",Id)});
            myList.Add("danhsachnguoixuly", infors.Tables[2].EParseToObjects());

            if (request.TypeId == 82 || request.TypeId == 103)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 32)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("Items_GetByRequest", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 77)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("RequestDetail_Get", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 75)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 68)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("[Items_GetByRequest]", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 154)
            {

                //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                if (Type == 1)
                {
                    DataTable l_DataTable = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", Id) });
                    myList.Add("chitietyeucau", l_DataTable.EParseToObjects());
                }
                else if (Type == 2)
                {
                    DataTable l_DataTable = sql.ExecuteCommand("sp__Request__Print__BillVanChuyen__GetInfoHC", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@ReqId", Id) });
                    myList.Add("chitietyeucau", l_DataTable.EParseToObjects());
                }
                //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

            }
            else if (request.TypeId == 42)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("[dainlp_GetAllRequestsDetails]", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }



            string ans = JsonConvert.SerializeObject(myList, Formatting.Indented);
            var jsonResult = Json(ans, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        #endregion

        [HttpGet] // create.js
        [CompressCode]
        public ActionResult GetEmps(string ShopCode = "")
        {
            string OfficeCode = string.Empty;
            if (ShopCode == "0" && UserManager.CurrentUser != null)
            {
                ShopCode = UserManager.CurrentUser.WarehouseCode;
                OfficeCode = UserManager.CurrentUser.OrganizationHierachyCode;
            }
            DataTable table = new EmployeeDAL().GetEmp(ShopCode, "", OfficeCode);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }

        [HttpGet]  // create.js
        public ActionResult GetDevices(int type)
        {
            DataTable table = itemDal.GetDevice(type);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        [HttpGet]  // create.js
        public ActionResult GetLimitedValue(int type)
        {
            DataTable table = itemDal.GetLimited(UserManager.CurrentUser.WarehouseCode, type);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        [HttpGet] // create.js   Hỗ trợ thông tin (8) , It (29) , Sữa chữa cơ sở vật chất (6)
        public ActionResult GetCatagoryTree(int type)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@TypeId", type), };
            DataTable table = sql.ExecuteCommand("Items_GetInCallLog", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> devices = table.EParseToObjects();
                return Json(devices, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }

        /// <summary>GET: /Requests/GetScheduleTime</summary>
        [HttpGet] // create.js  
        public string GetScheduleTime(string TypeId)
        {
            int id = TypeId.EParseToInt();
            ScheduleTime scheduleTime = null;
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
            {
                scheduleTime = db.ScheduleTimes.FirstOrDefault(x => x.TypeId == id && x.Status == Key.Status.Available);
            }
            if (scheduleTime != null)
            {
                if (scheduleTime.AfterDays == null)
                {
                    var time = DateTime.Now.AddDays(scheduleTime.BeforeDays.Value);

                    var timeDelivery = new DateTime(DateTime.Now.Year, DateTime.Now.Month, scheduleTime.DateOfMonth.Value);
                    if (time > timeDelivery)
                        timeDelivery = timeDelivery.AddMonths(1);
                    return timeDelivery.ToString("yyyy-MM-dd");
                }
                else
                    return DateTime.Now.AddDays(scheduleTime.AfterDays.Value).ToString("yyyy-MM-dd");

            }
            return DateTime.Now.AddDays(7).ToString("yyyy-MM-dd");
        }

        //▼	Edit - VietMXH - 22/11/2018 - Tối ưu==================================================
        [HttpGet]
        public ActionResult GetConversations(string RequestId)
        {
            long l_RequestId = RequestId.EParseToLong();
            SqlParameter[] l_SqlParameter = new SqlParameter[]{
                    new SqlParameter("@RequestId", l_RequestId)
                };
            DataTable l_DataTable = sql.ExecuteCommand("sp_WEB_GetConversations", CommandType.StoredProcedure, l_SqlParameter);
            var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        //▲	Edit - VietMXH - 22/11/2018 - Tối ưu==================================================

        public ActionResult GetChiPhiCSKH_19(long requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                var dt = (from c in db.RequestDetails
                          where c.RequestId == requestId
                          select new { c.Property9, c.Property6, c.SaleCode, c.Time1, c.Property11, c.Money1 }).ToList();//Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
                if (dt != null)
                {
                    return Json(dt.Select(x => new
                    {
                        x.Property9,
                        x.Property6,
                        x.SaleCode,
                        x.Time1,
                        x.Property11,//Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
                        x.Money1//Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
                    }), JsonRequestBehavior.AllowGet);
                }
                return null;
            }
        }
        [HttpGet]
        public ActionResult GetRequestDetails(long id)
        {
            SqlParameter[] param = new SqlParameter[]
                        {
                            new SqlParameter("@RequestId",id)
                        };
            DataTable table = sql.ExecuteCommand("[Items_GetByRequest]", CommandType.StoredProcedure, param);
            if (table != null)
            {
                List<Dictionary<string, object>> details = table.EParseToObjects();
                var jsonResult = Json(details, JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return View();
        }
        public ActionResult GetRequestDetails2(long id)
        {
            SqlParameter[] param = new SqlParameter[]
                        {
                            new SqlParameter("@RequestId",id)
                        };
            DataTable table = sql.ExecuteCommand("RequestDetail_Get", CommandType.StoredProcedure, param);
            if (table != null)
            {
                List<Dictionary<string, object>> details = table.EParseToObjects();
                var jsonResult = Json(details, JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return View();
        }

        [HttpGet]
        public ActionResult GetRequestSimilar(int TypeId)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@EmpCode",UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@TypeId",TypeId)
                };
            DataTable table = sql.ExecuteCommand("Request_GetSimilar", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetDataToCreate()
        {
            Dictionary<string, List<Dictionary<string, object>>> myList =
                             new Dictionary<string, List<Dictionary<string, object>>>();

            DataTable tableCatagory = sql.ExecuteCommand("Categories_Get", CommandType.StoredProcedure, null);
            myList.Add("Categories", tableCatagory.EParseToObjects());

            DataTable tableDevice = sql.ExecuteCommand("Items_Get", CommandType.StoredProcedure, null);
            myList.Add("Devices", tableDevice.EParseToObjects());

            SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@ShopCode",UserManager.CurrentUser.WarehouseCode)
                };
            DataTable tableLimited = sql.ExecuteCommand("Items_LimitedValue", CommandType.StoredProcedure, param);
            myList.Add("Limited", tableLimited.EParseToObjects());

            string ans = JsonConvert.SerializeObject(myList, Formatting.Indented);
            return Json(ans, JsonRequestBehavior.AllowGet);

        }
        [HttpPost]
        public ActionResult SaveUploadedFile(string RequestId)
        {
            bool isSavedSuccessfully = true;
            string fName = string.Empty;

            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    //Save file content goes here
                    fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                        long Id = RequestId.EParseToLong();
                        var request = db.Requests.FirstOrDefault(x => x.Id == Id);
                        if (request != null)
                        {
                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);
                            db.SaveChanges();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                isSavedSuccessfully = false;
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - RequestId:{1}", ex.ToString(), RequestId));
            }
            if (isSavedSuccessfully)
                return Json(new { Message = fName }, JsonRequestBehavior.AllowGet);
            else
                return Json(new { Message = "Error in saving file" }, JsonRequestBehavior.AllowGet);
        }
        //▼Edit - ChuongNT3 - 18/05/2018 -- thêm popup up hình
        public ActionResult SaveUploadedFileDropzone(string RequestId)
        {
            string fName = string.Empty;
            string message = string.Empty;
            bool success = false;
            try
            {
                long Id = RequestId.EParseToLong();
                var domain = "";
                var RequestDId = db.RequestDetails.FirstOrDefault(x => x.RequestId == Id);
                var request = db.Requests.FirstOrDefault(x => x.Id == Id);
                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + '_' + file.FileName;
                    //ChuongNT3 - 05/07/2018 - loại 143
                    var s1 = "_";
                    if (file != null && file.ContentLength > 0 && file.FileName.IndexOf("_") == -1)
                    {
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");

                        if (!System.IO.Directory.Exists(pathString))
                            System.IO.Directory.CreateDirectory(pathString);

                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        if (request != null && (request.TypeId == 134 || request.TypeId == 143))  //Add - ChuongNT3 - 07/05/2018 -- xác nhận gởi outside
                        {
                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestDetailId = RequestDId.Id;
                            fileAttach.RequestId = Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            //▼ Add - ChuongNT3 - 07/05/2018 -- xác nhận gởi outside
                            if (request.TypeId == 134 || request.TypeId == 143) // ChuongNT3 - 05/07/2018 - loại 143
                            {
                                if (RequestDId.Quantity > 0)    //Edit - ChuongNT3 - 07/05/2018 -- xác nhận gởi outside
                                {
                                    fileAttach.Domain = "8Reup";
                                    domain = "8Reup";
                                }
                                else
                                {
                                    fileAttach.Domain = "8";
                                    domain = "8";
                                }
                            }
                            else
                            {
                                //Domain loại khác
                            }
                            //▲ Add - ChuongNT3 - 07/05/2018 -- xác nhận gởi outside
                            db.FileAttachs.Add(fileAttach);
                            db.SaveChanges();
                        }
                        success = true;
                        message = "Success !";
                    }
                    else
                    {
                        message = "Fail !";
                        success = false;
                    }

                }
                return Json(new { FileName = fName, Success = success, Message = message, IdCallLog = Id, RequestDId = RequestDId.Id, Domain = domain });
            }
            catch (Exception ex)
            {
                return Json(new { FileName = fName, Success = success, Message = ex.Message });
            }
        }
        //▲ Edit - ChuongNT3 - 18/05/2018 -- thêm popup up hình

        [HttpPost]
        public ActionResult SaveUploadedFileDetail(string RequsetDetailId)
        {
            bool isSavedSuccessfully = true;
            string fName = string.Empty;
            List<string> myCollection = new List<string>();
            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    //Save file content goes here

                    fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                        long Id = RequsetDetailId.EParseToLong();
                        RequestDetail requestdetails = null;
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            requestdetails = db.RequestDetails.FirstOrDefault(x => x.Id == Id);
                        }

                        if (requestdetails != null)
                        {
                            Request request = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                request = db.Requests.FirstOrDefault(x => x.Id == requestdetails.RequestId);
                            }

                            if (request != null)
                            {
                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.RequestDetailId = Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                db.FileAttachs.Add(fileAttach);
                                myCollection.Add(fileAttach.Uri.ToString());
                                db.SaveChanges();

                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                isSavedSuccessfully = false;
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - RequsetDetailId:{1}", ex.ToString(), RequsetDetailId));
            }
            if (isSavedSuccessfully)
            {
                string json = JsonConvert.SerializeObject(myCollection);
                return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                string json = JsonConvert.SerializeObject(myCollection);
                return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
            }

        }
        //▼ Add - NgoanHT - 14/11/2017 - Loại: 181 - Thêm lưu hình
        [HttpPost]
        public ActionResult SaveUploadedFileDetailMultiple(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        int id = item.RequestDId;
                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        if (requestdetail != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestDetailId == requestdetail.Id && f.Status == 1
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0;
                            }

                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    db.FileAttachs.Add(fileAttach);
                                    myCollection.Add(fileAttach.Uri.ToString());
                                    db.SaveChanges();
                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Add - NgoanHT - 14/11/2017 - Loại: 181 - Thêm lưu hình

        [HttpPost, ValidateInput(false)]
        public ActionResult UploadedFileDetailByCol(FormCollection form)
        {

            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            var permissions = GetPermissions(request.Id);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    #region linq upload db.savechange()
                    if (objects != null && objects.ToString() != "[]" || (permissions.Contains(RequestsController.Permission.Assigner)))
                    {
                        foreach (var item in objects)
                        {

                            int id = item.IdRequestDetail;
                            RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            if (requestdetail != null)
                            {

                                FileAttach fileAttach = new FileAttach();
                                if (item.DataFiles1 != null && item.DataFiles1 != "")
                                {
                                    var File = from f in db.FileAttachs
                                               where f.RequestDetailId == requestdetail.Id && f.Status == 1 && f.Domain == "1"
                                               select f;
                                    if (File.Count() > 0)
                                    {
                                        foreach (FileAttach f in File)
                                        {
                                            f.Uri = Keyword.FolderFileAttach + item.DataFiles1;
                                        }
                                    }
                                    else
                                    {
                                        fileAttach.Uri = Keyword.FolderFileAttach + item.DataFiles1;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = requestdetail.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "1";
                                        fileAttach.CreateBy = UserManager.CurrentUser.InsideCode; // Add - LuanNT44 - 19/09/2019 - add DK up hình
                                        db.FileAttachs.Add(fileAttach);
                                        db.SaveChanges();
                                    }


                                }
                                if (item.DataFiles2 != null && item.DataFiles2 != "")
                                {
                                    var File = from f in db.FileAttachs
                                               where f.RequestDetailId == requestdetail.Id && f.Status == 1 && f.Domain == "2"
                                               select f;
                                    if (File.Count() > 0)
                                    {
                                        foreach (FileAttach f in File)
                                        {
                                            f.Uri = Keyword.FolderFileAttach + item.DataFiles2;
                                        }
                                    }
                                    else
                                    {
                                        fileAttach.Uri = Keyword.FolderFileAttach + item.DataFiles2;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = requestdetail.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "2";
                                        fileAttach.CreateBy = UserManager.CurrentUser.InsideCode; // Add - LuanNT44 - 19/09/2019 - add DK up hình
                                        db.FileAttachs.Add(fileAttach);
                                        db.SaveChanges();
                                    }
                                }
                                db.SaveChanges();
                            }
                        }
                    }
                    #endregion
                    #region Lưu ảnh
                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }

        //▼ Add - PhiN - 10/01/2018 - Loại: 190 - Thêm lưu hình-chuyển bước
        [HttpPost, ValidateInput(false)]
        public ActionResult UploadedFileDetailByCol_Type190(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        int id = item.RequestDId;
                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        if (requestdetail != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestDetailId == requestdetail.Id && f.Status == 1
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0;
                            }
                            db.SaveChanges();
                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string fNames2 = Convert.ToString(item.ListNameFile_2);
                            string[] words1 = fNames1.Split(',');
                            string[] words2 = fNames2.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhLayoutMatTien";
                                    db.FileAttachs.Add(fileAttach);
                                    db.SaveChanges();
                                }
                            }
                            foreach (string word in words2)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhLayoutmatBang";
                                    db.FileAttachs.Add(fileAttach);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }

                }

                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Add - PhiN - 10/01/2018 - Loại: 190 - Thêm lưu hình-chuyển bước
        //▼ Add - PhiN - 10/01/2018 - Loại: 190 - Thêm lưu hình-hoàn tất
        [HttpPost, ValidateInput(false)]
        public ActionResult UploadedFileComplete_Type190(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            var requestDetails = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        int id = item.RequestDId;
                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        if (requestdetail != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestDetailId == requestdetail.Id && f.Status == 1
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0;
                            }
                            db.SaveChanges();
                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string fNames2 = Convert.ToString(item.ListNameFile_2);
                            string[] words1 = fNames1.Split(',');
                            string[] words2 = fNames2.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhLayoutMatTien";
                                    db.FileAttachs.Add(fileAttach);
                                    db.SaveChanges();
                                }
                            }
                            foreach (string word in words2)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhLayoutmatBang";
                                    db.FileAttachs.Add(fileAttach);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }

                    //var requestAnother = new Request();
                    //requestAnother.Sender = UserManager.CurrentUser.InsideCode;
                    //requestAnother.StepNo = 1;   // Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                    //requestAnother.Title = request.Title;
                    //requestAnother.Assigner = request.Assigner;   //  Add - ChuongNT3 - 13/12/2017 - Tự động chuyển sang bước 2 - 165
                    //requestAnother.StepStatus = request.StepStatus;
                    //requestAnother.TimeCreate = request.TimeCreate;
                    //requestAnother.TimeAppear = DateTime.Now;
                    //requestAnother.isHighlight = request.isHighlight;
                    //requestAnother.isParent = request.isParent;
                    //requestAnother.Status = 1; //Edit - ChuongNT3 - 14/12/2017 - Thêm trạng thái - 165
                    //requestAnother.CreateBy = request.CreateBy;
                    //requestAnother.FromOffice = request.FromOffice;
                    //requestAnother.TypeId = 1194;
                    //requestAnother.GroupId = 0;
                    //requestAnother.ReferenceCode = null;
                    //requestAnother.TimeFutureFinish = request.TimeFutureFinish;
                    //db.Requests.Add(requestAnother);
                    //db.SaveChanges();

                    //RequestDetail rs = new RequestDetail();
                    //rs.RequestId = requestAnother.Id;
                    //rs.Property2 = requestDetails.Property2;
                    //rs.Property3 = requestDetails.Property3;
                    //rs.Property4 = requestDetails.Property4;
                    //rs.Property5 = requestDetails.Property5;
                    //rs.Time1 = requestDetails.Time1;
                    //rs.Status = Key.Status.Available;
                    //db.RequestDetails.Add(rs);
                    //db.SaveChanges();

                    //var files = db.FileAttachs.Where(w=>w.RequestId == requestId && w.Status==1).ToList();
                    //foreach(var r in files)
                    //{
                    //    FileAttach fileAttachnew = new FileAttach();
                    //    fileAttachnew.Uri = r.Uri;
                    //    fileAttachnew.StepNo = r.StepNo;
                    //    fileAttachnew.RequestId = requestAnother.Id;
                    //    fileAttachnew.RequestDetailId = rs.Id;
                    //    fileAttachnew.TimeCreate = DateTime.Now;
                    //    fileAttachnew.Status = Key.Status.Available;
                    //    fileAttachnew.Domain = r.Domain;
                    //    db.FileAttachs.Add(fileAttachnew);
                    //    db.SaveChanges();
                    //}
                }

                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Add - PhiN - 10/01/2018 - Loại: 190 - Thêm lưu hình-hoàn tất

        [HttpPost]
        public ActionResult SaveUploadedFileDetailCol(string RequsetDetailId, string Col)
        {
            bool isSavedSuccessfully = true;
            string fName = string.Empty;
            List<string> myCollection = new List<string>();
            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    //Save file content goes here

                    fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + "_" + file.FileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                        long Id = RequsetDetailId.EParseToLong();
                        var requestdetails = db.RequestDetails.FirstOrDefault(x => x.Id == Id);
                        if (requestdetails != null)
                        {
                            var request = db.Requests.FirstOrDefault(x => x.Id == requestdetails.RequestId);
                            if (request != null)
                            {
                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.RequestDetailId = Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                //▼ Edit - ChuongNT3 - 18/05/2018 -- thêm popup up hình
                                if (request.TypeId == 134 || request.TypeId == 143) // ChuongNT3 - 05/07/2018 - loại 143
                                {
                                    if (requestdetails.Quantity > 0 && Col != "9" || (requestdetails.Quantity > 0 && Col == "9" && request.Status == 4))//ChuongNT3 - 19/05/2018 - Sửa người xử lý 
                                    {
                                        fileAttach.Domain = Col + "Reup";
                                    }
                                    else
                                    {
                                        fileAttach.Domain = Col;
                                    }
                                }
                                else
                                {
                                    fileAttach.Domain = Col;
                                }
                                //▲ Edit - ChuongNT3 - 18/05/2018 -- thêm popup up hình
                                db.FileAttachs.Add(fileAttach);
                                myCollection.Add(fileAttach.Uri.ToString());
                                db.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                isSavedSuccessfully = false;
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - RequsetDetailId:{1}", ex.ToString(), RequsetDetailId));
            }
            if (isSavedSuccessfully)
            {
                string json = JsonConvert.SerializeObject(myCollection);
                return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                string json = JsonConvert.SerializeObject(myCollection);
                return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
            }

        }

        #region Báo cáo

        public ActionResult Report()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (UserManager.CheckPermisionMenu(Request.RawUrl) != true)
            {
                return RedirectToAction("Index", "Home");
            }
            //CategoryController category = new CategoryController();
            //@ViewBag.Categories = category.GetCategories();
            @ViewBag.ItemGroups = itemDal.GetComboGroups();
            @ViewBag.DeliveryTypes = itemDal.GetDeliveryTypes(Key.ComboBox.All);
            return View();
        }
        [HttpPost]
        public ActionResult Report(FormCollection form)
        {
            int typeId = form["typeId"].EParseToInt();

            //▼	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC================================================== -- TuanNA89 - 28/11/2019 - fix lỗi không tìm thấy itemIds
            string items = Convert.ToString(form["itemIds"]);
            //▲	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================

            string region = form["regionId"].ToString();
            string orifinal = form["hiddenOriginalId"].ToString();
            string groupItemId = Convert.ToString(form["groupId"]);
            string timeStart = form["timeStart"].ToString();
            string timeEnd = form["timeEnd"].ToString();
            string timeStartHC = form["timeStartHC"].ToString();
            string timeEndHC = form["timeEndHC"].ToString();
            string deliveryType = form["deliveryType"].ToString();
            SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@TypeId",typeId),
                     new SqlParameter("@Items",items),
                     new SqlParameter("@RegionCode",region),
                     new SqlParameter("@OriginalCode",orifinal),
                     new SqlParameter("@GroupItemId",groupItemId),
                     new SqlParameter("@TimeStart",timeStart),
                     new SqlParameter("@TimeEnd",timeEnd),
                     new SqlParameter("@TimeStartHC",timeStartHC),
                     new SqlParameter("@TimeEndHC",timeEndHC),
                     new SqlParameter("@DeliveryType",deliveryType)
                    };

            DataTable table = sql.ExecuteCommand("Report_ItemDetail", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {

                //▼	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================
                string fileTemplate = "/TemplateExcel/Requests/ThietBiHanhChinh.xlsx";
                //▲	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================

                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                        int index = 2;
                        foreach (DataRow row in table.Rows)
                        {
                            int col = 0;

                            col++; worksheet.Cells[index, col].Value = row["Id"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["WarehouseName"].ToString();

                            //▼	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================
                            ////col++; worksheet.Cells[index, col].Value = row["WarehouseNameTo"].ToString(); //ChuongNT3 - 06/04/2018 - Thêm Id Bill , ngày HC -> NVC -> Shop
                            //▲	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================

                            col++; worksheet.Cells[index, col].Value = row["GroupName"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["ItemName"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Price"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Quantity"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Quantity1"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Quantity2"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["QuantityAvaiable"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Unit"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Sum"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TypeDelivery"].ToString();
                            //col++; worksheet.Cells[index, col].Value = row["RequestId"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["MaCallogGoc"].ToString();

                            //▼	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================
                            col++; worksheet.Cells[index, col].Value = row["NgayTaoCallLogGoc"].ToString();
                            //▲	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================

                            col++; worksheet.Cells[index, col].Value = row["StepNo"].ToString();//Add - TrungNC3 - 01/12/2017 - điều chỉnh mặc định là Cấp mới trong calllog mkts
                            col++; worksheet.Cells[index, col].Value = row["StatusName"].ToString();//Add - TrungNC3 - 01/12/2017 - điều chỉnh mặc định là Cấp mới trong calllog mkts
                            col++; worksheet.Cells[index, col].Value = row["MaCallogTachView"].ToString();

                            //▼	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================
                            col++; worksheet.Cells[index, col].Value = row["NgayTaoCallLogTach"].ToString();
                            //▲	Edit - VietMXH - 14/11/2019 - Fix BC Chi tiết Đồ dùng HC==================================================

                            col++; worksheet.Cells[index, col].Value = row["EmployeeName"].ToString();
                            //▼ ChuongNT3 - 06/04/2018 - Thêm Id Bill , ngày HC -> NVC -> Shop
                            col++; worksheet.Cells[index, col].Value = row["IdCLBill"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayHCGiaoHang"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayNVCGiaoHang"].ToString();
                            //▲ ChuongNT3 - 06/04/2018 - Thêm Id Bill , ngày HC -> NVC -> Shop
                            index++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=ThietBiHanhChinh-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }
            return Report();
        }

        #endregion
        public ActionResult ExportExcelDetails(long RequestId)
        {
            DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestId",RequestId),
            });
            string fileTemplate = "/TemplateExcel/ChiTietVoucher.xlsx";
            FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
            if (table != null && table.Rows.Count > 0)
            {
                using (ExcelPackage package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                    int index = 2;
                    foreach (DataRow row in table.Rows)
                    {
                        int col = 0;
                        col++; worksheet.Cells[index, col].Value = row["Approved"].ToString() == "True" ? "Duyệt" : row["Approved"].ToString() == "False" ? "Không duyệt" : "";
                        col++; worksheet.Cells[index, col].Value = row["ProductCode"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["ProductName"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["SaleCode"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Note"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Quantity"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Quantity1"].ToString();
                        col++; worksheet.Cells[index, col].Value = XString.EConvertToCurrency(row["Money1"].ToString());
                        col++; worksheet.Cells[index, col].Value = row["TenNhomHang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Property2"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Time1"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Quantity2"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Time2"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Time3"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NganhHang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NhanHang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["LoaiVoucher"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NganhHangAD"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["LoaiHang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NhanAD"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Property9"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Property10"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Quantity5"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Imei"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Quantity3"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Money3"].ToString() != "" ? XString.EConvertToCurrency(row["Money3"].ToString()) : "";
                        col++; worksheet.Cells[index, col].Value = row["Money4"].ToString() != "" ? XString.EConvertToCurrency(row["Money4"].ToString()) : "";
                        index++;
                    }
                    Response.Clear();
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", "attachment; filename=ChiTietVoucher-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                    Response.BinaryWrite(package.GetAsByteArray());
                    Response.Flush();
                    Response.End();
                }
            }
            //return Redirect("/DirectionAction/ConfigEmail");
            return RedirectToAction("Details");
        }
        [HttpGet]
        public ActionResult GetItemName(int GroupId = 0)
        {
            DataTable table = itemDal.GetItemsByGroup(GroupId);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult GetReportItems(int typeid, string[] items, string regions, string originals, string[] groupItemId, string timeStart, string timeEnd, string typeDeliveryName, string timeStartHC, string timeEndHC)
        {
            SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@TypeId",typeid),
                     new SqlParameter("@Items",String.Join(",",items)),
                     new SqlParameter("@RegionCode",regions),
                     new SqlParameter("@OriginalCode",originals),
                     new SqlParameter("@GroupItemId",String.Join(",",groupItemId)),
                     new SqlParameter("@TimeStart",timeStart),
                     new SqlParameter("@TimeEnd",timeEnd),
                     new SqlParameter("@TimeStartHC",timeStartHC),
                     new SqlParameter("@TimeEndHC",timeEndHC),
                     new SqlParameter("@DeliveryType",typeDeliveryName)
                    };

            DataTable table = sql.ExecuteCommand("Report_ItemDetail", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else return null;
        }
        [HttpGet]
        public ActionResult GetRegion()
        {
            RegionDAL regionDal = new RegionDAL();
            DataTable table = regionDal.GetRegions();
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        public enum Permission
        {
            [EnumMember(Value = "Sender")]
            Sender,
            [EnumMember(Value = "Assigner")]
            Assigner,
            [EnumMember(Value = "OldStepAssigner")]
            OldStepAssigner,
            [EnumMember(Value = "GroupAssigner")]
            GroupAssigner,
            [EnumMember(Value = "Cc")]
            Cc,
            [EnumMember(Value = "Admin")]
            Admin,
            [EnumMember(Value = "SupperAdmin")]
            SupperAdmin, //ChuongNT3 - 01/06/2018 - Thêm nhóm người xử lý bước cũ
            [EnumMember(Value = "GroupOldStepAssigner")]
            GroupOldStepAssigner
        }

        public List<Permission> GetPermissions(long RequestId)
        {
            Request request = null;
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
            {
                request = db.Requests.FirstOrDefault(x => x.Id == RequestId);
            }

            if (request == null)
            {
                Requests_ARCH request_ARCH = null;
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    request_ARCH = db.Requests_ARCH.FirstOrDefault(x => x.Id == RequestId);
                }

                if (request_ARCH != null)
                {
                    request = new Models.Request();
                    request.Id = request_ARCH.Id;
                    request.Sender = request_ARCH.Sender;
                    request.Assigner = request_ARCH.Assigner;
                    request.Title = request_ARCH.Title;
                    request.GroupId = request_ARCH.GroupId;
                    request.TypeId = request_ARCH.TypeId;
                    request.StepNo = request_ARCH.StepNo;
                    request.StepStatus = request_ARCH.StepStatus;
                    request.TimeCreate = request_ARCH.TimeCreate;
                    request.TimeAppear = request_ARCH.TimeAppear;
                    request.TimeFinish = request_ARCH.TimeFinish;
                    request.TimeClose = request_ARCH.TimeClose;
                    request.TimeFutureFinish = request_ARCH.TimeFutureFinish;
                    request.TimeReceipt = request_ARCH.TimeReceipt;
                    request.TimeUat = request_ARCH.TimeUat;
                    request.TimeGolive = request_ARCH.TimeGolive;
                    request.ToShop = request_ARCH.ToShop;
                    request.ToOffice = request_ARCH.ToOffice;
                    request.isHighlight = request_ARCH.isHighlight;
                    request.isParent = request_ARCH.isParent;
                    request.RequestIdRefer = request_ARCH.RequestIdRefer;
                    request.TotalRequestSplit = request_ARCH.TotalRequestSplit;
                    request.TotalRequestComplete = request_ARCH.TotalRequestComplete;
                    request.Remark = request_ARCH.Remark;
                    request.Status = request_ARCH.Status;
                    request.CreateBy = request_ARCH.CreateBy;
                    request.FromShop = request_ARCH.FromShop;
                    request.FromOffice = request_ARCH.FromOffice;
                    request.StillShowing = request_ARCH.StillShowing;
                    request.Repeat = request_ARCH.Repeat;
                    request.ErrorCode = request_ARCH.ErrorCode;
                    request.ReferenceCode = request_ARCH.ReferenceCode;
                    request.TimeLastUpdate = request_ARCH.TimeLastUpdate;
                    request.UpdateBy = request_ARCH.UpdateBy;
                    request.SumtimeComplete = request_ARCH.SumtimeComplete;
                    request.ReviewComplete = request_ARCH.ReviewComplete;
                    request.LastAdminUpdate = request_ARCH.LastAdminUpdate;
                    request.TimeLastAdminUpdate = request_ARCH.TimeLastAdminUpdate;
                    request.TimeGoliveExpected = request_ARCH.TimeGoliveExpected;
                }
            }

            List<Permission> permissions = new List<Permission>();
            if (request != null && UserManager.CurrentUser != null)
            {
                string userCode = UserManager.CurrentUser.InsideCode;
                var assigners = new List<Assigner>();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    assigners = (from a in db.Assigners
                                 where a.RequestId == request.Id
                                 && a.Status == Key.Status.Available
                                 && a.EmployeeCode == userCode
                                 select a).ToList();

                }
                //Người gửi
                if (request.Sender == userCode)
                    permissions.Add(Permission.Sender);
                else
                {
                    var sender = assigners.FirstOrDefault(x => x.Type == Key.TypeAssigner.Sender);
                    if (sender != null)
                        permissions.Add(Permission.Sender);
                }

                //Người xử lý
                var assigner = assigners.FirstOrDefault(x => x.Type == Key.TypeAssigner.To && x.StepNo == (request.StepNo));
                if (assigner != null || request.Assigner == userCode)
                    permissions.Add(Permission.Assigner);

                //Trong nhóm xử lý : kiểm tra theo phân quyền + Admin + Supper Admin
                DataTable table = sql.ExecuteCommand("Request_GetPermission", CommandType.StoredProcedure, new SqlParameter[]{
                    new SqlParameter("@RequestId",request.Id),
                    new SqlParameter("@EmpCode",UserManager.CurrentUser.InsideCode)
               });

                if (table != null && table.Rows.Count > 0)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        if (Convert.ToString(row[0]) == "0")
                            permissions.Add(Permission.GroupAssigner);
                        if (Convert.ToString(row[0]) == "1")
                            permissions.Add(Permission.Admin);
                        if (Convert.ToString(row[0]) == "2")
                            permissions.Add(Permission.SupperAdmin);
                    }
                }

                //Người Cc liên quan
                var cc = assigners.FirstOrDefault(x => x.Type == Key.TypeAssigner.Cc);
                if (cc != null)
                    permissions.Add(Permission.Cc);
                //Người xử lý bước cũ
                var oldSteps = new List<int>();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    oldSteps = (from s in db.RequestSteps
                                where s.RequestId == request.Id
                                && s.StepNo < request.StepNo
                                && s.Assigner == UserManager.CurrentUser.InsideCode
                                && s.Status == Key.Status.Available
                                select 1).ToList();
                }

                if (oldSteps != null && oldSteps.Count > 0)
                    permissions.Add(Permission.OldStepAssigner);

                //ChuongNT3 - 01/06/2018 - Thêm nhóm người xử lý bước cũ
                var GroupOldSteps = new List<int>();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    GroupOldSteps = (from s in db.Assigners
                                     where s.RequestId == request.Id
                                     && s.StepNo < request.StepNo
                                     && s.EmployeeCode == UserManager.CurrentUser.InsideCode
                                     && s.Status == Key.Status.Available
                                     select 1).ToList();
                }

                if (GroupOldSteps != null && GroupOldSteps.Count > 0)
                    permissions.Add(Permission.GroupOldStepAssigner);
            }

            return permissions;
        }

        [HttpGet]
        public ActionResult GetShopByRegion(int regionId)
        {
            ShopDAL shopDal = new ShopDAL();
            DataTable table = shopDal.GetShops(regionId);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetCategories()
        {
            //Categories_Get,Categories_GetWithCreateAction
            CategoryController cateController = new CategoryController();
            DataTable tableCatagory = cateController.GetCategoriesByPermission(UserManager.CurrentUser.InsideCode);
            if (tableCatagory != null && tableCatagory.Rows.Count > 0)
            {
                return Json(tableCatagory.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //'▼(#007)Add===================================   
        [HttpGet]
        public ActionResult GetCategoriesByTypeId(int type)
        {
            //Categories_Get,Categories_GetWithCreateAction
            var cata = (from s in db.Categories
                        where s.ParentId == 9
                        && s.Status == Key.Status.Available
                        select s).ToList();

            if (cata != null && cata.Count > 0)
            {
                return Json(cata, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        [HttpGet]
        public ActionResult GetCcForDetail(int requestId)
        {

            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", requestId), };
            DataTable table = sql.ExecuteCommand("CC_Get ", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> Cc = table.EParseToObjects();
                return Json(Cc, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        //'▲(#007)Add===================================

        [HttpGet]
        public string GetStatus(int Id)
        {
            switch (Id)
            {
                case Key.StatusRequest.Waitting:
                    return "Chờ xử lý";
                case Key.StatusRequest.Processing:
                    return "Đang xử lý";
                case Key.StatusRequest.Reply:
                    return "Đã trả lời";
                case Key.StatusRequest.Complete:
                    return "Hoàn tất";
                case Key.StatusRequest.Cancel:
                    return "Đã hủy";
                default:
                    return string.Empty;
            }
        }
        public void Download(int TypeId)
        {
            string path = string.Empty;
            string fileName = string.Empty;
            string pathData = string.Empty;
            switch (TypeId)
            {
                case 60: // Xác nhận công nợ
                    path = "~/TemplateExcel/XacNhanCongNoTemplate.xlsx";
                    fileName = "XacNhanCongNoTemplate.xlsx";
                    break;
                case 28: // Quỹ
                    path = "~/TemplateExcel/Quy.xlsx";
                    fileName = "Quy.xlsx";
                    break;
                case 89: // Quỹ
                    path = "~/TemplateExcel/BienBanKiemKeTaiSanCongCu.xlsx";
                    fileName = "BienBanKiemKeTaiSanCongCu.xlsx";
                    break;
                case 154://Bill vận chuyển

                    path = "~/TemplateExcel/ImportBillVanChuyen.xlsx";
                    fileName = "ImportBillVanChuyen.xlsx";
                    DataTable table154 = sql.ExecuteCommand("GetPhongBan", CommandType.StoredProcedure, null);
                    if (table154 != null && table154.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in table154.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["FullName"].ToString();
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=ImportBillVanChuyen-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                case 112: // Tạo Voucher
                    path = "~/TemplateExcel/MauVoucher.xlsx";
                    fileName = "MauVoucher.xlsx";
                    DataTable table = sql.ExecuteCommand("BI_GetGroupProducts", CommandType.StoredProcedure, null);
                    DataTable table2 = sql.ExecuteCommand("BI_GetNganhhang", CommandType.StoredProcedure, null);
                    DataTable table3 = sql.ExecuteCommand("BI_GetNhanHang", CommandType.StoredProcedure, null);
                    DataTable table4 = sql.ExecuteCommand("BI_GetLoaiHang", CommandType.StoredProcedure, null);
                    if (table != null && table.Rows.Count > 0 && table2 != null && table2.Rows.Count > 0 && table3 != null && table3.Rows.Count > 0
                        && table4 != null && table4.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[5];
                                int index = 2;
                                foreach (DataRow row in table.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["DocEntry"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["U_PRO_NAME"].ToString();
                                    index++;
                                }
                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets[2];
                                index = 2;
                                foreach (DataRow row in table2.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet1.Cells[index, col].Value = row["U_pro_code"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["U_PRO_NAME"].ToString();
                                    index++;
                                }
                                ExcelWorksheet worksheet3 = package.Workbook.Worksheets[4];
                                index = 2;
                                foreach (DataRow row in table3.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet3.Cells[index, col].Value = row["FirmCode"].ToString();
                                    col++; worksheet3.Cells[index, col].Value = row["FirmName"].ToString();
                                    index++;
                                }
                                ExcelWorksheet worksheet4 = package.Workbook.Worksheets[3];
                                index = 2;
                                foreach (DataRow row in table4.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet4.Cells[index, col].Value = row["ItmsGrpCod"].ToString();
                                    col++; worksheet4.Cells[index, col].Value = row["ItmsGrpNam"].ToString();
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=MauVoucher-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }

                    break;
                case 115: // Mkt Mkt tạo
                    path = "~/TemplateExcel/TemplateMkts.xlsx";
                    fileName = "TemplateMkts.xlsx";
                    DataTable tableShop = sql.ExecuteCommand("Shops_Get", CommandType.StoredProcedure, new SqlParameter[]{
                     new SqlParameter("@RegionId", 0 )});
                    DataTable tableSanPham = sql.ExecuteCommand("Items_Get_2", CommandType.StoredProcedure, new SqlParameter[]{
                     new SqlParameter("@TypeId", 22 )});
                    if (tableShop != null && tableShop.Rows.Count > 0 && tableSanPham != null && tableSanPham.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in tableShop.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["WarehouseCodeB1"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["WarehouseName"].ToString();
                                    index++;
                                }
                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets[3];
                                index = 2;
                                foreach (DataRow row in tableSanPham.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet1.Cells[index, col].Value = row["ItemId"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["ItemName"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["Price"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["Unit"].ToString();
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=TemplateMkts-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                case 130: // Do dung HC HC tao
                    path = "~/TemplateExcel/TemplateProductHC.xlsx";
                    fileName = "TemplateMkts.xlsx";
                    DataTable tableShopProductHC = sql.ExecuteCommand("Shops_Get", CommandType.StoredProcedure, new SqlParameter[]{
                     new SqlParameter("@RegionId", 0 )});
                    DataTable tableSanPhamProductHC = sql.ExecuteCommand("Items_Get_2", CommandType.StoredProcedure, new SqlParameter[]{
                     new SqlParameter("@TypeId", 23 )});
                    if (tableShopProductHC != null && tableShopProductHC.Rows.Count > 0 && tableSanPhamProductHC != null && tableSanPhamProductHC.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in tableShopProductHC.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["WarehouseCodeB1"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["WarehouseName"].ToString();
                                    index++;
                                }
                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets[3];
                                index = 2;
                                foreach (DataRow row in tableSanPhamProductHC.Rows)
                                {
                                    int col = 0;

                                    col++; worksheet1.Cells[index, col].Value = row["GroupId"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["GroupName"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["ItemId"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["ItemName"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["Price"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["Unit"].ToString();
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=TemplateProductHC-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                case 155: // Do dung HC HC tao cho Shp moi
                    path = "~/TemplateExcel/TemplateProductHC_Shop.xlsx";
                    fileName = "TemplateMkts.xlsx";
                    DataTable tableShopProductHC_Shop = sql.ExecuteCommand("Shops_Get", CommandType.StoredProcedure, new SqlParameter[]{
                     new SqlParameter("@RegionId", 0 )});
                    DataTable tableSanPhamProductHC_Shop = sql.ExecuteCommand("Items_Get_2", CommandType.StoredProcedure, new SqlParameter[]{
                     new SqlParameter("@TypeId", 23 )});
                    if (tableShopProductHC_Shop != null && tableShopProductHC_Shop.Rows.Count > 0 && tableSanPhamProductHC_Shop != null && tableSanPhamProductHC_Shop.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in tableShopProductHC_Shop.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["WarehouseCodeB1"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["WarehouseName"].ToString();
                                    index++;
                                }
                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets[3];
                                index = 2;
                                foreach (DataRow row in tableSanPhamProductHC_Shop.Rows)
                                {
                                    int col = 0;

                                    col++; worksheet1.Cells[index, col].Value = row["GroupId"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["GroupName"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["ItemId"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["ItemName"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["Price"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["Unit"].ToString();
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=TemplateProductHC_Shop-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                //▼ Add - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v1

                case 165:
                    #region ---165----
                    SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@TypeId", 165)};
                    path = "~/TemplateExcel/TemplateimportCapMoiThietBiITSupport.xlsx";//Edit - NghiaTV5 - 5/01/2018 - 165 - TemplateimportCapMoiThietBiITSupport
                    fileName = "TemplateimportCapMoiThietBiITSupport.xlsx";//Edit - NghiaTV5 - 5/01/2018 - 165 - TemplateimportCapMoiThietBiITSupport
                    //lấy mã sản phẩm và sản phẩm 
                    DataTable table165 = sql.ExecuteCommand("Get_SanPham_ITSupport", CommandType.StoredProcedure, null);
                    // lấy mã shop và tên shop
                    DataTable shop165 = sql.ExecuteCommand("GetShopAll", CommandType.StoredProcedure, null);
                    //hệ thống 
                    DataTable Sysytems165 = sql.ExecuteCommand("Items_GetInCallLog", CommandType.StoredProcedure, param);

                    if (table165.Rows.Count > 0 && shop165.Rows.Count > 0 && Sysytems165.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in table165.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["ItemId"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["ItemName"].ToString();
                                    index++;
                                }

                                ExcelWorksheet worksheet3 = package.Workbook.Worksheets[3];
                                index = 2;
                                foreach (DataRow row in shop165.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet3.Cells[index, col].Value = row["WarehouseCode"].ToString();
                                    col++; worksheet3.Cells[index, col].Value = row["WarehouseName"].ToString();
                                    col++; worksheet3.Cells[index, col].Value = row["RegionL2"].ToString();
                                    col++; worksheet3.Cells[index, col].Value = row["RegionHierachyName"].ToString();
                                    index++;
                                }
                                ExcelWorksheet worksheet4 = package.Workbook.Worksheets[4];
                                index = 2;
                                foreach (DataRow row in Sysytems165.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet4.Cells[index, col].Value = row["Id"].ToString();
                                    col++; worksheet4.Cells[index, col].Value = row["Name"].ToString();
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=TemplateimportCapMoiThietBiITSupport-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }

                    #endregion
                    break;
                //▲ Add - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v1
                case 23:
                    path = "~/TemplateExcel/DanhSachMatHangHanhChinh.xlsx";
                    fileName = "DanhSachMatHangHanhChinh.xlsx";
                    DataTable table23 = itemDal.GetDevice(23);
                    if (table23 != null && table23.Rows.Count > 0 && table23 != null && table23.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                                int index = 2;
                                foreach (DataRow row in table23.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["GroupId"]);
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["GroupName"]);
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["ItemId"]);
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["ItemName"]);
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["Price"]);
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["Unit"]);
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["DeliveryType"]);
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["Loai"]);
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=DanhSachMatHangHanhChinh-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                case 152:
                    path = "~/TemplateExcel/ImportDongPhuc.xlsx";
                    fileName = "ImportDongPhuc.xlsx";
                    DataTable tableWareHouse = sql.ExecuteCommand("GetFullWareHouse", CommandType.StoredProcedure, null);
                    DataTable tableItem = sql.ExecuteCommand("Items_Get", CommandType.StoredProcedure, null);
                    if (tableWareHouse != null && tableWareHouse.Rows.Count > 0 &&
                        tableItem != null && tableItem.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet02 = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in tableItem.Rows)
                                {
                                    if (Convert.ToString(row["value"]) == "304" || Convert.ToString(row["value"]) == "303"
                                        || Convert.ToString(row["value"]) == "771" || Convert.ToString(row["value"]) == "772")
                                    {
                                        //=== Chỉ lấy 2 sản phẩm cần thiết thôi chứ không phải toàn bộ
                                        int col = 0;
                                        col++; worksheet02.Cells[index, col].Value = Convert.ToString(row["value"]);
                                        col++; worksheet02.Cells[index, col].Value = Convert.ToString(row["text"]);
                                        col++; worksheet02.Cells[index, col].Value = Convert.ToString(row["Unit"]);
                                        col++; worksheet02.Cells[index, col].Value = Convert.ToString(row["price"]);
                                        index++;
                                    }
                                }
                                index = 2;
                                ExcelWorksheet worksheet03 = package.Workbook.Worksheets[3];
                                foreach (DataRow row in tableWareHouse.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet03.Cells[index, col].Value = Convert.ToString(row["WarehouseCode"]);
                                    col++; worksheet03.Cells[index, col].Value = Convert.ToString(row["WarehouseCodeB1"]);
                                    col++; worksheet03.Cells[index, col].Value = Convert.ToString(row["WarehouseName"]);
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=ImportDongPhuc-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                case 171:
                    path = "~/TemplateExcel/Template_Import_Calllog_CXL.xlsx";
                    fileName = "Template_Import_Calllog_CXL.xlsx";
                    DataTable table_171 = sql.ExecuteCommand("Shops_Get", CommandType.StoredProcedure,
                        new SqlParameter[]{
                            new SqlParameter("@RegionId", 0 )
                        });
                    if (table_171 != null && table_171.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in table_171.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["WarehouseCode"]);
                                    col++; worksheet.Cells[index, col].Value = Convert.ToString(row["WarehouseName"]);
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=Template_Import_Calllog_CXL-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                //▼ Add - NgoanHT - 22/03/2018 - Loại: 187 - Thêm chức năng import
                case 187:
                    DataTable table_187 = sql.ExecuteCommand("sp_GetShopB1", CommandType.StoredProcedure, null);
                    if (table_187 != null && table_187.Rows.Count > 0)
                    {
                        string fileTemplate = "/TemplateExcel/Fileimportcallloglayout.xlsx";
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in table_187.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["MaShop"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["TenShop"].ToString();

                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=Fileimportcallloglayout-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                //▲ Add - NgoanHT - 22/03/2018 - Loại: 187 - Thêm chức năng import
                //▼ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                case 218:
                    path = "~/TemplateExcel/Template_VPKM.xlsx";
                    fileName = "Template_VPKM.xlsx";
                    break;
                //▲ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
                //▼  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                case 223:
                    path = "~/TemplateExcel/Requests/FileImportPOSM.xlsx";
                    fileName = "FileImportPOSM.xlsx";
                    break;
                //▲  Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM - Loại 223
                default:
                    break;
            }
            if (path != string.Empty)
            {
                System.Web.HttpResponse response = System.Web.HttpContext.Current.Response;
                response.ClearContent();
                response.Clear();
                response.ContentType = "text/plain";
                response.AddHeader("Content-Disposition", "attachment; filename=" + fileName + ";");
                response.TransmitFile(path);
                response.Flush();
                Response.End();
            }
        }
        public int Keep_Session_Live()
        {
            try
            {
                UserManager.CurrentUser = UserManager.CurrentUser;
                return 1;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        #region 009
        //'▼(#009)Add=================================== 
        public ActionResult GetConfig(int id, string type)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@TypeId",id),
                new SqlParameter("@Type",type)
            };
            DataTable table = sql.ExecuteCommand("Configs_Get", CommandType.StoredProcedure, param);
            if (table != null)
            {
                List<Dictionary<string, object>> details = table.EParseToObjects();
                return Json(details, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //'▲(#009)Add===================================
        #endregion
        //  ChuongNT3 - 01/10/2018 - fix GQKN
        [HttpGet]
        public ActionResult CreateBO()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (Session[Key.Session.EcomId] != null)
            {
                // load tiêu đề + nội dung và nhân viên mặc định
                // trường hợp gọi từ Inbound
                #region Gọi từ inbound
                string Ecom = Session[Key.Session.EcomId].ToString();
                if (Ecom.IndexOf("CC") < 0)
                {
                    DataTable inbound = sql.ExecuteCommand("CallCenter_GetContentInbound", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@EcomId",Ecom)
                    });
                    if (inbound != null && inbound.Rows.Count > 0)
                    {
                        ViewBag.RequestTitle = inbound.Rows[0]["CallTitle"];
                        ViewBag.Content = inbound.Rows[0]["CallContent"];
                        string itemShopId = inbound.Rows[0]["ShopID"].ToString();
                        ViewBag.EcomId = inbound.Rows[0]["CallID"].ToString();
                        ViewBag.EmpsByShopsOrOffices = GetEmpsByShopsOrOffices(itemShopId);// người default To
                        ViewBag.DefaultCc = GetDefaultCC(itemShopId);// Người default CC
                        ViewBag.CalllogType = inbound.Rows[0]["PhanLoaiCalllog"].ToString();
                        ViewBag.EcomType = inbound.Rows[0]["PhanLoai"].ToString();
                        ViewBag.EcomTypeParent = inbound.Rows[0]["PhanLoaiCha"].ToString();
                        ViewBag.SoPhieuBH = inbound.Rows[0]["SoPhieuBH"].ToString();
                        ViewBag.SoSO = inbound.Rows[0]["SoSO"].ToString();
                        ViewBag.Kenh = inbound.Rows[0]["Kenh"].ToString();
                        ViewBag.Ecom = Ecom;
                        ViewBag.DataFrom = "0"; // 0 inbound
                        //var otherData = string.Empty;
                        var otherDataShopID = string.Empty;
                        var otherDataJobTitle = string.Empty;
                        //otherData = inbound.Rows[0]["PhanLoaiCha"] != null ? inbound.Rows[0]["PhanLoaiCha"].ToString() : "";
                        //otherData += inbound.Rows[0]["PhanLoai"] != null ? "," + inbound.Rows[0]["PhanLoai"].ToString() : ",";
                        //otherData += inbound.Rows[0]["PhanLoaiCalllog"] != null ? "," + inbound.Rows[0]["PhanLoaiCalllog"].ToString() : ",";

                        //otherData = Convert.ToString(inbound.Rows[0]["PhanLoaiCha"]) + ",";
                        //otherData += Convert.ToString(inbound.Rows[0]["PhanLoai"]) + ",";
                        //otherData += Convert.ToString(inbound.Rows[0]["PhanLoaiCalllog"]) + ",";
                        //otherData += Convert.ToString(inbound.Rows[0]["SoPhieuBH"]) + ",";
                        //otherData += Convert.ToString(inbound.Rows[0]["SoSO"]);

                        //otherData += Convert.ToString(inbound.Rows[0]["ShopID"]);
                        //ViewBag.OtherData = otherData;
                        otherDataShopID = Convert.ToString(inbound.Rows[0]["ShopID"]);
                        ViewBag.ShopID = otherDataShopID;
                        if (Convert.ToString(inbound.Rows[0]["PhanLoaiCha"]).ToLower() == "thái độ" ||
                           Convert.ToString(inbound.Rows[0]["PhanLoaiCha"]).ToLower() == "nghiệp vụ")
                        {
                            otherDataJobTitle = Convert.ToString(inbound.Rows[0]["InsideCode"]);
                        }
                        ViewBag.JobTitle = otherDataJobTitle;
                        if (inbound.Rows[0]["ShopID"].ToString() != "")
                        {
                            ViewBag.ShopIDCallCenter = inbound.Rows[0]["ShopID"].ToString();
                            DataTable region = sql.ExecuteCommand("GetRegionAndOrganizationByShopCode", CommandType.StoredProcedure, new SqlParameter[]
                            {
                            new SqlParameter("@ShopCode",inbound.Rows[0]["ShopID"].ToString())
                            });
                            if (region != null && region.Rows.Count > 0)
                            {
                                ViewBag.RegionOutbound = region.Rows[0]["RegionL2"].ToString();
                            }
                        }
                        else
                        {
                            ViewBag.RegionOutbound = null;
                        }
                    }
                }
                #endregion
                // trường hợp gọi từ Outbound
                #region Gọi từ outbound
                else
                {
                    Ecom = Ecom.Replace("CC", "");
                    DataTable outbound = sql.ExecuteCommand("CallCenter_GetContentOutbound", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@EcomID",Ecom)
                    });
                    if (outbound != null && outbound.Rows.Count > 0)
                    {
                        ViewBag.RequestTitle = outbound.Rows[0]["CallTitle"];
                        ViewBag.Content = outbound.Rows[0]["CallContent"];
                        string itemShopId = outbound.Rows[0]["ShopID"].ToString();
                        if (outbound.Rows[0]["Kenh"].ToString() == "Inbound" || outbound.Rows[0]["Kenh"].ToString() == "Bảo hành" || outbound.Rows[0]["Kenh"].ToString() == "Happy call")
                        {
                            ViewBag.DefaultCc = GetDefaultCC_NewInbound(itemShopId);
                            //ViewBag.EmpsByShopsOrOffices = GetEmpsByShopsOrOffices_NewInbound(itemShopId);
                        }
                        else
                        {
                            ViewBag.DefaultCc = GetDefaultCC(itemShopId);
                            //ViewBag.EmpsByShopsOrOffices = GetEmpsByShopsOrOffices(itemShopId);
                        }

                        //ViewBag.DefaultCc = GetDefaultCC(itemShopId);

                        ViewBag.EcomType = outbound.Rows[0]["PhanLoai"].ToString();
                        ViewBag.EcomTypeParent = outbound.Rows[0]["PhanLoaiCha"].ToString();
                        ViewBag.EcomId = outbound.Rows[0]["CallID"].ToString();
                        ViewBag.CalllogType = outbound.Rows[0]["PhanLoaiCalllog"].ToString();
                        ViewBag.MaNVEcom = outbound.Rows[0]["MaNhanVienEcom"].ToString();
                        ViewBag.SoPhieuBH = outbound.Rows[0]["SoPhieuBH"].ToString();
                        ViewBag.SoSO = outbound.Rows[0]["SoSO"].ToString();
                        //ChuongNT3 - 11/09/2018 - thêm sđt
                        ViewBag.SDT = outbound.Rows[0]["SoDienThoai"].ToString();
                        ViewBag.Kenh = outbound.Rows[0]["Kenh"].ToString();
                        ViewBag.Ecom = Ecom;
                        ViewBag.DataFrom = "1"; // 1 outbound
                        //var otherData = string.Empty;
                        var otherDataShopID = string.Empty;
                        var otherDataJobTitle = string.Empty;
                        //otherData = Convert.ToString(outbound.Rows[0]["PhanLoaiCha"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["PhanLoai"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["PhanLoaiCalllog"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["SoPhieuBH"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["SoSO"]) + ",";
                        ////otherData += Convert.ToString(outbound.Rows[0]["ShopID"]) + "*";
                        //otherData += Ecom + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["Kenh"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["ProductCode"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["ProductName"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["NganhHang"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["LoaiHang"]) + ",";
                        ////ChuongNT3 - 11/09/2018 - thêm sđt
                        //otherData += Convert.ToString(outbound.Rows[0]["MaNhanVien"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["SoDienThoai"]);

                        //ViewBag.OtherData = otherData;
                        otherDataShopID = Convert.ToString(outbound.Rows[0]["ShopID"]);
                        ViewBag.ShopID = otherDataShopID;
                        if (Convert.ToString(outbound.Rows[0]["PhanLoaiCha"]).ToLower() == "thái độ" ||
                            Convert.ToString(outbound.Rows[0]["PhanLoaiCha"]).ToLower() == "nghiệp vụ")
                        {
                            otherDataJobTitle = Convert.ToString(outbound.Rows[0]["ChucDanh"]);
                        }
                        ViewBag.JobTitle = otherDataJobTitle;
                        if (outbound.Rows[0]["ShopID"].ToString() != "")
                        {
                            ViewBag.ShopIDCallCenter = outbound.Rows[0]["ShopID"].ToString();
                            DataTable region = sql.ExecuteCommand("GetRegionAndOrganizationByShopCode", CommandType.StoredProcedure, new SqlParameter[]
                            {
                            new SqlParameter("@ShopCode",outbound.Rows[0]["ShopID"].ToString())
                            });
                            if (region != null && region.Rows.Count > 0)
                            {
                                ViewBag.RegionOutbound = region.Rows[0]["RegionL2"].ToString();
                            }
                        }
                        else
                        {
                            ViewBag.RegionOutbound = null;
                        }
                        ViewBag.TenKH = outbound.Rows[0]["TenKhachHang"].ToString();//Add - TuanNA89 - 14/05/2020 - thêm Tên KH
                    }
                }
                #endregion

                Session[Key.Session.EcomId] = null;
            }
            //▼ Add - ThuongNM2 - 12/04/2019 - Add Group BH Theo vùng miền==============
            DataTable regionWarehouse = sql.ExecuteCommand("sp_GetregionShopByUser", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
                    });
            if (regionWarehouse.Rows.Count > 0)
            {
                ViewBag.Region = regionWarehouse.Rows[0]["Region"].ToString();
            }
            else
            {
                ViewBag.Region = "Not found";
            }
            //▲ Add - ThuongNM2 - 12/04/2019 - Add Group BH Theo vùng miền==============
            return View();
        }
        [HttpPost, ValidateAntiForgeryToken, ValidateInput(false)]
        public ActionResult CreateBO(Request request, FormCollection form)
        {
            try
            {
                string txtStaff = form["txtStaff"].ToString();
                string Cc = form["Cc"].ToString();
                string Title = form["Title"].ToString();
                string txtMessageDes = HttpUtility.HtmlDecode(form["txtMessage"].ToString());
                DateTime dateFrom = DateTime.Parse(form["dateFrom"].ToString());
                DateTime dateTo = DateTime.Parse(form["dateTo"].ToString());
                var schedule = form["schedule"];// tuan hoac ngay trong thang (null : ngay trong thang , on : ngay trong tuan)
                var scheduleTypeData = form["scheduleTypeData"];// Gia tri
                var calllogType = form["ConfirmCalllogType"];
                var complainType = form["EcomType"].ToString();
                var systemId = Convert.ToInt32(form["SystemId"]);
                // Add - TuanNA89 - 20/04/2020 - Thêm field nội dung tóm tắt
                string txtSummaryMessage = Convert.ToString(form["txtSummaryMessage"]);
                List<string> stringTo = new List<string>();
                List<string> stringCc = new List<string>();
                #region verify
                //if (txtStaff.Length == 0)
                //{
                //    TempData["Message"] = "Bắt buộc nhập thông tin người nhận.";
                //    return RedirectToAction("CreateBO", "Requests");
                //}
                if (Title.Length == 0)
                {
                    TempData["Message"] = "Bắt buộc nhập tiêu đề.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (calllogType == null)
                {
                    TempData["Message"] = "Bắt buộc chọn loại CallLog.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (complainType == "")
                {
                    TempData["Message"] = "Bắt buộc chọn loại khiếu nại.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (txtMessageDes.Length == 0)
                {
                    TempData["Message"] = "Bắt buộc nhập nội dung.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (DateTime.Compare(dateFrom, dateTo) < 0)
                {
                    TempData["Message"] = "Ngày bắt đầu không được lớn hơn ngày kết thúc.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (scheduleTypeData != null)
                {
                    if (form["timeSend"].ToString() == "")
                    {
                        TempData["Message"] = "Bắt buộc chọn giờ để đặt lịch.";
                        return RedirectToAction("CreateBO", "Requests");
                    }
                    try
                    {
                        TimeSpan.Parse(form["timeSend"].ToString());
                    }
                    catch (Exception ex)
                    {
                        TempData["Message"] = "Giờ đặt lịch không đúng định dạng.";
                        return RedirectToAction("CreateBO", "Requests");
                    }
                }
                #endregion

                //Đại diện
                //Tạo yêu cầu
                string sender = UserManager.CurrentUser.InsideCode;
                request.Sender = sender;
                request.Title = Title;
                request.TypeId = 19;
                request.StepNo = 1;
                request.StepStatus = Key.StatusRequest.Waitting;
                request.TimeCreate = DateTime.Now;
                request.TimeAppear = DateTime.Now;
                request.isHighlight = false;
                request.isParent = false;
                request.Status = Key.Status.Available;
                request.CreateBy = UserManager.CurrentUser.InsideCode;
                request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;
                request.ReferenceCode = form["EcomId"];
                request.GroupId = systemId;
                db.Requests.Add(request);
                db.SaveChanges();
                #region Lưu nội dung
                if (txtMessageDes != "")
                {
                    var converstation = new Conversation();
                    converstation.RequestId = request.Id;
                    converstation.StepNo = 0;
                    converstation.Sender = UserManager.CurrentUser.InsideCode;
                    converstation.Message = txtMessageDes;
                    converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                    converstation.Type = Key.Conversation.Create;
                    converstation.Status = Key.Status.Available;
                    converstation.TimeCreate = DateTime.Now;
                    db.Conversations.Add(converstation);
                }
                #endregion
                #region Lưu nội dung tóm tắt
                //▼ Add - TuanNA89 - 20/04/2020 - Thêm field nội dung tóm tắt
                if (txtSummaryMessage != "")
                {
                    var converstation = new Conversation();
                    converstation.RequestId = request.Id;
                    converstation.StepNo = 0;
                    converstation.Sender = UserManager.CurrentUser.InsideCode;
                    converstation.Message = txtSummaryMessage;
                    converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                    converstation.Type = Key.Conversation.NoiDungTomTat;
                    converstation.Status = Key.Status.Available;
                    converstation.TimeCreate = DateTime.Now;
                    db.Conversations.Add(converstation);
                }
                //▲ Add - TuanNA89 - 20/04/2020 - Thêm field nội dung tóm tắt
                #endregion
                #region Đặt lịch
                if (scheduleTypeData != null)
                {
                    RequestAlarm requestAlarm = new RequestAlarm();
                    requestAlarm.RequestId = request.Id;
                    requestAlarm.Time = TimeSpan.Parse(form["timeSend"].ToString());
                    if (schedule == null)
                        requestAlarm.DayOfMonth = scheduleTypeData.ToString();
                    else
                        requestAlarm.DayOfWeek = scheduleTypeData.ToString();
                    requestAlarm.TimeStart = dateFrom;
                    requestAlarm.TimeEnd = dateTo;
                    requestAlarm.TimeCreate = DateTime.Now;
                    requestAlarm.Status = Key.Status.Available;
                    db.RequestAlarms.Add(requestAlarm);
                }
                #endregion
                #region Lưu file đính kèm
                string fName = string.Empty;
                try
                {
                    for (int i = 0; i < Request.Files.Count; i++)
                    {
                        HttpPostedFileBase file = Request.Files[i];
                        //Save file content goes here
                        fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                            if (request != null)
                            {
                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                db.FileAttachs.Add(fileAttach);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController CreateBO(Request)", ex.ToString());
                }
                #endregion
                #region Lưu các thông tin khác
                var requestDetail = new RequestDetail();
                requestDetail.RequestId = request.Id;
                requestDetail.Property2 = form["EcomId"];
                //string otherData = form["OtherData"] != null ? form["OtherData"].ToString() : string.Empty;
                string Ecom = form["Ecom"] != null ? form["Ecom"].ToString() : string.Empty;
                string shopID = form["ShopID"] != null ? form["ShopID"].ToString() : string.Empty;
                string jobTitle = form["JobTitle"] != null ? form["JobTitle"].ToString() : string.Empty;
                string dataFrom = form["DataFrom"] != null ? form["DataFrom"].ToString() : string.Empty;
                //string[] detailArray = otherData.Split(',');
                if (Ecom != null)
                {
                    if (dataFrom == "1")
                    {
                        DataTable data_outbound = sql.ExecuteCommand("CallCenter_GetContentOutbound", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@EcomID",Ecom)
                        });
                        if (data_outbound != null && data_outbound.Rows.Count > 0)
                        {
                            requestDetail.Property3 = form["EcomTypeParent"].ToString();//Phân loại cha
                            requestDetail.Property1 = form["EcomType"].ToString();//Phân loại
                            requestDetail.Property4 = Convert.ToString(data_outbound.Rows[0]["PhanLoaiCalllog"]) != null ?
                                Convert.ToString(data_outbound.Rows[0]["PhanLoaiCalllog"]) : form["ConfirmCalllogType"].ToString();//Phân loại CallLog
                            requestDetail.Property5 = form["txtSoPhieuBH"] != null ? form["txtSoPhieuBH"].ToString() : Convert.ToString(data_outbound.Rows[0]["SoPhieuBH"]); //Số phiếu BH 
                            requestDetail.SaleCode = form["txtSoSO"] != null ? form["txtSoSO"].ToString() : Convert.ToString(data_outbound.Rows[0]["SoSO"]);//Số SO
                            requestDetail.Property6 = shopID; //ShopID
                            requestDetail.Property7 = jobTitle; // chức danh
                            requestDetail.Quantity1 = Convert.ToString(data_outbound.Rows[0]["Line"]).EParseToInt(); //ChuongNT3 - 10/23/2018 - thêm nhánh
                            requestDetail.Quantity = Convert.ToString(data_outbound.Rows[0]["ShopID"]).EParseToInt();//Mã Id Outbound
                            requestDetail.Property8 = Convert.ToString(data_outbound.Rows[0]["Kenh"]); // Kênh OutSide
                            requestDetail.ProductCode = Convert.ToString(data_outbound.Rows[0]["ProductCode"]); // ProductCode
                            requestDetail.ProductName = Convert.ToString(data_outbound.Rows[0]["ProductName"]); // ProductName
                            requestDetail.CustomerCode = Convert.ToString(data_outbound.Rows[0]["NganhHang"]); // Nganh hang
                            requestDetail.CustomerName = Convert.ToString(data_outbound.Rows[0]["LoaiHang"]); // loai hang
                            //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại
                            requestDetail.Property12 = Convert.ToString(data_outbound.Rows[0]["MaNhanVien"]); // mã nhân viên khiếu nại
                            requestDetail.Property15 = form["txtSDT"] != null ? form["txtSDT"].ToString() :
                                Convert.ToString(data_outbound.Rows[0]["SoDienThoai"]); // số điện thoại //ChuongNT3 - 11/09/2018 - thêm sđt
                            // Gọi store thông báo Outbound đã tạo CallLog:
                            sql.ExecuteWithoutResult("CallCenter_UpdateOutbound", CommandType.StoredProcedure, new SqlParameter[]{
                            new SqlParameter("@EcomId",Ecom), //ChuongNT3 - 1/11/2018 - đổi số ecom
                            new SqlParameter("@RequestId",request.Id)
                        });
                            //ChuongNT3 - 27/06/2018 - loại 19
                        }
                    }

                    if (dataFrom == "0")
                    {
                        DataTable data_inbound = sql.ExecuteCommand("CallCenter_GetContentInbound", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@EcomId",Ecom)
                        });
                        if (data_inbound != null && data_inbound.Rows.Count > 0)
                        {
                            requestDetail.Property1 = form["EcomType"].ToString();
                            requestDetail.Property3 = form["EcomTypeParent"].ToString();
                            requestDetail.Property4 = form["ConfirmCalllogType"] != null ? form["ConfirmCalllogType"].ToString()
                              : string.Empty; // phân Loại calllog
                            requestDetail.Quantity1 = Convert.ToString(data_inbound.Rows[0]["Line"]).EParseToInt();//ChuongNT3 - 10/23/2018 - thêm nhánh
                            requestDetail.Property5 = form["txtSoPhieuBH"] != null ? form["txtSoPhieuBH"].ToString() : null; //Số phiếu BH 
                            requestDetail.SaleCode = form["txtSoSO"] != null ? form["txtSoSO"].ToString() : null;//Số SO
                            requestDetail.Property6 = UserManager.CurrentUser.WarehouseCode;
                            requestDetail.Property15 = form["txtSDT"] != null ? form["txtSDT"].ToString() : null;// số điện thoại //ChuongNT3 - 11/09/2018 - thêm sđt                             
                            //ChuongNT3 - 1/11/2018 - gọi store callcenter
                            sql.ExecuteWithoutResult("CallCenter_UpdateOutbound", CommandType.StoredProcedure, new SqlParameter[]{
                            new SqlParameter("@EcomId",Ecom), //ChuongNT3 - 1/11/2018 - đổi số ecom
                            new SqlParameter("@RequestId",request.Id)
                        });
                        }
                    }
                    if (dataFrom == "")
                    {
                        requestDetail.Property1 = form["EcomType"].ToString();
                        requestDetail.Property3 = form["EcomTypeParent"].ToString();
                        requestDetail.Property4 = form["ConfirmCalllogType"] != null ? form["ConfirmCalllogType"].ToString()
                          : string.Empty; // phân Loại calllog
                        requestDetail.Property5 = form["txtSoPhieuBH"] != null ? form["txtSoPhieuBH"].ToString() : null; //Số phiếu BH 
                        requestDetail.SaleCode = form["txtSoSO"] != null ? form["txtSoSO"].ToString() : null;//Số SO
                        requestDetail.Property6 = UserManager.CurrentUser.WarehouseCode;
                        requestDetail.Property15 = form["txtSDT"] != null ? form["txtSDT"].ToString() : null;// số điện thoại //ChuongNT3 - 11/09/2018 - thêm sđt 
                    }

                }
                requestDetail.Property17 = form["txtTenKH"] != null ? Convert.ToString(form["txtTenKH"]) : "Khách lẻ";//Add - TuanNA89 - 14/05/2020 - thêm Tên KH
                requestDetail.Status = Key.Status.Available;
                db.RequestDetails.Add(requestDetail);
                #endregion
                db.SaveChanges();
                //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại
                //▼ Edit - ThuongNM2 - 08/07/2019 - Thay đổi yêu cầu CL 19=====
                var rd = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id && (x.Property1 == "Thái độ" || x.Property1 == "Nghiệp vụ") && x.Property8 != null && x.Property8 != "" && x.Property12 != null && x.Property12 != "" && x.Quantity1 == 0); // ChuongNT3 - 31/08/2018 - chuyển p9 -> p11
                if (rd != null)
                {
                    //ChuongNT3 - 27/06/2018 - loại 19
                    string[] nv_khieu_nai_nhanh1 = rd.Property7.Split(',');
                    string nv_khieu_nai_nhanh2 = "00000,00261,00476";
                    bool s = true;
                    for (int i = 0; i < nv_khieu_nai_nhanh1.Length; i++)
                    {
                        s = nv_khieu_nai_nhanh2.Contains(nv_khieu_nai_nhanh1[i]);
                        if (s == true)
                            i = nv_khieu_nai_nhanh1.Length;
                    }
                    if (s == false)
                    {
                        //▼ Edit - TuanNA89 - 18/11/2019 - Thêm mã Calllog vào trao đổi
                        var msg = "Mã Calllog " + rd.RequestId + " KH phản ánh không hài lòng thái độ Nhân viên được đính kèm trên CallLog. Công ty ghi nhận lỗi thái độ, khung xử lý 50%INC tháng gần nhất. SM shop vui lòng làm việc lại với NV để không phát sinh KNKH tương tự.";
                        if (rd.Property1 == "Nghiệp vụ")
                        {
                            msg = "Mã Calllog " + rd.RequestId + " KH phản ánh không hài lòng nghiệp vụ Nhân viên được đính kèm trên CallLog. Công ty ghi nhận lỗi nghiệp vụ, khung xử lý 20%INC tháng gần nhất. SM shop vui lòng làm việc lại với NV để không phát sinh KNKH tương tự.";
                        }
                        //▲ Edit - TuanNA89 - 18/11/2019 - Thêm mã Calllog vào trao đổi
                        //var converstationCreate = new Conversation();
                        //converstationCreate.RequestId = request.Id;
                        //converstationCreate.StepNo = 0;
                        //converstationCreate.Sender = "-1";
                        //converstationCreate.Message = msg;
                        //converstationCreate.CreateBy = "-1";
                        //converstationCreate.Type = Key.Conversation.Create;
                        //converstationCreate.Status = Key.Status.Available;
                        //converstationCreate.TimeCreate = DateTime.Now;
                        //db.Conversations.Add(converstationCreate);

                        var converstationNB = new Conversation();
                        converstationNB.RequestId = request.Id;
                        converstationNB.StepNo = 0;
                        converstationNB.Sender = "-1";
                        converstationNB.Message = msg;
                        converstationNB.CreateBy = "-1";
                        converstationNB.Type = Key.Conversation.Internal;
                        converstationNB.Status = Key.Status.Available;
                        converstationNB.TimeCreate = DateTime.Now;
                        db.Conversations.Add(converstationNB);

                        db.SaveChanges();
                    }
                }
                //▲ Edit - ThuongNM2 - 08/07/2019 - Thay đổi yêu cầu CL 19=====
                //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại
                #region Gán người xử lý

                DataTable tableAs = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@StepNo",request.StepNo)
                    });
                //Gán người nhận
                if (txtStaff != null && txtStaff != "")
                {
                    DataTable table = sql.ExecuteCommand("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@StepNo",request.StepNo),
                        new SqlParameter("@Assigner",txtStaff),
                        new SqlParameter("@Type",Key.TypeAssigner.To)
                    });
                    if (table != null && table.Rows.Count > 0)
                    {
                        request.Assigner = table.Rows[0][0].ToString(); //Gán mặc định người đại diện đầu tiên
                        db.SaveChanges();
                        stringTo = (from emp in table.AsEnumerable() select emp.Field<string>("EmployeeCode")).Distinct().ToList();
                    }

                }
                //Gán người CC
                if (Cc != null && Cc != "")
                {
                    DataTable table = sql.ExecuteCommand("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@StepNo",request.StepNo),
                        new SqlParameter("@Assigner",Cc),
                        new SqlParameter("@Type",Key.TypeAssigner.Cc)
                    });
                    if (table != null && table.Rows.Count > 0)
                    {
                        stringCc = (from emp in table.AsEnumerable() select emp.Field<string>("EmployeeCode")).Distinct().ToList();
                    }
                }
                #endregion
                // Gửi notification:
                string receive = string.Join(",", stringTo);
                if (stringCc.Count > 0)
                {
                    receive = receive + "," + string.Join(",", stringCc);
                }
                sql.ExecuteWithoutResult("Ins_Notification_Insert", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@Sender",request.Sender),
                        new SqlParameter("@Title",request.Title),
                        new SqlParameter("@Body",txtMessageDes),
                        new SqlParameter("@Receiver",receive),
                        new SqlParameter("@SendTime",DateTime.Now)
                    });
                // Gửi email thông báo :
                XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                TempData["Message"] = String.Format("Tạo yêu cầu {0} thành công! <br/>", request.Id);
                return RedirectToAction("Index", "Home");
            }
            catch (Exception ex)
            {
                if (request.Id > 0)
                {
                    db = new CallLogDbContext();
                    request = db.Requests.FirstOrDefault(x => x.Id == request.Id);
                    if (request != null)
                    {
                        request.Remark = "Create request fail details";
                        request.Status = Key.StatusRequest.Cancel;
                        db.SaveChanges();
                    }
                }
                Logger.WriteLogError("RequestController CreateBO(Request)", ex.ToString());
                ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                return View();
            }
        }
        //  ChuongNT3 - 01/10/2018 - fix GQKN
        [HttpGet]
        public ActionResult CreateBillFromHC()
        {
            Response.AppendHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1.
            Response.AppendHeader("Pragma", "no-cache"); // HTTP 1.0.
            Response.AppendHeader("Expires", "0"); // Proxies.
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            //if (UserManager.CheckPermisionMenu(Request.RawUrl) != true)
            //{
            //    TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
            //    return RedirectToAction("Index", "Home");
            //}

            string BillInfo = string.Empty;
            string UserReceiveCode = string.Empty;
            if (Session[Key.Session.BillInfo] != null)
            {
                DataTable dt = Session[Key.Session.BillInfo] as DataTable;
                BillInfo = XDataTable.DataTableToJSONWithStringBuilder(dt);
                DataRow row = dt.Rows[0];
                UserReceiveCode = row["UserReceiveCode"].ToString();
            }
            ViewBag.BillInfo = BillInfo;

            var UserReceive = new ShopDAL().Get(UserReceiveCode);
            string UserReceiveCodeName = string.Empty;
            if (UserReceive != null)
            {
                UserReceiveCodeName = (UserReceive.WarehouseName).ToString();
            }
            var shopDetail = new ShopDAL().Get(UserManager.CurrentUser.WarehouseCode);
            if (shopDetail != null)
            {
                ViewBag.ShopDetail = (shopDetail.Address).ToString();
            }

            string empDetail = string.Empty;
            DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
            if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
            {
                empDetail += " - " + tableEmpDetail.Rows[0]["Region"];
                empDetail += " - " + tableEmpDetail.Rows[0]["PlaceToWork"];
                empDetail += " - " + UserReceiveCodeName.ToString();
                ViewBag.Shop = empDetail;
                ViewBag.NameNotCode = tableEmpDetail.Rows[0]["EmployeeName"];
                ViewBag.WarehouseCode = tableEmpDetail.Rows[0]["WarehouseCode"];
            }
            ViewBag.TimeOut = Session.Timeout;

            return View(new Request());
        }

        [HttpPost]
        public ActionResult SaveBillFromHC(Request requestS, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                string returnStr = string.Empty;
                List<string> myCollection = new List<string>();
                List<Request> myRequest = new List<Request>();
                int countDetail = 0;
                string ResultFromNVC = string.Empty;
                try
                {
                    #region Info

                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    #endregion Info

                    #region Verify

                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                        if (countDetail == 0 && new List<int>() { 154 }.Contains(requestS.TypeId))
                        {
                            TempData["Message"] = "Yêu cầu không có thông tin chi tiết<br/>Yêu cầu đã bị hủy.";
                            return RedirectToAction("Create", "Requests");
                        }

                        //▼ Add - TuanNA89 - 13 / 08 / 2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        #region Check Calllog gốc đã chuyển bước
                        long RequestIdSave = 0;
                        int StepNoU = 0;
                        long RequestIdParent = 0;
                        int ParentId = 0;

                        foreach (var item in details)
                        {
                            RequestIdSave = 0;
                            if (item.RequestIdSave != null)
                                RequestIdSave = Convert.ToInt64(item.RequestIdSave);

                            StepNoU = 0;
                            if (item.StepNo != null)
                                StepNoU = Convert.ToInt32(item.StepNo);

                            RequestIdParent = 0;
                            if (item.RequestIdParent != null)
                                RequestIdParent = Convert.ToInt64(item.RequestIdParent);

                            ParentId = Convert.ToInt32(item.ParentId);

                            if (ParentId == 214)
                            {
                                if (RequestIdParent > 0)
                                {
                                    Request requestParent = db.Requests.FirstOrDefault(x => x.Id == RequestIdParent);
                                    if (requestParent.StepNo != StepNoU)
                                    {
                                        var requestDetails = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestIdParent);

                                        if ((requestParent.StepNo == 2 && requestDetails.Property12 != null && requestDetails.Property12 != "" && requestDetails.Property12 != RequestIdSave.ToString())
                                            || (requestParent.StepNo == 4 && requestDetails.Property13 != null && requestDetails.Property13 != "" && requestDetails.Property13 != RequestIdSave.ToString()))
                                        {
                                            if (RequestIdSave > 0)
                                            {
                                                Request requestSave = db.Requests.FirstOrDefault(x => x.Id == RequestIdSave);
                                                requestSave.Status = Key.StatusRequest.Cancel;
                                                requestSave.Remark = "Huỷ do Calllog gốc đã chuyển bước trước khi Calllog này được xử lý";

                                                TempData["Message"] = "Calllog gốc " + RequestIdParent + " đã chuyển bước bởi Calllog khác. Calllog này sẽ bị huỷ";
                                            }
                                            else
                                            {
                                                TempData["Message"] = "Calllog gốc " + RequestIdParent + " đã chuyển bước. Không thể thao tác";
                                            }
                                            db.SaveChanges();
                                            return null;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        //▲ Add - TuanNA89 - 13 / 08 / 2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    }
                    #endregion Verify

                    ShopDAL shopDal = new ShopDAL();
                    Warehouse shopUserSent = new Warehouse();
                    EmployeeDAL emlDal = new EmployeeDAL();
                    string[] stringCc = new string[] { };

                    #region Tách  CallLog theo line

                    foreach (var item in details)//=====================================================
                    {
                        #region "Tạo biến lấy dữ liệu từ màn hình"

                        string ShopPhongBanMoi = item.ShopPhongBanMoi;

                        string DiaChiGui = item.DiaChiGui;
                        string DiaChiNhan = item.DiaChiNhan;
                        string MaPhongBanGui = item.MaPhongBanShopGui;
                        string MaPhongBanGuiKerry = item.MaPhongBanShopGuiKerry;
                        string TenPhongBanShopGui = item.TenPhongBanShopGui;
                        string SoDienThoaiNguoiGui = item.SoDienThoaiNguoiGui;
                        string MaPhongBanNhan = string.Empty;
                        string MaPhongBanNhanKerry = string.Empty;
                        string TenPhongBanShopNhan = string.Empty;
                        string HoTenNguoiNhan = item.HoTenNguoiNhan;
                        string SoDienThoaiNguoiNhan = item.SoDienThoaiNguoiNhan;
                        string MaQuanHuyenGui = item.MaHuyenGui;
                        string MaTinhThanhGui = item.MaTinhGui;
                        string TenQuanHuyenGui = item.TenHuyenGui;
                        string TenTinhThanhGui = item.TenTinhGui;
                        string MaQuanHuyenNhan = item.MaHuyenNhan;
                        string MaTinhThanhNhan = item.MaTinhNhan;
                        string TenQuanHuyenNhan = item.TenHuyenNhan;
                        string TenTinhThanhNhan = item.TenTinhNhan;
                        string _NoiDungHangHoa = string.Empty;
                        if (item.NoiDungHangHoa != null)
                            _NoiDungHangHoa = item.NoiDungHangHoa;

                        string _SoKien = string.Empty;
                        if (item.SoKien != null)
                            _SoKien = item.SoKien;

                        string _TrongLuong = string.Empty;
                        if (item.TrongLuong != null)
                            _TrongLuong = item.TrongLuong;

                        string _MaLoaiHangHoa = string.Empty;
                        if (item.MaLoaiHangHoa != null)
                            _MaLoaiHangHoa = item.MaLoaiHangHoa;

                        string _MaHinhThucThanhToan = string.Empty;
                        if (item.MaHinhThucThanhToan != null)
                            _MaHinhThucThanhToan = item.MaHinhThucThanhToan;

                        //▼ ChuongNT3 - 01/10/2019 
                        string _GhiChu = string.Empty;
                        if (item.GhiChu != null)
                            _GhiChu = item.GhiChu;
                        string _MaPhongBanNhan = string.Empty;
                        if (item.MaPhongBanShopNhan != null)
                            _MaPhongBanNhan = item.MaPhongBanShopNhan;
                        string _MaPhongBanNhanKerry = string.Empty;
                        if (item.MaPhongBanShopNhanKerry != null)
                            _MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                        string _TenPhongBanShopNhan = string.Empty;
                        if (item.TenPhongBanShopNhan != null)
                            _TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        //▲ ChuongNT3 - 01/10/2019 

                        string _MaNhaVanChuyen = string.Empty;
                        if (item.MaNhaVanChuyen != null)
                            _MaNhaVanChuyen = item.MaNhaVanChuyen;

                        string _MaDichVuVanChuyen = string.Empty;
                        if (item.MaDichVuVanChuyen != null)
                            _MaDichVuVanChuyen = item.MaDichVuVanChuyen;

                        string _CheckNhan = string.Empty;
                        if (item.CheckNhan != null)
                            _CheckNhan = item.CheckNhan;

                        string _CheckGui = string.Empty;
                        if (item.CheckGui != null)
                            _CheckGui = item.CheckGui;

                        string _IdService = string.Empty;
                        if (item.IdService != null)
                            _IdService = item.IdService;

                        string _QuantityItem = string.Empty;
                        if (item.QuantityItem != null)
                            _QuantityItem = item.QuantityItem;

                        string _ParentId = string.Empty;
                        if (item.ParentId != null)
                            _ParentId = item.ParentId;

                        string _RequestIdSave = string.Empty;
                        if (item.RequestIdSave != null)
                            _RequestIdSave = item.RequestIdSave;

                        string _StepNo = string.Empty;
                        if (item.StepNo != null)
                            _StepNo = item.StepNo;

                        string _RequestIdParent = string.Empty;
                        if (item.RequestIdParent != null)
                            _RequestIdParent = item.RequestIdParent;

                        string l__CuocPhiMin__Str = (item.CuocPhiMin != null) ? item.CuocPhiMin : string.Empty;

                        string l__Action = (item.Action != null ? item.Action : string.Empty);
                        sql.ExecuteCommand("sp__WEB__TaoBillVanChuyenKhoiBo__Data", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@DiaChiGui",DiaChiGui),
                            new SqlParameter("@DiaChiNhan",DiaChiNhan),
                            new SqlParameter("@MaPhongBanShopGui",MaPhongBanGui),
                            new SqlParameter("@MaPhongBanShopGuiKerry",MaPhongBanGuiKerry),
                            new SqlParameter("@TenPhongBanShopGui",TenPhongBanShopGui),
                            new SqlParameter("@SoDienThoaiNguoiGui",SoDienThoaiNguoiGui),
                            //▼ ChuongNT3 - 01/10/2019 
                            new SqlParameter("@MaPhongBanShopNhan",_MaPhongBanNhan),
                            new SqlParameter("@MaPhongBanShopNhanKerry",_MaPhongBanNhanKerry),
                            new SqlParameter("@TenPhongBanShopNhan",_TenPhongBanShopNhan),
                            //▲ ChuongNT3 - 01/10/2019 
                            new SqlParameter("@HoTenNguoiNhan",HoTenNguoiNhan),
                            new SqlParameter("@SoDienThoaiNguoiNhan",SoDienThoaiNguoiNhan),
                            new SqlParameter("@MaHuyenGui",MaQuanHuyenGui),
                            new SqlParameter("@MaTinhGui",MaTinhThanhGui),
                            new SqlParameter("@TenHuyenGui",TenQuanHuyenGui),
                            new SqlParameter("@TenTinhGui",TenTinhThanhGui),
                            new SqlParameter("@MaHuyenNhan",MaQuanHuyenNhan),
                            new SqlParameter("@MaTinhNhan",MaTinhThanhNhan),
                            new SqlParameter("@TenHuyenNhan",TenQuanHuyenNhan),
                            new SqlParameter("@TenTinhNhan",TenTinhThanhNhan),
                            new SqlParameter("@ShopPhongBanMoi",ShopPhongBanMoi),
                            new SqlParameter("@NoiDungHangHoa",_NoiDungHangHoa),
                            new SqlParameter("@SoKien",_SoKien),
                            new SqlParameter("@TrongLuong", _TrongLuong),
                            new SqlParameter("@MaLoaiHangHoa",_MaLoaiHangHoa),
                            new SqlParameter("@MaHinhThucThanhToan",_MaHinhThucThanhToan),
                            new SqlParameter("@GhiChu",_GhiChu),
                            new SqlParameter("@MaNhaVanChuyen",_MaNhaVanChuyen),
                            new SqlParameter("@MaDichVuVanChuyen",_MaDichVuVanChuyen),
                            new SqlParameter("@CheckNhan",_CheckNhan),
                            new SqlParameter("@CheckGui",_CheckGui),
                            new SqlParameter("@IdService",_IdService),
                            new SqlParameter("@QuantityItem",_QuantityItem),
                            new SqlParameter("@ParentId",_ParentId),
                            new SqlParameter("@RequestIdSave",_RequestIdSave),
                            new SqlParameter("@StepNo",_StepNo),
                            new SqlParameter("@RequestIdParent",_RequestIdParent),
                            new SqlParameter("@Function","SaveBillFromHC"),
                            
                            //▼	Edit - VietMXH - 12/04/2019 - Log Action Bill==================================================
                            new SqlParameter("@Action", l__Action),
                            //▲	Edit - VietMXH - 12/04/2019 - Log Action Bill==================================================
                                
                            new SqlParameter("@CuocPhiMin", l__CuocPhiMin__Str),
                            });

                        if (ShopPhongBanMoi != "")
                        {
                            DataTable tb1 = sql.ExecuteCommand("OrganizationForCompany", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@CompanyName",ShopPhongBanMoi),
                                new SqlParameter("@CompanyAddress",DiaChiNhan),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhNhan),
                                new SqlParameter("@MaUser",UserManager.CurrentUser.InsideCode)
                                });
                            if (tb1 != null && tb1.Rows.Count > 0)
                            {
                                DataRow row = tb1.Rows[0];
                                MaPhongBanNhan = row["MaPhongBanMoi"].ToString();
                                MaPhongBanNhanKerry = row["MaPhongBanMoi"].ToString();
                                TenPhongBanShopNhan = ShopPhongBanMoi;
                            }
                        }
                        else
                        {
                            MaPhongBanNhan = item.MaPhongBanShopNhan;
                            MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                            TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        }

                        string NoiDungHangHoa = item.NoiDungHangHoa;
                        string SoKien = item.SoKien;
                        string TrongLuong = item.TrongLuong;
                        string TrongLuongNVC = string.Empty;
                        if (TrongLuong != null)
                        {
                            TrongLuongNVC = TrongLuong;
                        }
                        else
                        {
                            TrongLuongNVC = "0";
                        }
                        string MaLoaiHangHoa = item.MaLoaiHangHoa;
                        string MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        string GhiChu = item.GhiChu;

                        string MaNhaVanChuyen = item.MaNhaVanChuyen;
                        string MaDichVuVanChuyen = item.MaDichVuVanChuyen;

                        long RequestIdSave = 0;
                        if (item.RequestIdSave != null)
                            RequestIdSave = Convert.ToInt64(item.RequestIdSave);
                        int StepNoU = 0;
                        if (item.StepNo != null)
                            StepNoU = Convert.ToInt32(item.StepNo);
                        long RequestIdParent = 0;
                        if (item.RequestIdParent != null)
                            RequestIdParent = Convert.ToInt64(item.RequestIdParent);
                        int ParentId_Save = Convert.ToInt32(item.ParentId);
                        int QuantityItem = 0;
                        if (item.QuantityItem != null)
                            QuantityItem = Convert.ToInt32(item.QuantityItem);

                        double l__CuocPhiMin__Doub = 0;
                        l__CuocPhiMin__Doub = double.TryParse(l__CuocPhiMin__Str, out l__CuocPhiMin__Doub) ? l__CuocPhiMin__Doub : 0;

                        #region "Lên thực ràng lại"

                        string CheckNhan = item.CheckNhan;
                        string CheckGui = item.CheckGui;
                        if (CheckGui == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan",UserManager.CurrentUser.OrganizationHierachyCode),
                                new SqlParameter("@DiaChi",DiaChiGui),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhGui),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenGui),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenGui),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhGui),
                                new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                                });
                        }
                        if (CheckNhan == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan",MaPhongBanNhan),
                                new SqlParameter("@DiaChi",DiaChiNhan),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhNhan),
                                new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                                });
                        }

                        #endregion "Lên thực ràng lại"

                        #endregion "Tạo biến lấy dữ liệu từ màn hình"
                        #region "Bill có sẵn"
                        if (RequestIdSave > 0)
                        {
                            Request req = db.Requests.FirstOrDefault(x => x.Id == RequestIdSave);
                            if (req != null)
                            {
                                myRequest.Add(req);
                                myCollection.Add(req.Id.ToString());
                                returnStr = String.Join(", ", myCollection.ToArray());
                            }
                            RequestDetail rs = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestIdSave);
                            if (rs != null)
                            {
                                rs.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                                rs.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                                if (MaPhongBanGui != null)
                                {
                                    rs.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                                }
                                else
                                {
                                    rs.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                                }
                                rs.EmpCode = SoDienThoaiNguoiGui;
                                rs.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                                rs.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                                rs.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                                rs.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                                rs.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                                rs.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                                rs.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                                if (MaNhaVanChuyen == "NT")
                                {
                                    rs.ProductCode = "FC" + item.RequestId;         //Mã số chứng từ hàng hóa
                                }
                                else if (MaNhaVanChuyen == "Kerry")
                                {
                                    rs.ProductCode = "CK" + item.RequestId;         //Mã số chứng từ hàng hóa
                                }
                                else if (MaNhaVanChuyen == "VNC")
                                {
                                    //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                    rs.ProductCode = "VC" + item.RequestId;         //Mã số chứng từ hàng hóa
                                    //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                }

                                rs.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                                rs.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                                rs.Property10 = TrongLuong;                     //Cân nặng
                                rs.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                                rs.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                                rs.Note = GhiChu;                               //Ghi chú

                                rs.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                                rs.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                                rs.Status = Key.Status.Available;
                                if (QuantityItem > 0)
                                    rs.Quantity3 = QuantityItem;
                                if (ParentId_Save > 0)
                                    rs.Quantity4 = ParentId_Save;
                                if (StepNoU > 0)
                                    rs.Quantity5 = StepNoU;
                                if (RequestIdParent > 0)
                                    rs.Quantity6 = Convert.ToInt32(RequestIdParent);

                                if (l__CuocPhiMin__Doub > 0)
                                {
                                    rs.Money3 = l__CuocPhiMin__Doub;
                                }

                                db.SaveChanges();
                            }
                        }
                        #endregion "Bill có sẵn"
                        #region "Bill tạo mới"
                        else
                        {
                            #region "Tạo header calllog"

                            Request requestSave = new Request();
                            if (sender != null && sender != "")
                            {
                                requestSave.Sender = sender;
                                var empSender = emlDal.Get(requestSave.Sender);
                                if (empSender != null)
                                    shopUserSent = shopDal.Get(empSender.WarehouseCode);
                            }
                            else
                            {
                                requestSave.Sender = UserManager.CurrentUser.InsideCode;
                                shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                            }

                            requestSave.StepNo = 1;
                            requestSave.Title = Convert.ToString(form["TitleRequest"]);
                            requestSave.TypeId = 154;
                            requestSave.StepStatus = Key.StatusRequest.Waitting;
                            requestSave.TimeCreate = DateTime.Now;
                            requestSave.TimeAppear = DateTime.Now;
                            requestSave.isHighlight = false;
                            requestSave.isParent = false;
                            requestSave.Status = Key.Status.Unavailable;
                            requestSave.CreateBy = UserManager.CurrentUser.InsideCode;
                            requestSave.TimeLastUpdate = DateTime.Now;
                            requestSave.UpdateBy = UserManager.CurrentUser.InsideCode;
                            requestSave.Assigner = "-2";
                            if (shopUserSent != null)
                            {
                                requestSave.FromShop = shopUserSent.WarehouseCode;
                            }
                            else
                            {
                                requestSave.FromShop = UserManager.CurrentUser.WarehouseCode;
                            }
                            requestSave.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;
                            requestSave.FromForm = "CallLog";   //▶	Edit - VietMXH - 13/05/2019 - Nguồn tạo CallLog==================================================

                            db.Requests.Add(requestSave);
                            db.SaveChanges();
                            myRequest.Add(requestSave);
                            myCollection.Add(requestSave.Id.ToString());
                            #endregion "Tạo header calllog"

                            #region "Tạo chi tiết CallLog"

                            RequestDetail rs = new RequestDetail();
                            rs.RequestId = requestSave.Id;

                            rs.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                            rs.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                            if (MaPhongBanGui != null)
                            {
                                rs.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                            }
                            else
                            {
                                rs.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                            }
                            rs.EmpCode = SoDienThoaiNguoiGui;
                            rs.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                            rs.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                            rs.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                            rs.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                            rs.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                            rs.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                            rs.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                            if (MaNhaVanChuyen == "NT")
                            {
                                rs.ProductCode = "FC" + requestSave.Id.ToString();         //Mã số chứng từ hàng hóa
                            }
                            else if (MaNhaVanChuyen == "Kerry")
                            {
                                rs.ProductCode = "CK" + requestSave.Id.ToString();         //Mã số chứng từ hàng hóa
                            }
                            else if (MaNhaVanChuyen == "VNC")
                            {
                                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                rs.ProductCode = "VC" + requestSave.Id.ToString();         //Mã số chứng từ hàng hóa
                                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            }

                            rs.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                            rs.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                            rs.Property10 = TrongLuong;                     //Cân nặng
                            rs.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                            rs.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                            rs.Note = GhiChu;                               //Ghi chú

                            rs.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                            rs.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                            rs.Status = Key.Status.Available;
                            if (QuantityItem > 0)
                                rs.Quantity3 = QuantityItem;
                            if (ParentId_Save > 0)
                                rs.Quantity4 = ParentId_Save;
                            if (StepNoU > 0)
                                rs.Quantity5 = StepNoU;
                            if (RequestIdParent > 0)
                                rs.Quantity6 = Convert.ToInt32(RequestIdParent);

                            if (l__CuocPhiMin__Doub > 0)
                            {
                                rs.Money3 = l__CuocPhiMin__Doub;
                            }

                            db.RequestDetails.Add(rs);
                            db.SaveChanges();
                            #endregion "Tạo chi tiết CallLog"

                            //▼ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                            ////▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                            #region Chuyển bước Calllog gốc
                            if (ParentId_Save == 214)
                            {
                                Request requestParent = db.Requests.FirstOrDefault(x => x.Id == RequestIdParent);
                                var requestDetails = (from a in db.RequestDetails
                                                      where a.RequestId == RequestIdParent
                                                      select a).ToList();
                                if (requestParent != null)
                                {
                                    #region Update RequestDetails
                                    foreach (var detail in requestDetails)
                                    {
                                        if (requestParent.StepNo == 1)
                                        {
                                            detail.Property12 = requestSave.Id.ToString();
                                        }
                                        else if (new List<int> { 2, 3 }.Contains(requestParent.StepNo))
                                        {
                                            detail.Property13 = requestSave.Id.ToString();
                                        }
                                    }
                                    #endregion

                                    //#region Update or Insert RequestStep

                                    //RequestStep step = new RequestStep();
                                    //RequestStep oldStep = new RequestStep();
                                    //using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    //{
                                    //    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    //}))
                                    //{
                                    //    step = db.RequestSteps.FirstOrDefault(
                                    //                   x => x.RequestId == requestParent.Id
                                    //                   && x.Status == Key.Status.Available
                                    //                   && x.StepNo == requestParent.StepNo);
                                    //}
                                    //if (step != null)
                                    //{
                                    //    step.TimeEnd = DateTime.Now;

                                    //    if (step.StepNo == 2)
                                    //    {
                                    //        oldStep = step;

                                    //        step = new RequestStep();
                                    //        step.RequestId = requestParent.Id;
                                    //        step.TimeCreate = DateTime.Now;

                                    //        step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;

                                    //        step.TimeEnd = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;
                                    //        step.Assigner = requestParent.Assigner;
                                    //        step.StepNo = 3;
                                    //        step.Status = Key.Status.Available;

                                    //        db.RequestSteps.Add(step);

                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    //    {
                                    //        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    //    }))
                                    //    {
                                    //        oldStep = (from s in db.RequestSteps
                                    //                   where s.RequestId == requestParent.Id
                                    //                   && s.StepNo == requestParent.StepNo - 1
                                    //                   && s.Status == Key.Status.Available
                                    //                   select s).FirstOrDefault();
                                    //    }

                                    //    step = new RequestStep();
                                    //    step.RequestId = requestParent.Id;
                                    //    step.TimeCreate = DateTime.Now;

                                    //    step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;

                                    //    step.TimeEnd = DateTime.Now;
                                    //    step.Assigner = requestParent.Assigner;
                                    //    step.StepNo = requestParent.StepNo;
                                    //    step.Status = Key.Status.Available;

                                    //    db.RequestSteps.Add(step);
                                    //}
                                    //db.SaveChanges();
                                    //#endregion

                                    //#region Xử lý Calllog
                                    //if (new List<int> { 2, 3 }.Contains(requestParent.StepNo))
                                    //{
                                    //    requestParent.StepNo = 4;
                                    //}
                                    //else
                                    //{
                                    //    requestParent.StepNo += 1;
                                    //}
                                    //db.SaveChanges();
                                    //#endregion

                                    //#region Gan nguoi xu lý mới
                                    //requestParent.Status = Key.StatusRequest.Processing;
                                    //requestParent.StepStatus = Key.StatusRequest.Waitting;
                                    //DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                    //    {
                                    //                new SqlParameter("@RequestId",requestParent.Id),
                                    //                new SqlParameter("@StepNo",requestParent.StepNo)
                                    //    });
                                    //if (table != null && table.Rows.Count > 0)
                                    //    requestParent.Assigner = table.Rows[0]["Assigner"].ToString();
                                    //else
                                    //    requestParent.Assigner = string.Empty;
                                    //db.SaveChanges();
                                    //#endregion

                                    //requestParent.TimeLastUpdate = DateTime.Now;
                                    //requestParent.UpdateBy = UserManager.CurrentUser.InsideCode;
                                    db.SaveChanges();
                                }
                            }
                            #endregion
                            ////▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                            //▲ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành

                            returnStr = String.Join(", ", myCollection.ToArray());
                        }
                        #endregion "Bill tạo mới"
                    }
                    if (Session[Key.Session.BillInfo] != null)
                        Session[Key.Session.BillInfo] = null;
                    #endregion Tách  CallLog theo line
                    string strReturn = string.Empty;
                    strReturn = "Lưu Request " + myRequest.Count.ToString() + "/" + myRequest.Count.ToString() + ":" + returnStr + " thành công!";
                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    if (Session[Key.Session.BillInfo] != null)
                        Session[Key.Session.BillInfo] = null;
                    if (myRequest.Count > 0)
                    {
                        foreach (var itemRequest in myRequest)
                        {
                            if (myRequest[myRequest.Count - 1] == itemRequest && myRequest.Count > 0)
                            {
                                var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Id);
                                if (requestCancel != null)
                                {
                                    requestCancel.Remark = "Create request fail details";
                                    requestCancel.Status = Key.StatusRequest.Cancel;
                                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                                    TempData["Message"] = "Lưu Request " + (myRequest.Count - 1).ToString() + "/" + countDetail.ToString() + ":" + returnStr + " thành công!" + ResultFromNVC + ex.Message;
                                }
                            }
                            else
                            {
                                Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                                ViewBag.Message = "Có lỗi xảy ra khi lưu Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                                TempData["Message"] = "Có lỗi xảy ra khi lưu Request! <br/>Xin vui lòng thử lại! <br/>";
                            }
                        }
                        db.SaveChanges();
                    }
                    else
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                        ViewBag.Message = "Có lỗi xảy ra khi lưu Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                        TempData["Message"] = "Có lỗi xảy ra khi lưu Request! <br/>Xin vui lòng thử lại! <br/>";
                    }
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }
        [HttpPost]
        public ActionResult KillSessionBillFromHC()
        {
            if (Session[Key.Session.BillInfo] != null)
                Session[Key.Session.BillInfo] = null;

            //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
            ////return RedirectToAction("Index", "Home");
            return null;
            //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

        }

        public ActionResult GetAllRequestDetailTrashs(long id)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", id) };
            DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails_Trash", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {

                string jsonResult = XDataTable.DataTableToJSONWithStringBuilder(table);
                TempData["BillSaveInfo"] = jsonResult;
                return RedirectToAction("CreateBillFromHC", "Requests");
            }
            return RedirectToAction("Index", "Home");
        }

        public ActionResult CheckWarehouseConfig(string WarehouseCode)
        {
            DataTable tb = sql.ExecuteCommand("sp_CheckWarehouseConfig", CommandType.StoredProcedure, new SqlParameter[]
           {
                new SqlParameter("@WarehouseCode",WarehouseCode)
           });
            if (tb != null && tb.Rows.Count > 0)
            {
                return Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public string GetDefaultCC(string Shops = "")
        {
            DataTable tb = sql.ExecuteCommand("Employee_GetDefaultCc", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@Query",Shops)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                return JsonConvert.SerializeObject(tb.EParseToObjects());
            }
            return null;
        }
        public string GetDefaultCC_NewInbound(string Shops = "")
        {
            DataTable tb = sql.ExecuteCommand("Employee_GetDefaultCc_NewInbound", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@Query",Shops)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                return JsonConvert.SerializeObject(tb.EParseToObjects());
            }
            return null;
        }
        public string GetEmpsByShopsOrOffices(string Query)
        {
            DataTable tb = sql.ExecuteCommand("Employee_GetByShopsOrOffices", CommandType.StoredProcedure, new SqlParameter[]
                {
                    new SqlParameter("@Query",Query)
                });
            if (tb != null && tb.Rows.Count > 0)
            {
                return JsonConvert.SerializeObject(tb.EParseToObjects());
            }
            return null;
        }
        public string GetEmpsByShopsOrOffices_NewInbound(string Query)
        {
            DataTable tb = sql.ExecuteCommand("Employee_GetByShopsOrOffices_NewInbound", CommandType.StoredProcedure, new SqlParameter[]
                {
                    new SqlParameter("@Query",Query)
                });
            if (tb != null && tb.Rows.Count > 0)
            {
                return JsonConvert.SerializeObject(tb.EParseToObjects());
            }
            return null;
        }

        [CompressCode]
        public ActionResult GetEmpsAndGroupMail()
        {
            DataTable tb = sql.ExecuteCommand("Employees_GetWithGroupMail", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                return Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult InsertOrUpdateConfirmError(long requestId, string confirmError)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                (from x in db.RequestDetails
                 where x.RequestId == requestId
                 select x).ToList().ForEach(x => x.Property10 = confirmError);
                // update cl con lai
                var request2 = db.Requests.FirstOrDefault(x => x.Id == requestId);
                (from x in db.RequestDetails
                 where x.RequestId == request2.RequestIdRefer
                 select x).ToList().ForEach(x => x.Property10 = confirmError);
            }
            db.SaveChanges();
            return Json('1', JsonRequestBehavior.AllowGet);
        }
        //▼ Add - TrungNC3 - 2017.10.02 - Bổ sung yêu cầu Chất lượng xử lý CSKH
        public ActionResult InsertOrUpdateConfirmQuality(long requestId, string confirmQuality)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                (from x in db.RequestDetails
                 where x.RequestId == requestId
                 select x).ToList().ForEach(x => x.EmpCode2 = confirmQuality);
                // update cl con lai
                var request2 = db.Requests.FirstOrDefault(x => x.Id == requestId);
                (from x in db.RequestDetails
                 where x.RequestId == request2.RequestIdRefer
                 select x).ToList().ForEach(x => x.EmpCode2 = confirmQuality);
            }

            db.SaveChanges();
            return Json('1', JsonRequestBehavior.AllowGet);
        }
        //▲ Add - TrungNC3 - 2017.10.02 - Bổ sung yêu cầu Chất lượng xử lý CSKH
        public int CheckConversationCSVC(long requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                var checkConversation = db.Conversations.Where(x => x.RequestId == requestId && x.Type == Key.Conversation.CSVC
                            && x.Status == Key.Status.Available).FirstOrDefault();
                if (checkConversation != null)
                {
                    return 1;
                }
                return 0;
            }
        }
        public ActionResult GetDetails(long requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                var details = (from x in db.RequestDetails
                               where x.RequestId == requestId && x.Property10 != null
                               select x);
                if (details != null)
                {
                    return Json(details, JsonRequestBehavior.AllowGet);
                }
                return null;
            }
        }
        public ActionResult GetCalllogType_19(long requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                var details = (from x in db.RequestDetails
                               where x.RequestId == requestId && x.Property4 != null && x.Property4 != ""
                               select x);
                if (details != null)
                {
                    return Json(details, JsonRequestBehavior.AllowGet);
                }
                return null;
            }
        }
        //ChuongNT3 - 27/06/2018 - loại 19
        public ActionResult LayNVViPham(long requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", requestId) };
                DataTable table = sql.ExecuteCommand("LayDSNVViPham", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                }
                return null;
            }
        }
        //ChuongNT3 - 27/06/2018 - loại 19

        //▼	Edit - VietMXH - 22/11/2018 - Tối ưu==================================================
        public ActionResult GetDetailsPhanLoai(long requestId)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[]{
                    new SqlParameter("@RequestId", requestId)
                };
            DataTable l_DataTable = sql.ExecuteCommand("sp_WEB_GetDetailsPhanLoai", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲	Edit - VietMXH - 22/11/2018 - Tối ưu==================================================

        public ActionResult GetDetailsChucDanh(long requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                var details = (from x in db.RequestDetails
                               where x.RequestId == requestId
                               select new { x.Property7 });
                if (details != null)
                {
                    return Json(details, JsonRequestBehavior.AllowGet);
                }
                return null;
            }
        }
        //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại
        public ActionResult GetNhanVienBiKhieuNai(long requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", requestId) };
                DataTable table = sql.ExecuteCommand("GetNhanVienBiKhieuNai", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                }

                return null;
            }
        }

        public ActionResult GetEmpsShopOfRequest(string requestId)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", requestId) };
            DataTable table = sql.ExecuteCommand("GetEmpsShopOfRequest", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetJobTitleAndGroupMail()
        {
            try
            {
                DataTable table = sql.ExecuteCommand("JobtitlesAndGroupMail_Get", CommandType.StoredProcedure, null);
                if (table != null && table.Rows.Count > 0)
                {
                    List<Dictionary<string, object>> catagories = table.EParseToObjects();
                    return Json(catagories, JsonRequestBehavior.AllowGet);
                }
                else return null;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController GetJobTitleAndGroupMail", ex.ToString());
                return null;
            }
        }
        //NgoanHT - 20/09/2017 - Loại 28 - Thêm StepNo//NgoanHT - 20/09/2017 - Loại 28 - Thêm StepNo
        public ActionResult GetRequestDetailConvertation(int requestdatailId
            ////, string StepNo //  VietMXH - 21/09/2017 - Tạm đóng, lỗi màn hình khác
            )
        {
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@RequesDetailtId", requestdatailId)
                ////, new SqlParameter("@StepNo", StepNo) //  VietMXH - 21/09/2017 - Tạm đóng, lỗi màn hình khác
            };

            //▼	Change - VietMXH - 21/09/2017 - Đổi lại Store cũ, lỗi màn hình khác=======================================
            ////DataTable tb = sql.ExecuteCommand("[DebtConfirm_GetConversations]", CommandType.StoredProcedure, param);
            //------------------------------------------------------------------------------------------------------------
            DataTable tb = sql.ExecuteCommand("[RequestDetail_Get_Conversations]", CommandType.StoredProcedure, param);
            //▲	Change====================================================================================================

            if (tb != null && tb.Rows.Count > 0)
            {
                return Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //NgoanHT - 20/09/2017 - Loại 28 - Thêm StepNo
        public ActionResult GetEmployeesByPermission(long requestId)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", requestId) };
            DataTable table = sql.ExecuteCommand("Employees_GetByPermission", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        public ActionResult UpdateChangeAssigner(long requestId, string EmpCode)
        {
            if (UserManager.CurrentUser != null)
            {
                EmployeeDAL emp = new EmployeeDAL();
                Models.Request request = new Models.Request();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }
                if (request != null)
                {
                    request.Assigner = EmpCode;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;

                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                    }))
                    {
                        Assigner assignerOld = db.Assigners.FirstOrDefault(x => x.EmployeeCode == UserManager.CurrentUser.InsideCode
                      && x.RequestId == request.Id
                      && x.StepNo == request.StepNo
                      && x.Status == Key.Status.Available);
                        if (assignerOld != null)
                        {
                            assignerOld.Status = Key.Status.Unavailable;
                        }

                        Assigner assignerNew = (from a in db.Assigners
                                                where a.RequestId == request.Id
                                                && a.EmployeeCode == EmpCode
                                                && a.StepNo == request.StepNo
                                                select a).FirstOrDefault();
                        if (assignerNew != null)
                        {
                            assignerNew.Status = Key.Status.Available;
                        }
                        else
                        {
                            assignerNew = new Assigner
                            {
                                RequestId = request.Id,
                                EmployeeCode = EmpCode,
                                StepNo = request.StepNo,
                                Type = Key.TypeAssigner.To,
                                Status = Key.Status.Available,
                                TimeCreate = DateTime.Now
                            };
                            db.Assigners.Add(assignerNew);
                        }
                    }

                    F03_Employees emOld = emp.Get(UserManager.CurrentUser.InsideCode);
                    F03_Employees emNew = emp.Get(EmpCode);
                    if (emOld != null && emNew != null)
                    {
                        Conversation conversation = new Conversation
                        {
                            RequestId = request.Id,
                            StepNo = request.StepNo,
                            Sender = "-1",
                            Message = "Người xử lý cũ " + emOld.EmployeeCode + " - " + emOld.EmployeeName + " đã chuyển người xử lý mới " + emNew.EmployeeCode + " - " + emNew.EmployeeName,
                            CreateBy = UserManager.CurrentUser.InsideCode,
                            Type = Key.Conversation.System,
                            Status = Key.Status.Available,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(conversation);
                        db.SaveChanges();
                    }
                    else
                    {
                        return Json('0', JsonRequestBehavior.AllowGet);
                    }
                }

                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }

        public int CreateNewRequestDetailConvertation(int request, int requestDetail, int step, string message)
        {
            try
            {
                Request req = new Request();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    req = db.Requests.FirstOrDefault(x => x.Id == request);
                }
                if (req.TypeId == 48)
                {
                    //▼	Edit - VietMXH - 18/06/2020 - OneApp Inside User Info==================================================
                    //  NOTE: Chuyển sang /Requests/ViolationRequest__DetailConversation__Insert
                    //  Liên hệ: VietMXH hướng dẫn
                    return 0;
                    //▲	Edit - VietMXH - 18/06/2020 - OneApp Inside User Info==================================================
                }
                else
                {
                    Conversation conversation = new Conversation();
                    conversation.RequestId = request;
                    conversation.RequestDetailId = requestDetail;
                    conversation.StepNo = step;
                    conversation.Message = message;
                    conversation.Sender = UserManager.CurrentUser.InsideCode;
                    conversation.Type = Key.Conversation.Comment;
                    conversation.Status = Key.Status.Available;
                    conversation.TimeCreate = DateTime.Now;
                    db.Conversations.Add(conversation);
                    db.SaveChanges();
                    return 1;
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - RequestId:{1}", ex.ToString(), request));
                return 0;
            }
        }

        public ActionResult CreateConvertation(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                if (request.TypeId == 102)
                {
                    foreach (var item in objects)
                    {
                        Conversation conversation = new Conversation();
                        conversation.RequestId = request.Id;
                        conversation.RequestDetailId = item.Id;
                        conversation.StepNo = request.StepNo;
                        conversation.Message = item.GiaiTrinh;
                        conversation.Sender = UserManager.CurrentUser.InsideCode;
                        conversation.Type = Key.Conversation.Comment;
                        conversation.Status = Key.Status.Available;
                        conversation.TimeCreate = DateTime.Now;
                        db.Conversations.Add(conversation);
                    }
                    db.SaveChanges();
                    TempData["MessageSuccess"] = "Thêm trao đổi thành công";
                    return RedirectToAction("Details", new { Id = request.Id });
                }
                else
                {
                    return RedirectToAction("Details", new { Id = request.Id });
                }
            }
            TempData["Message"] = "Không tìm thấy yêu cầu";
            return RedirectToAction("Index", "Home");

        }

        public ActionResult GetProduct(string productCode)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@ProductCode", productCode) };
            DataTable table = sql.ExecuteCommand("Ins_GetProduct", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetProducts()
        {
            DataTable table = sql.ExecuteCommand("Ins_GetProducts", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetAllProducts_Voucher()
        {
            DataTable table = sql.ExecuteCommand("BI_GetAllProducts_Voucher", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetGroupProducts()
        {
            DataTable table = sql.ExecuteCommand("BI_GetGroupProducts", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetNganhHang()
        {
            DataTable table = sql.ExecuteCommand("BI_GetNganhhang", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetNhanHang()
        {
            DataTable table = sql.ExecuteCommand("BI_GetNhanHang", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetLoaiHang()
        {
            DataTable table = sql.ExecuteCommand("BI_GetLoaiHang", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetSearchNumSO_19(string numSO)
        {
            DataTable table = sql.ExecuteCommand("FRT_SP_MuaHang_CSKH", CommandType.StoredProcedure, new SqlParameter[]
                {
                    new SqlParameter("@SOSO",numSO)
                });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        #region dainlp
        public ActionResult GetInfoUserCreteRequest()
        {
            DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
            if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
            {
                return Json(tableEmpDetail.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetJobsByEmpCode()
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@Emp", UserManager.CurrentUser.InsideCode) };
            DataTable table = sql.ExecuteCommand("dainlp_GetJobsByEmpCode", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;

        }
        public ActionResult GetEmpsByJobCode(string code, string job, int isshop)
        {
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@Code",code) ,
                new SqlParameter("@Job", job) ,
                new SqlParameter("@isShop", isshop) ,
            };
            DataTable table = sql.ExecuteCommand("dainlp_GetEmployByJobs", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetAllRequestDetails(long id)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", id) };
            DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
                //return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetEmpByShopCode(string shopCode)
        {
            EmployeeDAL emps = new EmployeeDAL();
            IEnumerable<F03_Employees> lstemps = emps.GetByShop(shopCode);
            if (lstemps != null)
            {
                return Json(lstemps, JsonRequestBehavior.AllowGet);
            }

            return null;
        }

        public ActionResult GetEmpByShopCodeOneMonth(string shopCode)
        {
            //▼	Edit - VietMXH - 12/09/2018 - Bắt buộc chọn ComboBox==================================================
            ////SqlParameter[] param = new SqlParameter[] { new SqlParameter("@Whs", UserManager.CurrentUser.InsideCode), };
            //  ==================================================================================================
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@Whs", string.IsNullOrEmpty(shopCode) ? "" : shopCode) };
            //▲	Edit - VietMXH - 12/09/2018 - Bắt buộc chọn ComboBox==================================================

            DataTable table = sql.ExecuteCommand("GetEmployeesAIOneMounth", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        public ActionResult GetShopsByUserManager()
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@EmpCode", UserManager.CurrentUser.InsideCode), };
            DataTable table = sql.ExecuteCommand("dainlp_ShopsGet", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public int HaveTypeErrorForHTHT(int requestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                Request rs = db.Requests.FirstOrDefault(x => x.Id == requestId);
                if (rs != null && rs.ErrorCode != null)
                {
                    return 1;
                }
                return 0;
            }


        }
        public int HaveFileAttach(int requestId, int step)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                FileAttach f = db.FileAttachs.FirstOrDefault(x => x.RequestId == requestId && x.StepNo == step);
                if (f != null)
                {
                    return 1;
                }
                return 0;
            }

        }
        #endregion

        #region hiendt23
        #endregion

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        #region "Encrypt URL"


        public string RenderLinKToInside_GiaiQuyetKhieuNai(long requestId, string content)
        {
            var detailsBO = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId);

            string violationCode = "null";

            if (detailsBO != null && detailsBO.Property3 != null)
            {
                violationCode = detailsBO.Property3.ToLower() == "thái độ" ? "0038" :
                    (detailsBO.Property3.ToLower() == "bảo hành" || detailsBO.Property3.ToLower() == "đổi trả") ? "0043"
                    : (detailsBO.Property3.ToLower() == "nghiệp vụ" ||
                    detailsBO.Property3.ToLower() == "sản phẩm" || detailsBO.Property3.ToLower() == "khuyến mãi" ||
                    detailsBO.Property3.ToLower() == "khác") ? "0050" : "null";
            }
            string username = UserManager.CurrentUser.InsideCode;
            string password = UserManager.CurrentUser.Password;

            //▼	Edit - VietMXH - 11/07/2018 - Chuyển HTTP -> HTTPS==================================================
            string l_Domain__Inside = ConfigurationManager.AppSettings["Domain__Inside"];
            if (string.IsNullOrEmpty(l_Domain__Inside))
            {
                l_Domain__Inside = "";
            }

            string URL = l_Domain__Inside + "/Default.aspx?ID=1486";
            URL = URL + "&CategoryViolation=1&ViolationCode=" + violationCode +
                "&Note=" + content.Replace("@", "") + "&RequestID=" + requestId.ToString() + "&EmployeeViolation=" + detailsBO.Property13; ////ChuongNT3 - 19/12/2018 - thời gian update loại kn 
            //URL = URL + "&Shop=" + shop + "&CategoryViolation=1" + "&Note="+content;
            string sPara = username + "@" + password + "@" + URL;
            string para = l_Domain__Inside + "/InsideLogin.aspx?ParameterViolation=" + Encrypt(sPara);
            //▲	Edit - VietMXH - 11/07/2018 - Chuyển HTTP -> HTTPS==================================================

            return para;
        }

        public string Send_Value_POS_156(long RequestID)
        {
            string strings = "";
            RequestDetail re156 = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestID);
            if (re156 != null)
            {
                var Approved = re156.Approved == false ? "I" : "A";
                string sPara = RequestID + "@" + Approved;

                //▼	Edit - VietMXH - 11/07/2018 - Chuyển HTTP -> HTTPS==================================================
                string l_Domain__Inside = ConfigurationManager.AppSettings["Domain__Inside"];
                if (string.IsNullOrEmpty(l_Domain__Inside))
                {
                    l_Domain__Inside = "";
                }

                strings = l_Domain__Inside + "/Components/Intranet/ResetPassword.aspx?pararesetpass=" + Encrypt(sPara);
                //▲	Edit - VietMXH - 11/07/2018 - Chuyển HTTP -> HTTPS==================================================

                SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@Id", RequestID),
                    new SqlParameter("@Mes", strings),
                };
                DataTable tablesRD = sql.ExecuteCommand("Log_Insert", CommandType.StoredProcedure, param);

                //  ===Fix lỗi "Could not establish trust relationship for the SSL/TLS secure channel"===
                ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };

                // Create a request for the URL. 
                WebRequest request = WebRequest.Create(strings);
                // If required by the server, set the credentials.
                request.Credentials = CredentialCache.DefaultCredentials;
                // Get the response.
                WebResponse response = request.GetResponse();
                // Get the stream containing content returned by the server.
                Stream dataStream = response.GetResponseStream();
                // Open the stream using a StreamReader for easy access.
                StreamReader reader = new StreamReader(dataStream);
                // Read the content.
                string responseFromServer = reader.ReadToEnd();
                // Clean up the streams and the response.
                reader.Close();
                response.Close();
            }
            return strings;
        }
        public static string Encrypt(string original)
        {
            return Encrypt(original, "1qaz2wsx0okm9ijn");
        }
        public static string Encrypt(string original, string key)
        {
            TripleDESCryptoServiceProvider objDESProvider;
            MD5CryptoServiceProvider objHashMD5Provider;
            byte[] keyhash;
            byte[] buffer;
            try
            {
                objHashMD5Provider = new MD5CryptoServiceProvider();
                keyhash = objHashMD5Provider.ComputeHash(UnicodeEncoding.Unicode.GetBytes(key));
                objHashMD5Provider = null;

                objDESProvider = new TripleDESCryptoServiceProvider();
                objDESProvider.Key = keyhash;
                objDESProvider.Mode = CipherMode.ECB;

                buffer = UnicodeEncoding.Unicode.GetBytes(original);
                return Convert.ToBase64String(objDESProvider.CreateEncryptor().TransformFinalBlock(buffer, 0, buffer.Length));
            }
            catch
            {
                return string.Empty;
            }
        }
        #endregion

        //▼	Edit - VietMXH - 05/12/2018 - Lấy thêm Requests_ARCH==================================================
        public ActionResult DownloadExcelExport(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();

            SqlParameter[] l__SqlParameter = new SqlParameter[] {
                new SqlParameter("@RequestId", requestId)
            };
            DataTable l__DataTable = sql.ExecuteCommand("sp__WEB__Requests__DownloadExcelExport__GetRequests", CommandType.StoredProcedure, l__SqlParameter);
            int l__TypeId = 0;
            if (l__DataTable != null && l__DataTable.Rows.Count > 0)
            {
                l__TypeId = int.TryParse(l__DataTable.Rows[0]["TypeId"].ToString(), out l__TypeId) ? l__TypeId : 0;
            }

            if (l__TypeId > 0)
            {
                if (l__TypeId == 89)
                {
                    #region ---89-Kiểm kê tài sản -công cụ---
                    string fileTemplate = "/TemplateExcel/BienBanKiemKeTaiSanCongCuEditer.xlsx";
                    FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                    if (file.Exists)
                    {
                        using (ExcelPackage package = new ExcelPackage(file))
                        {
                            ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                            int index = 2;
                            foreach (var item in objects)
                            {
                                int col = 0;
                                col++; worksheet.Cells[index, col].Value = item.Id;
                                col++; worksheet.Cells[index, col].Value = item.ProductCode;
                                col++; worksheet.Cells[index, col].Value = item.ProductName;
                                col++; worksheet.Cells[index, col].Value = item.Imei;
                                col++; worksheet.Cells[index, col].Value = item.Quantity;
                                col++; worksheet.Cells[index, col].Value = item.Quantity1;
                                col++; worksheet.Cells[index, col].Value = item.ShopName;
                                index++;
                            }
                            Response.Clear();
                            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            Response.AddHeader("Content-Disposition", "attachment; filename=BienBanKiemKeTaiSanCongCuEditer-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                            Response.BinaryWrite(package.GetAsByteArray());
                            Response.Flush();
                            Response.End();
                        }
                    }
                    #endregion
                }
                if (l__TypeId == 60)
                {
                    #region ---60-Xác nhận công nợ---
                    string fileTemplate = "/TemplateExcel/XacNhanCongNoKhoiShopEditer.xlsx";
                    FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                    if (file.Exists)
                    {
                        using (ExcelPackage package = new ExcelPackage(file))
                        {
                            ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                            int index = 2;
                            foreach (var item in objects)
                            {
                                int col = 0;
                                col++; worksheet.Cells[index, col].Value = item.Id;
                                col++; worksheet.Cells[index, col].Value = item.ShopCode;
                                col++; worksheet.Cells[index, col].Value = item.WarehouseName;
                                col++; worksheet.Cells[index, col].Value = item.CustomerName;
                                col++; worksheet.Cells[index, col].Value = item.SaleCode;
                                col++; worksheet.Cells[index, col].Value = item.Time1;
                                col++; worksheet.Cells[index, col].Value = item.Quantity;
                                col++; worksheet.Cells[index, col].Value = item.Note;
                                col++; worksheet.Cells[index, col].Value = item.Money1;
                                col++; worksheet.Cells[index, col].Value = item.Money2;
                                col++; worksheet.Cells[index, col].Value = item.Property2;
                                col++; worksheet.Cells[index, col].Value = item.Property1;
                                col++; worksheet.Cells[index, col].Value = item.Conversations;
                                col++; worksheet.Cells[index, col].Value = item.EnterConversations;
                                index++;
                            }
                            Response.Clear();
                            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            Response.AddHeader("Content-Disposition", "attachment; filename=XacNhanCongNoKhoiShopEditer-" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx");
                            Response.BinaryWrite(package.GetAsByteArray());
                            Response.Flush();
                            Response.End();
                        }
                    }
                    #endregion
                }
                if (l__TypeId == 102)
                {
                    #region ---102:Kiểm kê kho---
                    string fileTemplate = "/TemplateExcel/KiemKeKhoEditor.xlsx";
                    FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                    if (file.Exists)
                    {
                        using (ExcelPackage package = new ExcelPackage(file))
                        {
                            ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                            int index = 2;
                            foreach (var item in objects)
                            {
                                int col = 0;
                                col++; worksheet.Cells[index, col].Value = item.Id;
                                col++; worksheet.Cells[index, col].Value = item.ProductCode;
                                col++; worksheet.Cells[index, col].Value = item.ProductName;
                                col++; worksheet.Cells[index, col].Value = item.Imei;
                                col++; worksheet.Cells[index, col].Value = item.Property1;
                                col++; worksheet.Cells[index, col].Value = item.Quantity;
                                col++; worksheet.Cells[index, col].Value = item.QuantityAvaiable;
                                col++; worksheet.Cells[index, col].Value = item.SL_XacNhan;

                                //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                                ////col++; worksheet.Cells[index, col].Value = item.ChenhLechSauKhiXacNhan;
                                //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                                col++; worksheet.Cells[index, col].Value = item.Diff;

                                //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                                ////col++; worksheet.Cells[index, col].Value = item.Property2;
                                ////col++; worksheet.Cells[index, col].Value = item.Property3;
                                ////col++; worksheet.Cells[index, col].Value = item.Property4;
                                ////col++; worksheet.Cells[index, col].Value = item.Property5;
                                ////col++; worksheet.Cells[index, col].Value = item.Property6;
                                ////col++; worksheet.Cells[index, col].Value = item.Property7;
                                ////col++; worksheet.Cells[index, col].Value = item.Property8;
                                ////col++; worksheet.Cells[index, col].Value = item.CustomerName;
                                ////col++; worksheet.Cells[index, col].Value = item.Property9;
                                ////col++; worksheet.Cells[index, col].Value = item.CustomerCode;
                                ////col++; worksheet.Cells[index, col].Value = item.Property10;
                                //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                                index++;
                            }
                            Response.Clear();
                            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            Response.AddHeader("Content-Disposition", "attachment; filename=KiemKeKhoEditor-" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx");
                            Response.BinaryWrite(package.GetAsByteArray());
                            Response.Flush();
                            Response.End();
                        }
                    }
                    #endregion
                }
            }
            return null;
        }
        //▲	Edit - VietMXH - 05/12/2018 - Lấy thêm Requests_ARCH==================================================

        public ActionResult ImportExcelEditer(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                foreach (var item in objects)
                {
                    long detailId = item.MaId;
                    if (item.GiaiTrinh != null)
                    {
                        Conversation convertation = new Conversation();
                        convertation.RequestId = request.Id;
                        convertation.StepNo = request.StepNo;
                        convertation.Sender = UserManager.CurrentUser.InsideCode;
                        convertation.Message = item.GiaiTrinh;
                        convertation.CreateBy = UserManager.CurrentUser.InsideCode;
                        convertation.Type = Key.Conversation.Comment;
                        convertation.Status = Key.Status.Available;
                        convertation.RequestDetailId = detailId;
                        convertation.TimeCreate = DateTime.Now;
                        db.Conversations.Add(convertation);
                    }
                    var requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == detailId);
                    if (requestDetail != null)
                    {
                        requestDetail.Quantity1 = item.TonThucTe;
                    }
                }
                db.SaveChanges();
                return Redirect("/Requests/Details/" + requestId);
            }
            return null;
        }

        public int UpdateTimeFutureFinish(string Data, long RequestId)
        {
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                var request = db.Requests.FirstOrDefault(x => x.Id == RequestId);
                if (request != null)
                {
                    if (request.TimeGolive == null)
                    {
                        request.TimeGolive = request.TimeFutureFinish;
                    }
                    request.TimeFutureFinish = DateTime.Parse(Data);
                    request.Remark += "UDTF-" + DateTime.Now.ToString() + "-" + UserManager.CurrentUser.InsideCode.ToString() + ":"
                        + Data + "||";
                    db.SaveChanges();
                    return 1;
                }
                return 0;
            }
        }

        public ActionResult GetJobTitleShop()
        {
            JobtitleDAL job = new JobtitleDAL();
            DataTable jobList = job.GetJobtitleByShop();
            var jsonResult = Json(jobList.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetEmpShop(string shopCode)
        {
            EmployeeDAL emp = new EmployeeDAL();
            DataTable emps = emp.GetEmpByShopAndJob(shopCode, "");
            var jsonResult = Json(emps.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        //▼  LuanNT44-13/11/2019-23
        public ActionResult LoadShopDatAoCreate_23()
        {
            DataTable table = sql.ExecuteCommand("sp_LoadShopDatAoCreate_23", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲ LuanNT44-13/11/2019-23
        //▼  LuanNT44-06/09/2019-23
        public ActionResult LoadNVByShop()
        {
            SqlParameter[] Pram = new SqlParameter[]
                                                {
                                                    new SqlParameter("@Shopcode",UserManager.CurrentUser.WarehouseCode)
                                                };
            DataTable table = sql.ExecuteCommand("sp_LoadNVByShop", CommandType.StoredProcedure, Pram);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult LoadNVByShopDetail(string shopCode)  // 23/10/2019-23
        {
            SqlParameter[] Pram = new SqlParameter[]
                                                {
                                                    new SqlParameter("@Shopcode",shopCode)
                                                };
            DataTable table = sql.ExecuteCommand("sp_LoadNVByShop", CommandType.StoredProcedure, Pram);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲ LuanNT44-06/09/2019-23
        //▼  Add - LuanNT44 - 13/08/2018 - Loại 35 - Tuyển dụng
        public ActionResult GetEmpShopReplace(string shopCode)
        {
            SqlParameter[] Pram = new SqlParameter[]
                                                {
                                                    new SqlParameter("@ShopCode",shopCode)
                                                };
            DataTable table = sql.ExecuteCommand("Employee_GetByShopAndJobReplace", CommandType.StoredProcedure, Pram);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetEmpShopStatusInfo35(string insidecode)
        {
            SqlParameter[] Pram = new SqlParameter[]
                                                {
                                                    new SqlParameter("@Insidecode",insidecode)
                                                };
            DataTable table = sql.ExecuteCommand("GetEmployeeStatusInfo_35", CommandType.StoredProcedure, Pram);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 13/08/2018 - Loại 35 - Tuyển dụng
        public ActionResult GetQuanHuyen(string shopCode)
        {
            RegionDAL reigon = new RegionDAL();
            DataTable regions = reigon.GetQuanHuyenDiaChiByShopCode(shopCode);
            var jsonResult = Json(regions.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetCoutJobTitleShop(string shopCode, string jobCode)
        {
            JobtitleDAL job = new JobtitleDAL();
            DataTable jobList = job.GetCoutJobInShop(shopCode, jobCode);
            var jsonResult = Json(jobList.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetWhsPos(long requestId)
        {
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                string shopcode = request.FromShop == null || request.FromShop == "" ? request.ToShop : request.FromShop;
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@ShopCode", shopcode) };
                DataTable table = sql.ExecuteCommand("GetWhsPos", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }
        public ActionResult KiemTraCaLamBanGiaoQuyGiuaCa()
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@EmpCode", UserManager.CurrentUser.InsideCode) };
            DataTable table = sql.ExecuteCommand("KiemTraCaLamBanGiaoQuyGiuaCa", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetTranderService()
        {
            SqlParameter[] param = new SqlParameter[] { };
            DataTable table = sql.ExecuteCommand("GetTranderService", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetFileUpload(string requestId, string requestDetailId, string Domain)
        {
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@RequestId", requestId) ,
                new SqlParameter("@RequestDetailId", requestDetailId) ,
                new SqlParameter("@Domain", Domain)
            };
            DataTable table = sql.ExecuteCommand("GetFileUploads", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult DeleteFileUpload(string requestId, string requestDetailId, string Domain, string Uris)
        {
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@RequestId", requestId) ,
                new SqlParameter("@RequestDetailId", requestDetailId) ,
                new SqlParameter("@Domain", Domain) ,
                new SqlParameter("@Names", Uris)
            };
            DataTable table = sql.ExecuteCommand("DeleteImageFileAttach", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult DownloadFileGuarantee(string fileName)
        {
            //beta: ftp://10.96.254.143:2121/CRM-BH%202015/Upload/
            // us: ftp-upload; pass: ftp@FTP@2121
            //const string FtpUrl = "ftp://10.96.254.47/CRM/";
            //string FtpUrlDowload = FtpUrl + fileName;
            //const string User = "upload";
            //const string Pass = "upLoaD@2015";

            const string FtpUrl = "ftp://10.96.254.143:2121/CRM-BH%202015/Upload/";
            string FtpUrlDowload = FtpUrl + fileName;
            const string User = "ftp-upload";
            const string Pass = "ftp@FTP@2121";
            byte[] downloadedData = new byte[0];

            try
            {
                //Get File Size
                FtpWebRequest req = (FtpWebRequest)WebRequest.Create(FtpUrlDowload);
                req.Method = WebRequestMethods.Ftp.GetFileSize;
                req.Credentials = new NetworkCredential(User, Pass);
                req.UseBinary = true;
                req.UsePassive = true;
                req.KeepAlive = true;
                int dataLength = (int)req.GetResponse().ContentLength;

                //Get Date
                req = (FtpWebRequest)WebRequest.Create(FtpUrlDowload);
                req.Method = WebRequestMethods.Ftp.DownloadFile;
                req.Credentials = new NetworkCredential(User, Pass);
                req.UseBinary = true;
                req.UsePassive = true;
                req.KeepAlive = false;

                //Streams
                FtpWebResponse response = req.GetResponse() as FtpWebResponse;
                Stream reader = response.GetResponseStream();

                //Download to memory
                //Note: adjust the streams here to download directly to the hard drive
                MemoryStream memStream = new MemoryStream();
                byte[] buffer = new byte[1024]; //downloads in chuncks

                while (true)
                {
                    //Application.DoEvents(); //prevent application from crashing

                    //Try to read the data
                    int bytesRead = reader.Read(buffer, 0, buffer.Length);

                    if (bytesRead == 0)
                    {
                        //Nothing was read, finished downloading
                        break;
                    }
                    else
                    {
                        //Write the downloaded data
                        memStream.Write(buffer, 0, bytesRead);
                    }
                }

                //Convert the downloaded stream to a byte array
                downloadedData = memStream.ToArray();

                //using (var zipStream = new ZipOutputStream(Response.OutputStream))
                //{
                //    // Give the file name of downloaded zip file
                //    Response.AddHeader("Content-Disposition", "attachment; filename=BaoHanh.zip");
                //    // Define content type
                //    Response.ContentType = "application/zip";
                //    // Get all file path one by one
                //    byte[] fileBytes = memStream.ToArray();
                //    // Get every file path
                //    var fileEntry = new ZipEntry(fileName)
                //    {
                //        Size = fileBytes.Length
                //    };
                //    zipStream.PutNextEntry(fileEntry);
                //    zipStream.Write(fileBytes, 0, fileBytes.Length);

                //    // Clear and closed zipStream object
                //    zipStream.Flush();
                //    reader.Close();
                //    memStream.Close();
                //    response.Close();
                //    zipStream.Close();
                //}
                byte[] fileBytes = memStream.ToArray();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + fileName);
                Response.BinaryWrite(fileBytes);
                reader.Close();
                memStream.Close();
                response.Close();
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController DownloadFileGuarantee", ex.ToString());
                return null;
            }
            return null;
        }
        public string DownLoadFilePosByte(string url)
        {
            //SO123/b.jpg  -- SO123/a.txt
            string[] filesNames = url.Split('/');
            string fileName = filesNames[1];
            string UrlDowload = "ftp://118.69.201.35/POS_TraGop/" + url;
            const string User = "upload";
            const string Pass = "upLoaD@2015";
            byte[] downloadedData = new byte[0];
            try
            {
                FtpWebRequest Ftp = (FtpWebRequest)WebRequest.Create(UrlDowload);
                Ftp.Method = WebRequestMethods.Ftp.GetFileSize;
                Ftp.Credentials = new NetworkCredential(User, Pass);
                Ftp.UseBinary = true;
                Ftp.UsePassive = true;
                Ftp.KeepAlive = true;

                int dataLength = (int)Ftp.ContentLength;

                Ftp = (FtpWebRequest)WebRequest.Create(UrlDowload);
                Ftp.Method = WebRequestMethods.Ftp.DownloadFile;
                Ftp.Credentials = new NetworkCredential(User, Pass);
                Ftp.UseBinary = true;
                Ftp.UsePassive = true;
                Ftp.KeepAlive = false;

                FtpWebResponse response = Ftp.GetResponse() as FtpWebResponse;
                Stream reader = response.GetResponseStream();

                MemoryStream memory = new MemoryStream();
                byte[] buffer = new byte[1024];
                while (true)
                {
                    int byteRead = reader.Read(buffer, 0, buffer.Length);
                    if (byteRead == 0)
                    {
                        break;
                    }
                    else
                    {
                        memory.Write(buffer, 0, byteRead);
                    }
                }

                byte[] fileBytes = memory.ToArray();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + fileName);
                Response.BinaryWrite(fileBytes);
                reader.Close();
                memory.Close();
                response.Close();

                //downloadedData = memory.ToArray();
                //reader.Close();
                //memory.Close();
                //response.Close();
                //var data = Convert.ToBase64String(downloadedData);
                //return data;

            }
            catch (Exception ex)
            {
                return null;
            }
            return null;
        }

        public ActionResult AjaxGetTypeCRM()
        {
            List<MasterData> errors = (from m in db.MasterDatas where m.Group == "TypeCRM" && m.Status == 1 select m).ToList();
            var jsonResult = Json(errors, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult AjaxGetTypeKeyCRM()
        {
            //List<MasterData> errors = (from m in db.MasterDatas  where m.Group == "TypeKeyCRM" & m.Status == 1 select m).ToList();
            //var jsonResult = Json(errors, JsonRequestBehavior.AllowGet);
            //jsonResult.MaxJsonLength = int.MaxValue;
            //return jsonResult;
            SqlParameter[] param = new SqlParameter[] { };
            DataTable table = sql.ExecuteCommand("CodeDetail_GetCRM", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult AjaxGetTypeHXLCRM()
        {
            List<MasterData> errors = (from m in db.MasterDatas where m.Group == "TypeHXLCRM" & m.Status == 1 select m).ToList();
            var jsonResult = Json(errors, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        //================ Hiền.Đoàn 07.07.2016 Lấy danh sách loại lỗi camera
        [HttpGet]
        public JsonResult GetCameraErrorList()
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable table = sql.ExecuteCommand("GetCameraErrorList", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //================ Hiền.Đoàn 07.07.2016 Lấy danh sách nhân viên theo shop
        [HttpGet]
        public JsonResult GetEmployees_GetByWarehouse(string shop)
        {
            if (!Request.IsAjaxRequest())
                return null;
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@Warehouse", shop)
            };
            DataTable table = sql.ExecuteCommand("GetEmployees_GetByWarehouse", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        //▼	Edit - VietMXH - 17/07/2019 - Thêm mới/Chuyển Chức danh==================================================
        ////////[HttpGet]
        ////////public JsonResult GetEmployees_Jobtitle()
        ////////{
        ////////    if (!Request.IsAjaxRequest())
        ////////        return null;
        ////////    DataTable table = sql.ExecuteCommand("HuyGetJobtitle", CommandType.StoredProcedure, null);
        ////////    if (table != null && table.Rows.Count > 0)
        ////////    {
        ////////        var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        ////////        jsonResult.MaxJsonLength = int.MaxValue;
        ////////        return jsonResult;
        ////////    }
        ////////    return null;
        ////////}
        //▲	Edit - VietMXH - 17/07/2019 - Thêm mới/Chuyển Chức danh==================================================

        [HttpGet]
        public ActionResult GetEmpByAssigner(int MaNXL)
        {
            if (!Request.IsAjaxRequest())
                return null;

            DataTable table = sql.ExecuteCommand("GetEmpByAssigner", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestIds",MaNXL)}
                );
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [HttpPost]
        public ActionResult UploadListTruyThu(IEnumerable<UploadListTruyThu> UploadListTruyThu)
        {
            try
            {
                if (!Request.IsAjaxRequest())
                    return null;

                DataTable dt = new DataTable();
                dt.Columns.Add("RequestID", typeof(string));
                dt.Columns.Add("EmployeeList", typeof(string));
                dt.Columns.Add("MoneyList", typeof(double));
                dt.Columns.Add("RequestDetailId", typeof(string));

                if (UploadListTruyThu != null)
                {
                    foreach (UploadListTruyThu item in UploadListTruyThu)
                    {
                        dt.Rows.Add(
                            item.RequestID,
                            item.EmployeeList,
                            item.MoneyList,
                            item.RequestDetailId
                        );
                    }
                    sql.ExecuteWithoutResult("UploadListTruyThu", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@Table",dt),
                new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                });
                }


            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
            }
            return null;
        }

        public ActionResult LoadDanhSachTruyThu(int MaCL, int MaChiTietCL)
        {
            if (!Request.IsAjaxRequest())
                return null;

            DataTable table = sql.ExecuteCommand("GetEmpByReqDetailId", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestId",MaCL),new SqlParameter("@ReqDetailId",MaChiTietCL)}
                );
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult UploadListTruyThu_BHBongDen(IEnumerable<UploadListTruyThu_BHBongDen> UploadListTruyThu_bhBongDen)
        {
            try
            {
                if (!Request.IsAjaxRequest())
                    return null;

                DataTable dt = new DataTable();
                dt.Columns.Add("RequestID", typeof(string));
                dt.Columns.Add("EmployeeList", typeof(string));
                dt.Columns.Add("MoneyList", typeof(double));
                dt.Columns.Add("MonthList", typeof(int));
                dt.Columns.Add("RequestDetailId", typeof(string));

                if (UploadListTruyThu_bhBongDen != null)
                {
                    foreach (UploadListTruyThu_BHBongDen item in UploadListTruyThu_bhBongDen)
                    {
                        dt.Rows.Add(
                            item.RequestID,
                            item.EmployeeList,
                            item.MoneyList,
                            item.MonthList,
                            item.RequestDetailId
                        );
                    }
                    sql.ExecuteWithoutResult("UploadListTruyThu_BHBongDen", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@Table",dt),
                new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                });
                }


            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
            }
            return null;
        }

        public ActionResult LoadDanhSachTruyThu_BHBongDen(int MaCL, int MaChiTietCL)
        {
            if (!Request.IsAjaxRequest())
                return null;

            DataTable table = sql.ExecuteCommand("GetEmpByReqDetailId_BHBongDen", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestId",MaCL),new SqlParameter("@ReqDetailId",MaChiTietCL)}
                );
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult ClearDanhSachTruyThu_BHBongDen(int MaCL, int MaChiTietCL, int soLuongTruyThuMoi)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable table = sql.ExecuteCommand("sp_ClearDanhSachTruyThu", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestId",MaCL),new SqlParameter("@ReqDetailId",MaChiTietCL),new SqlParameter("@soLuongTruyThuMoi",soLuongTruyThuMoi)}
               );
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetTienMatPhaiTraTruyThuLuong(string empCode, int soThang, float soTienTruyThu, int p_RequestId)
        {
            if (!Request.IsAjaxRequest())
                return null;

            DataTable table = sql.ExecuteCommand("Inside_LayTienMatPhaiTraTruyThuLuong", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@EmpCode", empCode),
                new SqlParameter("@SoThang", soThang),
                new SqlParameter("@SoTien", soTienTruyThu),
                new SqlParameter("@RequestId", p_RequestId),
                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [HttpPost]
        public ActionResult CreateCameraMonitoring(Request request, FormCollection form)
        {
            //▼	Edit - VietMXH - 29/12/2018 - OneApp==================================================
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);


                    int countDetail = 0;
                    #endregion

                    #region Verify
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                    }
                    if (countDetail == 0 && new List<int>() { 150 }.Contains(request.TypeId))
                    {
                        TempData["Message"] = "Yêu cầu không có thông tin chi tiết<br/>Yêu cầu đã bị hủy.";
                        return RedirectToAction("Create", "Requests");
                    }
                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao calllog

                    request.StepNo = 1;
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.Status = Key.Status.Available;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = null;

                    db.Requests.Add(request);

                    #endregion

                    db.SaveChanges();

                    #region Tao chi tiet
                    foreach (var item in details)
                    {
                        RequestDetail rs = new RequestDetail();
                        rs.RequestId = request.Id;
                        rs.Property1 = item.note;
                        rs.Property2 = item.row;
                        rs.Property3 = item.TypeError;
                        rs.Property4 = item.NumberCamera;
                        rs.ShopCode = Convert.ToString(item.Shops);
                        rs.Status = Key.Status.Available;
                        db.RequestDetails.Add(rs);
                        db.SaveChanges();

                        if (rs.Id != 0)
                        {
                            string fNames1 = Convert.ToString(item.ListNameFile_1) == null ? "" : Convert.ToString(item.ListNameFile_1);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "1";
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }
                        }
                    }
                    #endregion

                    db.SaveChanges();

                    #region Nội dung yêu cầu của người tạo
                    if (message.Length != 0)
                    {
                        var converstation = new Conversation();
                        converstation.RequestId = request.Id;
                        converstation.Message = message;
                        converstation.Sender = UserManager.CurrentUser.InsideCode;
                        converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                        converstation.Status = Key.Status.Available;
                        converstation.StepNo = 0;
                        converstation.TimeCreate = DateTime.Now;
                        converstation.Type = Key.Conversation.Create;
                        db.Conversations.Add(converstation);
                    }
                    #endregion

                    #region Gán người xử lý
                    string ListAssigner = string.Empty;

                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                    if (table != null && table.Rows.Count > 0)
                    {
                        RequestHub requestHub = new RequestHub();
                        requestHub.id = request.Id;
                        requestHub.title = request.Title;
                        requestHub.description = form["Description"].ToString();
                        requestHub.date = request.TimeCreate.ToShortDateString() + " " + request.TimeCreate.ToLongTimeString();
                        requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                        NotificationManager nf = new NotificationManager();
                        List<string> assigners = new List<string>();
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                            assigners.Add(table.Rows[i]["EmailShort"].ToString());
                        }
                        nf.Send(assigners, "Bạn có yêu cầu mới : " + request.Id, request.Id);
                        nf.RequestInsert(assigners, requestHub);
                    }
                    #endregion

                    #region Cc
                    foreach (var item in stringCc)
                    {
                        var AssignerCc = new Assigner();
                        AssignerCc.RequestId = request.Id;
                        AssignerCc.EmployeeCode = item.ToString();
                        AssignerCc.StepNo = 1;
                        AssignerCc.Type = Key.TypeAssigner.Cc;
                        AssignerCc.TimeCreate = DateTime.Now;
                        AssignerCc.Status = Key.StatusRequest.Waitting;
                        db.Assigners.Add(AssignerCc);
                    }
                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    sql.ExecuteWithoutResult("sp_Requests_Temporary_Insert_ForMobile_GiamSatHinhAnhCamera", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });

                    #region Trả về
                    strReturn = "Tạo Request " + Convert.ToString(request.Id) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
            //▲	Edit - VietMXH - 29/12/2018 - OneApp==================================================
        }

        // tạo ACTION đánh giá vệ sinh shop. Bảo vệ và tạp vụ
        [HttpPost]
        public ActionResult EvaluationForm(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);


                    int countDetail = 0;
                    #endregion

                    #region Verify
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                    }
                    if (countDetail == 0 && new List<int>() { 150 }.Contains(request.TypeId))
                    {
                        TempData["Message"] = "Yêu cầu không có thông tin chi tiết<br/>Yêu cầu đã bị hủy.";
                        return RedirectToAction("Create", "Requests");
                    }
                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao calllog

                    request.StepNo = 1;
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.Status = Key.Status.Available;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                    db.Requests.Add(request);
                    requestDics.Add("single", request);
                    #endregion

                    db.SaveChanges();

                    #region Tao chi tiet
                    foreach (var item in details)
                    {
                        RequestDetail rs = new RequestDetail();
                        rs.RequestId = request.Id;
                        rs.Property10 = item.Name;
                        rs.Property1 = item.Property1;
                        rs.Property2 = item.Property2;
                        rs.Property3 = item.Property3;
                        rs.Property4 = item.Property4;
                        rs.Property5 = item.Property5;
                        rs.Property6 = item.Property6;
                        rs.Property7 = item.Property7;
                        rs.Property10 = item.Property10;
                        rs.Quantity = item.Quantity;
                        rs.Quantity1 = item.Quantity1;
                        rs.Sum = item.Sum;
                        if (item.Quantity == 1 && item.Quantity1 == 1 || (item.Quantity == 2 && item.Quantity1 == 1))
                        {
                            rs.Property9 = item.Property9;
                        }
                        if ((item.Quantity == 1 && item.Quantity1 == 1) || (item.Quantity == 2 && item.Quantity1 == 1))
                        {
                            rs.ShopCode = UserManager.CurrentUser.WarehouseCode;
                            rs.EmpCode = UserManager.CurrentUser.InsideCode;
                        }
                        rs.Note = item.Note;
                        rs.Status = Key.Status.Available;
                        db.RequestDetails.Add(rs);
                    }
                    #endregion

                    #region Nội dung yêu cầu của người tạo
                    if (message.Length != 0)
                    {
                        var converstation = new Conversation();
                        converstation.RequestId = request.Id;
                        converstation.Message = message;
                        converstation.Sender = UserManager.CurrentUser.InsideCode;
                        converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                        converstation.Status = Key.Status.Available;
                        converstation.StepNo = 0;
                        converstation.TimeCreate = DateTime.Now;
                        converstation.Type = Key.Conversation.Create;
                        db.Conversations.Add(converstation);
                    }
                    #endregion

                    #region Gán người xử lý và gọi Notification

                    string ListAssigner = string.Empty;

                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                    if (table != null && table.Rows.Count > 0)
                    {
                        RequestHub requestHub = new RequestHub();
                        requestHub.id = request.Id;
                        requestHub.title = request.Title;
                        requestHub.description = form["Description"].ToString();
                        requestHub.date = request.TimeCreate.ToShortDateString() + " " + request.TimeCreate.ToLongTimeString();
                        requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                        NotificationManager nf = new NotificationManager();
                        List<string> assigners = new List<string>();
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                            assigners.Add(table.Rows[i]["EmailShort"].ToString());
                        }
                        nf.Send(assigners, "Bạn có yêu cầu mới : " + request.Id, request.Id);
                        nf.RequestInsert(assigners, requestHub);
                    }


                    #endregion

                    #region Cc
                    foreach (var item in stringCc)
                    {
                        var AssignerCc = new Assigner();
                        AssignerCc.RequestId = request.Id;
                        AssignerCc.EmployeeCode = item.ToString();
                        AssignerCc.StepNo = 1;
                        AssignerCc.Type = Key.TypeAssigner.Cc;
                        AssignerCc.TimeCreate = DateTime.Now;
                        AssignerCc.Status = Key.StatusRequest.Waitting;
                        db.Assigners.Add(AssignerCc);
                    }
                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + Convert.ToString(request.Id) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }
        public ActionResult Get_AssessmentType(string Group)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("Get_AssessmentType", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@Group",Group)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Load danh sách dịch vụ vận chuyển  theo group

        //=== Tìm CallLog có trong tháng chưa được duyệt của loại áo đồng phục phòng nhân sự và đào tạo (HC tạo)
        [HttpGet]
        public ActionResult Request_GetSimilar_CurrentUser(int TypeId, string Warehouse)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@TypeId",TypeId),
                    new SqlParameter("@Warehourse",Warehouse)
                };
            DataTable table = sql.ExecuteCommand("Request_GetSimilar_CurrentUser", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        //=== Tìm CallLog có trong tháng chưa được duyệt của loại đồ dùng kỹ thuật (shop tạo)
        [HttpGet]
        public ActionResult Request_GetSimilar_TypeID_126(int TypeId, string Items_Code)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@TypeId",TypeId),
                    new SqlParameter("@EmpCode",UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@Items_Code",Items_Code)
                };
            DataTable table = sql.ExecuteCommand("Request_GetSimilar_TypeID_126", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }

        #region Tạo ACTION bill vận chuyển khối BO -- TrungNC3 TEST

        //Lấy thông tin người gửi
        [HttpGet]
        public ActionResult KiemTraThongTinUser(string userCode = "")
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("GetShopOrPhongBanByEmp", CommandType.StoredProcedure, new SqlParameter[] {
                        new SqlParameter("@EmployeeCodeSend",(userCode != "" && userCode != null)?userCode:UserManager.CurrentUser.InsideCode)
                    });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [HttpGet]
        [CompressCode]
        public ActionResult GoiYThongTinDiaChiUser(string userCode = "")
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("TaoGoiYDiaChiNhap", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@MaNhanVien",(userCode!="")?userCode:UserManager.CurrentUser.InsideCode)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [CompressCode]
        public ActionResult GoiYThongTinDiaChiPhongBan(string MaPhongBan)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("GoiYThongTinDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@MaPhongBan",MaPhongBan)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }   // lên thực ràng cái này lại
        //ChuongNT3 - 19/09/2018 - thêm nút tạo bill
        public ActionResult CheckBillVC(long requestid)
        {
            DataTable tb = sql.ExecuteCommand("CheckBillVC", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestId",requestid)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;

        }
        public ActionResult TaoBillVC_DoDungHC(FormCollection form)
        {
            #region kiem tra dang nhap
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            #endregion
            var requestId = form["RequestId"].EParseToLong();
            string sender = UserManager.CurrentUser.InsideCode;
            Models.Request request = new Models.Request();
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
            }))
            {
                request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            }
            var type = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);

            if (request != null && type != null)
            {
                List<Permission> permissions = GetPermissions(request.Id);
                if (request.TypeId == 23 && request.StepNo == 4 && Convert.ToString(form["Approved_HuongXL_45"]) == "0")
                {
                    if (Session[Key.Session.BillInfo] != null)
                    {
                        Session[Key.Session.BillInfo] = null;
                    }
                    var RequestDetailHC_ShopSend = (from a in db.RequestDetails
                                                    where a.RequestId == request.Id
                                                    select a).ToList();
                    // DataTable dtBillInfor
                    DataTable dtBillInfor = new DataTable();
                    dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
                    dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
                    dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã phòng ban nhận
                    dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
                    dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
                    dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
                    dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
                    dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
                    dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
                    dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
                    dtBillInfor.Columns.Add("TypeId", typeof(string));     //Mô tả loại calllog// Add - TrungNC3 - 28/11/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                    foreach (RequestDetail itemHC in RequestDetailHC_ShopSend)
                    {
                        if ((request.TypeId == 23) && itemHC.Quantity2 != null && itemHC.Quantity2 > 0)
                        {
                            dtBillInfor.Rows.Add(
                              UserManager.CurrentUser.InsideCode,
                              itemHC.ItemId.ToString(),
                              request.FromShop,
                              "",
                              "",
                              "0",
                              request.Id.ToString(),
                              itemHC.Quantity2.ToString(),
                              request.StepNo.ToString(),
                              "",
                              "23");
                        }
                    }
                    if (dtBillInfor.Rows.Count > 0)
                    {
                        Session[Key.Session.BillInfo] = dtBillInfor;
                        return RedirectToAction("CreateBillFromHC", "Requests");
                    }
                    else
                    {
                        if (permissions.Contains(Permission.Sender))
                        {
                            return RedirectToAction("Sent", "Home");
                        }
                        return RedirectToAction("Index", "Home");
                    }
                }
                else
                {
                    #region Not Valid
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            else
            {
                TempData["Message"] = "Không tìm được Request!";
                return RedirectToAction("Details", "Requests", new { id = request.Id });
            }
        }
        //ChuongNT3 - 19/09/2018 - thêm nút tạo bill

        [HttpPost]
        public ActionResult TaoBillVanChuyenKhoiBo(Request requestS, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                string returnStr = string.Empty;
                List<string> myCollection = new List<string>();
                List<string> RequestHT = new List<string>(); //NgoanHT - 23/10/2017 - 154 - 180: bill hỏa tốc - Thêm
                List<Request> myRequest = new List<Request>();
                int countDetail = 0;
                int countDetailLine = 0;
                string ResultFromNVC = string.Empty;
                //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                int TypeIdParent = 0;
                long p__RequestIdParent = 0; // Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    #endregion

                    #region Verify
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                        foreach (var item in details)
                        {
                            if (item.DiaChiGui == null || item.DiaChiNhan == null || item.MaPhongBanShopGui == null || item.TenPhongBanShopGui == null || item.SoDienThoaiNguoiGui == null
                                || item.SoDienThoaiNguoiNhan == null && item.MaHuyenGui == null && item.MaTinhGui == null || item.MaHuyenNhan == null || item.MaTinhNhan == null || item.NoiDungHangHoa == null
                                || item.SoKien == null || item.MaLoaiHangHoa == null || item.MaHinhThucThanhToan == null || item.MaNhaVanChuyen == null || item.MaDichVuVanChuyen == null)
                            {
                                countDetailLine++;
                            }
                        }
                    }
                    if (countDetail == 0 && new List<int>() { 154 }.Contains(requestS.TypeId))
                    {
                        TempData["Message"] = "Yêu cầu không có thông tin chi tiết<br/>Yêu cầu đã bị hủy.";
                        return RedirectToAction("Create", "Requests");
                    }
                    if (countDetailLine > 0 && new List<int>() { 154 }.Contains(requestS.TypeId))
                    {
                        TempData["Message"] = "Yêu cầu không có thông tin chi tiết<br/>Yêu cầu đã bị hủy.";
                        return RedirectToAction("Create", "Requests");
                    }

                    //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    #region Check Calllog gốc đã chuyển bước
                    long l_RequestIdSave = 0;
                    int l_StepNoU = 0;
                    long l_RequestIdParent = 0;
                    int l_ParentId = 0;

                    foreach (var item in details)
                    {
                        l_RequestIdSave = 0;
                        if (item.RequestIdSave != null)
                            l_RequestIdSave = Convert.ToInt64(item.RequestIdSave);

                        l_StepNoU = 0;
                        if (item.StepNo != null)
                            l_StepNoU = Convert.ToInt32(item.StepNo);

                        l_RequestIdParent = 0;
                        if (item.RequestIdParent != null)
                            l_RequestIdParent = Convert.ToInt64(item.RequestIdParent);

                        l_ParentId = Convert.ToInt32(item.ParentId);

                        if (l_ParentId == 214)
                        {
                            if (l_RequestIdParent > 0)
                            {
                                Request requestParent = db.Requests.FirstOrDefault(x => x.Id == l_RequestIdParent);
                                if (requestParent.StepNo != l_StepNoU)
                                {
                                    var requestDetails = db.RequestDetails.FirstOrDefault(x => x.RequestId == l_RequestIdParent);

                                    if ((requestParent.StepNo == 2 && requestDetails.Property12 != null && requestDetails.Property12 != "" && requestDetails.Property12 != l_RequestIdSave.ToString())
                                        || (requestParent.StepNo == 4 && requestDetails.Property13 != null && requestDetails.Property13 != "" && requestDetails.Property13 != l_RequestIdSave.ToString()))
                                    {
                                        if (l_RequestIdSave > 0)
                                        {
                                            Request requestSave = db.Requests.FirstOrDefault(x => x.Id == l_RequestIdSave);
                                            requestSave.Status = Key.StatusRequest.Cancel;
                                            requestSave.Remark = "Huỷ do Calllog gốc đã chuyển bước trước khi Calllog này được xử lý";

                                            TempData["Message"] = "Calllog gốc " + l_RequestIdParent + " đã chuyển bước bởi Calllog khác. Calllog này sẽ bị huỷ";
                                        }
                                        else
                                        {
                                            TempData["Message"] = "Calllog gốc " + l_RequestIdParent + " đã chuyển bước. Không thể thao tác";
                                        }
                                        db.SaveChanges();
                                        return null;
                                    }
                                }
                            }
                        }
                    }
                    #endregion
                    //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();
                    string[] stringCc = new string[] { };

                    #region Tách  CallLog theo line
                    foreach (var item in details)//=====================================================
                    {
                        #region "Tạo biến lấy dữ liệu từ màn hình"
                        string ShopPhongBanMoi = item.ShopPhongBanMoi;
                        string DiaChiGui = item.DiaChiGui;
                        string DiaChiNhan = item.DiaChiNhan;
                        string MaPhongBanGui = item.MaPhongBanShopGui;
                        string MaPhongBanGuiKerry = item.MaPhongBanShopGuiKerry;
                        string TenPhongBanShopGui = item.TenPhongBanShopGui;
                        string SoDienThoaiNguoiGui = item.SoDienThoaiNguoiGui;
                        string MaPhongBanNhan = string.Empty;
                        string MaPhongBanNhanKerry = string.Empty;
                        string TenPhongBanShopNhan = string.Empty;
                        string HoTenNguoiNhan = item.HoTenNguoiNhan;
                        string SoDienThoaiNguoiNhan = item.SoDienThoaiNguoiNhan;
                        string MaQuanHuyenGui = item.MaHuyenGui;
                        string MaTinhThanhGui = item.MaTinhGui;
                        string TenQuanHuyenGui = item.TenHuyenGui;
                        string TenTinhThanhGui = item.TenTinhGui;
                        string MaQuanHuyenNhan = item.MaHuyenNhan;
                        string MaTinhThanhNhan = item.MaTinhNhan;
                        string TenQuanHuyenNhan = item.TenHuyenNhan;
                        string TenTinhThanhNhan = item.TenTinhNhan;

                        string _NoiDungHangHoa = string.Empty;
                        if (item.NoiDungHangHoa != null)
                            _NoiDungHangHoa = item.NoiDungHangHoa;

                        string _SoKien = string.Empty;
                        if (item.SoKien != null)
                            _SoKien = item.SoKien;

                        string _TrongLuong = string.Empty;
                        if (item.TrongLuong != null)
                            _TrongLuong = item.TrongLuong;

                        string _MaLoaiHangHoa = string.Empty;
                        if (item.MaLoaiHangHoa != null)
                            _MaLoaiHangHoa = item.MaLoaiHangHoa;

                        string _MaHinhThucThanhToan = string.Empty;
                        if (item.MaHinhThucThanhToan != null)
                            _MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        //▼ ChuongNT3 - 01/10/2019 
                        string _GhiChu = string.Empty;
                        if (item.GhiChu != null)
                            _GhiChu = item.GhiChu;
                        string _MaPhongBanNhan = string.Empty;
                        if (item.MaPhongBanShopNhan != null)
                            _MaPhongBanNhan = item.MaPhongBanShopNhan;
                        string _MaPhongBanNhanKerry = string.Empty;
                        if (item.MaPhongBanShopNhanKerry != null)
                            _MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                        string _TenPhongBanShopNhan = string.Empty;
                        if (item.TenPhongBanShopNhan != null)
                            _TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        //▲ ChuongNT3 - 01/10/2019 
                        string _MaNhaVanChuyen = string.Empty;
                        if (item.MaNhaVanChuyen != null)
                            _MaNhaVanChuyen = item.MaNhaVanChuyen;

                        string _MaDichVuVanChuyen = string.Empty;
                        if (item.MaDichVuVanChuyen != null)
                            _MaDichVuVanChuyen = item.MaDichVuVanChuyen;

                        string _CheckNhan = string.Empty;
                        if (item.CheckNhan != null)
                            _CheckNhan = item.CheckNhan;

                        string _CheckGui = string.Empty;
                        if (item.CheckGui != null)
                            _CheckGui = item.CheckGui;

                        string _IdService = string.Empty;
                        if (item.IdService != null)
                            _IdService = item.IdService;

                        string _QuantityItem = string.Empty;
                        if (item.QuantityItem != null)
                            _QuantityItem = item.QuantityItem;

                        string _ParentId = string.Empty;
                        if (item.ParentId != null)
                            _ParentId = item.ParentId;

                        string _RequestIdSave = string.Empty;
                        if (item.RequestIdSave != null)
                            _RequestIdSave = item.RequestIdSave;

                        string _StepNo = string.Empty;
                        if (item.StepNo != null)
                            _StepNo = item.StepNo;

                        string _RequestIdParent = string.Empty;
                        if (item.RequestIdParent != null)
                            _RequestIdParent = item.RequestIdParent;

                        string l__CuocPhiMin__Str = (item.CuocPhiMin != null) ? item.CuocPhiMin : string.Empty;

                        string l__Action = (item.Action != null ? item.Action : string.Empty);
                        sql.ExecuteCommand("sp__WEB__TaoBillVanChuyenKhoiBo__Data", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@DiaChiGui",DiaChiGui),
                            new SqlParameter("@DiaChiNhan",DiaChiNhan),
                            new SqlParameter("@MaPhongBanShopGui",MaPhongBanGui),
                            new SqlParameter("@MaPhongBanShopGuiKerry",MaPhongBanGuiKerry),
                            new SqlParameter("@TenPhongBanShopGui",TenPhongBanShopGui),
                            new SqlParameter("@SoDienThoaiNguoiGui",SoDienThoaiNguoiGui),
                            //▼ ChuongNT3 - 01/10/2019 
                            new SqlParameter("@MaPhongBanShopNhan",_MaPhongBanNhan),
                            new SqlParameter("@MaPhongBanShopNhanKerry",_MaPhongBanNhanKerry),
                            new SqlParameter("@TenPhongBanShopNhan",_TenPhongBanShopNhan),
                            //▲ ChuongNT3 - 01/10/2019 
                            new SqlParameter("@HoTenNguoiNhan",HoTenNguoiNhan),
                            new SqlParameter("@SoDienThoaiNguoiNhan",SoDienThoaiNguoiNhan),
                            new SqlParameter("@MaHuyenGui",MaQuanHuyenGui),
                            new SqlParameter("@MaTinhGui",MaTinhThanhGui),
                            new SqlParameter("@TenHuyenGui",TenQuanHuyenGui),
                            new SqlParameter("@TenTinhGui",TenTinhThanhGui),
                            new SqlParameter("@MaHuyenNhan",MaQuanHuyenNhan),
                            new SqlParameter("@MaTinhNhan",MaTinhThanhNhan),
                            new SqlParameter("@TenHuyenNhan",TenQuanHuyenNhan),
                            new SqlParameter("@TenTinhNhan",TenTinhThanhNhan),
                            new SqlParameter("@ShopPhongBanMoi",ShopPhongBanMoi),
                            new SqlParameter("@NoiDungHangHoa",_NoiDungHangHoa),
                            new SqlParameter("@SoKien",_SoKien),
                            new SqlParameter("@TrongLuong", _TrongLuong),
                            new SqlParameter("@MaLoaiHangHoa",_MaLoaiHangHoa),
                            new SqlParameter("@MaHinhThucThanhToan",_MaHinhThucThanhToan),
                            new SqlParameter("@GhiChu",_GhiChu),
                            new SqlParameter("@MaNhaVanChuyen",_MaNhaVanChuyen),
                            new SqlParameter("@MaDichVuVanChuyen",_MaDichVuVanChuyen),
                            new SqlParameter("@CheckNhan",_CheckNhan),
                            new SqlParameter("@CheckGui",_CheckGui),
                            new SqlParameter("@IdService",_IdService),
                            new SqlParameter("@QuantityItem",_QuantityItem),
                            new SqlParameter("@ParentId",_ParentId),
                            new SqlParameter("@RequestIdSave",_RequestIdSave),
                            new SqlParameter("@StepNo",_StepNo),
                            new SqlParameter("@RequestIdParent",_RequestIdParent),
                            new SqlParameter("@Function","TaoBillVanChuyenKhoiBo"),
                            
                            //▼	Edit - VietMXH - 12/04/2019 - Log Action Bill==================================================
                            new SqlParameter("@Action", l__Action),
                            //▲	Edit - VietMXH - 12/04/2019 - Log Action Bill==================================================
                            
                            new SqlParameter("@CuocPhiMin", l__CuocPhiMin__Str),
                            });

                        if (ShopPhongBanMoi != "")
                        {
                            DataTable tb1 = sql.ExecuteCommand("OrganizationForCompany", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@CompanyName",ShopPhongBanMoi),
                                new SqlParameter("@CompanyAddress",DiaChiNhan),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhNhan),
                                new SqlParameter("@MaUser",UserManager.CurrentUser.InsideCode)
                                });
                            if (tb1 != null && tb1.Rows.Count > 0)
                            {
                                DataRow row = tb1.Rows[0];
                                MaPhongBanNhan = row["MaPhongBanMoi"].ToString();
                                MaPhongBanNhanKerry = row["MaPhongBanMoi"].ToString();
                                TenPhongBanShopNhan = ShopPhongBanMoi;
                            }
                        }
                        else
                        {
                            MaPhongBanNhan = item.MaPhongBanShopNhan;
                            MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                            TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        }

                        string NoiDungHangHoa = item.NoiDungHangHoa;
                        string SoKien = item.SoKien;
                        string TrongLuong = item.TrongLuong;
                        string TrongLuongFRT = item.TrongLuongFRT;
                        string TrongLuongNVC = string.Empty;
                        if (TrongLuong != null)
                        {
                            TrongLuongNVC = TrongLuong;
                        }
                        else
                        {
                            TrongLuongNVC = "0";
                        }

                        string MaLoaiHangHoa = item.MaLoaiHangHoa;
                        string MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        string GhiChu = item.GhiChu;

                        string MaNhaVanChuyen = item.MaNhaVanChuyen;
                        string MaDichVuVanChuyen = item.MaDichVuVanChuyen;
                        long RequestIdSave = 0;
                        if (item.RequestIdSave != null)
                            RequestIdSave = Convert.ToInt64(item.RequestIdSave);
                        int StepNoU = 0;
                        if (item.StepNo != null)
                            StepNoU = Convert.ToInt32(item.StepNo);
                        long RequestIdParent = 0;
                        if (item.RequestIdParent != null)
                            RequestIdParent = Convert.ToInt64(item.RequestIdParent);
                        int ParentId = Convert.ToInt32(item.ParentId);
                        int QuantityItem = 0;
                        if (item.QuantityItem != null)
                            QuantityItem = Convert.ToInt32(item.QuantityItem);

                        double l__CuocPhiMin__Doub = 0;
                        l__CuocPhiMin__Doub = double.TryParse(l__CuocPhiMin__Str, out l__CuocPhiMin__Doub) ? l__CuocPhiMin__Doub : 0;

                        #region "Lên thực ràng lại"
                        string CheckNhan = item.CheckNhan;
                        string CheckGui = item.CheckGui;
                        if (CheckGui == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan",UserManager.CurrentUser.OrganizationHierachyCode),
                                new SqlParameter("@DiaChi",DiaChiGui),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhGui),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenGui),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenGui),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhGui),
                                new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                                });
                        }
                        if (CheckNhan == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan",MaPhongBanNhan),
                                new SqlParameter("@DiaChi",DiaChiNhan),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhNhan),
                                new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                                });
                        }
                        #endregion
                        #endregion

                        #region #Bill Lưu
                        if (RequestIdSave > 0)
                        {
                            #region "Thao tác màn hình"
                            Request request_Save = db.Requests.FirstOrDefault(x => x.Id == RequestIdSave);
                            if (request_Save != null)
                            {
                                request_Save.Status = Key.Status.Available;
                                db.SaveChanges();
                                myRequest.Add(request_Save);
                                myCollection.Add(request_Save.Id.ToString());
                            }
                            RequestDetail rs = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestIdSave);
                            if (rs != null)
                            {
                                rs.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                                rs.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                                if (MaPhongBanGui != null)
                                {
                                    rs.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                                }
                                else
                                {
                                    rs.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                                }
                                rs.EmpCode = SoDienThoaiNguoiGui;
                                rs.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                                rs.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                                rs.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                                rs.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                                rs.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                                rs.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                                rs.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                                if (MaNhaVanChuyen == "NT")
                                {
                                    rs.ProductCode = "FC" + item.RequestId;         //Mã số chứng từ hàng hóa
                                }
                                else if (MaNhaVanChuyen == "Kerry")
                                {
                                    rs.ProductCode = "CK" + item.RequestId;         //Mã số chứng từ hàng hóa
                                }
                                else if (MaNhaVanChuyen == "VNC")
                                {
                                    //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                    rs.ProductCode = "VC" + item.RequestId;         //Mã số chứng từ hàng hóa
                                    //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                }

                                rs.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                                rs.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                                rs.Property10 = TrongLuong;                     //Cân nặng
                                rs.Property12 = TrongLuongFRT;
                                rs.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                                rs.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                                rs.Note = GhiChu;                               //Ghi chú

                                rs.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                                rs.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                                rs.Status = Key.Status.Available;
                                //▼ Add - TrungNC3 - 08/11/2017 - Thêm  xác nhận khi tạo bill hỏa tốc
                                if (form["PassApproved"] != null)
                                {
                                    rs.Approved = form["PassApproved"].ToString() == "1" ? true : false;
                                }
                                //▲ Add - TrungNC3 - 08/11/2017 - Thêm  xác nhận khi tạo bill hỏa tốc
                                if (QuantityItem > 0)
                                    rs.Quantity3 = QuantityItem;
                                if (ParentId > 0)
                                    rs.Quantity4 = ParentId;
                                if (StepNoU > 0)
                                    rs.Quantity5 = StepNoU;
                                if (RequestIdParent > 0)
                                    rs.Quantity6 = Convert.ToInt32(RequestIdParent);

                                if (l__CuocPhiMin__Doub > 0)
                                {
                                    rs.Money3 = l__CuocPhiMin__Doub;
                                }

                                db.SaveChanges();
                            }
                            #endregion "Thao tác màn hình"

                            #region "Set bill lưu"
                            if (StepNoU > 0 && RequestIdParent > 0)
                            {
                                //▼ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                TypeIdParent = ParentId;
                                p__RequestIdParent = RequestIdParent;
                                //▲ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                RequestDetail rqd = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestIdParent);
                                if (rqd != null)
                                {
                                    //▼ Add - TrungNC3 - 01/12/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                                    if (ParentId == 163)
                                    {
                                        rqd.Property10 = request_Save.Id.ToString();
                                    }
                                    else if (ParentId == 23)
                                    {
                                        rqd.Property11 = request_Save.Id.ToString();
                                    }
                                    else if (ParentId == 45)
                                    {
                                        rqd.Property11 = request_Save.Id.ToString();
                                    }
                                    //▲ Add - TrungNC3 - 01/12/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển                                   
                                }

                                Conversation cvs = new Conversation();
                                cvs.RequestId = Convert.ToInt64(RequestIdParent);
                                cvs.Message = "Hệ thống đã auto sinh ra số calllog bill vận chuyển: <a href='/Requests/Details/" + request_Save.Id.ToString() + "' target='_blank'>" + request_Save.Id.ToString() + "</a>";
                                cvs.Sender = "-1";
                                cvs.CreateBy = "-1";
                                cvs.Status = Key.Status.Available;
                                cvs.StepNo = StepNoU;
                                cvs.TimeCreate = DateTime.Now;
                                cvs.Type = Key.Conversation.Comment;
                                db.Conversations.Add(cvs);

                                var converstationBill = new Conversation();
                                converstationBill.RequestId = request_Save.Id;
                                converstationBill.Message = "Bill vận chuyển được sinh ra từ yêu cầu: <a href='/Requests/Details/" + RequestIdParent.ToString() + "' target='_blank'>" + RequestIdParent.ToString() + "</a>";
                                converstationBill.Sender = "-1";
                                converstationBill.CreateBy = "-1";
                                converstationBill.Status = Key.Status.Available;
                                converstationBill.StepNo = 1;
                                converstationBill.TimeCreate = DateTime.Now;
                                converstationBill.Type = Key.Conversation.Comment;
                                db.Conversations.Add(converstationBill);
                            }
                            #endregion

                            db.SaveChanges();

                            #region Tích hợp nhà vận chuyển
                            DTO_Kerry_Response responseKerryDTO = new DTO_Kerry_Response();
                            #region Đặt biến cho dữ liệu lấy lên từ màn hình - START

                            //  1. Mã số chứng từ vận chuyển
                            string MaSoChungTuVanChuyen = "";
                            if (MaNhaVanChuyen == "NT")
                            {
                                MaSoChungTuVanChuyen = "FC" + request_Save.Id.ToString();
                            }
                            else if (MaNhaVanChuyen == "Kerry")
                            {
                                MaSoChungTuVanChuyen = "CK" + request_Save.Id.ToString();
                            }
                            else if (MaNhaVanChuyen == "VNC")
                            {
                                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                MaSoChungTuVanChuyen = "VC" + request_Save.Id.ToString();
                                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            }
                            ////else if (item.TransportersCode == "Viettel")
                            ////{
                            ////    MaSoChungTuVanChuyen = "CV" + request_Save.Id.ToString();
                            ////}

                            if (item.typeHHCode == 1)
                            {
                                MaLoaiHangHoa = "HH";
                            }
                            else if (item.typeHHCode == 2)
                            {
                                MaLoaiHangHoa = "TH";

                            }
                            string MaHinhThucThanhToanKerry = "";
                            if (MaHinhThucThanhToan == "1")
                            {
                                MaHinhThucThanhToanKerry = "NG";
                            }
                            else if (MaHinhThucThanhToan == "2")
                            {
                                MaHinhThucThanhToanKerry = "NN";
                            }

                            #endregion

                            #region ----Nhất Tín----
                            if (MaNhaVanChuyen == "NT")
                            {
                                #region ---Điền thông tin Shop---
                                //  Thông tin Shop Xuất

                                mAddressBook l_mAddressBook_sender = new mAddressBook();
                                l_mAddressBook_sender.addressCode = MaPhongBanGui;                 //  Mã shop
                                l_mAddressBook_sender.addressName = MaPhongBanGui;              //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_sender.fullAddress = DiaChiGui;                     //  Địa Chỉ đầy đủ (Có thể Null)
                                l_mAddressBook_sender.provinceAreaCode = MaTinhThanhGui;           //  Mã Thành Phố / Tỉnh (Có thể Null)
                                l_mAddressBook_sender.districtAreaCode = MaQuanHuyenGui;            //  Mã Quận / Huyện (Có thể Null)
                                l_mAddressBook_sender.contactPhone = SoDienThoaiNguoiGui;                           //  Số ĐT Liên Hệ (Có thể Null)
                                l_mAddressBook_sender.contactName = "";                            //  Tên Liên Hệ (Có thể Null)

                                //  Thông tin Shop Nhận
                                mAddressBook l_mAddressBook_receiver = new mAddressBook();
                                //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_receiver.addressCode = MaPhongBanNhan;               //  Mã shop
                                l_mAddressBook_receiver.addressName = MaPhongBanNhan;           //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_receiver.fullAddress = DiaChiNhan;                   //  Địa Chỉ đầy đủ (Có thể Null)
                                l_mAddressBook_receiver.provinceAreaCode = MaTinhThanhNhan;         //  Mã Thành Phố / Tỉnh (Có thể Null)
                                l_mAddressBook_receiver.districtAreaCode = MaQuanHuyenNhan;         //  Mã Quận / Huyện (Có thể Null)
                                l_mAddressBook_receiver.contactPhone = SoDienThoaiNguoiNhan;                          //  Số ĐT Liên Hệ (Có thể Null)
                                l_mAddressBook_receiver.contactName = HoTenNguoiNhan;                           //  Tên Liên Hệ (Có thể Null)
                                #endregion

                                mResult l_mResult = serviceNhatTin.updateDoInfoFullNote(
                                          "fptshop-calllog"                                         //  username        -   Tài Khoản của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                        , "gxNmsvD2rUNkq7Ds"                                        //  password        -   Mật Khẩu của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                        , MaSoChungTuVanChuyen                                      //  orderNumber     -   Chuỗi Số DO (Delivery Order) của FPT Shop
                                        , MaDichVuVanChuyen                                         //  serviceCode     -   Mã dịch vụ của Nhất Tín ( 10 = CPN | 11 = Hỏa Tốc | 20 = đường bộ | 21 = 48 h)
                                        , "N"                                                       //  isWoodPack      -   "Y" | "N" = Đóng Kiện Gỗ hay không
                                        , Convert.ToInt16(SoKien)                                   //  noPack          -   Số Kiện
                                        , Convert.ToDouble(TrongLuongNVC)                                                //  PackageWeight   -   Khối Lượng (theo đơn vị kg làm tròn lẻ đến 2 chữ số phần thập phân)    (Kg)
                                        , 0                                                         //  COD             -   Số Tiền Thu Hộ (theo đơn vị đồng)   
                                        , NoiDungHangHoa                                                    //  Description     -   Nội dung hàng (có đính kèm dãy số hóa đơn)
                                        , ""                                                        //  dimension       -   Kích thước (theo cm, định dạng dàixrộngxcao)    
                                        , "N"                                                       //  isCount         -   "Y" | "N" = Kiểm Đếm hay không  
                                        , l_mAddressBook_sender                                     //  sender          -   Đối Tượng Thông Tin Địa Chỉ Gửi (địa chỉ của FPT Shop)  
                                        , l_mAddressBook_receiver                                   //  receiver        -   Đối Tượng Thông Tin Địa Chỉ Trả Hàng
                                        , Convert.ToInt32(MaHinhThucThanhToan)                      //                  -   Hình thức thanh toán
                                        , GhiChu                                                    //  Note            -   Ghi chú đẩy riêng cho Nhất Tín
                                    );
                                switch (l_mResult.errorCode)
                                {
                                    case 0:
                                        {
                                            int k = InsertThongTinVanChuyenVeNhatTin(1, 1, MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), l_mResult.errorCode, l_mResult.errorDes, Convert.ToDouble(TrongLuongNVC));
                                        }
                                        break;
                                    case 1:
                                        {
                                            ResultFromNVC = "Không có số vận đơn để gửi sang Nhất Tín";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + " Không có số vận đơn để gửi sang Nhất Tín!");
                                        }
                                        break;
                                    case 2:
                                        {
                                            ResultFromNVC = "Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa.";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + " Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa!");
                                        }
                                        break;
                                    case 3:
                                        {
                                            ResultFromNVC = "Số vận đơn đã được Nhất Tín xác nhận hủy.";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + " Số vận đơn đã được Nhất Tín xác nhận hủy!");
                                        }
                                        break;
                                    case 4:
                                        {
                                            ResultFromNVC = "Sai tài khoản xác thực.";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + " Sai tài khoản xác thực!");
                                        }
                                        break;
                                    case -1:
                                        {
                                            ResultFromNVC = "Thông tin gửi nhà vận chuyển bị lỗi!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + " Thông tin gửi nhà vận chuyển bị lỗi!");
                                        }
                                        break;
                                    default: //  Các trường hợp còn lại
                                        {
                                            ResultFromNVC = " Lỗi hệ thống Nhất Tín hoặc do đường truyền. Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín.\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support.";
                                            Logger.WriteLogError("RequestController Create(Request)", request_Save.Id.ToString() + " Lỗi hệ thống Nhất Tín hoặc do đường truyền. Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín.\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support.");
                                        }
                                        break;
                                }
                            }
                            #endregion

                            #region ----Kerry----
                            else if (MaNhaVanChuyen == "Kerry")
                            {
                                DTO_Kerry_DOInfo g_KerryDOInfo = new DTO_Kerry_DOInfo();
                                DTO_Kerry_Address kShopXuat = new DTO_Kerry_Address();
                                DTO_Kerry_Address kShopNhan = new DTO_Kerry_Address();
                                List<DTO_Kerry_OrderItem> kOrderItem = new List<DTO_Kerry_OrderItem>();
                                //  Lấy thông tin Shop Nhận
                                DataTable dtShopForKerryNhan = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhNhan, MaQuanHuyenNhan);

                                //  Lấy thông tin Shop Xuất
                                DataTable dtShopForKerryXuat = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhGui, MaQuanHuyenGui);

                                //  Kiểm tra Thông tin Shop?         
                                if (dtShopForKerryXuat == null || dtShopForKerryXuat.Rows.Count <= 0
                                    || dtShopForKerryNhan == null || dtShopForKerryNhan.Rows.Count <= 0)
                                {
                                    ResultFromNVC = "Thông tin địa gửi nhà vận chuyển bị lỗi!";
                                    Logger.WriteLogError("RequestController Create(Request)", request_Save.Id.ToString() + " Thông tin địa gửi nhà vận chuyển bị lỗi!");
                                }
                                else
                                {
                                    kShopXuat = new DTO_Kerry_Address(DiaChiGui,
                                                                      dtShopForKerryXuat.Rows[0]["KerryProvinceCode"].ToString(),
                                                                      dtShopForKerryXuat.Rows[0]["KerryDistrictCode"].ToString(),
                                                                      "",
                                                                      SoDienThoaiNguoiGui,
                                                                      MaPhongBanGuiKerry + " - " + TenPhongBanShopGui);

                                    kShopNhan = new DTO_Kerry_Address(DiaChiNhan,
                                                                      dtShopForKerryNhan.Rows[0]["KerryProvinceCode"].ToString(),
                                                                      dtShopForKerryNhan.Rows[0]["KerryDistrictCode"].ToString(),
                                                                      "",
                                                                      SoDienThoaiNguoiNhan,
                                                                      MaPhongBanNhanKerry + " - " + TenPhongBanShopNhan + " - " + HoTenNguoiNhan); //+ "-" + HoTenNguoiNhan);

                                    kOrderItem.Add(new DTO_Kerry_OrderItem("",
                                                                         "0",
                                                                         "0x0x0",
                                                                         "0",
                                                                         "COD",
                                                                         "0",
                                                                         "N"));

                                    //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                    g_KerryDOInfo = new DTO_Kerry_DOInfo(g_KerryWebService_Token,
                                                                         MaSoChungTuVanChuyen,
                                                                         MaSoChungTuVanChuyen,
                                                                         SoKien,
                                                                        TrongLuongNVC,
                                                                         "N",
                                                                         "0",
                                                                         MaDichVuVanChuyen,
                                                                         NoiDungHangHoa,
                                                                         MaHinhThucThanhToanKerry,
                                                                         kShopNhan,
                                                                         kShopXuat,
                                                                         kOrderItem
                                                                       );
                                    //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                    var json = new JavaScriptSerializer().Serialize(g_KerryDOInfo);

                                    //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                    string sKerryResponse = g_KerryWebService.WS001PostNewOrderInfo(json.ToString());
                                    //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                    //▼	Edit - VietMXH - 20/04/2019 - Bắt thêm case Kerry==================================================
                                    int intKerryInsertOrderErrorCode = 0;   //  NOTE: 0:Thành công ; -1:Thất bại
                                    string strKerryInsertOrderResult;

                                    if (string.IsNullOrEmpty(sKerryResponse))
                                    {
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + " Lỗi không phản hồi từ web service Kerry!");
                                    }
                                    else
                                    {
                                        JavaScriptSerializer responseJson = new JavaScriptSerializer();
                                        responseKerryDTO = responseJson.Deserialize<DTO_Kerry_Response>(sKerryResponse);

                                        //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                        switch (responseKerryDTO.status)
                                        {
                                            case "success":
                                                #region MyRegion
                                                intKerryInsertOrderErrorCode = 0;
                                                strKerryInsertOrderResult = "Gửi DO thành công!";
                                                InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                    Transporters.Kerry.Code,
                                                    Transporters.Kerry.KeyCertify,
                                                    Transporters.Kerry.KeyName,
                                                    MaSoChungTuVanChuyen,
                                                    MaDichVuVanChuyen,
                                                    "N",
                                                    SoKien.ToString(),
                                                    "",
                                                    intKerryInsertOrderErrorCode,
                                                    strKerryInsertOrderResult,
                                                    Convert.ToDouble(TrongLuong)     // Ký
                                                    );
                                                #endregion
                                                break;
                                            case "update":
                                                #region MyRegion
                                                intKerryInsertOrderErrorCode = 0;
                                                strKerryInsertOrderResult = "Gửi lại DO thành công!";
                                                InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                    Transporters.Kerry.Code,
                                                    Transporters.Kerry.KeyCertify,
                                                    Transporters.Kerry.KeyName,
                                                    MaSoChungTuVanChuyen,
                                                    MaDichVuVanChuyen,
                                                    "N",
                                                    SoKien.ToString(),
                                                    "",
                                                    intKerryInsertOrderErrorCode,
                                                    strKerryInsertOrderResult,
                                                    Convert.ToDouble(TrongLuong)     // Ký
                                                    );
                                                #endregion
                                                break;
                                            case "error":
                                                #region MyRegion
                                                string l_error = " Gửi vận đơn cho nhà vận chuyển Kerry thất bại! " + responseKerryDTO.message;
                                                ResultFromNVC = l_error;
                                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + l_error);
                                                #endregion
                                                break;
                                            default:
                                                #region MyRegion
                                                ResultFromNVC = " Gửi vận đơn cho nhà vận chuyển Kerry thất bại!";
                                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + " Gửi vận đơn cho nhà vận chuyển Kerry thất bại!");
                                                #endregion
                                                break;
                                        }
                                        //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                    }
                                    //▲	Edit - VietMXH - 20/04/2019 - Bắt thêm case Kerry==================================================

                                }
                            }
                            #endregion

                            #region ---Vinacapital Post---
                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            else if (MaNhaVanChuyen == "VNC")
                            {
                                int l__VNC__ServiceId = int.TryParse(MaDichVuVanChuyen, out l__VNC__ServiceId) ? l__VNC__ServiceId : 0;
                                int l__VNC__Weight = int.TryParse(TrongLuongNVC, out l__VNC__Weight) ? l__VNC__Weight : 0;
                                VinacapitalPost l__VinacapitalPost = new VinacapitalPost();
                                VinacapitalPost.VNCPost_Order_Add_Result l__VNCPost_Order_Add_Result = l__VinacapitalPost.Order_Add(
                                    MaSoChungTuVanChuyen, "-", 0, 1, l__VNC__ServiceId,
                                    l__VNC__Weight, 0, 0, 0, null, 1, null, null,
                                    TenTinhThanhGui, TenQuanHuyenGui, null, DiaChiGui, null, SoDienThoaiNguoiGui,
                                    TenTinhThanhNhan, TenQuanHuyenNhan, null, DiaChiNhan, HoTenNguoiNhan, SoDienThoaiNguoiNhan,
                                    null, null, null, null, null, null
                                    );
                                switch (l__VNCPost_Order_Add_Result.Result)
                                {
                                    case 1: // 1:Thành công
                                        {
                                            ResultFromNVC = " Gửi vận đơn cho nhà vận chuyển Vinacapital Post Thành công!";
                                            InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                null, null, null,
                                                MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), "",
                                                0, "Gửi DO thành công!", Convert.ToDouble(TrongLuong)     // Ký
                                                );
                                        }
                                        break;
                                    case 2: // 2:Thất bại
                                        {
                                            ResultFromNVC = " Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                            ResultFromNVC += "</br>Vinacapital Post: Order_Add.Message: " + l__VNCPost_Order_Add_Result.Message;
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + ResultFromNVC);
                                        }
                                        break;
                                    default: // Khác
                                        {
                                            ResultFromNVC = " Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                            ResultFromNVC += "</br>Vinacapital Post: Order_Add.Result: " + l__VNCPost_Order_Add_Result.Result.ToString();
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Save.Id.ToString() + ResultFromNVC);
                                        }
                                        break;
                                }
                            }
                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            #endregion

                            #endregion

                            #region Trả về
                            //Send mail
                            XMail.Send(request_Save.Id, "[CallLog] - " + request_Save.Title, XMail.ProcessType.Create);
                            #endregion

                            #region "Tạo Bill Hỏa Tốc"
                            string MaPhongBanShopGui = string.Empty;
                            if (MaPhongBanGui != "")
                            {
                                MaPhongBanShopGui = MaPhongBanGui;               //Mã phòng ban gửi
                            }
                            else
                            {
                                MaPhongBanShopGui = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                            }
                            if (item.IdService == 1)
                            {
                                SqlParameter[] param = new SqlParameter[]
                                {
                                    new SqlParameter("@Sender",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@SoVanDon",MaSoChungTuVanChuyen),
                                    new SqlParameter("@LyDoGui",GhiChu),
                                    ////new SqlParameter("@ToShop",MaPhongBanShopGui),
                                    ////new SqlParameter("@ToShopName",TenPhongBanShopGui),
                                    ////new SqlParameter("@FromShop",MaPhongBanNhan),
                                    ////new SqlParameter("@FromShopName",TenPhongBanShopNhan),

                                    //▼ Edit - NgoanHT - 19/12/2017 - Sửa lại shop nhận và gửi
                                    new SqlParameter("@ToShop",MaPhongBanNhan),
                                    new SqlParameter("@ToShopName",TenPhongBanShopNhan),
                                    new SqlParameter("@FromShop",MaPhongBanShopGui),
                                    new SqlParameter("@FromShopName",TenPhongBanShopGui),
                                    //▲ Edit - NgoanHT - 19/12/2017 - Sửa lại shop nhận và gửi

                                    new SqlParameter("@TenHangHoa",NoiDungHangHoa),
                                    new SqlParameter("@TrongLuong",TrongLuong),
                                    new SqlParameter("@CuocVanChuyen",0),
                                    new SqlParameter("@System",1),
                                    new SqlParameter("@SoGiaoDich",request_Save.Id)

                                };
                                DataTable tb = sql.ExecuteCommand("Request_InsertBillHoaToc", CommandType.StoredProcedure, param);
                                DataRow row = tb.Rows[0];
                                if (row["RequestId"].ToString() != "0")
                                {
                                    RequestHT.Add(row["RequestId"].ToString());
                                }
                            }
                            #endregion "Tạo Bill Hỏa Tốc"
                        }
                        #endregion #Bill Lưu

                        #region #Bill Tạo mới
                        else
                        {
                            #region "Tạo header calllog"
                            Request request_Create = new Request();

                            if (cc != null && cc != "")
                                stringCc = cc.Split(',');

                            if (sender != null && sender != "")
                            {
                                request_Create.Sender = sender;
                                var empSender = emlDal.Get(request_Create.Sender);
                                if (empSender != null)
                                    shopUserSent = shopDal.Get(empSender.WarehouseCode);
                            }
                            else
                            {
                                request_Create.Sender = UserManager.CurrentUser.InsideCode;
                            }

                            request_Create.StepNo = 1;
                            request_Create.Title = Convert.ToString(form["TitleRequest"]);
                            request_Create.TypeId = 154;
                            request_Create.StepStatus = Key.StatusRequest.Waitting;
                            request_Create.TimeCreate = DateTime.Now;
                            request_Create.TimeAppear = DateTime.Now;
                            request_Create.isHighlight = false;
                            request_Create.isParent = false;
                            request_Create.Status = Key.Status.Available;
                            request_Create.CreateBy = UserManager.CurrentUser.InsideCode;
                            request_Create.TimeLastUpdate = DateTime.Now;
                            request_Create.UpdateBy = UserManager.CurrentUser.InsideCode;
                            request_Create.Assigner = "-2";
                            if (shopUserSent != null)
                            {
                                request_Create.FromShop = shopUserSent.WarehouseCode;
                            }
                            else
                            {
                                request_Create.FromShop = UserManager.CurrentUser.WarehouseCode;
                            }
                            request_Create.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;
                            request_Create.FromForm = "CallLog";   //▶	Edit - VietMXH - 13/05/2019 - Nguồn tạo CallLog==================================================

                            db.Requests.Add(request_Create);
                            db.SaveChanges();
                            myRequest.Add(request_Create);
                            myCollection.Add(request_Create.Id.ToString());
                            #endregion

                            #region "Tạo chi tiết CallLog"
                            RequestDetail rs_Create = new RequestDetail();
                            rs_Create.RequestId = request_Create.Id;

                            rs_Create.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                            rs_Create.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                            if (MaPhongBanGui != null)
                            {
                                rs_Create.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                            }
                            else
                            {
                                rs_Create.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                            }
                            rs_Create.EmpCode = SoDienThoaiNguoiGui;
                            rs_Create.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                            rs_Create.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                            rs_Create.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                            rs_Create.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                            rs_Create.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                            rs_Create.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                            rs_Create.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                            if (MaNhaVanChuyen == "NT")
                            {
                                rs_Create.ProductCode = "FC" + request_Create.Id.ToString();         //Mã số chứng từ hàng hóa
                            }
                            else if (MaNhaVanChuyen == "Kerry")
                            {
                                rs_Create.ProductCode = "CK" + request_Create.Id.ToString();         //Mã số chứng từ hàng hóa
                            }
                            else if (MaNhaVanChuyen == "VNC")
                            {
                                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                rs_Create.ProductCode = "VC" + request_Create.Id.ToString();         //Mã số chứng từ hàng hóa
                                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            }

                            rs_Create.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                            rs_Create.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                            rs_Create.Property10 = TrongLuong;                     //Cân nặng
                            rs_Create.Property12 = TrongLuongFRT;
                            rs_Create.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                            rs_Create.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                            rs_Create.Note = GhiChu;                               //Ghi chú

                            rs_Create.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                            rs_Create.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                            rs_Create.Status = Key.Status.Available;
                            //▼ Add - TrungNC3 - 08/11/2017 - Thêm  xác nhận khi tạo bill hỏa tốc
                            if (form["PassApproved"] != null)
                            {
                                rs_Create.Approved = form["PassApproved"].ToString() == "1" ? true : false;
                            }
                            //▲ Add - TrungNC3 - 08/11/2017 - Thêm  xác nhận khi tạo bill hỏa tốc
                            if (QuantityItem > 0)
                                rs_Create.Quantity3 = QuantityItem;
                            if (ParentId > 0)
                                rs_Create.Quantity4 = ParentId;
                            if (StepNoU > 0)
                                rs_Create.Quantity5 = StepNoU;
                            if (RequestIdParent > 0)
                                rs_Create.Quantity6 = Convert.ToInt32(RequestIdParent);

                            if (l__CuocPhiMin__Doub > 0)
                            {
                                rs_Create.Money3 = l__CuocPhiMin__Doub;
                            }

                            db.RequestDetails.Add(rs_Create);
                            #endregion

                            #region Nội dung yêu cầu của người tạo
                            if (message.Length != 0)
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = request_Create.Id;
                                converstation.Message = message;
                                converstation.Sender = UserManager.CurrentUser.InsideCode;
                                converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 0;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Create;
                                db.Conversations.Add(converstation);
                            }
                            #endregion

                            #region Cc
                            foreach (var item1 in stringCc)
                            {
                                var AssignerCc = new Assigner();
                                AssignerCc.RequestId = request_Create.Id;
                                AssignerCc.EmployeeCode = item1.ToString();
                                AssignerCc.StepNo = 1;
                                AssignerCc.Type = Key.TypeAssigner.Cc;
                                AssignerCc.TimeCreate = DateTime.Now;
                                AssignerCc.Status = Key.StatusRequest.Waitting;
                                db.Assigners.Add(AssignerCc);
                            }
                            #endregion

                            #region "Set bill lưu"
                            if (StepNoU > 0 && RequestIdParent > 0)
                            {
                                //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                TypeIdParent = ParentId;
                                //▼ Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                p__RequestIdParent = RequestIdParent;
                                //▲ Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                RequestDetail rqd = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestIdParent);
                                if (rqd != null)
                                {

                                    if (ParentId == 163)
                                    {
                                        rqd.Property10 = request_Create.Id.ToString();
                                    }
                                    else if (ParentId == 23)
                                    {
                                        rqd.Property11 = request_Create.Id.ToString();
                                    }
                                    else if (ParentId == 45)
                                    {
                                        rqd.Property11 = request_Create.Id.ToString();
                                    }
                                    //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                    else if (ParentId == 214)
                                    {
                                        Request requestParent = db.Requests.FirstOrDefault(x => x.Id == RequestIdParent);
                                        var requestDetails = (from a in db.RequestDetails
                                                              where a.RequestId == RequestIdParent
                                                              select a).ToList();
                                        if (requestParent != null)
                                        {
                                            #region Update RequestDetails
                                            foreach (var detail in requestDetails)
                                            {
                                                if (requestParent.StepNo == 1)
                                                {
                                                    detail.Property12 = request_Create.Id.ToString();
                                                }
                                                else if (new List<int> { 2, 3 }.Contains(requestParent.StepNo))
                                                {
                                                    detail.Property13 = request_Create.Id.ToString();
                                                }
                                            }
                                            #endregion
                                            //▼ Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            //#region Update or Insert RequestStep

                                            //RequestStep step = new RequestStep();
                                            //RequestStep oldStep = new RequestStep();
                                            //using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                            //{
                                            //    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                            //}))
                                            //{
                                            //    step = db.RequestSteps.FirstOrDefault(
                                            //                   x => x.RequestId == requestParent.Id
                                            //                   && x.Status == Key.Status.Available
                                            //                   && x.StepNo == requestParent.StepNo);
                                            //}
                                            //if (step != null)
                                            //{
                                            //    //▼ Edit - TuanNA89 - 17/09/2019 - Add thêm RequestStep bước 3 nếu Step calllog là 2
                                            //    step.TimeEnd = DateTime.Now;

                                            //    if (step.StepNo == 2)
                                            //    {
                                            //        oldStep = step;

                                            //        step = new RequestStep();
                                            //        step.RequestId = requestParent.Id;
                                            //        step.TimeCreate = DateTime.Now;

                                            //        step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;

                                            //        step.TimeEnd = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;
                                            //        step.Assigner = requestParent.Assigner;
                                            //        step.StepNo = 3;
                                            //        step.Status = Key.Status.Available;

                                            //        db.RequestSteps.Add(step);

                                            //    }
                                            //    //▲ Edit - TuanNA89 - 17/09/2019 - Add thêm RequestStep bước 3 nếu Step calllog là 2
                                            //}
                                            //else
                                            //{
                                            //    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                            //    {
                                            //        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                            //    }))
                                            //    {
                                            //        oldStep = (from s in db.RequestSteps
                                            //                   where s.RequestId == requestParent.Id
                                            //                   && s.StepNo == requestParent.StepNo - 1
                                            //                   && s.Status == Key.Status.Available
                                            //                   select s).FirstOrDefault();
                                            //    }

                                            //    step = new RequestStep();
                                            //    step.RequestId = requestParent.Id;
                                            //    step.TimeCreate = DateTime.Now;

                                            //    step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;

                                            //    step.TimeEnd = DateTime.Now;
                                            //    step.Assigner = requestParent.Assigner;
                                            //    step.StepNo = requestParent.StepNo;
                                            //    step.Status = Key.Status.Available;

                                            //    db.RequestSteps.Add(step);
                                            //}
                                            //db.SaveChanges();
                                            //#endregion

                                            //#region Xử lý Calllog
                                            //if (new List<int> { 2, 3 }.Contains(requestParent.StepNo))
                                            //{
                                            //    requestParent.StepNo = 4;
                                            //}
                                            //else
                                            //{
                                            //    requestParent.StepNo += 1;
                                            //}
                                            //db.SaveChanges();
                                            //#endregion

                                            //#region Gan nguoi xu lý mới
                                            //requestParent.Status = Key.StatusRequest.Processing;
                                            //requestParent.StepStatus = Key.StatusRequest.Waitting;
                                            //DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                            //    {
                                            //        new SqlParameter("@RequestId",requestParent.Id),
                                            //        new SqlParameter("@StepNo",requestParent.StepNo)
                                            //    });
                                            //if (table != null && table.Rows.Count > 0)
                                            //    requestParent.Assigner = table.Rows[0]["Assigner"].ToString();
                                            //else
                                            //    requestParent.Assigner = string.Empty;
                                            //db.SaveChanges();
                                            //#endregion

                                            //requestParent.TimeLastUpdate = DateTime.Now;
                                            //requestParent.UpdateBy = UserManager.CurrentUser.InsideCode;
                                            //▲ Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            db.SaveChanges();
                                        }
                                    }
                                    //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                }
                                #region "Set session"
                                //▼ Edit - TrungNC3 - 2017.09.01 - Thêm lưu Mã request gốc
                                if (Session[Key.Session.BillInfo] != null)
                                {
                                    DataTable billInfo = Session[Key.Session.BillInfo] as DataTable;
                                    DataRow dr = billInfo.Rows[0];

                                    Conversation cvs = new Conversation();
                                    cvs.RequestId = RequestIdParent;
                                    cvs.Message = "Hệ thống đã auto sinh ra số calllog bill vận chuyển: <a href='/Requests/Details/" + request_Create.Id.ToString() + "' target='_blank'>" + request_Create.Id.ToString() + "</a>";
                                    cvs.Sender = "-1";
                                    cvs.CreateBy = "-1";
                                    cvs.Status = Key.Status.Available;
                                    cvs.StepNo = StepNoU;
                                    cvs.TimeCreate = DateTime.Now;
                                    cvs.Type = Key.Conversation.Comment;
                                    db.Conversations.Add(cvs);

                                    var converstationBill = new Conversation();
                                    converstationBill.RequestId = request_Create.Id;
                                    converstationBill.Message = "Bill vận chuyển được sinh ra từ yêu cầu " + billInfo.Rows[0]["Description"].ToString() + ":  <a href='/Requests/Details/" + RequestIdParent.ToString() + "' target='_blank'>" + RequestIdParent.ToString() + "</a>";
                                    converstationBill.Sender = "-1";
                                    converstationBill.CreateBy = "-1";
                                    converstationBill.Status = Key.Status.Available;
                                    converstationBill.StepNo = 1;
                                    converstationBill.TimeCreate = DateTime.Now;
                                    converstationBill.Type = Key.Conversation.Comment;
                                    db.Conversations.Add(converstationBill);
                                }
                                #endregion
                            }
                            //▲ Add - TrungNC3 - 01/12/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                            #endregion

                            db.SaveChanges();

                            #region Tích hợp nhà vận chuyển
                            DTO_Kerry_Response responseKerryDTO = new DTO_Kerry_Response();
                            #region Đặt biến cho dữ liệu lấy lên từ màn hình - START

                            //  ===1. Mã số chứng từ vận chuyển===
                            string MaSoChungTuVanChuyen = "";
                            if (MaNhaVanChuyen == "NT")
                            {
                                MaSoChungTuVanChuyen = "FC" + request_Create.Id.ToString();
                            }
                            else if (MaNhaVanChuyen == "Kerry")
                            {
                                MaSoChungTuVanChuyen = "CK" + request_Create.Id.ToString();
                            }
                            else if (MaNhaVanChuyen == "VNC")
                            {
                                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                MaSoChungTuVanChuyen = "VC" + request_Create.Id.ToString();
                                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            }
                            ////////else if (item.TransportersCode == "Viettel")
                            ////////{
                            ////////    MaSoChungTuVanChuyen = "CV" + request_Create.Id.ToString();
                            ////////}

                            if (item.typeHHCode == 1)
                            {
                                MaLoaiHangHoa = "HH";
                            }
                            else if (item.typeHHCode == 2)
                            {
                                MaLoaiHangHoa = "TH";

                            }
                            string MaHinhThucThanhToanKerry = "";
                            if (MaHinhThucThanhToan == "1")
                            {
                                MaHinhThucThanhToanKerry = "NG";
                            }
                            else if (MaHinhThucThanhToan == "2")
                            {
                                MaHinhThucThanhToanKerry = "NN";
                            }

                            #endregion

                            #region ----Nhất Tín----
                            if (MaNhaVanChuyen == "NT")
                            {
                                #region ---Điền thông tin Shop---
                                //  Thông tin Shop Xuất

                                mAddressBook l_mAddressBook_sender = new mAddressBook();
                                l_mAddressBook_sender.addressCode = MaPhongBanGui;                 //  Mã shop
                                l_mAddressBook_sender.addressName = MaPhongBanGui;              //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_sender.fullAddress = DiaChiGui;                     //  Địa Chỉ đầy đủ (Có thể Null)
                                l_mAddressBook_sender.provinceAreaCode = MaTinhThanhGui;           //  Mã Thành Phố / Tỉnh (Có thể Null)
                                l_mAddressBook_sender.districtAreaCode = MaQuanHuyenGui;            //  Mã Quận / Huyện (Có thể Null)
                                l_mAddressBook_sender.contactPhone = SoDienThoaiNguoiGui;                           //  Số ĐT Liên Hệ (Có thể Null)
                                l_mAddressBook_sender.contactName = "";                            //  Tên Liên Hệ (Có thể Null)

                                //  Thông tin Shop Nhận
                                mAddressBook l_mAddressBook_receiver = new mAddressBook();
                                //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_receiver.addressCode = MaPhongBanNhan;               //  Mã shop
                                l_mAddressBook_receiver.addressName = MaPhongBanNhan;           //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_receiver.fullAddress = DiaChiNhan;                   //  Địa Chỉ đầy đủ (Có thể Null)
                                l_mAddressBook_receiver.provinceAreaCode = MaTinhThanhNhan;         //  Mã Thành Phố / Tỉnh (Có thể Null)
                                l_mAddressBook_receiver.districtAreaCode = MaQuanHuyenNhan;         //  Mã Quận / Huyện (Có thể Null)
                                l_mAddressBook_receiver.contactPhone = SoDienThoaiNguoiNhan;                          //  Số ĐT Liên Hệ (Có thể Null)
                                l_mAddressBook_receiver.contactName = HoTenNguoiNhan;                           //  Tên Liên Hệ (Có thể Null)
                                #endregion

                                mResult l_mResult = serviceNhatTin.updateDoInfoFullNote(
                                          "fptshop-calllog"                                         //  username        -   Tài Khoản của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                        , "gxNmsvD2rUNkq7Ds"                                        //  password        -   Mật Khẩu của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                        , MaSoChungTuVanChuyen                                      //  orderNumber     -   Chuỗi Số DO (Delivery Order) của FPT Shop
                                        , MaDichVuVanChuyen                                         //  serviceCode     -   Mã dịch vụ của Nhất Tín ( 10 = CPN | 11 = Hỏa Tốc | 20 = đường bộ | 21 = 48 h)
                                        , "N"                                                       //  isWoodPack      -   "Y" | "N" = Đóng Kiện Gỗ hay không
                                        , Convert.ToInt16(SoKien)                                   //  noPack          -   Số Kiện
                                        , Convert.ToDouble(TrongLuongNVC)                                                //  PackageWeight   -   Khối Lượng (theo đơn vị kg làm tròn lẻ đến 2 chữ số phần thập phân)    (Kg)
                                        , 0                                                         //  COD             -   Số Tiền Thu Hộ (theo đơn vị đồng)   
                                        , NoiDungHangHoa                                                    //  Description     -   Nội dung hàng (có đính kèm dãy số hóa đơn)
                                        , ""                                                        //  dimension       -   Kích thước (theo cm, định dạng dàixrộngxcao)    
                                        , "N"                                                       //  isCount         -   "Y" | "N" = Kiểm Đếm hay không  
                                        , l_mAddressBook_sender                                     //  sender          -   Đối Tượng Thông Tin Địa Chỉ Gửi (địa chỉ của FPT Shop)  
                                        , l_mAddressBook_receiver                                   //  receiver        -   Đối Tượng Thông Tin Địa Chỉ Trả Hàng
                                        , Convert.ToInt32(MaHinhThucThanhToan)                      //                  -   Hình thức thanh toán
                                        , GhiChu                                                    //  Note            -   Ghi chú đẩy riêng cho Nhất Tín
                                    );
                                switch (l_mResult.errorCode)
                                {
                                    case 0:
                                        {
                                            int k = InsertThongTinVanChuyenVeNhatTin(1, 1, MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), l_mResult.errorCode, l_mResult.errorDes, Convert.ToDouble(TrongLuongNVC));
                                        }
                                        break;
                                    case 1:
                                        {
                                            ResultFromNVC = "Không có số vận đơn để gửi sang Nhất Tín";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + " Không có số vận đơn để gửi sang Nhất Tín!");
                                        }
                                        break;
                                    case 2:
                                        {
                                            ResultFromNVC = "Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa.";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + " Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa!");
                                        }
                                        break;
                                    case 3:
                                        {
                                            ResultFromNVC = "Số vận đơn đã được Nhất Tín xác nhận hủy.";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + " Số vận đơn đã được Nhất Tín xác nhận hủy!");
                                        }
                                        break;
                                    case 4:
                                        {
                                            ResultFromNVC = "Sai tài khoản xác thực.";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + " Sai tài khoản xác thực!");
                                        }
                                        break;
                                    case -1:
                                        {
                                            ResultFromNVC = "Thông tin gửi nhà vận chuyển bị lỗi!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + " Thông tin gửi nhà vận chuyển bị lỗi!");
                                        }
                                        break;
                                    default: //  Các trường hợp còn lại
                                        {
                                            ResultFromNVC = " Lỗi hệ thống Nhất Tín hoặc do đường truyền. Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín.\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support.";
                                            Logger.WriteLogError("RequestController Create(Request)", request_Create.Id.ToString() + " Lỗi hệ thống Nhất Tín hoặc do đường truyền. Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín.\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support.");
                                        }
                                        break;
                                }
                            }
                            #endregion

                            #region ----Kerry----
                            else if (MaNhaVanChuyen == "Kerry")
                            {
                                DTO_Kerry_DOInfo g_KerryDOInfo = new DTO_Kerry_DOInfo();
                                DTO_Kerry_Address kShopXuat = new DTO_Kerry_Address();
                                DTO_Kerry_Address kShopNhan = new DTO_Kerry_Address();
                                List<DTO_Kerry_OrderItem> kOrderItem = new List<DTO_Kerry_OrderItem>();
                                //  Lấy thông tin Shop Nhận
                                DataTable dtShopForKerryNhan = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhNhan, MaQuanHuyenNhan);

                                //  Lấy thông tin Shop Xuất
                                DataTable dtShopForKerryXuat = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhGui, MaQuanHuyenGui);

                                //  Kiểm tra Thông tin Shop?         
                                if (dtShopForKerryXuat == null || dtShopForKerryXuat.Rows.Count <= 0
                                    || dtShopForKerryNhan == null || dtShopForKerryNhan.Rows.Count <= 0)
                                {
                                    ResultFromNVC = "Thông tin địa gửi nhà vận chuyển bị lỗi!";
                                    Logger.WriteLogError("RequestController Create(Request)", request_Create.Id.ToString() + " Thông tin địa gửi nhà vận chuyển bị lỗi!");
                                }
                                else
                                {
                                    kShopXuat = new DTO_Kerry_Address(DiaChiGui,
                                                                      dtShopForKerryXuat.Rows[0]["KerryProvinceCode"].ToString(),
                                                                      dtShopForKerryXuat.Rows[0]["KerryDistrictCode"].ToString(),
                                                                      "",
                                                                      SoDienThoaiNguoiGui,
                                                                      MaPhongBanGuiKerry + " - " + TenPhongBanShopGui);

                                    kShopNhan = new DTO_Kerry_Address(DiaChiNhan,
                                                                      dtShopForKerryNhan.Rows[0]["KerryProvinceCode"].ToString(),
                                                                      dtShopForKerryNhan.Rows[0]["KerryDistrictCode"].ToString(),
                                                                      "",
                                                                      SoDienThoaiNguoiNhan,
                                                                      MaPhongBanNhanKerry + " - " + TenPhongBanShopNhan + " - " + HoTenNguoiNhan); //+ "-" + HoTenNguoiNhan);

                                    kOrderItem.Add(new DTO_Kerry_OrderItem("",
                                                                         "0",
                                                                         "0x0x0",
                                                                         "0",
                                                                         "COD",
                                                                         "0",
                                                                         "N"));

                                    //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                    g_KerryDOInfo = new DTO_Kerry_DOInfo(g_KerryWebService_Token,
                                                                         MaSoChungTuVanChuyen,
                                                                         MaSoChungTuVanChuyen,
                                                                         SoKien,
                                                                        TrongLuongNVC,
                                                                         "N",
                                                                         "0",
                                                                         MaDichVuVanChuyen,
                                                                         NoiDungHangHoa,
                                                                         MaHinhThucThanhToanKerry,
                                                                         kShopNhan,
                                                                         kShopXuat,
                                                                         kOrderItem
                                                                       );
                                    //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                    var json = new JavaScriptSerializer().Serialize(g_KerryDOInfo);

                                    //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                    string sKerryResponse = g_KerryWebService.WS001PostNewOrderInfo(json.ToString());
                                    //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                    //▼	Edit - VietMXH - 20/04/2019 - Bắt thêm case Kerry==================================================
                                    int intKerryInsertOrderErrorCode = 0;   //  NOTE: 0:Thành công ; -1:Thất bại
                                    string strKerryInsertOrderResult;

                                    if (string.IsNullOrEmpty(sKerryResponse))
                                    {
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + " Lỗi không phản hồi từ web service Kerry!");
                                    }
                                    else
                                    {
                                        JavaScriptSerializer responseJson = new JavaScriptSerializer();
                                        responseKerryDTO = responseJson.Deserialize<DTO_Kerry_Response>(sKerryResponse);

                                        //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                        switch (responseKerryDTO.status)
                                        {
                                            case "success":
                                                #region MyRegion
                                                intKerryInsertOrderErrorCode = 0;
                                                strKerryInsertOrderResult = "Gửi DO thành công!";
                                                InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                    Transporters.Kerry.Code,
                                                    Transporters.Kerry.KeyCertify,
                                                    Transporters.Kerry.KeyName,
                                                    MaSoChungTuVanChuyen,
                                                    MaDichVuVanChuyen,
                                                    "N",
                                                    SoKien.ToString(),
                                                    "",
                                                    intKerryInsertOrderErrorCode,
                                                    strKerryInsertOrderResult,
                                                    Convert.ToDouble(TrongLuong)     // Ký
                                                    );
                                                #endregion
                                                break;
                                            case "update":
                                                #region MyRegion
                                                intKerryInsertOrderErrorCode = 0;
                                                strKerryInsertOrderResult = "Gửi lại DO thành công!";
                                                InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                    Transporters.Kerry.Code,
                                                    Transporters.Kerry.KeyCertify,
                                                    Transporters.Kerry.KeyName,
                                                    MaSoChungTuVanChuyen,
                                                    MaDichVuVanChuyen,
                                                    "N",
                                                    SoKien.ToString(),
                                                    "",
                                                    intKerryInsertOrderErrorCode,
                                                    strKerryInsertOrderResult,
                                                    Convert.ToDouble(TrongLuong)     // Ký
                                                    );
                                                #endregion
                                                break;
                                            case "error":
                                                #region MyRegion
                                                string l_error = " Gửi vận đơn cho nhà vận chuyển Kerry thất bại! " + responseKerryDTO.message;
                                                ResultFromNVC = l_error;
                                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + l_error);
                                                #endregion
                                                break;
                                            default:
                                                #region MyRegion
                                                ResultFromNVC = " Gửi vận đơn cho nhà vận chuyển Kerry thất bại!";
                                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + " Gửi vận đơn cho nhà vận chuyển Kerry thất bại!");
                                                #endregion
                                                break;
                                        }
                                        //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                    }
                                    //▲	Edit - VietMXH - 20/04/2019 - Bắt thêm case Kerry==================================================

                                }

                            }
                            #endregion

                            #region ---Vinacapital Post---
                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            else if (MaNhaVanChuyen == "VNC")
                            {
                                int l__VNC__ServiceId = int.TryParse(MaDichVuVanChuyen, out l__VNC__ServiceId) ? l__VNC__ServiceId : 0;
                                int l__VNC__Weight = int.TryParse(TrongLuongNVC, out l__VNC__Weight) ? l__VNC__Weight : 0;
                                VinacapitalPost l__VinacapitalPost = new VinacapitalPost();
                                VinacapitalPost.VNCPost_Order_Add_Result l__VNCPost_Order_Add_Result = l__VinacapitalPost.Order_Add(
                                    MaSoChungTuVanChuyen, "-", 0, 1, l__VNC__ServiceId,
                                    l__VNC__Weight, 0, 0, 0, null, 1, null, null,
                                    TenTinhThanhGui, TenQuanHuyenGui, null, DiaChiGui, null, SoDienThoaiNguoiGui,
                                    TenTinhThanhNhan, TenQuanHuyenNhan, null, DiaChiNhan, HoTenNguoiNhan, SoDienThoaiNguoiNhan,
                                    null, null, null, null, null, null
                                    );
                                switch (l__VNCPost_Order_Add_Result.Result)
                                {
                                    case 1: // 1:Thành công
                                        {
                                            ResultFromNVC = " Gửi vận đơn cho nhà vận chuyển Vinacapital Post Thành công!";
                                            InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                null, null, null,
                                                MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), "",
                                                0, "Gửi DO thành công!", Convert.ToDouble(TrongLuong)     // Ký
                                                );
                                        }
                                        break;
                                    case 2: // 2:Thất bại
                                        {
                                            ResultFromNVC = " Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                            ResultFromNVC += "</br>Vinacapital Post: Order_Add.Message: " + l__VNCPost_Order_Add_Result.Message;
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + ResultFromNVC);
                                        }
                                        break;
                                    default: // Khác
                                        {
                                            ResultFromNVC = " Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                            ResultFromNVC += "</br>Vinacapital Post: Order_Add.Result: " + l__VNCPost_Order_Add_Result.Result.ToString();
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", request_Create.Id.ToString() + ResultFromNVC);
                                        }
                                        break;
                                }
                            }
                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            #endregion
                            #endregion

                            #region Trả về
                            //Send mail
                            XMail.Send(request_Create.Id, "[CallLog] - " + request_Create.Title, XMail.ProcessType.Create);
                            #endregion

                            #region "Tạo Bill Hỏa Tốc"
                            string MaPhongBanShopGui = string.Empty;
                            if (MaPhongBanGui != "")
                            {
                                MaPhongBanShopGui = MaPhongBanGui;               //Mã phòng ban gửi
                            }
                            else
                            {
                                MaPhongBanShopGui = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                            }
                            if (item.IdService == 1)
                            {
                                SqlParameter[] param = new SqlParameter[]
                                {
                                    new SqlParameter("@Sender",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@SoVanDon",MaSoChungTuVanChuyen),
                                    new SqlParameter("@LyDoGui",GhiChu),
                                    ////new SqlParameter("@ToShop",MaPhongBanShopGui),
                                    ////new SqlParameter("@ToShopName",TenPhongBanShopGui),
                                    ////new SqlParameter("@FromShop",MaPhongBanNhan),
                                    ////new SqlParameter("@FromShopName",TenPhongBanShopNhan),

                                    //▼ Edit - NgoanHT - 19/12/2017 - Sửa lại shop nhận và gửi -TrungNC3
                                    new SqlParameter("@ToShop",MaPhongBanNhan),
                                    new SqlParameter("@ToShopName",TenPhongBanShopNhan),
                                    new SqlParameter("@FromShop",MaPhongBanShopGui),
                                    new SqlParameter("@FromShopName",TenPhongBanShopGui),
                                    //▲ Edit - NgoanHT - 19/12/2017 - Sửa lại shop nhận và gửi - TrungNC3

                                    new SqlParameter("@TenHangHoa",NoiDungHangHoa),
                                    new SqlParameter("@TrongLuong",TrongLuong),
                                    new SqlParameter("@CuocVanChuyen",0),
                                    new SqlParameter("@System",1),
                                    new SqlParameter("@SoGiaoDich",request_Create.Id)

                                };
                                DataTable tb = sql.ExecuteCommand("Request_InsertBillHoaToc", CommandType.StoredProcedure, param);
                                DataRow row = tb.Rows[0];
                                if (row["RequestId"].ToString() != "0")
                                {
                                    RequestHT.Add(row["RequestId"].ToString());
                                }
                            }
                            #endregion "Tạo Bill Hỏa Tốc"
                        }
                        #endregion #Bill Tạo mới
                    }
                    if (Session[Key.Session.BillInfo] != null)
                    {
                        Session[Key.Session.BillInfo] = null;
                    }

                    #endregion

                    returnStr = String.Join(", ", myCollection.ToArray());
                    string returnStrHT = String.Join(", ", RequestHT.ToArray());//NgoanHT - 23/10/2017 - 154 - 180: bill hỏa tốc - Thêm
                    string strReturn = string.Empty;

                    //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    if (TypeIdParent == 214)
                    {
                        //▼ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        Request requestParent = db.Requests.FirstOrDefault(x => x.Id == p__RequestIdParent);
                        if (requestParent != null)
                        {
                            #region Update or Insert RequestStep

                            RequestStep step = new RequestStep();
                            RequestStep oldStep = new RequestStep();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                            {
                                IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                            }))
                            {
                                step = db.RequestSteps.FirstOrDefault(
                                                x => x.RequestId == requestParent.Id
                                                && x.Status == Key.Status.Available
                                                && x.StepNo == requestParent.StepNo);
                            }
                            if (step != null)
                            {
                                step.TimeEnd = DateTime.Now;

                                if (step.StepNo == 2)
                                {
                                    oldStep = step;

                                    step = new RequestStep();
                                    step.RequestId = requestParent.Id;
                                    step.TimeCreate = DateTime.Now;

                                    step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;

                                    step.TimeEnd = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;
                                    step.Assigner = requestParent.Assigner;
                                    step.StepNo = 3;
                                    step.Status = Key.Status.Available;

                                    db.RequestSteps.Add(step);

                                }
                            }
                            else
                            {
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    oldStep = (from s in db.RequestSteps
                                               where s.RequestId == requestParent.Id
                                               && s.StepNo == requestParent.StepNo - 1
                                               && s.Status == Key.Status.Available
                                               select s).FirstOrDefault();
                                }

                                step = new RequestStep();
                                step.RequestId = requestParent.Id;
                                step.TimeCreate = DateTime.Now;

                                step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;

                                step.TimeEnd = DateTime.Now;
                                step.Assigner = requestParent.Assigner;
                                step.StepNo = requestParent.StepNo;
                                step.Status = Key.Status.Available;

                                db.RequestSteps.Add(step);
                            }
                            db.SaveChanges();
                            #endregion

                            #region Xử lý Calllog
                            if (new List<int> { 2, 3 }.Contains(requestParent.StepNo))
                            {
                                requestParent.StepNo = 4;
                            }
                            else
                            {
                                requestParent.StepNo += 1;
                            }
                            db.SaveChanges();
                            #endregion

                            #region Gan nguoi xu lý mới
                            requestParent.Status = Key.StatusRequest.Processing;
                            requestParent.StepStatus = Key.StatusRequest.Waitting;
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                                new SqlParameter("@RequestId",requestParent.Id),
                                                new SqlParameter("@StepNo",requestParent.StepNo)
                                });
                            if (table != null && table.Rows.Count > 0)
                                requestParent.Assigner = table.Rows[0]["Assigner"].ToString();
                            else
                                requestParent.Assigner = string.Empty;
                            db.SaveChanges();
                            #endregion

                            requestParent.TimeLastUpdate = DateTime.Now;
                            requestParent.UpdateBy = UserManager.CurrentUser.InsideCode;
                            db.SaveChanges();
                        }
                        //▲ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        strReturn = "Tạo Request " + myRequest.Count.ToString() + "/" + myRequest.Count.ToString() + ":" + returnStr + " thành công! <br/>Người xử lý là : Nhà vận chuyển <br> Tạo Request Bill hỏa tốc " + RequestHT.Count.ToString() + "/" + RequestHT.Count.ToString() + ": " + returnStrHT.ToString() + "<br/>Thành công !" + ResultFromNVC + "<br/>Calllog " + p__RequestIdParent + " chuyển bước thành công";
                    }
                    //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    else
                    {
                        //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                        strReturn = "Tạo Request " + myRequest.Count.ToString() + "/" + myRequest.Count.ToString() + ":" + returnStr + " thành công! <br/>Người xử lý là : Nhà vận chuyển <br> Tạo Request Bill hỏa tốc " + RequestHT.Count.ToString() + "/" + RequestHT.Count.ToString() + ": " + returnStrHT.ToString() + "<br/>Thành công !" + ResultFromNVC;
                        //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                    }

                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    if (Session[Key.Session.BillInfo] != null)
                        Session[Key.Session.BillInfo] = null;
                    if (myRequest.Count > 0)
                    {

                        foreach (var itemRequest in myRequest)
                        {
                            if (myRequest[myRequest.Count - 1] == itemRequest && myRequest.Count > 0)
                            {
                                var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Id);
                                if (requestCancel != null)
                                {
                                    requestCancel.Remark = "Create request fail details";
                                    requestCancel.Status = Key.StatusRequest.Cancel;
                                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                                    TempData["Message"] = "Tạo Request " + (myRequest.Count - 1).ToString() + "/" + countDetail.ToString() + ":" + returnStr + " thành công! <br/>Người xử lý là : Nhà vận chuyển<br/>" + ResultFromNVC + ex.Message;
                                }
                                //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                if (TypeIdParent == 214)
                                {
                                    TempData["Message"] = "Tạo Request " + (myRequest.Count - 1).ToString() + "/" + countDetail.ToString() + ":" + returnStr + " thành công! <br/>Người xử lý là : Nhà vận chuyển<br/>" + ResultFromNVC + ex.Message + "<br/>Calllog " + p__RequestIdParent + " chuyển bước thành công";
                                }
                                //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                            }
                            else
                            {
                                Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                                ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                            }

                        }
                        db.SaveChanges();
                    }
                    else
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                        ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                        TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                    }
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }//Tạo callLog

        //Lấy địa chỉ phòng ban gửi
        #region "Khung không đổi"
        public ActionResult GetOrganizationHierachiesSend()
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("GetOrganizationHierachiesSend", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@OrganizationHierachyCodeSend",UserManager.CurrentUser.OrganizationHierachyCode)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetOrganizationHierachiesReceive(string MaPhongBan)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("GetOrganizationHierachiesSend", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@OrganizationHierachyCodeSend",MaPhongBan)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult LayDanhSachTinhThanh()
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("LoadTinhThanhPho", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Load danh sách tỉnh thành

        [CompressCode]
        public ActionResult LayDanhSachQuanHuyenCuaTinhThanhPho(string idTinhThanh)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("LoadQuanHuyen", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@TinhThanh",idTinhThanh)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Load danh sách huyện theo ID tỉnh

        public ActionResult LayDanhSachDichVuCanChuyen(string Group)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("TrungNC3_sp_LayDanhSachDichVuVanChuyen", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@Group",Group)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Load danh sách dịch vụ vận chuyển  theo group

        public ActionResult LayTinhTheoMa(string ID)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("TrungNC3_sp_LayTinhTheoMaTinh", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@MaTinh",ID)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Load tỉnh thành theo mã

        public ActionResult GetTranderServiceBO()
        {
            SqlParameter[] param = new SqlParameter[] { };
            DataTable table = sql.ExecuteCommand("GetTranderServiceBO", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult LayHuyenTheoMa(string ID)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("TrungNC3_sp_LayHuyenTheoMaHuyen", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@MaHuyen",ID)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Load quận huyện theo mã

        public JsonResult GetAddress_GetByWarehouse(string shop)
        {
            if (!Request.IsAjaxRequest())
                return null;
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@WarehouseB1", shop)
            };
            DataTable table = sql.ExecuteCommand("GetAddress_GetByWarehouse", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Lấy địa shop dựa trên mã shop

        [CompressCode]
        public ActionResult GetPhongBan_Emp()
        {
            if (!Request.IsAjaxRequest())
                return null;
            SqlParameter[] param = new SqlParameter[] {
                        new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                    };
            DataTable tb = sql.ExecuteCommand("GetPhongBan_Emp", CommandType.StoredProcedure, param);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Load danh sách phòng ban

        [CompressCode]
        public ActionResult GetPhongBan()
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("GetPhongBan", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }//Load danh sách phòng ban

        public int InsertThongTinVanChuyenVeNhatTin(int p_ActionNum, int p_IsPOS, string p_OrderNumber, string p_ServiceCode, string p_IsWoodPack,
            string p_NoPack, int p_ErrCode, string p_ErrDes, double p_Weight)
        {
            try
            {
                //Khai báo biến cho param
                int docStt = 0;
                string cod = "";
                decimal WoodenFee = 0;
                decimal OutSideFee = 0;
                decimal PackageFee = 0;
                decimal MainFee = 0;
                string note = "";
                string description = "";
                string dimension = "";
                string isCount = "";
                //set param cho store
                SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@ActionNum",p_ActionNum),
                     new SqlParameter("@IsPOS",p_IsPOS),
                     new SqlParameter("@orderNumber",p_OrderNumber),
                     new SqlParameter("@packageWeight",p_Weight),
                     new SqlParameter("@cod",cod),
                     new SqlParameter("@DocStatus",docStt),
                     new SqlParameter("@PlannedDateTime","19000101 00:00:00"),
                     new SqlParameter("@WoodenFee",WoodenFee),
                     new SqlParameter("@OutSideFee",OutSideFee),
                     new SqlParameter("@PackageFee",PackageFee),
                     new SqlParameter("@MainFee",MainFee),
                     new SqlParameter("@StatusPushDate","19000101 00:00:00"),
                     new SqlParameter("@Notes",note),
                     new SqlParameter("@serviceCode",p_ServiceCode),
                     new SqlParameter("@isWoodPack",p_IsWoodPack),
                     new SqlParameter("@noPack",p_NoPack),
                     new SqlParameter("@description",description),
                     new SqlParameter("@dimension",dimension),
                     new SqlParameter("@isCount",isCount),
                     new SqlParameter("@errorCode",p_ErrCode),
                     new SqlParameter("@errorDes",p_ErrDes)
                    };
                DataTable tb = sql.ExecuteCommand("[POS_GuiThongTinVanChuyenChoNhatTin]", CommandType.StoredProcedure, param);
                if (tb != null && tb.Rows.Count > 0)
                {
                    return int.Parse(tb.Rows[0]["Result"].ToString());    //  1: Thành công, 0: Không thành công
                }
                else
                    return 0;   //  Không thành công
            }
            catch (Exception ex)
            {
                throw (ex);
                //return -1;  //  Kết nối không thành công
            }
        }//thêm thông tin bảng tạm chuyển sang nhà vận chuyển Nhât Tín

        public int InsertThongTinVanChuyenVeNhaVanChuyenConLai(string p_Transporter, string p_KeyCertify, string p_Keyname, string p_OrderNum, string p_TransporterCode, string p_WoodenFee,
            string p_NoPack, string Note, int p_ErrCode, string p_ErrDes, double p_PackageWeight)
        {
            try
            {
                //Khai báo biến cho param 
                SqlParameter[] param = new SqlParameter[] {
                        new SqlParameter("@orderNumber",p_OrderNum),
                        new SqlParameter( "@ServiceCode",p_TransporterCode),
                        new SqlParameter("@IsWoodPack",p_WoodenFee),
                        new SqlParameter("@NoPack",p_NoPack),
                        new SqlParameter("@Description",Note),
                        new SqlParameter("@ErrorCode",p_ErrCode),
                        new SqlParameter("@ErrorDes",p_ErrDes),
                        new SqlParameter("@PackWeight",p_PackageWeight)
                    };
                DataTable tb = sql.ExecuteCommand("[POS_GuiThongTinVanChuyenConLai]", CommandType.StoredProcedure, param);
                if (tb != null && tb.Rows.Count > 0)
                {
                    return int.Parse(tb.Rows[0]["Result"].ToString());    //  1: Thành công, 0: Không thành công
                }
                else
                    return 0;   //  Không thành công
            }
            catch (Exception)
            {
                return -1;
            }

        }

        public DataTable TaoThongTinPhongBan(string maNVC, string maTinh, string maHuyen)
        {
            SqlParameter[] param = new SqlParameter[] {
                 new SqlParameter("@Transporter",maNVC),
                 new SqlParameter("@MaTinh",maTinh),
                 new SqlParameter("@MaHuyen",maHuyen),
            };
            DataTable tb = sql.ExecuteCommand("[GetShopNhanBO]", CommandType.StoredProcedure, param);
            if (tb != null && tb.Rows.Count > 0)
            {
                return tb;    //  1: Thành công, 0: Không thành công
            }
            else  //  Không thành công
                return null;
        }

        public ActionResult HuyBillVanChuyenKhoiBO(FormCollection form)
        {
            int requestId = form["RequestId"].EParseToInt();
            string MaNVC = form["MaNhaVanChuyen"].ToString();
            string orderNumber = form["MaBillVanChuyen"].ToString();
            string remak = "";
            var request = db.Requests.FirstOrDefault(p => p.Id == requestId);
            var requestDetail = db.RequestDetails.FirstOrDefault(p => p.RequestId == requestId);
            string strReturnHuy = string.Empty;
            #region "Hủy Nhất Tín"
            if (MaNVC == "NT")
            {
                int intNhatTinDeleteOrderResult;
                intNhatTinDeleteOrderResult = l_NtWebService.cancelOrder("fptshop-calllog", "gxNmsvD2rUNkq7Ds", orderNumber, remak);
                switch (intNhatTinDeleteOrderResult)
                {
                    case 0:
                        {
                            int k = CancelBillCuaNhatTin(orderNumber, remak);
                            if (k == 1)
                            {
                                if (request != null)
                                {
                                    request.Status = Key.StatusRequest.Cancel;
                                    request.Remark = request.Remark + "Hủy từ màn hình call log";
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                                    request.TimeLastUpdate = DateTime.Now;
                                }
                                if (requestDetail != null)
                                {
                                    requestDetail.CustomerName = "Hủy chứng từ vận chuyển Nhất Tín thành công.";
                                }
                                db.SaveChanges();
                                strReturnHuy = "Hủy chứng từ vận chuyển Nhất Tín thành công.";
                            }
                        }
                        break;
                    case 2:
                        {
                            if (intNhatTinDeleteOrderResult == 2)
                            {
                                if (request != null)
                                {
                                    request.Status = Key.StatusRequest.Cancel;
                                    request.Remark = request.Remark + "Hủy từ màn hình call log";
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                                    request.TimeLastUpdate = DateTime.Now;
                                }
                                if (requestDetail != null)
                                {
                                    requestDetail.CustomerName = "Số vận đơn không tồn tại bên Nhất Tín. Hệ thống tự động hủy Call Log.";
                                }
                                db.SaveChanges();
                                strReturnHuy = "Số vận đơn không tồn tại bên Nhất Tín.<br/>Hệ thống tự động hủy Call Log.";
                            }
                        }
                        break;
                    case 3:
                        {
                            if (intNhatTinDeleteOrderResult == 3)
                            {
                                if (requestDetail != null)
                                {
                                    requestDetail.CustomerName = "Số vận đơn đã được xác nhận giao hàng bởi Nhất Tín. Không thể hủy.";
                                }
                                db.SaveChanges();
                                strReturnHuy = "Số vận đơn đã được xác nhận giao hàng bởi Nhất Tín. Không thể hủy!!!";
                            }
                        }
                        break;
                    case 4:
                        {
                            if (intNhatTinDeleteOrderResult == 4)
                            {
                                if (request != null)
                                {
                                    request.Status = Key.StatusRequest.Cancel;
                                    request.Remark = request.Remark + "Bill không tồn tại bên NVC";
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                                    request.TimeLastUpdate = DateTime.Now;
                                }
                                if (requestDetail != null)
                                {
                                    requestDetail.CustomerName = "Số vận đơn đã được hủy bởi Nhất Tín. Hệ thống sẽ tự động hủy Call Log.";
                                }
                                db.SaveChanges();
                                strReturnHuy = "Số vận đơn đã được hủy bởi Nhất Tín.<br/>Hệ thống sẽ tự động hủy Call Log.";
                            }

                        }
                        break;
                    case -1:
                        {
                            if (intNhatTinDeleteOrderResult == -1)
                            {
                                if (requestDetail != null)
                                {
                                    requestDetail.CustomerName = "Lỗi từ phía nhà vận chuyển, không thể hủy.";
                                }
                                db.SaveChanges();
                                strReturnHuy = "Lỗi từ phía nhà vận chuyển, không thể hủy.";
                            }
                        }
                        break;
                    default:
                        {
                            if (requestDetail != null)
                            {
                                requestDetail.CustomerName = "Lỗi không xác định từ nhà vận chuyển Nhất Tín. Xin hãy thử lại sau.";
                            }
                            db.SaveChanges();
                            strReturnHuy = "Lỗi không xác định từ nhà vận chuyển Nhất Tín. Xin hãy thử lại sau!!!";
                        }
                        break;
                }
                TempData["Message"] = strReturnHuy;
                return RedirectToAction("Index", "Home"); // chuyển về trang chủ
            }
            #endregion

            #region "Hủy Kerry"
            else if (MaNVC == "Kerry")
            {
                DTO_Kerry_ResponseCancel responseKerryCancel = new DTO_Kerry_ResponseCancel();

                //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                string sKerryResponse = g_KerryWebService.BAOHUY(g_KerryWebService_Token, orderNumber, "Hủy từ MH CallLog!");
                //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                JavaScriptSerializer responseJson = new JavaScriptSerializer();
                responseKerryCancel = responseJson.Deserialize<DTO_Kerry_ResponseCancel>(sKerryResponse);

                //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                switch (responseKerryCancel.status)
                {
                    case "success":
                        {
                            int k = CancelBillCuaNVCConLai(Transporters.Kerry.Code,
                                                            Transporters.Kerry.KeyCertify,
                                                            Transporters.Kerry.KeyName,
                                                            orderNumber,
                                                            remak);
                            if (k == 1)
                            {
                                if (request != null)
                                {
                                    request.Status = Key.StatusRequest.Cancel;
                                    request.Remark = request.Remark + "Hủy từ màn hình call log";
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                                    request.TimeLastUpdate = DateTime.Now;
                                }
                                string l_success = "Hủy chứng từ vận chuyển Kerry thành công!";
                                if (requestDetail != null)
                                {
                                    requestDetail.CustomerName = l_success;
                                }
                                db.SaveChanges();
                                strReturnHuy = l_success;
                            }
                        }
                        break;
                    ////case "404":
                    ////    {
                    ////        if (responseKerryCancel.code == "404")
                    ////        {
                    ////            if (request != null)
                    ////            {
                    ////                request.Status = Key.StatusRequest.Cancel;
                    ////                request.Remark = request.Remark + "Hủy từ màn hình call log";
                    ////                request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    ////                request.TimeLastUpdate = DateTime.Now;
                    ////            }
                    ////            if (requestDetail != null)
                    ////            {
                    ////                requestDetail.CustomerName = "Số vận đơn không tồn tại bên Kerry. Hệ thống tự động hủy Call Log.";
                    ////            }
                    ////            db.SaveChanges();
                    ////            strReturnHuy = "Số vận đơn không tồn tại bên Kerry.<br/>Hệ thống tự động hủy Call Log.";
                    ////        }
                    ////    }
                    ////    break;
                    ////case "405":
                    ////    {
                    ////        if (responseKerryCancel.code == "405")
                    ////        {
                    ////            if (requestDetail != null)
                    ////            {
                    ////                requestDetail.CustomerName = "Số vận đơn đã được xác nhận giao hàng bởi Kerry. Không thể hủy.";
                    ////            }
                    ////            db.SaveChanges();
                    ////            strReturnHuy = "Số vận đơn đã được xác nhận giao hàng bởi Kerry.Không thể hủy!!!";
                    ////        }
                    ////    }
                    ////    break;
                    ////case "406":
                    ////    {
                    ////        if (responseKerryCancel.code == "406")
                    ////        {
                    ////            if (requestDetail != null)
                    ////            {
                    ////                requestDetail.CustomerName = "Không phải vận đơn của FPT Shop.";
                    ////            }
                    ////            db.SaveChanges();
                    ////            strReturnHuy = "Không phải vận đơn của FPT Shop.";
                    ////        }
                    ////    }
                    ////    break;
                    ////case "500":
                    ////    {
                    ////        if (responseKerryCancel.code == "500")
                    ////        {
                    ////            if (requestDetail != null)
                    ////            {
                    ////                requestDetail.CustomerName = "Lỗi từ phía nhà vận chuyển, không thể hủy.";
                    ////            }
                    ////            db.SaveChanges();
                    ////            strReturnHuy = "Lỗi từ phía nhà vận chuyển, không thể hủy.";
                    ////        }
                    ////    }
                    ////    break;
                    default:
                        {
                            string l_status_else = "Lỗi không xác định từ nhà vận chuyển Kerry! Xin hãy thử lại sau! " + responseKerryCancel.message;
                            if (requestDetail != null)
                            {
                                requestDetail.CustomerName = l_status_else;
                            }
                            db.SaveChanges();
                            strReturnHuy = l_status_else;
                        }
                        break;
                }
                //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                TempData["Message"] = strReturnHuy;
                return RedirectToAction("Index", "Home"); // chuyển về trang chủ
            }
            #endregion

            #region "Hủy Vinacapital Post"
            else if (MaNVC == "VNC")
            {
                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                VinacapitalPost l__VinacapitalPost = new VinacapitalPost();
                VinacapitalPost.VNCPost_Order_Cancel_Result l__VNCPost_Order_Cancel_Result = l__VinacapitalPost.Order_Cancel(orderNumber);
                switch (l__VNCPost_Order_Cancel_Result.Result)
                {
                    case 1: // 1:Thành công
                        {
                            int k = CancelBillCuaNVCConLai(null, null, null, orderNumber, remak);
                            if (k == 1)
                            {
                                if (request != null)
                                {
                                    request.Status = Key.StatusRequest.Cancel;
                                    request.Remark = request.Remark + "Hủy từ màn hình call log";
                                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                                    request.TimeLastUpdate = DateTime.Now;
                                }
                                string l_success = "Hủy chứng từ vận chuyển Vinacapital Post thành công!";
                                if (requestDetail != null)
                                {
                                    requestDetail.CustomerName = l_success;
                                }
                                db.SaveChanges();
                                strReturnHuy = l_success;
                            }
                        }
                        break;
                    case 2: // 2:Thất bại
                        {
                            string l_status_else = "Hủy chứng từ vận chuyển Vinacapital Post thất bại!";
                            l_status_else += " Vinacapital Post: Order_Cancel.Message: " + l__VNCPost_Order_Cancel_Result.Message;
                            if (requestDetail != null)
                            {
                                requestDetail.CustomerName = l_status_else;
                            }
                            db.SaveChanges();
                            strReturnHuy = l_status_else;
                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", requestId.ToString() + l_status_else);
                        }
                        break;
                    default: // Khác
                        {
                            string l_status_else = "Lỗi không xác định từ nhà vận chuyển Vinacapital Post! Xin hãy thử lại sau!";
                            l_status_else += " Vinacapital Post: Order_Cancel.Result: " + l__VNCPost_Order_Cancel_Result.Result.ToString();
                            if (requestDetail != null)
                            {
                                requestDetail.CustomerName = l_status_else;
                            }
                            db.SaveChanges();
                            strReturnHuy = l_status_else;
                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", requestId.ToString() + l_status_else);
                        }
                        break;
                }

                TempData["Message"] = strReturnHuy;
                return RedirectToAction("Index", "Home"); // chuyển về trang chủ
                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
            }
            #endregion
            return null; // chuyển về trang chủ
        }

        public int CancelBillCuaNhatTin(string p_OrderNumber, string remark)
        {
            try
            {
                //set param cho store
                SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@OrderNum",p_OrderNumber),
                     new SqlParameter("@Remark",remark),
                    };
                DataTable tb = sql.ExecuteCommand("[sp_HuyBillNVCNhatTin]", CommandType.StoredProcedure, param);
                if (tb != null && tb.Rows.Count > 0)
                {
                    return int.Parse(tb.Rows[0]["Result"].ToString());    //  1: Thành công, 0: Không thành công
                }
                else
                    return 0;   //  Không thành công
            }
            catch (Exception ex)
            {
                throw (ex);
                //return -1;  //  Kết nối không thành công
            }
        }//hủy bill
        public int CancelBillCuaNVCConLai(string p_Transporter, string p_KeyCertify, string p_Keyname, string p_OrderNumber, string remark)
        {
            try
            {
                //set param cho store
                SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@OrderNum",p_OrderNumber),
                     new SqlParameter("@Remark",remark),
                    };
                DataTable tb = sql.ExecuteCommand("[sp_HuyBillNVCConLai]", CommandType.StoredProcedure, param);
                if (tb != null && tb.Rows.Count > 0)
                {
                    return int.Parse(tb.Rows[0]["Result"].ToString());    //  1: Thành công, 0: Không thành công
                }
                else
                    return 0;   //  Không thành công
            }
            catch (Exception ex)
            {
                throw (ex);
                //return -1;  //  Kết nối không thành công
            }
        }
        #endregion

        #endregion End Tạo ACTION bill vận chuyển khối BO -- TrungNC3*/

        public ActionResult GetInventoryByItem_typeId_155(string itemCode, string warehouseCode)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("sp_Get_TonKhoHanhChinh", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@MaSP",itemCode),
                            new SqlParameter("@MaShopB1",warehouseCode)
                    });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult GetAllNganhHangTheoPos()
        {
            DataTable table = sql.ExecuteCommand("GetALLNganhHangTheoPos", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetAllNhanHangTheoPos()
        {
            DataTable table = sql.ExecuteCommand("GetAllNhanHangTheoPos", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetNganhNhanHangTheoUser(string user)
        {
            Dictionary<string, List<Dictionary<string, object>>> myList =
                            new Dictionary<string, List<Dictionary<string, object>>>();
            DataSet infors = sql.ExecuteCommandDataSet("LoadNganhNhanHangTheoUser", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@UserID",user),
            });
            myList.Add("danhsachnganhhang", infors.Tables[0].EParseToObjects());
            myList.Add("allnhanhang", infors.Tables[1].EParseToObjects());
            string json = JsonConvert.SerializeObject(myList, Formatting.Indented);
            var jsonResult = Json(json, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult Get_SanPham_ITSupport()
        {
            DataTable table = sql.ExecuteCommand("Get_SanPham_ITSupport", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult Get_ThongTinBaoHanhBongDen(string RequestId)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("Get_LoadWarrantyInfo", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@RequestId",RequestId),
                 new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại
        //ChuongNT3 - 05/09/2018 - sửa cột loại 19
        public ActionResult UpdateExtendTime_19(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            //ChuongNT3 - 21/09/2018 - check lỗi
            if (request.Status == 4)
            {
                TempData["Message"] = "CL đã hoàn tất không thể cập nhật";
                return RedirectToAction("Details", new { Id = request.Id });
            }
            if (request != null && request.TypeId == 19)
            {
                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                string nhanVien = "";
                if (requestdetail.Property13 != null && requestdetail.Property13 != "")
                    nhanVien = requestdetail.Property13;
                else
                    nhanVien = requestdetail.Property12;
                string tgian = "", va = "", nhanvien = "";
                EmployeeDAL emp = new EmployeeDAL();
                bool cskh = emp.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode);
                TimeSpan timeSpan = DateTime.Now - request.TimeCreate;
                double _48hours = timeSpan.TotalHours;
                //ChuongNT3 - 21/09/2018 - check lỗi
                //ChuongNT3 - 10/23/2018 - thêm nhánh
                if (_48hours >= 48 && nhanVien != "" && cskh == false && request.Status < 4 && requestdetail.Quantity1 == 0 && (requestdetail.Property10 == "error" || requestdetail.Property10 == ""))
                {
                    var month = DateTime.Now.Month;
                    var year = DateTime.Now.Year;
                    //ChuongNT3 - 18/09/2018 - sửa update nhân viên

                    sql.ExecuteWithoutResult("SinhPhieuViPham_19", CommandType.StoredProcedure, new SqlParameter[]{
                                    new SqlParameter("@MonthRecord",month),
                                    new SqlParameter("@YearRecord",year),
                                    new SqlParameter("@EmpViolation",nhanVien),
                                    new SqlParameter("@ViolationContentID", 214), //BETA 771
                                    new SqlParameter("@CallLogID",request.Id),
                                    new SqlParameter("@Remark",""),
                                    new SqlParameter("@HeSoPhat",1),
                                });
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeClose = DateTime.Now;
                    request.TimeFinish = DateTime.Now;
                    request.Status = 4;
                    TempData["MessageSuccess"] = "SM cập nhật thông tin sau 48h từ khi tạo calllog. Hệ thống tự động hoàn tất và gởi phiếu vi pham qua inside";
                }
                else
                {
                    if (form["nvKhieuNai_19"] != "" && form["nvKhieuNai_19"] != null && requestdetail.Property13 != form["nvKhieuNai_19"])
                    {
                        if (cskh == true)
                        {
                            TempData["Message"] = "Nhân viên chăm sóc khách hàng không thể cập nhật nhân viên bị khiếu nại";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                        else
                        {
                            nhanvien = "nhân viên";
                            requestdetail.Property13 = form["nvKhieuNai_19"];
                        }
                    }
                    if (form["dateExtend"] != "" && form["dateExtend"] != null && request.TimeGolive != Convert.ToDateTime(form["dateExtend"]) && request.TimeGoliveExpected != Convert.ToDateTime(form["dateExtend"]))
                    {
                        tgian = "gia hạn thời gian";
                        request.TimeGolive = Convert.ToDateTime(form["dateExtend"]);
                        request.TimeGoliveExpected = Convert.ToDateTime(form["dateExtend"]);
                        if (requestdetail != null)
                        {
                            requestdetail.EmpCode3 = UserManager.CurrentUser.InsideCode;
                        }
                    }
                    if (tgian != "" && nhanvien != "")
                    {
                        va = " và ";
                    }
                    TempData["MessageSuccess"] = "Cập nhật " + tgian + va + nhanvien + " thành công!";
                }
                db.SaveChanges();
                if (nhanvien != "")
                {
                    sql.ExecuteWithoutResult("UpdateChucDanh_19", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@RequestId", request.Id) });
                }
                return RedirectToAction("Details", new { Id = request.Id });
            }
            return RedirectToAction("Details", new { Id = request.Id });
        }
        public ActionResult GetAllInventoryProductHC()
        {
            if (!Request.IsAjaxRequest())
            {
                return HttpNotFound();
            }
            else
            {
                DataTable tb = sql.ExecuteCommand("Get_AllSoLuongTonKho", CommandType.StoredProcedure, null);
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }

            return null;
        }
        public ActionResult Get_AllShop()
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            else
            {
                ShopDAL shopG = new ShopDAL();
                DataTable tb = shopG.Get_AllShop();
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }
        //▼  Add - LuanNT44 - 08/07/2019 - Loại 212 - Nộp tiền quỹ tại ngân hàng 
        public ActionResult CheckSM_PSMShop(string shopcode)
        {
            string user = UserManager.CurrentUser.InsideCode;
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@insidecode",user),
                    new SqlParameter("@shopcode",shopcode)
                };
            DataTable tb = sql.ExecuteCommand("sp_CheckSM_PSMShop", CommandType.StoredProcedure, param);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 08/07/2019 - Loại 212 - Nộp tiền quỹ tại ngân hàng
        public ActionResult GroupProduct_Get()
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            else
            {
                DataTable tb = sql.ExecuteCommand("GroupProduct_Get", CommandType.StoredProcedure, null);
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }

            return null;
        }
        public ActionResult Get_Itemcode_MTB_MTXT(int Type)
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            else
            {
                DataTable tb = sql.ExecuteCommand("Get_Itemcode_MTB_MTXT", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@Type",Type)});
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }

            return null;
        }
        public ActionResult sp_ApproveEmployeesInfo(int Type)
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            else
            {
                DataTable tb = sql.ExecuteCommand("sp_ApproveEmployeesInfo", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@EmployeeCode",UserManager.CurrentUser.InsideCode),
                            new SqlParameter("@Type",Type)});
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }

            return null;
        }
        public ActionResult CheckTonKhoPOS_GG(string listRequestDetailsID)
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            else
            {
                DataTable tb = sql.ExecuteCommand("POS_CheckTonKho_GG", CommandType.StoredProcedure, new SqlParameter[]{
                    new SqlParameter("@ListRequestDetailsID",listRequestDetailsID)
                });
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }

            return null;
        }

        public ActionResult DetailFormMobile(long? Id)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            if (Id == null)
            {
                TempData["Message"] = "Request không tồn tại!";
                return RedirectToAction("Index", "Home");
            }

            var request = db.Requests.FirstOrDefault(x => x.Id == Id);
            var request_ARCH = db.Requests_ARCH.FirstOrDefault(x => x.Id == Id);
            if (request == null && request_ARCH != null)
            {
                request = new Models.Request();
                request.Id = request_ARCH.Id;
                request.Sender = request_ARCH.Sender;
                request.Assigner = request_ARCH.Assigner;
                request.Title = request_ARCH.Title;
                request.GroupId = request_ARCH.GroupId;
                request.TypeId = request_ARCH.TypeId;
                request.StepNo = request_ARCH.StepNo;
                request.StepStatus = request_ARCH.StepStatus;
                request.TimeCreate = request_ARCH.TimeCreate;
                request.TimeAppear = request_ARCH.TimeAppear;
                request.TimeFinish = request_ARCH.TimeFinish;
                request.TimeClose = request_ARCH.TimeClose;
                request.TimeFutureFinish = request_ARCH.TimeFutureFinish;
                request.TimeReceipt = request_ARCH.TimeReceipt;
                request.TimeUat = request_ARCH.TimeUat;
                request.TimeGolive = request_ARCH.TimeGolive;
                request.ToShop = request_ARCH.ToShop;
                request.ToOffice = request_ARCH.ToOffice;
                request.isHighlight = request_ARCH.isHighlight;
                request.isParent = request_ARCH.isParent;
                request.RequestIdRefer = request_ARCH.RequestIdRefer;
                request.TotalRequestSplit = request_ARCH.TotalRequestSplit;
                request.TotalRequestComplete = request_ARCH.TotalRequestComplete;
                request.Remark = request_ARCH.Remark;
                request.Status = request_ARCH.Status;
                request.CreateBy = request_ARCH.CreateBy;
                request.FromShop = request_ARCH.FromShop;
                request.FromOffice = request_ARCH.FromOffice;
                request.StillShowing = request_ARCH.StillShowing;
                request.Repeat = request_ARCH.Repeat;
                request.ErrorCode = request_ARCH.ErrorCode;
                request.ReferenceCode = request_ARCH.ReferenceCode;
                request.TimeLastUpdate = request_ARCH.TimeLastUpdate;
                request.UpdateBy = request_ARCH.UpdateBy;
                request.SumtimeComplete = request_ARCH.SumtimeComplete;
                request.ReviewComplete = request_ARCH.ReviewComplete;
                request.LastAdminUpdate = request_ARCH.LastAdminUpdate;
                request.TimeLastAdminUpdate = request_ARCH.TimeLastAdminUpdate;
                request.TimeGoliveExpected = request_ARCH.TimeGoliveExpected;
            }
            EmployeeDAL empJobTitle = new EmployeeDAL();
            ViewBag.EmpJobTitle_134 = empJobTitle.GetJobtitle_134(UserManager.CurrentUser.InsideCode); // Add - LuanNT44 - 28 / 03 / 2019 - Loại 134 - xét điều kiện chức danh show conversation
            ViewBag.EmpJobTitleFlag = empJobTitle.GetEmpOfJobtitle(UserManager.CurrentUser.InsideCode);
            ViewBag.EmpJobTitleCSKH_GQKNFlag = empJobTitle.GetEmpOfJobtitleCSKH_GQKN(UserManager.CurrentUser.InsideCode);
            ViewBag.EmpJobTitleCSKH_QA_Flag = empJobTitle.CheckJobtitle_CSKH_QA(UserManager.CurrentUser.InsideCode);
            if (request != null)
            {
                try
                {
                    //var empIsRead = (from f in db.Assigners
                    //                 where f.RequestId == request.Id && f.Status == Key.Status.Available
                    //                 && f.EmployeeCode == UserManager.CurrentUser.InsideCode && f.IsRead == false
                    //                 select f).ToList();
                    //if (empIsRead != null && empIsRead.Count > 0)
                    //{
                    //    empIsRead.ForEach(x => x.IsRead = true);
                    //    db.SaveChanges();
                    //}


                    var permissons = GetPermissions(request.Id);
                    //▼  Add - LuanNT44 - 30/05/2018 - Loại 48 - Xử lý vi phạm
                    //if (request.TypeId == 48 && !permissons.Contains(Permission.Assigner) && !permissons.Contains(Permission.Sender))
                    //{
                    //    TempData["Message"] = "Rất tiếc bạn không phải người xử lý CallLog này";
                    //    return RedirectToAction("Index", "Home");
                    //}
                    //▲  //▲  Add - LuanNT44 - 09/04/2018 - Loại 201 - Edit CSVC
                    if (request.TypeId == 19 && (request.TotalRequestComplete != null) && request.Status < Key.StatusRequest.Complete)
                    {
                        var requestNoti = db.Requests.FirstOrDefault(x => x.Id == request.TotalRequestComplete
                                            && (x.Status == Key.StatusRequest.Processing || x.Status == Key.StatusRequest.Complete));
                        EmployeeDAL empJ = new EmployeeDAL();
                        if (requestNoti != null && (TempData["Message"] == null) && empJ.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == false)
                        {
                            TempData["Message"] = "TH này đã được xử lý ngoài giờ hành chính, vui lòng liên hệ người trực hotline để cập nhật!";
                        }
                    }

                    #region Process
                    ViewBag.TimeOut = Session.Timeout;
                    JsonConvert.DefaultSettings = (() =>
                    {
                        var settings = new JsonSerializerSettings();
                        settings.Converters.Add(new StringEnumConverter { CamelCaseText = true });
                        return settings;
                    });

                    var images = (from f in db.FileAttachs
                                  where f.RequestId == request.Id && f.Status == Key.Status.Available && f.RequestDetailId == null
                                  select new
                                  {
                                      Id = f.Id,
                                      Uri = (f.Domain != null && f.Domain.Length > 0) ? f.Domain + f.Uri : f.Uri,
                                      ApproveStatus = f.ApproveStatus
                                  }).ToList().Select(x => new FileAttach { Id = x.Id, Uri = x.Uri, ApproveStatus = x.ApproveStatus });

                    if (images.Count() == 0)
                    {
                        var imagesARCH = (from f in db.FileAttachs_ARCH
                                          where f.RequestId == request.Id && f.Status == Key.Status.Available && f.RequestDetailId == null
                                          select new
                                          {
                                              Id = f.Id,
                                              Uri = (f.Domain != null && f.Domain.Length > 0) ? f.Domain + f.Uri : f.Uri,
                                              ApproveStatus = f.ApproveStatus
                                          }).ToList().Select(x => new FileAttachs_ARCH { Id = x.Id, Uri = x.Uri, ApproveStatus = x.ApproveStatus });
                        ViewBag.fa = imagesARCH;
                        ViewBag.Count = imagesARCH != null ? imagesARCH.Count() : 0;
                    }
                    else
                    {
                        ViewBag.fa = images;
                        ViewBag.Count = images != null ? images.Count() : 0;
                    }
                    //ViewBag.fa = images;
                    //ViewBag.Count = images != null ? images.Count() : 0;

                    EmployeeDAL empDAL = new EmployeeDAL();
                    var emp = empDAL.Get(request.Sender);
                    if (request.Sender == "-1")
                    {
                        emp = new F03_Employees();
                        emp.EmployeeName = "Hệ thống";
                    }
                    if (emp != null)
                    {
                        string userAssignerCode = string.Empty;
                        if (request.Assigner != null && request.Assigner.Length > 0)
                            userAssignerCode = request.Assigner;
                        else
                        {
                            var userAssign = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                               && x.Type == Key.TypeAssigner.To
                               && x.Status == Key.Status.Available && x.StepNo == request.StepNo);
                            if (userAssign != null)
                                userAssignerCode = userAssign.EmployeeCode;
                        }
                        //'▼(#001)Add===================================    
                        if (permissons.Contains(Permission.Assigner) && request.StepStatus == Key.StatusRequest.Waitting)
                        {
                            ViewBag.AssinerName = UserManager.CurrentUser.InsideCode + "--" + UserManager.CurrentUser.EmployeeName;
                        }
                        else
                        {
                            var assigner = empDAL.Get(userAssignerCode);
                            if (assigner != null)
                            {
                                ViewBag.AssinerName = assigner.EmployeeCode + "--" + assigner.EmployeeName;
                            }
                            else if (userAssignerCode == "-1")
                            {
                                ViewBag.AssinerName = "Hệ thống";
                            }
                            else if (userAssignerCode == "-2")
                            {
                                ViewBag.AssinerName = "Nhà vận chuyển";
                            }
                            else if (userAssignerCode == "-3")
                            {
                                ViewBag.AssinerName = "Hệ thống POS";
                            }
                            else
                            {
                                ViewBag.AssinerName = "Chưa có người xử lý";
                            }
                        }
                        //'▲(#001)Add===================================
                        EmployeeDAL empJobShopDAL = new EmployeeDAL();
                        var empJobShop = empJobShopDAL.GetByJobAndShop(request.Sender);
                        if (empJobShop != null && empJobShop.Rows.Count > 0)
                        {
                            ViewBag.EmpJobShop = empJobShop.Rows[0][2];
                        }
                        ViewBag.Email = emp.Email;
                        ViewBag.EmployeeName = emp.EmployeeName;

                        //▼	Edit - VietMXH - 11/07/2018 - Chuyển HTTP -> HTTPS==================================================
                        string l_Domain__Inside = ConfigurationManager.AppSettings["Domain__Inside"];
                        if (string.IsNullOrEmpty(l_Domain__Inside))
                        {
                            l_Domain__Inside = "";
                        }

                        ViewBag.Avatar = (emp.AvatarImageLink == null || emp.AvatarImageLink == "") ? "/assets/images/people.png" : l_Domain__Inside + emp.AvatarImageLink.Replace("~", "");
                        //▲	Edit - VietMXH - 11/07/2018 - Chuyển HTTP -> HTTPS==================================================

                        var assigners = empDAL.Get(UserManager.CurrentUser.InsideCode);
                        //==== Hiền.Đoàn 29.07.2016 Thêm biến Jobtitles người xử lý
                        ViewBag.Jobtiles = assigners.JobTitle;
                    }

                    ViewBag.Permissions = permissons;
                    ViewBag.Pers = JsonConvert.SerializeObject(permissons);
                    var permissonList = permissons.Select(x => x.ToString()).ToList();
                    var requestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id && x.Status == Key.Status.Available);
                    var requestMain = db.Requests.FirstOrDefault(x => x.Id == Id);
                    dynamic actions;
                    if (requestMain != null)
                    {
                        if (request.TypeId == 126 && request.ErrorCode == "1")
                        {
                            actions = (from a in db.DirectionActions
                                       where a.TypeId == 130 && a.StepNo == request.StepNo
                                       && a.Status == Key.Status.Available
                                       && permissonList.Contains(a.Permission)
                                       select new
                                       {
                                           ActionName = a.ActionName,
                                           ActionType = a.ActionType,
                                           ClassName = a.ActionType == "comment" ? "fa-comments" :
                                           a.ActionType == "changeStep" ? "fa-arrow-right" :
                                           a.ActionType == "complete" ? "fa-circle-o-notch" :
                                           a.ActionType == "changeAssigner" ? "fa fa-users" :
                                           a.ActionType == "reply" ? "fa-reply" :
                                           a.ActionType == "sendPartner" ? "fa-paper-plane" : ""
                                       }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                        }
                        else if (request.TypeId == 19 && request.StepNo == 2 && requestDetail.Property3 != "Bảo hành" && requestDetail.Property3 != "Bảo hành vàng")
                        {
                            actions = (from a in db.DirectionActions
                                       where a.TypeId == 19 && a.StepNo == request.StepNo
                                       && a.Status == Key.Status.Available
                                       && permissonList.Contains(a.Permission)
                                       && a.ActionType != "changeStep"
                                       select new
                                       {
                                           ActionName = a.ActionName,
                                           ActionType = a.ActionType,
                                           ClassName = a.ActionType == "comment" ? "fa-comments" :
                                           a.ActionType == "changeStep" ? "fa-arrow-right" :
                                           a.ActionType == "complete" ? "fa-circle-o-notch" :
                                           a.ActionType == "changeAssigner" ? "fa fa-users" :
                                           a.ActionType == "reply" ? "fa-reply" :
                                           a.ActionType == "sendPartner" ? "fa-paper-plane" : ""
                                       }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                        }
                        else if (request.TypeId == 19 && request.StepNo == 2 && (requestDetail.Property3 == "Bảo hành" || requestDetail.Property3 == "Bảo hành vàng"))
                        {
                            actions = (from a in db.DirectionActions
                                       where a.TypeId == 19 && a.StepNo == request.StepNo
                                       && a.Status == Key.Status.Available
                                       && permissonList.Contains(a.Permission)
                                       && (a.ActionType != "complete" || a.Permission == "Admin")
                                       select new
                                       {
                                           ActionName = a.ActionName,
                                           ActionType = a.ActionType,
                                           ClassName = a.ActionType == "comment" ? "fa-comments" :
                                           a.ActionType == "changeStep" ? "fa-arrow-right" :
                                           a.ActionType == "complete" ? "fa-circle-o-notch" :
                                           a.ActionType == "changeAssigner" ? "fa fa-users" :
                                           a.ActionType == "reply" ? "fa-reply" :
                                           a.ActionType == "sendPartner" ? "fa-paper-plane" : ""
                                       }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                        }
                        else
                        {
                            actions = (from a in db.DirectionActions
                                       where a.TypeId == request.TypeId && a.StepNo == request.StepNo
                                       && a.Status == Key.Status.Available
                                       && permissonList.Contains(a.Permission)
                                       select new
                                       {
                                           ActionName = a.ActionName,
                                           ActionType = a.ActionType,
                                           ClassName = a.ActionType == "comment" ? "fa-comments" :
                                           a.ActionType == "changeStep" ? "fa-arrow-right" :
                                           a.ActionType == "complete" ? "fa-circle-o-notch" :
                                           a.ActionType == "changeAssigner" ? "fa fa-users" :
                                           a.ActionType == "reply" ? "fa-reply" :
                                           a.ActionType == "sendPartner" ? "fa-paper-plane" : ""
                                       }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                        }
                    }
                    else
                    {
                        actions = "";
                    }

                    ViewBag.Actions = actions;
                    DataSet infors = sql.ExecuteCommandDataSet("Request_GetDetail", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id)
                    });
                    ViewBag.Converstation = infors.Tables[0].Rows;
                    ViewBag.rowCreate = infors.Tables[1].Rows;
                    ViewBag.RequestSteps = infors.Tables[2].Rows;
                    ViewBag.Cc = infors.Tables[3].Rows;
                    var permissionIDList = (from a in db.Permissions
                                            where a.TypeId == 19
                                            && a.StepNo == 1 && a.Status == Key.Status.Available
                                            select a.Id).ToList();
                    var flagGrAssigner = db.Assignments.FirstOrDefault(x => x.Status == Key.Status.Available
                        && x.Assigner == UserManager.CurrentUser.InsideCode && permissionIDList.Contains(x.PermissionId));

                    if (flagGrAssigner != null)
                        ViewBag.FlagAssignerStep1 = true;
                    else
                        ViewBag.FlagAssignerStep1 = false;

                    List<SelectListItem> errors;
                    if (request.TypeId == 45)
                    {
                        errors = (from m in db.MasterDatas
                                  where m.Group == "ErrorItSupport"
                                  select new SelectListItem
                                  {
                                      Text = m.Name,
                                      Value = m.Code,
                                      Selected = m.Code == request.ErrorCode
                                  }).ToList();
                    }
                    else
                    {
                        errors = (from m in db.MasterDatas
                                  where m.Group == "Error"
                                  select new SelectListItem
                                  {
                                      Text = m.Name,
                                      Value = m.Code,
                                      Selected = m.Code == request.ErrorCode
                                  }).ToList();
                    }

                    ViewBag.Ass = UserManager.CurrentUser.InsideCode;
                    ViewBag.Errors = errors;
                    return View(request);
                    #endregion
                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController Detail(long?Id)", ex.ToString());
                    TempData["Message"] = "Lỗi Load Request! " + ex.Message;
                    return RedirectToAction("Index", "Home");
                }
            }
            else
            {
                TempData["Message"] = "Request không tồn tại!";
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult GetShopNotInBO(int regionId)
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            else
            {
                DataTable tb = sql.ExecuteCommand("sp_GetShopNotInBO", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@RegionId",regionId)
                });
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }
        public ActionResult GetShopAndOffice()
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            else
            {
                DataTable tb = sql.ExecuteCommand("GetPhongBan_Shop", CommandType.StoredProcedure, null);
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }
        //▼ Add - TrungNC3 - 2017.09.06 - Up thực loại chuyển shop khác vùng
        public ActionResult Inside_LayDSShopTheoASM(string EmployeeCode = "")
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            else
            {
                DataTable tb = sql.ExecuteCommand("Inside_LayDSShopTheoASM", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@EmployeeCode",(EmployeeCode!=""&&EmployeeCode!=null)?EmployeeCode:UserManager.CurrentUser.InsideCode)
                });
                if (tb != null && tb.Rows.Count > 0)
                {
                    var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }
        //▲ Add- =======================================

        //NgoanHT - 17/10/2017 - Loại: 154 - Duyệt bill vận chuyển - Thêm
        public ActionResult InsertBillHoaToc(string Title, string SoVanDon, string LyDoGui, string ToShop, string FromShop,
            string TenHangHoa, string TrongLuong, string CuocVanChuyen, string System, string SoGiaoDich)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@Title",Title),
                    new SqlParameter("@Sender",UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@SoVanDon",SoVanDon),
                    new SqlParameter("@LyDoGui",LyDoGui),
                    new SqlParameter("@ToShop",ToShop),
                    new SqlParameter("@FromShop",FromShop),
                    new SqlParameter("@TenHangHoa",TenHangHoa),
                    new SqlParameter("@TrongLuong",TrongLuong),
                    new SqlParameter("@CuocVanChuyen",CuocVanChuyen),
                    new SqlParameter("@System",System),
                    new SqlParameter("@SoGiaoDich",SoGiaoDich)

                };
            DataTable tb = sql.ExecuteCommand("Request_InsertBillHoaToc", CommandType.StoredProcedure, param);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //NgoanHT - 17/10/2017 - Loại: 154 - Duyệt bill vận chuyển - Thêm

        //NgoanHT - 23/10/2017 - 152 - Thêm
        public ActionResult Get_OrganizationHierachiesAddress()
        {
            DataTable tb = sql.ExecuteCommand("Get_OrganizationHierachiesAddress", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //NgoanHT - 23/10/2017 - 152 - Thêm
        //▼ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
        public ActionResult FRT_SP_Get_Data_HanMuc_Mar(string warehouseCode)
        {
            DataTable tb = sql.ExecuteCommand("FRT_SP_Get_Data_HanMuc_Mar", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@WarehouseCode",(warehouseCode!=""&&warehouseCode!=null)?warehouseCode:UserManager.CurrentUser.WarehouseCode)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        [HttpGet]
        public ActionResult GetRequestSimilar_Mkts(int typeId, string ItemId, string ShopCode)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@typeId",typeId),
                    new SqlParameter("@ShopCode",ShopCode),
                    new SqlParameter("@ItemId",ItemId)
                };
            DataTable table = sql.ExecuteCommand("Request_GetSimilarMkts", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        //▲ Add - TrungNC3 - 20/11/2017 - Up thực yêu cầu Mkts thay đổi
        //▼ Add - TrungNC3 -  17/11/2017 - Load trong lượng theo sản phẩm
        public ActionResult GetWeightByItem()
        {
            DataTable tb = sql.ExecuteCommand("sp_GetWeightByItem", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲ Add - TrungNC3 -  17/11/2017 - Load trong lượng sách sản phẩm
        //▼ Add - NgoanHT -  05/12/2017 - Báo cáo HC - Thêm hàm GetItemNhomHang
        public ActionResult GetItemNhomHang(int? type)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@TypeId",type),
                };
            DataTable tb = sql.ExecuteCommand("sp_GetItemNhomHang", CommandType.StoredProcedure, param);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲ Add - NgoanHT -  05/12/2017 - Báo cáo HC - Thêm hàm GetItemNhomHang
        //▲ Add - PhiN -  07/12/2017  - Load trong Nhà mạng
        [HttpGet]
        public ActionResult GetClaimSubsidy(string Type)
        {
            ShopDAL shopDAL = new ShopDAL();
            DataTable table = shopDAL.GetClaimSubsidy(Type);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        //▲ Add - PhiN -    01/02/2018  - Load Layout shop
        [HttpGet]
        public ActionResult GetLayoutShop(int Type)
        {
            ShopDAL shopDAL = new ShopDAL();
            DataTable table = shopDAL.GetLayoutShop(Type);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        //▲ Add - PhiN -    01/02/2018  - Load Layout shop

        //▼ Add - NgoanHT -  05/12/2017 - Thêm hàm lưu hình SaveUploadedFileDetailMultipleCol
        //▼ Edit - ThuongNM2 -  08/10/2018 - Sửa hàm lưu hình SaveUploadedFileDetailMultipleCol
        [HttpPost]
        public ActionResult SaveUploadedFileDetailMultipleCol(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        int id = item.RequestDId;
                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        if (requestdetail != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestDetailId == requestdetail.Id && f.Status == 1
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0;
                            }

                            if (request.TypeId == 191)
                            {
                                string fNames1 = Convert.ToString(item.ListNameFile);
                                if (fNames1 != null && fNames1 != "")
                                {
                                    string[] words1 = fNames1.Split(',');
                                    foreach (string word in words1)
                                    {
                                        if (word != "")
                                        {
                                            FileAttach fileAttach = new FileAttach();
                                            fileAttach.Uri = word.Contains('/') ? word : Keyword.GetFolderFileAttach() + word;
                                            fileAttach.StepNo = request.StepNo;
                                            fileAttach.RequestId = request.Id;
                                            fileAttach.RequestDetailId = requestdetail.Id;
                                            fileAttach.TimeCreate = DateTime.Now;
                                            fileAttach.CreateBy = UserManager.CurrentUser.InsideCode;
                                            fileAttach.Status = Key.Status.Available;
                                            fileAttach.Domain = "HinhLayoutMatTien";
                                            db.FileAttachs.Add(fileAttach);
                                            myCollection.Add(fileAttach.Uri.ToString());
                                            db.SaveChanges();
                                        }
                                    }
                                }

                                string fNames2 = Convert.ToString(item.ListNameFile_2);
                                if (fNames2 != null && fNames2 != "")
                                {
                                    string[] words2 = fNames2.Split(',');
                                    foreach (string word in words2)
                                    {
                                        if (word != "")
                                        {
                                            FileAttach fileAttach = new FileAttach();
                                            fileAttach.Uri = word.Contains('/') ? word : Keyword.GetFolderFileAttach() + word;
                                            fileAttach.StepNo = request.StepNo;
                                            fileAttach.RequestId = request.Id;
                                            fileAttach.RequestDetailId = requestdetail.Id;
                                            fileAttach.TimeCreate = DateTime.Now;
                                            fileAttach.CreateBy = UserManager.CurrentUser.InsideCode;
                                            fileAttach.Status = Key.Status.Available;
                                            fileAttach.Domain = "HinhLayoutmatBang";
                                            db.FileAttachs.Add(fileAttach);
                                            myCollection.Add(fileAttach.Uri.ToString());
                                            db.SaveChanges();
                                        }
                                    }
                                }

                                string fNames3 = Convert.ToString(item.ListNameFile_3);
                                if (fNames3 != null && fNames3 != "")
                                {
                                    string[] words3 = fNames3.Split(',');
                                    foreach (string word in words3)
                                    {
                                        if (word != "")
                                        {
                                            FileAttach fileAttach = new FileAttach();
                                            fileAttach.Uri = word.Contains('/') ? word : Keyword.GetFolderFileAttach() + word;
                                            fileAttach.StepNo = request.StepNo;
                                            fileAttach.RequestId = request.Id;
                                            fileAttach.RequestDetailId = requestdetail.Id;
                                            fileAttach.TimeCreate = DateTime.Now;
                                            fileAttach.Status = Key.Status.Available;
                                            fileAttach.CreateBy = UserManager.CurrentUser.InsideCode;
                                            fileAttach.Domain = "HinhLayoutthucshop";
                                            db.FileAttachs.Add(fileAttach);
                                            myCollection.Add(fileAttach.Uri.ToString());
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                            else
                            {
                                string fNames1 = Convert.ToString(item.ListNameFile);
                                if (fNames1 != null && fNames1 != "")
                                {
                                    string[] words1 = fNames1.Split(',');
                                    foreach (string word in words1)
                                    {
                                        if (word != "")
                                        {
                                            FileAttach fileAttach = new FileAttach();
                                            fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                            fileAttach.StepNo = request.StepNo;
                                            fileAttach.RequestId = request.Id;
                                            fileAttach.RequestDetailId = requestdetail.Id;
                                            fileAttach.TimeCreate = DateTime.Now;
                                            fileAttach.CreateBy = UserManager.CurrentUser.InsideCode;
                                            fileAttach.Status = Key.Status.Available;
                                            fileAttach.Domain = "HinhLayoutMatTien";
                                            db.FileAttachs.Add(fileAttach);
                                            myCollection.Add(fileAttach.Uri.ToString());
                                            db.SaveChanges();
                                        }
                                    }
                                }

                                string fNames2 = Convert.ToString(item.ListNameFile_2);
                                if (fNames2 != null && fNames2 != "")
                                {
                                    string[] words2 = fNames2.Split(',');
                                    foreach (string word in words2)
                                    {
                                        if (word != "")
                                        {
                                            FileAttach fileAttach = new FileAttach();
                                            fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                            fileAttach.StepNo = request.StepNo;
                                            fileAttach.RequestId = request.Id;
                                            fileAttach.RequestDetailId = requestdetail.Id;
                                            fileAttach.TimeCreate = DateTime.Now;
                                            fileAttach.CreateBy = UserManager.CurrentUser.InsideCode;
                                            fileAttach.Status = Key.Status.Available;
                                            fileAttach.Domain = "HinhLayoutmatBang";
                                            db.FileAttachs.Add(fileAttach);
                                            myCollection.Add(fileAttach.Uri.ToString());
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Edit - ThuongNM2 -  08/10/2018 - Sửa hàm lưu hình SaveUploadedFileDetailMultipleCol
        //▲ Add - NgoanHT -  05/12/2017 - Thêm hàm lưu hình SaveUploadedFileDetailMultipleCol
        //▼ Add - NgoanHT -  18/04/2018 - Thêm hàm lưu hình SaveUploadedFileDetailMultipleColInOut
        [HttpPost]
        public ActionResult SaveUploadedFileDetailMultipleColInOut(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        int id = item.RequestDId;
                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        if (requestdetail != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestDetailId == requestdetail.Id && f.Status == 1
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0;
                            }

                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhLayoutMatTien";
                                    db.FileAttachs.Add(fileAttach);
                                    myCollection.Add(fileAttach.Uri.ToString());
                                    db.SaveChanges();
                                }
                            }
                            string fNames2 = Convert.ToString(item.ListNameFile_2);
                            //▼ Add - NgoanHT -  05/04/2018 - thêm điều kiện
                            if (fNames2 != null)
                            {
                                string[] words2 = fNames2.Split(',');
                                foreach (string word in words2)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = word;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = requestdetail.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutmatBang";
                                        db.FileAttachs.Add(fileAttach);
                                        myCollection.Add(fileAttach.Uri.ToString());
                                        db.SaveChanges();
                                    }
                                }
                            }
                            //▲ Add - NgoanHT -  05/04/2018 - thêm điều kiện
                        }
                    }

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Add - NgoanHT -  05/12/2017 - Thêm hàm lưu hình SaveUploadedFileDetailMultipleColInOut

        //▼  Add - LuanNT44 - 03/12/2019 - Loại 24 - CSVC
        public ActionResult LoadInfoNhomHangMucCSVC_24()
        {
            DataTable tb = sql.ExecuteCommand("sp_LoadInfoNhomHangMucCSVC_24", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult LoadInfoThietBiCSVC_24()
        {
            DataTable tb = sql.ExecuteCommand("sp_LoadInfoThietBiCSVC_24", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 03/12/2019 - Loại 24 - CSVC

        //▼  Add - LuanNT44 - 02/02/2018 - Loại 201 - Kiểm hàng online
        public ActionResult GetNameShop(string MaShop_sender)
        {
            DataTable tb = sql.ExecuteCommand("sp_GetNameShop", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@WarehouseCode",MaShop_sender)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 30/03/2018 - Loại 201 - Kiểm hàng online
        //▼  Add - LuanNT44 - 14/06/2018 - Loại 48 - CL vi phạm
        public ActionResult GetAllEmpQA()
        {
            DataTable tb = sql.ExecuteCommand("sp_GetAllEmpQA", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 14/06/2018 - Loại 48 - CL vi phạm
        //▼  Add - LuanNT44 - 02/07/2018 - Loại 24 - Sữa chữa CSVC
        public ActionResult CheckUserCreateCalllog()
        {
            SqlParameter[] Pram2 = new SqlParameter[]
                                                {
                                                    new SqlParameter("@sender",UserManager.CurrentUser.InsideCode)
                                                };
            DataTable tb = sql.ExecuteCommand("sp_CheckDieuKienCreateCalllog_24", CommandType.StoredProcedure, Pram2);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 02/07/2018 - Loại 24 - Sữa chữa CSVC
        //▼  Add - LuanNT44 - 07/05/2018 - Loại 24 - Sữa chữa CSVC
        public ActionResult GetRegionUser(long request)
        {
            DataTable tb = sql.ExecuteCommand("sp_GetRegionUser", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@requestID",request)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetDSThietBi24()
        {
            DataTable tb = sql.ExecuteCommand("sp_GetDanhSachThietBi_24", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 07/05/2018 - Loại 24 - Sữa chữa CSVC
        //▼  Add - LuanNT44 - 09/03/2018 - Loại 204 - Chốt CR qua Calllog
        public ActionResult Get_PhongBan_ChotCR()
        {
            DataTable tb = sql.ExecuteCommand("Get_OrganizationHierachiesAddress_ChotCR", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 09/03/2018 - Loại 204 - Chốt CR qua Calllog
        //▼  Add - LuanNT44 - 18/04/2018 - Bỏ bước Trưởng bộ phận duyệt
        public ActionResult GetTBPSystemOrgan_204()
        {
            DataTable tb = sql.ExecuteCommand("sp_GetTBPSystemOrgan_204", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 18/04/2018 - Bỏ bước Trưởng bộ phận duyệt
        //▼  Add - LuanNT44 - 01/10/2019 - Loại 51 - Duyệt GG
        public ActionResult CheckQuyGiamGia_51(string IdRequest)
        {
            DataTable tb = sql.ExecuteCommand("sp_CheckQuyGiamGia_51", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@RequestID",IdRequest)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 01/10/2019 - Loại 51 - Duyệt GG
        //▼  Add - LuanNT44 - 02/02/2018 - Loại 201 - Kiểm hàng online
        [HttpPost]
        public ActionResult CreateCalllogKiemHang(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao calllog

                    request.StepNo = 1;
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.Status = Key.Status.Available;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                    db.Requests.Add(request);

                    #endregion

                    db.SaveChanges();

                    #region Tao chi tiet
                    foreach (var item in details)
                    {
                        RequestDetail rs = new RequestDetail();
                        rs.RequestId = request.Id;
                        rs.ShopCode = item.WarehouseCode;
                        rs.SaleCode = item.NguoiKiemKe;
                        rs.Time1 = DateTime.ParseExact(item.NgayKiemKe.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        rs.Property1 = item.ModelKiem;
                        rs.Quantity = item.SoLuongModelKiem;
                        rs.Status = Key.Status.Available;
                        db.RequestDetails.Add(rs);
                        db.SaveChanges();

                        if (rs.Id != 0)
                        {
                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = rs.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    db.FileAttachs.Add(fileAttach);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    #endregion

                    db.SaveChanges();

                    #region Gán người xử lý và gọi Notification

                    string ListAssigner = string.Empty;

                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                    if (table != null && table.Rows.Count > 0)
                    {
                        RequestHub requestHub = new RequestHub();
                        requestHub.id = request.Id;
                        requestHub.title = request.Title;
                        requestHub.description = form["Description"].ToString();
                        requestHub.date = request.TimeCreate.ToShortDateString() + " " + request.TimeCreate.ToLongTimeString();
                        requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                        NotificationManager nf = new NotificationManager();
                        List<string> assigners = new List<string>();
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                            assigners.Add(table.Rows[i]["EmailShort"].ToString());
                        }
                        nf.Send(assigners, "Bạn có yêu cầu mới : " + request.Id, request.Id);
                        nf.RequestInsert(assigners, requestHub);
                    }


                    #endregion

                    #region Cc
                    foreach (var item in stringCc)
                    {
                        var AssignerCc = new Assigner();
                        AssignerCc.RequestId = request.Id;
                        AssignerCc.EmployeeCode = item.ToString();
                        AssignerCc.StepNo = 1;
                        AssignerCc.Type = Key.TypeAssigner.Cc;
                        AssignerCc.TimeCreate = DateTime.Now;
                        AssignerCc.Status = Key.StatusRequest.Waitting;
                        db.Assigners.Add(AssignerCc);
                    }
                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + Convert.ToString(request.Id) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }

        //▲  Add - LuanNT44 - 02/02/2018 - Loại 201 - Kiểm hàng online
        //▼  Add - LuanNT44 - 03/04/2018 - Loại 201 - Kiểm hàng online
        [HttpPost]
        public ActionResult CreateCalllogKiemHang_Uphinh_Step(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                bool isSavedSuccessfully = true;
                List<string> myCollection = new List<string>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    #endregion

                    #region Tao chi tiet
                    foreach (var item in details)
                    {
                        RequestDetail rs = new RequestDetail();
                        rs.RequestId = item.RequestId;
                        rs.ShopCode = item.MaShop;
                        rs.SaleCode = item.NguoiKiemKe;
                        rs.Time1 = DateTime.ParseExact(item.NgayKiemKe.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        rs.Property1 = item.ModelKiem;
                        rs.Quantity = item.SoLuongModelKiem;
                        rs.Status = Key.Status.Available;
                        rs.ItemId = 1;
                        db.RequestDetails.Add(rs);
                        db.SaveChanges();

                        if (rs.Id != 0)
                        {
                            if (item.ListNameFile != null)
                            {
                                string fNames1 = Convert.ToString(item.ListNameFile);
                                string[] words1 = fNames1.Split(',');
                                foreach (string word in words1)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.FolderFileAttach + word;
                                        fileAttach.StepNo = 1;
                                        fileAttach.RequestId = item.RequestId;
                                        fileAttach.RequestDetailId = rs.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        if (item.check_trehan != null)
                                        {
                                            fileAttach.Domain = item.check_trehan;
                                        }
                                        db.FileAttachs.Add(fileAttach);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    //db.SaveChanges();

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Hình ảnh)", ex.ToString());
                    }
                    #endregion

                    //db.SaveChanges();

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0}", ex.ToString()));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }

        //▲  Add - LuanNT44 - 03/04/2018 - Loại 201 - Kiểm hàng online
        //▼  Add - LuanNT44 - 27/04/2018 - Loại 201 - Kiểm hàng online
        public ActionResult SaveUploadedFileDetailMultiple_201(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        long id = item.RequestDId;
                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        if (requestdetail != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestDetailId == requestdetail.Id && f.Status == 1
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0;
                            }

                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    if (item.check_trehan != null)
                                    {
                                        fileAttach.Domain = item.check_trehan;
                                    }
                                    db.FileAttachs.Add(fileAttach);
                                    myCollection.Add(fileAttach.Uri.ToString());
                                    db.SaveChanges();
                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲  Add - LuanNT44 - 27/04/2018 - Loại 201 - Kiểm hàng online

        //▼  Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA
        [WebMethod(EnableSession = true)]
        public ActionResult SaveUploadedFileDetailMultipleCol_213(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        long id = item.RequestId;
                        Request req = db.Requests.FirstOrDefault(x => x.Id == id);
                        if (req != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestId == req.Id && f.Status == 1 && f.Domain == "HinhMayLoi"
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0; // xóa hình cũ
                            }

                            var File2 = from f in db.FileAttachs
                                        where f.RequestId == req.Id && f.Status == 1 && f.Domain == "HinhVoHop"
                                        select f;
                            foreach (FileAttach f in File2)
                            {
                                f.Status = 0; //xóa hình cũ
                            }

                            string fNames1 = Convert.ToString(item.ListNameFile1);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhMayLoi";
                                    db.FileAttachs.Add(fileAttach);
                                    myCollection.Add(fileAttach.Uri.ToString());
                                    db.SaveChanges();
                                }
                            }
                            string fNames2 = Convert.ToString(item.ListNameFile2);
                            string[] words2 = fNames2.Split(',');
                            foreach (string word in words2)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhVoHop";
                                    db.FileAttachs.Add(fileAttach);
                                    myCollection.Add(fileAttach.Uri.ToString());
                                    db.SaveChanges();
                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲  Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA
        //▼  Add - LuanNT44 - 28/07/2020 - Loại 24 - CSVC
        [HttpPost]
        public ActionResult CreateCalllogCSVC_24(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao calllog

                    request.StepNo = 1;
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.Status = Key.Status.Available;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                    db.Requests.Add(request);
                    #endregion
                    db.SaveChanges();
                    requestDics.Add("single", request);

                    #region Conversation create
                    var converstation = new Conversation();
                    converstation.RequestId = request.Id;
                    converstation.Sender = UserManager.CurrentUser.InsideCode;
                    converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                    converstation.Status = Key.Status.Available;
                    converstation.StepNo = 0;
                    converstation.TimeCreate = DateTime.Now;
                    converstation.Type = Key.Conversation.Create;
                    converstation.Message = message;
                    db.Conversations.Add(converstation);
                    #endregion

                    #region Tao chi tiet
                    foreach (var item in details)
                    {
                        RequestDetail detail = new RequestDetail();
                        detail.RequestId = request.Id;
                        detail.Status = Key.Status.Available;

                        detail.Property1 = item.Nhomhangmuc;
                        detail.Property2 = item.Chitiethangmuc;
                        if (item.Ngaydukien.ToString() != "" && item.Ngaydukien.ToString() != null)
                        {
                            detail.Time1 = DateTime.ParseExact(item.Ngaydukien.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        detail.Property3 = item.Donvi;
                        detail.Quantity = item.Soluong;
                        if (item.Dongia > 0)
                        {
                            detail.Quantity1 = item.Dongia;
                            detail.Quantity4 = item.Soluong * item.Dongia;
                        }
                        if (item.Dongia_Min > 0)
                        {
                            detail.Money1 = item.Dongia_Min;
                        }
                        if (item.Dongia_Max > 0)
                        {
                            detail.Money2 = item.Dongia_Max;
                        }
                        if (item.DongiaThuc > 0)
                        {
                            detail.Quantity2 = item.DongiaThuc;
                            detail.Quantity3 = item.Soluong * item.DongiaThuc;
                        }
                        detail.Property7 = item.Ghichu_BD;
                        detail.Property8 = item.Ghichu_ThiCong;
                        detail.Property9 = item.Ghichu_NghiemThu;
                        detail.Approved = item.isCSVC;
                        detail.Quantity5 = item.Type;
                        detail.Property4 = item.idNhomHangmuc;
                        detail.Property5 = item.NCC;
                        detail.Property6 = item.SDT_NCC;
                        db.RequestDetails.Add(detail);
                        db.SaveChanges();
                        if (detail.Id != 0)
                        {
                            string fNames1 = Convert.ToString(item.ListNameFile1);
                            if (fNames1 != null && fNames1 != "")
                            {
                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = fNames1;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.RequestDetailId = detail.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                fileAttach.Domain = "Hinh_BD";
                                db.FileAttachs.Add(fileAttach);
                            }

                            string fNames2 = Convert.ToString(item.ListNameFile2);
                            if (fNames2 != null && fNames2 != "")
                            {
                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = fNames2;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.RequestDetailId = detail.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                fileAttach.Domain = "Hinh_ThiCong";
                                db.FileAttachs.Add(fileAttach);
                            }

                            string fNames3 = Convert.ToString(item.ListNameFile3);
                            if (fNames3 != null && fNames3 != "")
                            {
                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = fNames3;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.RequestDetailId = detail.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                fileAttach.Domain = "Hinh_NghiemThu";
                                db.FileAttachs.Add(fileAttach);
                            }
                        }
                    }
                    #endregion

                    db.SaveChanges();

                    #region Gán người xử lý và gọi Notification

                    string ListAssigner = string.Empty;

                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                    if (table != null && table.Rows.Count > 0)
                    {
                        RequestHub requestHub = new RequestHub();
                        requestHub.id = request.Id;
                        requestHub.title = request.Title;
                        requestHub.description = form["Description"].ToString();
                        requestHub.date = request.TimeCreate.ToShortDateString() + " " + request.TimeCreate.ToLongTimeString();
                        requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                        NotificationManager nf = new NotificationManager();
                        List<string> assigners = new List<string>();
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                            assigners.Add(table.Rows[i]["EmailShort"].ToString());
                        }
                        nf.Send(assigners, "Bạn có yêu cầu mới : " + request.Id, request.Id);
                        nf.RequestInsert(assigners, requestHub);
                    }
                    #endregion

                    #region Cc
                    foreach (var item in stringCc)
                    {
                        var AssignerCc = new Assigner();
                        AssignerCc.RequestId = request.Id;
                        AssignerCc.EmployeeCode = item.ToString();
                        AssignerCc.StepNo = 1;
                        AssignerCc.Type = Key.TypeAssigner.Cc;
                        AssignerCc.TimeCreate = DateTime.Now;
                        AssignerCc.Status = Key.StatusRequest.Waitting;
                        db.Assigners.Add(AssignerCc);
                    }
                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;

                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + Convert.ToString(request.Id) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }

        [WebMethod(EnableSession = true)]
        public ActionResult SaveUploadedFileDetailMultipleCol_24(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    if (request != null)
                    {
                        var File1 = from f in db.FileAttachs
                                    where f.RequestId == request.Id && f.Status == 1 && f.Domain == "Hinh_BD"
                                    select f;
                        foreach (FileAttach f in File1)
                        {
                            f.Status = 0; //xóa hình cũ
                        }

                        var File2 = from f in db.FileAttachs
                                    where f.RequestId == request.Id && f.Status == 1 && f.Domain == "Hinh_ThiCong"
                                    select f;
                        foreach (FileAttach f in File2)
                        {
                            f.Status = 0; //xóa hình cũ
                        }

                        var File3 = from f in db.FileAttachs
                                    where f.RequestId == request.Id && f.Status == 1 && f.Domain == "Hinh_NghiemThu"
                                    select f;
                        foreach (FileAttach f in File3)
                        {
                            f.Status = 0; //xóa hình cũ
                        }
                        if (request.StepNo == 1) //lưu details new
                        {
                            var detail_old = from d in db.RequestDetails
                                             where d.RequestId == request.Id && d.Status == 1
                                             select d;
                            foreach (RequestDetail d in detail_old)
                            {
                                d.Status = 0; //xóa details cũ
                            }
                            foreach (var item in objects)
                            {
                                RequestDetail detail = new RequestDetail();
                                detail.RequestId = request.Id;
                                detail.Status = Key.Status.Available;

                                detail.Property1 = item.Nhomhangmuc;
                                detail.Property2 = item.Chitiethangmuc;
                                if (item.Ngaydukien.ToString() != "" && item.Ngaydukien.ToString() != null)
                                {
                                    detail.Time1 = DateTime.ParseExact(item.Ngaydukien.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                }
                                detail.Property3 = item.Donvi;
                                detail.Quantity = item.Soluong;
                                if (item.Dongia > 0)
                                {
                                    detail.Quantity1 = item.Dongia;
                                    detail.Quantity4 = item.Soluong * item.Dongia;
                                }
                                if (item.Dongia_Min > 0)
                                {
                                    detail.Money1 = item.Dongia_Min;
                                }
                                if (item.Dongia_Max > 0)
                                {
                                    detail.Money2 = item.Dongia_Max;
                                }
                                if (item.DongiaThuc > 0)
                                {
                                    detail.Quantity2 = item.DongiaThuc;
                                    detail.Quantity3 = item.Soluong * item.DongiaThuc;
                                }
                                detail.Property7 = item.Ghichu_BD;
                                detail.Property8 = item.Ghichu_ThiCong;
                                detail.Property9 = item.Ghichu_NghiemThu;
                                detail.Approved = item.isCSVC;
                                detail.Quantity5 = item.Type;
                                detail.Note = item.Ghichu;
                                detail.Property4 = item.idNhomHangmuc;
                                detail.Property5 = item.NCC;
                                detail.Property6 = item.SDT_NCC;
                                db.RequestDetails.Add(detail);
                                db.SaveChanges();
                                if (detail.Id != 0)
                                {
                                    string fNames1 = Convert.ToString(item.ListNameFile1);
                                    if (fNames1 != null && fNames1 != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = fNames1;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = detail.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "Hinh_BD";
                                        db.FileAttachs.Add(fileAttach);
                                    }

                                    string fNames2 = Convert.ToString(item.ListNameFile2);
                                    if (fNames2 != null && fNames2 != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = fNames2;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = detail.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "Hinh_ThiCong";
                                        db.FileAttachs.Add(fileAttach);
                                    }

                                    string fNames3 = Convert.ToString(item.ListNameFile3);
                                    if (fNames3 != null && fNames3 != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = fNames3;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = detail.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "Hinh_NghiemThu";
                                        db.FileAttachs.Add(fileAttach);
                                    }
                                }
                            }
                        }
                        if (request.StepNo == 2 || request.StepNo == 3)
                        {
                            foreach (var item in objects)
                            {
                                long id = item.Id;
                                var detail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (detail != null)
                                {
                                    string fNames1 = Convert.ToString(item.ListNameFile1);
                                    if (fNames1 != null && fNames1 != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = fNames1;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = item.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "Hinh_BD";
                                        db.FileAttachs.Add(fileAttach);
                                    }

                                    string fNames2 = Convert.ToString(item.ListNameFile2);
                                    if (fNames2 != null && fNames2 != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = fNames2;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = item.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "Hinh_ThiCong";
                                        db.FileAttachs.Add(fileAttach);
                                    }

                                    string fNames3 = Convert.ToString(item.ListNameFile3);
                                    if (fNames3 != null && fNames3 != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = fNames3;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = item.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "Hinh_NghiemThu";
                                        db.FileAttachs.Add(fileAttach);
                                    }
                                }
                            }
                        }
                        #region Lưu ảnh
                        try
                        {
                            foreach (string fileName in Request.Files)
                            {
                                HttpPostedFileBase file = Request.Files[fileName];
                                fName = fileName;
                                if (file != null && file.ContentLength > 0)
                                {
                                    // Save file
                                    var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                    string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                    var path = string.Format("{0}\\{1}", pathString, fName);
                                    file.SaveAs(path);
                                    // Save file attach fo database
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                        }
                        #endregion
                        db.SaveChanges();
                    }

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲  Add - LuanNT44 - 28/07/2020 - Loại 24 - CSVC
        #region NghiaTV5 - 08/05/2018 - 205 claim bảo hiểm
        public ActionResult CreateCalllogClaimNhaBaoHiem_Type205(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    DateTime dateFrom = DateTime.Parse(form["dateFrom"].ToString());
                    DateTime dateTo = DateTime.Parse(form["dateTo"].ToString());
                    var timeSend = TimeSpan.Parse(form["timeSend"].ToString());
                    var schedule = form["schedule"];
                    var scheduleTypeData = form["scheduleTypeData"];

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    var strdetailsLimited = Convert.ToString(form["DetailsLimited"]);
                    var detailsLimited = JsonConvert.DeserializeObject<dynamic>(strdetailsLimited);

                    #endregion
                    #region
                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');
                    #endregion
                    if (sender != null && sender != "")
                    {
                        #region
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                        #endregion
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    #region Tao calllog

                    request.StepNo = 1;
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.Status = Key.Status.Available;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                    db.Requests.Add(request);

                    #endregion

                    db.SaveChanges();
                    string fNames = "";
                    string[] arr_fNames = null;
                    long Requestsdetail = 0;
                    #region Tao chi tiet
                    foreach (var item in details)
                    {
                        RequestDetail rs = new RequestDetail();
                        rs.RequestId = request.Id;
                        rs.ShopCode = request.FromShop;
                        rs.Property1 = item.NoiDung;
                        if (item.GhiChu != "" && item.GhiChu != null)
                        {
                            rs.Property2 = item.GhiChu;
                        }
                        rs.Property11 = item.LoaiClaim;
                        rs.Time1 = DateTime.Now;
                        rs.Status = Key.Status.Available;
                        db.RequestDetails.Add(rs);
                        db.SaveChanges();
                        //▼ Edit - TrongNM3 - 11/12/2018 - Loai 205 - claim nha bao hiem
                        #region Phan Loại để lưu hình
                        if (rs.Id > 0)
                        {
                            Requestsdetail = rs.Id;
                            #region lưu thêm hình dưới chi tiết
                            foreach (var itemFileUpload in item.FileUpload)
                            {
                                fNames = "";
                                arr_fNames = null;
                                #region Phân Loại để lưu hình

                                #region get string name img
                                fNames = Convert.ToString(itemFileUpload.ListFileName);
                                #endregion

                                #region convert to array
                                if (!string.IsNullOrWhiteSpace(fNames))
                                {
                                    arr_fNames = fNames.Split(',');
                                }
                                #endregion

                                #region Insert FileAttach
                                if (arr_fNames != null)
                                {
                                    foreach (string fName in arr_fNames)
                                    {
                                        if (fName != "")
                                        {
                                            FileAttach fileAttach = new FileAttach();
                                            fileAttach.Uri = Keyword.FolderFileAttach + fName.Trim();
                                            fileAttach.StepNo = request.StepNo;
                                            fileAttach.RequestId = request.Id;
                                            fileAttach.CreateBy = UserManager.CurrentUser.InsideCode;
                                            fileAttach.RequestDetailId = Requestsdetail;
                                            fileAttach.TimeCreate = DateTime.Now;
                                            fileAttach.Status = Key.Status.Available;
                                            fileAttach.Domain = itemFileUpload.col_Name;

                                            db.FileAttachs.Add(fileAttach);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                                #endregion

                                #endregion
                            }
                            #endregion
                            db.SaveChanges();

                        }
                        #endregion
                    }
                    #endregion

                    db.SaveChanges();

                    #region Gán người xử lý và gọi Notification

                    string ListAssigner = string.Empty;

                    SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id) };
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                    if (table != null && table.Rows.Count > 0)
                    {
                        RequestHub requestHub = new RequestHub();
                        requestHub.id = request.Id;
                        requestHub.title = request.Title;
                        requestHub.description = form["Description"].ToString();
                        requestHub.date = request.TimeCreate.ToShortDateString() + " " + request.TimeCreate.ToLongTimeString();
                        requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                        NotificationManager nf = new NotificationManager();
                        List<string> assigners = new List<string>();
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                            assigners.Add(table.Rows[i]["EmailShort"].ToString());
                        }
                        nf.Send(assigners, "Bạn có yêu cầu mới : " + request.Id, request.Id);
                        nf.RequestInsert(assigners, requestHub);
                    }


                    #endregion

                    #region Cc
                    foreach (var item in stringCc)
                    {
                        var AssignerCc = new Assigner();
                        AssignerCc.RequestId = request.Id;
                        AssignerCc.EmployeeCode = item.ToString();
                        AssignerCc.StepNo = 1;
                        AssignerCc.Type = Key.TypeAssigner.Cc;
                        AssignerCc.TimeCreate = DateTime.Now;
                        AssignerCc.Status = Key.StatusRequest.Waitting;
                        db.Assigners.Add(AssignerCc);
                    }
                    #endregion

                    #region Lưu ảnh
                    try
                    {
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fileName);
                                file.SaveAs(path);
                                // Save file attach fo database
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + Convert.ToString(request.Id) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create);
                    TempData["Message"] = strReturn;
                    var jsonResult = Json(strReturn, JsonRequestBehavior.AllowGet);
                    return jsonResult;
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }
        public ActionResult AddPictureInDetailCalllog(Request request, FormCollection form)
        {

            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (ModelState.IsValid)
            {
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region thông tin lấy xuống
                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
                    var requestId = form["RequestId"].EParseToLong();
                    #endregion

                    Request requests = null;
                    int Requestsdetail = 0;
                    string fNames = null;
                    string[] arr_fNames = null;

                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        requests = db.Requests.FirstOrDefault(x => x.Id == requestId);
                    }
                    if (requests != null)
                    {
                        #region lưu thêm hình dưới chi tiết
                        foreach (var item in details)
                        {
                            Requestsdetail = 0;
                            fNames = "";
                            Requestsdetail = item.Id;
                            #region Phân Loại để lưu hình

                            #region get string name img
                            fNames = Convert.ToString(item.ListFileName);
                            #endregion

                            #region convert to array
                            if (!string.IsNullOrWhiteSpace(fNames))
                            {
                                arr_fNames = fNames.Split(',');
                            }
                            #endregion

                            #region Insert FileAttach
                            if (arr_fNames != null)
                            {
                                foreach (string fName in arr_fNames)
                                {
                                    if (fName != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.FolderFileAttach + fName.Trim();
                                        fileAttach.StepNo = requests.StepNo;
                                        fileAttach.RequestId = requests.Id;
                                        fileAttach.CreateBy = UserManager.CurrentUser.InsideCode;
                                        fileAttach.RequestDetailId = Requestsdetail;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = item.col_Name;

                                        db.FileAttachs.Add(fileAttach);
                                        db.SaveChanges();
                                    }
                                }
                            }
                            #endregion


                            #endregion
                        }
                        #endregion

                        #region Lưu ảnh
                        try
                        {
                            foreach (string fileName in Request.Files)
                            {
                                HttpPostedFileBase file = Request.Files[fileName];
                                if (file != null && file.ContentLength > 0)
                                {
                                    // Save file
                                    var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                    string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                    var path = string.Format("{0}\\{1}", pathString, fileName);
                                    file.SaveAs(path);
                                    // Save file attach fo database
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            return null;
                        }
                        #endregion
                        db.SaveChanges();
                    }
                    else
                    {
                        TempData["Message"] = "Không tìm thấy yêu cầu " + requestId + " ! <br/>Xin vui lòng thử lại! <br/>";
                    }
                }
                catch (Exception ex)
                {
                    return null;
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi cập nhật file! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }
        [HttpPost]
        //ChuongNT3 - 12/06/2018 - fix trao đổi 
        public ActionResult Conversationall(long? Id, string message, long? requestdetailId)
        {
            if (Id != null && message != null && message != "")// Add - NghiaTV5 - 14/05/2018 - claim nhà bảo hiểm
            {
                var request = db.Requests.FirstOrDefault(x => x.Id == Id);
                if (request.TypeId == 205)
                {
                    var requestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                    if (request != null)
                    {
                        #region Insert Converstation
                        Conversation conversation = new Conversation();
                        conversation.RequestDetailId = requestdetailId;
                        conversation.RequestId = request.Id;
                        conversation.Sender = UserManager.CurrentUser.InsideCode;// Edit - NghiaTV5 - 31/03/2018 - 205 claim bảo hiểm
                        conversation.Message = message;
                        conversation.Status = Key.Status.Available;
                        conversation.TimeCreate = DateTime.Now;
                        conversation.Type = Key.Conversation.Comment;
                        conversation.StepNo = request.StepNo;
                        db.Conversations.Add(conversation);
                        db.SaveChanges();

                        SqlParameter[] param = new SqlParameter[] {
                        new SqlParameter("@RequestId",request.Id),
                        };
                        DataTable table205 = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, param);
                        if (table205 != null && table205.Rows.Count > 0)
                        {
                            var jsonResult = Json(table205.EParseToObjects(), JsonRequestBehavior.AllowGet);
                            jsonResult.MaxJsonLength = int.MaxValue;
                            return jsonResult;
                        }
                        else
                        {
                            return null;
                        }
                        #endregion

                    }
                    return null;
                }
                else
                {
                    //chổ này sau sẽ viết cho tất cả các trao đổi thuộc các loại khác nhau 
                    return null;
                }
            }
            else
            {
                return null;
            }
        }
        //ChuongNT3 - 12/06/2018 - fix trao đổi 
        //▶ Edit - TrongNM3 - 17/12/2018 - Loai 205 - claim nha bao hiem -1
        [HttpGet]
        public ActionResult DownloadSup205(int type)
        {

            string filename;
            if (type == 1)
            {
                string path = string.Empty;
                string fileName = string.Empty;
                string pathData = string.Empty;
                path = "~/TemplateExcel/Bang ke chi tiet gia tri thiet hai.xlsx";
                fileName = "Bang ke chi tiet gia tri thiet hai.xlsx";
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=Bang ke chi tiet gia tri thiet hai-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }
            else if (type == 2)
            {



                filename = "~/TemplateExcel/Tường trình chi tiết su co khac.docx";

                if (filename != "")
                {

                    string path = Server.MapPath(filename);

                    System.IO.FileInfo file = new System.IO.FileInfo(path);

                    if (file.Exists)
                    {

                        Response.Clear();

                        Response.AddHeader("Content-Disposition", "attachment; filename=" + file.Name);

                        Response.AddHeader("Content-Length", file.Length.ToString());

                        Response.ContentType = "applica tion/octet-stream";

                        Response.WriteFile(file.FullName);

                        Response.End();

                    }

                    else
                    {

                        Response.Write("This file does not exist");

                    }

                }
            }
            else if (type == 3)
            {

                filename = "~/TemplateExcel/Tuong trinh do mat cap - dap pha.docx";

                if (filename != "")
                {

                    string path = Server.MapPath(filename);

                    System.IO.FileInfo file = new System.IO.FileInfo(path);

                    if (file.Exists)
                    {

                        Response.Clear();

                        Response.AddHeader("Content-Disposition", "attachment; filename=" + file.Name);

                        Response.AddHeader("Content-Length", file.Length.ToString());

                        Response.ContentType = "applica tion/octet-stream";

                        Response.WriteFile(file.FullName);

                        Response.End();

                    }

                    else
                    {

                        Response.Write("This file does not exist");

                    }
                }
            }
            else if (type == 4)
            {

                filename = "~/TemplateExcel/Don xin xac nhan cua CA ve viec trinh bao.docx";

                if (filename != "")
                {

                    string path = Server.MapPath(filename);

                    System.IO.FileInfo file = new System.IO.FileInfo(path);

                    if (file.Exists)
                    {

                        Response.Clear();

                        Response.AddHeader("Content-Disposition", "attachment; filename=" + file.Name);

                        Response.AddHeader("Content-Length", file.Length.ToString());

                        Response.ContentType = "applica tion/octet-stream";

                        Response.WriteFile(file.FullName);

                        Response.End();

                    }

                    else
                    {

                        Response.Write("This file does not exist");

                    }
                }
            }
            return null;
        }
        #endregion

        //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 

        public ActionResult GetHXLITSupport()
        {
            DataTable table = sql.ExecuteCommand("GetHXLITSupport", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var json = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                json.MaxJsonLength = int.MaxValue;
                return json;
            }
            else return null;
        }
        //ChuongNT3 - 27/07/2018 - chuyển vào masterdata 

        //▼ChuongNT3 - 14/08/2018 - loại 37
        public ActionResult GetList_LoaiTruyThu()
        {
            DataTable table = sql.ExecuteCommand("GetListLoaiTruyThu", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var json = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                json.MaxJsonLength = int.MaxValue;
                return json;
            }
            else return null;
        }
        //▲ ChuongNT3 - 14/08/2018 - loại 37
        //▼ ChuongNT3 - 20/03/2018 - Thêm cột KPI 
        public ActionResult GetListITSuport()
        {
            DataTable table = sql.ExecuteCommand("GetListITSuport", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var json = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                json.MaxJsonLength = int.MaxValue;
                return json;
            }
            else return null;
        }
        //▲ ChuongNT3 - 20/03/2018 - Thêm cột KPI
        //▼ ChuongNT3 - 22/03/2018 -  Cập nhật layout
        #region UpdateLayout
        static string dataUpdateLayout; //ChuongNT3 - 27/03/2018 - Lưu dữ liệu thao tác 
        public ActionResult Confirm_UpdateLayout()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            //▼ ChuongNT3 - 27/03/2018 - Lưu dữ liệu thao tác 
            else
            {
                if (dataUpdateLayout != null && dataUpdateLayout != "")
                {
                    var returnObjects = JsonConvert.DeserializeObject<dynamic>(dataUpdateLayout);
                    ViewBag.dataReturn = returnObjects;
                    dataUpdateLayout = "";
                }
                else
                {
                    ViewBag.dataReturn = "";
                }
            }
            //▲ ChuongNT3 - 27/03/2018 - Lưu dữ liệu thao tác 
            return View();
        }
        public ActionResult GetCategoriesUpdateLayout()
        {
            DataTable tb = sql.ExecuteCommand("GetCategoriesUpdateLayout", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        [HttpPost]
        public ActionResult GetDataSearchUpdateLayout(string loaiYC, string IdCallLog, string timeCreateRequestS, string timeCreateRequestE,
            string timeFinishRequestS, string timeFinishRequestE, string timeComfirmRequestS, string timeComfirmRequestE, string sender, string shops, List<string> status)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@TypeId",loaiYC),
                    new SqlParameter("@RequestId",IdCallLog),
                    new SqlParameter("@timeCreateRequestStart",timeCreateRequestS),
                    new SqlParameter("@timeCreateRequestEnd",timeCreateRequestE),
                    new SqlParameter("@timeFinishRequestStart",timeFinishRequestS),
                    new SqlParameter("@timeFinishRequestEnd",timeFinishRequestE),
                    new SqlParameter("@timeComfirmRequestStart",timeComfirmRequestS),
                    new SqlParameter("@timeComfirmRequestEnd",timeComfirmRequestE),
                    new SqlParameter("@Senders",sender),
                    new SqlParameter("@Shops",shops),
                    new SqlParameter("@Status",String.Join(",",status)),
                };
            DataTable table = sql.ExecuteCommand("SearchUpdateLayout", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else return null;
        }

        public ActionResult SaveUpdateLayout(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            var details = form["Details"].ToString();
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            dataUpdateLayout = form["Details"].ToString(); //ChuongNT3 - 27/03/2018 - Lưu dữ liệu thao tác 

            try
            {
                if (objects == null && objects.ToString() == "[]")
                {
                    TempData["Message"] = String.Format("Lưu thất bại. Vui Lòng kiểm tra lại thông tin");
                }
                else
                {
                    foreach (var item in objects)
                    {
                        decimal Id = item.Id;
                        RequestDetail requestDetails = db.RequestDetails.FirstOrDefault(u => u.Id == Id);
                        if (requestDetails != null)
                        {

                            DateTime now = DateTime.Now;
                            requestDetails.Quantity2 = item.SelectQA;
                            requestDetails.Quantity3 = item.SelectHC;
                            requestDetails.Quantity4 = item.SelectPM;
                            requestDetails.Quantity5 = item.SelectMK;
                            if (item.History.ToString() == "[]")
                                requestDetails.Note = string.Empty;
                            else
                                requestDetails.Note = item.History;
                            requestDetails.Time2 = now;
                        }
                        db.SaveChanges();
                    }
                    TempData["MessageSuccess"] = String.Format("Lưu thành công");
                }
            }
            catch
            {
                TempData["Message"] = String.Format("Lưu thất bại");
            }
            return RedirectToAction("Confirm_UpdateLayout");
        }
        #endregion
        //▼ Add - NgoanHT - 05/04/2018 - Loại: 181 – Thêm hàm Get_RepairItem
        public ActionResult Get_RepairItem()
        {
            DataTable table = sql.ExecuteCommand("sp_MasterDatas_getRepairItem", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲ Add - NgoanHT - 05/04/2018 - Loại: 181 – Thêm hàm Get_RepairItem
        //▲ ChuongNT3 - 22/03/2018 -  Cập nhật layout

        #region ExceptionBugList
        public ActionResult ExceptionBugList()
        {

            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (UserManager.CurrentUser.InsideCode != "13378" && UserManager.CurrentUser.InsideCode != "22451" && UserManager.CurrentUser.InsideCode != "2599")
                return RedirectToAction("Index", "Home");
            return View();
        }
        public ActionResult CheckAssignmentByRequestId(long Id)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Id",Id),
            };
            DataTable tb = sql.ExecuteCommand("CheckAssignmentByRequestId", CommandType.StoredProcedure, param);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        #endregion ExceptionBugList

        //▼  Add - LuanNT44 - 28/06/2019 - Loại 211 - Duyệt quỹ tự tin 
        public ActionResult POS_HoanHanMucDuyetQuyTuTin_211(long RequestID, int Status)
        {
            //gọi POS hoàn hạn mức
            SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@RequestID", RequestID),
                                        new SqlParameter("@Status", Status),
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode)
                                    };
            DataTable tb211 = sql.ExecuteCommand("sp_POS_HoanHanMucDuyetQuyTuTin_211", CommandType.StoredProcedure, param);
            if (tb211 != null && tb211.Rows.Count > 0)
            {
                var jsonResult = Json(tb211.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 28/06/2019 - Loại 211 - Duyệt quỹ tự tin
        //▼  Add - LuanNT44 - 19/09/2019 - Loại 150 - Giám sát hình ảnh Camera
        public ActionResult CheckJobTitleByUserCode_150()
        {
            SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
                                    };
            DataTable tb211 = sql.ExecuteCommand("sp_CheckJobTitleByUserCode_150", CommandType.StoredProcedure, param);
            if (tb211 != null && tb211.Rows.Count > 0)
            {
                var jsonResult = Json(tb211.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 19/09/2019 - Loại 150 - Giám sát hình ảnh Camera
        //▼  Add - LuanNT44 - 11/04/2020 - 24 - edit
        public ActionResult CallApiCSVC_24_NCC(string param)
        {
            //string url = "http://10.96.254.178:1337/Categories";
            //string authen = "Bearer " + "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNzMyZmRiNzU5ZWNjMWQ5ZGE0NDIzYyIsImlhdCI6MTU4NDYwNzI0OCwiZXhwIjoxNTg3MTk5MjQ4fQ._gYmkC4ueAVdA2LEDDez9lye4-Mee1ZJi5vGbJUO0IU";
            string url = ConfigurationManager.AppSettings["ApiHangMuc_24"] + param;
            string authen = ConfigurationManager.AppSettings["Api_authen_24"];
            CallApiHelper api = new CallApiHelper();
            var result = api.CallAPI_GET_Authen<List<reponseApi_csvc_ncc>>(authen, url);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult CallApiCSVC_ChitietHangmuc(string param)
        {
            //string url = "http://10.96.254.178:1337/Subcategories;
            //string authen = "Bearer " + "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlNzMyZmRiNzU5ZWNjMWQ5ZGE0NDIzYyIsImlhdCI6MTU4NDYwNzI0OCwiZXhwIjoxNTg3MTk5MjQ4fQ._gYmkC4ueAVdA2LEDDez9lye4-Mee1ZJi5vGbJUO0IU";
            string url = ConfigurationManager.AppSettings["ApiHangMucChiTiet_24"] + param;
            string authen = ConfigurationManager.AppSettings["Api_authen_24_2"];
            CallApiHelper api = new CallApiHelper();
            var result = api.CallAPI_GET_Authen<List<reponseApi_csvc_chitiethangmuc>>(authen, url);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public class reponseApi_csvc_ncc
        {
            public string nccCode { get; set; }
            public string _id { get; set; }
            public string nccName { get; set; }
            public string groupCategory1 { get; set; }
            public string createdAt { get; set; }
            public string updatedAt { get; set; }
            public int __v { get; set; }
            public string id { get; set; }
        }
        public class reponseApi_csvc_chitiethangmuc
        {
            public bool isCsvc { get; set; }
            public bool isNcc { get; set; }
            public string unit { get; set; }
            public string constructionType { get; set; }
            public string _id { get; set; }
            public decimal maxPrice { get; set; }
            public string categoryName { get; set; }
            public string categoryCode { get; set; }
            public int quantity { get; set; }
            public decimal standardPrice { get; set; }
            public string groupCategory1 { get; set; }
            public string groupCategory2 { get; set; }
            public string groupCategory3 { get; set; }
            public decimal minPrice { get; set; }
            public string createdAt { get; set; }
            public string updatedAt { get; set; }
            public int __v { get; set; }
            public string id { get; set; }
            public string note { get; set; }
            //public reponseApi_csvc category { get; set; }
        }
        //▲  Add - LuanNT44 - 11/04/2020 - 24 - edit
        //▼  Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC 
        //▼ LuanNT44-10/01/2020-Hân YC thêm mã kho truyền sang POS
        public string GetOrganizationHierachiesBySenderHC_23()
        {
            string CompanyCodeB1 = "";
            SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@InsideCode", UserManager.CurrentUser.InsideCode)
                                    };
            DataTable tb23 = sql.ExecuteCommand("sp_GetOrganizationHierachiesBySenderHC_23", CommandType.StoredProcedure, param);
            if (tb23 != null && tb23.Rows.Count > 0)
            {
                CompanyCodeB1 = tb23.Rows[0]["CompanyCodeB1"].ToString();
            }
            return CompanyCodeB1;
        }
        //▲ LuanNT44-10/01/2020-Hân YC thêm mã kho truyền sang POS
        public ActionResult Items_LimitedValue_BO()
        {
            //gọi POS hoàn hạn mức
            SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
                                    };
            DataTable tb211 = sql.ExecuteCommand("sp_Items_LimitedValue_BO", CommandType.StoredProcedure, param);
            if (tb211 != null && tb211.Rows.Count > 0)
            {
                var jsonResult = Json(tb211.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public int GetLeaderOrganizationByEmp()
        {
            //gọi POS hoàn hạn mức
            SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@EmpCode", UserManager.CurrentUser.InsideCode)
                                    };
            DataTable tb211 = sql.ExecuteCommand("sp_GetLeaderOrganizationByEmp", CommandType.StoredProcedure, param);
            if (tb211 != null && tb211.Rows.Count > 0)
            {

                return int.Parse(tb211.Rows[0]["CheckLeader"].ToString());
            }
            else
            {
                return 0;
            }
        }
        //▲  Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC
        public ActionResult GetShopAPRByCallCenter()
        {
            DataTable tb = sql.ExecuteCommand("GetShopAPRByCallCenter", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        DataTable GetDataBillFromSession(long requestId)
        {
            DataTable dtBillInfor = new DataTable();
            dtBillInfor.Columns.Add("UserSendCode", typeof(string));    //Mã người gửi
            dtBillInfor.Columns.Add("Commodities", typeof(string));     //Nội dung hàng hóa
            dtBillInfor.Columns.Add("UserReceiveCode", typeof(string)); //Mã phòng ban nhận
            dtBillInfor.Columns.Add("UserName", typeof(string));        //Tên người nhận
            dtBillInfor.Columns.Add("SoDienThoai", typeof(string));     //Số điện thoại người nhận
            dtBillInfor.Columns.Add("Flag", typeof(string));            //Cờ
            dtBillInfor.Columns.Add("RequestId", typeof(string));       //RequestId Gốc
            dtBillInfor.Columns.Add("Quantity", typeof(string));        //Số lượng
            dtBillInfor.Columns.Add("StepNo", typeof(string));          //Bước CallLog gốc
            dtBillInfor.Columns.Add("Description", typeof(string));     //Mô tả loại calllog
            dtBillInfor.Columns.Add("TypeId", typeof(string));          //Loại calllog

            return dtBillInfor;
        }

        public ActionResult ResendWarranty(long requestId)
        {
            DataTable tb = sql.ExecuteCommand("ResendWarranty_AutoComplete", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@RequestId",requestId),
                new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        //▼ Edit - NgoanHT - 19/04/2018 - Loại: 181 – Thêm sửa hàm
        public ActionResult Get_HangDemo(string Shop)
        {
            string WarehouseCode = string.Empty;
            if (Shop == null || Shop == "")
            {
                WarehouseCode = UserManager.CurrentUser.WarehouseCode;
            }
            else
            {
                WarehouseCode = Shop;
            }
            DataTable table = sql.ExecuteCommand("sp_POS_GetHangDemo", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@Shop", WarehouseCode) });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲ Edit - NgoanHT - 19/04/2018 - Loại: 181 – Thêm sửa hàm

        #region ===GET: /Requests/Request__Create__GetCC===
        /// <summary>GET: /Requests/Request__Create__GetCC</summary>
        public ActionResult Request__Create__GetCC(string p_EmployeeCode, bool p_Is_AddGroupMail = false)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@EmployeeCode", p_EmployeeCode),
                new SqlParameter("@ShopCode", ""),
                new SqlParameter("@OfficeCode", ""),
                new SqlParameter("@Is_AddGroupMail", p_Is_AddGroupMail)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp__Request__Create__GetCC", System.Data.CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }
        #endregion

        #region ===GET: /Requests/Create__GET__CallCenter_GetContentInbound===
        /// <summary>GET: /Requests/Create__GET__CallCenter_GetContentInbound</summary>
        public ActionResult Create__GET__CallCenter_GetContentInbound(int p_EcomId)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@EcomId", p_EcomId)
            };
            DataTable l_DataTable = sql.ExecuteCommand("CallCenter_GetContentInbound", System.Data.CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }
        #endregion

        #region ===Bill Vận chuyển===
        /// <summary>POST: /Requests/Create__BillVanChuyen__CreateRequest</summary>
        [HttpPost]
        public ActionResult Create__BillVanChuyen__CreateRequest(Request requestS, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);

                #region ===Khai biến===
                string ResultFromNVC = string.Empty;
                string returnStr = string.Empty;
                int countDetail = 0;
                int countDetailLine = 0;
                List<long> myCollection = new List<long>();
                List<string> RequestHT = new List<string>();
                #endregion ===Khai biến===

                try
                {
                    #region ===Xử lý===
                    #region ---Info---
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);
                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
                    #endregion ---Info---

                    #region ---Verify---
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                        foreach (var item in details)
                        {
                            if (item.DiaChiGui == null || item.MaPhongBanShopGui == null || item.TenPhongBanShopGui == null && item.MaTinhGui == null && item.MaHuyenGui == null || item.SoDienThoaiNguoiGui == null
                                || item.DiaChiNhan == null || item.MaTinhNhan == null || item.MaHuyenNhan == null || item.SoDienThoaiNguoiNhan == null
                                || item.MaLoaiHangHoa == null || item.NoiDungHangHoa == null || item.SoKien == null
                                || item.MaDichVuVanChuyen == null || item.MaNhaVanChuyen == null || item.MaHinhThucThanhToan == null)
                            {
                                countDetailLine++;
                            }
                        }
                        if (requestS.TypeId == 154)
                        {
                            if (countDetail == 0 || countDetailLine > 0)
                            {
                                TempData["Message"] = "Yêu cầu không có thông tin chi tiết!<br/>Yêu cầu đã bị hủy!";
                                return RedirectToAction("Create", "Requests");
                            }
                        }
                    }
                    #endregion ---Verify---

                    #region ---Khai biến---
                    string[] stringCc = new string[] { };
                    EmployeeDAL emlDal = new EmployeeDAL();
                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    #endregion ---Khai biến---

                    #region ---Tách CallLog theo line---
                    foreach (var item in details)
                    {
                        #region ===Tạo biến lấy data từ màn hình===
                        string ShopPhongBanMoi = item.ShopPhongBanMoi;
                        string DiaChiGui = item.DiaChiGui;
                        string DiaChiNhan = item.DiaChiNhan;
                        string MaPhongBanGui = item.MaPhongBanShopGui;
                        string MaPhongBanGuiKerry = item.MaPhongBanShopGuiKerry;
                        string TenPhongBanShopGui = item.TenPhongBanShopGui;
                        string SoDienThoaiNguoiGui = item.SoDienThoaiNguoiGui;
                        string MaPhongBanNhan = string.Empty;
                        string MaPhongBanNhanKerry = string.Empty;
                        string TenPhongBanShopNhan = string.Empty;
                        string HoTenNguoiNhan = item.HoTenNguoiNhan;
                        string SoDienThoaiNguoiNhan = item.SoDienThoaiNguoiNhan;
                        string MaQuanHuyenGui = item.MaHuyenGui;
                        string MaTinhThanhGui = item.MaTinhGui;
                        string TenQuanHuyenGui = item.TenHuyenGui;
                        string TenTinhThanhGui = item.TenTinhGui;
                        string MaQuanHuyenNhan = item.MaHuyenNhan;
                        string MaTinhThanhNhan = item.MaTinhNhan;
                        string TenQuanHuyenNhan = item.TenHuyenNhan;
                        string TenTinhThanhNhan = item.TenTinhNhan;

                        string _NoiDungHangHoa = string.Empty;
                        if (item.NoiDungHangHoa != null)
                            _NoiDungHangHoa = item.NoiDungHangHoa;

                        string _SoKien = string.Empty;
                        if (item.SoKien != null)
                            _SoKien = item.SoKien;

                        string _TrongLuong = string.Empty;
                        if (item.TrongLuong != null)
                            _TrongLuong = item.TrongLuong;

                        string _MaLoaiHangHoa = string.Empty;
                        if (item.MaLoaiHangHoa != null)
                            _MaLoaiHangHoa = item.MaLoaiHangHoa;

                        string _MaHinhThucThanhToan = string.Empty;
                        if (item.MaHinhThucThanhToan != null)
                            _MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        string _GhiChu = string.Empty;
                        if (item.GhiChu != null)
                            _GhiChu = item.GhiChu;
                        string _MaPhongBanNhan = string.Empty;
                        if (item.MaPhongBanShopNhan != null)
                            _MaPhongBanNhan = item.MaPhongBanShopNhan;
                        string _MaPhongBanNhanKerry = string.Empty;
                        if (item.MaPhongBanShopNhanKerry != null)
                            _MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                        string _TenPhongBanShopNhan = string.Empty;
                        if (item.TenPhongBanShopNhan != null)
                            _TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        string _MaNhaVanChuyen = string.Empty;
                        if (item.MaNhaVanChuyen != null)
                            _MaNhaVanChuyen = item.MaNhaVanChuyen;

                        string _MaDichVuVanChuyen = string.Empty;
                        if (item.MaDichVuVanChuyen != null)
                            _MaDichVuVanChuyen = item.MaDichVuVanChuyen;

                        string _CheckNhan = string.Empty;
                        if (item.CheckNhan != null)
                            _CheckNhan = item.CheckNhan;

                        string _CheckGui = string.Empty;
                        if (item.CheckGui != null)
                            _CheckGui = item.CheckGui;

                        string _IdService = string.Empty;
                        if (item.IdService != null)
                            _IdService = item.IdService;

                        string _QuantityItem = string.Empty;
                        if (item.QuantityItem != null)
                            _QuantityItem = item.QuantityItem;

                        string l__CuocPhiMin__Str = (item.CuocPhiMin != null) ? item.CuocPhiMin : string.Empty;
                        int l__Is_NVCToiUu = int.TryParse((string)item.Is_NVCToiUu, out l__Is_NVCToiUu) ? l__Is_NVCToiUu : 0;

                        string l__Action = (item.Action != null ? item.Action : string.Empty);
                        sql.ExecuteCommand("sp__WEB__TaoBillVanChuyenKhoiBo__Data", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@DiaChiGui", DiaChiGui),
                            new SqlParameter("@DiaChiNhan", DiaChiNhan),
                            new SqlParameter("@MaPhongBanShopGui", MaPhongBanGui),
                            new SqlParameter("@MaPhongBanShopGuiKerry", MaPhongBanGuiKerry),
                            new SqlParameter("@TenPhongBanShopGui", TenPhongBanShopGui),
                            new SqlParameter("@SoDienThoaiNguoiGui", SoDienThoaiNguoiGui),
                            new SqlParameter("@MaPhongBanShopNhan", _MaPhongBanNhan),
                            new SqlParameter("@MaPhongBanShopNhanKerry", _MaPhongBanNhanKerry),
                            new SqlParameter("@TenPhongBanShopNhan", _TenPhongBanShopNhan),
                            new SqlParameter("@HoTenNguoiNhan", HoTenNguoiNhan),
                            new SqlParameter("@SoDienThoaiNguoiNhan", SoDienThoaiNguoiNhan),
                            new SqlParameter("@MaHuyenGui", MaQuanHuyenGui),
                            new SqlParameter("@MaTinhGui", MaTinhThanhGui),
                            new SqlParameter("@TenHuyenGui", TenQuanHuyenGui),
                            new SqlParameter("@TenTinhGui", TenTinhThanhGui),
                            new SqlParameter("@MaHuyenNhan", MaQuanHuyenNhan),
                            new SqlParameter("@MaTinhNhan", MaTinhThanhNhan),
                            new SqlParameter("@TenHuyenNhan", TenQuanHuyenNhan),
                            new SqlParameter("@TenTinhNhan", TenTinhThanhNhan),
                            new SqlParameter("@ShopPhongBanMoi", ShopPhongBanMoi),
                            new SqlParameter("@NoiDungHangHoa", _NoiDungHangHoa),
                            new SqlParameter("@SoKien", _SoKien),
                            new SqlParameter("@TrongLuong", _TrongLuong),
                            new SqlParameter("@MaLoaiHangHoa", _MaLoaiHangHoa),
                            new SqlParameter("@MaHinhThucThanhToan", _MaHinhThucThanhToan),
                            new SqlParameter("@GhiChu", _GhiChu),
                            new SqlParameter("@MaNhaVanChuyen", _MaNhaVanChuyen),
                            new SqlParameter("@MaDichVuVanChuyen", _MaDichVuVanChuyen),
                            new SqlParameter("@CheckNhan", _CheckNhan),
                            new SqlParameter("@CheckGui", _CheckGui),
                            new SqlParameter("@IdService", _IdService),
                            new SqlParameter("@QuantityItem", _QuantityItem),
                            new SqlParameter("@ParentId", null),
                            new SqlParameter("@RequestIdSave", null),
                            new SqlParameter("@StepNo", null),
                            new SqlParameter("@RequestIdParent", null),
                            new SqlParameter("@Function", "Create__BillVanChuyen__CreateRequest"),
                            new SqlParameter("@Action", l__Action),
                            new SqlParameter("@CuocPhiMin", l__CuocPhiMin__Str),
                            new SqlParameter("@Is_NVCToiUu", l__Is_NVCToiUu),
                            });

                        if (ShopPhongBanMoi != "")
                        {
                            DataTable l_DataTable = sql.ExecuteCommand("OrganizationForCompany", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@CompanyName", ShopPhongBanMoi),
                                new SqlParameter("@CompanyAddress", DiaChiNhan),
                                new SqlParameter("@MaTinhThanh", MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen", MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen", TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh", TenTinhThanhNhan),
                                new SqlParameter("@MaUser", UserManager.CurrentUser.InsideCode)
                                });
                            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
                            {
                                DataRow l_DataRow = l_DataTable.Rows[0];
                                MaPhongBanNhan = l_DataRow["MaPhongBanMoi"].ToString();
                                MaPhongBanNhanKerry = l_DataRow["MaPhongBanMoi"].ToString();
                                TenPhongBanShopNhan = ShopPhongBanMoi;
                            }
                        }
                        else
                        {
                            MaPhongBanNhan = item.MaPhongBanShopNhan;
                            MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                            TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        }

                        string NoiDungHangHoa = item.NoiDungHangHoa;
                        string SoKien = item.SoKien;
                        string TrongLuong = item.TrongLuong;
                        string TrongLuongFRT = item.TrongLuongFRT;
                        string TrongLuongNVC = string.Empty;
                        if (TrongLuong != null)
                        {
                            TrongLuongNVC = TrongLuong;
                        }
                        else
                        {
                            TrongLuongNVC = "0";
                        }

                        string MaLoaiHangHoa = item.MaLoaiHangHoa;
                        string MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        string GhiChu = item.GhiChu;

                        string MaNhaVanChuyen = item.MaNhaVanChuyen;
                        string MaDichVuVanChuyen = item.MaDichVuVanChuyen;

                        int QuantityItem = 0;
                        if (item.QuantityItem != null)
                            QuantityItem = Convert.ToInt32(item.QuantityItem);

                        double l__CuocPhiMin__Doub = 0;
                        l__CuocPhiMin__Doub = double.TryParse(l__CuocPhiMin__Str, out l__CuocPhiMin__Doub) ? l__CuocPhiMin__Doub : 0;

                        #region ==="Lên thực ràng lại" (NOTE: Không biết)===
                        string CheckNhan = item.CheckNhan;
                        string CheckGui = item.CheckGui;
                        if (CheckGui == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan", UserManager.CurrentUser.OrganizationHierachyCode),
                                new SqlParameter("@DiaChi", DiaChiGui),
                                new SqlParameter("@MaTinhThanh", MaTinhThanhGui),
                                new SqlParameter("@MaQuanHuyen", MaQuanHuyenGui),
                                new SqlParameter("@TenQuanHuyen", TenQuanHuyenGui),
                                new SqlParameter("@TenTinhThanh", TenTinhThanhGui),
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                });
                        }
                        if (CheckNhan == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan", MaPhongBanNhan),
                                new SqlParameter("@DiaChi", DiaChiNhan),
                                new SqlParameter("@MaTinhThanh", MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen", MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen", TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh", TenTinhThanhNhan),
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                });
                        }
                        #endregion ==="Lên thực ràng lại" (NOTE: Không biết)===
                        #endregion ===Tạo biến lấy data từ màn hình===

                        #region ===Bill Tạo mới===
                        long l__Req__Cre__Id = 0;
                        int l__Req__Cre__StepNo = 0;
                        string l__Req__Cre__Title = Convert.ToString(form["TitleRequest"]);
                        string l__Req__Cre__Sender = UserManager.CurrentUser.InsideCode;
                        string l__Req__Cre__FromShop = UserManager.CurrentUser.WarehouseCode;

                        #region ---Tạo Header CallLog---
                        if (cc != null && cc != "")
                            stringCc = cc.Split(',');

                        if (sender != null && sender != "")
                        {
                            l__Req__Cre__Sender = sender;
                            var empSender = emlDal.Get(sender);
                            if (empSender != null)
                                shopUserSent = shopDal.Get(empSender.WarehouseCode);
                        }
                        if (shopUserSent != null)
                        {
                            l__Req__Cre__FromShop = shopUserSent.WarehouseCode;
                        }

                        DataTable l__DataTable = sql.ExecuteCommand("sp__BillVanChuyen__CreateRequest", CommandType.StoredProcedure, new SqlParameter[]{
                                new SqlParameter("@RequestId", 0),
                                new SqlParameter("@Type", 1), // * Loại: 1:Tạo Bill gửi
                                new SqlParameter("@Sender", l__Req__Cre__Sender),
                                new SqlParameter("@Title", l__Req__Cre__Title),
                                new SqlParameter("@FromShop", l__Req__Cre__FromShop),
                                new SqlParameter("@FromOffice", UserManager.CurrentUser.OrganizationHierachyCode),
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Is_NVCToiUu", l__Is_NVCToiUu),
                                new SqlParameter("@FromForm", "CallLog-Ver2"),
                            });

                        if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                        {
                            if (l__DataTable.Rows[0]["Result"].ToString() == "1")
                            {
                                string l__RequestId__Str = l__DataTable.Rows[0]["RequestId"].ToString();
                                l__Req__Cre__Id = long.TryParse(l__RequestId__Str, out l__Req__Cre__Id) ? l__Req__Cre__Id : 0;
                                string l__StepNo__Str = l__DataTable.Rows[0]["StepNo"].ToString();
                                l__Req__Cre__StepNo = int.TryParse(l__StepNo__Str, out l__Req__Cre__StepNo) ? l__Req__Cre__StepNo : 0;
                            }
                        }
                        #endregion ---Tạo Header CallLog---

                        if (l__Req__Cre__Id > 0)
                        {
                            myCollection.Add(l__Req__Cre__Id);

                            #region ---Tạo Chi tiết CallLog---
                            string l__MaSoChungTuVanChuyen__Create = "";
                            if (MaNhaVanChuyen == "NT")
                            {
                                l__MaSoChungTuVanChuyen__Create = "FC" + l__Req__Cre__Id.ToString();
                            }
                            else if (MaNhaVanChuyen == "Kerry")
                            {
                                l__MaSoChungTuVanChuyen__Create = "CK" + l__Req__Cre__Id.ToString();
                            }
                            else if (MaNhaVanChuyen == "VNC")
                            {
                                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                l__MaSoChungTuVanChuyen__Create = "VC" + l__Req__Cre__Id.ToString();
                                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            }

                            RequestDetail rs_Create = new RequestDetail();
                            rs_Create.RequestId = l__Req__Cre__Id;

                            rs_Create.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                            rs_Create.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                            if (MaPhongBanGui != null)
                            {
                                rs_Create.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                            }
                            else
                            {
                                rs_Create.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                            }
                            rs_Create.EmpCode = SoDienThoaiNguoiGui;
                            rs_Create.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                            rs_Create.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                            rs_Create.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                            rs_Create.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                            rs_Create.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                            rs_Create.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                            rs_Create.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                            rs_Create.ProductCode = l__MaSoChungTuVanChuyen__Create;         //Mã số chứng từ hàng hóa

                            rs_Create.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                            rs_Create.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                            rs_Create.Property10 = TrongLuong;                     //Cân nặng
                            rs_Create.Property12 = TrongLuongFRT;
                            rs_Create.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                            rs_Create.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                            rs_Create.Note = GhiChu;                               //Ghi chú

                            rs_Create.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                            rs_Create.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                            rs_Create.Status = Key.Status.Available;
                            if (form["PassApproved"] != null)
                            {
                                rs_Create.Approved = form["PassApproved"].ToString() == "1" ? true : false;
                            }
                            if (QuantityItem > 0)
                                rs_Create.Quantity3 = QuantityItem;
                            ////rs_Create.Quantity4 = rs_Create.Quantity4; // ParentId
                            ////rs_Create.Quantity5 = rs_Create.Quantity5; // StepNoU
                            ////rs_Create.Quantity6 = rs_Create.Quantity6; // RequestIdParent

                            if (l__CuocPhiMin__Doub > 0)
                            {
                                rs_Create.Money3 = l__CuocPhiMin__Doub;
                            }

                            rs_Create.QuantityAvaiable = null; //  Duyệt Thay đổi Nhà vận chuyển? null:Chờ duyệt ; 1:Duyệt ; 0:Từ chối

                            db.RequestDetails.Add(rs_Create);
                            #endregion ---Tạo Chi tiết CallLog---

                            #region ---Nội dung yêu cầu của người tạo---
                            if (message.Length != 0)
                            {
                                var converstation = new Conversation();
                                converstation.RequestId = l__Req__Cre__Id;
                                converstation.Message = message;
                                converstation.Sender = UserManager.CurrentUser.InsideCode;
                                converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                                converstation.Status = Key.Status.Available;
                                converstation.StepNo = 0;
                                converstation.TimeCreate = DateTime.Now;
                                converstation.Type = Key.Conversation.Create;
                                db.Conversations.Add(converstation);
                            }
                            #endregion ---Nội dung yêu cầu của người tạo---

                            #region ---Cc---
                            foreach (var item1 in stringCc)
                            {
                                var AssignerCc = new Assigner();
                                AssignerCc.RequestId = l__Req__Cre__Id;
                                AssignerCc.EmployeeCode = item1.ToString();
                                AssignerCc.StepNo = l__Req__Cre__StepNo;
                                AssignerCc.Type = Key.TypeAssigner.Cc;
                                AssignerCc.TimeCreate = DateTime.Now;
                                AssignerCc.Status = Key.StatusRequest.Waitting;
                                db.Assigners.Add(AssignerCc);
                            }
                            #endregion ---Cc---

                            db.SaveChanges();

                            #region ---Send Mail---
                            XMail.Send(l__Req__Cre__Id, "[CallLog] - " + l__Req__Cre__Title, XMail.ProcessType.Create);
                            #endregion ---Send Mail---

                            if (l__Req__Cre__StepNo == 2)
                            {
                                #region ---Tạo CallLog Duyệt Bill Vận chuyển Hỏa tốc---
                                if (item.IdService == 1)
                                {
                                    string l_ResStr = BillVanChuyen__TaoCLDuyetBillVCHoaToc(l__Req__Cre__Id);
                                    BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result l_Result = JsonConvert.DeserializeObject<BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result>(l_ResStr);
                                    if (l_Result.RequestId > 0)
                                    {
                                        RequestHT.Add(l_Result.RequestId.ToString());
                                    }
                                }
                                #endregion ---Tạo CallLog Duyệt Bill Vận chuyển Hỏa tốc---

                                #region     ---Tích hợp Nhà vận chuyển---
                                string l_ResStr_NVC = BillVanChuyen__TichHopNhaVanChuyen(l__Req__Cre__Id);
                                BillVanChuyen__TichHopNhaVanChuyen__Result l_Result_NVC = JsonConvert.DeserializeObject<BillVanChuyen__TichHopNhaVanChuyen__Result>(l_ResStr_NVC);
                                ResultFromNVC = l_Result_NVC.Result + "-" + l_Result_NVC.Msg;
                                #endregion  ---Tích hợp Nhà vận chuyển---
                            }
                        }
                        #endregion ===Bill Tạo mới===
                    }
                    if (Session[Key.Session.BillInfo] != null)
                        Session[Key.Session.BillInfo] = null;
                    #endregion ---Tách CallLog theo line---

                    #region ---Trả về---
                    returnStr = String.Join(", ", myCollection.ToArray());
                    string returnStrHT = String.Join(", ", RequestHT.ToArray());
                    string strReturn = "Tạo Request " + myCollection.Count.ToString() + "/" + myCollection.Count.ToString() + ":" + returnStr + " thành công!<br/>Tạo Request Bill hỏa tốc " + RequestHT.Count.ToString() + "/" + RequestHT.Count.ToString() + ": " + returnStrHT.ToString() + "<br/>Thành công!<br/>Kết quả NVC: " + ResultFromNVC;
                    TempData["Message"] = strReturn;
                    #endregion ---Trả về---
                    #endregion ===Xử lý===
                }
                catch (Exception ex)
                {
                    #region ===Exception===
                    db = new CallLogDbContext();
                    if (Session[Key.Session.BillInfo] != null)
                        Session[Key.Session.BillInfo] = null;
                    if (myCollection.Count > 0)
                    {
                        foreach (var itemCollection in myCollection)
                        {
                            if (myCollection[myCollection.Count - 1] == itemCollection)
                            {
                                Request l_RequestCancel = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l_RequestCancel = db.Requests.FirstOrDefault(x => x.Id == itemCollection);
                                }
                                if (l_RequestCancel != null)
                                {
                                    l_RequestCancel.Remark += " - (" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "): Create Request fail Details";
                                    l_RequestCancel.Status = Key.StatusRequest.Cancel;
                                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                                }
                                string strReturn = "Tạo Request " + (myCollection.Count - 1).ToString() + "/" + countDetail.ToString() + ":" + returnStr + " thành công!<br/>Người xử lý là: Nhà vận chuyển<br/>" + ResultFromNVC + ex.Message;
                                TempData["Message"] = strReturn;
                            }
                            else
                            {
                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                                ViewBag.Message = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!<br/>" + ex.Message;
                                TempData["Message"] = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!<br/>";
                            }
                        }
                        db.SaveChanges();
                    }
                    else
                    {
                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                        ViewBag.Message = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!<br/>" + ex.Message;
                        TempData["Message"] = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!<br/>";
                    }
                    #endregion ===Exception===
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!<br/>";
            }
            return null;
        }
        /// <summary>POST: /Requests/CreateBillFromHC__BillVanChuyen__SaveRequest</summary>
        [HttpPost]
        public ActionResult CreateBillFromHC__BillVanChuyen__SaveRequest(Request requestS, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);

                #region ===Khai biến===
                List<long> myCollection = new List<long>();
                int countDetail = 0;
                string returnStr = string.Empty;
                #endregion ===Khai biến===

                try
                {
                    #region ===Xử lý===
                    #region ---Info---
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);
                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
                    #endregion ---Info---

                    #region ---Verify---
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                        if (requestS.TypeId == 154)
                        {
                            if (countDetail == 0)
                            {
                                TempData["Message"] = "Yêu cầu không có thông tin chi tiết!<br/>Yêu cầu đã bị hủy!";
                                return RedirectToAction("Create", "Requests");
                            }
                        }

                        //▼ Add - TuanNA89 - 13 / 08 / 2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        #region Check Calllog gốc đã chuyển bước
                        long RequestIdSave = 0;
                        int StepNoU = 0;
                        long RequestIdParent = 0;
                        int ParentId = 0;

                        foreach (var item in details)
                        {
                            RequestIdSave = 0;
                            if (item.RequestIdSave != null)
                                RequestIdSave = Convert.ToInt64(item.RequestIdSave);

                            StepNoU = 0;
                            if (item.StepNo != null)
                                StepNoU = Convert.ToInt32(item.StepNo);

                            RequestIdParent = 0;
                            if (item.RequestIdParent != null)
                                RequestIdParent = Convert.ToInt64(item.RequestIdParent);

                            ParentId = Convert.ToInt32(item.ParentId);

                            if (ParentId == 214)
                            {
                                if (RequestIdParent > 0)
                                {
                                    Request requestParent = db.Requests.FirstOrDefault(x => x.Id == RequestIdParent);
                                    if (requestParent.StepNo != StepNoU)
                                    {
                                        var requestDetails = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestIdParent);

                                        if ((requestParent.StepNo == 2 && requestDetails.Property12 != null && requestDetails.Property12 != "" && requestDetails.Property12 != RequestIdSave.ToString())
                                            || (requestParent.StepNo == 4 && requestDetails.Property13 != null && requestDetails.Property13 != "" && requestDetails.Property13 != RequestIdSave.ToString()))
                                        {
                                            if (RequestIdSave > 0)
                                            {
                                                Request requestSave = db.Requests.FirstOrDefault(x => x.Id == RequestIdSave);
                                                requestSave.Status = Key.StatusRequest.Cancel;
                                                requestSave.Remark = "Huỷ do Calllog gốc đã chuyển bước trước khi Calllog này được xử lý";

                                                TempData["Message"] = "Calllog gốc " + RequestIdParent + " đã chuyển bước bởi Calllog khác. Calllog này sẽ bị huỷ";
                                            }
                                            else
                                            {
                                                TempData["Message"] = "Calllog gốc " + RequestIdParent + " đã chuyển bước. Không thể thao tác";
                                            }
                                            db.SaveChanges();
                                            return null;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        //▲ Add - TuanNA89 - 13 / 08 / 2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    }
                    #endregion ---Verify---

                    #region ---Khai biến---
                    string[] stringCc = new string[] { };
                    EmployeeDAL emlDal = new EmployeeDAL();
                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    #endregion ---Khai biến---

                    #region ---Tách CallLog theo line---
                    foreach (var item in details)
                    {
                        #region ===Tạo biến lấy data từ màn hình===
                        string ShopPhongBanMoi = item.ShopPhongBanMoi;
                        string DiaChiGui = item.DiaChiGui;
                        string DiaChiNhan = item.DiaChiNhan;
                        string MaPhongBanGui = item.MaPhongBanShopGui;
                        string MaPhongBanGuiKerry = item.MaPhongBanShopGuiKerry;
                        string TenPhongBanShopGui = item.TenPhongBanShopGui;
                        string SoDienThoaiNguoiGui = item.SoDienThoaiNguoiGui;
                        string MaPhongBanNhan = string.Empty;
                        string MaPhongBanNhanKerry = string.Empty;
                        string TenPhongBanShopNhan = string.Empty;
                        string HoTenNguoiNhan = item.HoTenNguoiNhan;
                        string SoDienThoaiNguoiNhan = item.SoDienThoaiNguoiNhan;
                        string MaQuanHuyenGui = item.MaHuyenGui;
                        string MaTinhThanhGui = item.MaTinhGui;
                        string TenQuanHuyenGui = item.TenHuyenGui;
                        string TenTinhThanhGui = item.TenTinhGui;
                        string MaQuanHuyenNhan = item.MaHuyenNhan;
                        string MaTinhThanhNhan = item.MaTinhNhan;
                        string TenQuanHuyenNhan = item.TenHuyenNhan;
                        string TenTinhThanhNhan = item.TenTinhNhan;

                        string _NoiDungHangHoa = string.Empty;
                        if (item.NoiDungHangHoa != null)
                            _NoiDungHangHoa = item.NoiDungHangHoa;

                        string _SoKien = string.Empty;
                        if (item.SoKien != null)
                            _SoKien = item.SoKien;

                        string _TrongLuong = string.Empty;
                        if (item.TrongLuong != null)
                            _TrongLuong = item.TrongLuong;

                        string _MaLoaiHangHoa = string.Empty;
                        if (item.MaLoaiHangHoa != null)
                            _MaLoaiHangHoa = item.MaLoaiHangHoa;

                        string _MaHinhThucThanhToan = string.Empty;
                        if (item.MaHinhThucThanhToan != null)
                            _MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        string _GhiChu = string.Empty;
                        if (item.GhiChu != null)
                            _GhiChu = item.GhiChu;
                        string _MaPhongBanNhan = string.Empty;
                        if (item.MaPhongBanNhan != null)
                            _MaPhongBanNhan = item.MaPhongBanNhan;
                        string _MaPhongBanNhanKerry = string.Empty;
                        if (item.MaPhongBanNhanKerry != null)
                            _MaPhongBanNhanKerry = item.MaPhongBanNhanKerry;
                        string _TenPhongBanShopNhan = string.Empty;
                        if (item.TenPhongBanShopNhan != null)
                            _TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        string _MaNhaVanChuyen = string.Empty;
                        if (item.MaNhaVanChuyen != null)
                            _MaNhaVanChuyen = item.MaNhaVanChuyen;

                        string _MaDichVuVanChuyen = string.Empty;
                        if (item.MaDichVuVanChuyen != null)
                            _MaDichVuVanChuyen = item.MaDichVuVanChuyen;

                        string _CheckNhan = string.Empty;
                        if (item.CheckNhan != null)
                            _CheckNhan = item.CheckNhan;

                        string _CheckGui = string.Empty;
                        if (item.CheckGui != null)
                            _CheckGui = item.CheckGui;

                        string _IdService = string.Empty;
                        if (item.IdService != null)
                            _IdService = item.IdService;

                        string _QuantityItem = string.Empty;
                        if (item.QuantityItem != null)
                            _QuantityItem = item.QuantityItem;

                        string _ParentId = string.Empty;
                        if (item.ParentId != null)
                            _ParentId = item.ParentId;

                        string _RequestIdSave = string.Empty;
                        if (item.RequestIdSave != null)
                            _RequestIdSave = item.RequestIdSave;

                        string _StepNo = string.Empty;
                        if (item.StepNo != null)
                            _StepNo = item.StepNo;

                        string _RequestIdParent = string.Empty;
                        if (item.RequestIdParent != null)
                            _RequestIdParent = item.RequestIdParent;

                        string l__CuocPhiMin__Str = (item.CuocPhiMin != null) ? item.CuocPhiMin : string.Empty;
                        int l__Is_NVCToiUu = int.TryParse((string)item.Is_NVCToiUu, out l__Is_NVCToiUu) ? l__Is_NVCToiUu : 0;

                        string l__Action = (item.Action != null ? item.Action : string.Empty);
                        sql.ExecuteCommand("sp__WEB__TaoBillVanChuyenKhoiBo__Data", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@DiaChiGui", DiaChiGui),
                            new SqlParameter("@DiaChiNhan", DiaChiNhan),
                            new SqlParameter("@MaPhongBanShopGui", MaPhongBanGui),
                            new SqlParameter("@MaPhongBanShopGuiKerry", MaPhongBanGuiKerry),
                            new SqlParameter("@TenPhongBanShopGui", TenPhongBanShopGui),
                            new SqlParameter("@SoDienThoaiNguoiGui", SoDienThoaiNguoiGui),
                            new SqlParameter("@MaPhongBanShopNhan", _MaPhongBanNhan),
                            new SqlParameter("@MaPhongBanShopNhanKerry", _MaPhongBanNhanKerry),
                            new SqlParameter("@TenPhongBanShopNhan", _TenPhongBanShopNhan),
                            new SqlParameter("@HoTenNguoiNhan", HoTenNguoiNhan),
                            new SqlParameter("@SoDienThoaiNguoiNhan", SoDienThoaiNguoiNhan),
                            new SqlParameter("@MaHuyenGui", MaQuanHuyenGui),
                            new SqlParameter("@MaTinhGui", MaTinhThanhGui),
                            new SqlParameter("@TenHuyenGui", TenQuanHuyenGui),
                            new SqlParameter("@TenTinhGui", TenTinhThanhGui),
                            new SqlParameter("@MaHuyenNhan", MaQuanHuyenNhan),
                            new SqlParameter("@MaTinhNhan", MaTinhThanhNhan),
                            new SqlParameter("@TenHuyenNhan", TenQuanHuyenNhan),
                            new SqlParameter("@TenTinhNhan", TenTinhThanhNhan),
                            new SqlParameter("@ShopPhongBanMoi", ShopPhongBanMoi),
                            new SqlParameter("@NoiDungHangHoa", _NoiDungHangHoa),
                            new SqlParameter("@SoKien", _SoKien),
                            new SqlParameter("@TrongLuong", _TrongLuong),
                            new SqlParameter("@MaLoaiHangHoa", _MaLoaiHangHoa),
                            new SqlParameter("@MaHinhThucThanhToan", _MaHinhThucThanhToan),
                            new SqlParameter("@GhiChu", _GhiChu),
                            new SqlParameter("@MaNhaVanChuyen", _MaNhaVanChuyen),
                            new SqlParameter("@MaDichVuVanChuyen", _MaDichVuVanChuyen),
                            new SqlParameter("@CheckNhan", _CheckNhan),
                            new SqlParameter("@CheckGui", _CheckGui),
                            new SqlParameter("@IdService", _IdService),
                            new SqlParameter("@QuantityItem", _QuantityItem),
                            new SqlParameter("@ParentId", _ParentId),
                            new SqlParameter("@RequestIdSave", _RequestIdSave),
                            new SqlParameter("@StepNo", _StepNo),
                            new SqlParameter("@RequestIdParent", _RequestIdParent),
                            new SqlParameter("@Function", "CreateBillFromHC__BillVanChuyen__SaveRequest"),
                            new SqlParameter("@Action", l__Action),
                            new SqlParameter("@CuocPhiMin", l__CuocPhiMin__Str),
                            new SqlParameter("@Is_NVCToiUu", l__Is_NVCToiUu),
                            });

                        if (ShopPhongBanMoi != "")
                        {
                            DataTable l_DataTable = sql.ExecuteCommand("OrganizationForCompany", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@CompanyName", ShopPhongBanMoi),
                                new SqlParameter("@CompanyAddress", DiaChiNhan),
                                new SqlParameter("@MaTinhThanh", MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen", MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen", TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh", TenTinhThanhNhan),
                                new SqlParameter("@MaUser", UserManager.CurrentUser.InsideCode)
                                });
                            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
                            {
                                DataRow l_DataRow = l_DataTable.Rows[0];
                                MaPhongBanNhan = l_DataRow["MaPhongBanMoi"].ToString();
                                MaPhongBanNhanKerry = l_DataRow["MaPhongBanMoi"].ToString();
                                TenPhongBanShopNhan = ShopPhongBanMoi;
                            }
                        }
                        else
                        {
                            MaPhongBanNhan = item.MaPhongBanShopNhan;
                            MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                            TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        }

                        string NoiDungHangHoa = item.NoiDungHangHoa;
                        string SoKien = item.SoKien;
                        string TrongLuong = item.TrongLuong;

                        //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                        string TrongLuongFRT = item.TrongLuongFRT;
                        //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

                        string TrongLuongNVC = string.Empty;
                        if (TrongLuong != null)
                        {
                            TrongLuongNVC = TrongLuong;
                        }
                        else
                        {
                            TrongLuongNVC = "0";
                        }

                        string MaLoaiHangHoa = item.MaLoaiHangHoa;
                        string MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        string GhiChu = item.GhiChu;

                        string MaNhaVanChuyen = item.MaNhaVanChuyen;
                        string MaDichVuVanChuyen = item.MaDichVuVanChuyen;

                        long RequestIdSave = 0;
                        if (item.RequestIdSave != null)
                            RequestIdSave = Convert.ToInt64(item.RequestIdSave);
                        int StepNoU = 0;
                        if (item.StepNo != null)
                            StepNoU = Convert.ToInt32(item.StepNo);
                        long RequestIdParent = 0;
                        if (item.RequestIdParent != null)
                            RequestIdParent = Convert.ToInt64(item.RequestIdParent);
                        int ParentId_Save = Convert.ToInt32(item.ParentId);
                        int QuantityItem = 0;
                        if (item.QuantityItem != null)
                            QuantityItem = Convert.ToInt32(item.QuantityItem);

                        double l__CuocPhiMin__Doub = 0;
                        l__CuocPhiMin__Doub = double.TryParse(l__CuocPhiMin__Str, out l__CuocPhiMin__Doub) ? l__CuocPhiMin__Doub : 0;

                        #region ==="Lên thực ràng lại" (NOTE: Không biết)===
                        string CheckNhan = item.CheckNhan;
                        string CheckGui = item.CheckGui;
                        if (CheckGui == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan", UserManager.CurrentUser.OrganizationHierachyCode),
                                new SqlParameter("@DiaChi", DiaChiGui),
                                new SqlParameter("@MaTinhThanh", MaTinhThanhGui),
                                new SqlParameter("@MaQuanHuyen", MaQuanHuyenGui),
                                new SqlParameter("@TenQuanHuyen", TenQuanHuyenGui),
                                new SqlParameter("@TenTinhThanh", TenTinhThanhGui),
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                });
                        }
                        if (CheckNhan == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan", MaPhongBanNhan),
                                new SqlParameter("@DiaChi", DiaChiNhan),
                                new SqlParameter("@MaTinhThanh", MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen", MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen", TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh", TenTinhThanhNhan),
                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                });
                        }
                        #endregion ==="Lên thực ràng lại" (NOTE: Không biết)===
                        #endregion ===Tạo biến lấy data từ màn hình===

                        long l__Req__Cre__Id = 0;
                        string l__Req__Cre__Sender = UserManager.CurrentUser.InsideCode;
                        string l__Req__Cre__Title = Convert.ToString(form["TitleRequest"]);
                        string l__Req__Cre__FromShop = UserManager.CurrentUser.WarehouseCode;

                        #region ===Xử lý Header CallLog===
                        #region ---Set biến---
                        if (RequestIdSave > 0)
                        {
                            l__Req__Cre__Id = RequestIdSave;
                        }
                        if (sender != null && sender != "")
                        {
                            l__Req__Cre__Sender = sender;
                            var empSender = emlDal.Get(l__Req__Cre__Sender);
                            if (empSender != null)
                                shopUserSent = shopDal.Get(empSender.WarehouseCode);
                        }
                        if (shopUserSent != null)
                        {
                            l__Req__Cre__FromShop = shopUserSent.WarehouseCode;
                        }
                        #endregion ---Set biến---

                        DataTable l__DataTable = new DataTable("Header");
                        #region ---Xử lý Header---
                        l__DataTable = sql.ExecuteCommand("sp__BillVanChuyen__CreateRequest", CommandType.StoredProcedure, new SqlParameter[]{
                            new SqlParameter("@RequestId", l__Req__Cre__Id),
                            new SqlParameter("@Type", 0), // * Loại: 0:Tạo Bill lưu
                            new SqlParameter("@Sender", l__Req__Cre__Sender),
                            new SqlParameter("@Title", l__Req__Cre__Title),
                            new SqlParameter("@FromShop", l__Req__Cre__FromShop),
                            new SqlParameter("@FromOffice", UserManager.CurrentUser.OrganizationHierachyCode),
                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                            new SqlParameter("@Is_NVCToiUu", l__Is_NVCToiUu),
                            new SqlParameter("@FromForm", "CallLog-Ref-Ver2"),
                        });
                        #endregion ---Xử lý Header---

                        #region ---Check KQ---
                        if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                        {
                            if (l__DataTable.Rows[0]["Result"].ToString() == "1")
                            {
                                string l__RequestId__Str = l__DataTable.Rows[0]["RequestId"].ToString();
                                l__Req__Cre__Id = long.TryParse(l__RequestId__Str, out l__Req__Cre__Id) ? l__Req__Cre__Id : 0;

                                #region ===Xử lý Detail CallLog===
                                if (l__Req__Cre__Id > 0)
                                {
                                    myCollection.Add(l__Req__Cre__Id);

                                    if (RequestIdSave > 0)
                                    {
                                        #region ===Bill có sẵn===
                                        #region ---Cập nhật Detail CallLog---
                                        RequestDetail l_RequestDetail = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            l_RequestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == l__Req__Cre__Id);
                                        }
                                        if (l_RequestDetail != null)
                                        {
                                            l_RequestDetail.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                                            l_RequestDetail.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                                            if (MaPhongBanGui != null)
                                            {
                                                l_RequestDetail.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                                            }
                                            else
                                            {
                                                l_RequestDetail.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                                            }
                                            l_RequestDetail.EmpCode = SoDienThoaiNguoiGui;
                                            l_RequestDetail.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                                            l_RequestDetail.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                                            l_RequestDetail.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                                            l_RequestDetail.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                                            l_RequestDetail.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                                            l_RequestDetail.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                                            l_RequestDetail.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                                            if (MaNhaVanChuyen == "NT")
                                            {
                                                l_RequestDetail.ProductCode = "FC" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                            }
                                            else if (MaNhaVanChuyen == "Kerry")
                                            {
                                                l_RequestDetail.ProductCode = "CK" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                            }
                                            else if (MaNhaVanChuyen == "VNC")
                                            {
                                                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                                l_RequestDetail.ProductCode = "VC" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                            }

                                            l_RequestDetail.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                                            l_RequestDetail.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                                            l_RequestDetail.Property10 = TrongLuong;                     //Cân nặng

                                            //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                                            l_RequestDetail.Property12 = TrongLuongFRT;
                                            //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

                                            l_RequestDetail.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                                            l_RequestDetail.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                                            l_RequestDetail.Note = GhiChu;                               //Ghi chú

                                            l_RequestDetail.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                                            l_RequestDetail.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                                            l_RequestDetail.Status = Key.Status.Available;
                                            if (QuantityItem > 0)
                                                l_RequestDetail.Quantity3 = QuantityItem;
                                            if (ParentId_Save > 0)
                                                l_RequestDetail.Quantity4 = ParentId_Save;
                                            if (StepNoU > 0)
                                                l_RequestDetail.Quantity5 = StepNoU;
                                            if (RequestIdParent > 0)
                                                l_RequestDetail.Quantity6 = Convert.ToInt32(RequestIdParent);

                                            if (l__CuocPhiMin__Doub > 0)
                                            {
                                                l_RequestDetail.Money3 = l__CuocPhiMin__Doub;
                                            }

                                            l_RequestDetail.QuantityAvaiable = null; //  Duyệt Thay đổi Nhà vận chuyển? null:Chờ duyệt ; 1:Duyệt ; 0:Từ chối

                                            db.SaveChanges();
                                        }
                                        #endregion ---Cập nhật Detail CallLog---
                                        #endregion
                                    }
                                    else
                                    {
                                        #region ===Bill tạo mới===
                                        #region ---Tạo Detail CallLog---
                                        RequestDetail l_RequestDetail = new RequestDetail();
                                        l_RequestDetail.RequestId = l__Req__Cre__Id;

                                        l_RequestDetail.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                                        l_RequestDetail.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                                        if (MaPhongBanGui != null)
                                        {
                                            l_RequestDetail.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                                        }
                                        else
                                        {
                                            l_RequestDetail.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                                        }
                                        l_RequestDetail.EmpCode = SoDienThoaiNguoiGui;
                                        l_RequestDetail.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                                        l_RequestDetail.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                                        l_RequestDetail.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                                        l_RequestDetail.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                                        l_RequestDetail.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                                        l_RequestDetail.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                                        l_RequestDetail.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                                        if (MaNhaVanChuyen == "NT")
                                        {
                                            l_RequestDetail.ProductCode = "FC" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                        }
                                        else if (MaNhaVanChuyen == "Kerry")
                                        {
                                            l_RequestDetail.ProductCode = "CK" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                        }
                                        else if (MaNhaVanChuyen == "VNC")
                                        {
                                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                            l_RequestDetail.ProductCode = "VC" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                        }

                                        l_RequestDetail.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                                        l_RequestDetail.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                                        l_RequestDetail.Property10 = TrongLuong;                     //Cân nặng

                                        //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                                        l_RequestDetail.Property12 = TrongLuongFRT;
                                        //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

                                        l_RequestDetail.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                                        l_RequestDetail.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                                        l_RequestDetail.Note = GhiChu;                               //Ghi chú

                                        l_RequestDetail.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                                        l_RequestDetail.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                                        l_RequestDetail.Status = Key.Status.Available;
                                        if (QuantityItem > 0)
                                            l_RequestDetail.Quantity3 = QuantityItem;
                                        if (ParentId_Save > 0)
                                            l_RequestDetail.Quantity4 = ParentId_Save;
                                        if (StepNoU > 0)
                                            l_RequestDetail.Quantity5 = StepNoU;
                                        if (RequestIdParent > 0)
                                            l_RequestDetail.Quantity6 = Convert.ToInt32(RequestIdParent);

                                        if (l__CuocPhiMin__Doub > 0)
                                        {
                                            l_RequestDetail.Money3 = l__CuocPhiMin__Doub;
                                        }

                                        l_RequestDetail.QuantityAvaiable = null; //  Duyệt Thay đổi Nhà vận chuyển? null:Chờ duyệt ; 1:Duyệt ; 0:Từ chối

                                        db.RequestDetails.Add(l_RequestDetail);
                                        try
                                        {
                                            db.SaveChanges();
                                        }
                                        catch (DbEntityValidationException e)
                                        {
                                            foreach (var eve in e.EntityValidationErrors)
                                            {
                                                Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:", eve.Entry.Entity.GetType().Name, eve.Entry.State);
                                                foreach (var ve in eve.ValidationErrors)
                                                {
                                                    Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"", ve.PropertyName, ve.ErrorMessage);
                                                }
                                            }
                                            throw;
                                        }
                                        #endregion ---Tạo Detail CallLog---

                                        //▼ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                        #region ---Xử lý Calllog gốc---
                                        if (ParentId_Save == 214)
                                        {
                                            #region MyRegion
                                            Request requestParent = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                requestParent = db.Requests.FirstOrDefault(x => x.Id == RequestIdParent);
                                            }
                                            if (requestParent != null)
                                            {
                                                #region Update RequestDetails
                                                List<RequestDetail> requestDetails = null;
                                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                                {
                                                    requestDetails = db.RequestDetails.Where(x => x.RequestId == RequestIdParent).ToList<RequestDetail>();
                                                }
                                                foreach (var detail in requestDetails)
                                                {
                                                    if (requestParent.StepNo == 1)
                                                    {
                                                        detail.Property12 = l__Req__Cre__Id.ToString();
                                                    }
                                                    else if (new List<int> { 2, 3 }.Contains(requestParent.StepNo))
                                                    {
                                                        detail.Property13 = l__Req__Cre__Id.ToString();
                                                    }
                                                }
                                                #endregion
                                                db.SaveChanges();
                                            }
                                            #endregion
                                        }
                                        #endregion ---Xử lý Calllog gốc---
                                        //▲ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                        #endregion ===Bill tạo mới===
                                    }
                                }
                                #endregion ===Xử lý Detail CallLog===
                            }
                            else
                            {
                                TempData["Message"] = "Lưu CL: " + l__Req__Cre__Id.ToString() + " - Thất bại! - " + l__DataTable.Rows[0]["Msg"].ToString();
                            }
                        }
                        else
                        {
                            TempData["Message"] = "Lưu CL: " + l__Req__Cre__Id.ToString() + " - Thất bại! - Không có kết quả!";
                        }
                        #endregion ---Check KQ---
                        #endregion ===Xử lý Header CallLog===
                    }

                    returnStr = String.Join(", ", myCollection.ToArray());

                    if (Session[Key.Session.BillInfo] != null)
                        Session[Key.Session.BillInfo] = null;
                    #endregion ---Tách CallLog theo line---

                    #region ---Trả về---
                    string strReturn = "Lưu Request " + myCollection.Count.ToString() + "/" + myCollection.Count.ToString() + ": " + returnStr + " thành công!";
                    TempData["Message"] = strReturn;
                    #endregion ---Trả về---
                    #endregion ===Xử lý===
                }
                catch (Exception ex)
                {
                    #region ===Exception===
                    db = new CallLogDbContext();
                    if (Session[Key.Session.BillInfo] != null)
                        Session[Key.Session.BillInfo] = null;
                    if (myCollection.Count > 0)
                    {
                        foreach (var itemCollection in myCollection)
                        {
                            if (myCollection[myCollection.Count - 1] == itemCollection)
                            {
                                Request l_RequestCancel = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l_RequestCancel = db.Requests.FirstOrDefault(x => x.Id == itemCollection);
                                }
                                if (l_RequestCancel != null)
                                {
                                    l_RequestCancel.Remark += " - (" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "): Create Request fail Details";
                                    l_RequestCancel.Status = Key.StatusRequest.Cancel;
                                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                                }
                                string strReturn = "Lưu Request " + (myCollection.Count - 1).ToString() + "/" + countDetail.ToString() + ":" + returnStr + " thành công!<br/>" + ex.Message;
                                TempData["Message"] = strReturn;
                            }
                            else
                            {
                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                                ViewBag.Message = "Có lỗi xảy ra khi lưu Request!<br/>Xin vui lòng thử lại!<br/>" + ex.Message;
                                TempData["Message"] = "Có lỗi xảy ra khi lưu Request!<br/>Xin vui lòng thử lại!<br/>";
                            }
                        }
                        db.SaveChanges();
                    }
                    else
                    {
                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                        ViewBag.Message = "Có lỗi xảy ra khi lưu Request!<br/>Xin vui lòng thử lại!<br/>" + ex.Message;
                        TempData["Message"] = "Có lỗi xảy ra khi lưu Request!<br/>Xin vui lòng thử lại!<br/>";
                    }
                    #endregion ===Exception===
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi lưu Request!<br/>Xin vui lòng thử lại!";
            }
            return null;
        }
        /// <summary>POST: /Requests/CreateBillFromHC__BillVanChuyen__CreateRequest</summary>
        [HttpPost]
        public ActionResult CreateBillFromHC__BillVanChuyen__CreateRequest(Request requestS, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);

                #region ===Khai biến===
                List<long> myCollection = new List<long>();
                List<string> RequestHT = new List<string>();
                int countDetail = 0;
                int countDetailLine = 0;
                string returnStr = string.Empty;
                string ResultFromNVC = string.Empty;
                //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                int TypeIdParent = 0;
                long p__RequestIdParent = 0; // Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                #endregion ===Khai biến===

                try
                {
                    #region ===Xử lý===
                    #region ---Info---
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);
                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
                    #endregion ---Info---

                    #region ---Verify---
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                        foreach (var item in details)
                        {
                            if (item.DiaChiGui == null || item.MaPhongBanShopGui == null || item.TenPhongBanShopGui == null && item.MaTinhGui == null && item.MaHuyenGui == null || item.SoDienThoaiNguoiGui == null
                                || item.DiaChiNhan == null || item.MaTinhNhan == null || item.MaHuyenNhan == null || item.SoDienThoaiNguoiNhan == null
                                || item.MaLoaiHangHoa == null || item.NoiDungHangHoa == null || item.SoKien == null
                                || item.MaDichVuVanChuyen == null || item.MaNhaVanChuyen == null || item.MaHinhThucThanhToan == null)
                            {
                                countDetailLine++;
                            }
                        }
                        if (requestS.TypeId == 154)
                        {
                            if (countDetail == 0 || countDetailLine > 0)
                            {
                                TempData["Message"] = "Yêu cầu không có thông tin chi tiết!<br/>Yêu cầu đã bị hủy!";
                                return RedirectToAction("Create", "Requests");
                            }
                        }
                    }

                    //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    #region Check Calllog gốc đã chuyển bước
                    long l_RequestIdSave = 0;
                    int l_StepNoU = 0;
                    long l_RequestIdParent = 0;
                    int l_ParentId = 0;

                    foreach (var item in details)
                    {
                        l_RequestIdSave = 0;
                        if (item.RequestIdSave != null)
                            l_RequestIdSave = Convert.ToInt64(item.RequestIdSave);

                        l_StepNoU = 0;
                        if (item.StepNo != null)
                            l_StepNoU = Convert.ToInt32(item.StepNo);

                        l_RequestIdParent = 0;
                        if (item.RequestIdParent != null)
                            l_RequestIdParent = Convert.ToInt64(item.RequestIdParent);

                        l_ParentId = Convert.ToInt32(item.ParentId);

                        if (l_ParentId == 214)
                        {
                            if (l_RequestIdParent > 0)
                            {
                                Request requestParent = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestParent = db.Requests.FirstOrDefault(x => x.Id == l_RequestIdParent);
                                }

                                if (requestParent.StepNo != l_StepNoU)
                                {
                                    RequestDetail requestDetails = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        requestDetails = db.RequestDetails.FirstOrDefault(x => x.RequestId == l_RequestIdParent);
                                    }
                                    if ((requestParent.StepNo == 2 && requestDetails.Property12 != null && requestDetails.Property12 != "" && requestDetails.Property12 != l_RequestIdSave.ToString())
                                        || (requestParent.StepNo == 4 && requestDetails.Property13 != null && requestDetails.Property13 != "" && requestDetails.Property13 != l_RequestIdSave.ToString()))
                                    {
                                        if (l_RequestIdSave > 0)
                                        {
                                            Request requestSave = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                requestSave = db.Requests.FirstOrDefault(x => x.Id == l_RequestIdSave);
                                            }
                                            requestSave.Status = Key.StatusRequest.Cancel;
                                            requestSave.Remark = "Huỷ do Calllog gốc đã chuyển bước trước khi Calllog này được xử lý";
                                            TempData["Message"] = "Calllog gốc " + l_RequestIdParent + " đã chuyển bước bởi Calllog khác. Calllog này sẽ bị huỷ";
                                        }
                                        else
                                        {
                                            TempData["Message"] = "Calllog gốc " + l_RequestIdParent + " đã chuyển bước. Không thể thao tác";
                                        }
                                        db.SaveChanges();
                                        return null;
                                    }
                                }
                            }
                        }
                    }
                    #endregion Check Calllog gốc đã chuyển bước
                    //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    #endregion ---Verify---

                    #region ---Khai biến---
                    string[] stringCc = new string[] { };
                    EmployeeDAL emlDal = new EmployeeDAL();
                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    #endregion ---Khai biến---

                    #region ---Tách CallLog theo line---
                    foreach (var item in details)
                    {
                        #region ===Tạo biến lấy data từ màn hình===
                        string ShopPhongBanMoi = item.ShopPhongBanMoi;
                        string DiaChiGui = item.DiaChiGui;
                        string DiaChiNhan = item.DiaChiNhan;
                        string MaPhongBanGui = item.MaPhongBanShopGui;
                        string MaPhongBanGuiKerry = item.MaPhongBanShopGuiKerry;
                        string TenPhongBanShopGui = item.TenPhongBanShopGui;
                        string SoDienThoaiNguoiGui = item.SoDienThoaiNguoiGui;
                        string MaPhongBanNhan = string.Empty;
                        string MaPhongBanNhanKerry = string.Empty;
                        string TenPhongBanShopNhan = string.Empty;
                        string HoTenNguoiNhan = item.HoTenNguoiNhan;
                        string SoDienThoaiNguoiNhan = item.SoDienThoaiNguoiNhan;
                        string MaQuanHuyenGui = item.MaHuyenGui;
                        string MaTinhThanhGui = item.MaTinhGui;
                        string TenQuanHuyenGui = item.TenHuyenGui;
                        string TenTinhThanhGui = item.TenTinhGui;
                        string MaQuanHuyenNhan = item.MaHuyenNhan;
                        string MaTinhThanhNhan = item.MaTinhNhan;
                        string TenQuanHuyenNhan = item.TenHuyenNhan;
                        string TenTinhThanhNhan = item.TenTinhNhan;

                        string _NoiDungHangHoa = string.Empty;
                        if (item.NoiDungHangHoa != null)
                            _NoiDungHangHoa = item.NoiDungHangHoa;

                        string _SoKien = string.Empty;
                        if (item.SoKien != null)
                            _SoKien = item.SoKien;

                        string _TrongLuong = string.Empty;
                        if (item.TrongLuong != null)
                            _TrongLuong = item.TrongLuong;

                        string _MaLoaiHangHoa = string.Empty;
                        if (item.MaLoaiHangHoa != null)
                            _MaLoaiHangHoa = item.MaLoaiHangHoa;

                        string _MaHinhThucThanhToan = string.Empty;
                        if (item.MaHinhThucThanhToan != null)
                            _MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        //▼ ChuongNT3 - 01/10/2019 
                        string _GhiChu = string.Empty;
                        if (item.GhiChu != null)
                            _GhiChu = item.GhiChu;
                        string _MaPhongBanNhan = string.Empty;
                        if (item.MaPhongBanShopNhan != null)
                            _MaPhongBanNhan = item.MaPhongBanShopNhan;
                        string _MaPhongBanNhanKerry = string.Empty;
                        if (item.MaPhongBanShopNhanKerry != null)
                            _MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                        string _TenPhongBanShopNhan = string.Empty;
                        if (item.TenPhongBanShopNhan != null)
                            _TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        //▲ ChuongNT3 - 01/10/2019 
                        string _MaNhaVanChuyen = string.Empty;
                        if (item.MaNhaVanChuyen != null)
                            _MaNhaVanChuyen = item.MaNhaVanChuyen;

                        string _MaDichVuVanChuyen = string.Empty;
                        if (item.MaDichVuVanChuyen != null)
                            _MaDichVuVanChuyen = item.MaDichVuVanChuyen;

                        string _CheckNhan = string.Empty;
                        if (item.CheckNhan != null)
                            _CheckNhan = item.CheckNhan;

                        string _CheckGui = string.Empty;
                        if (item.CheckGui != null)
                            _CheckGui = item.CheckGui;

                        string _IdService = string.Empty;
                        if (item.IdService != null)
                            _IdService = item.IdService;

                        string _QuantityItem = string.Empty;
                        if (item.QuantityItem != null)
                            _QuantityItem = item.QuantityItem;

                        string _ParentId = string.Empty;
                        if (item.ParentId != null)
                            _ParentId = item.ParentId;

                        string _RequestIdSave = string.Empty;
                        if (item.RequestIdSave != null)
                            _RequestIdSave = item.RequestIdSave;

                        string _StepNo = string.Empty;
                        if (item.StepNo != null)
                            _StepNo = item.StepNo;

                        string _RequestIdParent = string.Empty;
                        if (item.RequestIdParent != null)
                            _RequestIdParent = item.RequestIdParent;

                        string l__CuocPhiMin__Str = (item.CuocPhiMin != null) ? item.CuocPhiMin : string.Empty;
                        int l__Is_NVCToiUu = int.TryParse((string)item.Is_NVCToiUu, out l__Is_NVCToiUu) ? l__Is_NVCToiUu : 0;

                        string l__Action = (item.Action != null ? item.Action : string.Empty);
                        sql.ExecuteCommand("sp__WEB__TaoBillVanChuyenKhoiBo__Data", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@DiaChiGui", DiaChiGui),
                            new SqlParameter("@DiaChiNhan", DiaChiNhan),
                            new SqlParameter("@MaPhongBanShopGui", MaPhongBanGui),
                            new SqlParameter("@MaPhongBanShopGuiKerry", MaPhongBanGuiKerry),
                            new SqlParameter("@TenPhongBanShopGui", TenPhongBanShopGui),
                            new SqlParameter("@SoDienThoaiNguoiGui", SoDienThoaiNguoiGui),
                            //▼ ChuongNT3 - 01/10/2019 
                            new SqlParameter("@MaPhongBanShopNhan", _MaPhongBanNhan),
                            new SqlParameter("@MaPhongBanShopNhanKerry", _MaPhongBanNhanKerry),
                            new SqlParameter("@TenPhongBanShopNhan", _TenPhongBanShopNhan),
                            //▲ ChuongNT3 - 01/10/2019 
                            new SqlParameter("@HoTenNguoiNhan", HoTenNguoiNhan),
                            new SqlParameter("@SoDienThoaiNguoiNhan", SoDienThoaiNguoiNhan),
                            new SqlParameter("@MaHuyenGui", MaQuanHuyenGui),
                            new SqlParameter("@MaTinhGui", MaTinhThanhGui),
                            new SqlParameter("@TenHuyenGui", TenQuanHuyenGui),
                            new SqlParameter("@TenTinhGui", TenTinhThanhGui),
                            new SqlParameter("@MaHuyenNhan", MaQuanHuyenNhan),
                            new SqlParameter("@MaTinhNhan", MaTinhThanhNhan),
                            new SqlParameter("@TenHuyenNhan", TenQuanHuyenNhan),
                            new SqlParameter("@TenTinhNhan", TenTinhThanhNhan),
                            new SqlParameter("@ShopPhongBanMoi", ShopPhongBanMoi),
                            new SqlParameter("@NoiDungHangHoa", _NoiDungHangHoa),
                            new SqlParameter("@SoKien", _SoKien),
                            new SqlParameter("@TrongLuong", _TrongLuong),
                            new SqlParameter("@MaLoaiHangHoa", _MaLoaiHangHoa),
                            new SqlParameter("@MaHinhThucThanhToan", _MaHinhThucThanhToan),
                            new SqlParameter("@GhiChu", _GhiChu),
                            new SqlParameter("@MaNhaVanChuyen", _MaNhaVanChuyen),
                            new SqlParameter("@MaDichVuVanChuyen", _MaDichVuVanChuyen),
                            new SqlParameter("@CheckNhan", _CheckNhan),
                            new SqlParameter("@CheckGui", _CheckGui),
                            new SqlParameter("@IdService", _IdService),
                            new SqlParameter("@QuantityItem", _QuantityItem),
                            new SqlParameter("@ParentId", _ParentId),
                            new SqlParameter("@RequestIdSave", _RequestIdSave),
                            new SqlParameter("@StepNo", _StepNo),
                            new SqlParameter("@RequestIdParent", _RequestIdParent),
                            new SqlParameter("@Function", "CreateBillFromHC__BillVanChuyen__CreateRequest"),
                            new SqlParameter("@Action", l__Action),
                            new SqlParameter("@CuocPhiMin", l__CuocPhiMin__Str),
                            new SqlParameter("@Is_NVCToiUu", l__Is_NVCToiUu),
                            });

                        if (ShopPhongBanMoi != "")
                        {
                            DataTable tb1 = sql.ExecuteCommand("OrganizationForCompany", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@CompanyName",ShopPhongBanMoi),
                                new SqlParameter("@CompanyAddress",DiaChiNhan),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhNhan),
                                new SqlParameter("@MaUser",UserManager.CurrentUser.InsideCode)
                                });
                            if (tb1 != null && tb1.Rows.Count > 0)
                            {
                                DataRow row = tb1.Rows[0];
                                MaPhongBanNhan = row["MaPhongBanMoi"].ToString();
                                MaPhongBanNhanKerry = row["MaPhongBanMoi"].ToString();
                                TenPhongBanShopNhan = ShopPhongBanMoi;
                            }
                        }
                        else
                        {
                            MaPhongBanNhan = item.MaPhongBanShopNhan;
                            MaPhongBanNhanKerry = item.MaPhongBanShopNhanKerry;
                            TenPhongBanShopNhan = item.TenPhongBanShopNhan;
                        }

                        string NoiDungHangHoa = item.NoiDungHangHoa;
                        string SoKien = item.SoKien;
                        string TrongLuong = item.TrongLuong;
                        string TrongLuongFRT = item.TrongLuongFRT;
                        string TrongLuongNVC = string.Empty;
                        if (TrongLuong != null)
                        {
                            TrongLuongNVC = TrongLuong;
                        }
                        else
                        {
                            TrongLuongNVC = "0";
                        }

                        string MaLoaiHangHoa = item.MaLoaiHangHoa;
                        string MaHinhThucThanhToan = item.MaHinhThucThanhToan;
                        string GhiChu = item.GhiChu;

                        string MaNhaVanChuyen = item.MaNhaVanChuyen;
                        string MaDichVuVanChuyen = item.MaDichVuVanChuyen;
                        long RequestIdSave = 0;
                        if (item.RequestIdSave != null)
                            RequestIdSave = Convert.ToInt64(item.RequestIdSave);
                        int StepNoU = 0;
                        if (item.StepNo != null)
                            StepNoU = Convert.ToInt32(item.StepNo);
                        long RequestIdParent = 0;
                        if (item.RequestIdParent != null)
                            RequestIdParent = Convert.ToInt64(item.RequestIdParent);
                        int ParentId = Convert.ToInt32(item.ParentId);
                        int QuantityItem = 0;
                        if (item.QuantityItem != null)
                            QuantityItem = Convert.ToInt32(item.QuantityItem);

                        double l__CuocPhiMin__Doub = 0;
                        l__CuocPhiMin__Doub = double.TryParse(l__CuocPhiMin__Str, out l__CuocPhiMin__Doub) ? l__CuocPhiMin__Doub : 0;

                        #region ==="Lên thực ràng lại" (NOTE: Không biết)===
                        string CheckNhan = item.CheckNhan;
                        string CheckGui = item.CheckGui;
                        if (CheckGui == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan",UserManager.CurrentUser.OrganizationHierachyCode),
                                new SqlParameter("@DiaChi",DiaChiGui),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhGui),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenGui),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenGui),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhGui),
                                new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                            });
                        }
                        if (CheckNhan == "0")
                        {
                            sql.ExecuteWithoutResult("sp_ThemMoiDiaChiPhongBan", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@MaPhongBan",MaPhongBanNhan),
                                new SqlParameter("@DiaChi",DiaChiNhan),
                                new SqlParameter("@MaTinhThanh",MaTinhThanhNhan),
                                new SqlParameter("@MaQuanHuyen",MaQuanHuyenNhan),
                                new SqlParameter("@TenQuanHuyen",TenQuanHuyenNhan),
                                new SqlParameter("@TenTinhThanh",TenTinhThanhNhan),
                                new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                            });
                        }
                        #endregion ==="Lên thực ràng lại" (NOTE: Không biết)===
                        #endregion ===Tạo biến lấy data từ màn hình===

                        long l__Req__Cre__Id = 0;
                        int l__Req__Cre__StepNo = 0;
                        string l__Req__Cre__Sender = UserManager.CurrentUser.InsideCode;
                        string l__Req__Cre__Title = Convert.ToString(form["TitleRequest"]);
                        string l__Req__Cre__FromShop = UserManager.CurrentUser.WarehouseCode;

                        #region ===Xử lý Header CallLog===
                        #region ---Set biến---
                        if (cc != null && cc != "")
                            stringCc = cc.Split(',');
                        if (RequestIdSave > 0)
                        {
                            l__Req__Cre__Id = RequestIdSave;
                        }
                        if (sender != null && sender != "")
                        {
                            l__Req__Cre__Sender = sender;
                            var empSender = emlDal.Get(l__Req__Cre__Sender);
                            if (empSender != null)
                                shopUserSent = shopDal.Get(empSender.WarehouseCode);
                        }
                        if (shopUserSent != null)
                        {
                            l__Req__Cre__FromShop = shopUserSent.WarehouseCode;
                        }
                        #endregion ---Set biến---

                        DataTable l__DataTable = new DataTable("Header");
                        #region ---Xử lý Header---
                        l__DataTable = sql.ExecuteCommand("sp__BillVanChuyen__CreateRequest", CommandType.StoredProcedure, new SqlParameter[]{
                            new SqlParameter("@RequestId", l__Req__Cre__Id),
                            new SqlParameter("@Type", 1), // * Loại: 1:Tạo Bill gửi
                            new SqlParameter("@Sender", l__Req__Cre__Sender),
                            new SqlParameter("@Title", l__Req__Cre__Title),
                            new SqlParameter("@FromShop", l__Req__Cre__FromShop),
                            new SqlParameter("@FromOffice", UserManager.CurrentUser.OrganizationHierachyCode),
                            new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                            new SqlParameter("@Is_NVCToiUu", l__Is_NVCToiUu),
                            new SqlParameter("@FromForm", "CallLog-Ref-Ver2"),
                        });
                        #endregion ---Xử lý Header---

                        #region ---Check KQ---
                        if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                        {
                            if (l__DataTable.Rows[0]["Result"].ToString() == "1")
                            {
                                string l__RequestId__Str = l__DataTable.Rows[0]["RequestId"].ToString();
                                l__Req__Cre__Id = long.TryParse(l__RequestId__Str, out l__Req__Cre__Id) ? l__Req__Cre__Id : 0;
                                string l__StepNo__Str = l__DataTable.Rows[0]["StepNo"].ToString();
                                l__Req__Cre__StepNo = int.TryParse(l__StepNo__Str, out l__Req__Cre__StepNo) ? l__Req__Cre__StepNo : 0;

                                #region ===Xử lý Detail CallLog===
                                if (l__Req__Cre__Id > 0)
                                {
                                    myCollection.Add(l__Req__Cre__Id);

                                    if (RequestIdSave > 0)
                                    {
                                        #region ===Bill có sẵn===
                                        #region ---Cập nhật Detail CallLog---
                                        RequestDetail l_RequestDetail = null;
                                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                        {
                                            l_RequestDetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == l__Req__Cre__Id);
                                        }
                                        if (l_RequestDetail != null)
                                        {
                                            l_RequestDetail.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                                            l_RequestDetail.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                                            if (MaPhongBanGui != null)
                                            {
                                                l_RequestDetail.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                                            }
                                            else
                                            {
                                                l_RequestDetail.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                                            }
                                            l_RequestDetail.EmpCode = SoDienThoaiNguoiGui;
                                            l_RequestDetail.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                                            l_RequestDetail.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                                            l_RequestDetail.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                                            l_RequestDetail.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                                            l_RequestDetail.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                                            l_RequestDetail.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                                            l_RequestDetail.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                                            if (MaNhaVanChuyen == "NT")
                                            {
                                                l_RequestDetail.ProductCode = "FC" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                            }
                                            else if (MaNhaVanChuyen == "Kerry")
                                            {
                                                l_RequestDetail.ProductCode = "CK" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                            }
                                            else if (MaNhaVanChuyen == "VNC")
                                            {
                                                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                                l_RequestDetail.ProductCode = "VC" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                            }

                                            l_RequestDetail.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                                            l_RequestDetail.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                                            l_RequestDetail.Property10 = TrongLuong;                     //Cân nặng
                                            l_RequestDetail.Property12 = TrongLuongFRT;
                                            l_RequestDetail.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                                            l_RequestDetail.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                                            l_RequestDetail.Note = GhiChu;                               //Ghi chú

                                            l_RequestDetail.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                                            l_RequestDetail.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                                            l_RequestDetail.Status = Key.Status.Available;
                                            //▼ Add - TrungNC3 - 08/11/2017 - Thêm  xác nhận khi tạo bill hỏa tốc
                                            if (form["PassApproved"] != null)
                                            {
                                                l_RequestDetail.Approved = form["PassApproved"].ToString() == "1" ? true : false;
                                            }
                                            //▲ Add - TrungNC3 - 08/11/2017 - Thêm  xác nhận khi tạo bill hỏa tốc
                                            if (QuantityItem > 0)
                                                l_RequestDetail.Quantity3 = QuantityItem;
                                            if (ParentId > 0)
                                                l_RequestDetail.Quantity4 = ParentId;
                                            if (StepNoU > 0)
                                                l_RequestDetail.Quantity5 = StepNoU;
                                            if (RequestIdParent > 0)
                                                l_RequestDetail.Quantity6 = Convert.ToInt32(RequestIdParent);

                                            if (l__CuocPhiMin__Doub > 0)
                                            {
                                                l_RequestDetail.Money3 = l__CuocPhiMin__Doub;
                                            }

                                            l_RequestDetail.QuantityAvaiable = null; //  Duyệt Thay đổi Nhà vận chuyển? null:Chờ duyệt ; 1:Duyệt ; 0:Từ chối

                                            db.SaveChanges();
                                        }
                                        #endregion ---Cập nhật Detail CallLog---

                                        #region ---Xử lý Calllog gốc---
                                        if (StepNoU > 0 && RequestIdParent > 0)
                                        {
                                            //▼ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            TypeIdParent = ParentId;
                                            p__RequestIdParent = RequestIdParent;
                                            //▲ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            RequestDetail rqd = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                rqd = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestIdParent);
                                            }

                                            if (rqd != null)
                                            {
                                                //▼ Add - TrungNC3 - 01/12/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                                                if (ParentId == 45)
                                                {
                                                    rqd.Property11 = l__Req__Cre__Id.ToString();
                                                }
                                                else if (ParentId == 23)
                                                {
                                                    rqd.Property11 = l__Req__Cre__Id.ToString();
                                                }
                                                else if (ParentId == 163)
                                                {
                                                    rqd.Property10 = l__Req__Cre__Id.ToString();
                                                }
                                                //▲ Add - TrungNC3 - 01/12/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển                                                                       
                                            }

                                            //▼ Add - TuanNA89 - 27/09/2019 - Tạo trao đổi riêng với loại 214
                                            if (ParentId == 214)
                                            {
                                                Conversation cvs = new Conversation();
                                                cvs.RequestId = Convert.ToInt64(RequestIdParent);
                                                cvs.Message = "Hệ thống đã auto sinh ra số bill vận chuyển: " + l_RequestDetail.ProductCode;
                                                cvs.Sender = "-1";
                                                cvs.CreateBy = "-1";
                                                cvs.Status = Key.Status.Available;
                                                cvs.StepNo = StepNoU;
                                                cvs.TimeCreate = DateTime.Now;
                                                cvs.Type = Key.Conversation.Comment;
                                                db.Conversations.Add(cvs);
                                            }
                                            else
                                            {
                                                Conversation cvs = new Conversation();
                                                cvs.RequestId = Convert.ToInt64(RequestIdParent);
                                                cvs.Message = "Hệ thống đã auto sinh ra số calllog bill vận chuyển: <a href='/Requests/Details/" + l__Req__Cre__Id.ToString() + "' target='_blank'>" + l__Req__Cre__Id.ToString() + "</a>";
                                                cvs.Sender = "-1";
                                                cvs.CreateBy = "-1";
                                                cvs.Status = Key.Status.Available;
                                                cvs.StepNo = StepNoU;
                                                cvs.TimeCreate = DateTime.Now;
                                                cvs.Type = Key.Conversation.Comment;
                                                db.Conversations.Add(cvs);
                                            }
                                            //▲ Add - TuanNA89 - 27/09/2019 - Tạo trao đổi riêng với loại 214

                                            var converstationBill = new Conversation();
                                            converstationBill.RequestId = l__Req__Cre__Id;
                                            converstationBill.Message = "Bill vận chuyển được sinh ra từ yêu cầu: <a href='/Requests/Details/" + RequestIdParent.ToString() + "' target='_blank'>" + RequestIdParent.ToString() + "</a>";
                                            converstationBill.Sender = "-1";
                                            converstationBill.CreateBy = "-1";
                                            converstationBill.Status = Key.Status.Available;
                                            converstationBill.StepNo = l__Req__Cre__StepNo;
                                            converstationBill.TimeCreate = DateTime.Now;
                                            converstationBill.Type = Key.Conversation.Comment;
                                            db.Conversations.Add(converstationBill);
                                        }
                                        #endregion ---Xử lý Calllog gốc---
                                        #endregion ===Bill có sẵn===
                                    }
                                    else
                                    {
                                        #region ===Bill tạo mới===
                                        #region ---Tạo Detail CallLog---
                                        RequestDetail l_RequestDetail = new RequestDetail();
                                        l_RequestDetail.RequestId = l__Req__Cre__Id;

                                        l_RequestDetail.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                                        l_RequestDetail.Property5 = DiaChiNhan;                      //Địa chỉ nhận
                                        if (MaPhongBanGui != null)
                                        {
                                            l_RequestDetail.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                                        }
                                        else
                                        {
                                            l_RequestDetail.ShopCode = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                                        }
                                        l_RequestDetail.EmpCode = SoDienThoaiNguoiGui;
                                        l_RequestDetail.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                                        l_RequestDetail.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                                        l_RequestDetail.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                                        l_RequestDetail.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                                        l_RequestDetail.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                                        l_RequestDetail.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                                        l_RequestDetail.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                                        if (MaNhaVanChuyen == "NT")
                                        {
                                            l_RequestDetail.ProductCode = "FC" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                        }
                                        else if (MaNhaVanChuyen == "Kerry")
                                        {
                                            l_RequestDetail.ProductCode = "CK" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                        }
                                        else if (MaNhaVanChuyen == "VNC")
                                        {
                                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                            l_RequestDetail.ProductCode = "VC" + l__Req__Cre__Id.ToString();         //Mã số chứng từ hàng hóa
                                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                        }

                                        l_RequestDetail.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                                        l_RequestDetail.Quantity1 = Convert.ToInt32(SoKien);         //Số lượng đơn hàng
                                        l_RequestDetail.Property10 = TrongLuong;                     //Cân nặng
                                        l_RequestDetail.Property12 = TrongLuongFRT;
                                        l_RequestDetail.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                                        l_RequestDetail.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                                        l_RequestDetail.Note = GhiChu;                               //Ghi chú

                                        l_RequestDetail.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                                        l_RequestDetail.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                                        l_RequestDetail.Status = Key.Status.Available;
                                        //▼ Add - TrungNC3 - 08/11/2017 - Thêm  xác nhận khi tạo bill hỏa tốc
                                        if (form["PassApproved"] != null)
                                        {
                                            l_RequestDetail.Approved = form["PassApproved"].ToString() == "1" ? true : false;
                                        }
                                        //▲ Add - TrungNC3 - 08/11/2017 - Thêm  xác nhận khi tạo bill hỏa tốc
                                        if (QuantityItem > 0)
                                            l_RequestDetail.Quantity3 = QuantityItem;
                                        if (ParentId > 0)
                                            l_RequestDetail.Quantity4 = ParentId;
                                        if (StepNoU > 0)
                                            l_RequestDetail.Quantity5 = StepNoU;
                                        if (RequestIdParent > 0)
                                            l_RequestDetail.Quantity6 = Convert.ToInt32(RequestIdParent);

                                        if (l__CuocPhiMin__Doub > 0)
                                        {
                                            l_RequestDetail.Money3 = l__CuocPhiMin__Doub;
                                        }

                                        l_RequestDetail.QuantityAvaiable = null; //  Duyệt Thay đổi Nhà vận chuyển? null:Chờ duyệt ; 1:Duyệt ; 0:Từ chối

                                        db.RequestDetails.Add(l_RequestDetail);
                                        #endregion ---Tạo Detail CallLog---

                                        #region ---Nội dung yêu cầu của người tạo---
                                        if (message.Length != 0)
                                        {
                                            var converstation = new Conversation();
                                            converstation.RequestId = l__Req__Cre__Id;
                                            converstation.Message = message;
                                            converstation.Sender = UserManager.CurrentUser.InsideCode;
                                            converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                                            converstation.Status = Key.Status.Available;
                                            converstation.StepNo = 0;
                                            converstation.TimeCreate = DateTime.Now;
                                            converstation.Type = Key.Conversation.Create;
                                            db.Conversations.Add(converstation);
                                        }
                                        #endregion ---Nội dung yêu cầu của người tạo---

                                        #region ---Cc---
                                        foreach (var item1 in stringCc)
                                        {
                                            var AssignerCc = new Assigner();
                                            AssignerCc.RequestId = l__Req__Cre__Id;
                                            AssignerCc.EmployeeCode = item1.ToString();
                                            AssignerCc.StepNo = l__Req__Cre__StepNo;
                                            AssignerCc.Type = Key.TypeAssigner.Cc;
                                            AssignerCc.TimeCreate = DateTime.Now;
                                            AssignerCc.Status = Key.StatusRequest.Waitting;
                                            db.Assigners.Add(AssignerCc);
                                        }
                                        #endregion ---Cc---

                                        #region ---Xử lý Calllog gốc---
                                        if (StepNoU > 0 && RequestIdParent > 0)
                                        {
                                            //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            TypeIdParent = ParentId;
                                            //▼ Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            p__RequestIdParent = RequestIdParent;
                                            //▲ Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            RequestDetail rqd = null;
                                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                            {
                                                rqd = db.RequestDetails.FirstOrDefault(x => x.RequestId == RequestIdParent);
                                            }

                                            if (rqd != null)
                                            {
                                                if (ParentId == 23)
                                                {
                                                    rqd.Property11 = l__Req__Cre__Id.ToString();
                                                }
                                                else if (ParentId == 45)
                                                {
                                                    rqd.Property11 = l__Req__Cre__Id.ToString();
                                                }
                                                else if (ParentId == 163)
                                                {
                                                    rqd.Property10 = l__Req__Cre__Id.ToString();
                                                }
                                                //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                                else if (ParentId == 214)
                                                {
                                                    Request requestParent = null;
                                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                                    {
                                                        requestParent = db.Requests.FirstOrDefault(x => x.Id == RequestIdParent);
                                                    }

                                                    List<RequestDetail> requestDetails = db.RequestDetails.Where(x => x.RequestId == RequestIdParent).ToList<RequestDetail>();
                                                    if (requestParent != null)
                                                    {
                                                        #region Update RequestDetails
                                                        foreach (var detail in requestDetails)
                                                        {
                                                            if (requestParent.StepNo == 1)
                                                            {
                                                                detail.Property12 = l__Req__Cre__Id.ToString();
                                                            }
                                                            else if (new List<int> { 2, 3 }.Contains(requestParent.StepNo))
                                                            {
                                                                detail.Property13 = l__Req__Cre__Id.ToString();
                                                            }
                                                        }
                                                        #endregion

                                                        db.SaveChanges();
                                                    }
                                                }
                                                //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                            }

                                            #region ===Set Session===
                                            //▼ Edit - TrungNC3 - 2017.09.01 - Thêm lưu Mã request gốc
                                            if (Session[Key.Session.BillInfo] != null)
                                            {
                                                DataTable billInfo = Session[Key.Session.BillInfo] as DataTable;
                                                DataRow dr = billInfo.Rows[0];

                                                //▼ Add - TuanNA89 - 27/09/2019 - Tạo trao đổi riêng với loại 214
                                                if (ParentId == 214)
                                                {
                                                    Conversation cvs = new Conversation();
                                                    cvs.RequestId = Convert.ToInt64(RequestIdParent);
                                                    cvs.Message = "Hệ thống đã auto sinh ra số bill vận chuyển: " + l_RequestDetail.ProductCode;
                                                    cvs.Sender = "-1";
                                                    cvs.CreateBy = "-1";
                                                    cvs.Status = Key.Status.Available;
                                                    cvs.StepNo = StepNoU;
                                                    cvs.TimeCreate = DateTime.Now;
                                                    cvs.Type = Key.Conversation.Comment;
                                                    db.Conversations.Add(cvs);
                                                }
                                                else
                                                {
                                                    Conversation cvs = new Conversation();
                                                    cvs.RequestId = RequestIdParent;
                                                    cvs.Message = "Hệ thống đã auto sinh ra số calllog bill vận chuyển: <a href='/Requests/Details/" + l__Req__Cre__Id.ToString() + "' target='_blank'>" + l__Req__Cre__Id.ToString() + "</a>";
                                                    cvs.Sender = "-1";
                                                    cvs.CreateBy = "-1";
                                                    cvs.Status = Key.Status.Available;
                                                    cvs.StepNo = StepNoU;
                                                    cvs.TimeCreate = DateTime.Now;
                                                    cvs.Type = Key.Conversation.Comment;
                                                    db.Conversations.Add(cvs);
                                                }
                                                //▲ Add - TuanNA89 - 27/09/2019 - Tạo trao đổi riêng với loại 214

                                                var converstationBill = new Conversation();
                                                converstationBill.RequestId = l__Req__Cre__Id;
                                                converstationBill.Message = "Bill vận chuyển được sinh ra từ yêu cầu " + billInfo.Rows[0]["Description"].ToString() + ":  <a href='/Requests/Details/" + RequestIdParent.ToString() + "' target='_blank'>" + RequestIdParent.ToString() + "</a>";
                                                converstationBill.Sender = "-1";
                                                converstationBill.CreateBy = "-1";
                                                converstationBill.Status = Key.Status.Available;
                                                converstationBill.StepNo = l__Req__Cre__StepNo;
                                                converstationBill.TimeCreate = DateTime.Now;
                                                converstationBill.Type = Key.Conversation.Comment;
                                                db.Conversations.Add(converstationBill);
                                            }
                                            #endregion ===Set Session===
                                        }
                                        //▲ Add - TrungNC3 - 01/12/2017 - Thêm Cột Thay đổi session tạo Bill Vận Chuyển
                                        #endregion ---Xử lý Calllog gốc---
                                        #endregion ===Bill tạo mới===
                                    }

                                    db.SaveChanges();

                                    #region ---Send Mail---
                                    XMail.Send(l__Req__Cre__Id, "[CallLog] - " + l__Req__Cre__Title, XMail.ProcessType.Create);
                                    #endregion ---Send Mail---

                                    if (l__Req__Cre__StepNo == 2)
                                    {
                                        #region ---Tạo CallLog Duyệt Bill Vận chuyển Hỏa tốc---
                                        if (item.IdService == 1)
                                        {
                                            string l_ResStr = BillVanChuyen__TaoCLDuyetBillVCHoaToc(l__Req__Cre__Id);
                                            BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result l_Result = JsonConvert.DeserializeObject<BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result>(l_ResStr);
                                            if (l_Result.RequestId > 0)
                                            {
                                                RequestHT.Add(l_Result.RequestId.ToString());
                                            }
                                        }
                                        #endregion ---Tạo CallLog Duyệt Bill Vận chuyển Hỏa tốc---

                                        #region     ---Tích hợp Nhà vận chuyển---
                                        string l_ResStr_NVC = BillVanChuyen__TichHopNhaVanChuyen(l__Req__Cre__Id);
                                        BillVanChuyen__TichHopNhaVanChuyen__Result l_Result_NVC = JsonConvert.DeserializeObject<BillVanChuyen__TichHopNhaVanChuyen__Result>(l_ResStr_NVC);
                                        ResultFromNVC = l_Result_NVC.Result + "-" + l_Result_NVC.Msg;
                                        #endregion  ---Tích hợp Nhà vận chuyển---
                                    }
                                }
                                #endregion ===Xử lý Detail CallLog===
                            }
                            else
                            {
                                TempData["Message"] = "Tạo CL: " + l__Req__Cre__Id.ToString() + " - Thất bại! - " + l__DataTable.Rows[0]["Msg"].ToString();
                            }
                        }
                        else
                        {
                            TempData["Message"] = "Tạo CL: " + l__Req__Cre__Id.ToString() + " - Thất bại! - Không có kết quả!";
                        }
                        #endregion ---Check KQ---
                        #endregion ===Xử lý Header CallLog===
                    }
                    if (Session[Key.Session.BillInfo] != null)
                    {
                        Session[Key.Session.BillInfo] = null;
                    }
                    #endregion ---Tách CallLog theo line---

                    #region ---Trả về---
                    returnStr = String.Join(", ", myCollection.ToArray());
                    string returnStrHT = String.Join(", ", RequestHT.ToArray());
                    string strReturn = string.Empty;

                    //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                    if (TypeIdParent == 214)
                    {
                        #region MyRegion
                        //▼ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        Request requestParent = null;
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            requestParent = db.Requests.FirstOrDefault(x => x.Id == p__RequestIdParent);
                        }

                        if (requestParent != null)
                        {
                            #region Update or Insert RequestStep
                            RequestStep step = new RequestStep();
                            RequestStep oldStep = new RequestStep();
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                step = db.RequestSteps.FirstOrDefault(x => x.RequestId == requestParent.Id && x.Status == Key.Status.Available && x.StepNo == requestParent.StepNo);
                            }
                            if (step != null)
                            {
                                step.TimeEnd = DateTime.Now;

                                if (step.StepNo == 2)
                                {
                                    oldStep = step;

                                    step = new RequestStep();
                                    step.RequestId = requestParent.Id;
                                    step.TimeCreate = DateTime.Now;
                                    step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;
                                    step.TimeEnd = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;
                                    step.Assigner = requestParent.Assigner;
                                    step.StepNo = 3;
                                    step.Status = Key.Status.Available;
                                    db.RequestSteps.Add(step);
                                }
                            }
                            else
                            {
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    oldStep = db.RequestSteps.FirstOrDefault(x => x.RequestId == requestParent.Id && x.StepNo == requestParent.StepNo - 1 && x.Status == Key.Status.Available);
                                }

                                step = new RequestStep();
                                step.RequestId = requestParent.Id;
                                step.TimeCreate = DateTime.Now;
                                step.TimeStart = (oldStep != null && oldStep.TimeEnd != null) ? oldStep.TimeEnd : requestParent.TimeCreate;
                                step.TimeEnd = DateTime.Now;
                                step.Assigner = requestParent.Assigner;
                                step.StepNo = requestParent.StepNo;
                                step.Status = Key.Status.Available;
                                db.RequestSteps.Add(step);
                            }
                            db.SaveChanges();
                            #endregion

                            #region Xử lý Calllog
                            if (new List<int> { 2, 3 }.Contains(requestParent.StepNo))
                            {
                                requestParent.StepNo = 4;
                            }
                            else
                            {
                                requestParent.StepNo += 1;
                            }
                            db.SaveChanges();
                            #endregion

                            #region Gan nguoi xu lý mới
                            requestParent.Status = Key.StatusRequest.Processing;
                            requestParent.StepStatus = Key.StatusRequest.Waitting;
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId",requestParent.Id),
                                new SqlParameter("@StepNo",requestParent.StepNo)
                            });
                            if (table != null && table.Rows.Count > 0)
                                requestParent.Assigner = table.Rows[0]["Assigner"].ToString();
                            else
                                requestParent.Assigner = string.Empty;
                            db.SaveChanges();
                            #endregion

                            requestParent.TimeLastUpdate = DateTime.Now;
                            requestParent.UpdateBy = UserManager.CurrentUser.InsideCode;
                            db.SaveChanges();
                        }
                        //▲ Add - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        strReturn = "Tạo Request " + myCollection.Count.ToString() + "/" + myCollection.Count.ToString() + ":" + returnStr + " thành công!<br> Tạo Request Bill hỏa tốc " + RequestHT.Count.ToString() + "/" + RequestHT.Count.ToString() + ": " + returnStrHT.ToString() + "<br/>Thành công!<br/>Kết quả NVC: " + ResultFromNVC + "<br/>Calllog " + p__RequestIdParent + " chuyển bước thành công";
                        #endregion
                    }
                    //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành                    
                    else
                    {
                        strReturn = "Tạo Request " + myCollection.Count.ToString() + "/" + myCollection.Count.ToString() + ":" + returnStr + " thành công!Tạo Request Bill hỏa tốc " + RequestHT.Count.ToString() + "/" + RequestHT.Count.ToString() + ": " + returnStrHT.ToString() + "<br/>Thành công!<br/>Kết quả NVC: " + ResultFromNVC;
                    }

                    TempData["Message"] = strReturn;
                    #endregion ---Trả về---
                    #endregion ===Xử lý===
                }
                catch (Exception ex)
                {
                    #region ===Exception===
                    db = new CallLogDbContext();
                    if (Session[Key.Session.BillInfo] != null)
                        Session[Key.Session.BillInfo] = null;
                    if (myCollection.Count > 0)
                    {
                        foreach (var itemCollection in myCollection)
                        {
                            if (myCollection[myCollection.Count - 1] == itemCollection)
                            {
                                string l_Message = string.Empty;
                                var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemCollection);
                                if (requestCancel != null)
                                {
                                    requestCancel.Remark = "Create request fail details";
                                    requestCancel.Status = Key.StatusRequest.Cancel;
                                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                                    l_Message = "Tạo Request " + (myCollection.Count - 1).ToString() + "/" + countDetail.ToString() + ":" + returnStr + " thành công!<br/>Kết quả NVC: " + ResultFromNVC + ex.Message;
                                }

                                //▼ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                                if (TypeIdParent == 214)
                                {
                                    l_Message += "<br/>Calllog " + p__RequestIdParent.ToString() + " chuyển bước thành công!";
                                }
                                //▲ Add - TuanNA89 - 13/08/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành

                                TempData["Message"] = l_Message;
                            }
                            else
                            {
                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                                ViewBag.Message = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!<br/>" + ex.Message;
                                TempData["Message"] = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!";
                            }

                        }
                        db.SaveChanges();
                    }
                    else
                    {
                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                        ViewBag.Message = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!<br/>" + ex.Message;
                        TempData["Message"] = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!";
                    }
                    #endregion ===Exception===
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request!<br/>Xin vui lòng thử lại!";
            }
            return null;
        }
        class BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result
        {
            public int RequestId { set; get; }
            public string Message { set; get; }
        }
        /// <summary>GET: /Requests/BillVanChuyen__TaoCLDuyetBillVCHoaToc</summary>
        public string BillVanChuyen__TaoCLDuyetBillVCHoaToc(long RequestId)
        {
            BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result l_Result = new BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result();
            try
            {
                if (RequestId > 0)
                {
                    DataTable l_DataTable = sql.ExecuteCommand("Request_InsertBillHoaToc_ByBillReq", CommandType.StoredProcedure, new SqlParameter[]
                {
                    new SqlParameter("@BillReq", RequestId)
                });
                    if (l_DataTable != null && l_DataTable.Rows.Count > 0)
                    {
                        string l__RequestId__Str = l_DataTable.Rows[0]["RequestId"].ToString();
                        int l__RequestId = int.TryParse(l__RequestId__Str, out l__RequestId) ? l__RequestId : 0;
                        l_Result.RequestId = l__RequestId;
                        l_Result.Message = l_DataTable.Rows[0]["Message"].ToString();
                    }
                    else
                    {
                        l_Result.RequestId = 0;
                        l_Result.Message = "Tạo CL Duyệt Bill Hỏa tốc Thất bại!";
                    }
                }
                else
                {
                    l_Result.RequestId = 0;
                    l_Result.Message = "RequestId Không hợp lệ!";
                }
            }
            catch (Exception ex)
            {
                l_Result.RequestId = 0;
                l_Result.Message = ex.Message;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", "RequestId: " + RequestId + " - " + ex.ToString());
            }
            return JsonConvert.SerializeObject(l_Result);
        }
        class BillVanChuyen__TichHopNhaVanChuyen__Result
        {
            public int Result { set; get; }
            public string Msg { set; get; }
        }
        /// <summary>GET: /Requests/BillVanChuyen__TichHopNhaVanChuyen</summary>
        public string BillVanChuyen__TichHopNhaVanChuyen(long RequestId)
        {
            BillVanChuyen__TichHopNhaVanChuyen__Result l_Result = new BillVanChuyen__TichHopNhaVanChuyen__Result();
            try
            {
                if (RequestId > 0)
                {
                    #region     ===Tích hợp Nhà vận chuyển===
                    DataTable l_DataTable_Info = sql.ExecuteCommand("sp__BillVanChuyen__TichHopNVC__GetInfo", CommandType.StoredProcedure, new SqlParameter[]
                {
                    new SqlParameter("@RequestId", RequestId)
                });
                    if (l_DataTable_Info != null && l_DataTable_Info.Rows.Count > 0)
                    {
                        #region     ---Tạo biến lấy data---
                        //  Mã Nhà vận chuyển
                        string MaNhaVanChuyen = l_DataTable_Info.Rows[0]["MaNhaVanChuyen"].ToString();
                        //  ===1. Mã số chứng từ vận chuyển===
                        string MaSoChungTuVanChuyen = l_DataTable_Info.Rows[0]["MaSoChungTuVanChuyen"].ToString();
                        string MaDichVuVanChuyen = l_DataTable_Info.Rows[0]["MaDichVuVanChuyen"].ToString();
                        string SoKien = l_DataTable_Info.Rows[0]["SoKien"].ToString();
                        string TrongLuong = l_DataTable_Info.Rows[0]["TrongLuong"].ToString();
                        string TrongLuongNVC = l_DataTable_Info.Rows[0]["TrongLuongNVC"].ToString();
                        string NoiDungHangHoa = l_DataTable_Info.Rows[0]["NoiDungHangHoa"].ToString();
                        string MaPhongBanGui = l_DataTable_Info.Rows[0]["MaPhongBanGui"].ToString();
                        string MaPhongBanGuiKerry = l_DataTable_Info.Rows[0]["MaPhongBanGuiKerry"].ToString();
                        string DiaChiGui = l_DataTable_Info.Rows[0]["DiaChiGui"].ToString();
                        string MaTinhThanhGui = l_DataTable_Info.Rows[0]["MaTinhThanhGui"].ToString();
                        string TenTinhThanhGui = l_DataTable_Info.Rows[0]["TenTinhThanhGui"].ToString();
                        string MaQuanHuyenGui = l_DataTable_Info.Rows[0]["MaQuanHuyenGui"].ToString();
                        string TenQuanHuyenGui = l_DataTable_Info.Rows[0]["TenQuanHuyenGui"].ToString();
                        string SoDienThoaiNguoiGui = l_DataTable_Info.Rows[0]["SoDienThoaiNguoiGui"].ToString();
                        string MaPhongBanNhan = l_DataTable_Info.Rows[0]["MaPhongBanNhan"].ToString();
                        string MaPhongBanNhanKerry = l_DataTable_Info.Rows[0]["MaPhongBanNhanKerry"].ToString();
                        string DiaChiNhan = l_DataTable_Info.Rows[0]["DiaChiNhan"].ToString();
                        string MaTinhThanhNhan = l_DataTable_Info.Rows[0]["MaTinhThanhNhan"].ToString();
                        string TenTinhThanhNhan = l_DataTable_Info.Rows[0]["TenTinhThanhNhan"].ToString();
                        string MaQuanHuyenNhan = l_DataTable_Info.Rows[0]["MaQuanHuyenNhan"].ToString();
                        string TenQuanHuyenNhan = l_DataTable_Info.Rows[0]["TenQuanHuyenNhan"].ToString();
                        string SoDienThoaiNguoiNhan = l_DataTable_Info.Rows[0]["SoDienThoaiNguoiNhan"].ToString();
                        string HoTenNguoiNhan = l_DataTable_Info.Rows[0]["HoTenNguoiNhan"].ToString();
                        string MaHinhThucThanhToan = l_DataTable_Info.Rows[0]["MaHinhThucThanhToan"].ToString();
                        string GhiChu = l_DataTable_Info.Rows[0]["GhiChu"].ToString();
                        #endregion     ---Tạo biến lấy data---

                        #region     ---Tích hợp NVC---
                        switch (MaNhaVanChuyen)
                        {
                            case "NT":
                                #region ----Nhất Tín----
                                #region ---Điền thông tin Shop---
                                //  Thông tin Shop Xuất

                                mAddressBook l_mAddressBook_sender = new mAddressBook();
                                l_mAddressBook_sender.addressCode = MaPhongBanGui;                 //  Mã shop
                                l_mAddressBook_sender.addressName = MaPhongBanGui;              //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_sender.fullAddress = DiaChiGui;                     //  Địa Chỉ đầy đủ (Có thể Null)
                                l_mAddressBook_sender.provinceAreaCode = MaTinhThanhGui;           //  Mã Thành Phố / Tỉnh (Có thể Null)
                                l_mAddressBook_sender.districtAreaCode = MaQuanHuyenGui;            //  Mã Quận / Huyện (Có thể Null)
                                l_mAddressBook_sender.contactPhone = SoDienThoaiNguoiGui;                           //  Số ĐT Liên Hệ (Có thể Null)
                                l_mAddressBook_sender.contactName = "";                            //  Tên Liên Hệ (Có thể Null)

                                //  Thông tin Shop Nhận
                                mAddressBook l_mAddressBook_receiver = new mAddressBook();
                                //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_receiver.addressCode = MaPhongBanNhan;               //  Mã shop
                                l_mAddressBook_receiver.addressName = MaPhongBanNhan;           //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                                l_mAddressBook_receiver.fullAddress = DiaChiNhan;                   //  Địa Chỉ đầy đủ (Có thể Null)
                                l_mAddressBook_receiver.provinceAreaCode = MaTinhThanhNhan;         //  Mã Thành Phố / Tỉnh (Có thể Null)
                                l_mAddressBook_receiver.districtAreaCode = MaQuanHuyenNhan;         //  Mã Quận / Huyện (Có thể Null)
                                l_mAddressBook_receiver.contactPhone = SoDienThoaiNguoiNhan;                          //  Số ĐT Liên Hệ (Có thể Null)
                                l_mAddressBook_receiver.contactName = HoTenNguoiNhan;                           //  Tên Liên Hệ (Có thể Null)
                                #endregion

                                mResult l_mResult = serviceNhatTin.updateDoInfoFullNote(
                                          "fptshop-calllog"                                         //  username        -   Tài Khoản của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                        , "gxNmsvD2rUNkq7Ds"                                        //  password        -   Mật Khẩu của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                        , MaSoChungTuVanChuyen                                      //  orderNumber     -   Chuỗi Số DO (Delivery Order) của FPT Shop
                                        , MaDichVuVanChuyen                                         //  serviceCode     -   Mã dịch vụ của Nhất Tín ( 10 = CPN | 11 = Hỏa Tốc | 20 = đường bộ | 21 = 48 h)
                                        , "N"                                                       //  isWoodPack      -   "Y" | "N" = Đóng Kiện Gỗ hay không
                                        , Convert.ToInt16(SoKien)                                   //  noPack          -   Số Kiện
                                        , Convert.ToDouble(TrongLuongNVC)                                                //  PackageWeight   -   Khối Lượng (theo đơn vị kg làm tròn lẻ đến 2 chữ số phần thập phân)    (Kg)
                                        , 0                                                         //  COD             -   Số Tiền Thu Hộ (theo đơn vị đồng)   
                                        , NoiDungHangHoa                                                    //  Description     -   Nội dung hàng (có đính kèm dãy số hóa đơn)
                                        , ""                                                        //  dimension       -   Kích thước (theo cm, định dạng dàixrộngxcao)    
                                        , "N"                                                       //  isCount         -   "Y" | "N" = Kiểm Đếm hay không  
                                        , l_mAddressBook_sender                                     //  sender          -   Đối Tượng Thông Tin Địa Chỉ Gửi (địa chỉ của FPT Shop)  
                                        , l_mAddressBook_receiver                                   //  receiver        -   Đối Tượng Thông Tin Địa Chỉ Trả Hàng
                                        , Convert.ToInt32(MaHinhThucThanhToan)                      //                  -   Hình thức thanh toán
                                        , GhiChu                                                    //  Note            -   Ghi chú đẩy riêng cho Nhất Tín
                                    );
                                switch (l_mResult.errorCode)
                                {
                                    case 0:
                                        {
                                            int k = InsertThongTinVanChuyenVeNhatTin(1, 1, MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), l_mResult.errorCode, l_mResult.errorDes, Convert.ToDouble(TrongLuongNVC));
                                            l_Result.Result = 1;
                                            l_Result.Msg = "Thành công!";
                                        }
                                        break;
                                    case 1:
                                        {
                                            l_Result.Result = 0;
                                            l_Result.Msg = "Không có số vận đơn để gửi sang Nhất Tín!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Không có số vận đơn để gửi sang Nhất Tín!");
                                        }
                                        break;
                                    case 2:
                                        {
                                            l_Result.Result = 0;
                                            l_Result.Msg = "Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa!");
                                        }
                                        break;
                                    case 3:
                                        {
                                            l_Result.Result = 0;
                                            l_Result.Msg = "Số vận đơn đã được Nhất Tín xác nhận hủy!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Số vận đơn đã được Nhất Tín xác nhận hủy!");
                                        }
                                        break;
                                    case 4:
                                        {
                                            l_Result.Result = 0;
                                            l_Result.Msg = "Sai tài khoản xác thực!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Sai tài khoản xác thực!");
                                        }
                                        break;
                                    case -1:
                                        {
                                            l_Result.Result = 0;
                                            l_Result.Msg = "Thông tin gửi nhà vận chuyển bị lỗi!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Thông tin gửi nhà vận chuyển bị lỗi!");
                                        }
                                        break;
                                    default: //  Các trường hợp còn lại
                                        {
                                            l_Result.Result = 0;
                                            l_Result.Msg = "Lỗi hệ thống Nhất Tín hoặc do đường truyền! Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín!\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Lỗi hệ thống Nhất Tín hoặc do đường truyền! Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín!\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support!");
                                        }
                                        break;
                                }
                                #endregion
                                break;
                            case "Kerry":
                                #region ----Kerry----
                                DataTable l_DataTable_PhongBanGui = sql.ExecuteCommand("sp__BillVanChuyen__DataShopPhongBan", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@MaShopPhongBan", MaPhongBanGui)
                            });
                                string TenPhongBanShopGui = string.Empty;
                                if (l_DataTable_PhongBanGui != null && l_DataTable_PhongBanGui.Rows.Count > 0)
                                {
                                    TenPhongBanShopGui = l_DataTable_PhongBanGui.Rows[0]["TenShopPhongBan"].ToString();
                                }
                                DataTable l_DataTable_PhongBanNhan = sql.ExecuteCommand("sp__BillVanChuyen__DataShopPhongBan", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@MaShopPhongBan", MaPhongBanNhan)
                            });
                                string TenPhongBanShopNhan = string.Empty;
                                if (l_DataTable_PhongBanNhan != null && l_DataTable_PhongBanNhan.Rows.Count > 0)
                                {
                                    TenPhongBanShopNhan = l_DataTable_PhongBanNhan.Rows[0]["TenShopPhongBan"].ToString();
                                }
                                DTO_Kerry_DOInfo g_KerryDOInfo = new DTO_Kerry_DOInfo();
                                DTO_Kerry_Address kShopXuat = new DTO_Kerry_Address();
                                DTO_Kerry_Address kShopNhan = new DTO_Kerry_Address();
                                List<DTO_Kerry_OrderItem> kOrderItem = new List<DTO_Kerry_OrderItem>();
                                //  Lấy thông tin Shop Nhận
                                DataTable dtShopForKerryNhan = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhNhan, MaQuanHuyenNhan);

                                //  Lấy thông tin Shop Xuất
                                DataTable dtShopForKerryXuat = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhGui, MaQuanHuyenGui);

                                //  Kiểm tra Thông tin Shop?         
                                if (dtShopForKerryXuat == null || dtShopForKerryXuat.Rows.Count <= 0
                                    || dtShopForKerryNhan == null || dtShopForKerryNhan.Rows.Count <= 0)
                                {
                                    l_Result.Result = 0;
                                    l_Result.Msg = "Thông tin địa chỉ gửi Nhà vận chuyển bị lỗi!";
                                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Thông tin địa chỉ gửi Nhà vận chuyển bị lỗi!");
                                }
                                else
                                {
                                    kShopXuat = new DTO_Kerry_Address(DiaChiGui,
                                                                      dtShopForKerryXuat.Rows[0]["KerryProvinceCode"].ToString(),
                                                                      dtShopForKerryXuat.Rows[0]["KerryDistrictCode"].ToString(),
                                                                      "",
                                                                      SoDienThoaiNguoiGui,
                                                                      MaPhongBanGuiKerry + " - " + TenPhongBanShopGui);
                                    kShopNhan = new DTO_Kerry_Address(DiaChiNhan,
                                                                      dtShopForKerryNhan.Rows[0]["KerryProvinceCode"].ToString(),
                                                                      dtShopForKerryNhan.Rows[0]["KerryDistrictCode"].ToString(),
                                                                      "",
                                                                      SoDienThoaiNguoiNhan,
                                                                      MaPhongBanNhanKerry + " - " + TenPhongBanShopNhan + " - " + HoTenNguoiNhan);
                                    kOrderItem.Add(new DTO_Kerry_OrderItem("", "0", "0x0x0", "0", "COD", "0", "N"));

                                    string MaHinhThucThanhToanKerry = "";
                                    if (MaHinhThucThanhToan == "1")
                                    {
                                        MaHinhThucThanhToanKerry = "NG";
                                    }

                                    //▼	Edit - VietMXH - 20/11/2019 - Bill VC: Người nhận TT ngay==================================================
                                    else if (MaHinhThucThanhToan == "2" || MaHinhThucThanhToan == "3")
                                    {
                                        MaHinhThucThanhToanKerry = "NN";
                                    }
                                    //▲	Edit - VietMXH - 20/11/2019 - Bill VC: Người nhận TT ngay==================================================

                                    g_KerryDOInfo = new DTO_Kerry_DOInfo(g_KerryWebService_Token,
                                                                         MaSoChungTuVanChuyen,
                                                                         MaSoChungTuVanChuyen,
                                                                         SoKien,
                                                                        TrongLuongNVC,
                                                                         "N",
                                                                         "0",
                                                                         MaDichVuVanChuyen,
                                                                         NoiDungHangHoa,
                                                                         MaHinhThucThanhToanKerry,
                                                                         kShopNhan,
                                                                         kShopXuat,
                                                                         kOrderItem
                                                                       );

                                    var json = new JavaScriptSerializer().Serialize(g_KerryDOInfo);

                                    string sKerryResponse = g_KerryWebService.WS001PostNewOrderInfo(json.ToString());
                                    int intKerryInsertOrderErrorCode = 0;   //  NOTE: 0:Thành công ; -1:Thất bại
                                    string strKerryInsertOrderResult;

                                    if (string.IsNullOrEmpty(sKerryResponse))
                                    {
                                        l_Result.Result = 0;
                                        l_Result.Msg = "Lỗi không phản hồi từ web service Kerry!";
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Lỗi không phản hồi từ web service Kerry!");
                                    }
                                    else
                                    {
                                        JavaScriptSerializer responseJson = new JavaScriptSerializer();
                                        DTO_Kerry_Response l__DTO_Kerry_Response = responseJson.Deserialize<DTO_Kerry_Response>(sKerryResponse);
                                        switch (l__DTO_Kerry_Response.status)
                                        {
                                            case "success":
                                                #region MyRegion
                                                intKerryInsertOrderErrorCode = 0;
                                                strKerryInsertOrderResult = "Gửi DO thành công!";
                                                InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                    Transporters.Kerry.Code,
                                                    Transporters.Kerry.KeyCertify,
                                                    Transporters.Kerry.KeyName,
                                                    MaSoChungTuVanChuyen,
                                                    MaDichVuVanChuyen,
                                                    "N",
                                                    SoKien.ToString(),
                                                    "",
                                                    intKerryInsertOrderErrorCode,
                                                    strKerryInsertOrderResult,
                                                    Convert.ToDouble(TrongLuong)     // Ký
                                                    );
                                                l_Result.Result = 1;
                                                l_Result.Msg = "Gửi DO thành công!";
                                                #endregion
                                                break;
                                            case "update":
                                                #region MyRegion
                                                intKerryInsertOrderErrorCode = 0;
                                                strKerryInsertOrderResult = "Gửi lại DO thành công!";
                                                InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                    Transporters.Kerry.Code,
                                                    Transporters.Kerry.KeyCertify,
                                                    Transporters.Kerry.KeyName,
                                                    MaSoChungTuVanChuyen,
                                                    MaDichVuVanChuyen,
                                                    "N",
                                                    SoKien.ToString(),
                                                    "",
                                                    intKerryInsertOrderErrorCode,
                                                    strKerryInsertOrderResult,
                                                    Convert.ToDouble(TrongLuong)     // Ký
                                                    );
                                                l_Result.Result = 1;
                                                l_Result.Msg = "Gửi lại DO thành công!";
                                                #endregion
                                                break;
                                            case "error":
                                                #region MyRegion
                                                string l_error = " Gửi vận đơn cho nhà vận chuyển Kerry thất bại! " + l__DTO_Kerry_Response.message;
                                                l_Result.Result = 0;
                                                l_Result.Msg = "" + l_error;
                                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + l_error);
                                                #endregion
                                                break;
                                            default:
                                                #region MyRegion
                                                l_Result.Result = 0;
                                                l_Result.Msg = "Gửi vận đơn cho nhà vận chuyển Kerry thất bại!";
                                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + " Gửi vận đơn cho nhà vận chuyển Kerry thất bại!");
                                                #endregion
                                                break;
                                        }
                                    }
                                }
                                #endregion
                                break;
                            case "VNC":
                                #region ---Vinacapital Post---
                                //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                int l__VNC__ServiceId = int.TryParse(MaDichVuVanChuyen, out l__VNC__ServiceId) ? l__VNC__ServiceId : 0;
                                int l__VNC__Weight = int.TryParse(TrongLuongNVC, out l__VNC__Weight) ? l__VNC__Weight : 0;
                                VinacapitalPost l__VinacapitalPost = new VinacapitalPost();
                                VinacapitalPost.VNCPost_Order_Add_Result l__VNCPost_Order_Add_Result = l__VinacapitalPost.Order_Add(
                                    MaSoChungTuVanChuyen, "-", 0, 1, l__VNC__ServiceId,
                                    l__VNC__Weight, 0, 0, 0, null, 1, null, null,
                                    TenTinhThanhGui, TenQuanHuyenGui, null, DiaChiGui, null, SoDienThoaiNguoiGui,
                                    TenTinhThanhNhan, TenQuanHuyenNhan, null, DiaChiNhan, HoTenNguoiNhan, SoDienThoaiNguoiNhan,
                                    null, null, null, null, null, null
                                    );
                                switch (l__VNCPost_Order_Add_Result.Result)
                                {
                                    case 1: // 1:Thành công
                                        {
                                            l_Result.Result = 1;
                                            l_Result.Msg = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post Thành công!";
                                            InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                null, null, null,
                                                MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), "",
                                                0, "Gửi DO thành công!", Convert.ToDouble(TrongLuong)     // Ký
                                                );
                                        }
                                        break;
                                    case 2: // 2:Thất bại
                                        {
                                            string l_Msg = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                            l_Msg += "</br>Vinacapital Post: Order_Add.Message: " + l__VNCPost_Order_Add_Result.Message;
                                            l_Result.Result = 0;
                                            l_Result.Msg = l_Msg;
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + l_Msg);
                                        }
                                        break;
                                    default: // Khác
                                        {
                                            string l_Msg = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                            l_Msg += "</br>Vinacapital Post: Order_Add.Result: " + l__VNCPost_Order_Add_Result.Result.ToString();
                                            l_Result.Result = 0;
                                            l_Result.Msg = l_Msg;
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", RequestId.ToString() + l_Msg);
                                        }
                                        break;
                                }
                                //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                                #endregion
                                break;
                            default:
                                l_Result.Result = 0;
                                l_Result.Msg = "Mã Nhà vận chuyển chưa được cấu hình!";
                                break;
                        }
                        #endregion  ---Tích hợp NVC---
                    }
                    else
                    {
                        l_Result.Result = 0;
                        l_Result.Msg = "Detail CallLog Không tồn tại!";
                    }
                    #endregion  ===Tích hợp Nhà vận chuyển===
                }
                else
                {
                    l_Result.Result = 0;
                    l_Result.Msg = "RequestId Không hợp lệ!";
                }
            }
            catch (Exception ex)
            {
                l_Result.Result = 0;
                l_Result.Msg = ex.Message;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", "RequestId: " + RequestId + " - " + ex.ToString());
            }
            return JsonConvert.SerializeObject(l_Result);
        }
        /// <summary>POST: /Requests/Outside__App__GuiChungTuFFriend__SinhBill</summary>
        [HttpPost]
        public ActionResult Outside__App__GuiChungTuFFriend__SinhBill(Outside__App__GuiChungTuFFriend__SinhBill p_Outside__App__GuiChungTuFFriend__SinhBill)
        {
            Outside__App__GuiChungTuFFriend__SinhBill__Result l__Result = new Outside__App__GuiChungTuFFriend__SinhBill__Result();
            l__Result.Result = 0;
            l__Result.Msg = "";
            l__Result.BillReq = 0;
            l__Result.Carrier_Result = 0;
            l__Result.Carrier_Msg = "";
            l__Result.BankDoc_Mana_Head_ID_Str = "";
            l__Result.BillNum = "";
            l__Result.Carrier = "";
            l__Result.ShopPhone = "";
            l__Result.BillWeight = "";
            try
            {
                if (p_Outside__App__GuiChungTuFFriend__SinhBill != null)
                {
                    #region ===Tạo biến chứa Data===
                    string l__Sender = p_Outside__App__GuiChungTuFFriend__SinhBill.Sender;
                    //
                    ////string ShopPhongBanMoi = p_Outside__GuiChungTuFFriend__SinhBill.ShopPhongBanMoi;
                    //
                    string MaPhongBanGui = p_Outside__App__GuiChungTuFFriend__SinhBill.MaShopPhongBanGui;
                    string TenPhongBanShopGui = p_Outside__App__GuiChungTuFFriend__SinhBill.TenShopPhongBanGui;
                    string MaPhongBanGuiKerry = p_Outside__App__GuiChungTuFFriend__SinhBill.MaShopPhongBanGui;// MaShopPhongBanGuiKerry;
                    string DiaChiGui = p_Outside__App__GuiChungTuFFriend__SinhBill.DiaChiGui;
                    string MaTinhThanhGui = p_Outside__App__GuiChungTuFFriend__SinhBill.MaTinhThanhGui;
                    string TenTinhThanhGui = p_Outside__App__GuiChungTuFFriend__SinhBill.TenTinhThanhGui;
                    string MaQuanHuyenGui = p_Outside__App__GuiChungTuFFriend__SinhBill.MaQuanHuyenGui;
                    string TenQuanHuyenGui = p_Outside__App__GuiChungTuFFriend__SinhBill.TenQuanHuyenGui;
                    string SoDienThoaiNguoiGui = p_Outside__App__GuiChungTuFFriend__SinhBill.SoDienThoaiNguoiGui;
                    //
                    string MaPhongBanNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.MaShopPhongBanNhan;
                    string TenPhongBanShopNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.TenShopPhongBanNhan;
                    string MaPhongBanNhanKerry = p_Outside__App__GuiChungTuFFriend__SinhBill.MaShopPhongBanNhan;// MaShopPhongBanNhanKerry;
                    string DiaChiNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.DiaChiNhan;
                    string MaTinhThanhNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.MaTinhThanhNhan;
                    string TenTinhThanhNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.TenTinhThanhNhan;
                    string MaQuanHuyenNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.MaQuanHuyenNhan;
                    string TenQuanHuyenNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.TenQuanHuyenNhan;
                    string HoTenNguoiNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.HoTenNguoiNhan;
                    string SoDienThoaiNguoiNhan = p_Outside__App__GuiChungTuFFriend__SinhBill.SoDienThoaiNguoiNhan;
                    //
                    string MaLoaiHangHoa = p_Outside__App__GuiChungTuFFriend__SinhBill.MaLoaiHangHoa;
                    string NoiDungHangHoa = p_Outside__App__GuiChungTuFFriend__SinhBill.NoiDungHangHoa;
                    int SoLuong = p_Outside__App__GuiChungTuFFriend__SinhBill.SoLuong;
                    string SoKien = p_Outside__App__GuiChungTuFFriend__SinhBill.SoKien;
                    string TrongLuong = p_Outside__App__GuiChungTuFFriend__SinhBill.TrongLuong;
                    string TrongLuongFRT = string.Empty;
                    string TrongLuongNVC = string.Empty;
                    if (TrongLuong != null)
                    {
                        TrongLuongNVC = TrongLuong;
                    }
                    else
                    {
                        TrongLuongNVC = "0";
                    }
                    string MaNhaVanChuyen = string.Empty; ////////p_Outside__App__GuiChungTuFFriend__SinhBill.MaNhaVanChuyen;
                    string MaDichVuVanChuyen = string.Empty; ////////p_Outside__App__GuiChungTuFFriend__SinhBill.MaDichVuVanChuyen;
                    string MaHinhThucThanhToan = p_Outside__App__GuiChungTuFFriend__SinhBill.MaHinhThucThanhToan;
                    string GhiChu = p_Outside__App__GuiChungTuFFriend__SinhBill.GhiChu;
                    //
                    string l__Conversation_Message_Create = p_Outside__App__GuiChungTuFFriend__SinhBill.Conversation_Message_Create;
                    //
                    string l__BankDoc_Mana_Head_ID_Str = p_Outside__App__GuiChungTuFFriend__SinhBill.BankDoc_Mana_Head_ID_Str;

                    double CuocPhiMin = 0;

                    SqlParameter[] l_SqlParameter = new SqlParameter[]{
                        new SqlParameter("@IdTinhDi", MaTinhThanhGui),
                        new SqlParameter("@IdTinhDen", MaTinhThanhNhan),
                        new SqlParameter("@ShopDiB1", MaPhongBanGui),
                        new SqlParameter("@ShopDenB1", MaPhongBanNhan),
                        new SqlParameter("@TrongLuong", TrongLuongNVC),
                        new SqlParameter("@DichVu", "Đường bộ"),    //  Mặc định Dịch vụ vận chuyển "Đường bộ"
                        };
                    DataTable l_DataTable = sql.ExecuteCommand("sp__Outside__App__GuiChungTuFFriend__BillVanChuyen__GetPhanTuyen", CommandType.StoredProcedure, l_SqlParameter);
                    if (l_DataTable != null && l_DataTable.Rows.Count > 0)
                    {
                        MaNhaVanChuyen = l_DataTable.Rows[0]["MaNVC"].ToString();
                        MaDichVuVanChuyen = l_DataTable.Rows[0]["MaDichVu"].ToString();
                        string l_CuocPhiMin_Str = l_DataTable.Rows[0]["CuocPhiMin"].ToString();
                        CuocPhiMin = double.TryParse(l_CuocPhiMin_Str, out CuocPhiMin) ? CuocPhiMin : 0;
                    }
                    #endregion

                    long l__RequestBill_Id = 0;

                    #region ===Tạo Bill===
                    string l__Employees__OrganizationHierachyCode = null;
                    #region ---Tạo Header CallLog Bill---
                    Request l__RequestBill = new Request();
                    string l__FromShop_Name = "";
                    if (l__Sender != null && l__Sender != "")
                    {
                        EmployeeDAL l__EmployeeDAL = new EmployeeDAL();
                        F03_Employees l__F03_Employees = l__EmployeeDAL.Get(l__Sender);
                        if (l__F03_Employees != null)
                        {
                            l__RequestBill.Sender = l__F03_Employees.EmployeeCode;
                            l__RequestBill.CreateBy = l__F03_Employees.EmployeeCode;
                            l__RequestBill.UpdateBy = l__F03_Employees.EmployeeCode;
                            l__RequestBill.FromShop = l__F03_Employees.WarehouseCode;
                            l__RequestBill.FromOffice = l__F03_Employees.OrganizationHierachyCode;
                            l__Employees__OrganizationHierachyCode = l__F03_Employees.OrganizationHierachyCode;
                            ShopDAL l__ShopDAL = new ShopDAL();
                            Warehouse l__Warehouse = l__ShopDAL.Get(l__F03_Employees.WarehouseCode);
                            if (l__Warehouse != null)
                            {
                                l__FromShop_Name = l__Warehouse.WarehouseName;
                            }
                        }
                    }
                    l__RequestBill.StepNo = 1;
                    l__RequestBill.Title = "Bill Vận chuyển " + (string.IsNullOrEmpty(l__FromShop_Name) ? "" : l__FromShop_Name) + " " + DateTime.Now.ToString("dd/MM/yyyy");
                    l__RequestBill.TypeId = 154; // 154:Bill Vận chuyển
                    l__RequestBill.StepStatus = Key.StatusRequest.Waitting;
                    l__RequestBill.TimeCreate = DateTime.Now;
                    l__RequestBill.TimeAppear = DateTime.Now;
                    l__RequestBill.isHighlight = false;
                    l__RequestBill.isParent = false;
                    l__RequestBill.Status = Key.Status.Available;
                    l__RequestBill.TimeLastUpdate = DateTime.Now;
                    l__RequestBill.Assigner = "-2";
                    l__RequestBill.FromForm = "CallLogOutside";   //▶	Edit - VietMXH - 13/05/2019 - Nguồn tạo CallLog==================================================
                    db.Requests.Add(l__RequestBill);
                    db.SaveChanges();
                    l__RequestBill_Id = l__RequestBill.Id;
                    #endregion

                    #region ---Check Header CallLog Bill---
                    if (l__RequestBill_Id > 0)
                    {
                        l__Result.Result = 1;
                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                        l__Result.BillReq = l__RequestBill_Id;
                        l__Result.Carrier_Result = 0;
                        l__Result.Carrier_Msg = "";
                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                        l__Result.BillNum = "";
                        l__Result.Carrier = MaNhaVanChuyen;
                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                        l__Result.BillWeight = TrongLuong;

                        #region ===Tạo CallLog Bill Thành công===
                        string l__MaVanDon = null;
                        if (MaNhaVanChuyen == "NT")
                        {
                            l__MaVanDon = "FC" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                        }
                        else if (MaNhaVanChuyen == "Kerry")
                        {
                            l__MaVanDon = "CK" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                        }
                        else if (MaNhaVanChuyen == "VNC")
                        {
                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            l__MaVanDon = "VC" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        }
                        l__Result.BillNum = l__MaVanDon;

                        #region ---Tạo Detail CallLog Bill---
                        RequestDetail l__RequestDetailBill = new RequestDetail();
                        l__RequestDetailBill.RequestId = l__RequestBill_Id;
                        //
                        if (MaPhongBanGui != null)
                        {
                            l__RequestDetailBill.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                        }
                        else if (l__Employees__OrganizationHierachyCode != null)
                        {
                            l__RequestDetailBill.ShopCode = l__Employees__OrganizationHierachyCode; //Mã phòng ban gửi
                        }
                        l__RequestDetailBill.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                        l__RequestDetailBill.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                        l__RequestDetailBill.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                        l__RequestDetailBill.EmpCode = SoDienThoaiNguoiGui;
                        //
                        l__RequestDetailBill.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                        l__RequestDetailBill.Property5 = DiaChiNhan;                      //Địa Chỉ nhận
                        l__RequestDetailBill.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                        l__RequestDetailBill.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                        l__RequestDetailBill.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                        l__RequestDetailBill.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                        //
                        l__RequestDetailBill.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                        l__RequestDetailBill.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                        l__RequestDetailBill.Approved = false;
                        if (SoLuong > 0)
                            l__RequestDetailBill.Quantity3 = SoLuong;
                        l__RequestDetailBill.Quantity1 = Convert.ToInt32(SoKien);         //Số kiện đơn hàng
                        l__RequestDetailBill.Property10 = TrongLuong;                     //Cân nặng
                        l__RequestDetailBill.Property12 = TrongLuongFRT;
                        l__RequestDetailBill.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                        l__RequestDetailBill.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                        l__RequestDetailBill.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                        l__RequestDetailBill.Note = GhiChu;                               //Ghi chú

                        if (CuocPhiMin > 0)
                        {
                            l__RequestDetailBill.Money3 = CuocPhiMin;   //  Cước phí (Min)
                        }
                        //
                        if (l__MaVanDon != "")
                        {
                            l__RequestDetailBill.ProductCode = l__MaVanDon;         //Mã số chứng từ hàng hóa
                        }
                        l__RequestDetailBill.Status = Key.Status.Available;
                        //
                        db.RequestDetails.Add(l__RequestDetailBill);
                        db.SaveChanges();
                        #endregion

                        #region ---Nội dung Yêu cầu của Người tạo---
                        if (l__Conversation_Message_Create.Length != 0)
                        {
                            Conversation l__ConversationBill = new Conversation();
                            l__ConversationBill.RequestId = l__RequestBill_Id;
                            l__ConversationBill.Message = l__Conversation_Message_Create;
                            l__ConversationBill.Sender = l__Sender;
                            l__ConversationBill.CreateBy = l__Sender;
                            l__ConversationBill.Status = Key.Status.Available;
                            l__ConversationBill.StepNo = 0;
                            l__ConversationBill.TimeCreate = DateTime.Now;
                            l__ConversationBill.Type = Key.Conversation.Create;
                            db.Conversations.Add(l__ConversationBill);
                        }
                        db.SaveChanges();
                        #endregion

                        #region ---Tích hợp Nhà vận chuyển---
                        #region ------Tạo biến chứa Data Nhà vận chuyển------
                        string MaSoChungTuVanChuyen = ""; //1. Mã số chứng từ vận chuyển
                        if (MaNhaVanChuyen == "NT")
                        {
                            MaSoChungTuVanChuyen = "FC" + l__RequestBill_Id.ToString();
                        }
                        else if (MaNhaVanChuyen == "Kerry")
                        {
                            MaSoChungTuVanChuyen = "CK" + l__RequestBill_Id.ToString();
                        }
                        else if (MaNhaVanChuyen == "VNC")
                        {
                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            MaSoChungTuVanChuyen = "VC" + l__RequestBill_Id.ToString();
                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        }

                        string MaHinhThucThanhToanKerry = "";
                        if (MaHinhThucThanhToan == "1")
                        {
                            MaHinhThucThanhToanKerry = "NG";
                        }
                        else if (MaHinhThucThanhToan == "2")
                        {
                            MaHinhThucThanhToanKerry = "NN";
                        }
                        #endregion

                        #region ------Đẩy sang Nhà vận chuyển------
                        #region ---------Nhất Tín---------
                        if (MaNhaVanChuyen == "NT")
                        {
                            #region ---Điền thông tin Shop---
                            //  Thông tin Shop Xuất
                            mAddressBook l_mAddressBook_sender = new mAddressBook();
                            l_mAddressBook_sender.addressCode = MaPhongBanGui;                 //  Mã shop
                            l_mAddressBook_sender.addressName = MaPhongBanGui;              //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                            l_mAddressBook_sender.fullAddress = DiaChiGui;                     //  Địa Chỉ đầy đủ (Có thể Null)
                            l_mAddressBook_sender.provinceAreaCode = MaTinhThanhGui;           //  Mã Thành Phố / Tỉnh (Có thể Null)
                            l_mAddressBook_sender.districtAreaCode = MaQuanHuyenGui;            //  Mã Quận / Huyện (Có thể Null)
                            l_mAddressBook_sender.contactPhone = SoDienThoaiNguoiGui;                           //  Số ĐT Liên Hệ (Có thể Null)
                            l_mAddressBook_sender.contactName = "";                            //  Tên Liên Hệ (Có thể Null)

                            //  Thông tin Shop Nhận
                            mAddressBook l_mAddressBook_receiver = new mAddressBook();
                            //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                            l_mAddressBook_receiver.addressCode = MaPhongBanNhan;               //  Mã shop
                            l_mAddressBook_receiver.addressName = MaPhongBanNhan;           //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                            l_mAddressBook_receiver.fullAddress = DiaChiNhan;                   //  Địa Chỉ đầy đủ (Có thể Null)
                            l_mAddressBook_receiver.provinceAreaCode = MaTinhThanhNhan;         //  Mã Thành Phố / Tỉnh (Có thể Null)
                            l_mAddressBook_receiver.districtAreaCode = MaQuanHuyenNhan;         //  Mã Quận / Huyện (Có thể Null)
                            l_mAddressBook_receiver.contactPhone = SoDienThoaiNguoiNhan;                          //  Số ĐT Liên Hệ (Có thể Null)
                            l_mAddressBook_receiver.contactName = HoTenNguoiNhan;                           //  Tên Liên Hệ (Có thể Null)
                            #endregion

                            mResult l_mResult = serviceNhatTin.updateDoInfoFullNote(
                                      "fptshop-calllog"                                         //  username        -   Tài Khoản của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                    , "gxNmsvD2rUNkq7Ds"                                        //  password        -   Mật Khẩu của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                    , MaSoChungTuVanChuyen                                      //  orderNumber     -   Chuỗi Số DO (Delivery Order) của FPT Shop
                                    , MaDichVuVanChuyen                                         //  serviceCode     -   Mã dịch vụ của Nhất Tín ( 10 = CPN | 11 = Hỏa Tốc | 20 = đường bộ | 21 = 48 h)
                                    , "N"                                                       //  isWoodPack      -   "Y" | "N" = Đóng Kiện Gỗ hay không
                                    , Convert.ToInt16(SoKien)                                   //  noPack          -   Số Kiện
                                    , Convert.ToDouble(TrongLuongNVC)                                                //  PackageWeight   -   Khối Lượng (theo đơn vị kg làm tròn lẻ đến 2 chữ số phần thập phân)    (Kg)
                                    , 0                                                         //  COD             -   Số Tiền Thu Hộ (theo đơn vị đồng)   
                                    , NoiDungHangHoa                                                    //  Description     -   Nội dung hàng (có đính kèm dãy số hóa đơn)
                                    , ""                                                        //  dimension       -   Kích thước (theo cm, định dạng dàixrộngxcao)    
                                    , "N"                                                       //  isCount         -   "Y" | "N" = Kiểm Đếm hay không  
                                    , l_mAddressBook_sender                                     //  sender          -   Đối Tượng Thông Tin Địa Chỉ Gửi (địa chỉ của FPT Shop)  
                                    , l_mAddressBook_receiver                                   //  receiver        -   Đối Tượng Thông Tin Địa Chỉ Trả Hàng
                                    , Convert.ToInt32(MaHinhThucThanhToan)                      //                  -   Hình thức thanh toán
                                    , GhiChu                                                    //  Note            -   Ghi chú đẩy riêng cho Nhất Tín
                                );
                            switch (l_mResult.errorCode)
                            {
                                case 0:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 1;
                                        l__Result.Carrier_Msg = "Gửi DO thành công!";
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        int k = InsertThongTinVanChuyenVeNhatTin(1, 1, MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), l_mResult.errorCode, l_mResult.errorDes, Convert.ToDouble(TrongLuongNVC));
                                    }
                                    break;
                                case 1:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Không có số vận đơn để gửi sang Nhất Tín!";
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Không có số vận đơn để gửi sang Nhất Tín!");
                                    }
                                    break;
                                case 2:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa!";
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa!");
                                    }
                                    break;
                                case 3:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Số vận đơn đã được Nhất Tín xác nhận!";
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Số vận đơn đã được Nhất Tín xác nhận hủy!");
                                    }
                                    break;
                                case 4:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Sai tài khoản xác thực!";
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Sai tài khoản xác thực!");
                                    }
                                    break;
                                case -1:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Thông tin gửi nhà vận chuyển bị lỗi!";
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Thông tin gửi nhà vận chuyển bị lỗi!");
                                    }
                                    break;
                                default: //  Các trường hợp còn lại
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Lỗi hệ thống Nhất Tín hoặc do đường truyền. Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín.\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support!";
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Lỗi hệ thống Nhất Tín hoặc do đường truyền. Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín.\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support!");
                                    }
                                    break;
                            }
                        }
                        #endregion

                        #region ---------Kerry---------
                        else if (MaNhaVanChuyen == "Kerry")
                        {
                            DTO_Kerry_DOInfo g_KerryDOInfo = new DTO_Kerry_DOInfo();
                            DTO_Kerry_Address kShopXuat = new DTO_Kerry_Address();
                            DTO_Kerry_Address kShopNhan = new DTO_Kerry_Address();
                            List<DTO_Kerry_OrderItem> kOrderItem = new List<DTO_Kerry_OrderItem>();
                            //  Lấy thông tin Shop Nhận
                            DataTable dtShopForKerryNhan = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhNhan, MaQuanHuyenNhan);

                            //  Lấy thông tin Shop Xuất
                            DataTable dtShopForKerryXuat = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhGui, MaQuanHuyenGui);

                            //  Kiểm tra Thông tin Shop?         
                            if (dtShopForKerryXuat == null || dtShopForKerryXuat.Rows.Count <= 0
                                || dtShopForKerryNhan == null || dtShopForKerryNhan.Rows.Count <= 0)
                            {
                                l__Result.Result = 1;
                                l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                l__Result.BillReq = l__RequestBill_Id;
                                l__Result.Carrier_Result = 0;
                                l__Result.Carrier_Msg = "Thông tin địa chỉ gửi nhà vận chuyển bị lỗi!";
                                l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                l__Result.BillNum = l__MaVanDon;
                                l__Result.Carrier = MaNhaVanChuyen;
                                l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                l__Result.BillWeight = TrongLuong;
                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Thông tin địa gửi nhà vận chuyển bị lỗi!");
                            }
                            else
                            {
                                kShopXuat = new DTO_Kerry_Address(DiaChiGui,
                                                                  dtShopForKerryXuat.Rows[0]["KerryProvinceCode"].ToString(),
                                                                  dtShopForKerryXuat.Rows[0]["KerryDistrictCode"].ToString(),
                                                                  "",
                                                                  SoDienThoaiNguoiGui,
                                                                  MaPhongBanGuiKerry + " - " + TenPhongBanShopGui);

                                kShopNhan = new DTO_Kerry_Address(DiaChiNhan,
                                                                  dtShopForKerryNhan.Rows[0]["KerryProvinceCode"].ToString(),
                                                                  dtShopForKerryNhan.Rows[0]["KerryDistrictCode"].ToString(),
                                                                  "",
                                                                  SoDienThoaiNguoiNhan,
                                                                  MaPhongBanNhanKerry + " - " + TenPhongBanShopNhan + " - " + HoTenNguoiNhan); //+ "-" + HoTenNguoiNhan);

                                kOrderItem.Add(new DTO_Kerry_OrderItem("",
                                                                     "0",
                                                                     "0x0x0",
                                                                     "0",
                                                                     "COD",
                                                                     "0",
                                                                     "N"));

                                //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                g_KerryDOInfo = new DTO_Kerry_DOInfo(g_KerryWebService_Token,
                                                                     MaSoChungTuVanChuyen,
                                                                     MaSoChungTuVanChuyen,
                                                                     SoKien,
                                                                    TrongLuongNVC,
                                                                     "N",
                                                                     "0",
                                                                     MaDichVuVanChuyen,
                                                                     NoiDungHangHoa,
                                                                     MaHinhThucThanhToanKerry,
                                                                     kShopNhan,
                                                                     kShopXuat,
                                                                     kOrderItem
                                                                   );
                                //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                var json = new JavaScriptSerializer().Serialize(g_KerryDOInfo);

                                //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                string sKerryResponse = g_KerryWebService.WS001PostNewOrderInfo(json.ToString());
                                //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                //▼	Edit - VietMXH - 20/04/2019 - Bắt thêm case Kerry==================================================
                                int intKerryInsertOrderErrorCode = 0;   //  NOTE: 0:Thành công ; -1:Thất bại
                                string strKerryInsertOrderResult;

                                if (string.IsNullOrEmpty(sKerryResponse))
                                {
                                    l__Result.Result = 1;
                                    l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                    l__Result.BillReq = l__RequestBill_Id;
                                    l__Result.Carrier_Result = 0;
                                    l__Result.Carrier_Msg = "Lỗi không phản hồi từ web service Kerry!";
                                    l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                    l__Result.BillNum = l__MaVanDon;
                                    l__Result.Carrier = MaNhaVanChuyen;
                                    l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                    l__Result.BillWeight = TrongLuong;
                                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Lỗi không phản hồi từ web service Kerry!");
                                }
                                else
                                {
                                    JavaScriptSerializer responseJson = new JavaScriptSerializer();
                                    DTO_Kerry_Response responseKerryDTO = new DTO_Kerry_Response();
                                    responseKerryDTO = responseJson.Deserialize<DTO_Kerry_Response>(sKerryResponse);

                                    //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                    switch (responseKerryDTO.status)
                                    {
                                        case "success":
                                            #region MyRegion
                                            intKerryInsertOrderErrorCode = 0;
                                            strKerryInsertOrderResult = "Gửi DO thành công.";
                                            l__Result.Result = 1;
                                            l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                            l__Result.BillReq = l__RequestBill_Id;
                                            l__Result.Carrier_Result = 1;
                                            l__Result.Carrier_Msg = "Gửi DO thành công!";
                                            l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                            l__Result.BillNum = l__MaVanDon;
                                            l__Result.Carrier = MaNhaVanChuyen;
                                            l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                            l__Result.BillWeight = TrongLuong;

                                            InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                Transporters.Kerry.Code,
                                                Transporters.Kerry.KeyCertify,
                                                Transporters.Kerry.KeyName,
                                                MaSoChungTuVanChuyen,
                                                MaDichVuVanChuyen,
                                                "N",
                                                SoKien.ToString(),
                                                "",
                                                intKerryInsertOrderErrorCode,
                                                strKerryInsertOrderResult,
                                                Convert.ToDouble(TrongLuong)     // Ký
                                                );
                                            #endregion
                                            break;
                                        case "update":
                                            #region MyRegion
                                            intKerryInsertOrderErrorCode = 0;
                                            strKerryInsertOrderResult = "Gửi lại DO thành công.";
                                            l__Result.Result = 1;
                                            l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                            l__Result.BillReq = l__RequestBill_Id;
                                            l__Result.Carrier_Result = 1;
                                            l__Result.Carrier_Msg = "Gửi lại DO thành công!";
                                            l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                            l__Result.BillNum = l__MaVanDon;
                                            l__Result.Carrier = MaNhaVanChuyen;
                                            l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                            l__Result.BillWeight = TrongLuong;

                                            InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                Transporters.Kerry.Code,
                                                Transporters.Kerry.KeyCertify,
                                                Transporters.Kerry.KeyName,
                                                MaSoChungTuVanChuyen,
                                                MaDichVuVanChuyen,
                                                "N",
                                                SoKien.ToString(),
                                                "",
                                                intKerryInsertOrderErrorCode,
                                                strKerryInsertOrderResult,
                                                Convert.ToDouble(TrongLuong)     // Ký
                                                );
                                            #endregion
                                            break;
                                        case "error":
                                            #region MyRegion
                                            string l_error = "Gửi vận đơn cho nhà vận chuyển Kerry thất bại! " + responseKerryDTO.message;
                                            l__Result.Result = 1;
                                            l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                            l__Result.BillReq = l__RequestBill_Id;
                                            l__Result.Carrier_Result = 0;
                                            l__Result.Carrier_Msg = l_error;
                                            l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                            l__Result.BillNum = l__MaVanDon;
                                            l__Result.Carrier = MaNhaVanChuyen;
                                            l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                            l__Result.BillWeight = TrongLuong;
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " " + l_error);
                                            #endregion
                                            break;
                                        default:
                                            #region MyRegion
                                            l__Result.Result = 1;
                                            l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                            l__Result.BillReq = l__RequestBill_Id;
                                            l__Result.Carrier_Result = 0;
                                            l__Result.Carrier_Msg = "Gửi vận đơn cho nhà vận chuyển Kerry thất bại!";
                                            l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                            l__Result.BillNum = l__MaVanDon;
                                            l__Result.Carrier = MaNhaVanChuyen;
                                            l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                            l__Result.BillWeight = TrongLuong;
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Gửi vận đơn cho nhà vận chuyển Kerry thất bại!");
                                            #endregion
                                            break;
                                    }
                                    //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                }
                                //▲	Edit - VietMXH - 20/04/2019 - Bắt thêm case Kerry==================================================

                            }
                        }
                        #endregion

                        #region ---------Vinacapital Post---------
                        //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        else if (MaNhaVanChuyen == "VNC")
                        {
                            int l__VNC__ServiceId = int.TryParse(MaDichVuVanChuyen, out l__VNC__ServiceId) ? l__VNC__ServiceId : 0;
                            int l__VNC__Weight = int.TryParse(TrongLuongNVC, out l__VNC__Weight) ? l__VNC__Weight : 0;
                            VinacapitalPost l__VinacapitalPost = new VinacapitalPost();
                            VinacapitalPost.VNCPost_Order_Add_Result l__VNCPost_Order_Add_Result = l__VinacapitalPost.Order_Add(
                                MaSoChungTuVanChuyen, "-", 0, 1, l__VNC__ServiceId,
                                l__VNC__Weight, 0, 0, 0, null, 1, null, null,
                                TenTinhThanhGui, TenQuanHuyenGui, null, DiaChiGui, null, SoDienThoaiNguoiGui,
                                TenTinhThanhNhan, TenQuanHuyenNhan, null, DiaChiNhan, HoTenNguoiNhan, SoDienThoaiNguoiNhan,
                                null, null, null, null, null, null
                                );
                            switch (l__VNCPost_Order_Add_Result.Result)
                            {
                                case 1: // 1:Thành công
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 1;
                                        l__Result.Carrier_Msg = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post Thành công!";
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;

                                        InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                            null, null, null,
                                            MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), "",
                                            0, "Gửi DO thành công!", Convert.ToDouble(TrongLuong)     // Ký
                                            );
                                    }
                                    break;
                                case 2: // 2:Thất bại
                                    {
                                        string l_error = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                        l_error += "</br>Vinacapital Post: Order_Add.Message: " + l__VNCPost_Order_Add_Result.Message;
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = l_error;
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " " + l_error);
                                    }
                                    break;
                                default: // Khác
                                    {
                                        string l_error = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                        l_error += "</br>Vinacapital Post: Order_Add.Result: " + l__VNCPost_Order_Add_Result.Result.ToString();
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!";
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = l_error;
                                        l__Result.BankDoc_Mana_Head_ID_Str = l__BankDoc_Mana_Head_ID_Str;
                                        l__Result.BillNum = l__MaVanDon;
                                        l__Result.Carrier = MaNhaVanChuyen;
                                        l__Result.ShopPhone = SoDienThoaiNguoiGui;
                                        l__Result.BillWeight = TrongLuong;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " " + l_error);
                                    }
                                    break;
                            }
                        }
                        //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        #endregion
                        #endregion
                        #endregion

                        #region ---Send Mail---
                        //Send mail
                        XMail.Send(l__RequestBill_Id, "[CallLog] - " + l__RequestBill.Title, XMail.ProcessType.Create);
                        #endregion
                        #endregion
                    }
                    else
                    {
                        l__Result.Result = 0;
                        l__Result.Msg = "Tạo CallLog Bill Thất bại!";
                        l__Result.BillReq = 0;
                        l__Result.Carrier_Result = 0;
                        l__Result.Carrier_Msg = "";
                        l__Result.BankDoc_Mana_Head_ID_Str = "";
                        l__Result.BillNum = "";
                        l__Result.Carrier = "";
                        l__Result.ShopPhone = "";
                        l__Result.BillWeight = "";
                    }
                    #endregion
                    #endregion
                }
                else
                {
                    l__Result.Result = 0;
                    l__Result.Msg = "Không có Thông tin tạo CallLog Bill!";
                    l__Result.BillReq = 0;
                    l__Result.Carrier_Result = 0;
                    l__Result.Carrier_Msg = "";
                    l__Result.BankDoc_Mana_Head_ID_Str = "";
                    l__Result.BillNum = "";
                    l__Result.Carrier = "";
                    l__Result.ShopPhone = "";
                    l__Result.BillWeight = "";
                }
            }
            catch (Exception ex)
            {
                l__Result.Result = 0;
                l__Result.Msg = ex.Message;
                l__Result.BillReq = 0;
                l__Result.Carrier_Result = 0;
                l__Result.Carrier_Msg = "";
                l__Result.BankDoc_Mana_Head_ID_Str = "";
                l__Result.BillNum = "";
                l__Result.Carrier = "";
                l__Result.ShopPhone = "";
                l__Result.BillWeight = "";
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return Json(l__Result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>POST: /Requests/mCallLog__Bill__Create</summary>
        [HttpPost]
        public ActionResult mCallLog__Bill__Create(mCallLog__Bill__Create__Input p_mCallLog__Bill__Create__Input)
        {
            mCallLog__Bill__Create__Result l__Result = new mCallLog__Bill__Create__Result();
            l__Result.Result = 0;
            l__Result.Msg = "";
            l__Result.BillReq = 0;
            l__Result.Carrier_Result = 0;
            l__Result.Carrier_Msg = "";
            l__Result.BillNum = "";
            try
            {
                if (p_mCallLog__Bill__Create__Input != null)
                {
                    #region ===Tạo biến chứa Data===
                    string l__Title = p_mCallLog__Bill__Create__Input.Title;
                    string l__Cc = p_mCallLog__Bill__Create__Input.Cc;
                    //
                    string l__Sender = p_mCallLog__Bill__Create__Input.Sender;
                    //
                    ////string ShopPhongBanMoi = p_mCallLog__Bill__Create__Input.ShopPhongBanMoi;
                    //
                    string MaPhongBanGui = p_mCallLog__Bill__Create__Input.MaShopPhongBanGui;
                    string TenPhongBanShopGui = p_mCallLog__Bill__Create__Input.TenShopPhongBanGui;
                    string MaPhongBanGuiKerry = p_mCallLog__Bill__Create__Input.MaShopPhongBanGuiKerry;
                    string DiaChiGui = p_mCallLog__Bill__Create__Input.DiaChiGui;
                    string MaTinhThanhGui = p_mCallLog__Bill__Create__Input.MaTinhThanhGui;
                    string TenTinhThanhGui = p_mCallLog__Bill__Create__Input.TenTinhThanhGui;
                    string MaQuanHuyenGui = p_mCallLog__Bill__Create__Input.MaQuanHuyenGui;
                    string TenQuanHuyenGui = p_mCallLog__Bill__Create__Input.TenQuanHuyenGui;
                    string SoDienThoaiNguoiGui = p_mCallLog__Bill__Create__Input.SoDienThoaiNguoiGui;
                    //
                    string MaPhongBanNhan = p_mCallLog__Bill__Create__Input.MaShopPhongBanNhan;
                    string TenPhongBanShopNhan = p_mCallLog__Bill__Create__Input.TenShopPhongBanNhan;
                    string MaPhongBanNhanKerry = p_mCallLog__Bill__Create__Input.MaShopPhongBanNhanKerry;
                    string DiaChiNhan = p_mCallLog__Bill__Create__Input.DiaChiNhan;
                    string MaTinhThanhNhan = p_mCallLog__Bill__Create__Input.MaTinhThanhNhan;
                    string TenTinhThanhNhan = p_mCallLog__Bill__Create__Input.TenTinhThanhNhan;
                    string MaQuanHuyenNhan = p_mCallLog__Bill__Create__Input.MaQuanHuyenNhan;
                    string TenQuanHuyenNhan = p_mCallLog__Bill__Create__Input.TenQuanHuyenNhan;
                    string HoTenNguoiNhan = p_mCallLog__Bill__Create__Input.HoTenNguoiNhan;
                    string SoDienThoaiNguoiNhan = p_mCallLog__Bill__Create__Input.SoDienThoaiNguoiNhan;
                    if (string.IsNullOrEmpty(MaPhongBanNhan))
                    {
                        DataTable l_DataTable = sql.ExecuteCommand("OrganizationForCompany", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@CompanyName", TenPhongBanShopNhan),
                            new SqlParameter("@CompanyAddress", DiaChiNhan),
                            new SqlParameter("@MaTinhThanh", MaTinhThanhNhan),
                            new SqlParameter("@MaQuanHuyen", MaQuanHuyenNhan),
                            new SqlParameter("@TenQuanHuyen", TenQuanHuyenNhan),
                            new SqlParameter("@TenTinhThanh", TenTinhThanhNhan),
                            new SqlParameter("@MaUser", l__Sender)
                            });
                        if (l_DataTable != null && l_DataTable.Rows.Count > 0)
                        {
                            DataRow l_DataRow = l_DataTable.Rows[0];
                            MaPhongBanNhan = l_DataRow["MaPhongBanMoi"].ToString();
                            MaPhongBanNhanKerry = l_DataRow["MaPhongBanMoi"].ToString();
                        }
                    }
                    //
                    string MaLoaiHangHoa = p_mCallLog__Bill__Create__Input.MaLoaiHangHoa;
                    string NoiDungHangHoa = p_mCallLog__Bill__Create__Input.NoiDungHangHoa;
                    int SoLuong = p_mCallLog__Bill__Create__Input.SoLuong;
                    string SoKien = p_mCallLog__Bill__Create__Input.SoKien;
                    string TrongLuong = p_mCallLog__Bill__Create__Input.TrongLuong;
                    string TrongLuongFRT = string.Empty;
                    string TrongLuongNVC = string.Empty;
                    if (TrongLuong != null)
                    {
                        TrongLuongNVC = TrongLuong;
                    }
                    else
                    {
                        TrongLuongNVC = "0";
                    }
                    string MaNhaVanChuyen = p_mCallLog__Bill__Create__Input.MaNhaVanChuyen;
                    string TenDichVuVanChuyen = p_mCallLog__Bill__Create__Input.TenDichVuVanChuyen;
                    string MaDichVuVanChuyen = null;
                    if (TenDichVuVanChuyen != "")
                    {
                        DataTable l_DataTable = sql.ExecuteCommand("sp__mCallLog__Bill__LoadDichVu", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@MaNhaVanChuyen", MaNhaVanChuyen),
                        });
                        if (l_DataTable != null && l_DataTable.Rows.Count > 0)
                        {
                            foreach (DataRow l_DataRow in l_DataTable.Rows)
                            {
                                if (l_DataRow["Name"].ToString() == TenDichVuVanChuyen)
                                {
                                    MaDichVuVanChuyen = l_DataRow["Code"].ToString();
                                }
                            }
                        }
                    }
                    string MaHinhThucThanhToan = p_mCallLog__Bill__Create__Input.MaHinhThucThanhToan;
                    string GhiChu = p_mCallLog__Bill__Create__Input.GhiChu;
                    double CuocPhiMin = 0;
                    CuocPhiMin = double.TryParse(p_mCallLog__Bill__Create__Input.CuocPhiMin, out CuocPhiMin) ? CuocPhiMin : 0;
                    int Is_NVCToiUu = p_mCallLog__Bill__Create__Input.Is_NVCToiUu;

                    int l__Is_TaoBillHoaToc = (TenDichVuVanChuyen == "Hỏa tốc" ? 1 : 0);
                    if (l__Is_TaoBillHoaToc == 1 && string.IsNullOrEmpty(GhiChu))
                    {
                        l__Result.Result = 0;
                        l__Result.Msg = "Vui lòng nhập \"Lý do gửi\" ở cột \"Ghi chú\" khi bạn chọn dịch vụ \"Hỏa tốc\"";
                        l__Result.BillReq = 0;
                        l__Result.Carrier_Result = 0;
                        l__Result.Carrier_Msg = "";
                        l__Result.BillNum = "";
                        return Json(l__Result, JsonRequestBehavior.AllowGet);
                    }
                    #endregion

                    long l__RequestBill_Id = 0;
                    int l__RequestBill_StepNo = 0;

                    #region ===Tạo Bill===
                    string l__Employees__OrganizationHierachyCode = null;
                    #region ---Tạo Header CallLog Bill---
                    string l__FromShop = null, l__FromOffice = null;
                    if (l__Sender != null && l__Sender != "")
                    {
                        EmployeeDAL l__EmployeeDAL = new EmployeeDAL();
                        F03_Employees l__F03_Employees = l__EmployeeDAL.Get(l__Sender);
                        if (l__F03_Employees != null)
                        {
                            l__FromShop = l__F03_Employees.WarehouseCode;
                            l__FromOffice = l__F03_Employees.OrganizationHierachyCode;
                            l__Employees__OrganizationHierachyCode = l__F03_Employees.OrganizationHierachyCode;
                        }
                    }
                    if (string.IsNullOrEmpty(l__Title))
                    {
                        l__Title = "Bill Vận chuyển - NULL1 - NULL2 - " + DateTime.Now.ToString("dd/MM/yyyy");    //  VietMXH - Trường hợp Không có Title, tạm Format này
                    }

                    DataTable l__DataTable = sql.ExecuteCommand("sp__BillVanChuyen__CreateRequest", CommandType.StoredProcedure, new SqlParameter[]{
                        new SqlParameter("@RequestId", 0),
                        new SqlParameter("@Type", 1), // * Loại: 1:Tạo Bill gửi
                        new SqlParameter("@Sender", l__Sender),
                        new SqlParameter("@Title", l__Title),
                        new SqlParameter("@FromShop", l__FromShop),
                        new SqlParameter("@FromOffice", l__FromOffice),
                        new SqlParameter("@UpdateBy", l__Sender),
                        new SqlParameter("@Is_NVCToiUu", Is_NVCToiUu),
                        new SqlParameter("@FromForm", "mCallLog-Ver2"),
                    });

                    if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                    {
                        if (l__DataTable.Rows[0]["Result"].ToString() == "1")
                        {
                            string l__RequestId__Str = l__DataTable.Rows[0]["RequestId"].ToString();
                            l__RequestBill_Id = long.TryParse(l__RequestId__Str, out l__RequestBill_Id) ? l__RequestBill_Id : 0;
                            string l__StepNo__Str = l__DataTable.Rows[0]["StepNo"].ToString();
                            l__RequestBill_StepNo = int.TryParse(l__StepNo__Str, out l__RequestBill_StepNo) ? l__RequestBill_StepNo : 0;
                        }
                    }
                    #endregion

                    #region ---Check Header CallLog Bill---
                    if (l__RequestBill_Id > 0)
                    {
                        l__Result.Result = 1;
                        l__Result.Msg = "Tạo Vận đơn Thành công!</br>Mã Vận đơn: ";
                        l__Result.BillReq = l__RequestBill_Id;
                        l__Result.Carrier_Result = 0;
                        l__Result.Carrier_Msg = "";
                        l__Result.BillNum = "";

                        #region ===Tạo CallLog Bill Thành công===
                        string l__MaVanDon = null;
                        if (MaNhaVanChuyen == "NT")
                        {
                            l__MaVanDon = "FC" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                        }
                        else if (MaNhaVanChuyen == "Kerry")
                        {
                            l__MaVanDon = "CK" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                        }
                        else if (MaNhaVanChuyen == "VNC")
                        {
                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            l__MaVanDon = "VC" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        }

                        #region ---Tạo Detail CallLog Bill---
                        RequestDetail l__RequestDetailBill = new RequestDetail();
                        l__RequestDetailBill.RequestId = l__RequestBill_Id;
                        //
                        if (MaPhongBanGui != null)
                        {
                            l__RequestDetailBill.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                        }
                        else if (l__Employees__OrganizationHierachyCode != null)
                        {
                            l__RequestDetailBill.ShopCode = l__Employees__OrganizationHierachyCode; //Mã phòng ban gửi
                        }
                        l__RequestDetailBill.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                        l__RequestDetailBill.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                        l__RequestDetailBill.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                        l__RequestDetailBill.EmpCode = SoDienThoaiNguoiGui;
                        //
                        l__RequestDetailBill.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                        l__RequestDetailBill.Property5 = DiaChiNhan;                      //Địa Chỉ nhận
                        l__RequestDetailBill.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                        l__RequestDetailBill.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                        l__RequestDetailBill.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                        l__RequestDetailBill.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                        //
                        l__RequestDetailBill.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                        l__RequestDetailBill.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                        l__RequestDetailBill.Approved = (l__Is_TaoBillHoaToc == 1 ? true : false);
                        if (SoLuong > 0)
                            l__RequestDetailBill.Quantity3 = SoLuong;
                        l__RequestDetailBill.Quantity1 = Convert.ToInt32(SoKien);         //Số kiện đơn hàng
                        l__RequestDetailBill.Property10 = TrongLuong;                     //Cân nặng
                        l__RequestDetailBill.Property12 = TrongLuongFRT;
                        l__RequestDetailBill.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                        l__RequestDetailBill.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                        l__RequestDetailBill.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                        l__RequestDetailBill.Note = GhiChu;                               //Ghi chú
                        if (CuocPhiMin > 0)
                        {
                            l__RequestDetailBill.Money3 = CuocPhiMin;   //  Cước phí (Min)
                        }
                        //
                        if (l__MaVanDon != "")
                        {
                            l__RequestDetailBill.ProductCode = l__MaVanDon;         //Mã số chứng từ hàng hóa
                        }
                        l__RequestDetailBill.Status = Key.Status.Available;

                        l__RequestDetailBill.QuantityAvaiable = null; //  Duyệt Thay đổi Nhà vận chuyển? null:Chờ duyệt ; 1:Duyệt ; 0:Từ chối

                        //
                        db.RequestDetails.Add(l__RequestDetailBill);
                        db.SaveChanges();
                        #endregion

                        #region ---Nội dung Yêu cầu của Người tạo---
                        //  Do something
                        #endregion

                        #region ---Gán CC---
                        string[] l_Arr__Cc = null;
                        if (l__Cc != null && l__Cc != "")
                            l_Arr__Cc = l__Cc.Split(',');
                        if (l_Arr__Cc != null && l_Arr__Cc.Length > 0)
                        {
                            foreach (string l_Cc in l_Arr__Cc)
                            {
                                var AssignerCc = new Assigner();
                                AssignerCc.RequestId = l__RequestBill_Id;
                                AssignerCc.EmployeeCode = l_Cc.ToString();
                                AssignerCc.StepNo = 1;
                                AssignerCc.Type = Key.TypeAssigner.Cc;
                                AssignerCc.TimeCreate = DateTime.Now;
                                AssignerCc.Status = Key.StatusRequest.Waitting;
                                db.Assigners.Add(AssignerCc);
                            }
                        }
                        #endregion

                        db.SaveChanges();

                        #region ---Send Mail---
                        XMail.Send(l__RequestBill_Id, "[CallLog] - " + l__Title, XMail.ProcessType.Create);
                        #endregion

                        string ResultFromDuyetBillHoaToc = string.Empty;
                        string ResultFromNVC = string.Empty;
                        if (l__RequestBill_StepNo == 2)
                        {
                            #region ---Tạo CallLog Duyệt Bill Vận chuyển Hỏa tốc---
                            if (l__Is_TaoBillHoaToc == 1)
                            {
                                string l_ResStr = BillVanChuyen__TaoCLDuyetBillVCHoaToc(l__RequestBill_Id);
                                BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result l_Result = JsonConvert.DeserializeObject<BillVanChuyen__TaoCLDuyetBillVCHoaToc__Result>(l_ResStr);
                                if (l_Result.RequestId > 0)
                                {
                                    ResultFromDuyetBillHoaToc = "</br>Tạo Bill Hỏa tốc Thành công! RequestId: " + l_Result.RequestId;
                                }
                                else
                                {
                                    ResultFromDuyetBillHoaToc = "</br>Tạo Bill Hỏa tốc Thất bại! Message: " + l_Result.Message;
                                }
                            }
                            #endregion ---Tạo CallLog Duyệt Bill Vận chuyển Hỏa tốc---

                            #region ---Tích hợp Nhà vận chuyển---
                            string l_ResStr_NVC = BillVanChuyen__TichHopNhaVanChuyen(l__RequestBill_Id);
                            BillVanChuyen__TichHopNhaVanChuyen__Result l_Result_NVC = JsonConvert.DeserializeObject<BillVanChuyen__TichHopNhaVanChuyen__Result>(l_ResStr_NVC);
                            ResultFromNVC = l_Result_NVC.Result + "-" + l_Result_NVC.Msg;
                            #endregion ---Tích hợp Nhà vận chuyển---
                        }

                        l__Result.Result = 1;
                        l__Result.Msg = "Tạo Vận đơn Thành công!</br>Mã Vận đơn: " + l__MaVanDon + ResultFromDuyetBillHoaToc;
                        l__Result.BillReq = l__RequestBill_Id;
                        l__Result.Carrier_Result = 1;
                        l__Result.Carrier_Msg = ResultFromNVC;
                        l__Result.BillNum = l__MaVanDon;
                        #endregion
                    }
                    else
                    {
                        l__Result.Result = 0;
                        l__Result.Msg = "Tạo CallLog Bill Thất bại!";
                        l__Result.BillReq = 0;
                        l__Result.Carrier_Result = 0;
                        l__Result.Carrier_Msg = "";
                        l__Result.BillNum = "";
                    }
                    #endregion
                    #endregion
                }
                else
                {
                    l__Result.Result = 0;
                    l__Result.Msg = "Không có Thông tin tạo CallLog Bill!";
                    l__Result.BillReq = 0;
                    l__Result.Carrier_Result = 0;
                    l__Result.Carrier_Msg = "";
                    l__Result.BillNum = "";
                }
            }
            catch (Exception ex)
            {
                l__Result.Result = 0;
                l__Result.Msg = ex.Message;
                l__Result.BillReq = 0;
                l__Result.Carrier_Result = 0;
                l__Result.Carrier_Msg = "";
                l__Result.BillNum = "";
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return Json(l__Result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>POST: /Requests/POS__Bill__Create</summary>
        [HttpPost]
        public ActionResult POS__Bill__Create(POS__Bill__Create__Input p_POS__Bill__Create__Input)
        {
            POS__Bill__Create__Result l__Result = new POS__Bill__Create__Result();
            l__Result.Result = 0;
            l__Result.Msg = "";
            l__Result.BillReq = 0;
            l__Result.Carrier_Result = 0;
            l__Result.Carrier_Msg = "";
            try
            {
                if (p_POS__Bill__Create__Input != null)
                {

                    #region ===Log===
                    try
                    {
                        SqlParameter[] l_SqlParameter = new SqlParameter[]{
                            new SqlParameter("@FromForm", "POS"),
                            new SqlParameter("@Title", p_POS__Bill__Create__Input.Title),
                            new SqlParameter("@Cc", p_POS__Bill__Create__Input.Cc),
                            new SqlParameter("@Sender", p_POS__Bill__Create__Input.Sender),
                            new SqlParameter("@MaShopPhongBanGui", p_POS__Bill__Create__Input.MaShopPhongBanGui),
                            new SqlParameter("@MaShopPhongBanGuiKerry", p_POS__Bill__Create__Input.MaShopPhongBanGuiKerry),
                            new SqlParameter("@DiaChiGui", p_POS__Bill__Create__Input.DiaChiGui),
                            new SqlParameter("@MaTinhThanhGui", p_POS__Bill__Create__Input.MaTinhThanhGui),
                            new SqlParameter("@TenTinhThanhGui", p_POS__Bill__Create__Input.TenTinhThanhGui),
                            new SqlParameter("@MaQuanHuyenGui", p_POS__Bill__Create__Input.MaQuanHuyenGui),
                            new SqlParameter("@TenQuanHuyenGui", p_POS__Bill__Create__Input.TenQuanHuyenGui),
                            new SqlParameter("@SoDienThoaiNguoiGui", p_POS__Bill__Create__Input.SoDienThoaiNguoiGui),
                            new SqlParameter("@MaShopPhongBanNhan", p_POS__Bill__Create__Input.MaShopPhongBanNhan),
                            new SqlParameter("@TenShopPhongBanNhan", p_POS__Bill__Create__Input.TenShopPhongBanNhan),
                            new SqlParameter("@MaShopPhongBanNhanKerry", p_POS__Bill__Create__Input.MaShopPhongBanNhanKerry),
                            new SqlParameter("@DiaChiNhan", p_POS__Bill__Create__Input.DiaChiNhan),
                            new SqlParameter("@MaTinhThanhNhan", p_POS__Bill__Create__Input.MaTinhThanhNhan),
                            new SqlParameter("@TenTinhThanhNhan", p_POS__Bill__Create__Input.TenTinhThanhNhan),
                            new SqlParameter("@MaQuanHuyenNhan", p_POS__Bill__Create__Input.MaQuanHuyenNhan),
                            new SqlParameter("@TenQuanHuyenNhan", p_POS__Bill__Create__Input.TenQuanHuyenNhan),
                            new SqlParameter("@HoTenNguoiNhan", p_POS__Bill__Create__Input.HoTenNguoiNhan),
                            new SqlParameter("@SoDienThoaiNguoiNhan", p_POS__Bill__Create__Input.SoDienThoaiNguoiNhan),
                            new SqlParameter("@MaLoaiHangHoa", p_POS__Bill__Create__Input.MaLoaiHangHoa),
                            new SqlParameter("@NoiDungHangHoa", p_POS__Bill__Create__Input.NoiDungHangHoa),
                            new SqlParameter("@SoLuong", p_POS__Bill__Create__Input.SoLuong),
                            new SqlParameter("@SoKien", p_POS__Bill__Create__Input.SoKien),
                            new SqlParameter("@TrongLuong", p_POS__Bill__Create__Input.TrongLuong),
                            new SqlParameter("@MaNhaVanChuyen", p_POS__Bill__Create__Input.MaNhaVanChuyen),
                            new SqlParameter("@MaDichVuVanChuyen", p_POS__Bill__Create__Input.MaDichVuVanChuyen),
                            new SqlParameter("@MaHinhThucThanhToan", p_POS__Bill__Create__Input.MaHinhThucThanhToan),
                            new SqlParameter("@GhiChu", p_POS__Bill__Create__Input.GhiChu),
                            new SqlParameter("@CuocPhiMin", p_POS__Bill__Create__Input.CuocPhiMin),
                        };
                        sql.ExecuteWithoutResult("sp__Logs__Bill__CreateBill", CommandType.StoredProcedure, l_SqlParameter);
                    }
                    catch (Exception LogEx)
                    {
                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", LogEx.ToString());
                    }
                    #endregion

                    #region ===Tạo biến chứa Data===
                    string l__Title = p_POS__Bill__Create__Input.Title;
                    string l__Cc = p_POS__Bill__Create__Input.Cc;
                    //
                    string l__Sender = p_POS__Bill__Create__Input.Sender;
                    //
                    ////string ShopPhongBanMoi = p_POS__Bill__Create__Input.ShopPhongBanMoi;
                    //
                    string MaPhongBanGui = p_POS__Bill__Create__Input.MaShopPhongBanGui;
                    string TenPhongBanShopGui = p_POS__Bill__Create__Input.TenShopPhongBanGui;
                    string MaPhongBanGuiKerry = p_POS__Bill__Create__Input.MaShopPhongBanGuiKerry;
                    string DiaChiGui = p_POS__Bill__Create__Input.DiaChiGui;
                    string MaTinhThanhGui = p_POS__Bill__Create__Input.MaTinhThanhGui;
                    string TenTinhThanhGui = p_POS__Bill__Create__Input.TenTinhThanhGui;
                    string MaQuanHuyenGui = p_POS__Bill__Create__Input.MaQuanHuyenGui;
                    string TenQuanHuyenGui = p_POS__Bill__Create__Input.TenQuanHuyenGui;
                    string SoDienThoaiNguoiGui = p_POS__Bill__Create__Input.SoDienThoaiNguoiGui;
                    //
                    string MaPhongBanNhan = p_POS__Bill__Create__Input.MaShopPhongBanNhan;
                    string TenPhongBanShopNhan = p_POS__Bill__Create__Input.TenShopPhongBanNhan;
                    string MaPhongBanNhanKerry = p_POS__Bill__Create__Input.MaShopPhongBanNhanKerry;
                    string DiaChiNhan = p_POS__Bill__Create__Input.DiaChiNhan;
                    string MaTinhThanhNhan = p_POS__Bill__Create__Input.MaTinhThanhNhan;
                    string TenTinhThanhNhan = p_POS__Bill__Create__Input.TenTinhThanhNhan;
                    string MaQuanHuyenNhan = p_POS__Bill__Create__Input.MaQuanHuyenNhan;
                    string TenQuanHuyenNhan = p_POS__Bill__Create__Input.TenQuanHuyenNhan;
                    string HoTenNguoiNhan = p_POS__Bill__Create__Input.HoTenNguoiNhan;
                    string SoDienThoaiNguoiNhan = p_POS__Bill__Create__Input.SoDienThoaiNguoiNhan;
                    if (string.IsNullOrEmpty(MaPhongBanNhan))
                    {
                        DataTable l_DataTable = sql.ExecuteCommand("OrganizationForCompany", CommandType.StoredProcedure, new SqlParameter[] {
                            new SqlParameter("@CompanyName", TenPhongBanShopNhan),
                            new SqlParameter("@CompanyAddress", DiaChiNhan),
                            new SqlParameter("@MaTinhThanh", MaTinhThanhNhan),
                            new SqlParameter("@MaQuanHuyen", MaQuanHuyenNhan),
                            new SqlParameter("@TenQuanHuyen", TenQuanHuyenNhan),
                            new SqlParameter("@TenTinhThanh", TenTinhThanhNhan),
                            new SqlParameter("@MaUser", l__Sender)
                            });
                        if (l_DataTable != null && l_DataTable.Rows.Count > 0)
                        {
                            DataRow l_DataRow = l_DataTable.Rows[0];
                            MaPhongBanNhan = l_DataRow["MaPhongBanMoi"].ToString();
                            MaPhongBanNhanKerry = l_DataRow["MaPhongBanMoi"].ToString();
                        }
                    }
                    //
                    string MaLoaiHangHoa = p_POS__Bill__Create__Input.MaLoaiHangHoa;
                    string NoiDungHangHoa = p_POS__Bill__Create__Input.NoiDungHangHoa;
                    int SoLuong = p_POS__Bill__Create__Input.SoLuong;
                    string SoKien = p_POS__Bill__Create__Input.SoKien;
                    string TrongLuong = p_POS__Bill__Create__Input.TrongLuong;
                    string TrongLuongFRT = string.Empty;
                    string TrongLuongNVC = string.Empty;
                    if (TrongLuong != null)
                    {
                        TrongLuongNVC = TrongLuong;
                    }
                    else
                    {
                        TrongLuongNVC = "0";
                    }
                    string MaNhaVanChuyen = p_POS__Bill__Create__Input.MaNhaVanChuyen;
                    string MaDichVuVanChuyen = p_POS__Bill__Create__Input.MaDichVuVanChuyen;
                    string MaHinhThucThanhToan = p_POS__Bill__Create__Input.MaHinhThucThanhToan;
                    string GhiChu = p_POS__Bill__Create__Input.GhiChu;
                    double CuocPhiMin = 0;
                    CuocPhiMin = double.TryParse(p_POS__Bill__Create__Input.CuocPhiMin, out CuocPhiMin) ? CuocPhiMin : 0;
                    int l__Is_TaoBillHoaToc = (MaDichVuVanChuyen == "0203" ? 1 : 0);    //  "0203":Hỏa tốc
                    if (l__Is_TaoBillHoaToc == 1 && string.IsNullOrEmpty(GhiChu))
                    {
                        l__Result.Result = 0;
                        l__Result.Msg = "Vui lòng nhập \"Lý do gửi\" ở cột \"Ghi chú\" khi bạn chọn dịch vụ \"Hỏa tốc\"";
                        l__Result.BillReq = 0;
                        l__Result.Carrier_Result = 0;
                        l__Result.Carrier_Msg = "";
                        return Json(l__Result, JsonRequestBehavior.AllowGet);
                    }
                    #endregion

                    long l__RequestBill_Id = 0;

                    #region ===Tạo Bill===
                    string l__Employees__OrganizationHierachyCode = null;
                    #region ---Tạo Header CallLog Bill---
                    Request l__RequestBill = new Request();
                    string l__FromShop_Name = "";
                    if (l__Sender != null && l__Sender != "")
                    {
                        EmployeeDAL l__EmployeeDAL = new EmployeeDAL();
                        F03_Employees l__F03_Employees = l__EmployeeDAL.Get(l__Sender);
                        if (l__F03_Employees != null)
                        {
                            l__RequestBill.Sender = l__F03_Employees.EmployeeCode;
                            l__RequestBill.CreateBy = l__F03_Employees.EmployeeCode;
                            l__RequestBill.UpdateBy = l__F03_Employees.EmployeeCode;
                            l__RequestBill.FromShop = l__F03_Employees.WarehouseCode;
                            l__RequestBill.FromOffice = l__F03_Employees.OrganizationHierachyCode;
                            l__Employees__OrganizationHierachyCode = l__F03_Employees.OrganizationHierachyCode;
                            ShopDAL l__ShopDAL = new ShopDAL();
                            Warehouse l__Warehouse = l__ShopDAL.Get(l__F03_Employees.WarehouseCode);
                            if (l__Warehouse != null)
                            {
                                l__FromShop_Name = l__Warehouse.WarehouseName;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(l__Title))
                    {
                        SqlParameter[] l__SqlParameter = new SqlParameter[]{
                            new SqlParameter("@UserCode", l__Sender)
                        };
                        DataTable l__DataTable = sql.ExecuteCommand("sp__POS__Bill__LoadTitle__ForWeb", CommandType.StoredProcedure, l__SqlParameter);
                        if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                        {
                            l__Title = l__DataTable.Rows[0]["Title"].ToString();
                        }
                        if (string.IsNullOrEmpty(l__Title))
                        {
                            l__Title = "Bill Vận chuyển - NULL1 - NULL2 - " + DateTime.Now.ToString("dd/MM/yyyy");    //  VietMXH - Trường hợp Không có Title, tạm Format này
                        }
                    }
                    l__RequestBill.StepNo = 1;
                    l__RequestBill.Title = l__Title;
                    l__RequestBill.TypeId = 154; // 154:Bill Vận chuyển
                    l__RequestBill.StepStatus = Key.StatusRequest.Waitting;
                    l__RequestBill.TimeCreate = DateTime.Now;
                    l__RequestBill.TimeAppear = DateTime.Now;
                    l__RequestBill.isHighlight = false;
                    l__RequestBill.isParent = false;
                    l__RequestBill.Status = Key.Status.Available;
                    l__RequestBill.TimeLastUpdate = DateTime.Now;
                    l__RequestBill.Assigner = "-2";
                    l__RequestBill.FromForm = "POS";   //▶	Edit - VietMXH - 13/05/2019 - Nguồn tạo CallLog==================================================
                    db.Requests.Add(l__RequestBill);
                    db.SaveChanges();
                    l__RequestBill_Id = l__RequestBill.Id;
                    #endregion

                    #region ---Check Header CallLog Bill---
                    if (l__RequestBill_Id > 0)
                    {
                        l__Result.Result = 1;
                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                        l__Result.BillReq = l__RequestBill_Id;
                        l__Result.Carrier_Result = 0;
                        l__Result.Carrier_Msg = "";

                        #region ===Tạo CallLog Bill Thành công===
                        string l__MaVanDon = null;
                        if (MaNhaVanChuyen == "NT")
                        {
                            l__MaVanDon = "FC" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                        }
                        else if (MaNhaVanChuyen == "Kerry")
                        {
                            l__MaVanDon = "CK" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                        }
                        else if (MaNhaVanChuyen == "VNC")
                        {
                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            l__MaVanDon = "VC" + l__RequestBill_Id.ToString();         //Mã số chứng từ hàng hóa
                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        }

                        #region ---Tạo Detail CallLog Bill---
                        RequestDetail l__RequestDetailBill = new RequestDetail();
                        l__RequestDetailBill.RequestId = l__RequestBill_Id;
                        //
                        if (MaPhongBanGui != null)
                        {
                            l__RequestDetailBill.ShopCode = MaPhongBanGui;               //Mã phòng ban gửi
                        }
                        else if (l__Employees__OrganizationHierachyCode != null)
                        {
                            l__RequestDetailBill.ShopCode = l__Employees__OrganizationHierachyCode; //Mã phòng ban gửi
                        }
                        l__RequestDetailBill.Property1 = DiaChiGui;                       //Địa Chỉ gửi
                        l__RequestDetailBill.Property2 = MaTinhThanhGui;                  //Mã Tỉnh gửi
                        l__RequestDetailBill.Property3 = MaQuanHuyenGui;                  //Mã Huyện gửi
                        l__RequestDetailBill.EmpCode = SoDienThoaiNguoiGui;
                        //
                        l__RequestDetailBill.ShopCode2 = MaPhongBanNhan;                   //Shop Phòng ban nhận
                        l__RequestDetailBill.Property5 = DiaChiNhan;                      //Địa Chỉ nhận
                        l__RequestDetailBill.Property6 = MaTinhThanhNhan;                 //Mã Tỉnh nhận
                        l__RequestDetailBill.Property7 = MaQuanHuyenNhan;                 //Mã Huyện nhận
                        l__RequestDetailBill.Property4 = HoTenNguoiNhan;                  //Họ tên người nhận
                        l__RequestDetailBill.CustomerCode = SoDienThoaiNguoiNhan;         //Số điện thoại người nhận
                        //
                        l__RequestDetailBill.Property8 = MaLoaiHangHoa;                   //Loại hàng hóa
                        l__RequestDetailBill.ProductName = NoiDungHangHoa;                //Nội dung đơn hàng
                        l__RequestDetailBill.Approved = false;
                        if (SoLuong > 0)
                            l__RequestDetailBill.Quantity3 = SoLuong;
                        l__RequestDetailBill.Quantity1 = Convert.ToInt32(SoKien);         //Số kiện đơn hàng
                        l__RequestDetailBill.Property10 = TrongLuong;                     //Cân nặng
                        l__RequestDetailBill.Property12 = TrongLuongFRT;
                        l__RequestDetailBill.Property9 = MaNhaVanChuyen;                  //Nhà vận chuyển
                        l__RequestDetailBill.EmpCode1 = MaDichVuVanChuyen;                //Dịch vụ
                        l__RequestDetailBill.EmpCode2 = MaHinhThucThanhToan;              //Hình thức thanh toán
                        l__RequestDetailBill.Note = GhiChu;                               //Ghi chú
                        if (CuocPhiMin > 0)
                        {
                            l__RequestDetailBill.Money3 = CuocPhiMin;   //  Cước phí (Min)
                        }
                        //
                        if (l__MaVanDon != "")
                        {
                            l__RequestDetailBill.ProductCode = l__MaVanDon;         //Mã số chứng từ hàng hóa
                        }
                        l__RequestDetailBill.Status = Key.Status.Available;
                        //
                        db.RequestDetails.Add(l__RequestDetailBill);
                        db.SaveChanges();
                        #endregion

                        #region ---Nội dung Yêu cầu của Người tạo---
                        //  Do something
                        #endregion

                        #region ---Gán CC---
                        string[] l_Arr__Cc = null;
                        if (l__Cc != null && l__Cc != "")
                            l_Arr__Cc = l__Cc.Split(',');
                        if (l_Arr__Cc != null && l_Arr__Cc.Length > 0)
                        {
                            foreach (string l_Cc in l_Arr__Cc)
                            {
                                var AssignerCc = new Assigner();
                                AssignerCc.RequestId = l__RequestBill_Id;
                                AssignerCc.EmployeeCode = l_Cc.ToString();
                                AssignerCc.StepNo = 1;
                                AssignerCc.Type = Key.TypeAssigner.Cc;
                                AssignerCc.TimeCreate = DateTime.Now;
                                AssignerCc.Status = Key.StatusRequest.Waitting;
                                db.Assigners.Add(AssignerCc);
                            }
                        }
                        #endregion

                        #region ---Tích hợp Nhà vận chuyển---
                        #region ------Tạo biến chứa Data Nhà vận chuyển------
                        string MaSoChungTuVanChuyen = ""; //1. Mã số chứng từ vận chuyển
                        if (MaNhaVanChuyen == "NT")
                        {
                            MaSoChungTuVanChuyen = "FC" + l__RequestBill_Id.ToString();
                        }
                        else if (MaNhaVanChuyen == "Kerry")
                        {
                            MaSoChungTuVanChuyen = "CK" + l__RequestBill_Id.ToString();
                        }
                        else if (MaNhaVanChuyen == "VNC")
                        {
                            //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                            MaSoChungTuVanChuyen = "VC" + l__RequestBill_Id.ToString();
                            //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        }

                        string MaHinhThucThanhToanKerry = "";
                        if (MaHinhThucThanhToan == "1")
                        {
                            MaHinhThucThanhToanKerry = "NG";
                        }
                        else if (MaHinhThucThanhToan == "2")
                        {
                            MaHinhThucThanhToanKerry = "NN";
                        }
                        #endregion

                        #region ------Đẩy sang Nhà vận chuyển------
                        #region ---------Nhất Tín---------
                        if (MaNhaVanChuyen == "NT")
                        {
                            #region ---Điền thông tin Shop---
                            //  Thông tin Shop Xuất
                            mAddressBook l_mAddressBook_sender = new mAddressBook();
                            l_mAddressBook_sender.addressCode = MaPhongBanGui;                 //  Mã shop
                            l_mAddressBook_sender.addressName = MaPhongBanGui;              //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                            l_mAddressBook_sender.fullAddress = DiaChiGui;                     //  Địa Chỉ đầy đủ (Có thể Null)
                            l_mAddressBook_sender.provinceAreaCode = MaTinhThanhGui;           //  Mã Thành Phố / Tỉnh (Có thể Null)
                            l_mAddressBook_sender.districtAreaCode = MaQuanHuyenGui;            //  Mã Quận / Huyện (Có thể Null)
                            l_mAddressBook_sender.contactPhone = SoDienThoaiNguoiGui;                           //  Số ĐT Liên Hệ (Có thể Null)
                            l_mAddressBook_sender.contactName = "";                            //  Tên Liên Hệ (Có thể Null)

                            //  Thông tin Shop Nhận
                            mAddressBook l_mAddressBook_receiver = new mAddressBook();
                            //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                            l_mAddressBook_receiver.addressCode = MaPhongBanNhan;               //  Mã shop
                            l_mAddressBook_receiver.addressName = MaPhongBanNhan;           //  Mã địa chỉ theo bảng địa chỉ của FPT Shop
                            l_mAddressBook_receiver.fullAddress = DiaChiNhan;                   //  Địa Chỉ đầy đủ (Có thể Null)
                            l_mAddressBook_receiver.provinceAreaCode = MaTinhThanhNhan;         //  Mã Thành Phố / Tỉnh (Có thể Null)
                            l_mAddressBook_receiver.districtAreaCode = MaQuanHuyenNhan;         //  Mã Quận / Huyện (Có thể Null)
                            l_mAddressBook_receiver.contactPhone = SoDienThoaiNguoiNhan;                          //  Số ĐT Liên Hệ (Có thể Null)
                            l_mAddressBook_receiver.contactName = HoTenNguoiNhan;                           //  Tên Liên Hệ (Có thể Null)
                            #endregion

                            mResult l_mResult = serviceNhatTin.updateDoInfoFullNote(
                                      "fptshop-calllog"                                         //  username        -   Tài Khoản của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                    , "gxNmsvD2rUNkq7Ds"                                        //  password        -   Mật Khẩu của FPT Shop được Nhất Tín cấp để xác thực khi chạy web service method
                                    , MaSoChungTuVanChuyen                                      //  orderNumber     -   Chuỗi Số DO (Delivery Order) của FPT Shop
                                    , MaDichVuVanChuyen                                         //  serviceCode     -   Mã dịch vụ của Nhất Tín ( 10 = CPN | 11 = Hỏa Tốc | 20 = đường bộ | 21 = 48 h)
                                    , "N"                                                       //  isWoodPack      -   "Y" | "N" = Đóng Kiện Gỗ hay không
                                    , Convert.ToInt16(SoKien)                                   //  noPack          -   Số Kiện
                                    , Convert.ToDouble(TrongLuongNVC)                                                //  PackageWeight   -   Khối Lượng (theo đơn vị kg làm tròn lẻ đến 2 chữ số phần thập phân)    (Kg)
                                    , 0                                                         //  COD             -   Số Tiền Thu Hộ (theo đơn vị đồng)   
                                    , NoiDungHangHoa                                                    //  Description     -   Nội dung hàng (có đính kèm dãy số hóa đơn)
                                    , ""                                                        //  dimension       -   Kích thước (theo cm, định dạng dàixrộngxcao)    
                                    , "N"                                                       //  isCount         -   "Y" | "N" = Kiểm Đếm hay không  
                                    , l_mAddressBook_sender                                     //  sender          -   Đối Tượng Thông Tin Địa Chỉ Gửi (địa chỉ của FPT Shop)  
                                    , l_mAddressBook_receiver                                   //  receiver        -   Đối Tượng Thông Tin Địa Chỉ Trả Hàng
                                    , Convert.ToInt32(MaHinhThucThanhToan)                      //                  -   Hình thức thanh toán
                                    , GhiChu                                                    //  Note            -   Ghi chú đẩy riêng cho Nhất Tín
                                );
                            switch (l_mResult.errorCode)
                            {
                                case 0:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 1;
                                        l__Result.Carrier_Msg = "Gửi DO thành công!";
                                        int k = InsertThongTinVanChuyenVeNhatTin(1, 1, MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), l_mResult.errorCode, l_mResult.errorDes, Convert.ToDouble(TrongLuongNVC));
                                    }
                                    break;
                                case 1:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Không có số vận đơn để gửi sang Nhất Tín!";
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Không có số vận đơn để gửi sang Nhất Tín!");
                                    }
                                    break;
                                case 2:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa!";
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Số vận đơn đã được Nhất Tín xác nhận. Không thể đẩy lần nữa!");
                                    }
                                    break;
                                case 3:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Số vận đơn đã được Nhất Tín xác nhận!";
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Số vận đơn đã được Nhất Tín xác nhận hủy!");
                                    }
                                    break;
                                case 4:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Sai tài khoản xác thực!";
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Sai tài khoản xác thực!");
                                    }
                                    break;
                                case -1:
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Thông tin gửi nhà vận chuyển bị lỗi!";
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Thông tin gửi nhà vận chuyển bị lỗi!");
                                    }
                                    break;
                                default: //  Các trường hợp còn lại
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = "Lỗi hệ thống Nhất Tín hoặc do đường truyền. Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín.\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support!";
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Lỗi hệ thống Nhất Tín hoặc do đường truyền. Xin hãy hoàn tất lại để gửi thông tin sang Nhất Tín.\nTình trạng vẫn còn tiếp diễn, xin hãy gửi \"Log.txt\" cho Support!");
                                    }
                                    break;
                            }
                        }
                        #endregion

                        #region ---------Kerry---------
                        else if (MaNhaVanChuyen == "Kerry")
                        {
                            DTO_Kerry_DOInfo g_KerryDOInfo = new DTO_Kerry_DOInfo();
                            DTO_Kerry_Address kShopXuat = new DTO_Kerry_Address();
                            DTO_Kerry_Address kShopNhan = new DTO_Kerry_Address();
                            List<DTO_Kerry_OrderItem> kOrderItem = new List<DTO_Kerry_OrderItem>();
                            //  Lấy thông tin Shop Nhận
                            DataTable dtShopForKerryNhan = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhNhan, MaQuanHuyenNhan);

                            //  Lấy thông tin Shop Xuất
                            DataTable dtShopForKerryXuat = TaoThongTinPhongBan(MaNhaVanChuyen, MaTinhThanhGui, MaQuanHuyenGui);

                            //  Kiểm tra Thông tin Shop?         
                            if (dtShopForKerryXuat == null || dtShopForKerryXuat.Rows.Count <= 0
                                || dtShopForKerryNhan == null || dtShopForKerryNhan.Rows.Count <= 0)
                            {
                                l__Result.Result = 1;
                                l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                l__Result.BillReq = l__RequestBill_Id;
                                l__Result.Carrier_Result = 0;
                                l__Result.Carrier_Msg = "Thông tin địa chỉ gửi nhà vận chuyển bị lỗi!";
                                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Thông tin địa gửi nhà vận chuyển bị lỗi!");
                            }
                            else
                            {
                                kShopXuat = new DTO_Kerry_Address(DiaChiGui,
                                                                  dtShopForKerryXuat.Rows[0]["KerryProvinceCode"].ToString(),
                                                                  dtShopForKerryXuat.Rows[0]["KerryDistrictCode"].ToString(),
                                                                  "",
                                                                  SoDienThoaiNguoiGui,
                                                                  MaPhongBanGuiKerry + " - " + TenPhongBanShopGui);

                                kShopNhan = new DTO_Kerry_Address(DiaChiNhan,
                                                                  dtShopForKerryNhan.Rows[0]["KerryProvinceCode"].ToString(),
                                                                  dtShopForKerryNhan.Rows[0]["KerryDistrictCode"].ToString(),
                                                                  "",
                                                                  SoDienThoaiNguoiNhan,
                                                                  MaPhongBanNhanKerry + " - " + TenPhongBanShopNhan + " - " + HoTenNguoiNhan); //+ "-" + HoTenNguoiNhan);

                                kOrderItem.Add(new DTO_Kerry_OrderItem("",
                                                                     "0",
                                                                     "0x0x0",
                                                                     "0",
                                                                     "COD",
                                                                     "0",
                                                                     "N"));

                                //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                g_KerryDOInfo = new DTO_Kerry_DOInfo(g_KerryWebService_Token,
                                                                     MaSoChungTuVanChuyen,
                                                                     MaSoChungTuVanChuyen,
                                                                     SoKien,
                                                                    TrongLuongNVC,
                                                                     "N",
                                                                     "0",
                                                                     MaDichVuVanChuyen,
                                                                     NoiDungHangHoa,
                                                                     MaHinhThucThanhToanKerry,
                                                                     kShopNhan,
                                                                     kShopXuat,
                                                                     kOrderItem
                                                                   );
                                //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                var json = new JavaScriptSerializer().Serialize(g_KerryDOInfo);

                                //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                string sKerryResponse = g_KerryWebService.WS001PostNewOrderInfo(json.ToString());
                                //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                //▼	Edit - VietMXH - 20/04/2019 - Bắt thêm case Kerry==================================================
                                int intKerryInsertOrderErrorCode = 0;   //  NOTE: 0:Thành công ; -1:Thất bại
                                string strKerryInsertOrderResult;

                                if (string.IsNullOrEmpty(sKerryResponse))
                                {
                                    l__Result.Result = 1;
                                    l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                    l__Result.BillReq = l__RequestBill_Id;
                                    l__Result.Carrier_Result = 0;
                                    l__Result.Carrier_Msg = "Lỗi không phản hồi từ web service Kerry!";
                                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Lỗi không phản hồi từ web service Kerry!");
                                }
                                else
                                {
                                    JavaScriptSerializer responseJson = new JavaScriptSerializer();
                                    DTO_Kerry_Response responseKerryDTO = new DTO_Kerry_Response();
                                    responseKerryDTO = responseJson.Deserialize<DTO_Kerry_Response>(sKerryResponse);

                                    //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
                                    switch (responseKerryDTO.status)
                                    {
                                        case "success":
                                            #region MyRegion
                                            intKerryInsertOrderErrorCode = 0;
                                            strKerryInsertOrderResult = "Gửi DO thành công.";
                                            l__Result.Result = 1;
                                            l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                            l__Result.BillReq = l__RequestBill_Id;
                                            l__Result.Carrier_Result = 1;
                                            l__Result.Carrier_Msg = "Gửi DO thành công!";

                                            InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                Transporters.Kerry.Code,
                                                Transporters.Kerry.KeyCertify,
                                                Transporters.Kerry.KeyName,
                                                MaSoChungTuVanChuyen,
                                                MaDichVuVanChuyen,
                                                "N",
                                                SoKien.ToString(),
                                                "",
                                                intKerryInsertOrderErrorCode,
                                                strKerryInsertOrderResult,
                                                Convert.ToDouble(TrongLuong)     // Ký
                                                );
                                            #endregion
                                            break;
                                        case "update":
                                            #region MyRegion
                                            intKerryInsertOrderErrorCode = 0;
                                            strKerryInsertOrderResult = "Gửi lại DO thành công.";
                                            l__Result.Result = 1;
                                            l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                            l__Result.BillReq = l__RequestBill_Id;
                                            l__Result.Carrier_Result = 1;
                                            l__Result.Carrier_Msg = "Gửi lại DO thành công!";

                                            InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                                Transporters.Kerry.Code,
                                                Transporters.Kerry.KeyCertify,
                                                Transporters.Kerry.KeyName,
                                                MaSoChungTuVanChuyen,
                                                MaDichVuVanChuyen,
                                                "N",
                                                SoKien.ToString(),
                                                "",
                                                intKerryInsertOrderErrorCode,
                                                strKerryInsertOrderResult,
                                                Convert.ToDouble(TrongLuong)     // Ký
                                                );
                                            #endregion
                                            break;
                                        case "error":
                                            #region MyRegion
                                            string l_error = "Gửi vận đơn cho nhà vận chuyển Kerry thất bại! " + responseKerryDTO.message;
                                            l__Result.Result = 1;
                                            l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                            l__Result.BillReq = l__RequestBill_Id;
                                            l__Result.Carrier_Result = 0;
                                            l__Result.Carrier_Msg = l_error;
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " " + l_error);
                                            #endregion
                                            break;
                                        default:
                                            #region MyRegion
                                            l__Result.Result = 1;
                                            l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                            l__Result.BillReq = l__RequestBill_Id;
                                            l__Result.Carrier_Result = 0;
                                            l__Result.Carrier_Msg = "Gửi vận đơn cho nhà vận chuyển Kerry thất bại!";
                                            Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " Gửi vận đơn cho nhà vận chuyển Kerry thất bại!");
                                            #endregion
                                            break;
                                    }
                                    //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

                                }
                                //▲	Edit - VietMXH - 20/04/2019 - Bắt thêm case Kerry==================================================

                            }
                        }
                        #endregion

                        #region ---------Vinacapital Post---------
                        //▼	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        else if (MaNhaVanChuyen == "VNC")
                        {
                            int l__VNC__ServiceId = int.TryParse(MaDichVuVanChuyen, out l__VNC__ServiceId) ? l__VNC__ServiceId : 0;
                            int l__VNC__Weight = int.TryParse(TrongLuongNVC, out l__VNC__Weight) ? l__VNC__Weight : 0;
                            VinacapitalPost l__VinacapitalPost = new VinacapitalPost();
                            VinacapitalPost.VNCPost_Order_Add_Result l__VNCPost_Order_Add_Result = l__VinacapitalPost.Order_Add(
                                MaSoChungTuVanChuyen, "-", 0, 1, l__VNC__ServiceId,
                                l__VNC__Weight, 0, 0, 0, null, 1, null, null,
                                TenTinhThanhGui, TenQuanHuyenGui, null, DiaChiGui, null, SoDienThoaiNguoiGui,
                                TenTinhThanhNhan, TenQuanHuyenNhan, null, DiaChiNhan, HoTenNguoiNhan, SoDienThoaiNguoiNhan,
                                null, null, null, null, null, null
                                );
                            switch (l__VNCPost_Order_Add_Result.Result)
                            {
                                case 1: // 1:Thành công
                                    {
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 1;
                                        l__Result.Carrier_Msg = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post Thành công!";

                                        InsertThongTinVanChuyenVeNhaVanChuyenConLai(
                                            null, null, null,
                                            MaSoChungTuVanChuyen, MaDichVuVanChuyen, "N", SoKien.ToString(), "",
                                            0, "Gửi DO thành công!", Convert.ToDouble(TrongLuong)     // Ký
                                            );
                                    }
                                    break;
                                case 2: // 2:Thất bại
                                    {
                                        string l_error = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                        l_error += "</br>Vinacapital Post: Order_Add.Message: " + l__VNCPost_Order_Add_Result.Message;
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = l_error;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " " + l_error);
                                    }
                                    break;
                                default: // Khác
                                    {
                                        string l_error = "Gửi vận đơn cho nhà vận chuyển Vinacapital Post thất bại!";
                                        l_error += "</br>Vinacapital Post: Order_Add.Result: " + l__VNCPost_Order_Add_Result.Result.ToString();
                                        l__Result.Result = 1;
                                        l__Result.Msg = "Tạo CallLog Bill Thành công!</br>Mã CallLog Bill: " + l__RequestBill_Id.ToString();
                                        l__Result.BillReq = l__RequestBill_Id;
                                        l__Result.Carrier_Result = 0;
                                        l__Result.Carrier_Msg = l_error;
                                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", l__RequestBill_Id.ToString() + " " + l_error);
                                    }
                                    break;
                            }
                        }
                        //▲	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
                        #endregion
                        #endregion
                        #endregion

                        #region ---Send Mail---
                        //Send mail
                        XMail.Send(l__RequestBill_Id, "[CallLog] - " + l__RequestBill.Title, XMail.ProcessType.Create);
                        #endregion

                        #region ---Tạo Bill Hỏa tốc---
                        if (l__Is_TaoBillHoaToc == 1)
                        {
                            string MaPhongBanShopGui = string.Empty;
                            if (MaPhongBanGui != "")
                            {
                                MaPhongBanShopGui = MaPhongBanGui;               //Mã phòng ban gửi
                            }
                            else
                            {
                                MaPhongBanShopGui = UserManager.CurrentUser.OrganizationHierachyCode; //Mã phòng ban gửi
                            }
                            SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@Sender", l__Sender),
                                new SqlParameter("@SoVanDon", MaSoChungTuVanChuyen),
                                new SqlParameter("@LyDoGui", GhiChu),
                                new SqlParameter("@FromShop", MaPhongBanShopGui),
                                new SqlParameter("@FromShopName", TenPhongBanShopGui),
                                new SqlParameter("@ToShop", MaPhongBanNhan),
                                new SqlParameter("@ToShopName", TenPhongBanShopNhan),
                                new SqlParameter("@TenHangHoa", NoiDungHangHoa),
                                new SqlParameter("@TrongLuong", TrongLuong),
                                new SqlParameter("@CuocVanChuyen", 0),
                                new SqlParameter("@System", 1),
                                new SqlParameter("@SoGiaoDich", l__RequestBill_Id),
                                new SqlParameter("@CreateBy", l__Sender)
                            };
                            DataTable tb = sql.ExecuteCommand("Request_InsertBillHoaToc", CommandType.StoredProcedure, param);
                            DataRow row = tb.Rows[0];
                            var l__RequestBill__HoaToc = row["RequestId"].ToString();
                            if (l__RequestBill__HoaToc != "0")
                            {
                                l__Result.Msg += "</br>Tạo Bill Hỏa tốc Thành công! ReqId: " + l__RequestBill__HoaToc;
                            }
                            else
                            {
                                l__Result.Msg += "</br>Tạo Bill Hỏa tốc Thất bại! Msg: " + row["Message"].ToString();
                            }
                        }
                        #endregion ---Tạo Bill Hỏa tốc---
                        #endregion
                    }
                    else
                    {
                        l__Result.Result = 0;
                        l__Result.Msg = "Tạo CallLog Bill Thất bại!";
                        l__Result.BillReq = 0;
                        l__Result.Carrier_Result = 0;
                        l__Result.Carrier_Msg = "";
                    }
                    #endregion
                    #endregion
                }
                else
                {
                    l__Result.Result = 0;
                    l__Result.Msg = "Không có Thông tin tạo CallLog Bill!";
                    l__Result.BillReq = 0;
                    l__Result.Carrier_Result = 0;
                    l__Result.Carrier_Msg = "";
                }
            }
            catch (Exception ex)
            {
                l__Result.Result = 0;
                l__Result.Msg = ex.Message;
                l__Result.BillReq = 0;
                l__Result.Carrier_Result = 0;
                l__Result.Carrier_Msg = "";
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return Json(l__Result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>GET: /Requests/Create__BillVanChuyen__GetHinhThucVanChuyenPOS</summary>
        public ActionResult Create__BillVanChuyen__GetHinhThucVanChuyenPOS()
        {
            JsonResult l_JsonResult = null;
            DataTable l_DataTable = sql.ExecuteCommand("sp__Request__Create__BillVanChuyen__GetHinhThucVanChuyenPOS", CommandType.StoredProcedure, null);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
            }
            return l_JsonResult;
        }

        /// <summary>GET: /Requests/Create__BillVanChuyen__GetPhanTuyen</summary>
        public ActionResult Create__BillVanChuyen__GetPhanTuyen(string IdTinhDi, string IdTinhDen, string ShopDiB1, string ShopDenB1, string TrongLuong, string DichVu)
        {
            JsonResult l_JsonResult = null;
            int l_IdTinhDi = int.TryParse(IdTinhDi, out l_IdTinhDi) ? l_IdTinhDi : 0;
            int l_IdTinhDen = int.TryParse(IdTinhDen, out l_IdTinhDen) ? l_IdTinhDen : 0;
            decimal l_TrongLuong = decimal.TryParse(TrongLuong, out l_TrongLuong) ? l_TrongLuong : 0;
            SqlParameter[] l_SqlParameter = {
                                                new SqlParameter("@IdTinhDi", l_IdTinhDi),
                                                new SqlParameter("@IdTinhDen", l_IdTinhDen),
                                                new SqlParameter("@ShopDiB1", ShopDiB1),
                                                new SqlParameter("@ShopDenB1", ShopDenB1),
                                                new SqlParameter("@TrongLuong", l_TrongLuong),
                                                new SqlParameter("@DichVu", DichVu),
                                            };
            DataTable l_DataTable = sql.ExecuteCommand("sp__Request__Create__BillVanChuyen__GetPhanTuyen", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
            }
            return l_JsonResult;
        }
        /// <summary>POST: /Requests/Details__BillVanChuyen__HuyBill</summary>
        public ActionResult Details__BillVanChuyen__HuyBill(FormCollection form)
        {
            int l_RequestId = form["RequestId"].EParseToInt();
            string l_LyDoHuy = "Hủy từ màn hình chi tiết";
            TransportersController l_TransportersController = new TransportersController();
            string l_ResStr = l_TransportersController.HuyBill(l_RequestId, l_LyDoHuy, UserManager.CurrentUser.InsideCode);
            HuyBill_Result l_Result = JsonConvert.DeserializeObject<HuyBill_Result>(l_ResStr);
            TempData["Message"] = l_Result.Message;
            return RedirectToAction("Index", "Home"); // chuyển về trang chủ
        }
        class HuyBill_Result
        {
            public int Result { set; get; }
            public string Message { set; get; }
        }

        /// <summary>POST: /Requests/mCallLog__Bill__Cancel</summary>
        [HttpPost]
        public ActionResult mCallLog__Bill__Cancel(mCallLog__Bill__Cancel__Input mCallLog__Bill__Cancel__Input)
        {
            mCallLog__Bill__Cancel__Result l__Result = new mCallLog__Bill__Cancel__Result();
            l__Result.Result = 0;
            l__Result.Message = "";
            try
            {
                if (mCallLog__Bill__Cancel__Input != null)
                {
                    TransportersController l_TransportersController = new TransportersController();
                    string l_ResStr = l_TransportersController.HuyBill(mCallLog__Bill__Cancel__Input.RequestId, "Hủy từ mCallLog", mCallLog__Bill__Cancel__Input.UserHuy);
                    HuyBill_Result l_Result = JsonConvert.DeserializeObject<HuyBill_Result>(l_ResStr);
                    if (l_Result.Result == 1)
                    {
                        l__Result.Result = 1;
                        l__Result.Message = l_Result.Message;
                    }
                    else
                    {
                        l__Result.Result = 0;
                        l__Result.Message = l_Result.Message;
                    }
                }
                else
                {
                    l__Result.Result = 0;
                    l__Result.Message = "Không có Thông tin Hủy CallLog Bill!";
                }
            }
            catch (Exception ex)
            {
                l__Result.Result = 0;
                l__Result.Message = ex.Message;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return Json(l__Result, JsonRequestBehavior.AllowGet);
        }
        public class mCallLog__Bill__Cancel__Input
        {
            public long RequestId { set; get; }
            public string UserHuy { set; get; }
        }
        class mCallLog__Bill__Cancel__Result
        {
            public int Result { set; get; }
            public string Message { set; get; }
        }

        /// <summary>GET: /Requests/Req__Det__BillVanChuyen__UpdateTrongLuong</summary>
        public ActionResult Req__Det__BillVanChuyen__UpdateTrongLuong(int RequestId, string TrongLuong)
        {

            //▼	Edit - VietMXH - 12/11/2019 - Bill VC: Trọng lượng + QRCode==================================================
            JsonResult l_JsonResult = null;
            DataTable l_DataTable = sql.ExecuteCommand("sp__WEB__Req__Det__BillVanChuyen__UpdateTrongLuong", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@RequestId", RequestId),
                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                new SqlParameter("@TrongLuong", TrongLuong)
            });
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
            }
            return l_JsonResult;
            //▲	Edit - VietMXH - 12/11/2019 - Bill VC: Trọng lượng + QRCode==================================================

        }
        #endregion ===Bill Vận chuyển===

        [HttpPost]
        public ActionResult KiemKeKho__CheckDetailId(int p_RequestId, IEnumerable<KiemKeKho__CheckDetailId> p_List_KiemKeKho__CheckDetailId)
        {
            JsonResult l__JsonResult = null;
            try
            {
                DataTable l_DataTable = new DataTable();
                l_DataTable.Columns.Add("ReqDetId", typeof(int));
                if (p_List_KiemKeKho__CheckDetailId != null && p_List_KiemKeKho__CheckDetailId.Count() > 0)
                {
                    foreach (KiemKeKho__CheckDetailId l_KiemKeKho__CheckDetailId in p_List_KiemKeKho__CheckDetailId)
                    {
                        l_DataTable.Rows.Add(
                            l_KiemKeKho__CheckDetailId.ReqDetId
                            );
                    }
                }
                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@RequestId", p_RequestId),
                    new SqlParameter("@Table", l_DataTable)
                };
                DataTable l__DataTable = sql.ExecuteCommand("sp__WEB__KiemKeKho__CheckDetailId", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return l__JsonResult;
        }

        #region -- TUANNA89 --
        //▼ Add - TuanNA78 -- 15/10/2018 -- CR cải tiến Calllog ============
        [HttpGet]
        public ActionResult CaiTienCalllog_KiemTra(int p_LoaiCalllog)
        {
            JsonResult l__JsonResult = null;
            try
            {
                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@LoaiCalllog", p_LoaiCalllog),
                    new SqlParameter("@Sender", UserManager.CurrentUser.InsideCode),
                    //new SqlParameter("@MaPhongBan", UserManager.CurrentUser.OrganizationHierachyCode),
                };
                DataTable l__DataTable = sql.ExecuteCommand("CaiTienCalllog_TimCalllogChuaSurvey", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return l__JsonResult;
        }

        [HttpPost]
        public ActionResult CaiTienCalllog_CapNhatDanhGia(List<CapNhatDanhGia> p_data, string p_User)
        {
            JsonResult l__JsonResult = null;
            try
            {
                if (p_User == "") p_User = UserManager.CurrentUser.InsideCode;

                string xmlSurvey = "";
                xmlSurvey = GetXMLFromObject(p_data);

                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@XMLSurvey", xmlSurvey),
                    new SqlParameter("@User", p_User),
                    //new SqlParameter("@MaPhongBan", UserManager.CurrentUser.OrganizationHierachyCode),
                };
                DataTable l__DataTable = sql.ExecuteCommand("CaiTienCalllog_CapNhatSurveyCalllog", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return l__JsonResult;
        }

        public static string GetXMLFromObject(object o)
        {
            var sw = new StringWriter();
            System.Xml.XmlTextWriter tw = null;
            try
            {
                var serializer = new XmlSerializer(o.GetType());
                tw = new System.Xml.XmlTextWriter(sw);
                serializer.Serialize(tw, o);
            }
            catch (Exception ex)
            {
                //Handle Exception Code
            }
            finally
            {
                sw.Close();
                if (tw != null)
                {
                    tw.Close();
                }
            }
            return sw.ToString();
        }
        //▲ Add - TuanNA78 -- 15/10/2018 -- CR cải tiến Calllog ============

        //▼ Add - TuanNA89 -- 3/11/2018 -- CR kiểm tra CIC khách hàng mua SSD ============
        [HttpPost]
        public ActionResult SSD_KiemTraCICKhachHang_DuyetCalllog(DuyetCalllog p_data)
        {
            JsonResult l__JsonResult = null;
            try
            {
                if ((p_data.user == null) || (p_data.user == ""))
                    p_data.user = UserManager.CurrentUser.InsideCode;

                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@RequestId", p_data.requestId),
                    new SqlParameter("@TypeId", p_data.typeId),
                    new SqlParameter("@Duyet", p_data.trangThaiDuyet),
                    new SqlParameter("@GhiChu", p_data.ghiChu),
                    new SqlParameter("@User", p_data.user),
                };
                DataTable l__DataTable = sql.ExecuteCommand("sp_SSD_KiemTraCICKhachHang_DuyetCalllog", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                    ViewBag.Message = "Hoàn tất calllog thành công!";
                    TempData["Message"] = "Hoàn tất calllog thành công!";
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                ViewBag.Message = "Có lỗi xảy ra khi duyệt Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                TempData["Message"] = "Có lỗi xảy ra khi duyệt Request! <br/>Xin vui lòng thử lại! <br/>";
            }

            return l__JsonResult;
        }
        //▲ Add - TuanNA89 -- 3/11/2018 -- CR kiểm tra CIC khách hàng mua SSD ============
        //▼ Add - TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216
        public ActionResult GetAllShop_Type216()
        {
            JsonResult l__JsonResult = null;
            try
            {
                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@ShopCode", UserManager.CurrentUser.WarehouseCode),
                    new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
                };
                DataTable l__DataTable = sql.ExecuteCommand("GetAllShop_Type216", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return l__JsonResult;
        }
        public ActionResult GetEmployees_Type216(string p_ShopCode = "")
        {
            JsonResult l__JsonResult = null;
            try
            {
                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@ShopCode", p_ShopCode),
                };
                DataTable l__DataTable = sql.ExecuteCommand("GetEmployees_Type216", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return l__JsonResult;
        }
        public ActionResult GetLyDoTrucDem_Type216()
        {
            JsonResult l__JsonResult = null;
            try
            {
                SqlParameter[] l__SqlParameter =
                {
                };
                DataTable l__DataTable = sql.ExecuteCommand("GetLyDoTrucDem_Type216", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return l__JsonResult;
        }
        //▲ Add - TuanNA89 - 17/09/2019 - Calllog phụ cấp trực đêm - Loại 216
        //▼ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
        public ActionResult GQKN_CLHoanTienKH_Type217_CheckSO(long p_SoSO)
        {
            JsonResult l__JsonResult = null;
            try
            {
                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@SoSO", p_SoSO),
                };

                DataTable l__DataTable = sql.ExecuteCommand("GQKN_CLHoanTienKH_Type217_CheckSO", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return l__JsonResult;
        }
        [HttpPost]
        public ActionResult GQKN_CLHoanTienKH_Type217_Create(FormCollection form)
        {
            JsonResult l__JsonResult = null;
            try
            {
                var strdata = form["data"].ToString();
                var data = JsonConvert.DeserializeObject<dynamic>(strdata);
                long RequestId_Goc = long.Parse((data.requestId_Goc).ToString());
                long SoTienHoanTra = long.Parse((data.SoTienHoanTra).ToString());
                string HoTenKH = data.HoTenKH;
                string CMND = data.CMND;
                string SDT = data.SDT;
                string SoSO = data.SoSO;
                string ShopKH = data.ShopKH;

                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@RequestId_Goc", RequestId_Goc),
                    new SqlParameter("@HoTenKH", HoTenKH),
                    new SqlParameter("@CMND", CMND),
                    new SqlParameter("@SDT", SDT),
                    new SqlParameter("@SoSO", SoSO),
                    new SqlParameter("@SoTienHoanTra", SoTienHoanTra),
                    new SqlParameter("@ShopKH", ShopKH),
                    new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@FromShop", UserManager.CurrentUser.WarehouseCode),
                };

                DataTable l__DataTable = sql.ExecuteCommand("GQKN_CLHoanTienKH_Type217_Create", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return l__JsonResult;
        }
        [HttpPost, ValidateInput(false)]
        public ActionResult SaveUploadedFileDetail_217(Request request, FormCollection form)
        {
            int requestId = form["RequestId"].EParseToInt();
            request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                    string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "Type217");
                    var path = "";
                    if (!Directory.Exists(pathString))
                    {
                        Directory.CreateDirectory(pathString);
                    }
                    RequestDetail requestdetail = null;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                    }))
                    {
                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                    }

                    long fileAttachId = 0;
                    string converstation = "";

                    if (requestdetail != null)
                    {
                        FileAttach oldFileAttach = null;
                        foreach (string fileName in Request.Files)
                        {
                            oldFileAttach = null;
                            HttpPostedFileBase file = Request.Files[fileName];
                            fName = fileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file attach fo database
                                string newFileName = fileName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + "_" + UserManager.CurrentUser.InsideCode + "_" + request.Id.ToString() + Path.GetExtension(file.FileName);
                                path = string.Format("{0}\\{1}", pathString, newFileName);
                                file.SaveAs(path);

                                if (fileName == "MT")
                                {
                                    fileAttachId = long.TryParse(requestdetail.Property8, out fileAttachId) ? fileAttachId : 0;
                                }
                                else if (fileName == "MS")
                                {
                                    fileAttachId = long.TryParse(requestdetail.Property9, out fileAttachId) ? fileAttachId : 0;
                                }
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                {
                                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                }))
                                {
                                    oldFileAttach = db.FileAttachs.FirstOrDefault(x => (x.Id == fileAttachId && x.Status == 1));
                                }

                                if (oldFileAttach != null)
                                {
                                    oldFileAttach.Status = 0;
                                }

                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = newFileName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.RequestDetailId = requestdetail.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                fileAttach.Domain = string.Format("{0}{1}/", Keyword.FolderFileAttach, "Type217");
                                db.FileAttachs.Add(fileAttach);
                                myCollection.Add(fileAttach.Uri.ToString());
                                db.SaveChanges();

                                if (fileName == "MT")
                                {
                                    requestdetail.Property8 = fileAttach.Id.ToString();
                                    converstation = UserManager.CurrentUser.InsideCode + " - " + UserManager.CurrentUser.EmployeeName + " đã upload hình ảnh CMND mặt trước thành công!";
                                }
                                else if (fileName == "MS")
                                {
                                    requestdetail.Property9 = fileAttach.Id.ToString();
                                    converstation = UserManager.CurrentUser.InsideCode + " - " + UserManager.CurrentUser.EmployeeName + " đã upload hình ảnh CMND mặt sau thành công!";
                                }
                                db.SaveChanges();
                                isSavedSuccessfully = true;

                                if (converstation != "")
                                {
                                    Conversation conversation = new Conversation();
                                    conversation.RequestId = request.Id;
                                    conversation.StepNo = request.StepNo;
                                    conversation.Sender = UserManager.CurrentUser.InsideCode;
                                    conversation.Message = converstation;
                                    conversation.CreateBy = UserManager.CurrentUser.InsideCode;
                                    conversation.Type = Key.Conversation.Comment;
                                    conversation.Status = Key.Status.Available;
                                    conversation.TimeCreate = DateTime.Now;
                                    db.Conversations.Add(conversation);
                                    db.SaveChanges();
                                }
                                TempData["MessageSuccess"] = "Lưu hình thành công!";
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
                }
                if (isSavedSuccessfully)
                {
                    //string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Lỗi lưu file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Add - TuanNA89 - 04/10/2019 - Calllog hoàn tiền KH - Loại 217
        //▼ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
        [HttpPost]
        public ActionResult CreateCalllogVPKM_218(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);
                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
                    var typeId = Convert.ToString(form["typeId"]);
                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    #region Tao chi tiet
                    int j = 0;
                    string ShopCode = "", ShopName = "";
                    foreach (var data in details)
                    {
                        if (data.Data != null && data.Data.ToString() != "[]")
                        {

                            string Title = data.Title;
                            byte rqStatus = Key.StatusRequest.Waitting;

                            var requestChild = new Request();
                            requestChild.Sender = UserManager.CurrentUser.InsideCode;
                            requestChild.Assigner = string.Empty;
                            requestChild.TypeId = data.TypeId;
                            requestChild.StepNo = 1;
                            requestChild.Title = Title;
                            requestChild.StepStatus = Key.StatusRequest.Waitting;
                            requestChild.TimeCreate = DateTime.Now;

                            requestChild.TimeAppear = DateTime.Now;

                            requestChild.isParent = false;
                            requestChild.Status = rqStatus;
                            requestChild.CreateBy = UserManager.CurrentUser.InsideCode;

                            requestChild.FromShop = data.ShopCode;
                            requestChild.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;
                            requestChild.GroupId = 0;
                            db.Requests.Add(requestChild);
                            db.SaveChanges();

                            requestDics.Add("single" + data.TypeId.ToString() + '-' + j.ToString(), requestChild);
                            foreach (var item in data.Data)
                            {
                                RequestDetail rs = new RequestDetail();
                                rs.RequestId = requestChild.Id;
                                rs.ProductCode = item.ItemCode;
                                rs.ProductName = item.ItemName;
                                rs.Property1 = item.Imei;
                                rs.Property2 = item.MaKhoXuat;
                                rs.Property3 = item.LyDo;
                                rs.ShopCode = item.ShopCodeB1;
                                rs.Quantity = item.SoLuong;
                                rs.Status = Key.Status.Available;
                                db.RequestDetails.Add(rs);
                                db.SaveChanges();

                                #region Lưu ảnh
                                string fName = string.Empty;
                                try
                                {
                                    var fileUploads = item.FileUpload;
                                    var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                                    // TuanNA89 - 24/02/2020 - Fix lưu ảnh vảo file Attach, không lưu riêng
                                    string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");

                                    if (!Directory.Exists(pathString))
                                    {
                                        Directory.CreateDirectory(pathString);
                                    }
                                    int index = 0;
                                    foreach (var itemFileUpload in fileUploads.ListData)
                                    {
                                        string fileName = itemFileUpload.fileName.ToString();
                                        HttpPostedFileBase file = Request.Files[fileName];
                                        if (file != null && file.ContentLength > 0)
                                        {
                                            string newFileName = "VPKM_" + DateTime.Now.ToString("yyyyMMddHHmmss") + "_" + UserManager.CurrentUser.InsideCode + "_" + rs.Id.ToString() + "_" + index.ToString() + Path.GetExtension(file.FileName);
                                            index++;
                                            var path = string.Format("{0}\\{1}", pathString, newFileName);
                                            file.SaveAs(path);
                                            FileAttach fileAttach = new FileAttach();
                                            fileAttach.RequestId = requestChild.Id;
                                            fileAttach.Uri = newFileName;
                                            fileAttach.StepNo = requestChild.StepNo;
                                            fileAttach.RequestDetailId = null;
                                            fileAttach.TimeCreate = DateTime.Now;
                                            fileAttach.Status = Key.Status.Available;
                                            fileAttach.RequestDetailId = rs.Id;
                                            // TuanNA89 - 24/02/2020 - Fix lưu ảnh vảo file Attach, không lưu riêng
                                            fileAttach.Domain = Keyword.FolderFileAttach;
                                            db.FileAttachs.Add(fileAttach);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Logger.WriteLogError("RequestController " + MethodBase.GetCurrentMethod().Name, ex.ToString());
                                }
                                #endregion
                            }
                            #region Gán người xử lý
                            SqlParameter[] param = new SqlParameter[] {
                                new SqlParameter("@RequestId", requestChild.Id),
                                new SqlParameter("@StepNo", requestChild.StepNo)
                            };
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                            if (table != null && table.Rows.Count > 0)
                                request.Assigner = table.Rows[0]["Assigner"].ToString();
                            else
                                request.Assigner = string.Empty;

                            #endregion

                            #region Gán người Cc
                            foreach (var itemcc in stringCc)
                            {
                                var AssignerCc = new Assigner();
                                AssignerCc.RequestId = requestChild.Id;
                                AssignerCc.EmployeeCode = itemcc.ToString();
                                AssignerCc.StepNo = requestChild.StepNo;
                                AssignerCc.Type = Key.TypeAssigner.Cc;
                                AssignerCc.TimeCreate = DateTime.Now;
                                AssignerCc.Status = Key.StatusRequest.Waitting;
                                db.Assigners.Add(AssignerCc);
                            }
                            #endregion
                            j++;
                        }
                    }

                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + String.Join(",", requestDics.Values.Select(x => x.Id).ToList()) + " thành công! <br/>";
                    #endregion

                    TempData["Message"] = strReturn;

                    db.SaveChanges();
                    //Gửi mail
                    foreach (var item in requestDics)
                    {
                        XMail.Send(item.Value.Id, "[CallLog] - " + item.Value.Title, XMail.ProcessType.Create);
                    }
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
                }
            }
            else
            {
                TempData["Message"] = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/>";
            }
            return null;
        }
        [HttpGet]
        public ActionResult GetProducts_218(string p_ItemCode = "")
        {
            JsonResult l__JsonResult = null;
            try
            {
                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@ItemCode", p_ItemCode),
                };

                DataTable l__DataTable = sql.ExecuteCommand("CLXuatSuDungVPKM_Type218_GetProducts", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return l__JsonResult;
        }
        //▲ Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
        //▼ Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM Shop - Loại 224
        [HttpPost]
        public ActionResult UploadImages_Type224(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                #region Lưu ảnh
                string fName = string.Empty;
                try
                {
                    //var fileUploads = item.FileUpload;
                    var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                    // TuanNA89 - 24/02/2020 - Fix lưu ảnh vảo file Attach, không lưu riêng
                    string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");

                    if (!Directory.Exists(pathString))
                    {
                        Directory.CreateDirectory(pathString);
                    }
                    int index = 0;
                    long requestId = Convert.ToInt64(Request.Form["RequestId"]);
                    var files = Request.Files;
                    //HttpPostedFileBase file = Request.Files;//[fileName];
                    if (files != null && files.Count > 0)
                    {
                        foreach (var item in files)
                        {
                            var key = item.ToString();
                            HttpPostedFileBase file = Request.Files[key];
                            long? detailId = Convert.ToInt64(key.Split('_')[0]);
                            string newFileName = "POSM_" + DateTime.Now.ToString("yyyyMMddHHmmss") + "_" + UserManager.CurrentUser.InsideCode + "_" + requestId.ToString() + "_" + detailId.ToString() + "_" + index.ToString() + Path.GetExtension(file.FileName);
                            index++;
                            var path = string.Format("{0}\\{1}", pathString, newFileName);
                            file.SaveAs(path);
                            FileAttach fileAttach = new FileAttach();
                            fileAttach.RequestId = requestId;
                            fileAttach.Uri = newFileName;
                            fileAttach.StepNo = 2;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            fileAttach.RequestDetailId = detailId;
                            // TuanNA89 - 24/02/2020 - Fix lưu ảnh vảo file Attach, không lưu riêng
                            fileAttach.Domain = Keyword.FolderFileAttach;
                            db.FileAttachs.Add(fileAttach);
                            db.SaveChanges();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController " + MethodBase.GetCurrentMethod().Name, ex.ToString());
                }
                #endregion
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Add - TuanNA89 - 04/12/2019 - CallLog in ấn POSM Shop - Loại 224

        //▼ Add - TuanNA89 - 03/12/2019 - Calllog Duyệt hình ảnh chứng từ hồ sơ Mirae - Loại 222
        //▼ Edit - TuanNA89 - 06/01/2019 - Fix loại CL 222
        ResponseApi CallApi_DuyetHinhAnhMirae(string p_RequestId, string p_DocEntryMirae, string p_ActivityID)
        {
            var result = new ResponseApi()
            {
                Success = false,
                Message = "Lỗi gọi hàm"
            };
            try
            {
                string UrlMpos_1 = ConfigurationManager.AppSettings["UrlMpos_1"];
                string UrlMpos_2 = ConfigurationManager.AppSettings["UrlMpos_2"];
                string User = ConfigurationManager.AppSettings["ApiMpos_User"];
                string Pass = ConfigurationManager.AppSettings["ApiMpos_Pass"];
                string Authen = "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes(User + ":" + Pass));

                CallApiHelper callApi = new CallApiHelper();

                //TuanNA89 - 11/01/2020 - Fix tên biến object
                var obj_1 = new
                {
                    Docentry = p_DocEntryMirae,
                    Createby = UserManager.CurrentUser.InsideCode
                };

                result = callApi.CallAPI_POST_Authen<ResponseApi>(Authen, UrlMpos_1, obj_1);
                if (result == null)
                {
                    result = new ResponseApi
                    {
                        Success = false,
                        Message = "Lỗi gọi API Post"
                    };
                }
                else
                {
                    if (result.Success == true)
                    {
                        result = callApi.CallAPI_GET_Authen<ResponseApi>(Authen, UrlMpos_2 + p_ActivityID);
                        if (result == null)
                        {
                            result = new ResponseApi
                            {
                                Success = false,
                                Message = "Lỗi gọi API Get"
                            };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("Requests - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                result = new ResponseApi
                {
                    Success = false,
                    Message = ex.ToString()
                };
            }
            return result;
        }

        //▼ Add - TuanNA89 - 20/04/2020 - Thêm field nội dung tóm tắt
        [ValidateInput(false)]
        public ActionResult InsertOrUpdateSummaryMessage(long requestId, string message)
        {

            if (UserManager.CurrentUser != null)
            {
                EmployeeDAL empJ = new EmployeeDAL();
                if (empJ.CheckJobtitle_CSKH(UserManager.CurrentUser.InsideCode) == false)
                {
                    TempData["Message"] = "Chức năng thuộc phân quyền của CSKH";
                    return Json('0', JsonRequestBehavior.AllowGet);
                }
                var requestMain = new Request();
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                }))
                {
                    requestMain = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }
                if (requestMain != null && requestMain.Status == Key.StatusRequest.Complete && requestMain.TypeId == 19)
                {
                    TempData["Message"] = "Yêu cầu đã được hoàn tất. Không thể cập nhật";
                    return Json('0', JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var cv_Old = new Conversation();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        cv_Old = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                        && x.Type == Key.Conversation.NoiDungTomTat
                        && x.Status == Key.Status.Available);
                    }
                    if (cv_Old != null)
                    {
                        cv_Old.Status = Key.Status.Unavailable;
                    }

                    var cv_New = new Conversation
                    {
                        RequestId = requestId,
                        StepNo = 0,
                        Sender = UserManager.CurrentUser.InsideCode,
                        Message = message,
                        CreateBy = UserManager.CurrentUser.InsideCode,
                        Type = Key.Conversation.NoiDungTomTat,
                        Status = Key.Status.Available,
                        TimeCreate = DateTime.Now
                    };
                    db.Conversations.Add(cv_New);

                    db.SaveChanges();
                }
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        //▲ Add - TuanNA89 - 20/04/2020 - Thêm field nội dung tóm tắt

        //▼ Add - TuanNA89 - 04/05/2020 - Cập nhật HXL nội bộ (code mới)
        [HttpPost]
        public ActionResult CapNhatHXLNoiBo(long requestId, DataCapNhatHXLNB dataUpdate)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            JsonResult l__JsonResult = null;
            try
            {
                var xConvert = new XConvert();
                string strDataUpdate = xConvert.ToStringXML_WithoutNamespaces(dataUpdate);

                SqlParameter[] l__SqlParameter =
                {
                    new SqlParameter("@RequestId", requestId),
                    new SqlParameter("@UserUpdate", UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@DataCapNhat", strDataUpdate),
                };
                DataTable l__DataTable = sql.ExecuteCommand("sp_GQKN_CapNhatHXLNoiBo", CommandType.StoredProcedure, l__SqlParameter);
                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                {
                    l__JsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l__JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            catch (Exception ex)
            {
                l__JsonResult = null;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return l__JsonResult;
        }
        [XmlRoot("DataCapNhatHXLNB")]
        public class DataCapNhatHXLNB
        {
            public string noidung { get; set; }
            public string quytrinh { get; set; }
            public string confirm_error { get; set; }
            public string confirm_quality { get; set; }
            public string loai_cl { get; set; }
            public string loai_kn { get; set; }
            public string loai_kn_cha { get; set; }
            public string chucdanh_vipham { get; set; }
            public string nhanvien_vipham { get; set; }
        }
        //▲ Add - TuanNA89 - 04/05/2020 - Cập nhật HXL nội bộ (code mới)

        public class ResponseApi
        {
            public bool Success { get; set; }
            public string Message { get; set; }
        }
        //▲ Edit - TuanNA89 - 06/01/2019 - Fix loại CL 222
        //▲ Add - TuanNA89 - 03/12/2019 - Calllog Duyệt hình ảnh chứng từ hồ sơ Mirae - Loại 222
        public class CapNhatDanhGia
        {
            public int RequestId { get; set; }
            public float Rating { get; set; }
            public string Note { get; set; }
        }
        public class DuyetCalllog
        {
            public int requestId { get; set; }
            public int typeId { get; set; }
            public int trangThaiDuyet { get; set; }
            public string ghiChu { get; set; }
            public string user { get; set; }
        }
        public class NhanVienTruyThu_205
        {
            public string MaNVTruyThu { get; set; }
            public string TenNVTruyTHu { get; set; }
            public string SoTienBiTruyThu { get; set; }
        }
        #endregion
        #region Chuongnt3 - Check In FRT

        public bool InformationGuest_Permission(string user)
        {
            SqlParameter[] para = {
                                    new SqlParameter("@User", user),
                                };
            DataTable G_permission = sql.ExecuteCommand("InformationGuest_Permission", CommandType.StoredProcedure, para);
            if (G_permission != null && G_permission.Rows.Count > 0)
            {
                return true;
            }
            return false;

        }

        public ActionResult List_Guest()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            if (InformationGuest_Permission(UserManager.CurrentUser.InsideCode) == false)
            {
                TempData["Message"] = "Bạn không nằm trong phân quyền";
                return RedirectToAction("Index", "Home");
            }
            SqlParameter[] para = {
                                    new SqlParameter("@Shop", UserManager.CurrentUser.WarehouseCode),
                                };
            DataTable tableResult = sql.ExecuteCommand("InformationGuest_Get", CommandType.StoredProcedure, para);
            return View(tableResult);
        }
        [HttpPost]
        public ActionResult List_Guest(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (InformationGuest_Permission(UserManager.CurrentUser.InsideCode) == false)
            {
                TempData["Message"] = "Bạn không nằm trong phân quyền";
                return RedirectToAction("Index", "Home");
            }
            var dataInfo = form["DataGuestSearch"].ToString();
            try
            {
                if (dataInfo != "" && dataInfo != null)
                {
                    SqlParameter[] para = {
                                    new SqlParameter("@Info", dataInfo),
                                };
                    DataTable tableResult = sql.ExecuteCommand("Information_Guest_Search_1_Info", CommandType.StoredProcedure, para);
                    if (tableResult != null && tableResult.Rows.Count > 0)
                    {
                        TempData["Message"] = String.Format("Tìm thấy " + tableResult.Rows.Count + " khách hàng");
                        return View(tableResult);
                    }
                    else
                    {
                        TempData["MessageError"] = String.Format("Không tìm thấy KH có thông tin: " + dataInfo);
                        SqlParameter[] para_1 = {
                                    new SqlParameter("@Shop", UserManager.CurrentUser.WarehouseCode),
                                };
                        DataTable tableResult_1 = sql.ExecuteCommand("InformationGuest_Get", CommandType.StoredProcedure, para_1);
                        return View(tableResult_1);
                    }
                }
            }
            catch (Exception e)
            {
                TempData["MessageError"] = String.Format("Tìm kiếm bại. Lỗi: " + e);
            }
            return RedirectToAction("List_Guest", "Requests");

        }
        public ActionResult Register_Guest()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (InformationGuest_Permission(UserManager.CurrentUser.InsideCode) == false)
            {
                TempData["Message"] = "Bạn không nằm trong phân quyền";
                return RedirectToAction("Index", "Home");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Register_Guest(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (InformationGuest_Permission(UserManager.CurrentUser.InsideCode) == false)
            {
                TempData["Message"] = "Bạn không nằm trong phân quyền";
                return RedirectToAction("Index", "Home");
            }
            try
            {
                var dataGender = form["check_male"].ToString();
                var dataGuest = form["DataGuest"].ToString();
                var data = JsonConvert.DeserializeObject<dynamic>(dataGuest);
                int gender;
                if (dataGender == "male_1")
                {
                    gender = 1;
                }
                else
                {
                    gender = 0;
                }
                string G_name = data.rs_name;
                DateTime G_birth = DateTime.ParseExact(data.rs_birth.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                string G_phone = data.rs_phone;
                string G_job = data.rs_job;
                string G_event = data.rs_event;
                //string G_Shop = string.Empty;

                SqlParameter[] para = {
                                    new SqlParameter("@GuestName", G_name),
                                    new SqlParameter("@Gender",gender),
                                    new SqlParameter("@BirthDay", G_birth),
                                    new SqlParameter("@NumberPhone", G_phone),
                                    new SqlParameter("@Job", G_job),
                                    new SqlParameter("@Event", G_event),
                                    //new SqlParameter("@Shop", G_Shop),
                                    new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode),
                                };
                DataTable tableResult = sql.ExecuteCommand("InformationGuest_Insert", CommandType.StoredProcedure, para);
                if (tableResult != null)
                {
                    if (tableResult.Rows[0][0].ToString() == "1")
                    {
                        TempData["Message"] = String.Format(tableResult.Rows[0]["MSG"].ToString());
                    }
                    if (tableResult.Rows[0][0].ToString() == "0")
                    {
                        TempData["MessageError"] = String.Format(tableResult.Rows[0]["MSG"].ToString());
                    }
                }
                else
                {
                    TempData["MessageError"] = String.Format("Tạm thời không tạo được KH. Vui lòng thử lại sau 3p!");
                }
            }
            catch (Exception e)
            {
                TempData["MessageError"] = String.Format("Lưu thất bại. Lỗi: " + e);
            }
            return RedirectToAction("List_Guest", "Requests");
        }
        public ActionResult Information_Guest(string phone, string name, string code)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (InformationGuest_Permission(UserManager.CurrentUser.InsideCode) == false)
            {
                TempData["Message"] = "Bạn không nằm trong phân quyền";
                return RedirectToAction("Index", "Home");
            }
            if (phone == null || phone == "" || name == "" || name == null)
            {
                return RedirectToAction("List_Guest", "Requests");
            }
            SqlParameter[] para = {
                                    new SqlParameter("@Phone",phone),
                                    new SqlParameter("@Name", name),
                                    new SqlParameter("@Code", code),
                                };
            DataTable tableResult = sql.ExecuteCommand("InformationGuest_Search", CommandType.StoredProcedure, para);

            return View(tableResult);
        }
        public ActionResult InformationGuest_Job_Masterdata()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (InformationGuest_Permission(UserManager.CurrentUser.InsideCode) == false)
            {
                TempData["Message"] = "Bạn không nằm trong phân quyền";
                return RedirectToAction("Index", "Home");
            }
            DataTable tableResult = sql.ExecuteCommand("InformationGuest_Job_Masterdata", CommandType.StoredProcedure, null);
            return Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        public ActionResult InformationGuest_Ecom_Event_Masterdata()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (InformationGuest_Permission(UserManager.CurrentUser.InsideCode) == false)
            {
                TempData["Message"] = "Bạn không nằm trong phân quyền";
                return RedirectToAction("Index", "Home");
            }
            DataTable tableResult = sql.ExecuteCommand("Ecom_ListEvent", CommandType.StoredProcedure, null);
            return Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult Information_Guest_CheckInKH(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (InformationGuest_Permission(UserManager.CurrentUser.InsideCode) == false)
            {
                TempData["Message"] = "Bạn không nằm trong phân quyền";
                return RedirectToAction("Index", "Home");
            }
            try
            {
                var dataGuest = form["DataGuest"].ToString();
                var data = JsonConvert.DeserializeObject<dynamic>(dataGuest);
                string G_name = data.rs_name;
                string G_phone = data.rs_phone;
                string G_code = data.rs_code;
                #region UploadImage
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                    if (file != null && file.ContentLength > 0)
                    {

                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        SqlParameter[] para = {
                                    new SqlParameter("@Phone",G_phone),
                                    new SqlParameter("@Name", G_name),
                                    new SqlParameter("@GuestCode", G_code),
                                    new SqlParameter("@Url", Keyword.GetFolderFileAttach() + fName),
                                    new SqlParameter("@UserUpdate", UserManager.CurrentUser.InsideCode)
                                };
                        DataTable tableResult = sql.ExecuteCommand("InformationGuest_CheckInKH", CommandType.StoredProcedure, para);
                    }
                }
                #endregion
                TempData["Message"] = String.Format("Check in thành công");
            }
            catch (Exception e)
            {
                TempData["MessageError"] = String.Format("Check in thất bại. Lỗi: " + e);
            }
            return RedirectToAction("List_Guest", "Requests");
        }
        public int Check_Guest(string phone, string nameEvent)
        {
            try
            {
                SqlParameter[] para = {
                                    new SqlParameter("@Phone",phone),new SqlParameter("@NameEvent",nameEvent)
                                };
                DataTable tableResult = sql.ExecuteCommand("InformationGuest_Check_Guest", CommandType.StoredProcedure, para);
                if (tableResult != null && tableResult.Rows[0][0].ToString() == "0")
                {
                    return 0;
                }
                else
                {
                    return 1;
                }
            }
            catch (Exception e)
            {
                return 0;
            }
        }
        #endregion
        #region ChuongNT3 - QLKN

        public ActionResult Update_NVVP_HXLNB(long requestId, string nhanVien)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (nhanVien != "")
            {

                SqlParameter[] para = { new SqlParameter("@RequestId", requestId), new SqlParameter("@NhanVien", nhanVien), };
                DataTable tableResult = sql.ExecuteCommand("Update_NVVP_HXLNB", CommandType.StoredProcedure, para);
                if (tableResult != null && tableResult.Rows.Count > 0)
                {
                    var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else
                {
                    return null;
                }
            }
            return null;
        }
        [HttpPost]
        public ActionResult UpdateChucDanhHXLNB(long requestId, string chucDanh)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (chucDanh != "")
            {

                SqlParameter[] para = { new SqlParameter("@RequestId", requestId), new SqlParameter("@ChucDanh", chucDanh), };
                DataTable tableResult = sql.ExecuteCommand("Update_ChucDanh_HXLNB", CommandType.StoredProcedure, para);
                if (tableResult != null && tableResult.Rows.Count > 0)
                {
                    var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else
                {
                    return null;
                }
            }
            return null;
        }

        [CompressCode]
        public ActionResult List_NVKN_HXLNB(long requestId, string chucDanh)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            if (requestId != null && requestId != 0)
            {
                SqlParameter[] para = { new SqlParameter("@RequestId", requestId), new SqlParameter("@ChucDanh", chucDanh), };
                DataTable tableResult = sql.ExecuteCommand("List_NVKN_HXLNB", CommandType.StoredProcedure, para);

                if (tableResult != null && tableResult.Rows.Count > 0)
                {
                    var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else
                {
                    return null;
                }
            }
            return null;
        }
        #endregion

        //▼ ChuongNT3 - 13/03/2019 - claim nvc 

        #region ChuongNT3- Cailm nvc
        //▼ Edit - LuanNT44 - 27/03/2019 -Loại 134- thêm edit popup
        public ActionResult GetNVTruyThuShopGui(long requestId)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            SqlParameter[] para = { new SqlParameter("@RequestId", requestId), new SqlParameter("@User", UserManager.CurrentUser.InsideCode), new SqlParameter("@Type", 1) };
            DataTable tableResult = sql.ExecuteCommand("sp_GetNVTruyThuShop", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        public ActionResult GetNVTruyThuShopNhan(long requestId)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            SqlParameter[] para = { new SqlParameter("@RequestId", requestId), new SqlParameter("@User", UserManager.CurrentUser.InsideCode), new SqlParameter("@Type", 2) };
            DataTable tableResult = sql.ExecuteCommand("sp_GetNVTruyThuShop", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        public ActionResult LoadNVTruyThuShopNhan(long requestId)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            SqlParameter[] para = { new SqlParameter("@RequestId", requestId), new SqlParameter("@RequestDetailId", 0), new SqlParameter("@User", UserManager.CurrentUser.InsideCode), new SqlParameter("@Type", 2) };
            DataTable tableResult = sql.ExecuteCommand("sp_LoadNVTruyThu", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        public ActionResult LoadNVTruyThuShopGui(long requestId, long RequestDetailId)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            SqlParameter[] para = { new SqlParameter("@RequestId", requestId), new SqlParameter("@RequestDetailId", RequestDetailId), new SqlParameter("@User", UserManager.CurrentUser.InsideCode), new SqlParameter("@Type", 1) };
            DataTable tableResult = sql.ExecuteCommand("sp_LoadNVTruyThu", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        public ActionResult InsertNVTruyThuShop(FormCollection form)
        {
            //long requestId, string maNV, string ghiChu, int type

            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            long requestId = form["RequestId"].EParseToLong();
            long RequestDetailId = form["RequestDetailId"].EParseToLong();
            bool isSavedSuccessfully = true;
            List<string> myCollection = new List<string>();
            try
            {
                DataTable dt = new DataTable();
                //Add columns  
                dt.Columns.Add(new DataColumn("RequestId", typeof(long)));
                dt.Columns.Add(new DataColumn("MaNV", typeof(string)));
                dt.Columns.Add(new DataColumn("GhiChu", typeof(string)));
                dt.Columns.Add(new DataColumn("UserName", typeof(string)));
                dt.Columns.Add(new DataColumn("Type", typeof(int)));
                foreach (var item in objects)
                {
                    //Add rows  
                    dt.Rows.Add(requestId, item.Employees, item.GhiChu, UserManager.CurrentUser.InsideCode, item.type);
                }
                SqlParameter[] para = { new SqlParameter("@tableproducts", dt), new SqlParameter("@RequestDetailId", RequestDetailId) };
                sql.ExecuteCommand("sp_InsertNVTruyThu_134", CommandType.StoredProcedure, para);


            }
            catch (Exception ex)
            {
                isSavedSuccessfully = false;
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} - Id:{1}", ex.ToString(), requestId));
            }
            if (isSavedSuccessfully)
            {
                string json = JsonConvert.SerializeObject(myCollection);
                return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                string json = JsonConvert.SerializeObject(myCollection);
                return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
            }

            //return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);

        }
        //▲	Edit - LuanNT44 - 27/03/2019 -Loại 134- thêm edit popup
        #endregion
        //▲ ChuongNT3 - 13/03/2019 - claim nvc

        #region ===EmptyPageForMobile===
        public ActionResult EmptyPageForMobile()
        {
            return View();
        }
        #endregion

        #region ===CallLog_ThacMacLuong===
        /// <summary>GET: /Requests/CallLog_ThacMacLuong_ThoiGianTao_Check</summary>
        public ActionResult CallLog_ThacMacLuong_ThoiGianTao_Check(int Nam, int Thang, int Is_SM)
        {
            JsonResult l_JsonResult = null;
            SqlParameter[] l_SqlParameter_Arr = new SqlParameter[] {
                    new SqlParameter("@Nam", (Nam > 0 ? Nam : 0)),
                    new SqlParameter("@Thang", (Thang > 0 ? Thang : 0)),
                    new SqlParameter("@Is_SM", (Is_SM > 0 ? 1 : 0))
                };
            DataTable l_DataTable = sql.ExecuteCommand("sp_CallLog_ThacMacLuong_ThoiGianTao_Check", CommandType.StoredProcedure, l_SqlParameter_Arr);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
            }
            return l_JsonResult;
        }
        #endregion

        #region GetCompetitorByWarehouse
        public ActionResult GetListCompetitorOfWarehouse(string warehouse, int? type)
        {
            SqlParameter[] para = { new SqlParameter("@ShopCode", warehouse),
                                    new SqlParameter("@Type",type)}; // 1--Đại bàng , 2--Địa phương
            DataTable tableResult = sql.ExecuteCommand("sp_GetListCompetitorOfWarehouse", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        #endregion

        #region ===ActionAlarm===
        /// <summary>GET: /Requests/Requests__Details__ActionAlarm</summary>
        public ActionResult Requests__Details__ActionAlarm(int ReqId)
        {
            JsonResult l_JsonResult = null;
            SqlParameter[] l_SqlParameter_Arr = new SqlParameter[]{
                new SqlParameter("@ReqId", ReqId),
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp__WEB__Requests__Details__ActionAlarm", CommandType.StoredProcedure, l_SqlParameter_Arr);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
            }
            return l_JsonResult;
        }
        #endregion

        #region ===Thêm mới/Chuyển Chức danh===
        //▼	Edit - VietMXH - 17/07/2019 - Thêm mới/Chuyển Chức danh==================================================
        /// <summary>GET: /Requests/ThemChuyenChucDanh__CheckTrungChucDanhCu</summary>
        public ActionResult ThemChuyenChucDanh__CheckTrungChucDanhCu(string p_EmpCode, string p_JobTitleCode)
        {
            JsonResult l_JsonResult = null;
            SqlParameter[] l_SqlParameter_Arr = new SqlParameter[]{
                new SqlParameter("@EmpCode", p_EmpCode),
                new SqlParameter("@JobTitleCode", p_JobTitleCode)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp__CallLog__ThemChuyenChucDanh__CheckTrungChucDanhCu", CommandType.StoredProcedure, l_SqlParameter_Arr);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
            }
            return l_JsonResult;
        }
        //▲	Edit - VietMXH - 17/07/2019 - Thêm mới/Chuyển Chức danh==================================================
        #endregion

        #region ===DangKyLichDiOutsideFFs===
        //▼ LuanNT44-23/10/2019-215
        public DataTable GetAllShop215(long IdRequest)
        {
            SqlParameter[] param = { new SqlParameter("@RequestID", IdRequest) };
            DataTable table = sql.ExecuteCommand("sp_GetShopAll215", CommandType.StoredProcedure, param);
            return table;
        }
        //▲ LuanNT44-23/10/2019-215
        public ActionResult WEB__DangKyLichDiOutsideFFs_NVShop__Load(string Id, string IdDetail)
        {
            SqlParameter[] para = { new SqlParameter("@ReqId", Id),
            new SqlParameter("@ReqDetId", IdDetail)};
            DataTable tableResult = sql.ExecuteCommand("sp__WEB__DangKyLichDiOutsideFFs_NVShop__Load", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        public ActionResult WEB__DangKyLichDiOutsideFFs_NVShop__InActive(string IdDangKy)
        {
            SqlParameter[] para = { new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
            new SqlParameter("@IDDangKy_NVShop", IdDangKy)};
            DataTable tableResult = sql.ExecuteCommand("sp__WEB__DangKyLichDiOutsideFFs_NVShop__InActive", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        public ActionResult GetEmpByShop(string ShopCode)
        {
            SqlParameter[] para = { new SqlParameter("@ShopCode", ShopCode) };
            DataTable tableResult = sql.ExecuteCommand("sp_GetEmpByShop", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        [HttpPost]
        [ValidateInput(true)]
        public ActionResult WEB__DangKyLichDiOutsideFFs_NVShop__Save(string ShopCode, string[] ListEmp, string IDRequest, string IdDetail)
        {
            DataTable tb = new DataTable();
            tb.Columns.Add("p_Row", typeof(int));
            tb.Columns.Add("MaShop", typeof(string));
            tb.Columns.Add("MaNV", typeof(string));

            foreach (var Emp in ListEmp)
            {
                tb.Rows.Add(1, ShopCode, Emp);
            }

            SqlParameter[] para = { new SqlParameter("@TableType", tb) ,
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@ReqId", IDRequest),
                                    new SqlParameter("@ReqDetId", IdDetail)};
            DataTable tableResult = sql.ExecuteCommand("sp__WEB__DangKyLichDiOutsideFFs_NVShop__Save", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        public class DangKyLichDiOutsideFFs_Json
        {
            public int p_Row { get; set; }
            public int ReqDetId { get; set; }
            public string NgayGioBatDau { get; set; }
            public string NgayGioKetThuc { get; set; }
        }
        [HttpPost]
        [ValidateInput(true)]
        public ActionResult WEB__DangKyLichDiOutsideFFs__Update(string ID, List<DangKyLichDiOutsideFFs_Json> Ob)
        {
            DataTable tb = new DataTable();
            tb.Columns.Add("p_Row", typeof(int));
            tb.Columns.Add("ReqDetId", typeof(int));
            tb.Columns.Add("NgayGioBatDau", typeof(string));
            tb.Columns.Add("NgayGioKetThuc", typeof(string));
            foreach (var item in Ob)
            {
                tb.Rows.Add(item.p_Row, item.ReqDetId, item.NgayGioBatDau, item.NgayGioKetThuc);
            }

            SqlParameter[] para = { new SqlParameter("@TableType", tb),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@ReqId", ID)};
            DataTable tableResult = sql.ExecuteCommand("sp__WEB__DangKyLichDiOutsideFFs__Update", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                var jsonResult = Json(tableResult.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }
        #endregion

        #region ===Quỹ===
        public ActionResult Details__Quy__NguyenNhanChenhLech_Get()
        {
            JsonResult jr = null;
            DataTable dt = sql.ExecuteCommand("sp__WEB__Requests__Details__Quy__NguyenNhanChenhLech_Get", CommandType.StoredProcedure, null);
            if (dt != null && dt.Rows.Count > 0)
            {
                jr = Json(dt.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jr.MaxJsonLength = int.MaxValue;
            }
            return jr;
        }
        public ActionResult Details__Quy__HuongXuLyKTHO_Get()
        {
            JsonResult jr = null;
            DataTable dt = sql.ExecuteCommand("sp__WEB__Requests__Details__Quy__HuongXuLyKTHO_Get", CommandType.StoredProcedure, null);
            if (dt != null && dt.Rows.Count > 0)
            {
                jr = Json(dt.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jr.MaxJsonLength = int.MaxValue;
            }
            return jr;
        }
        #endregion ===Quỹ===

        #region ===Xác nhận vi phạm Quỹ===
        public ActionResult Details__XNVPQuy__LayGiaiTrinhQuy(string Quy__ReqId)
        {
            JsonResult jr = null;
            DataTable dt = sql.ExecuteCommand("sp__WEB__Requests__Details__XNVPQuy__LayGiaiTrinhQuy", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@Quy__ReqId", Quy__ReqId)
            });
            if (dt != null && dt.Rows.Count > 0)
            {
                jr = Json(dt.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jr.MaxJsonLength = int.MaxValue;
            }
            return jr;
        }
        public ActionResult Details__XNVPQuy__LayNVShop(string MaShopInside)
        {
            JsonResult jr = null;
            DataTable dt = sql.ExecuteCommand("sp__WEB__Requests__Details__XNVPQuy__LayNVShop", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@MaShopInside", MaShopInside)
            });
            if (dt != null && dt.Rows.Count > 0)
            {
                jr = Json(dt.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jr.MaxJsonLength = int.MaxValue;
            }
            return jr;
        }
        public ActionResult Details__XNVPQuy__LayLoaiLoi()
        {
            JsonResult jr = null;
            DataTable dt = sql.ExecuteCommand("sp__WEB__Requests__Details__XNVPQuy__LayLoaiLoi", CommandType.StoredProcedure, null);
            if (dt != null && dt.Rows.Count > 0)
            {
                jr = Json(dt.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jr.MaxJsonLength = int.MaxValue;
            }
            return jr;
        }
        #endregion ===Xác nhận vi phạm Quỹ===

        #region ===Xử lý vi phạm===
        //▼	Edit - VietMXH - 18/06/2020 - OneApp Inside User Info==================================================
        /// <summary>GET: /Requests/ViolationRequest__DetailConversation__Insert</summary>
        public ActionResult ViolationRequest__DetailConversation__Insert(int RequestId, int RequestDetailId, string Content, bool IsLimit = true)
        {
            DataTable l__DataTable = sql.ExecuteCommand("sp__ViolationRequest__DetailConversation__Insert", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestId", RequestId),
                new SqlParameter("@RequestDetailId", RequestDetailId),
                new SqlParameter("@Content", Content),
                new SqlParameter("@Sender", UserManager.CurrentUser.InsideCode),
                new SqlParameter("@IsLimit", IsLimit)
            });
            if (l__DataTable != null && l__DataTable.Rows.Count > 0)
            {
                return Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //▲	Edit - VietMXH - 18/06/2020 - OneApp Inside User Info==================================================
        #endregion ===Xử lý vi phạm===

    }

    #region ===CLASS Kerry===
    #region ---DTO_Kerry_DOInfo---
    public class DTO_Kerry_DOInfo
    {
        #region ---FIELDS---
        public string token_key { get; set; }                               //  Mã token để hệ thống Kerry xác thực (R)
        public string order_number { get; set; }                            //  Số đơn chứng từ vận chuyển FPT (R)
        public string waybill_number { get; set; }                          //  Số vận đơn FRTBill tham chiếu với Kerry (R)
        public string no_packs { get; set; }                                //  Số kiện | Def: 0
        public string package_weight { get; set; }                         //  Khối lượng (KG) | Def: 0
        public string is_wood_pack { get; set; }                            //  Kiện hàng có đóng gỗ hay không (Y/N) | Def: N
        public string cod { get; set; }                                        //  Thu hộ | Def: 0
        public string service_type { get; set; }                            //  Mã dịch vụ | Def: 0201
        public string order_note { get; set; }                              //  Ghi chú đơn hàng | Def: ""
        public string payment_type { get; set; }                            //  Hình thức thanh toán

        //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
        public DTO_Kerry_Address receiver_address { get; set; }             //  Thông tin shop nhận
        //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

        public DTO_Kerry_Address sender_address { get; set; }               //  Thông tin shop gửi
        public List<DTO_Kerry_OrderItem> orderItem { get; set; }                  //  
        #endregion

        #region ---METHODS---
        public DTO_Kerry_DOInfo()
        {
        }

        //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
        public DTO_Kerry_DOInfo(string p_token_key, string p_order_number, string p_waybill_number, string p_no_packs, string p_package_weight,
            string p_is_wood_pack, string p_cod, string p_service_type, string p_order_note, string p_payment_type,
            DTO_Kerry_Address p_receiver_address, DTO_Kerry_Address p_sender_address, List<DTO_Kerry_OrderItem> p_orderItem)
        {
            token_key = p_token_key;
            order_number = p_order_number;
            waybill_number = p_waybill_number;
            no_packs = p_no_packs;
            package_weight = p_package_weight;
            is_wood_pack = p_is_wood_pack;
            cod = p_cod;
            service_type = p_service_type;
            order_note = p_order_note;
            payment_type = p_payment_type;
            receiver_address = p_receiver_address;
            sender_address = p_sender_address;
            orderItem = p_orderItem;
        }
        //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

        #endregion
    }

    public class DTO_Kerry_Address
    {
        #region ---FIELDS---
        public string full_address { get; set; }                            //  Địa chỉ đầy đủ shop(R)
        public string province_area_code { get; set; }                      //  Mã tỉnh shop(R)
        public string district_area_code { get; set; }                      //  Quận huyện shop(R)
        public string ward_area_code { get; set; }                          //  Phường xã | Def: ""
        public string contact_phone { get; set; }                           //  Số điện thoại
        public string contact_name { get; set; }                            //  Người liên hệ
        #endregion

        #region ---METHODS---
        public DTO_Kerry_Address()
        {
        }

        public DTO_Kerry_Address(string p_full_address, string p_province_area_code, string p_district_area_code,
                                 string p_ward_area_code, string p_contact_phone, string p_contact_name)
        {
            full_address = p_full_address;
            province_area_code = p_province_area_code;
            district_area_code = p_district_area_code;
            ward_area_code = p_ward_area_code;
            contact_phone = p_contact_phone;
            contact_name = p_contact_name;
        }
        #endregion
    }

    public class DTO_Kerry_OrderItem
    {
        #region ---FIELDS---
        public string product_name { get; set; }                            //  Tên mặt hàng (R)
        public string package_weight { get; set; }                          //  Khối lượng  | Def: 0
        public string package_dimension { get; set; }                       //  Kích thước | Def: 0x0x0
        public string grand_total { get; set; }                             //  Tiền thu hộ | Def: 0
        public string payment_type { get; set; }                            //  Kiểu thanh toán | Def: COD
        public string pack_number { get; set; }                             //  Mã mặt hàng | Def: 0
        public string is_wood_product { get; set; }                         //  Đóng kiện gổ | Def: N
        #endregion

        #region ---METHODS---
        public DTO_Kerry_OrderItem()
        {
        }

        public DTO_Kerry_OrderItem(string p_product_name, string p_package_weight, string p_package_dimension,
                                   string p_grand_total, string p_payment_type, string p_pack_number, string p_is_wood_product)
        {
            product_name = p_product_name;
            package_weight = p_package_weight;
            package_dimension = p_package_dimension;
            grand_total = p_grand_total;
            payment_type = p_payment_type;
            pack_number = p_pack_number;
            is_wood_product = p_is_wood_product;
        }
        #endregion
    }

    public class DTO_Kerry_Response
    {
        public string status { get; set; }

        //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
        public string message { get; set; }
        //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

        public string order_number { get; set; }
        public string delivery_date { get; set; }
        public string price { get; set; }
        public string wood_pack_cost { get; set; }
        public string remote_delivery_cost { get; set; }

        public DTO_Kerry_Response()
        {
        }

        //▼	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================
        public DTO_Kerry_Response(string p_status, string p_message, string p_order_number, string p_delivery_date, string p_price,
                                  string p_wood_pack_cost, string p_remote_delivery_cost)
        {
            status = p_status;
            message = p_message;
            order_number = p_order_number;
            delivery_date = p_delivery_date;
            price = p_price;
            wood_pack_cost = p_wood_pack_cost;
            remote_delivery_cost = p_remote_delivery_cost;
        }
        //▲	Edit - VietMXH - 20/04/2019 - KerryWebService==================================================

    }

    public class DTO_Kerry_ResponseCancel
    {
        public string status { get; set; }
        public string code { get; set; }
        public string message { get; set; }

        public DTO_Kerry_ResponseCancel()
        {
        }

        public DTO_Kerry_ResponseCancel(string p_status, string p_code, string p_message)
        {
            status = p_status;
            code = p_code;
            message = p_message;
        }
    }
    #endregion
    #endregion

    #region ---Transporters---
    public class Transporters
    {
        public string Code { get; set; }
        public string Name { get; set; }
        public string KeyName { get; set; }
        public string KeyCertify { get; set; }

        private Transporters(string sTransporter)
        {
            switch (sTransporter)
            {
                case "FC":
                    {
                        Code = "FC";
                        Name = "Nhất Tín";
                        KeyName = "123456@FPTSHOP_NT";
                        KeyCertify = "FPTSHOP_INT_NT";
                    }
                    break;
                case "CK":
                    {
                        Code = "CK";
                        Name = "Kerry";
                        KeyName = "FPTSHOP_INT_KERRY";
                        KeyCertify = "Dj1TAiDrvt4ag0tiG3ktYRF7pgL7Fyju34Zc3tUj3fWmFWbtEBlNhqNy7Zrs/Jrz";
                    }
                    break;
                case "CV":
                    {
                        Code = "CV";
                        Name = "Viettel";
                        KeyName = "FPTSHOP_INT_VIETTEL";
                        KeyCertify = "Dj1TAiDrvt4ag0tiG3ktYRF7pgL7Fyju0EJ4D4ckYHVpPkS/WaCQrSTZXpUDxKhD";
                    }
                    break;
            }
        }

        public static Transporters NhatTin { get { return new Transporters("FC"); } }
        public static Transporters Kerry { get { return new Transporters("CK"); } }
        public static Transporters Viettel { get { return new Transporters("CV"); } }
    }
    #endregion

    public class UploadListTruyThu
    {
        public string RequestID { get; set; }
        public string EmployeeList { get; set; }
        public string MoneyList { get; set; }
        public string RequestDetailId { get; set; }
    }
    /*▼ Add - TrungNC3 - 2017.09.27 - Up thực CR - Cấp bóng đèn bảo hành bóng đèn*/
    public class UploadListTruyThu_BHBongDen
    {
        public string RequestID { get; set; }
        public string EmployeeList { get; set; }
        public string MoneyList { get; set; }
        public string MonthList { get; set; }
        public string RequestDetailId { get; set; }
    }
    //▲ Add - TrungNC3 - 2017.09.27 - =======================================

    #region ===CLASS Outside__GuiChungTuFFriend===
    public class Outside__App__GuiChungTuFFriend__SinhBill
    {
        public string Sender { set; get; }
        //
        ////public string ShopPhongBanMoi { set; get; }
        //
        public string MaShopPhongBanGui { set; get; }
        public string TenShopPhongBanGui { set; get; }
        ////public string MaShopPhongBanGuiKerry { set; get; }
        public string DiaChiGui { set; get; }
        public string MaTinhThanhGui { set; get; }
        public string TenTinhThanhGui { set; get; }//▶	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
        public string MaQuanHuyenGui { set; get; }
        public string TenQuanHuyenGui { set; get; }//▶	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
        public string HoTenNguoiGui { set; get; }
        public string SoDienThoaiNguoiGui { set; get; }
        //
        public string MaShopPhongBanNhan { set; get; }
        public string TenShopPhongBanNhan { set; get; }
        ////public string MaShopPhongBanNhanKerry { set; get; }
        public string DiaChiNhan { set; get; }
        public string MaTinhThanhNhan { set; get; }
        public string TenTinhThanhNhan { set; get; }//▶	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
        public string MaQuanHuyenNhan { set; get; }
        public string TenQuanHuyenNhan { set; get; }//▶	Edit - VietMXH - 04/07/2019 - Nhà vận chuyển: Vinacapital Post==================================================
        public string HoTenNguoiNhan { set; get; }
        public string SoDienThoaiNguoiNhan { set; get; }
        //
        public string MaLoaiHangHoa { set; get; }
        public string NoiDungHangHoa { set; get; }
        public int SoLuong { set; get; }
        public string SoKien { set; get; }
        public string TrongLuong { set; get; }
        ////////public string MaNhaVanChuyen { set; get; }
        ////////public string MaDichVuVanChuyen { set; get; }
        public string MaHinhThucThanhToan { set; get; }
        public string GhiChu { set; get; }
        //
        public string Conversation_Message_Create { set; get; }
        //
        public string BankDoc_Mana_Head_ID_Str { set; get; }
    }
    public class Outside__App__GuiChungTuFFriend__SinhBill__Result
    {
        public int Result { set; get; }
        public string Msg { set; get; }
        public long BillReq { set; get; }
        public int Carrier_Result { set; get; }
        public string Carrier_Msg { set; get; }
        public string BankDoc_Mana_Head_ID_Str { set; get; }
        public string BillNum { set; get; }
        public string Carrier { set; get; }
        public string ShopPhone { set; get; }
        public string BillWeight { set; get; }
    }
    #endregion

    #region ===CLASS mCallLog__Bill===
    public class mCallLog__Bill__Create__Input
    {
        public string Title { set; get; }
        public string Cc { set; get; }
        //
        public string Sender { set; get; }
        //
        ////public string ShopPhongBanMoi { set; get; }
        //
        public string MaShopPhongBanGui { set; get; }
        public string TenShopPhongBanGui { set; get; }
        public string MaShopPhongBanGuiKerry { set; get; }
        public string DiaChiGui { set; get; }
        public string MaTinhThanhGui { set; get; }
        public string TenTinhThanhGui { set; get; }
        public string MaQuanHuyenGui { set; get; }
        public string TenQuanHuyenGui { set; get; }
        public string HoTenNguoiGui { set; get; }
        public string SoDienThoaiNguoiGui { set; get; }
        //
        public string MaShopPhongBanNhan { set; get; }
        public string TenShopPhongBanNhan { set; get; }
        public string MaShopPhongBanNhanKerry { set; get; }
        public string DiaChiNhan { set; get; }
        public string MaTinhThanhNhan { set; get; }
        public string TenTinhThanhNhan { set; get; }
        public string MaQuanHuyenNhan { set; get; }
        public string TenQuanHuyenNhan { set; get; }
        public string HoTenNguoiNhan { set; get; }
        public string SoDienThoaiNguoiNhan { set; get; }
        //
        public string MaLoaiHangHoa { set; get; }
        public string NoiDungHangHoa { set; get; }
        public int SoLuong { set; get; }
        public string SoKien { set; get; }
        public string TrongLuong { set; get; }
        public string MaNhaVanChuyen { set; get; }
        ////public string MaDichVuVanChuyen { set; get; }
        public string TenDichVuVanChuyen { set; get; }
        public string MaHinhThucThanhToan { set; get; }
        public string GhiChu { set; get; }
        public string CuocPhiMin { set; get; }
        public int Is_NVCToiUu { set; get; }
    }
    public class mCallLog__Bill__Create__Result
    {
        public int Result { set; get; }
        public string Msg { set; get; }
        public long BillReq { set; get; }
        public int Carrier_Result { set; get; }
        public string Carrier_Msg { set; get; }
        public string BillNum { set; get; }
    }
    #endregion

    #region ===CLASS POS__Bill===
    public class POS__Bill__Create__Input
    {
        public string Title { set; get; }
        public string Cc { set; get; }
        //
        public string Sender { set; get; }
        //
        ////public string ShopPhongBanMoi { set; get; }
        //
        public string MaShopPhongBanGui { set; get; }
        public string TenShopPhongBanGui { set; get; }
        public string MaShopPhongBanGuiKerry { set; get; }
        public string DiaChiGui { set; get; }
        public string MaTinhThanhGui { set; get; }
        public string TenTinhThanhGui { set; get; }
        public string MaQuanHuyenGui { set; get; }
        public string TenQuanHuyenGui { set; get; }
        public string HoTenNguoiGui { set; get; }
        public string SoDienThoaiNguoiGui { set; get; }
        //
        public string MaShopPhongBanNhan { set; get; }
        public string TenShopPhongBanNhan { set; get; }
        public string MaShopPhongBanNhanKerry { set; get; }
        public string DiaChiNhan { set; get; }
        public string MaTinhThanhNhan { set; get; }
        public string TenTinhThanhNhan { set; get; }
        public string MaQuanHuyenNhan { set; get; }
        public string TenQuanHuyenNhan { set; get; }
        public string HoTenNguoiNhan { set; get; }
        public string SoDienThoaiNguoiNhan { set; get; }
        //
        public string MaLoaiHangHoa { set; get; }
        public string NoiDungHangHoa { set; get; }
        public int SoLuong { set; get; }
        public string SoKien { set; get; }
        public string TrongLuong { set; get; }
        public string MaNhaVanChuyen { set; get; }
        public string MaDichVuVanChuyen { set; get; }
        public string MaHinhThucThanhToan { set; get; }
        public string GhiChu { set; get; }
        public string CuocPhiMin { set; get; }
    }
    public class POS__Bill__Create__Result
    {
        public int Result { set; get; }
        public string Msg { set; get; }
        public long BillReq { set; get; }
        public int Carrier_Result { set; get; }
        public string Carrier_Msg { set; get; }
    }
    #endregion

    #region ===CLASS KiemKeKho__CheckDetailId===
    public class KiemKeKho__CheckDetailId
    {
        public int ReqDetId { set; get; }
    }
    #endregion

}