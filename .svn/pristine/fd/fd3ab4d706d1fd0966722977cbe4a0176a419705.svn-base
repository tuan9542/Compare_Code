using FRT.LuceneEng;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.Text;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Xml;
using WebCallLog.Controllers;
using WebCallLog.DAL;
using WebCallLog.Helpers;
using WebCallLog.Hubs;

namespace WebCallLog.Models
{
    public class RequestsController : Controller
    {
        CallLogDbContext db = new CallLogDbContext();
        SqlDBHelper sql = new SqlDBHelper();
        ItemDAL itemDal = new ItemDAL();
        string _INFOBIP_USER_FRTBAOHANH = "F-Friend";  // ĐANG SỬ DỤNG
        string _INDOBIP_PASS_FRTBAOHANH = "Friend_FRT@2016";
        string uri = "http://api.infobip.com/api/v3/sendsms/xml";

        #region  Create
        public ActionResult Create()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (UserManager.CheckPermisionMenu(Request.RawUrl) != true)
            {
                return RedirectToAction("Index", "Home");
            }
            string empDetail = string.Empty;
            DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
            if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
            {
                empDetail += " - " + tableEmpDetail.Rows[0]["Region"];
                empDetail += " - " + tableEmpDetail.Rows[0]["PlaceToWork"];
                ViewBag.Shop = empDetail;
            }
            ViewBag.TimeOut = Session.Timeout;
            return View(new Request());
        }
        [HttpPost, ValidateAntiForgeryToken, ValidateInput(false)]
        public ActionResult Create(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    DateTime dateFrom = DateTime.Parse(form["dateFrom"].ToString());
                    DateTime dateTo = DateTime.Parse(form["dateTo"].ToString());
                    var timeSend = TimeSpan.Parse(form["timeSend"].ToString());
                    var schedule = form["schedule"];
                    var scheduleTypeData = form["scheduleTypeData"];

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    var strdetailsLimited = Convert.ToString(form["DetailsLimited"]);
                    var detailsLimited = JsonConvert.DeserializeObject<dynamic>(strdetailsLimited);

                    int countDetail = 0;
                    #endregion

                    #region Verify
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                    }
                    if (countDetail == 0)
                    {
                        TempData["Message"] = "Yêu cầu không có thông tin chi tiết!<br/>Yêu cầu đã bị hủy!";
                        return RedirectToAction("Create", "Requests");
                    }
                    #endregion

                    ShopDAL shopDal = new ShopDAL();
                    var shopUserSent = shopDal.Get(UserManager.CurrentUser.WarehouseCode);
                    EmployeeDAL emlDal = new EmployeeDAL();

                    string[] stringCc = new string[] { };
                    if (cc != null && cc != "")
                        stringCc = cc.Split(',');

                    if (sender != null && sender != "")
                    {
                        request.Sender = sender;
                        var empSender = emlDal.Get(request.Sender);
                        if (empSender != null)
                            shopUserSent = shopDal.Get(empSender.WarehouseCode);
                    }
                    else
                        request.Sender = UserManager.CurrentUser.InsideCode;

                    request.StepNo = 1;
                    request.Title = Convert.ToString(form["TitleRequest"]);
                    request.StepStatus = Key.StatusRequest.Waitting;
                    request.TimeCreate = DateTime.Now;
                    request.TimeAppear = DateTime.Now;
                    request.isHighlight = false;
                    request.isParent = false;
                    request.Status = Key.Status.Available;
                    request.CreateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    if (shopUserSent != null)
                    {
                        request.FromShop = shopUserSent.WarehouseCode;
                    }
                    else
                        request.FromShop = UserManager.CurrentUser.WarehouseCode;
                    request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;

                    switch (request.TypeId)
                    {
                        case 149:
                            #region Tạo cl F.F Gạch nợ
                            //▼ Edit - TrongNM - 07/06/2018 - F.F Gach No 149 - Savedetail
                            db.Requests.Add(request);
                            db.SaveChanges();
                            requestDics.Add("single", request);
                            foreach (var item in details)
                            {
                                RequestDetail RD = new RequestDetail();
                                RD.RequestId = request.Id;
                                RD.Property1 = item.TenNganHang;
                                RD.Quantity1 = item.TenChiNhanh;
                                RD.Property2 = item.NoiDung149;
                                RD.Status = 1;
                                db.RequestDetails.Add(RD);
                            }
                            db.SaveChanges();
                            //▲ Edit - TrongNM - 07/06/2018 - F.F Gach No 149 - Savedetail
                            #endregion
                            break;
                        case 156:
                            #region Tạo cl chi phí F.F
                            //▼ Edit - TrongNM - 18/03/2019 - Chi phí đối tác F.Friends - Loai 156
                            db.Requests.Add(request);
                            db.SaveChanges();
                            requestDics.Add("single", request);
                            foreach (var item in details)
                            {
                                RequestDetail RD = new RequestDetail();
                                RD.RequestId = request.Id;
                                RD.Property1 = item.LoaiChiPhi;
                                RD.Numeric1 = item.SoTien;
                                RD.Property2 = item.KyThanhToan;
                                RD.Property3 = item.DienGiai;
                                RD.Property4 = item.GhiChu;
                                RD.Status = 1;
                                db.RequestDetails.Add(RD);
                                //▼ Edit - TrongNM - 22/03/2019 - Chi phí đối tác F.Friends - Loai 156
                                #region Phan Loại để lưu hình
                                if (request.Id != 0)
                                {
                                    #region get string name img
                                    string fNames2 = Convert.ToString(item.ListNameFileFileSuCo);
                                    #endregion

                                    #region convert to array
                                    string[] words2 = null;
                                    if (fNames2 != null && fNames2 != "")
                                    {
                                        words2 = fNames2.Split(',');
                                    }
                                    #endregion
                                    #region ListNameFileFileSuCo
                                    if (words2 != null)
                                    {
                                        foreach (string word in words2)
                                        {
                                            if (word != "")
                                            {
                                                FileAttach fileAttach = new FileAttach();
                                                fileAttach.Uri = Keyword.GetFolderFileAttach() + word;
                                                fileAttach.StepNo = request.StepNo;
                                                fileAttach.RequestId = request.Id;
                                                fileAttach.CreateBy = UserManager.CurrentUser.InsideCode;
                                                fileAttach.TimeCreate = DateTime.Now;
                                                fileAttach.Status = Key.Status.Available;
                                                fileAttach.Domain = item.colFileSuCo;
                                                db.FileAttachs.Add(fileAttach);

                                                db.SaveChanges();
                                            }
                                        }
                                    }
                                    #endregion
                                }
                                #endregion
                            }
                            db.SaveChanges();
                            //▲ Edit - TrongNM - 22/03/2019 - Chi phí đối tác F.Friends - Loai 156
                            #endregion
                            break;
                        default:
                            #region Automatic
                            TempData["Message"] = "Loại CallLog chưa được cấu hình!";
                            return RedirectToAction("Index", "Home");
                            #endregion
                            break;
                    }

                    #region Nội dung yêu cầu của người tạo
                    if (message.Length != 0)
                    {
                        foreach (var item in requestDics)
                        {
                            var converstation = new Conversation();
                            converstation.RequestId = item.Value.Id;
                            converstation.Message = message;
                            converstation.Sender = UserManager.CurrentUser.InsideCode;
                            converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                            converstation.Status = Key.Status.Available;
                            converstation.StepNo = 0;
                            converstation.TimeCreate = DateTime.Now;
                            converstation.Type = Key.Conversation.Create;
                            db.Conversations.Add(converstation);
                        }
                    }
                    #endregion

                    #region Đặt lịch
                    if (scheduleTypeData != null)
                    {
                        foreach (var item in requestDics)
                        {
                            RequestAlarm requestAlarm = new RequestAlarm();
                            requestAlarm.RequestId = item.Value.Id;
                            requestAlarm.Time = timeSend;
                            if (schedule == null)
                                requestAlarm.DayOfMonth = scheduleTypeData.ToString();
                            else
                                requestAlarm.DayOfWeek = scheduleTypeData.ToString();
                            requestAlarm.TimeStart = dateFrom;
                            requestAlarm.TimeEnd = dateTo;
                            requestAlarm.TimeCreate = DateTime.Now;
                            requestAlarm.Status = Key.Status.Available;
                            db.RequestAlarms.Add(requestAlarm);
                        }
                    }
                    #endregion

                    #region Gán người xử lý và gọi Notification
                    string ListAssigner = string.Empty;
                    foreach (var item in requestDics)
                    {
                        SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", item.Value.Id) };
                        DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, param);
                        if (table != null && table.Rows.Count > 0)
                        {
                            RequestHub requestHub = new RequestHub();
                            requestHub.id = item.Value.Id;
                            requestHub.title = item.Value.Title;
                            requestHub.description = form["Description"].ToString();
                            requestHub.date = item.Value.TimeCreate.ToShortDateString() + " " + item.Value.TimeCreate.ToLongTimeString();
                            requestHub.assiner = "Chờ xử lý<br/>" + table.Rows[0][1].ToString() + "-" + table.Rows[0][3].ToString();
                            NotificationManager nf = new NotificationManager();
                            List<string> assigners = new List<string>();
                            for (int i = 0; i < table.Rows.Count; i++)
                            {
                                ListAssigner += table.Rows[i]["Assigner"] + "-" + table.Rows[i]["EmployeeName"] + "<br/> ";
                                assigners.Add(table.Rows[i]["EmailShort"].ToString());
                            }
                            nf.Send(assigners, "Bạn có yêu cầu mới : " + item.Value.Id);
                            nf.RequestInsert(assigners, requestHub);
                        }
                    }
                    #endregion

                    #region Cc
                    foreach (var requestItem in requestDics)
                    {
                        foreach (var item in stringCc)
                        {
                            var AssignerCc = new Assigner();
                            AssignerCc.RequestId = requestItem.Value.Id;
                            AssignerCc.EmployeeCode = item.ToString();
                            AssignerCc.StepNo = 1;
                            AssignerCc.Type = Key.TypeAssigner.Cc;
                            AssignerCc.TimeCreate = DateTime.Now;
                            AssignerCc.Status = Key.StatusRequest.Waitting;
                            db.Assigners.Add(AssignerCc);
                        }
                    }
                    #endregion

                    #region Lưu ảnh
                    string fName = string.Empty;
                    try
                    {
                        for (int i = 0; i < Request.Files.Count; i++)
                        {
                            HttpPostedFileBase file = Request.Files[i];
                            //Save file content goes here
                            fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                            ////fName = "ReqCre_" + UserManager.CurrentUser.InsideCode + "_" + UserManager.CurrentUser.LoginDateTime.ToString("yyyyMMddHHmmss") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + Path.GetExtension(file.FileName);
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                foreach (var requestItem in requestDics)
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                    fileAttach.StepNo = requestItem.Value.StepNo;
                                    fileAttach.RequestId = requestItem.Value.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    db.FileAttachs.Add(fileAttach);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                    }
                    #endregion

                    db.SaveChanges();

                    string strReturn = string.Empty;

                    #region Trả về
                    strReturn = "Tạo Request " + String.Join(",", requestDics.Values.Select(x => x.Id).ToList()) + " thành công! <br/>";
                    if (ListAssigner != null && ListAssigner != "" && ListAssigner != string.Empty)
                        strReturn += "Người xử lý là : <br/>" + ListAssigner;
                    else
                        strReturn += "Không gán đươc người xử lý! <br/>";
                    #endregion

                    // gửi email :
                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create, UserManager.CurrentUser.InsideCode);
                    TempData["Message"] = strReturn;
                    return RedirectToAction("Index", "Home");
                }
                catch (Exception ex)
                {
                    db = new CallLogDbContext();
                    foreach (var itemRequest in requestDics)
                    {
                        var requestCancel = db.Requests.FirstOrDefault(x => x.Id == itemRequest.Value.Id);
                        if (requestCancel != null)
                        {
                            requestCancel.Remark = "Create request fail details";
                            requestCancel.Status = Key.StatusRequest.Cancel;
                        }
                    }
                    db.SaveChanges();
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    return View();
                }
            }
            return View();
        }
        #endregion

        #region  Details
        public ActionResult Details(long? Id)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            if (Id == null)
            {
                TempData["Message"] = "Request không tồn tại!";
                return RedirectToAction("Index", "Home");
            }

            var request = db.Requests.FirstOrDefault(x => x.Id == Id);
            var request_ARCH = db.Requests_ARCH.FirstOrDefault(x => x.Id == Id);
            if (request == null && request_ARCH != null)
            {
                request = new Models.Request();
                request.Id = request_ARCH.Id;
                request.Sender = request_ARCH.Sender;
                request.Assigner = request_ARCH.Assigner;
                request.Title = request_ARCH.Title;
                request.GroupId = request_ARCH.GroupId;
                request.TypeId = request_ARCH.TypeId;
                request.StepNo = request_ARCH.StepNo;
                request.StepStatus = request_ARCH.StepStatus;
                request.TimeCreate = request_ARCH.TimeCreate;
                request.TimeAppear = request_ARCH.TimeAppear;
                request.TimeFinish = request_ARCH.TimeFinish;
                request.TimeClose = request_ARCH.TimeClose;
                request.TimeFutureFinish = request_ARCH.TimeFutureFinish;
                request.TimeReceipt = request_ARCH.TimeReceipt;
                request.TimeUat = request_ARCH.TimeUat;
                request.TimeGolive = request_ARCH.TimeGolive;
                request.ToShop = request_ARCH.ToShop;
                request.ToOffice = request_ARCH.ToOffice;
                request.isHighlight = request_ARCH.isHighlight;
                request.isParent = request_ARCH.isParent;
                request.RequestIdRefer = request_ARCH.RequestIdRefer;
                request.TotalRequestSplit = request_ARCH.TotalRequestSplit;
                request.TotalRequestComplete = request_ARCH.TotalRequestComplete;
                request.Remark = request_ARCH.Remark;
                request.Status = request_ARCH.Status;
                request.CreateBy = request_ARCH.CreateBy;
                request.FromShop = request_ARCH.FromShop;
                request.FromOffice = request_ARCH.FromOffice;
                request.StillShowing = request_ARCH.StillShowing;
                request.Repeat = request_ARCH.Repeat;
                request.ErrorCode = request_ARCH.ErrorCode;
                request.ReferenceCode = request_ARCH.ReferenceCode;
                request.TimeLastUpdate = request_ARCH.TimeLastUpdate;
                request.UpdateBy = request_ARCH.UpdateBy;
                request.SumtimeComplete = request_ARCH.SumtimeComplete;
                request.ReviewComplete = request_ARCH.ReviewComplete;
                request.LastAdminUpdate = request_ARCH.LastAdminUpdate;
                request.TimeLastAdminUpdate = request_ARCH.TimeLastAdminUpdate;
                request.TimeGoliveExpected = request_ARCH.TimeGoliveExpected;
            }
            EmployeeDAL empJobTitle = new EmployeeDAL();
            ViewBag.EmpJobTitleFlag = empJobTitle.GetEmpOfJobtitle(UserManager.CurrentUser.InsideCode);

            //▼	Edit - VietMXH - 13/12/2017 - Fix link ảnh==================================================
            ////ViewBag.ImgFTPUrl = System.Configuration.ConfigurationManager.AppSettings["ImgFTPUrl"].ToString();
            //▲	Edit - VietMXH - 13/12/2017 - Fix link ảnh==================================================

            if (request != null)
            {
                try
                {
                    //Check book                    
                    if (request.TypeId == 121 || request.TypeId == 135)
                    {
                        DataTable checkUserAssigner = sql.ExecuteCommand("SetQLNguoiXuLyCallLogPending", CommandType.StoredProcedure, new SqlParameter[]
                            {

                                new SqlParameter("@IDCallLog",request.Id),
                                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode)
                            });
                        if (checkUserAssigner != null && checkUserAssigner.Rows[0][0].ToString() == "1")
                        {
                            TempData["Message"] = String.Format("Bạn đã là người xử lý yêu cầu này");
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                        //return RedirectToAction("Index", "Home");
                    }

                    var permissons = GetPermissions(request.Id);
                    if (request.TypeId == 48 && !permissons.Contains(Permission.Assigner))
                    {
                        TempData["Message"] = "Rất tiếc bạn không phải người xử lý CallLog này";
                        return RedirectToAction("Index", "Home");
                    }
                    //if (permissons.Contains(Permission.Assigner) && (request.TimeGolive == null) && request.Status == Key.StatusRequest.Waitting)
                    //{
                    //    request.TimeGolive = DateTime.Now;
                    //    request.Status = Key.StatusRequest.Processing;
                    //    db.SaveChanges();
                    //}
                    #region Process
                    ViewBag.TimeOut = Session.Timeout;
                    JsonConvert.DefaultSettings = (() =>
                    {
                        var settings = new JsonSerializerSettings();
                        settings.Converters.Add(new StringEnumConverter { CamelCaseText = true });
                        return settings;
                    });

                    var images = (from f in db.FileAttachs
                                  where f.RequestId == request.Id && f.Status == Key.Status.Available && f.RequestDetailId == null
                                  select new
                                  {
                                      Id = f.Id,
                                      Uri = (f.Domain != null && f.Domain.Length > 0) ? f.Domain + f.Uri : f.Uri,
                                      ApproveStatus = f.ApproveStatus
                                  }).ToList().Select(x => new FileAttach { Id = x.Id, Uri = x.Uri, ApproveStatus = x.ApproveStatus });

                    if (images.Count() == 0)
                    {
                        var imagesARCH = (from f in db.FileAttachs_ARCH
                                          where f.RequestId == request.Id && f.Status == Key.Status.Available && f.RequestDetailId == null
                                          select new
                                          {
                                              Id = f.Id,
                                              Uri = (f.Domain != null && f.Domain.Length > 0) ? f.Domain + f.Uri : f.Uri,
                                              ApproveStatus = f.ApproveStatus
                                          }).ToList().Select(x => new FileAttachs_ARCH { Id = x.Id, Uri = x.Uri, ApproveStatus = x.ApproveStatus });
                        ViewBag.fa = imagesARCH;
                        ViewBag.Count = imagesARCH != null ? imagesARCH.Count() : 0;
                    }
                    else
                    {
                        ViewBag.fa = images;
                        ViewBag.Count = images != null ? images.Count() : 0;
                    }

                    EmployeeDAL empDAL = new EmployeeDAL();
                    var emp = empDAL.Get(request.Sender);
                    if (request.Sender == "-1")
                    {
                        emp = new F03_Employees();
                        emp.EmployeeName = "Hệ thống";
                    }
                    if (emp != null)
                    {
                        string userAssignerCode = string.Empty;
                        if (request.Assigner != null && request.Assigner.Length > 0)
                            userAssignerCode = request.Assigner;
                        else
                        {
                            var userAssign = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                               && x.Type == Key.TypeAssigner.To
                               && x.Status == Key.Status.Available && x.StepNo == request.StepNo);
                            if (userAssign != null)
                                userAssignerCode = userAssign.EmployeeCode;
                        }
                        //'▼(#001)Add===================================    
                        if (permissons.Contains(Permission.Assigner) && request.StepStatus == Key.StatusRequest.Waitting)
                        {
                            ViewBag.AssinerName = UserManager.CurrentUser.InsideCode + "--" + UserManager.CurrentUser.EmployeeName;
                        }
                        else
                        {
                            var assigner = empDAL.Get(userAssignerCode);
                            if (assigner != null)
                                ViewBag.AssinerName = assigner.EmployeeCode + "--" + assigner.EmployeeName;
                            //▼ Add - TuanNA89 - 12/02/2019 - fix hiển thị lại tên hệ thống
                            else if (request.TypeId == 155 && userAssignerCode == null)
                            {
                                ViewBag.AssinerName = "Hệ thống HC";
                            }
                            //▲ Add - TuanNA89 - 12/02/2019 - fix hiển thị lại tên hệ thống
                            else if (userAssignerCode == "-1")
                            {
                                ViewBag.AssinerName = "Hệ thống";
                            }
                            else if (userAssignerCode == "-2")
                            {
                                ViewBag.AssinerName = "Hệ thống Ecom";
                            }
                            else
                                ViewBag.AssinerName = "Chưa có người xử lý.";
                        }
                        //'▲(#001)Add===================================
                        EmployeeDAL empJobShopDAL = new EmployeeDAL();
                        var empJobShop = empJobShopDAL.GetByJobAndShop(request.Sender);
                        if (empJobShop != null && empJobShop.Rows.Count > 0)
                        {
                            ViewBag.EmpJobShop = empJobShop.Rows[0][2];
                        }
                        ViewBag.Email = emp.Email;
                        ViewBag.EmployeeName = emp.EmployeeName;
                        ViewBag.Avatar = (emp.AvatarImageLink == null || emp.AvatarImageLink == "") ? "/assets/images/people.png" : "http://inside.fptshop.com.vn/" + emp.AvatarImageLink.Replace("~", "");
                    }
                    else
                    {
                        string userAssignerCode = string.Empty;
                        if (request.Assigner != null && request.Assigner.Length > 0)
                            userAssignerCode = request.Assigner;
                        else
                        {
                            var userAssign = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                               && x.Type == Key.TypeAssigner.To
                               && x.Status == Key.Status.Available && x.StepNo == request.StepNo);
                            if (userAssign != null)
                                userAssignerCode = userAssign.EmployeeCode;
                        }
                        //'▼(#001)Add===================================    
                        if (permissons.Contains(Permission.Assigner) && request.StepStatus == Key.StatusRequest.Waitting)
                        {
                            ViewBag.AssinerName = UserManager.CurrentUser.InsideCode + "--" + UserManager.CurrentUser.EmployeeName;
                        }
                        else
                        {
                            var assigner = empDAL.Get(userAssignerCode);
                            if (assigner != null)
                                ViewBag.AssinerName = assigner.EmployeeCode + "--" + assigner.EmployeeName;
                            else
                                ViewBag.AssinerName = "Chưa có người xử lý..";
                        }

                        EmployeeDAL empJobShopDAL = new EmployeeDAL();
                        var empJobShop = empJobShopDAL.GetByJobAndShop(request.Sender);
                        if (empJobShop != null && empJobShop.Rows.Count > 0)
                        {
                            ViewBag.EmpJobShop = empJobShop.Rows[0][2];
                        }
                        ViewBag.Avatar = "/assets/images/people.png";
                    }

                    ViewBag.Permissions = permissons;
                    ViewBag.Pers = JsonConvert.SerializeObject(permissons);
                    var permissonList = permissons.Select(x => x.ToString()).ToList();

                    dynamic actions;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        actions = (from a in db.DirectionActions
                                   where a.TypeId == request.TypeId && a.StepNo == request.StepNo
                                   && a.Status == Key.Status.Available
                                   && permissonList.Contains(a.Permission)
                                   select new
                                   {
                                       ActionName = a.ActionName,
                                       ActionType = a.ActionType,
                                       ClassName = a.ActionType == "comment" ? "fa-comments" :
                                       a.ActionType == "changeStep" ? "fa-arrow-right" :
                                       a.ActionType == "complete" ? "fa-circle-o-notch" :
                                       a.ActionType == "unBook" ? "fa-unlock" :
                                       a.ActionType == "completeConAssigner" ? "fa-chevron-circle-right" :
                                       a.ActionType == "changeAssigner" ? "fa fa-users" :
                                       a.ActionType == "reply" ? "fa-reply" : ""
                                   }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                    }

                    ViewBag.Actions = actions;
                    DataSet infors = sql.ExecuteCommandDataSet("Request_GetDetail", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id)
                    });
                    ViewBag.Converstation = infors.Tables[0].Rows;
                    ViewBag.rowCreate = infors.Tables[1].Rows;
                    ViewBag.RequestSteps = infors.Tables[2].Rows;
                    ViewBag.Cc = infors.Tables[3].Rows;
                    ViewBag.CurrentUser = UserManager.CurrentUser.InsideCode;

                    var errors = (from m in db.MasterDatas
                                  where m.Group == "Error"
                                  select new SelectListItem
                                  {
                                      Text = m.Name,
                                      Value = m.Code,
                                      Selected = m.Code == request.ErrorCode
                                  }).ToList();
                    ViewBag.Ass = UserManager.CurrentUser.InsideCode; //Add - NgoanHT - 19/04/2018 - Loại: 145 - Thêm Ass
                    //▼ ChuongNT3 - 22/10/2018 - thêm hình up thêm
                    F03_Employees n_employee_jobtilte = empDAL.Get(UserManager.CurrentUser.InsideCode);
                    ViewBag.Job = n_employee_jobtilte.JobTitle; //ChuongNT - 24/10/2018 - thêm job
                    //▲ ChuongNT3 - 22/10/2018 - thêm hình up thêm

                    ViewBag.Errors = errors;
                    return View(request);
                    #endregion
                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController Detail(long?Id)", ex.ToString());
                    TempData["Message"] = "Lỗi Load Request! " + ex.Message;
                    return RedirectToAction("Index", "Home");
                }
            }
            else
            {
                TempData["Message"] = "Request không tồn tại!";
                return RedirectToAction("Index", "Home");
            }
        }

        //▼ Add - TuanNA89 - 09/01/2020 - màn hình detail cho mobile
        public ActionResult DetailFormMobile(long? Id)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);

            if (Id == null)
            {
                TempData["Message"] = "Request không tồn tại!";
                return RedirectToAction("Index", "Home");
            }

            var request = db.Requests.FirstOrDefault(x => x.Id == Id);
            var request_ARCH = db.Requests_ARCH.FirstOrDefault(x => x.Id == Id);
            if (request == null && request_ARCH != null)
            {
                request = new Models.Request();
                request.Id = request_ARCH.Id;
                request.Sender = request_ARCH.Sender;
                request.Assigner = request_ARCH.Assigner;
                request.Title = request_ARCH.Title;
                request.GroupId = request_ARCH.GroupId;
                request.TypeId = request_ARCH.TypeId;
                request.StepNo = request_ARCH.StepNo;
                request.StepStatus = request_ARCH.StepStatus;
                request.TimeCreate = request_ARCH.TimeCreate;
                request.TimeAppear = request_ARCH.TimeAppear;
                request.TimeFinish = request_ARCH.TimeFinish;
                request.TimeClose = request_ARCH.TimeClose;
                request.TimeFutureFinish = request_ARCH.TimeFutureFinish;
                request.TimeReceipt = request_ARCH.TimeReceipt;
                request.TimeUat = request_ARCH.TimeUat;
                request.TimeGolive = request_ARCH.TimeGolive;
                request.ToShop = request_ARCH.ToShop;
                request.ToOffice = request_ARCH.ToOffice;
                request.isHighlight = request_ARCH.isHighlight;
                request.isParent = request_ARCH.isParent;
                request.RequestIdRefer = request_ARCH.RequestIdRefer;
                request.TotalRequestSplit = request_ARCH.TotalRequestSplit;
                request.TotalRequestComplete = request_ARCH.TotalRequestComplete;
                request.Remark = request_ARCH.Remark;
                request.Status = request_ARCH.Status;
                request.CreateBy = request_ARCH.CreateBy;
                request.FromShop = request_ARCH.FromShop;
                request.FromOffice = request_ARCH.FromOffice;
                request.StillShowing = request_ARCH.StillShowing;
                request.Repeat = request_ARCH.Repeat;
                request.ErrorCode = request_ARCH.ErrorCode;
                request.ReferenceCode = request_ARCH.ReferenceCode;
                request.TimeLastUpdate = request_ARCH.TimeLastUpdate;
                request.UpdateBy = request_ARCH.UpdateBy;
                request.SumtimeComplete = request_ARCH.SumtimeComplete;
                request.ReviewComplete = request_ARCH.ReviewComplete;
                request.LastAdminUpdate = request_ARCH.LastAdminUpdate;
                request.TimeLastAdminUpdate = request_ARCH.TimeLastAdminUpdate;
                request.TimeGoliveExpected = request_ARCH.TimeGoliveExpected;
            }
            EmployeeDAL empJobTitle = new EmployeeDAL();
            ViewBag.EmpJobTitleFlag = empJobTitle.GetEmpOfJobtitle(UserManager.CurrentUser.InsideCode);

            if (request != null)
            {
                try
                {
                    var permissons = GetPermissions(request.Id);

                    #region Process
                    ViewBag.TimeOut = Session.Timeout;
                    JsonConvert.DefaultSettings = (() =>
                    {
                        var settings = new JsonSerializerSettings();
                        settings.Converters.Add(new StringEnumConverter { CamelCaseText = true });
                        return settings;
                    });

                    var images = (from f in db.FileAttachs
                                  where f.RequestId == request.Id && f.Status == Key.Status.Available && f.RequestDetailId == null
                                  select new
                                  {
                                      Id = f.Id,
                                      Uri = (f.Domain != null && f.Domain.Length > 0) ? f.Domain + f.Uri : f.Uri,
                                      ApproveStatus = f.ApproveStatus
                                  }).ToList().Select(x => new FileAttach { Id = x.Id, Uri = x.Uri, ApproveStatus = x.ApproveStatus });

                    if (images.Count() == 0)
                    {
                        var imagesARCH = (from f in db.FileAttachs_ARCH
                                          where f.RequestId == request.Id && f.Status == Key.Status.Available && f.RequestDetailId == null
                                          select new
                                          {
                                              Id = f.Id,
                                              Uri = (f.Domain != null && f.Domain.Length > 0) ? f.Domain + f.Uri : f.Uri,
                                              ApproveStatus = f.ApproveStatus
                                          }).ToList().Select(x => new FileAttachs_ARCH { Id = x.Id, Uri = x.Uri, ApproveStatus = x.ApproveStatus });
                        ViewBag.fa = imagesARCH;
                        ViewBag.Count = imagesARCH != null ? imagesARCH.Count() : 0;
                    }
                    else
                    {
                        ViewBag.fa = images;
                        ViewBag.Count = images != null ? images.Count() : 0;
                    }

                    EmployeeDAL empDAL = new EmployeeDAL();
                    var emp = empDAL.Get(request.Sender);
                    if (request.Sender == "-1")
                    {
                        emp = new F03_Employees();
                        emp.EmployeeName = "Hệ thống";
                    }
                    if (emp != null)
                    {
                        string userAssignerCode = string.Empty;
                        if (request.Assigner != null && request.Assigner.Length > 0)
                            userAssignerCode = request.Assigner;
                        else
                        {
                            var userAssign = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                               && x.Type == Key.TypeAssigner.To
                               && x.Status == Key.Status.Available && x.StepNo == request.StepNo);
                            if (userAssign != null)
                                userAssignerCode = userAssign.EmployeeCode;
                        }

                        if (permissons.Contains(Permission.Assigner) && request.StepStatus == Key.StatusRequest.Waitting)
                        {
                            ViewBag.AssinerName = UserManager.CurrentUser.InsideCode + "--" + UserManager.CurrentUser.EmployeeName;
                        }
                        else
                        {
                            var assigner = empDAL.Get(userAssignerCode);
                            if (assigner != null)
                            {
                                ViewBag.AssinerName = assigner.EmployeeCode + "--" + assigner.EmployeeName;
                            }
                            else if (userAssignerCode == "-1")
                            {
                                ViewBag.AssinerName = "Hệ thống";
                            }
                            else if (userAssignerCode == "-2")
                            {
                                ViewBag.AssinerName = "Hệ thống Ecom";
                            }
                            else
                                ViewBag.AssinerName = "Chưa có người xử lý.";
                        }

                        EmployeeDAL empJobShopDAL = new EmployeeDAL();
                        var empJobShop = empJobShopDAL.GetByJobAndShop(request.Sender);
                        if (empJobShop != null && empJobShop.Rows.Count > 0)
                        {
                            ViewBag.EmpJobShop = empJobShop.Rows[0][2];
                        }
                        ViewBag.Email = emp.Email;
                        ViewBag.EmployeeName = emp.EmployeeName;
                        ViewBag.Avatar = (emp.AvatarImageLink == null || emp.AvatarImageLink == "") ? "/assets/images/people.png" : "http://inside.fptshop.com.vn/" + emp.AvatarImageLink.Replace("~", "");
                    }
                    else
                    {
                        string userAssignerCode = string.Empty;
                        if (request.Assigner != null && request.Assigner.Length > 0)
                            userAssignerCode = request.Assigner;
                        else
                        {
                            var userAssign = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                               && x.Type == Key.TypeAssigner.To
                               && x.Status == Key.Status.Available && x.StepNo == request.StepNo);
                            if (userAssign != null)
                                userAssignerCode = userAssign.EmployeeCode;
                        }

                        if (permissons.Contains(Permission.Assigner) && request.StepStatus == Key.StatusRequest.Waitting)
                        {
                            ViewBag.AssinerName = UserManager.CurrentUser.InsideCode + "--" + UserManager.CurrentUser.EmployeeName;
                        }
                        else
                        {
                            var assigner = empDAL.Get(userAssignerCode);
                            if (assigner != null)
                                ViewBag.AssinerName = assigner.EmployeeCode + "--" + assigner.EmployeeName;
                            else
                                ViewBag.AssinerName = "Chưa có người xử lý..";
                        }

                        EmployeeDAL empJobShopDAL = new EmployeeDAL();
                        var empJobShop = empJobShopDAL.GetByJobAndShop(request.Sender);
                        if (empJobShop != null && empJobShop.Rows.Count > 0)
                        {
                            ViewBag.EmpJobShop = empJobShop.Rows[0][2];
                        }
                        ViewBag.Avatar = "/assets/images/people.png";
                    }

                    ViewBag.Permissions = permissons;
                    ViewBag.Pers = JsonConvert.SerializeObject(permissons);
                    var permissonList = permissons.Select(x => x.ToString()).ToList();

                    dynamic actions;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        actions = (from a in db.DirectionActions
                                   where a.TypeId == request.TypeId && a.StepNo == request.StepNo
                                   && a.Status == Key.Status.Available
                                   && permissonList.Contains(a.Permission)
                                   select new
                                   {
                                       ActionName = a.ActionName,
                                       ActionType = a.ActionType,
                                       ClassName = a.ActionType == "comment" ? "fa-comments" :
                                       a.ActionType == "changeStep" ? "fa-arrow-right" :
                                       a.ActionType == "complete" ? "fa-circle-o-notch" :
                                       a.ActionType == "unBook" ? "fa-unlock" :
                                       a.ActionType == "completeConAssigner" ? "fa-chevron-circle-right" :
                                       a.ActionType == "changeAssigner" ? "fa fa-users" :
                                       a.ActionType == "reply" ? "fa-reply" : ""
                                   }).AsEnumerable().Distinct().Select(x => x.EToExpando());
                    }

                    ViewBag.Actions = actions;
                    DataSet infors = sql.ExecuteCommandDataSet("Request_GetDetail", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id)
                    });
                    ViewBag.Converstation = infors.Tables[0].Rows;
                    ViewBag.rowCreate = infors.Tables[1].Rows;
                    ViewBag.RequestSteps = infors.Tables[2].Rows;
                    ViewBag.Cc = infors.Tables[3].Rows;
                    ViewBag.CurrentUser = UserManager.CurrentUser.InsideCode;

                    var errors = (from m in db.MasterDatas
                                  where m.Group == "Error"
                                  select new SelectListItem
                                  {
                                      Text = m.Name,
                                      Value = m.Code,
                                      Selected = m.Code == request.ErrorCode
                                  }).ToList();
                    ViewBag.Ass = UserManager.CurrentUser.InsideCode;

                    F03_Employees n_employee_jobtilte = empDAL.Get(UserManager.CurrentUser.InsideCode);
                    ViewBag.Job = n_employee_jobtilte.JobTitle;

                    ViewBag.Errors = errors;

                    return View(request);
                    #endregion
                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController DetailFormMobile(long?Id)", ex.ToString());
                    TempData["Message"] = "Lỗi Load Request! " + ex.Message;
                    return RedirectToAction("Index", "Home");
                }
            }
            else
            {
                TempData["Message"] = "Request không tồn tại!";
                return RedirectToAction("Index", "Home");
            }
        }
        //▲ Add - TuanNA89 - 09/01/2020 - màn hình detail cho mobile

        public ActionResult InsertOrUpdateConversation(long requestId, string message)
        {
            if (UserManager.CurrentUser != null)
            {
                Conversation cv = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                    && x.Type == Key.Conversation.Trouble
                    && x.Status == Key.Status.Available);
                if (cv == null)
                {
                    Conversation conver = new Conversation
                    {
                        RequestId = requestId,
                        StepNo = 0,
                        Sender = UserManager.CurrentUser.InsideCode,
                        Message = message,
                        CreateBy = UserManager.CurrentUser.InsideCode,
                        Type = Key.Conversation.Trouble,
                        Status = Key.Status.Available,
                        TimeCreate = DateTime.Now
                    };
                    db.Conversations.Add(conver);
                    db.SaveChanges();
                }
                else
                {
                    cv.Message = message;
                    cv.Sender = UserManager.CurrentUser.InsideCode;
                    cv.TimeCreate = DateTime.Now;
                    db.SaveChanges();
                }
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }

        public ActionResult InsertOrUpdateConversationInternal(long requestId, string message)
        {
            if (UserManager.CurrentUser != null)
            {
                Conversation cv = db.Conversations.FirstOrDefault(x => x.RequestId == requestId
                    && x.Type == Key.Conversation.Internal
                    && x.Status == Key.Status.Available);
                if (cv == null)
                {
                    Conversation conver = new Conversation
                    {
                        RequestId = requestId,
                        StepNo = 0,
                        Sender = UserManager.CurrentUser.InsideCode,
                        Message = message,
                        CreateBy = UserManager.CurrentUser.InsideCode,
                        Type = Key.Conversation.Internal,
                        Status = Key.Status.Available,
                        TimeCreate = DateTime.Now
                    };
                    db.Conversations.Add(conver);
                    db.SaveChanges();
                }
                else
                {
                    cv.Message = message;
                    cv.Sender = UserManager.CurrentUser.InsideCode;
                    cv.TimeCreate = DateTime.Now;
                    db.SaveChanges();
                }
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        public ActionResult UpdatePhanLoai_KhieuNai(long requestId, string phanLoai, string phanLoaiCha)
        {
            if (UserManager.CurrentUser != null)
            {
                RequestDetail r = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                    && x.Status == Key.Status.Available);
                r.Property3 = phanLoaiCha;
                r.Property1 = phanLoai;
                db.SaveChanges();

                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        public ActionResult ReplacePhanLoai(long requestId, string phanLoaiChaNew)
        {
            if (UserManager.CurrentUser != null)
            {
                Request r = db.Requests.FirstOrDefault(x => x.Id == requestId);
                RequestDetail rd = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                    && x.Status == Key.Status.Available);
                if (rd.Property3 != "" && rd.Property3 != null)
                {
                    r.Title = r.Title.Replace(rd.Property3, phanLoaiChaNew);
                }
                db.SaveChanges();

                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        public ActionResult UpdateChucDanh_19(long requestId, string listJobTitle)
        {
            if (UserManager.CurrentUser != null)
            {
                RequestDetail rd = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId
                    && x.Status == Key.Status.Available);

                rd.Property7 = listJobTitle;
                db.SaveChanges();

                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetByJobAndShop(string employeeCode)
        {
            try
            {
                SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@EmployeeCode",employeeCode)
                };
                var table = sql.ExecuteCommand("GetByJobShop", CommandType.StoredProcedure, param);
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestsController GetByJobAndShop()", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }

        }

        [HttpGet, ValidateInput(false)]
        public ActionResult EditDetail(int requestId, int typeId, int groupId, string title, string ErrorCode, bool Repeat)
        {
            Request request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                request.TypeId = typeId;
                request.GroupId = groupId;
                request.Title = title;
                request.ErrorCode = ErrorCode;
                request.Repeat = Repeat;
                request.StepStatus = Key.StatusRequest.Waitting;
                db.SaveChanges();
                if (typeId == 4)
                {
                    (from a in db.Assigners
                     where a.RequestId == request.Id
                     && a.StepNo == request.StepNo
                     && a.Type == Key.TypeAssigner.To
                     select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                    db.SaveChanges();
                    DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[] {
                    new SqlParameter("@RequestId",request.Id),
                    new SqlParameter("@StepNo",request.StepNo)});
                    if (table != null && table.Rows.Count > 0)
                        request.Assigner = table.Rows[0]["Assigner"].ToString();
                    else
                        request.Assigner = string.Empty;
                    db.SaveChanges();

                }
                return Json('1', JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        #endregion

        #region ===Trao đổi/Trả lời/Chuyển bước/Hoàn thành/Print===
        [HttpPost, ValidateInput(false)]
        public ActionResult Conversation(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            int requestId = form["RequestId"].EParseToInt();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                string message = Convert.ToString(form["Message"]);
                string imageChecked = Convert.ToString(form["ImageValidate"]);
                var details = Convert.ToString(form["Details"]);
                var objects = JsonConvert.DeserializeObject<dynamic>(details);

                var detailsCc = Convert.ToString(form["DetailsCc"]);
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);

                var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                if (request != null)
                {
                    #region Verify
                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    else if (message.Length == 0)
                    {
                        TempData["Message"] = "Trao đổi phải nhập nội dung";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    #endregion

                    #region Insert Converstation
                    var conversation = new Conversation();
                    conversation.RequestId = request.Id;
                    conversation.Sender = sender;
                    conversation.Message = message;
                    conversation.Status = Key.Status.Available;
                    conversation.TimeCreate = DateTime.Now;
                    conversation.Type = Key.Conversation.Comment;
                    conversation.StepNo = request.StepNo;
                    db.Conversations.Add(conversation);
                    #endregion

                    #region Cập nhật lại trạng thái khi người xử lý là  Assigner hoặc Assigner
                    var permissions = GetPermissions(request.Id);
                    if (permissions.Contains(Permission.Assigner) ||
                        permissions.Contains(Permission.GroupAssigner) ||
                        permissions.Contains(Permission.Admin) ||
                        permissions.Contains(Permission.SupperAdmin))
                    {
                        if (request.Status != Key.StatusRequest.Complete && request.Status != Key.StatusRequest.Reply)
                        {
                            request.Status = Key.StatusRequest.Processing;
                            request.StepStatus = Key.StatusRequest.Processing;
                            request.Assigner = sender;
                            if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                request.TimeLastAdminUpdate = DateTime.Now;
                                request.LastAdminUpdate = sender;
                            }
                            #region Update or Insert RequestStep
                            var step = db.RequestSteps.FirstOrDefault(
                                               x => x.RequestId == request.Id
                                               && x.Status == Key.Status.Available
                                               && x.StepNo == request.StepNo);
                            if (step != null)
                            {
                                step.Assigner = sender;
                            }
                            else
                            {
                                var oldStep = (from s in db.RequestSteps
                                               where s.RequestId == request.Id
                                               && s.StepNo == request.StepNo - 1
                                               && s.Status == Key.Status.Available
                                               select s).FirstOrDefault();
                                step = new RequestStep();
                                step.RequestId = request.Id;
                                step.TimeCreate = DateTime.Now;
                                step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                                step.Assigner = sender;
                                step.StepNo = request.StepNo;
                                step.Status = Key.Status.Available;
                                db.RequestSteps.Add(step);
                            }
                            #endregion
                        }
                    }

                    if ((permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin)) && request.Status == Key.StatusRequest.Reply)
                    {
                        request.StillShowing = true;
                    }

                    if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner)) && request.TypeId == 3 && (request.StepNo == 1 || request.StepNo == 3))
                    {
                        string timeRecipt = form["dateRecive"];
                        string timeUat = form["dateUAT"];
                        string timeGolive = form["dateGolive"];
                        string timeGoliveDK = form["dateGoliveDK"];
                        //string timeFuFi = form["dateFuFi"];

                        if (timeRecipt == "") { request.TimeReceipt = null; }
                        else { request.TimeReceipt = DateTime.Parse(timeRecipt); }

                        if (timeUat == "") { request.TimeUat = null; }
                        else { request.TimeUat = DateTime.Parse(timeUat); }

                        if (timeGolive == "") { request.TimeGolive = null; }
                        else { request.TimeGolive = DateTime.Parse(timeGolive); }

                        if (timeGoliveDK == "") { request.TimeGoliveExpected = null; }
                        else { request.TimeGoliveExpected = DateTime.Parse(timeGoliveDK); }

                        //if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        //else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }

                    }
                    else if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner)) && request.TypeId == 3 && request.StepNo == 2)
                    {
                        string timeFuFi = form["dateFuFi"];
                        if (timeFuFi == "") { request.TimeFutureFinish = null; }
                        else { request.TimeFutureFinish = DateTime.Parse(timeFuFi); }
                    }
                    #endregion

                    #region Insert Cc
                    if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc) || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                    {
                        string strCc = "";
                        foreach (var item in Ccs) { strCc += item.id + ","; }
                        if (strCc.Length > 0)
                        {
                            strCc = strCc.Substring(0, strCc.Length - 1);
                            sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                        }
                        else
                        {
                            (from a in db.Assigners
                             where a.RequestId == request.Id
                             && a.Type == Key.TypeAssigner.Cc
                             select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                        }
                    }
                    #endregion

                    #region Update Item
                    //▼	LuanNT44 - 14/05/2018 - Loại 24 - Sửa chữa CSVC
                    if (request.TypeId == 24)
                    {
                        #region Automatic

                        #endregion
                    }
                    //▲	LuanNT44 - 14/05/2018 - Loại 24 - Sửa chữa CSVC

                    else if (request.TypeId == 121)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity6 = item.Approved;
                                    requestdetail.Property7 = item.SoHopDong;
                                    requestdetail.Property10 = item.LyDo;
                                    requestdetail.Note = item.GhiChu;
                                }
                                //if (item.Approved == 1)
                                //{
                                sql.ExecuteWithoutResult("HangDoi_UpdateTrangThai", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@IDCallLog", request.Id),
                                        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                                    });
                                //}

                            }
                        }
                        #endregion
                    }
                    //▼ ChuongNT3 - 07/12/2018 - claim nvc
                    else if (request.TypeId == 122)
                    {
                        #region claim nvc

                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property16 = item.SoHoaDon;
                                    request.isHighlight = item.isHighLight;
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ ChuongNT3 - 07/12/2018 - claim nvc
                    else if (request.TypeId == 124)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 01/04/2019 - CL cho Scoring==================================================
                        if (request.Status < 4 && objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    if (item.Approved == 1)
                                        requestdetail.Approved = true;
                                    else if (item.Approved == 0)
                                        requestdetail.Approved = false;
                                    else
                                        requestdetail.Approved = null;

                                    requestdetail.Quantity1 = ((item.NguoiLienHe_1__Duyet == 1) ? 1 : 0);
                                    if (item.NguoiLienHe_1__Duyet == 2)
                                    {
                                        requestdetail.Property3 = item.NLH_1_LyDoTuChoi + " - " + item.NguoiLienHe_1__GhiChu + " - " + item.NguoiLienHe_1__File;
                                        requestdetail.Property4 = null;
                                    }
                                    else
                                    {
                                        requestdetail.Property3 = item.NguoiLienHe_1__GhiChu;
                                        requestdetail.Property4 = item.NguoiLienHe_1__File;
                                    }

                                    requestdetail.Quantity2 = ((item.NguoiLienHe_2__Duyet == 1) ? 1 : 0);
                                    if (item.NguoiLienHe_2__Duyet == 2)
                                    {
                                        requestdetail.Property5 = item.NLH_2_LyDoTuChoi + " - " + item.NguoiLienHe_2__GhiChu + " - " + item.NguoiLienHe_2__File;
                                        requestdetail.Property6 = null;
                                    }
                                    else
                                    {
                                        requestdetail.Property5 = item.NguoiLienHe_2__GhiChu;
                                        requestdetail.Property6 = item.NguoiLienHe_2__File;
                                    }

                                    requestdetail.Property2 = string.IsNullOrEmpty(Convert.ToString(item.LyDo)) ? "" : Convert.ToString(item.LyDo);
                                }
                            }
                            using (DataTable dt = new DataTable())
                            {
                                dt.Columns.Add("ID", typeof(string));
                                dt.Columns.Add("IDCardCode", typeof(string));
                                dt.Columns.Add("VendorCode", typeof(string));
                                dt.Columns.Add("TenKH", typeof(string));
                                dt.Columns.Add("NhomKH", typeof(string));
                                dt.Columns.Add("GioiTinh", typeof(string));
                                dt.Columns.Add("NgaySinh", typeof(DateTime));
                                dt.Columns.Add("NoiSinh", typeof(string));
                                dt.Columns.Add("HoKhauThuongTru", typeof(string));
                                dt.Columns.Add("TinhThanhPho", typeof(string));
                                dt.Columns.Add("QuanHuyen", typeof(string));
                                dt.Columns.Add("PhuongXa", typeof(string));
                                dt.Columns.Add("CMND", typeof(string));
                                dt.Columns.Add("NgayCapCMND", typeof(DateTime));
                                dt.Columns.Add("NoiCapCMND", typeof(string));
                                dt.Columns.Add("SDT ", typeof(string));
                                dt.Columns.Add("Email ", typeof(string));
                                dt.Columns.Add("TinhTrangHonNhan ", typeof(string));
                                dt.Columns.Add("NguoiLienHe", typeof(string));
                                dt.Columns.Add("SDTNguoiLienHe", typeof(string));
                                dt.Columns.Add("QuanHeVoiNguoiLienHe", typeof(string));
                                dt.Columns.Add("MaNV", typeof(string));
                                dt.Columns.Add("ChucVu", typeof(string));
                                dt.Columns.Add("BoPhan", typeof(string));
                                dt.Columns.Add("NgayKyHopDong", typeof(DateTime));
                                dt.Columns.Add("SoBHXH", typeof(string));
                                dt.Columns.Add("LoaiHopDong", typeof(string));
                                dt.Columns.Add("TongLuongNV", typeof(string));
                                dt.Columns.Add("SoTKNH", typeof(string));
                                dt.Columns.Add("IdBank", typeof(string));
                                dt.Columns.Add("ChiNhanhNH", typeof(string));
                                dt.Columns.Add("IDCardCode_NhomTruong", typeof(string));
                                dt.Columns.Add("DonHangFFriend", typeof(string));
                                dt.Columns.Add("SoTienDNHoTro", typeof(string));
                                dt.Columns.Add("Passport", typeof(string));
                                dt.Columns.Add("ChiNhanhDN", typeof(string));
                                dt.Columns.Add("NguoiLienHe_2", typeof(string));
                                dt.Columns.Add("SDTNguoiLienHe_2", typeof(string));
                                dt.Columns.Add("QuanHeVoiNguoiLienHe_2", typeof(string));
                                //
                                dt.Columns.Add("Appr__CMND_MT", typeof(int));
                                dt.Columns.Add("Appr__CMND_MS", typeof(int));
                                dt.Columns.Add("Appr__GPLX_MT", typeof(int));
                                dt.Columns.Add("Appr__GPLX_MS", typeof(int));
                                dt.Columns.Add("Appr__TheNV", typeof(int));
                                dt.Columns.Add("Appr__ChanDungKH", typeof(int));
                                dt.Columns.Add("Appr__XacNhanNhanSu", typeof(int));
                                dt.Columns.Add("Appr__SHK_1", typeof(int));
                                dt.Columns.Add("Appr__SHK_2", typeof(int));
                                dt.Columns.Add("Appr__SHK_3", typeof(int));
                                dt.Columns.Add("Appr__SHK_4", typeof(int));
                                dt.Columns.Add("Appr__SHK_5", typeof(int));
                                dt.Columns.Add("Appr__SHK_6", typeof(int));
                                dt.Columns.Add("Appr__SHK_7", typeof(int));
                                dt.Columns.Add("Appr__SaoKeLuong_1", typeof(int));
                                dt.Columns.Add("Appr__SaoKeLuong_2", typeof(int));
                                dt.Columns.Add("Appr__SaoKeLuong_3", typeof(int));

                                foreach (var item in objects)
                                {
                                    string Id = (string)item.IdForm;
                                    string IDCardCode = (string)item.EmpCode;
                                    string VendorCode = (string)item.VendorCode;
                                    string TenKH = (string)item.CardName;
                                    string NhomKH = (string)item.NhomKH;
                                    string GioiTinh = (string)item.Gender;
                                    DateTime NgaySinh = item.Birthday == null || item.Birthday == "" ? DateTime.Now : (DateTime)item.Birthday;
                                    string NoiSinh = (string)item.NoiSinh;
                                    string HoKhauThuongTru = (string)item.DiaChiTamTru;
                                    string TinhThanhPho = (string)item.TinhThanhPho;
                                    string QuanHuyen = (string)item.QuanHuyen;
                                    string PhuongXa = (string)item.PhuongXa;
                                    string CMND = (string)item.CMND;
                                    DateTime NgayCapCMND = item.NgayCapCMND == null || item.NgayCapCMND == "" ? DateTime.Now : (DateTime)item.NgayCapCMND;
                                    string NoiCapCMND = (string)item.NoiCapCMND;
                                    string SDT = (string)item.SDT;
                                    string Email = (string)item.Email;
                                    string TinhTrangHonNhan = (string)item.TinhTrangHonNhan;
                                    string NguoiLienHe = ((item.NguoiLienHe_1__Duyet == 2) ? null : (string)item.NguoiLienHe);
                                    string SDTNguoiLienHe = ((item.NguoiLienHe_1__Duyet == 2) ? null : (string)item.SDT_NguoiLienHe);
                                    string QuanHeVoiNguoiLienHe = ((item.NguoiLienHe_1__Duyet == 2) ? null : (string)item.QuanHeVoiNguoiLienHe);
                                    string MaNV = (string)item.MaNV_KH;
                                    string ChucVu = (string)item.ChucVu;
                                    string BoPhan = (string)item.BoPhan;
                                    DateTime NgayKyHopDong = item.NgayKiHopDong == null || item.NgayKiHopDong == "" ? DateTime.Now : (DateTime)item.NgayKiHopDong;
                                    string SoBHXH = (string)item.SoBHXH;
                                    string LoaiHopDong = (string)item.LoaiHopDong;
                                    string TongLuongNV = (string)item.TongLuongNV;
                                    string SoTKNH = (string)item.SoTKNH;
                                    string IdBank = (string)item.IdBank;
                                    string ChiNhanhNH = (string)item.ChiNhanhNH;
                                    string IDCardCode_NhomTruong = (string)item.IDCardCode_NhomTruong;
                                    string DonHangFFriend = (string)item.DonHangFFriend;
                                    string SoTienDNHoTro = (string)item.SoTienDNHoTro;
                                    string Passport = (string)item.Passport;
                                    string MaCNDN = (string)item.MaCNDN;
                                    string NguoiLienHe_2 = ((item.NguoiLienHe_2__Duyet == 2) ? null : (string)item.NguoiLienHe_2);
                                    string SDTNguoiLienHe_2 = ((item.NguoiLienHe_2__Duyet == 2) ? null : (string)item.SDT_NguoiLienHe_2);
                                    string QuanHeVoiNguoiLienHe_2 = ((item.NguoiLienHe_2__Duyet == 2) ? null : (string)item.QuanHeVoiNguoiLienHe_2);

                                    dt.Rows.Add(Id, IDCardCode, VendorCode, TenKH, NhomKH, GioiTinh, NgaySinh, NoiSinh, HoKhauThuongTru, TinhThanhPho, QuanHuyen
                                        , PhuongXa, CMND, NgayCapCMND, NoiCapCMND, SDT, Email, TinhTrangHonNhan, NguoiLienHe, SDTNguoiLienHe, QuanHeVoiNguoiLienHe
                                        , MaNV, ChucVu, BoPhan, NgayKyHopDong, SoBHXH, LoaiHopDong, TongLuongNV, SoTKNH, IdBank, ChiNhanhNH, IDCardCode_NhomTruong
                                        , DonHangFFriend, SoTienDNHoTro, Passport, MaCNDN
                                        , NguoiLienHe_2, SDTNguoiLienHe_2, QuanHeVoiNguoiLienHe_2,
                                        //
                                        (int)item.Appr__CMND_MT,
                                        (int)item.Appr__CMND_MS,
                                        (int)item.Appr__GPLX_MT,
                                        (int)item.Appr__GPLX_MS,
                                        (int)item.Appr__TheNV,
                                        (int)item.Appr__ChanDungKH,
                                        (int)item.Appr__XacNhanNhanSu,
                                        (int)item.Appr__SHK_1,
                                        (int)item.Appr__SHK_2,
                                        (int)item.Appr__SHK_3,
                                        (int)item.Appr__SHK_4,
                                        (int)item.Appr__SHK_5,
                                        (int)item.Appr__SHK_6,
                                        (int)item.Appr__SHK_7,
                                        (int)item.Appr__SaoKeLuong_1,
                                        (int)item.Appr__SaoKeLuong_2,
                                        (int)item.Appr__SaoKeLuong_3
                                        );
                                }
                                SqlParameter[] param = new SqlParameter[] {
                                    new SqlParameter("@Table", dt),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser == null ?  "" : UserManager.CurrentUser.InsideCode ),
                                    new SqlParameter("@Process", 0 ),    //  * Xử lý: 0:Trao đổi
                                    new SqlParameter("@RequestId", request.Id)
                                };
                                DataTable l__DataTable = sql.ExecuteCommand("sp__WEB__Update_CustInfo", System.Data.CommandType.StoredProcedure, param);
                                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                                {
                                    if (l__DataTable.Rows[0]["Result"].ToString() == "1")
                                    {
                                        //  Do Nothing
                                    }
                                    else
                                    {
                                        TempData["Message"] = l__DataTable.Rows[0]["Msg"].ToString();
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 01/04/2019 - CL cho Scoring==================================================
                        #endregion
                    }
                    else if (request.TypeId == 127)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity1 = item.ApprMatTruoc;
                                    requestdetail.Quantity2 = item.ApprMatSau;
                                    requestdetail.Quantity3 = item.ApprGiayUQTN;
                                    requestdetail.Quantity4 = item.ApprThayDoiChuKy;
                                    requestdetail.Quantity5 = item.ApprMTCMNDBIDV;
                                    requestdetail.Quantity6 = item.ApprMSCMNDBIDV;
                                    requestdetail.Quantity = item.ApprChanDungSV;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 128)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.Property7 = item.ThongTin__File;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 129)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 131)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity1 = item.ApprMatTruoc;
                                    requestdetail.Quantity2 = item.ApprMatSau;
                                    requestdetail.Quantity3 = item.ApprGiayUQTN;

                                    //▼	Add - VietMXH - 21/11/2017 - Load UQTN Mặt 2 & 3==================================================
                                    requestdetail.Quantity7 = item.ApprGiayUQTN_Mat2;
                                    requestdetail.Quantity8 = item.ApprGiayUQTN_Mat3;
                                    //▲	Add - VietMXH - 21/11/2017 - Load UQTN Mặt 2 & 3==================================================

                                    requestdetail.Quantity4 = item.ApprThayDoiChuKy;
                                    requestdetail.Quantity5 = item.ApprMTCMNDBIDV;
                                    requestdetail.Quantity6 = item.ApprMSCMNDBIDV;
                                    requestdetail.Property10 = item.LyDoKhongDuyet;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 132)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Price = item.SoTienCanThu == "" || item.SoTienCanThu == null ? null : item.SoTienCanThu;
                                    requestdetail.Money1 = item.SoTienDaThu == "" || item.SoTienDaThu == null ? null : item.SoTienDaThu;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 133)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 134)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            string MST = string.Empty;
                            string TxtVendorName = string.Empty;
                            string TxtDCDN = string.Empty;
                            string TxtTinhTP = string.Empty;
                            string TxtQuanHuyen = string.Empty;
                            string TxtSDT = string.Empty;
                            string TxtFax = string.Empty;

                            string TxtQuyMoCT = string.Empty;
                            string TxtSoLuongCNV = string.Empty;
                            string TxtShop = string.Empty;
                            string TxtChuTK = string.Empty;
                            string TxtSoTK = string.Empty;
                            string TxtChietKhau = string.Empty;
                            string TxtNganHangChietKhau = string.Empty;
                            string TxtChiNhanhNHChietKhau = string.Empty;
                            string TxtHoTenDaiDienDN = string.Empty;
                            string TxtSDTDaiDienDN = string.Empty;
                            string TxtEmailDaiDienDN = string.Empty;
                            string TxtPhuTrach = string.Empty;
                            string TxtChucVuPhuTrachNhanSu = string.Empty;
                            string TxtSDTPhuTrach = string.Empty;
                            string TxtEmailPhuTrach = string.Empty;
                            string TxtChietKhauPhuTrach = string.Empty;

                            string TxttraoDoi = string.Empty;
                            string TxtChuVuNguoiDaiDienDN = string.Empty;
                            string TxtNgayCapNhatCBCNV = string.Empty;
                            string TxtNgayChiLuong = string.Empty;
                            string TxtNgayChotSaoKe = string.Empty;
                            string TxtNgayGuiSaoKe = string.Empty;
                            string TxtNganhNghe = string.Empty;
                            string TxtHTThuHo = string.Empty;
                            string TxtEmailCC = string.Empty;
                            string CheckS = string.Empty;

                            string TxtNguoiPTTH = string.Empty;
                            string TxtCVNguoiPTTH = string.Empty;
                            string TxtDTNguoiPTTH = string.Empty;
                            string TxtEmailNguoiPTTH = string.Empty;
                            string TxtChietKhauNguoiPTTH = string.Empty;
                            string TxtTenVietTatVendor = string.Empty;
                            int TxtNgayThanhToanNo = 0;
                            int CheckTraThang = 0;
                            string TxtnamHDCuaDN = string.Empty;
                            string TxtDuoiEmail = string.Empty;
                            //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                            string TxtPhongBanNguoiDaiDienDN = string.Empty;
                            string TxtPhongBanPhuTrachNhanSu = string.Empty;
                            string TxtPBNguoiPTTH = string.Empty;
                            //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                            foreach (var item in objects)
                            {
                                CheckS = item.CheckS;
                                TxtVendorName = item.TxtVendorName;
                                TxtTenVietTatVendor = item.TxtTenVietTatVendor;
                                TxtNgayThanhToanNo = item.TxtNgayThanhToanNo;
                                CheckTraThang = item.CheckTraThang;
                                MST = item.TxtMST;
                                TxtDCDN = item.TxtDCDN;
                                TxtTinhTP = item.TxtTinhTP;
                                TxtQuanHuyen = item.TxtQuanHuyen;
                                TxtSDT = item.TxtSDT;
                                TxtFax = item.TxtFax;
                                TxtHTThuHo = item.TxtHTThuHo;

                                TxtQuyMoCT = item.TxtQuyMoCT;
                                TxtSoLuongCNV = item.TxtSoLuongCNV;
                                TxtShop = item.TxtShop;
                                TxtChuTK = item.TxtChuTK;
                                TxtSoTK = item.TxtSoTK;
                                TxtChietKhau = item.TxtChietKhau;
                                TxtNganHangChietKhau = item.TxtNganHangChietKhau;
                                TxtChiNhanhNHChietKhau = item.TxtChiNhanhNHChietKhau;
                                TxtHoTenDaiDienDN = item.TxtHoTenDaiDienDN;
                                TxtSDTDaiDienDN = item.TxtSDTDaiDienDN;
                                TxtEmailDaiDienDN = item.TxtEmailDaiDienDN;
                                TxtPhuTrach = item.TxtPhuTrach;
                                TxtChucVuPhuTrachNhanSu = item.TxtChucVuPhuTrachNhanSu;
                                TxtSDTPhuTrach = item.TxtSDTPhuTrach;
                                TxtEmailPhuTrach = item.TxtEmailPhuTrach;
                                TxtChietKhauPhuTrach = item.TxtChietKhauPhuTrach;
                                TxtEmailCC = item.TxtEmailCC;
                                TxttraoDoi = item.TxttraoDoi;
                                TxtChuVuNguoiDaiDienDN = item.TxtChuVuNguoiDaiDienDN;
                                TxtNgayCapNhatCBCNV = item.TxtNgayCapNhatCBCNV;
                                TxtNgayChiLuong = item.TxtNgayChiLuong;
                                TxtNgayChotSaoKe = item.TxtNgayChotSaoKe;
                                TxtNgayGuiSaoKe = item.TxtNgayGuiSaoKe;
                                TxtNganhNghe = item.TxtNganhNghe;

                                TxtNguoiPTTH = item.TxtNguoiPTTH;
                                TxtCVNguoiPTTH = item.TxtCVNguoiPTTH;
                                TxtDTNguoiPTTH = item.TxtDTNguoiPTTH;
                                TxtEmailNguoiPTTH = item.TxtEmailNguoiPTTH;
                                TxtChietKhauNguoiPTTH = item.TxtChietKhauNguoiPTTH;
                                TxtnamHDCuaDN = item.TxtnamHDCuaDN;
                                TxtDuoiEmail = item.TxtDuoiEmail;
                                //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                TxtPhongBanNguoiDaiDienDN = item.TxtPhongBanNguoiDaiDienDN;
                                TxtPhongBanPhuTrachNhanSu = item.TxtPhongBanPhuTrachNhanSu;
                                TxtPBNguoiPTTH = item.TxtPBNguoiPTTH;
                                //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                //============= Lưu vào ErrorCode
                                request.ErrorCode = item.CheckS;
                                request.ReferenceCode = item.CheckHopDong;
                                request.RequestIdRefer = item.CheckNganHang;
                                request.TotalRequestComplete = item.CheckTraThang;
                            }

                            SqlParameter[] paramS = new SqlParameter[]
                        {
                            new SqlParameter("@RequestId", request.Id) ,
                            new SqlParameter("@VendorName", TxtVendorName) ,
                            new SqlParameter("@TxtTenVietTatVendor", TxtTenVietTatVendor) ,
                            new SqlParameter("@TxtNgayThanhToanNo", TxtNgayThanhToanNo) ,
                            new SqlParameter("@TxtnamHDCuaDN", TxtnamHDCuaDN) ,
                            new SqlParameter("@MST", MST) ,
                            new SqlParameter("@NganhNghe", TxtNganhNghe) ,
                            new SqlParameter("@TxtDCDN", TxtDCDN) ,
                            new SqlParameter("@TxtTinhTP", TxtTinhTP) ,
                            new SqlParameter("@TxtQuanHuyen", TxtQuanHuyen) ,
                            new SqlParameter("@TxtSDT", TxtSDT) ,
                            new SqlParameter("@TxtFax", TxtFax) ,
                            new SqlParameter("@TxtHTThuHo", TxtHTThuHo) ,

                            new SqlParameter("@TxtQuyMoCT", TxtQuyMoCT) ,
                            new SqlParameter("@TxtSoLuongCNV", TxtSoLuongCNV) ,
                            new SqlParameter("@TxtShop", TxtShop) ,
                            new SqlParameter("@TxtNgayCapNhatCBCNV", TxtNgayCapNhatCBCNV) ,
                            new SqlParameter("@TxtNgayChiLuong", TxtNgayChiLuong) ,
                            new SqlParameter("@TxtNgayChotSaoKe", TxtNgayChotSaoKe) ,
                            new SqlParameter("@TxtNgayGuiSaoKe", TxtNgayGuiSaoKe) ,
                            new SqlParameter("@TxtChuTK", TxtChuTK) ,
                            new SqlParameter("@TxtSoTK", TxtSoTK) ,
                            new SqlParameter("@TxtChietKhau", TxtChietKhau) ,
                            new SqlParameter("@TxtNganHangChietKhau", TxtNganHangChietKhau) ,
                            new SqlParameter("@TxtChiNhanhNHChietKhau", TxtChiNhanhNHChietKhau) ,
                            new SqlParameter("@TxtHoTenDaiDienDN", TxtHoTenDaiDienDN) ,
                            new SqlParameter("@TxtChuVuNguoiDaiDienDN", TxtChuVuNguoiDaiDienDN) ,
                            new SqlParameter("@TxtSDTDaiDienDN", TxtSDTDaiDienDN) ,
                            new SqlParameter("@TxtEmailDaiDienDN", TxtEmailDaiDienDN) ,
                            new SqlParameter("@TxtPhuTrach", TxtPhuTrach) ,
                            new SqlParameter("@TxtChucVuPhuTrachNhanSu", TxtChucVuPhuTrachNhanSu) ,
                            new SqlParameter("@TxtSDTPhuTrach", TxtSDTPhuTrach) ,
                            new SqlParameter("@TxtEmailPhuTrach", TxtEmailPhuTrach) ,
                            new SqlParameter("@TxtChietKhauPhuTrach", TxtChietKhauPhuTrach) ,

                            new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode) ,
                            new SqlParameter("@TraThang", CheckTraThang) ,
                            new SqlParameter("@TxtDuoiEmail", TxtDuoiEmail),                            
                            //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                            new SqlParameter("@TxtPhongBanNguoiDaiDienDN", TxtPhongBanNguoiDaiDienDN),
                            new SqlParameter("@TxtPhongBanPhuTrachNhanSu", TxtPhongBanPhuTrachNhanSu),
                            //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                        };

                            DataTable table = sql.ExecuteCommand("FRT_Vendor_Save_After_Create_Calllog_UpDate", CommandType.StoredProcedure, paramS);

                            if (TxtHTThuHo == "HR")
                            {
                                //============== Update thông tin NV Ngân hàng
                                SqlParameter[] paramX = new SqlParameter[] {
                                new SqlParameter("@RequestId",  request.Id) ,
                                new SqlParameter("@TxtNguoiPTTH", TxtNguoiPTTH) ,
                                new SqlParameter("@TxtCVNguoiPTTH", TxtCVNguoiPTTH) ,
                                new SqlParameter("@TxtDTNguoiPTTH", TxtDTNguoiPTTH) ,
                                new SqlParameter("@TxtEmailNguoiPTTH", TxtEmailNguoiPTTH) ,
                                new SqlParameter("@TxtChietKhauNguoiPTTH", TxtChietKhauNguoiPTTH) ,
                                new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode),
                                //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                new SqlParameter("@TxtPBNguoiPTTH", TxtPBNguoiPTTH),
                                //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                            };
                                DataTable tableX = sql.ExecuteCommand("CalllogVendor_SavePTTHNH_Details", CommandType.StoredProcedure, paramX);
                            }

                            //================ Lưu thông tin người đại diện mua hàng
                            var DataSMuaHangFULL = Convert.ToString(form["DataSMuaHangFULL"]);
                            var MuaHangFULL = JsonConvert.DeserializeObject<dynamic>(DataSMuaHangFULL);

                            DataTable tablet = new DataTable();
                            tablet.Columns.Add("Id", typeof(string));
                            tablet.Columns.Add("HoTenMuaHang", typeof(string));
                            tablet.Columns.Add("ChucVuMuaHang", typeof(string));
                            tablet.Columns.Add("SDTMuaHang", typeof(string));
                            tablet.Columns.Add("EmailMuaHang", typeof(string));


                            if (MuaHangFULL != null && MuaHangFULL.ToString() != "[]")
                            {

                                string HoTenMuaHang = string.Empty;
                                string ChucVuMuaHang = string.Empty;
                                string SDTMuaHang = string.Empty;
                                string EmailMuaHang = string.Empty;
                                string Id = string.Empty;
                                foreach (var item in MuaHangFULL)
                                {
                                    Id = item.Id;
                                    HoTenMuaHang = item.HoTenMuaHang;
                                    ChucVuMuaHang = item.ChucVuMuaHang;
                                    SDTMuaHang = item.SDTMuaHang;
                                    EmailMuaHang = item.EmailMuaHang;

                                    tablet.Rows.Add(Id, HoTenMuaHang, ChucVuMuaHang, SDTMuaHang, EmailMuaHang);
                                }

                                SqlParameter[] paramM = new SqlParameter[]
                                    {
                                    new SqlParameter("@Type",  1) ,
                                    new SqlParameter("@RequestId",  request.Id) ,
                                    new SqlParameter("@Table", tablet) ,
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                                DataTable tableM = sql.ExecuteCommand("CalllogVendor_UpdateNguoiDaiDienMuaHang", CommandType.StoredProcedure, paramM);
                            }
                            else
                            {
                                SqlParameter[] paramX = new SqlParameter[]
                                    {
                                    new SqlParameter("@Type",  0) ,
                                    new SqlParameter("@RequestId",  request.Id) ,
                                    new SqlParameter("@Table", tablet) ,
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                                DataTable tableX = sql.ExecuteCommand("CalllogVendor_UpdateNguoiDaiDienMuaHang", CommandType.StoredProcedure, paramX);
                            }
                        }

                        #endregion
                    }
                    else if (request.TypeId == 135)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity6 = item.Approved;
                                    requestdetail.Property7 = item.SoHopDong;
                                    requestdetail.Property10 = item.LyDo;
                                    requestdetail.Money4 = item.SoTienTraTruoc == "" ? null : item.SoTienTraTruoc;
                                }
                                //if (item.Approved == 1)
                                //{
                                sql.ExecuteWithoutResult("HangDoi_UpdateTrangThai", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@IDCallLog", request.Id),
                                        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                                    });
                                //}

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 136)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 13/01/2020 - CL Sao kê DN: Thêm cột thời gian đẩy data sang Sacombank==================================================
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    string timeNgayDNThanhToan = item.NgayDNThanhToan;
                                    if (timeNgayDNThanhToan != null)
                                    {
                                        string[] timeNgayDNThanhToanArr = timeNgayDNThanhToan.Split('/');
                                        if (timeNgayDNThanhToanArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeNgayDNThanhToanArr[0].Length == 1 ? "d" : "dd"
                                               , timeNgayDNThanhToanArr[1].Length == 1 ? "M" : "MM"
                                               , timeNgayDNThanhToanArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeNgayDNThanhToan.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayChiLuongThucTe = item.NgayChiLuongThucTe;
                                    if (NgayChiLuongThucTe != null)
                                    {
                                        string[] timeNgayChiLuongThucTeArr = NgayChiLuongThucTe.Split('/');

                                        if (timeNgayChiLuongThucTeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeNgayChiLuongThucTeArr[0].Length == 1 ? "d" : "dd"
                                               , timeNgayChiLuongThucTeArr[1].Length == 1 ? "M" : "MM"
                                               , timeNgayChiLuongThucTeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = NgayChiLuongThucTe.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayGioBatDauQuetSaoKe = item.NgayGioBatDauQuetSaoKe;
                                    if (NgayGioBatDauQuetSaoKe != null)
                                    {
                                        string[] NgayGioBatDauQuetSaoKeArr = NgayGioBatDauQuetSaoKe.Split('/', ' ', ':');
                                        if (NgayGioBatDauQuetSaoKeArr.Length == 5)
                                        {
                                            string format = String.Format("{0}/{1}/{2} {3}:{4}"
                                               , NgayGioBatDauQuetSaoKeArr[0].Length == 1 ? "d" : "dd"
                                               , NgayGioBatDauQuetSaoKeArr[1].Length == 1 ? "M" : "MM"
                                               , NgayGioBatDauQuetSaoKeArr[2].Length == 2 ? "yy" : "yyyy"
                                               , NgayGioBatDauQuetSaoKeArr[3].Length == 1 ? "HH" : "HH"
                                               , NgayGioBatDauQuetSaoKeArr[4].Length == 1 ? "m" : "mm");
                                            requestdetail.Time3 = NgayGioBatDauQuetSaoKe.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayGioKetThucQuetSaoKe = item.NgayGioKetThucQuetSaoKe;
                                    if (NgayGioKetThucQuetSaoKe != null)
                                    {
                                        string[] NgayGioKetThucQuetSaoKeArr = NgayGioKetThucQuetSaoKe.Split('/', ' ', ':');

                                        if (NgayGioKetThucQuetSaoKeArr.Length == 5)
                                        {
                                            string format = String.Format("{0}/{1}/{2} {3}:{4}"
                                               , NgayGioKetThucQuetSaoKeArr[0].Length == 1 ? "d" : "dd"
                                               , NgayGioKetThucQuetSaoKeArr[1].Length == 1 ? "M" : "MM"
                                               , NgayGioKetThucQuetSaoKeArr[2].Length == 2 ? "yy" : "yyyy"
                                               , NgayGioKetThucQuetSaoKeArr[3].Length == 1 ? "HH" : "HH"
                                               , NgayGioKetThucQuetSaoKeArr[4].Length == 1 ? "m" : "mm");
                                            requestdetail.Time4 = NgayGioKetThucQuetSaoKe.EParseToDateTime(format);
                                        }
                                    }
                                    requestdetail.Money3 = item.TongThanhToanKyNay;
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 13/01/2020 - CL Sao kê DN: Thêm cột thời gian đẩy data sang Sacombank==================================================
                        #endregion
                    }
                    else if (request.TypeId == 137)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 13/01/2020 - CL Sao kê DN: Thêm cột thời gian đẩy data sang Sacombank==================================================
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    string timeNgayDNThanhToan = item.NgayDNThanhToan;
                                    if (timeNgayDNThanhToan != null)
                                    {
                                        string[] timeNgayDNThanhToanArr = timeNgayDNThanhToan.Split('/');
                                        if (timeNgayDNThanhToanArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeNgayDNThanhToanArr[0].Length == 1 ? "d" : "dd"
                                               , timeNgayDNThanhToanArr[1].Length == 1 ? "M" : "MM"
                                               , timeNgayDNThanhToanArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeNgayDNThanhToan.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayChiLuongThucTe = item.NgayChiLuongThucTe;
                                    if (NgayChiLuongThucTe != null)
                                    {
                                        string[] timeNgayChiLuongThucTeArr = NgayChiLuongThucTe.Split('/');

                                        if (timeNgayChiLuongThucTeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeNgayChiLuongThucTeArr[0].Length == 1 ? "d" : "dd"
                                               , timeNgayChiLuongThucTeArr[1].Length == 1 ? "M" : "MM"
                                               , timeNgayChiLuongThucTeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = NgayChiLuongThucTe.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayGioBatDauQuetSaoKe = item.NgayGioBatDauQuetSaoKe;
                                    if (NgayGioBatDauQuetSaoKe != null)
                                    {
                                        string[] NgayGioBatDauQuetSaoKeArr = NgayGioBatDauQuetSaoKe.Split('/', ' ', ':');
                                        if (NgayGioBatDauQuetSaoKeArr.Length == 5)
                                        {
                                            string format = String.Format("{0}/{1}/{2} {3}:{4}"
                                               , NgayGioBatDauQuetSaoKeArr[0].Length == 1 ? "d" : "dd"
                                               , NgayGioBatDauQuetSaoKeArr[1].Length == 1 ? "M" : "MM"
                                               , NgayGioBatDauQuetSaoKeArr[2].Length == 2 ? "yy" : "yyyy"
                                               , NgayGioBatDauQuetSaoKeArr[3].Length == 1 ? "HH" : "HH"
                                               , NgayGioBatDauQuetSaoKeArr[4].Length == 1 ? "m" : "mm");
                                            requestdetail.Time3 = NgayGioBatDauQuetSaoKe.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayGioKetThucQuetSaoKe = item.NgayGioKetThucQuetSaoKe;
                                    if (NgayGioKetThucQuetSaoKe != null)
                                    {
                                        string[] NgayGioKetThucQuetSaoKeArr = NgayGioKetThucQuetSaoKe.Split('/', ' ', ':');

                                        if (NgayGioKetThucQuetSaoKeArr.Length == 5)
                                        {
                                            string format = String.Format("{0}/{1}/{2} {3}:{4}"
                                               , NgayGioKetThucQuetSaoKeArr[0].Length == 1 ? "d" : "dd"
                                               , NgayGioKetThucQuetSaoKeArr[1].Length == 1 ? "M" : "MM"
                                               , NgayGioKetThucQuetSaoKeArr[2].Length == 2 ? "yy" : "yyyy"
                                               , NgayGioKetThucQuetSaoKeArr[3].Length == 1 ? "HH" : "HH"
                                               , NgayGioKetThucQuetSaoKeArr[4].Length == 1 ? "m" : "mm");
                                            requestdetail.Time4 = NgayGioKetThucQuetSaoKe.EParseToDateTime(format);
                                        }
                                    }
                                    requestdetail.Money3 = item.TongThanhToanKyNay;
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 13/01/2020 - CL Sao kê DN: Thêm cột thời gian đẩy data sang Sacombank==================================================
                        #endregion
                    }
                    else if (request.TypeId == 138)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property10 = item.StatusHoanTien;
                                    requestdetail.Note = item.Note;
                                    requestdetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 140)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Money2 = item.Money2;
                                    requestdetail.Approved = item.Approved1 != null ? item.Approved1 : item.Approved2;

                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 141)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property7 = item.TrangThaiDonHang;
                                    // Add - TrungNC3 - 19-10-2017 - IN ỐP LƯNG
                                    if (item.LyDoXuLyLai != "")
                                    {
                                        requestdetail.Property8 += UserManager.CurrentUser.EmployeeCode + " - " + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " - " + item.LyDoXuLyLai + "<br />";// Add - TrungNC3 - 24-10-2017 - IN ỐP LƯNG                                    }
                                    }
                                    requestdetail.Property9 = item.MaVanDon;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 142)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.SaleCode = item.SoTKNH;
                                    requestdetail.Quantity1 = item.IdBank;
                                    requestdetail.Quantity2 = item.IdChiNhanhNganHang;
                                    requestdetail.Money2 = item.Money2;
                                    requestdetail.Property20 = item.Note;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 143)
                    { }
                    else if (request.TypeId == 145)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity5 = item.XacNhan;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 146)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null && request.Status != 4)
                                {
                                    //requestdetail.Approved = item.DuyetTatCa; //ChuongNT3 - 29/05/2018 - Hủy appr
                                    requestdetail.Money1 = item.HanMuc;
                                    requestdetail.Money2 = item.SoTienGhiNo;
                                    requestdetail.Note = item.LyDoKhac;
                                    requestdetail.Quantity = item.Appr_SoHoKhau;
                                    requestdetail.Property3 = item.LyDoTuChoiMoThe;
                                    requestdetail.Quantity2 = item.CapThe;
                                    requestdetail.Quantity3 = item.KhongCapThe;
                                    requestdetail.Quantity4 = item.DuyetFF;
                                    requestdetail.Quantity5 = item.DuyetThamDinhKH;
                                    requestdetail.Quantity6 = item.DuyetKQThamDinh;
                                    requestdetail.Property2 = item.SPChon; //ChuongNT3 - 24/05/2018 - fix popup
                                    int Appr_MT_CMND = item.Appr_MT_CMND;
                                    int Appr_MS_CMND = item.Appr_MS_CMND;
                                    int Appr_KH_CMND = item.Appr_KH_CMND;
                                    int Appr_GPLX_MT = item.Appr_GPLX_MT;
                                    int Appr_GPLX_MS = item.Appr_GPLX_MS;
                                    int Appr_LastForm_MoThe_ChuKy = item.Appr_LastForm_MoThe_ChuKy;
                                    int Appr_LastForm_DeXuatTrichNoTinDung = item.Appr_LastForm_DeXuatTrichNoTinDung;
                                    int Appr_SoHoKhau_1 = item.Appr_SoHoKhau_1;
                                    int Appr_SoHoKhau_2 = item.Appr_SoHoKhau_2;
                                    int Appr_SoHoKhau_3 = item.Appr_SoHoKhau_3;
                                    int Appr_SoHoKhau_4 = item.Appr_SoHoKhau_4;
                                    int Appr_SoHoKhau_5 = item.Appr_SoHoKhau_5;
                                    int Appr_SoHoKhau_6 = item.Appr_SoHoKhau_6;
                                    int Appr_SoHoKhau_7 = item.Appr_SoHoKhau_7;
                                    int Appr_SoHoKhau_8 = item.Appr_SoHoKhau_8;
                                    int Appr_CRD_DXTNTD_M2 = item.Appr_CRD_DXTNTD_M2;
                                    int Appr_CRD_CD_DKMoThe = item.Appr_CRD_CD_DKMoThe;
                                    string MaSPThamDinh = item.MaSPThamDinh;
                                    //ChuongNT3 - 02/08/2018 - thêm bảng lưu data
                                    int DuyetFF = item.DuyetFF;
                                    int DuyetThamDinhKH = item.DuyetThamDinhKH;
                                    int DuyetKQThamDinh = item.DuyetKQThamDinh;
                                    DataTable tablesRD_Hist = sql.ExecuteCommand("sp_CreditNoneCard_ProcessStep_Hist", CommandType.StoredProcedure, new SqlParameter[] {
                                        new SqlParameter("@RequestId ", request.Id ),
                                        new SqlParameter("@UpdateBy",  UserManager.CurrentUser.InsideCode ),
                                        new SqlParameter("@BuocXuLy",  DuyetFF+","+DuyetThamDinhKH+","+DuyetKQThamDinh),
                                        new SqlParameter("@StepNo",  request.StepNo)
                                    });
                                    //ChuongNT3 - 02/08/2018 - thêm bảng lưu data
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@CallLogID ", request.Id ),
                                        new SqlParameter("@UpdateBy",  UserManager.CurrentUser.InsideCode ),
                                        new SqlParameter("@Appr_CRD_MT_CMND",  Appr_MT_CMND),
                                        new SqlParameter("@Appr_CRD_MS_CMND", Appr_MS_CMND),
                                        new SqlParameter("@Appr_CRD_KH_CMND",  Appr_KH_CMND),
                                        new SqlParameter("@Appr_CRD_GPLX_MT", Appr_GPLX_MT),
                                        new SqlParameter("@Appr_CRD_GPLX_MS",  Appr_GPLX_MS),
                                        new SqlParameter("@Appr_CRD_MoThe",  Appr_LastForm_MoThe_ChuKy),
                                        new SqlParameter("@Appr_CRD_DXTNTD", Appr_LastForm_DeXuatTrichNoTinDung ),
                                        new SqlParameter("@Appr_CRD_SHK_1", Appr_SoHoKhau_1),
                                        new SqlParameter("@Appr_CRD_SHK_2",  Appr_SoHoKhau_2),
                                        new SqlParameter("@Appr_CRD_SHK_3", Appr_SoHoKhau_3),
                                        new SqlParameter("@Appr_CRD_SHK_4", Appr_SoHoKhau_4 ),
                                        new SqlParameter("@Appr_CRD_SHK_5", Appr_SoHoKhau_5),
                                        new SqlParameter("@Appr_CRD_SHK_6",  Appr_SoHoKhau_6),
                                        new SqlParameter("@Appr_CRD_SHK_7", Appr_SoHoKhau_7),
                                        new SqlParameter("@Appr_CRD_SHK_8", Appr_SoHoKhau_8),
                                        new SqlParameter("@MaSPThamDinh", MaSPThamDinh),
                                        new SqlParameter("@Appr_CRD_DXTNTD_2", Appr_CRD_DXTNTD_M2),
                                        new SqlParameter("@Appr_CRD_CD_DKMoThe", Appr_CRD_CD_DKMoThe)
                                    };
                                    DataTable tablesRD_HA = sql.ExecuteCommand("sp_CreditNoneCard_ApproveImage", CommandType.StoredProcedure, param);
                                    if (tablesRD_HA != null && tablesRD_HA.Rows.Count > 0)
                                    {
                                        DataRow row = tablesRD_HA.Rows[0];
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 154)
                    {
                        #region claim nvc

                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property16 = item.SoHoaDon;
                                    request.isHighlight = item.isHighLight;
                                }
                            }
                        }
                        #endregion
                    }
                    //▼ Edit - ThuongNM2 - 26/03/2019 - Loại yêu cầu mới 157 Check CIC KH=====
                    else if (request.TypeId == 157)
                    {
                        #region Loại yêu cầu mới 157 Check CIC KH=====
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDetailId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property4 = item.Property4; // N'1' -- Hạng rủi ro
                                    requestdetail.Property5 = item.Property5; // N'1,2,3' -- KH Được mua với hình thức: "1,2,3"
                                    requestdetail.Quantity2 = item.Quantity2; // 1 -- Tình trạng nợ
                                    requestdetail.Quantity3 = item.Quantity3; // 1 -- Nhóm nợ
                                    requestdetail.Quantity4 = item.Quantity4; // 1 -- SL Quan hệ tín dụng
                                    requestdetail.Quantity = item.Quantity;   // 0 -- Mã KH CIC: 0:Không ; 1:Có
                                    requestdetail.QuantityAvaiable = item.QuantityAvaiable; // 0 -- Điểm CIC
                                    requestdetail.Numeric1 = item.Numeric1; //-- Mức dư nợ CIC
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ Edit - ThuongNM2 - 26/03/2019 - Loại yêu cầu mới 157 Check CIC KH=====
                    else if (request.TypeId == 158)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 18/04/2019 - 158:CallLog Chi thưởng DN==================================================
                        if (request.Status < 4 && objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int l__158__Item__Id = item.Id;
                                RequestDetail l__158__ReqDet = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l__158__ReqDet = db.RequestDetails.FirstOrDefault(x => x.Id == l__158__Item__Id);
                                }
                                if (l__158__ReqDet != null)
                                {
                                    if (item.Approved == 1)
                                        l__158__ReqDet.Approved = true;
                                    else if (item.Approved == 0)
                                        l__158__ReqDet.Approved = false;
                                    else
                                        l__158__ReqDet.Approved = null;
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 18/04/2019 - 158:CallLog Chi thưởng DN==================================================
                        #endregion
                    }
                    else if (request.TypeId == 162)
                    {
                        #region Automatic
                        //▼	Add - TuanNA89 - 09/01/2020 - Calllog Tripi - Loại 162
                        SqlParameter[] param = new SqlParameter[] {
                            new SqlParameter("@RequestId", request.Id) ,
                            new SqlParameter("@EmpCode", UserManager.CurrentUser.EmployeeCode) ,
                        };
                        sql.ExecuteCommand("CallLogTripi_Type162_Notification", CommandType.StoredProcedure, param);
                        //▼	Add - TuanNA89 - 07/02/2020 - fix code Tripi: Lưu file đính kèm
                        #region UploadImage
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            //Save file content goes here
                            string fName = UserManager.CurrentUser.InsideCode + "_" + request.Id + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + Path.GetExtension(file.FileName);
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                string folder = Keyword.FolderFileAttach + "Tripi/";
                                var originalDirectory = new DirectoryInfo(Server.MapPath(folder));
                                if (!originalDirectory.Exists)
                                {
                                    Directory.CreateDirectory(Server.MapPath(folder));
                                }
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database

                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = folder + fName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                db.FileAttachs.Add(fileAttach);
                            }
                        }
                        #endregion
                        //▲	Add - TuanNA89 - 07/02/2020 - fix code Tripi: Lưu file đính kèm

                        request.TimeLastUpdate = DateTime.Now;
                        request.UpdateBy = UserManager.CurrentUser.InsideCode;
                        db.SaveChanges();

                        //▼	Add - TuanNA89 - 13/02/2020 - Code SignalR dùng cho việc Realtime
                        NotificationManager nf = new NotificationManager();
                        string groupName = Convert.ToString(form["GroupName"]);
                        if (!string.IsNullOrEmpty(groupName))
                        {
                            List<string> group = new List<string>();
                            group.Add(groupName);
                            nf.PingReceivers(group);
                        }
                        //▲ Add - TuanNA89 - 13/02/2020 - Code SignalR dùng cho việc Realtime
                        XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Communicate, request.Assigner);

                        var actionView = "Details";
                        if (UserManager.CurrentUser.Is_Mpos == true)
                        {
                            actionView = "DetailFormMobile";
                        }
                        TempData["MessageSuccess"] = "Gửi Trao Đổi Thành Công!";
                        return RedirectToAction(actionView, new { Id = request.Id });
                        //▲ Add - TuanNA89 - 09/01/2020 - Calllog Tripi - Loại 162
                        #endregion
                    }
                    else
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.ItemId = item.ItemId;
                                    requestdetail.Quantity = item.Quantity;
                                    requestdetail.Note = item.Note;
                                    //requestdetail.Status = item.Status
                                    requestdetail.Sum = item.Sum;
                                    requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                    requestdetail.EmpCode = item.EmpCode;
                                    requestdetail.Price = item.Price;
                                    //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                    requestdetail.ShopCode = item.ShopCode;
                                    requestdetail.ShopCode2 = item.ShopCode2;
                                    requestdetail.OfficeCode = item.OfficeCode;
                                    requestdetail.CustomerCode = item.CustomerCode;
                                    requestdetail.CustomerName = item.CustomerName;
                                    requestdetail.SaleCode = item.SaleCode;
                                    #region Time1
                                    if (item.Time1 == null)
                                    {
                                        requestdetail.Time1 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time1;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                    }
                                    #endregion
                                    #region Time2
                                    if (item.Time2 == null)
                                    {
                                        requestdetail.Time2 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time2;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                    }
                                    #endregion
                                    #region Time3
                                    if (item.Time3 == null)
                                    {
                                        requestdetail.Time3 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time3;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                    }
                                    #endregion
                                    requestdetail.Money1 = item.Money1;
                                    requestdetail.Money2 = item.Money2;
                                    requestdetail.Money3 = item.Money3;
                                    requestdetail.Money4 = item.Money4;
                                    requestdetail.ProductCode = item.ProductCode;
                                    requestdetail.ProductName = item.ProductName;
                                    requestdetail.Imei = item.Imei;
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.EmpCode1 = item.EmpCode1;
                                    requestdetail.EmpCode2 = item.EmpCode2;
                                    requestdetail.EmpCode3 = item.EmpCode3;
                                    requestdetail.Quantity1 = item.Quantity1;
                                    requestdetail.Quantity2 = item.Quantity2;
                                    requestdetail.Quantity3 = item.Quantity3;
                                    requestdetail.Quantity4 = item.Quantity4;
                                    requestdetail.Property1 = item.Property1;
                                    requestdetail.Property2 = item.Property2;
                                    requestdetail.Property3 = item.Property3;
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.JobCode1 = item.JobCode1;
                                    requestdetail.JobCode2 = item.JobCode2;

                                }
                            }
                        }
                        #endregion
                    }
                    #endregion

                    #region UploadImage
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        //Save file content goes here
                        string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database

                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = request.Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);

                            //==================== Hiền.Đoàn 18.01.2016 Lưu file của loại CL DN
                            if (request.TypeId == 134)
                            {
                                sql.ExecuteWithoutResult("CalllogVendor_SaveUploadFile", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@Uri", Keyword.GetFolderFileAttach() + fName),
                                    new SqlParameter("@StepNo", request.StepNo),
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@TimeCreate", DateTime.Now),
                                    new SqlParameter("@Status", Key.Status.Available),
                                    new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode)
                                });
                            }
                        }
                    }
                    #endregion

                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    db.SaveChanges();

                    #region Update Duyệt trả góp
                    if (request.TypeId == 121 || request.TypeId == 135)
                    {
                        sql.ExecuteWithoutResult("FRT_SP_ChiaCallLog_HangDoi", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                            });
                        RequestDetail detailsTraGop = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id
                            && x.Status == Key.Status.Available);
                        sql.ExecuteWithoutResult("CRM_UpdateApprove", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@DocEntryCTTraGopCRM", detailsTraGop.Property8),
                            new SqlParameter("@Sohopdong", detailsTraGop.Property7 == null || detailsTraGop.Property7 == "" ? "" : detailsTraGop.Property7),
                            new SqlParameter("@Status",2),
                            new SqlParameter("@GhiChu",detailsTraGop.Note)
                        });
                    }

                    #endregion

                    #region UpdateImageChecked
                    if (imageChecked != "" && ((permissions.Contains(Permission.Sender)) || (request.TypeId == 134 && (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner)))))
                    {
                        SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id), new SqlParameter("@FileAttachIds", imageChecked) };
                        sql.ExecuteWithoutResult("FileAttach_Update", CommandType.StoredProcedure, param);
                    }
                    #endregion

                    #region ---145:lightboxDemo => Trả thông tin về inside---
                    int StatusSentOUT = form["StatusSentOUT"].EParseToInt();
                    if (request.TypeId == 145 && StatusSentOUT == 1)
                    {
                        SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@CalllogID", request.Id)
                                    };
                        sql.ExecuteWithoutResult("sp_SentIMGToInSide_LightboxHangDemo", CommandType.StoredProcedure, param);
                    }
                    #endregion
                    #region ---146: duyệt mở thẻ credit ---
                    var msg146 = "";
                    if (request.TypeId == 146)
                    {
                        DataTable tablesRD = sql.ExecuteCommand("sp_CreditNoneCard_CompleteRequest", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@ReqId", request.Id ),
                            new SqlParameter("@UpdateBy",  UserManager.CurrentUser.InsideCode ),
                            new SqlParameter ("@Is_Complete", 0)
                        });
                        if (tablesRD != null && tablesRD.Rows.Count > 0)
                        {
                            DataRow row = tablesRD.Rows[0];
                            msg146 = row["Msg"].ToString();
                        }

                    }
                    #endregion

                    XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Communicate, UserManager.CurrentUser.InsideCode);
                    TempData["Message"] = "Gửi Trao Đổi Thành Công!";
                    return RedirectToAction("Index", "Home");
                }
                else
                {
                    #region Not Valid
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region Ghi log
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} -  Id:{1} - sender :{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }
        [ValidateInput(false)]
        public ActionResult Reply(FormCollection form)
        {
            #region kiem tra dang nhap
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            #endregion
            var requestId = form["RequestId"].EParseToLong();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                #region lấy thông tin
                string message = form["Message"].ToString();
                string details = form["Details"].ToString();
                string imageChecked = form["ImageValidate"].ToString();
                var objects = JsonConvert.DeserializeObject<dynamic>(details);

                var detailsCc = form["DetailsCc"].ToString();
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);
                #endregion

                var firstTimeUpdate = false;
                Request request = null;
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }

                if (request != null)
                {
                    #region UploadImage
                    var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                    string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        //Save file content goes here
                        string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = request.Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);
                        }
                    }
                    db.SaveChanges();
                    #endregion

                    #region File
                    var fileAttaches = new List<FileAttach>();
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        fileAttaches = (from f in db.FileAttachs
                                        where f.RequestId == request.Id
                                        && f.Status == Key.Status.Available
                                        && f.StepNo == request.StepNo
                                        select f).ToList();
                    }
                    #endregion
                    List<Permission> permissions = GetPermissions(request.Id);
                    #region Verify
                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (message.Length == 0)
                    {
                        TempData["Message"] = "Trả lời phải nhập tin nhắn!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    #endregion

                    RequestStep step = null;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        step = db.RequestSteps.FirstOrDefault(
                                                   x => x.RequestId == request.Id
                                                   && x.Status == Key.Status.Available
                                                   && x.StepNo == request.StepNo);
                    }

                    if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                    {
                        #region Insert Converstation
                        var conversation = new Conversation();
                        conversation.RequestId = request.Id;
                        conversation.Sender = sender;
                        conversation.Message = message;
                        conversation.Status = Key.Status.Available;
                        conversation.TimeCreate = DateTime.Now;
                        conversation.Type = Key.Conversation.Reply;
                        conversation.StepNo = request.StepNo;
                        db.Conversations.Add(conversation);
                        #endregion

                        #region Cập nhật bước
                        byte oldStatus = request.Status;
                        if (request.Status != Key.StatusRequest.Complete)
                        {
                            request.Status = Key.StatusRequest.Reply;
                            request.StepStatus = Key.StatusRequest.Reply;
                            if (request.TypeId == 122) { }
                            else { request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish.Value; }
                            request.Assigner = sender;
                            request.StillShowing = false;
                            if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                request.TimeLastAdminUpdate = DateTime.Now;
                                request.LastAdminUpdate = sender;
                            }
                            #region Update or Insert RequestStep
                            if (step != null)
                            {
                                step.TimeEnd = step.TimeEnd == null ? DateTime.Now : step.TimeEnd;
                                step.Assigner = sender;
                            }
                            else
                            {
                                RequestStep oldStep = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    oldStep = (from s in db.RequestSteps
                                               where s.RequestId == request.Id
                                               && s.StepNo == request.StepNo - 1
                                               && s.Status == Key.Status.Available
                                               select s).FirstOrDefault();
                                }

                                step = new RequestStep();
                                step.RequestId = request.Id;
                                step.TimeCreate = DateTime.Now;
                                step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                                step.TimeEnd = DateTime.Now;
                                step.Assigner = sender;
                                step.StepNo = request.StepNo;
                                step.Status = Key.Status.Available;
                                db.RequestSteps.Add(step);
                            }
                            #endregion
                        }
                        #endregion

                        #region Insert Cc
                        if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner) ||
                            permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            string strCc = "";
                            foreach (var item in Ccs) { strCc += item.id + ","; }
                            if (strCc.Length > 0)
                            {
                                strCc = strCc.Substring(0, strCc.Length - 1);
                                sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id) ,
                                    new SqlParameter("@StepNo", request.StepNo),
                                    new SqlParameter("@Assigner", strCc),
                                    new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                    new SqlParameter("@RemoveAssignerOld", 1),
                                });
                            }
                            else
                            {
                                (from a in db.Assigners
                                 where a.RequestId == request.Id
                                 && a.Type == Key.TypeAssigner.Cc
                                 select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                            }
                        }
                        #endregion

                        #region Update Item
                        if (request.TypeId == 121)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity6 = item.Approved;
                                        requestdetail.Property7 = item.SoHopDong;
                                        requestdetail.Property10 = item.LyDo;
                                        requestdetail.Note = item.GhiChu;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 124)
                        {
                            #region Automatic
                            //►	Edit - VietMXH - 13/09/2018 - 124 - Không xử lý==================================================
                            #endregion
                        }
                        else if (request.TypeId == 128)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Property7 = item.ThongTin__File;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 129)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 138)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property10 = item.StatusHoanTien;
                                        requestdetail.Note = item.Note;
                                        requestdetail.Approved = item.Approved;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 141)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    long id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property7 = item.TrangThaiDonHang;
                                        // Add - TrungNC3 - 19-10-2017 - IN ỐP LƯNG
                                        if (item.LyDoXuLyLai != "")
                                        {
                                            requestdetail.Property8 += UserManager.CurrentUser.EmployeeCode + " - " + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " - " + item.LyDoXuLyLai + "<br />";// Add - TrungNC3 - 24-10-2017 - IN ỐP LƯNG
                                        }
                                        requestdetail.Property9 = item.MaVanDon;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 142)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    long id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.SaleCode = item.SoTKNH;
                                        requestdetail.Quantity1 = item.IdBank;
                                        requestdetail.Quantity2 = item.IdChiNhanhNganHang;
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Property20 = item.Note;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 148)
                        {
                            #region Chuyển Đổi Trả Góp
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.RDI;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity1 = item.XacNhan;
                                        requestdetail.Quantity2 = item.SaiTen;
                                        requestdetail.Quantity3 = item.SaiNgay;
                                        requestdetail.Quantity4 = item.SaiSoThe;
                                        requestdetail.Quantity5 = item.SaiTien;
                                        requestdetail.Quantity6 = item.LyDoKhac; //▶ Edit - TrongNM3 - 10 / 01 / 2019 -  Loai: 148 Chuyen Doi Tra Gop Ngan Hang
                                        requestdetail.Property7 = item.GhiChuKhac;
                                        if (requestdetail.Quantity2 == 1)
                                        {
                                            requestdetail.Property9 = "Họ tên chủ thẻ";
                                        }
                                        if (requestdetail.Quantity3 == 1)
                                        {
                                            requestdetail.Property10 = "Ngày giao dịch";
                                        }
                                        if (requestdetail.Quantity4 == 1)
                                        {
                                            requestdetail.Property11 = "Số thẻ";
                                        }
                                        if (requestdetail.Quantity5 == 1)
                                        {
                                            requestdetail.Property12 = "Số tiền giao dịch";
                                        }
                                        //▶ Edit - TrongNM3 - 11 / 01 / 2019 -  Loai: 148 Chuyen Doi Tra Gop Ngan Hang
                                        if (requestdetail.Quantity6 == 1)
                                        {
                                            requestdetail.Property14 = "Thông tin khách hàng";
                                        }
                                    }
                                }

                                long RequestId = request.Id;
                                Request Requests = db.Requests.FirstOrDefault(x => x.Id == RequestId);
                                Requests.Status = 3;
                            }
                            #endregion
                        }
                        else
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.ItemId = item.ItemId;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Note = item.Note;
                                        //requestdetail.Status = item.Status
                                        requestdetail.Sum = item.Sum;
                                        requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                        requestdetail.EmpCode = item.EmpCode;
                                        requestdetail.Price = item.Price;
                                        //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                        requestdetail.ShopCode = item.ShopCode;
                                        requestdetail.ShopCode2 = item.ShopCode2;
                                        requestdetail.OfficeCode = item.OfficeCode;
                                        requestdetail.CustomerCode = item.CustomerCode;
                                        requestdetail.CustomerName = item.CustomerName;
                                        requestdetail.SaleCode = item.SaleCode;
                                        #region Time1
                                        if (item.Time1 == null)
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time1;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time1 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time2
                                        if (item.Time2 == null)
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time2;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time2 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time3
                                        if (item.Time3 == null)
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time3;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time3 = null;
                                            }
                                        }
                                        #endregion
                                        requestdetail.Money1 = item.Money1;
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Money3 = item.Money3;
                                        requestdetail.Money4 = item.Money4;
                                        requestdetail.ProductCode = item.ProductCode;
                                        requestdetail.ProductName = item.ProductName;
                                        requestdetail.Imei = item.Imei;
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.EmpCode1 = item.EmpCode1;
                                        requestdetail.EmpCode2 = item.EmpCode2;
                                        requestdetail.EmpCode3 = item.EmpCode3;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        requestdetail.Quantity3 = item.Quantity3;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Quantity5 = item.Quantity5;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.Property5 = item.Property5;
                                        requestdetail.Property6 = item.Property6;
                                        requestdetail.Property7 = item.Property7;
                                        requestdetail.Property8 = item.Property8;
                                        requestdetail.Property9 = item.Property9;
                                        requestdetail.Property10 = item.Property10;
                                        requestdetail.JobCode1 = item.JobCode1;
                                        requestdetail.JobCode2 = item.JobCode2;

                                    }
                                }
                            }
                            #endregion
                            firstTimeUpdate = true;
                        }
                        #endregion

                        #region UpdateImageChecked
                        if (imageChecked != "")
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id), new SqlParameter("@FileAttachIds", imageChecked) };
                            sql.ExecuteWithoutResult("FileAttach_Update", CommandType.StoredProcedure, param);
                        }
                        #endregion

                        request.TimeLastUpdate = DateTime.Now;
                        request.UpdateBy = UserManager.CurrentUser.InsideCode;
                        db.SaveChanges();

                        #region Gửi mail
                        if (request.TypeId == 141 && request.StepNo == 3 && form["ApprovedPrintPartner"].ToString() == "6")
                        {
                            XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Complete, UserManager.CurrentUser.InsideCode);
                            TempData["Message"] = "Hoàn tất thành công!";
                        }
                        else if (request.TypeId == 148)
                        {
                            SqlParameter[] param = new SqlParameter[]{
                                new SqlParameter("@RequestId", request.Id),
                            };
                            DataTable table = sql.ExecuteCommand("sp_POS_ChuyenDoiTraGop", CommandType.StoredProcedure, param);
                            if (table != null && table.Rows.Count > 0)
                            {
                                var Rs = "";
                                foreach (DataRow row in table.Rows)
                                {
                                    if (Rs == "")
                                    {
                                        Rs = row.ItemArray[0].ToString();
                                    }
                                    else
                                    {
                                        Rs = Rs + ", " + row.ItemArray[0].ToString();
                                    }

                                }
                                if (table.Rows.Count != null)
                                {
                                    TempData["Message"] = "Gửi trả lời thành công! Mã request được tạo bởi những line thất bại " + Rs;
                                }
                                else
                                {
                                    TempData["Message"] = "Gửi trả lời thành công!";
                                }

                            }
                            else
                            {
                                TempData["Message"] = "Gửi trả lời thành công!";
                            }
                        }
                        else
                        {
                            XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Reply, UserManager.CurrentUser.InsideCode);
                            TempData["Message"] = "Gửi trả lời thành công!";
                        }
                        #endregion

                        return RedirectToAction("Index", "Home");
                    }
                    else
                    {
                        #region Not Valid
                        TempData["Message"] = "Bạn không có quyền để thực hiện Trả lời";
                        return RedirectToAction("Details", "Requests", new { id = request.Id });
                        #endregion
                    }
                }
                else
                {
                    #region Not Valid
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region ===Log loi===
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} -  Id:{1} - sender :{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }
        [ValidateInput(false)]
        public ActionResult ChangeStep(FormCollection form)
        {
            #region kiem tra dang nhap
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            #endregion
            var requestId = form["RequestId"].EParseToLong();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                #region thong tin
                string message = form["Message"].ToString();
                var details = form["Details"].ToString();
                var objects = JsonConvert.DeserializeObject<dynamic>(details);
                var falgCompletContinueAssigner = form["CompleteContinueAssigner"].ToString() == "1" ? true : false;
                string imageChecked = form["ImageValidate"].ToString();

                var detailsCc = form["DetailsCc"].ToString();
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);

                #endregion

                Request request = null;
                Category type = null;
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                    type = db.Categories.FirstOrDefault(x => x.Id == request.TypeId);
                }

                if (request != null && type != null)
                {
                    List<Permission> permissions = GetPermissions(request.Id);
                    #region Verify
                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (request.StepNo >= type.StepTotal)
                    {
                        TempData["Message"] = "Không có bước kế tiếp để chuyển !";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (!permissions.Contains(Permission.Assigner) && !permissions.Contains(Permission.GroupAssigner) &&
                        !permissions.Contains(Permission.Admin) && !permissions.Contains(Permission.SupperAdmin) &&
                        request.TypeId != 122 && request.TypeId != 154) //ChuongNT3 - 10//12/2018 - thêm tgian / lý do ko nhâp
                    {
                        TempData["Message"] = "Không có quyền chuyển bước";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (request.TypeId == 135)
                    {
                        RequestDetail requestDetail_135 = null;
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            requestDetail_135 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id && x.Status == Key.Status.Available);
                        }

                        if (requestDetail_135 != null && request.StepNo == 2 && (requestDetail_135.Property16 == null || requestDetail_135.Property16 == ""))
                        {
                            TempData["Message"] = "Vui lòng Upload hình ảnh Giấy Ủy quyền trước khi chuyển bước!";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                    }
                    #endregion

                    if ((permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                        permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin)) || (request.TypeId == 122 || request.TypeId == 154))//ChuongNT3 - 10//12/2018 - thêm tgian / lý do ko nhâp
                    {
                        string MessageXuatKhacPos = "";

                        int flag_step = 0;  // Add - LuanNT44 - 10/05/2018 - loại 24 - Sửa chữa CSVC

                        #region Insert Converstation
                        if (message.Length > 0)
                        {
                            var conversation = new Conversation();
                            conversation.RequestId = request.Id;
                            conversation.Sender = sender;
                            conversation.Message = message;
                            conversation.Status = Key.Status.Available;
                            conversation.TimeCreate = DateTime.Now;
                            conversation.Type = Key.Conversation.Comment;
                            conversation.StepNo = request.StepNo;
                            db.Conversations.Add(conversation);
                        }
                        #endregion

                        #region Update or Insert RequestStep
                        RequestStep step = null;
                        using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                        {
                            step = db.RequestSteps.FirstOrDefault(
                                               x => x.RequestId == request.Id
                                               && x.Status == Key.Status.Available
                                               && x.StepNo == request.StepNo);
                        }

                        if (step != null)
                        {
                            step.TimeEnd = step.TimeEnd == null ? DateTime.Now : step.TimeEnd;
                            step.Assigner = sender;
                        }
                        else
                        {
                            RequestStep oldStep = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                oldStep = (from s in db.RequestSteps
                                           where s.RequestId == request.Id
                                           && s.StepNo == request.StepNo - 1
                                           && s.Status == Key.Status.Available
                                           select s).FirstOrDefault();
                            }

                            step = new RequestStep();
                            step.RequestId = request.Id;
                            step.TimeCreate = DateTime.Now;
                            step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                            step.TimeEnd = DateTime.Now;
                            step.Assigner = sender;
                            step.StepNo = request.StepNo;
                            step.Status = Key.Status.Available;

                            db.RequestSteps.Add(step);
                        }
                        #endregion

                        #region Insert Cc
                        if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner) ||
                            permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            string strCc = "";
                            foreach (var item in Ccs) { strCc += item.id + ","; }
                            if (strCc.Length > 0)
                            {
                                strCc = strCc.Substring(0, strCc.Length - 1);
                                sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                            }
                            else
                            {
                                (from a in db.Assigners
                                 where a.RequestId == request.Id
                                 && a.Type == Key.TypeAssigner.Cc
                                 select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                            }
                            //(from a in db.Assigners
                            // where a.RequestId == request.Id
                            // && a.Type == Key.TypeAssigner.Cc && a.GroupMail == null
                            // select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                            //foreach (var Cc in Ccs)
                            //{
                            //    //Cc.id
                            //    string EmpCode = Cc.id;
                            //    var CcExist = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                            //                                           && x.Type == Key.TypeAssigner.Cc
                            //                                           && x.EmployeeCode == EmpCode);
                            //    if (CcExist == null)
                            //    {
                            //        CcExist = new Assigner();
                            //        CcExist.RequestId = request.Id;
                            //        CcExist.EmployeeCode = EmpCode;
                            //        CcExist.StepNo = request.StepNo;
                            //        CcExist.Type = Key.TypeAssigner.Cc;
                            //        CcExist.Status = Key.Status.Available;
                            //        CcExist.TimeCreate = DateTime.Now;
                            //        db.Assigners.Add(CcExist);
                            //    }
                            //    else
                            //        CcExist.Status = Key.Status.Available;
                            //}
                        }
                        #endregion

                        #region Update Items
                        if (request.TypeId == 24)
                        {
                            #region Automatic
                            //if (objects != null && objects.ToString() != "[]")
                            //{
                            //    int flagStep = 0;
                            //    if (request.StepNo == 1)
                            //    {
                            //        flag_step = 1;

                            //        foreach (var item in objects)
                            //        {
                            //            if (item.item == 3)
                            //            {
                            //                flagStep += 1;
                            //            }
                            //            RequestDetail rs = new RequestDetail();
                            //            rs.RequestId = request.Id;
                            //            rs.Property1 = item.Thietbi;
                            //            rs.Money1 = item.Dongia;
                            //            rs.Status = 1;
                            //            rs.Quantity2 = item.NCC;
                            //            rs.Quantity4 = item.Baohanh;
                            //            rs.Quantity5 = item.Soluong;
                            //            rs.Money2 = item.Tongtien; //LuanNT44 - 05/09/2018 - 24: CSVC edit cột money (quantity6)
                            //            if (item.item == 2)
                            //            {
                            //                rs.Property10 = item.chenhlenh;// danh sách thiết bị chênh lệnh giá
                            //            }
                            //            rs.Property4 = item.message;//lời message bc 2 / bc3
                            //            rs.Property11 = item.property11; // đánh dấu line chênh lệch giá
                            //            db.RequestDetails.Add(rs);
                            //            //db.SaveChanges();
                            //        }

                            //        int loai = objects[0].item;
                            //        if (loai == 2)
                            //        {
                            //            string ND_conversation = objects[0].chenhlenh;
                            //            string message_chenhlenh = "“Báo giá của Hạng mục <" + ND_conversation + "> lớn hơn đơn giá chuẩn, mời anh chị RSM xem xét và duyệt chi phí”";
                            //            var conversation = new Conversation();
                            //            conversation.RequestId = request.Id;
                            //            conversation.Sender = "-1"; //Edit - LuanNT44 - 10/07/2018 - CSVC sender
                            //            conversation.Message = message_chenhlenh;
                            //            conversation.Status = Key.Status.Available;
                            //            conversation.TimeCreate = DateTime.Now;
                            //            conversation.Type = 11;
                            //            conversation.StepNo = request.StepNo;
                            //            db.Conversations.Add(conversation);

                            //            //ghi thông tin trao đổi lên bc 2 có chênh lệch giá chuẩn
                            //            SqlParameter[] Pram = new SqlParameter[]
                            //                    {
                            //                        new SqlParameter("@RequestID",request.Id),
                            //                        new SqlParameter("@Flag", 6)
                            //                    };
                            //            sql.ExecuteCommand("CreateAndUpdateDetail_outToins_24", CommandType.StoredProcedure, Pram);
                            //        }
                            //        if (loai == 3)
                            //        {
                            //            //ghi thông tin trao đổi lên bc 2 không có chênh lệch giá chuẩn
                            //            SqlParameter[] Pram = new SqlParameter[]
                            //                    {
                            //                        new SqlParameter("@RequestID",request.Id),
                            //                        new SqlParameter("@Flag", 7)
                            //                    };
                            //            sql.ExecuteCommand("CreateAndUpdateDetail_outToins_24", CommandType.StoredProcedure, Pram);
                            //        }
                            //    }
                            //    if (flagStep > 0)
                            //    {
                            //        request.StepNo += 1;
                            //    }
                            //}
                            #endregion
                        }
                        else if (request.TypeId == 121)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity6 = item.Approved;
                                        requestdetail.Property7 = item.SoHopDong;
                                        requestdetail.Property10 = item.LyDo;
                                        requestdetail.Note = item.GhiChu;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 124)
                        {
                            #region Automatic
                            //►	Edit - VietMXH - 13/09/2018 - 124 - Không xử lý==================================================
                            #endregion
                        }
                        else if (request.TypeId == 128)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = null;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.Property7 = item.ThongTin__File;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 129)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Approved = item.Approved;
                                    }

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 134)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                string MST = string.Empty;
                                string TxtVendorName = string.Empty;
                                string TxtDCDN = string.Empty;
                                string TxtTinhTP = string.Empty;
                                string TxtQuanHuyen = string.Empty;
                                string TxtSDT = string.Empty;
                                string TxtFax = string.Empty;

                                string TxtQuyMoCT = string.Empty;
                                string TxtSoLuongCNV = string.Empty;
                                string TxtShop = string.Empty;
                                string TxtChuTK = string.Empty;
                                string TxtSoTK = string.Empty;
                                string TxtChietKhau = string.Empty;
                                string TxtNganHangChietKhau = string.Empty;
                                string TxtChiNhanhNHChietKhau = string.Empty;
                                string TxtHoTenDaiDienDN = string.Empty;
                                string TxtSDTDaiDienDN = string.Empty;
                                string TxtEmailDaiDienDN = string.Empty;
                                string TxtPhuTrach = string.Empty;
                                string TxtChucVuPhuTrachNhanSu = string.Empty;
                                string TxtSDTPhuTrach = string.Empty;
                                string TxtEmailPhuTrach = string.Empty;
                                string TxtChietKhauPhuTrach = string.Empty;

                                string TxttraoDoi = string.Empty;
                                string TxtChuVuNguoiDaiDienDN = string.Empty;
                                string TxtNgayCapNhatCBCNV = string.Empty;
                                string TxtNgayChiLuong = string.Empty;
                                string TxtNgayChotSaoKe = string.Empty;
                                string TxtNgayGuiSaoKe = string.Empty;
                                string TxtNganhNghe = string.Empty;
                                string TxtHTThuHo = string.Empty;
                                string TxtEmailCC = string.Empty;
                                string CheckS = string.Empty;

                                string TxtNguoiPTTH = string.Empty;
                                string TxtCVNguoiPTTH = string.Empty;
                                string TxtDTNguoiPTTH = string.Empty;
                                string TxtEmailNguoiPTTH = string.Empty;
                                string TxtChietKhauNguoiPTTH = string.Empty;
                                string TxtTenVietTatVendor = string.Empty;
                                int TxtNgayThanhToanNo = 0;
                                int CheckTraThang = 0;
                                string TxtnamHDCuaDN = string.Empty;
                                string TxtDuoiEmail = string.Empty;
                                //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                string TxtPhongBanNguoiDaiDienDN = string.Empty;
                                string TxtPhongBanPhuTrachNhanSu = string.Empty;
                                string TxtPBNguoiPTTH = string.Empty;
                                //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                foreach (var item in objects)
                                {
                                    CheckS = item.CheckS;
                                    TxtVendorName = item.TxtVendorName;
                                    TxtTenVietTatVendor = item.TxtTenVietTatVendor;
                                    TxtNgayThanhToanNo = item.TxtNgayThanhToanNo;
                                    CheckTraThang = item.CheckTraThang;
                                    MST = item.TxtMST;
                                    TxtDCDN = item.TxtDCDN;
                                    TxtTinhTP = item.TxtTinhTP;
                                    TxtQuanHuyen = item.TxtQuanHuyen;
                                    TxtSDT = item.TxtSDT;
                                    TxtFax = item.TxtFax;
                                    TxtHTThuHo = item.TxtHTThuHo;

                                    TxtQuyMoCT = item.TxtQuyMoCT;
                                    TxtSoLuongCNV = item.TxtSoLuongCNV;
                                    TxtShop = item.TxtShop;
                                    TxtChuTK = item.TxtChuTK;
                                    TxtSoTK = item.TxtSoTK;
                                    TxtChietKhau = item.TxtChietKhau;
                                    TxtNganHangChietKhau = item.TxtNganHangChietKhau;
                                    TxtChiNhanhNHChietKhau = item.TxtChiNhanhNHChietKhau;
                                    TxtHoTenDaiDienDN = item.TxtHoTenDaiDienDN;
                                    TxtSDTDaiDienDN = item.TxtSDTDaiDienDN;
                                    TxtEmailDaiDienDN = item.TxtEmailDaiDienDN;
                                    TxtPhuTrach = item.TxtPhuTrach;
                                    TxtChucVuPhuTrachNhanSu = item.TxtChucVuPhuTrachNhanSu;
                                    TxtSDTPhuTrach = item.TxtSDTPhuTrach;
                                    TxtEmailPhuTrach = item.TxtEmailPhuTrach;
                                    TxtChietKhauPhuTrach = item.TxtChietKhauPhuTrach;
                                    TxtEmailCC = item.TxtEmailCC;
                                    TxttraoDoi = item.TxttraoDoi;
                                    TxtChuVuNguoiDaiDienDN = item.TxtChuVuNguoiDaiDienDN;
                                    TxtNgayCapNhatCBCNV = item.TxtNgayCapNhatCBCNV;
                                    TxtNgayChiLuong = item.TxtNgayChiLuong;
                                    TxtNgayChotSaoKe = item.TxtNgayChotSaoKe;
                                    TxtNgayGuiSaoKe = item.TxtNgayGuiSaoKe;
                                    TxtNganhNghe = item.TxtNganhNghe;

                                    TxtNguoiPTTH = item.TxtNguoiPTTH;
                                    TxtCVNguoiPTTH = item.TxtCVNguoiPTTH;
                                    TxtDTNguoiPTTH = item.TxtDTNguoiPTTH;
                                    TxtEmailNguoiPTTH = item.TxtEmailNguoiPTTH;
                                    TxtChietKhauNguoiPTTH = item.TxtChietKhauNguoiPTTH;
                                    TxtnamHDCuaDN = item.TxtnamHDCuaDN;
                                    TxtDuoiEmail = item.TxtDuoiEmail;
                                    //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                    TxtPhongBanNguoiDaiDienDN = item.TxtPhongBanNguoiDaiDienDN;
                                    TxtPhongBanPhuTrachNhanSu = item.TxtPhongBanPhuTrachNhanSu;
                                    TxtPBNguoiPTTH = item.TxtPBNguoiPTTH;
                                    //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                    //============= Lưu vào ErrorCode
                                    request.ErrorCode = item.CheckS;
                                    request.ReferenceCode = item.CheckHopDong;
                                    request.RequestIdRefer = item.CheckNganHang;
                                    request.TotalRequestComplete = item.CheckTraThang;
                                }

                                SqlParameter[] paramS = new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id) ,
                                    new SqlParameter("@VendorName", TxtVendorName) ,
                                    new SqlParameter("@TxtTenVietTatVendor", TxtTenVietTatVendor) ,
                                    new SqlParameter("@TxtNgayThanhToanNo", TxtNgayThanhToanNo) ,
                                    new SqlParameter("@TxtnamHDCuaDN", TxtnamHDCuaDN) ,
                                    new SqlParameter("@MST", MST) ,
                                    new SqlParameter("@NganhNghe", TxtNganhNghe) ,
                                    new SqlParameter("@TxtDCDN", TxtDCDN) ,
                                    new SqlParameter("@TxtTinhTP", TxtTinhTP) ,
                                    new SqlParameter("@TxtQuanHuyen", TxtQuanHuyen) ,
                                    new SqlParameter("@TxtSDT", TxtSDT) ,
                                    new SqlParameter("@TxtFax", TxtFax) ,
                                    new SqlParameter("@TxtHTThuHo", TxtHTThuHo) ,

                                    new SqlParameter("@TxtQuyMoCT", TxtQuyMoCT) ,
                                    new SqlParameter("@TxtSoLuongCNV", TxtSoLuongCNV) ,
                                    new SqlParameter("@TxtShop", TxtShop) ,
                                    new SqlParameter("@TxtNgayCapNhatCBCNV", TxtNgayCapNhatCBCNV) ,
                                    new SqlParameter("@TxtNgayChiLuong", TxtNgayChiLuong) ,
                                    new SqlParameter("@TxtNgayChotSaoKe", TxtNgayChotSaoKe) ,
                                    new SqlParameter("@TxtNgayGuiSaoKe", TxtNgayGuiSaoKe) ,
                                    new SqlParameter("@TxtChuTK", TxtChuTK) ,
                                    new SqlParameter("@TxtSoTK", TxtSoTK) ,
                                    new SqlParameter("@TxtChietKhau", TxtChietKhau) ,
                                    new SqlParameter("@TxtNganHangChietKhau", TxtNganHangChietKhau) ,
                                    new SqlParameter("@TxtChiNhanhNHChietKhau", TxtChiNhanhNHChietKhau) ,
                                    new SqlParameter("@TxtHoTenDaiDienDN", TxtHoTenDaiDienDN) ,
                                    new SqlParameter("@TxtChuVuNguoiDaiDienDN", TxtChuVuNguoiDaiDienDN) ,
                                    new SqlParameter("@TxtSDTDaiDienDN", TxtSDTDaiDienDN) ,
                                    new SqlParameter("@TxtEmailDaiDienDN", TxtEmailDaiDienDN) ,
                                    new SqlParameter("@TxtPhuTrach", TxtPhuTrach) ,
                                    new SqlParameter("@TxtChucVuPhuTrachNhanSu", TxtChucVuPhuTrachNhanSu) ,
                                    new SqlParameter("@TxtSDTPhuTrach", TxtSDTPhuTrach) ,
                                    new SqlParameter("@TxtEmailPhuTrach", TxtEmailPhuTrach) ,
                                    new SqlParameter("@TxtChietKhauPhuTrach", TxtChietKhauPhuTrach) ,

                                    new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode) ,
                                    new SqlParameter("@TraThang", CheckTraThang) ,
                                    new SqlParameter("@TxtDuoiEmail", TxtDuoiEmail),
                                    //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                    new SqlParameter("@TxtPhongBanNguoiDaiDienDN", TxtPhongBanNguoiDaiDienDN),
                                    new SqlParameter("@TxtPhongBanPhuTrachNhanSu", TxtPhongBanPhuTrachNhanSu),
                                    //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                };

                                DataTable tableF = sql.ExecuteCommand("FRT_Vendor_Save_After_Create_Calllog_UpDate", CommandType.StoredProcedure, paramS);

                                if (TxtHTThuHo == "HR")
                                {
                                    //============== Update thông tin NV Ngân hàng
                                    SqlParameter[] paramX = new SqlParameter[] {
                                    new SqlParameter("@RequestId",  request.Id) ,
                                    new SqlParameter("@TxtNguoiPTTH", TxtNguoiPTTH) ,
                                    new SqlParameter("@TxtCVNguoiPTTH", TxtCVNguoiPTTH) ,
                                    new SqlParameter("@TxtDTNguoiPTTH", TxtDTNguoiPTTH) ,
                                    new SqlParameter("@TxtEmailNguoiPTTH", TxtEmailNguoiPTTH) ,
                                    new SqlParameter("@TxtChietKhauNguoiPTTH", TxtChietKhauNguoiPTTH) ,
                                    new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode),
                                    //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                    new SqlParameter("@TxtPBNguoiPTTH", TxtPBNguoiPTTH),
                                    //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                    };
                                    DataTable tableX = sql.ExecuteCommand("CalllogVendor_SavePTTHNH_Details", CommandType.StoredProcedure, paramX);
                                }
                                //============ Hiền.Đoàn 17.01.2017 Update DN thành tiếp cận
                                SqlParameter[] paramZ = new SqlParameter[] {
                                    new SqlParameter("@RequestId",  request.Id),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                                DataTable tableZ = sql.ExecuteCommand("CalllogVendor_UpdateStatusVendor", CommandType.StoredProcedure, paramZ);

                                //================ Lưu thông tin người đại diện mua hàng
                                var DataSMuaHangFULL = Convert.ToString(form["DataSMuaHangFULL"]);
                                var MuaHangFULL = JsonConvert.DeserializeObject<dynamic>(DataSMuaHangFULL);

                                DataTable tablet = new DataTable();
                                tablet.Columns.Add("Id", typeof(string));
                                tablet.Columns.Add("HoTenMuaHang", typeof(string));
                                tablet.Columns.Add("ChucVuMuaHang", typeof(string));
                                tablet.Columns.Add("SDTMuaHang", typeof(string));
                                tablet.Columns.Add("EmailMuaHang", typeof(string));


                                if (MuaHangFULL != null && MuaHangFULL.ToString() != "[]")
                                {

                                    string HoTenMuaHang = string.Empty;
                                    string ChucVuMuaHang = string.Empty;
                                    string SDTMuaHang = string.Empty;
                                    string EmailMuaHang = string.Empty;
                                    string Id = string.Empty;
                                    foreach (var item in MuaHangFULL)
                                    {
                                        Id = item.Id;
                                        HoTenMuaHang = item.HoTenMuaHang;
                                        ChucVuMuaHang = item.ChucVuMuaHang;
                                        SDTMuaHang = item.SDTMuaHang;
                                        EmailMuaHang = item.EmailMuaHang;

                                        tablet.Rows.Add(Id, HoTenMuaHang, ChucVuMuaHang, SDTMuaHang, EmailMuaHang);
                                    }

                                    SqlParameter[] paramM = new SqlParameter[]
                                    {
                                    new SqlParameter("@Type",  1) ,
                                    new SqlParameter("@RequestId",  request.Id) ,
                                    new SqlParameter("@Table", tablet) ,
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                                    DataTable tableM = sql.ExecuteCommand("CalllogVendor_UpdateNguoiDaiDienMuaHang", CommandType.StoredProcedure, paramM);
                                }
                                else
                                {
                                    SqlParameter[] paramX = new SqlParameter[]
                                    {
                                    new SqlParameter("@Type",  0) ,
                                    new SqlParameter("@RequestId",  request.Id) ,
                                    new SqlParameter("@Table", tablet) ,
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                                    DataTable tableX = sql.ExecuteCommand("CalllogVendor_UpdateNguoiDaiDienMuaHang", CommandType.StoredProcedure, paramX);
                                }
                            }

                            #endregion
                        }
                        else if (request.TypeId == 135)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Quantity6 = item.Approved;
                                        requestdetail.Property7 = item.SoHopDong;
                                        requestdetail.Property10 = item.LyDo;
                                        requestdetail.Money4 = item.SoTienTraTruoc == "" ? null : item.SoTienTraTruoc;
                                    }
                                    //if (item.Approved == 1)
                                    //{
                                    //sql.ExecuteWithoutResult("HangDoi_UpdateTrangThai", CommandType.StoredProcedure, new SqlParameter[] 
                                    //{ 
                                    //    new SqlParameter("@IDCallLog", request.Id),
                                    //    new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                                    //});
                                    //}

                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 138)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property10 = item.StatusHoanTien;
                                        requestdetail.Note = item.Note;
                                        requestdetail.Approved = item.Approved;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 141)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property7 = item.TrangThaiDonHang;
                                        // Add - TrungNC3 - 19-10-2017 - IN ỐP LƯNG
                                        if (item.LyDoXuLyLai != "")
                                        {
                                            requestdetail.Property8 += UserManager.CurrentUser.EmployeeCode + " - " + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " - " + item.LyDoXuLyLai + "<br />";// Add - TrungNC3 - 24-10-2017 - IN ỐP LƯNG
                                        }
                                        requestdetail.Property9 = item.MaVanDon;
                                    }
                                }
                            }
                            #endregion
                        }
                        else if (request.TypeId == 142)
                        {
                            #region Automatic
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    long id = item.Id;
                                    double money2 = item.Money2 != null ? Convert.ToDouble(item.Money2) : 0;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        if (money2 == 0)
                                        {
                                            requestdetail.Status = 0;
                                        }
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.SaleCode = item.SoTKNH;
                                        requestdetail.Quantity1 = item.IdBank;
                                        requestdetail.Quantity2 = item.IdChiNhanhNganHang;
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Property20 = item.LyDoKhongThanhCong;
                                        requestdetail.Note += " " + item.Note;
                                    }
                                }
                            }
                            #endregion
                        }
                        //▼	Add - TuanNA89 - 10/12/2019 - Calllog Hợp đồng trả góp Mirae giải ngân thất bại - Loại 161
                        else if (request.TypeId == 161)
                        {
                            #region Automatic
                            if (objects.ToString() != "[]")
                            {
                                RequestDetail requestdetail = new RequestDetail();
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions
                                    {
                                        IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted
                                    }))
                                    {
                                        requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    }
                                    if (requestdetail != null)
                                    {
                                        requestdetail.Property7 = item.TinhTrangXuLy.ToString();
                                        db.SaveChanges();
                                    }
                                }
                            }
                            #endregion
                        }
                        //▲ Add - TuanNA89 - 10/12/2019 - Calllog Hợp đồng trả góp Mirae giải ngân thất bại - Loại 161
                        else
                        {
                            #region Automatic
                            if (objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null)
                                    {
                                        requestdetail.ItemId = item.ItemId;
                                        requestdetail.Quantity = item.Quantity;
                                        requestdetail.Note = item.Note;
                                        //requestdetail.Status = item.Status
                                        requestdetail.Sum = item.Sum;
                                        requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                        requestdetail.EmpCode = item.EmpCode;
                                        requestdetail.Price = item.Price;
                                        //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                        requestdetail.ShopCode = item.ShopCode;
                                        requestdetail.ShopCode2 = item.ShopCode2;
                                        requestdetail.OfficeCode = item.OfficeCode;
                                        requestdetail.CustomerCode = item.CustomerCode;
                                        requestdetail.CustomerName = item.CustomerName;
                                        requestdetail.SaleCode = item.SaleCode;
                                        #region Time1
                                        if (item.Time1 == null)
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time1;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time1 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time2
                                        if (item.Time2 == null)
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time2;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time2 = null;
                                            }
                                        }
                                        #endregion
                                        #region Time3
                                        if (item.Time3 == null)
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                        else
                                        {
                                            string timeStart = item.Time3;
                                            string[] timeArr = timeStart.Split('/');
                                            if (timeArr.Length == 3)
                                            {
                                                string format = String.Format("{0}/{1}/{2}"
                                                   , timeArr[0].Length == 1 ? "d" : "dd"
                                                   , timeArr[1].Length == 1 ? "M" : "MM"
                                                   , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                                requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                            }
                                            else
                                            {
                                                requestdetail.Time3 = null;
                                            }
                                        }
                                        #endregion
                                        requestdetail.Money1 = item.Money1;
                                        requestdetail.Money2 = item.Money2;
                                        requestdetail.Money3 = item.Money3;
                                        requestdetail.Money4 = item.Money4;
                                        requestdetail.ProductCode = item.ProductCode;
                                        requestdetail.ProductName = item.ProductName;
                                        requestdetail.Imei = item.Imei;
                                        requestdetail.Approved = item.Approved;
                                        requestdetail.EmpCode1 = item.EmpCode1;
                                        requestdetail.EmpCode2 = item.EmpCode2;
                                        requestdetail.EmpCode3 = item.EmpCode3;
                                        requestdetail.Quantity1 = item.Quantity1;
                                        requestdetail.Quantity2 = item.Quantity2;
                                        requestdetail.Quantity3 = item.Quantity3;
                                        requestdetail.Quantity4 = item.Quantity4;
                                        requestdetail.Property1 = item.Property1;
                                        requestdetail.Property2 = item.Property2;
                                        requestdetail.Property3 = item.Property3;
                                        requestdetail.Property4 = item.Property4;
                                        requestdetail.JobCode1 = item.JobCode1;
                                        requestdetail.JobCode2 = item.JobCode2;

                                    }
                                }
                            }
                            #endregion

                            #region verify target and update via BI
                            if (request.TypeId == 90 && request.StepNo == 1)
                            {
                                db.SaveChanges();
                                var detail = db.RequestDetails
                                    .Where(x => x.RequestId == request.Id
                                        && x.Status == Key.Status.Available
                                        && x.Money3 == null)
                                    .FirstOrDefault();
                                if (detail != null)
                                {
                                    TempData["Message"] = "Phải nhập Target tháng ASM nhận";
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                                db.RequestDetails
                                    .Where(x => x.RequestId == request.Id
                                        && x.Status == Key.Status.Available)
                                    .ToList().ForEach(x => x.Money4 = x.Money3);
                            }
                            #endregion
                        }
                        #endregion

                        #region UpdateImageChecked
                        if (imageChecked != "")
                        {
                            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", request.Id), new SqlParameter("@FileAttachIds", imageChecked) };
                            sql.ExecuteWithoutResult("FileAttach_Update", CommandType.StoredProcedure, param);
                        }
                        #endregion

                        #region UploadImage
                        foreach (string fileName in Request.Files)
                        {
                            HttpPostedFileBase file = Request.Files[fileName];
                            //Save file content goes here
                            string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                            if (file != null && file.ContentLength > 0)
                            {
                                // Save file
                                var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                                string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                                var path = string.Format("{0}\\{1}", pathString, fName);
                                file.SaveAs(path);
                                // Save file attach fo database

                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                db.FileAttachs.Add(fileAttach);

                                //==================== Hiền.Đoàn 18.01.2016 Lưu file của loại CL DN
                                if (request.TypeId == 134)
                                {
                                    sql.ExecuteWithoutResult("CalllogVendor_SaveUploadFile", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@Uri", Keyword.GetFolderFileAttach() + fName),
                                        new SqlParameter("@StepNo", request.StepNo),
                                        new SqlParameter("@RequestId", request.Id),
                                        new SqlParameter("@TimeCreate", DateTime.Now),
                                        new SqlParameter("@Status", Key.Status.Available),
                                        new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode)
                                    });
                                }
                            }
                        }



                        #endregion

                        #region Gan nguoi xu lý mới
                        if (request.TypeId == 135 && (objects[0].Approved == 4 || objects[0].Approved == 5))
                        {
                            request.Status = Key.StatusRequest.Complete;
                            request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                            request.TimeClose = DateTime.Now;
                            request.StepStatus = Key.StatusRequest.Reply;
                        }
                        // Add - TrungNC3 - 19-10-2017 - IN ỐP LƯNG
                        else if (request.TypeId == 141 && request.StepNo == 1 && form["ApprovedPrintPartner"].ToString() == "3") //▼ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                        {
                            db.SaveChanges(); //▼ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                            sql.ExecuteWithoutResult("sp_UpdateStepNoCallLogPrinting", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@StatusOrder", 3),
                                });
                            sql.ExecuteWithoutResult("FRT_OpLungUpdateStatusFromCallLog", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@calllogid", request.Id),
                                    new SqlParameter("@status", "Chờ xử lý lại"),
                                    new SqlParameter("@note",form["txt_LyDoXuLyLai"].ToString()!=null?form["txt_LyDoXuLyLai"].ToString():""),
                                });
                        }
                        // Add - TrungNC3 - 19-10-2017 - IN ỐP LƯNG
                        else
                        {
                            request.Status = Key.StatusRequest.Processing;
                            request.StepNo += 1;
                            request.StepStatus = Key.StatusRequest.Waitting;
                            DataTable table = sql.ExecuteCommand("Assigners_InsertForRequest", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId",request.Id),
                                new SqlParameter("@StepNo",request.StepNo)
                            });
                            if (table != null && table.Rows.Count > 0)
                                request.Assigner = table.Rows[0]["Assigner"].ToString();
                            else
                                request.Assigner = string.Empty;
                        }


                        #endregion

                        request.TimeLastUpdate = DateTime.Now;
                        request.UpdateBy = UserManager.CurrentUser.InsideCode;

                        db.SaveChanges();

                        //▼ Add - LuanNT44 -07/05/2018 - Loại 24 - Sửa chữa CSVC
                        //if (request.TypeId == 24)
                        //{
                        //    if (flag_step == 1)
                        //    {
                        //        //tạo mới detail bên inside (sp_CreateDetail_Insside_24)
                        //        if (request.Id > 0)
                        //        {
                        //            SqlParameter[] Pram = new SqlParameter[]
                        //                        {
                        //                            new SqlParameter("@RequestID",request.Id),
                        //                            new SqlParameter("@Flag", 1)
                        //                        };
                        //            sql.ExecuteCommand("CreateAndUpdateDetail_outToins_24", CommandType.StoredProcedure, Pram);
                        //        }
                        //    }

                        //    if (request.StepNo != 4) //RequestStep khi savechange data
                        //    {
                        //        //update step and assigner bên outside (sp_updateStep_Insside_24)
                        //        if (request.Id > 0)
                        //        {
                        //            //Tạo mới detail outside
                        //            SqlParameter[] Pram = new SqlParameter[]
                        //                        {
                        //                            new SqlParameter("@RequestID",request.Id),
                        //                            new SqlParameter("@Flag", 2)
                        //                        };
                        //            sql.ExecuteCommand("CreateAndUpdateDetail_outToins_24", CommandType.StoredProcedure, Pram);
                        //        }
                        //    }
                        //}
                        //▲ Add - LuanNT44 -07/05/2018 - Loại 24 - Sửa chữa CSVC

                        #region Update Duyệt trả góp Sinh Viên
                        if (request.TypeId == 135 && (request.StepNo == 2 || request.Status == Key.StatusRequest.Complete))
                        {
                            RequestDetail detailsTraGop = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id
                                && x.Status == Key.Status.Available);
                            if (detailsTraGop != null)
                            {
                                sql.ExecuteWithoutResult("CRM_UpdateApprove", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@DocEntryCTTraGopCRM", detailsTraGop.Property8),
                                    new SqlParameter("@Sohopdong", detailsTraGop.Property7 == null || detailsTraGop.Property7 == "" ? "" : detailsTraGop.Property7),
                                    new SqlParameter("@Status",detailsTraGop.Quantity6),
                                    new SqlParameter("@GhiChu",detailsTraGop.Note),
                                    new SqlParameter("@IDCallLog",request.Id)
                                });
                            }

                            if (falgCompletContinueAssigner == true)
                            {
                                sql.ExecuteWithoutResult("FRT_SP_ChiaCallLog_HangDoi", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                                });
                            }
                            else
                            {
                                SqlParameter[] param = new SqlParameter[] {
                                    new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@Status","0")
                                };
                                sql.ExecuteWithoutResult("FRT_SP_DoiTrangThaiUser", CommandType.StoredProcedure, param);
                            }

                        }

                        #endregion
                        #region "Xét chuyển trạng thái callLog theo trạng thái đơn hàng"
                        //Không chuyển bước
                        if (request.TypeId == 141 && request.StepNo == 2 && form["ApprovedPrintPartner"].ToString() == "1") //▼ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                        {
                            //▼ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                            sql.ExecuteWithoutResult("sp_UpdateStepNoCallLogPrinting", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@StatusOrder",1),
                                });
                            //▲ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                            sql.ExecuteWithoutResult("FRT_OpLungUpdateStatusFromCallLog", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@calllogid", request.Id),
                                    new SqlParameter("@status", "Đã chuyển nhà in"), //▼ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                                    new SqlParameter("@note",form["txt_LyDoXuLyLai"].ToString()!=null?form["txt_LyDoXuLyLai"].ToString():""),
                                });
                        }
                        //▼ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                        if (request.TypeId == 141 && request.StepNo == 3 && form["ApprovedPrintPartner"].ToString() == "1")
                        {
                            sql.ExecuteWithoutResult("sp_UpdateStepNoCallLogPrinting", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@StatusOrder",1),
                                });
                            sql.ExecuteWithoutResult("FRT_OpLungUpdateStatusFromCallLog", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@calllogid", request.Id),
                                    new SqlParameter("@status", "Đã chuyển nhà in"),
                                    new SqlParameter("@note",form["txt_LyDoXuLyLai"].ToString()!=null?form["txt_LyDoXuLyLai"].ToString():""),
                                });
                        }
                        //Đang in chuyển bước 2  - Gán người xử lý theo phân công phân quyền
                        if (request.TypeId == 141 && request.StepNo == 2 && form["ApprovedPrintPartner"].ToString() == "2")
                        {
                            sql.ExecuteWithoutResult("FRT_OpLungUpdateStatusFromCallLog", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@calllogid", request.Id),
                                    new SqlParameter("@status", "Đang in"),
                                    new SqlParameter("@note",form["txt_LyDoXuLyLai"].ToString()!=null?form["txt_LyDoXuLyLai"].ToString():""),
                                });
                        }

                        //Đã chuyển hàng  - Cập nhật bước và gán người xử lý cho SM shop
                        if (request.TypeId == 141 && request.StepNo == 3 && form["ApprovedPrintPartner"].ToString() == "4")
                        {
                            sql.ExecuteWithoutResult("sp_UpdateStepNoCallLogPrinting", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@StatusOrder", 4),
                                });
                            sql.ExecuteWithoutResult("FRT_OpLungUpdateStatusFromCallLog", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@calllogid", request.Id),
                                    new SqlParameter("@status", "Đã chuyển hàng"),
                                    new SqlParameter("@note",form["txt_LyDoXuLyLai"].ToString()!=null?form["txt_LyDoXuLyLai"].ToString():""),
                                });
                        }
                        //▲ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                        #endregion "Xét chuyển trạng thái callLog theo trạng thái đơn hàng"
                        if (request.TypeId == 142 && request.StepNo == 1 && form["ApprovedComplete"].ToString() == "1")
                        {
                            //▼ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                            sql.ExecuteWithoutResult("sp_AutoCompleteCallLogRefundStep1", CommandType.StoredProcedure, new SqlParameter[] {
                                    new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@RequestId", request.Id),
                                });
                        }
                        //▲ Add - TrungNC3 - 15-03-2018 - Auto hoàn tất calllog khi ko có chuyển trả
                        #region Gửi mail
                        XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.ChangeStep, UserManager.CurrentUser.InsideCode);
                        TempData["Message"] = "Chuyển bước thành công!";
                        #endregion

                        if (request.TypeId == 135 && (objects[0].Approved == 4 || objects[0].Approved == 5))
                        {
                            TempData["Message"] = "Hoàn tất thành công!";
                        }
                        //▼ Add - TrungNC3 - 15-03-2018 - Auto hoàn tất calllog khi ko có chuyển trả
                        if (request.TypeId == 142 && request.StepNo == 1 && form["ApprovedComplete"].ToString() == "1") //▼ Add - TrungNC3 - 23-10-2017 - IN ỐP LƯNG
                        {
                            TempData["Message"] = "Hoàn tất thành công do không có line nào được chuyển trả!";
                        }
                        //▲ Add - TrungNC3 - 15-03-2018 - Auto hoàn tất calllog khi ko có chuyển trả
                        return RedirectToAction("Index", "Home");
                    }
                    else
                    {
                        TempData["Message"] = "Chỉ người xử lý hoặc người trong nhóm xử lý mới được quyền chuyển bước";
                        return RedirectToAction("Details", "Requests", new { id = request.Id });
                    }
                }
                else
                {
                    #region Not Valid
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region ===Log loi===
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} -  Id:{1} - sender :{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }
        [ValidateInput(false)]
        public ActionResult Complete(FormCollection form)
        {
            #region ===Kiểm tra Đăng nhập===
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            #endregion

            var requestId = form["RequestId"].EParseToLong();
            string sender = UserManager.CurrentUser.InsideCode;
            try
            {
                #region ===Thông tin===
                string message = form["Message"].ToString();
                var details = form["Details"].ToString();
                var objects = JsonConvert.DeserializeObject<dynamic>(details);
                var falgCompletContinueAssigner = form["CompleteContinueAssigner"].ToString() == "1" ? true : false;
                var detailsCc = form["DetailsCc"].ToString();
                var Ccs = JsonConvert.DeserializeObject<dynamic>(detailsCc);
                string CapNhatPos = string.Empty;
                #endregion

                Request request = null;
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                }
                if (request != null)
                {
                    int statusRequestBefore = request.Status;
                    List<Permission> permissions = GetPermissions(request.Id);

                    #region ===Vetify===
                    if (request.Status == Key.StatusRequest.Complete && request.TypeId != 121 && request.TypeId != 127 && request.TypeId != 135)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hoàn tất không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (permissions.Contains(RequestsController.Permission.Sender) && request.Status != Key.StatusRequest.Reply
                        && !permissions.Contains(RequestsController.Permission.Admin)
                        && !permissions.Contains(RequestsController.Permission.SupperAdmin)
                        && !permissions.Contains(RequestsController.Permission.Assigner)
                        && !permissions.Contains(RequestsController.Permission.GroupAssigner))
                    {
                        TempData["Message"] = "Người tạo yêu cầu chỉ được hoàn tất khi yêu cầu Đã trả lời !";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (request.Status == Key.StatusRequest.Cancel)
                    {
                        TempData["Message"] = "Trạng Thái Request đã hủy không thể cập nhật!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (details == "" && !permissions.Contains(Permission.SupperAdmin))
                    {
                        TempData["Message"] = "Không Lấy được dữ liệu cập nhật vui lòng gửi lại!";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (!permissions.Contains(Permission.Assigner) && !permissions.Contains(Permission.GroupAssigner)
                        && !permissions.Contains(Permission.Sender)
                        && !permissions.Contains(Permission.Admin) && !permissions.Contains(Permission.SupperAdmin))
                    {
                        TempData["Message"] = "Không có quyền hoàn tất";
                        return RedirectToAction("Details", new { Id = request.Id });
                    }
                    if (request.TypeId == 135)
                    {
                        var requestDetail_135 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id
                                                            && x.Status == Key.Status.Available);
                        if (requestDetail_135 != null && request.StepNo == 3 && (requestDetail_135.Property17 == null || requestDetail_135.Property17 == ""))
                        {
                            TempData["Message"] = "Vui lòng Upload hình ảnh Biên bản bàn giao trước khi hoàn tất!";
                            return RedirectToAction("Details", new { Id = request.Id });
                        }
                    }
                    #endregion

                    #region ===Insert Converstation===
                    if (message.Length > 0)
                    {
                        var conversation = new Conversation();
                        conversation.RequestId = request.Id;
                        conversation.Sender = sender;
                        conversation.Message = message;
                        conversation.Status = Key.Status.Available;
                        conversation.TimeCreate = DateTime.Now;
                        foreach (var item in objects)
                        {
                            if (item.Approved == 4 || item.Approved == 5)
                                conversation.Type = Key.Conversation.Reply;
                            else
                                conversation.Type = Key.Conversation.Comment;
                        }
                        conversation.StepNo = request.StepNo;
                        db.Conversations.Add(conversation);
                    }
                    #endregion

                    RequestStep step = null;
                    using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                    {
                        step = db.RequestSteps.FirstOrDefault(x => x.RequestId == request.Id && x.Status == Key.Status.Available && x.StepNo == request.StepNo);
                    }
                    byte oldStatus = request.Status;

                    if (request.Status != Key.StatusRequest.Complete)
                    {
                        request.Status = Key.StatusRequest.Complete;
                        request.TimeFinish = request.TimeFinish == null ? DateTime.Now : request.TimeFinish;
                        request.TimeClose = DateTime.Now;
                        request.StepStatus = Key.StatusRequest.Reply;
                        if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                            permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            request.Assigner = sender;
                        }
                        if (permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                        {
                            request.TimeLastAdminUpdate = DateTime.Now;
                            request.LastAdminUpdate = sender;
                        }

                        #region Update or Insert RequestStep

                        if (step != null)
                        {
                            step.TimeEnd = step.TimeEnd == null ? DateTime.Now : step.TimeEnd;
                            if (permissions.Contains(Permission.Assigner) || permissions.Contains(Permission.GroupAssigner) ||
                                permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                            {
                                step.Assigner = sender;
                            }
                        }
                        else
                        {
                            RequestStep oldStep = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                oldStep = (from s in db.RequestSteps
                                           where s.RequestId == request.Id && s.StepNo == request.StepNo - 1 && s.Status == Key.Status.Available
                                           select s).FirstOrDefault();
                            }
                            step = new RequestStep();
                            step.RequestId = request.Id;
                            step.TimeCreate = DateTime.Now;
                            step.TimeStart = oldStep == null ? request.TimeCreate : oldStep.TimeEnd;
                            step.TimeEnd = DateTime.Now;
                            step.Assigner = sender;
                            step.StepNo = request.StepNo;
                            step.Status = Key.Status.Available;

                            db.RequestSteps.Add(step);
                        }
                        #endregion
                    }

                    #region ===Update Items===
                    //▼	Add - LuanNT44 - 14/05/2018 - Loại 24 - Sửa chữa CSVC
                    if (request.TypeId == 24)
                    {
                        //#region Automatic
                        //if (objects != null && objects.ToString() != "[]")
                        //{
                        //    foreach (var item in objects)
                        //    {
                        //        if (request.StepNo == 3)
                        //        {
                        //            //up hình
                        //            //flag_step = 3;
                        //            int id = item.RequestDId;
                        //            RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        //            if (requestdetail != null)
                        //            {
                        //                requestdetail.Time1 = DateTime.ParseExact(item.Ngaycapnhat.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        //            }
                        //        }
                        //        if (request.StepNo == 1)
                        //        {
                        //            if (item.item == 4)
                        //            {
                        //                RequestDetail rs = new RequestDetail();
                        //                rs.RequestId = request.Id;
                        //                rs.Property1 = item.Thietbi;
                        //                rs.Money1 = item.Dongia;
                        //                rs.Status = 1;
                        //                rs.Quantity2 = item.NCC;
                        //                rs.Quantity4 = item.Baohanh;
                        //                rs.Quantity5 = item.Soluong;
                        //                rs.Quantity6 = item.Tongtien;
                        //                rs.Property3 = item.message;
                        //                db.RequestDetails.Add(rs);
                        //                db.SaveChanges();
                        //            }
                        //        }
                        //    }
                        //    if (request.StepNo == 1)
                        //    {
                        //        if (objects[0].item == 4)
                        //        {
                        //            //--bước 1 NCC xác nhận không đồng ý sửa chữa, ghi thông báo trao đổi hiển thị cho CSVC bên inside
                        //            SqlParameter[] param = new SqlParameter[] {
                        //                            new SqlParameter("@RequestID", request.Id),
                        //                            new SqlParameter("@Flag", 5)
                        //                        };
                        //            sql.ExecuteWithoutResult("CreateAndUpdateDetail_outToins_24", CommandType.StoredProcedure, param);
                        //        }
                        //    }
                        //    if (request.StepNo == 3)
                        //    {
                        //        //up ảnh nghiệm thu auto mail
                        //        SqlParameter[] Pram2 = new SqlParameter[]
                        //                        {
                        //                            new SqlParameter("@RequestID",request.Id)
                        //                        };
                        //        sql.ExecuteCommand("sp_EmailRemindAutoCSVC_OUT_24", CommandType.StoredProcedure, Pram2);
                        //    }
                        //}
                        //#endregion
                    }
                    //▲	Add - LuanNT44 - 14/05/2018 - Loại 24 - Sửa chữa CSVC

                    else if (request.TypeId == 121)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity6 = item.Approved;
                                    requestdetail.Property7 = item.SoHopDong;
                                    requestdetail.Property10 = item.LyDo;
                                    requestdetail.Note = item.GhiChu;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 122)
                    {
                        #region claim nvc

                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property16 = item.SoHoaDon;
                                    request.isHighlight = item.isHighLight;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 124)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 01/04/2019 - CL cho Scoring==================================================
                        if ((statusRequestBefore < Key.StatusRequest.Complete) && objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    if (item.Approved == 1)
                                        requestdetail.Approved = true;
                                    else if (item.Approved == 0)
                                        requestdetail.Approved = false;
                                    else
                                        requestdetail.Approved = null;

                                    requestdetail.Quantity1 = ((item.NguoiLienHe_1__Duyet == 1) ? 1 : 0);
                                    if (item.NguoiLienHe_1__Duyet == 2)
                                    {
                                        requestdetail.Property3 = item.NLH_1_LyDoTuChoi + " - " + item.NguoiLienHe_1__GhiChu + " - " + item.NguoiLienHe_1__File;
                                        requestdetail.Property4 = null;
                                    }
                                    else
                                    {
                                        requestdetail.Property3 = item.NguoiLienHe_1__GhiChu;
                                        requestdetail.Property4 = item.NguoiLienHe_1__File;
                                    }

                                    requestdetail.Quantity2 = ((item.NguoiLienHe_2__Duyet == 1) ? 1 : 0);
                                    if (item.NguoiLienHe_2__Duyet == 2)
                                    {
                                        requestdetail.Property5 = item.NLH_2_LyDoTuChoi + " - " + item.NguoiLienHe_2__GhiChu + " - " + item.NguoiLienHe_2__File;
                                        requestdetail.Property6 = null;
                                    }
                                    else
                                    {
                                        requestdetail.Property5 = item.NguoiLienHe_2__GhiChu;
                                        requestdetail.Property6 = item.NguoiLienHe_2__File;
                                    }

                                    requestdetail.Property2 = string.IsNullOrEmpty(Convert.ToString(item.LyDo)) ? "" : Convert.ToString(item.LyDo);
                                }
                            }
                            using (DataTable dt = new DataTable())
                            {
                                dt.Columns.Add("ID", typeof(string));
                                dt.Columns.Add("IDCardCode", typeof(string));
                                dt.Columns.Add("VendorCode", typeof(string));
                                dt.Columns.Add("TenKH", typeof(string));
                                dt.Columns.Add("NhomKH", typeof(string));
                                dt.Columns.Add("GioiTinh", typeof(string));
                                dt.Columns.Add("NgaySinh", typeof(DateTime));
                                dt.Columns.Add("NoiSinh", typeof(string));
                                dt.Columns.Add("HoKhauThuongTru", typeof(string));
                                dt.Columns.Add("TinhThanhPho", typeof(string));
                                dt.Columns.Add("QuanHuyen", typeof(string));
                                dt.Columns.Add("PhuongXa", typeof(string));
                                dt.Columns.Add("CMND", typeof(string));
                                dt.Columns.Add("NgayCapCMND", typeof(DateTime));
                                dt.Columns.Add("NoiCapCMND", typeof(string));
                                dt.Columns.Add("SDT ", typeof(string));
                                dt.Columns.Add("Email ", typeof(string));
                                dt.Columns.Add("TinhTrangHonNhan ", typeof(string));
                                dt.Columns.Add("NguoiLienHe", typeof(string));
                                dt.Columns.Add("SDTNguoiLienHe", typeof(string));
                                dt.Columns.Add("QuanHeVoiNguoiLienHe", typeof(string));
                                dt.Columns.Add("MaNV", typeof(string));
                                dt.Columns.Add("ChucVu", typeof(string));
                                dt.Columns.Add("BoPhan", typeof(string));
                                dt.Columns.Add("NgayKyHopDong", typeof(DateTime));
                                dt.Columns.Add("SoBHXH", typeof(string));
                                dt.Columns.Add("LoaiHopDong", typeof(string));
                                dt.Columns.Add("TongLuongNV", typeof(string));
                                dt.Columns.Add("SoTKNH", typeof(string));
                                dt.Columns.Add("IdBank", typeof(string));
                                dt.Columns.Add("ChiNhanhNH", typeof(string));
                                dt.Columns.Add("IDCardCode_NhomTruong", typeof(string));
                                dt.Columns.Add("DonHangFFriend", typeof(string));
                                dt.Columns.Add("SoTienDNHoTro", typeof(string));
                                dt.Columns.Add("Passport", typeof(string));
                                dt.Columns.Add("ChiNhanhDN", typeof(string));
                                dt.Columns.Add("NguoiLienHe_2", typeof(string));
                                dt.Columns.Add("SDTNguoiLienHe_2", typeof(string));
                                dt.Columns.Add("QuanHeVoiNguoiLienHe_2", typeof(string));
                                //
                                dt.Columns.Add("Appr__CMND_MT", typeof(int));
                                dt.Columns.Add("Appr__CMND_MS", typeof(int));
                                dt.Columns.Add("Appr__GPLX_MT", typeof(int));
                                dt.Columns.Add("Appr__GPLX_MS", typeof(int));
                                dt.Columns.Add("Appr__TheNV", typeof(int));
                                dt.Columns.Add("Appr__ChanDungKH", typeof(int));
                                dt.Columns.Add("Appr__XacNhanNhanSu", typeof(int));
                                dt.Columns.Add("Appr__SHK_1", typeof(int));
                                dt.Columns.Add("Appr__SHK_2", typeof(int));
                                dt.Columns.Add("Appr__SHK_3", typeof(int));
                                dt.Columns.Add("Appr__SHK_4", typeof(int));
                                dt.Columns.Add("Appr__SHK_5", typeof(int));
                                dt.Columns.Add("Appr__SHK_6", typeof(int));
                                dt.Columns.Add("Appr__SHK_7", typeof(int));
                                dt.Columns.Add("Appr__SaoKeLuong_1", typeof(int));
                                dt.Columns.Add("Appr__SaoKeLuong_2", typeof(int));
                                dt.Columns.Add("Appr__SaoKeLuong_3", typeof(int));

                                foreach (var item in objects)
                                {
                                    string Id = (string)item.IdForm;
                                    string IDCardCode = (string)item.EmpCode;
                                    string VendorCode = (string)item.VendorCode;
                                    string TenKH = (string)item.CardName;
                                    string NhomKH = (string)item.NhomKH;
                                    string GioiTinh = (string)item.Gender;
                                    DateTime NgaySinh = item.Birthday == null || item.Birthday == "" ? DateTime.Now : (DateTime)item.Birthday;
                                    string NoiSinh = (string)item.NoiSinh;
                                    string HoKhauThuongTru = (string)item.DiaChiTamTru;
                                    string TinhThanhPho = (string)item.TinhThanhPho;
                                    string QuanHuyen = (string)item.QuanHuyen;
                                    string PhuongXa = (string)item.PhuongXa;
                                    string CMND = (string)item.CMND;
                                    DateTime NgayCapCMND = item.NgayCapCMND == null || item.NgayCapCMND == "" ? DateTime.Now : (DateTime)item.NgayCapCMND;
                                    string NoiCapCMND = (string)item.NoiCapCMND;
                                    string SDT = (string)item.SDT;
                                    string Email = (string)item.Email;
                                    string TinhTrangHonNhan = (string)item.TinhTrangHonNhan;
                                    string NguoiLienHe = ((item.NguoiLienHe_1__Duyet == 2) ? null : (string)item.NguoiLienHe);
                                    string SDTNguoiLienHe = ((item.NguoiLienHe_1__Duyet == 2) ? null : (string)item.SDT_NguoiLienHe);
                                    string QuanHeVoiNguoiLienHe = ((item.NguoiLienHe_1__Duyet == 2) ? null : (string)item.QuanHeVoiNguoiLienHe);
                                    string MaNV = (string)item.MaNV_KH;
                                    string ChucVu = (string)item.ChucVu;
                                    string BoPhan = (string)item.BoPhan;
                                    DateTime NgayKyHopDong = item.NgayKiHopDong == null || item.NgayKiHopDong == "" ? DateTime.Now : (DateTime)item.NgayKiHopDong;
                                    string SoBHXH = (string)item.SoBHXH;
                                    string LoaiHopDong = (string)item.LoaiHopDong;
                                    string TongLuongNV = (string)item.TongLuongNV;
                                    string SoTKNH = (string)item.SoTKNH;
                                    string IdBank = (string)item.IdBank;
                                    string ChiNhanhNH = (string)item.ChiNhanhNH;
                                    string IDCardCode_NhomTruong = (string)item.IDCardCode_NhomTruong;
                                    string DonHangFFriend = (string)item.DonHangFFriend;
                                    string SoTienDNHoTro = (string)item.SoTienDNHoTro;
                                    string Passport = (string)item.Passport;
                                    string MaCNDN = (string)item.MaCNDN;
                                    string NguoiLienHe_2 = ((item.NguoiLienHe_2__Duyet == 2) ? null : (string)item.NguoiLienHe_2);
                                    string SDTNguoiLienHe_2 = ((item.NguoiLienHe_2__Duyet == 2) ? null : (string)item.SDT_NguoiLienHe_2);
                                    string QuanHeVoiNguoiLienHe_2 = ((item.NguoiLienHe_2__Duyet == 2) ? null : (string)item.QuanHeVoiNguoiLienHe_2);

                                    dt.Rows.Add(Id, IDCardCode, VendorCode, TenKH, NhomKH, GioiTinh, NgaySinh, NoiSinh, HoKhauThuongTru, TinhThanhPho, QuanHuyen
                                        , PhuongXa, CMND, NgayCapCMND, NoiCapCMND, SDT, Email, TinhTrangHonNhan, NguoiLienHe, SDTNguoiLienHe, QuanHeVoiNguoiLienHe
                                        , MaNV, ChucVu, BoPhan, NgayKyHopDong, SoBHXH, LoaiHopDong, TongLuongNV, SoTKNH, IdBank, ChiNhanhNH, IDCardCode_NhomTruong
                                        , DonHangFFriend, SoTienDNHoTro, Passport, MaCNDN
                                        , NguoiLienHe_2, SDTNguoiLienHe_2, QuanHeVoiNguoiLienHe_2,
                                        //
                                        (int)item.Appr__CMND_MT,
                                        (int)item.Appr__CMND_MS,
                                        (int)item.Appr__GPLX_MT,
                                        (int)item.Appr__GPLX_MS,
                                        (int)item.Appr__TheNV,
                                        (int)item.Appr__ChanDungKH,
                                        (int)item.Appr__XacNhanNhanSu,
                                        (int)item.Appr__SHK_1,
                                        (int)item.Appr__SHK_2,
                                        (int)item.Appr__SHK_3,
                                        (int)item.Appr__SHK_4,
                                        (int)item.Appr__SHK_5,
                                        (int)item.Appr__SHK_6,
                                        (int)item.Appr__SHK_7,
                                        (int)item.Appr__SaoKeLuong_1,
                                        (int)item.Appr__SaoKeLuong_2,
                                        (int)item.Appr__SaoKeLuong_3
                                        );
                                }
                                SqlParameter[] param = new SqlParameter[] {
                                    new SqlParameter("@Table", dt),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser == null ?  "" : UserManager.CurrentUser.InsideCode ),
                                    new SqlParameter("@Process", 1 ),    //  * Xử lý: 1:Hoàn tất
                                    new SqlParameter("@RequestId", request.Id)
                                 };

                                DataTable l__DataTable = sql.ExecuteCommand("sp__WEB__Update_CustInfo", System.Data.CommandType.StoredProcedure, param);
                                if (l__DataTable != null && l__DataTable.Rows.Count > 0)
                                {
                                    if (l__DataTable.Rows[0]["Result"].ToString() == "1")
                                    {
                                        //  Do Nothing
                                    }
                                    else
                                    {
                                        TempData["Message"] = l__DataTable.Rows[0]["Msg"].ToString();
                                        return RedirectToAction("Details", new { Id = request.Id });
                                    }
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 01/04/2019 - CL cho Scoring==================================================
                        #endregion
                    }
                    else if (request.TypeId == 127)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity1 = item.ApprMatTruoc;
                                    requestdetail.Quantity2 = item.ApprMatSau;
                                    requestdetail.Quantity3 = item.ApprGiayUQTN;
                                    requestdetail.Quantity4 = item.ApprThayDoiChuKy;
                                    requestdetail.Quantity5 = item.ApprMTCMNDBIDV;
                                    requestdetail.Quantity6 = item.ApprMSCMNDBIDV;
                                    requestdetail.Quantity = item.ApprChanDungSV;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 128)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.Property7 = item.ThongTin__File;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 129)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 131)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity1 = item.ApprMatTruoc;
                                    requestdetail.Quantity2 = item.ApprMatSau;
                                    requestdetail.Quantity3 = item.ApprGiayUQTN;

                                    //▼	Add - VietMXH - 21/11/2017 - Load UQTN Mặt 2 & 3==================================================
                                    requestdetail.Quantity7 = item.ApprGiayUQTN_Mat2;
                                    requestdetail.Quantity8 = item.ApprGiayUQTN_Mat3;
                                    //▲	Add - VietMXH - 21/11/2017 - Load UQTN Mặt 2 & 3==================================================

                                    requestdetail.Quantity4 = item.ApprThayDoiChuKy;
                                    requestdetail.Quantity5 = item.ApprMTCMNDBIDV;
                                    requestdetail.Quantity6 = item.ApprMSCMNDBIDV;
                                    requestdetail.Property10 = item.LyDoKhongDuyet;
                                }

                            }
                        }
                        #endregion
                    }

                    else if (request.TypeId == 132)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Price = item.SoTienCanThu == "" || item.SoTienCanThu == null ? null : item.SoTienCanThu;
                                    requestdetail.Money1 = item.SoTienDaThu == "" || item.SoTienDaThu == null ? null : item.SoTienDaThu;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 133)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                }

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 134)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            string MST = string.Empty;
                            string TxtVendorName = string.Empty;
                            string TxtDCDN = string.Empty;
                            string TxtTinhTP = string.Empty;
                            string TxtQuanHuyen = string.Empty;
                            string TxtSDT = string.Empty;
                            string TxtFax = string.Empty;

                            string TxtQuyMoCT = string.Empty;
                            string TxtSoLuongCNV = string.Empty;
                            string TxtShop = string.Empty;
                            string TxtChuTK = string.Empty;
                            string TxtSoTK = string.Empty;
                            string TxtChietKhau = string.Empty;
                            string TxtNganHangChietKhau = string.Empty;
                            string TxtChiNhanhNHChietKhau = string.Empty;
                            string TxtHoTenDaiDienDN = string.Empty;
                            string TxtSDTDaiDienDN = string.Empty;
                            string TxtEmailDaiDienDN = string.Empty;
                            string TxtPhuTrach = string.Empty;
                            string TxtChucVuPhuTrachNhanSu = string.Empty;
                            string TxtSDTPhuTrach = string.Empty;
                            string TxtEmailPhuTrach = string.Empty;
                            string TxtChietKhauPhuTrach = string.Empty;

                            string TxttraoDoi = string.Empty;
                            string TxtChuVuNguoiDaiDienDN = string.Empty;
                            string TxtNgayCapNhatCBCNV = string.Empty;
                            string TxtNgayChiLuong = string.Empty;
                            string TxtNgayChotSaoKe = string.Empty;
                            string TxtNgayGuiSaoKe = string.Empty;
                            string TxtNganhNghe = string.Empty;
                            string TxtHTThuHo = string.Empty;
                            string TxtEmailCC = string.Empty;
                            bool CheckS = true;

                            string TxtNguoiPTTH = string.Empty;
                            string TxtCVNguoiPTTH = string.Empty;
                            string TxtDTNguoiPTTH = string.Empty;
                            string TxtEmailNguoiPTTH = string.Empty;
                            string TxtChietKhauNguoiPTTH = string.Empty;
                            string TxtTenVietTatVendor = string.Empty;
                            int TxtNgayThanhToanNo = 0;
                            int CheckTraThang = 0;
                            string TxtnamHDCuaDN = string.Empty;
                            string TxtDuoiEmail = string.Empty;
                            //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                            string TxtPhongBanNguoiDaiDienDN = string.Empty;
                            string TxtPhongBanPhuTrachNhanSu = string.Empty;
                            string TxtPBNguoiPTTH = string.Empty;
                            //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================

                            foreach (var item in objects)
                            {
                                CheckS = item.CheckS;
                                CheckTraThang = item.CheckTraThang;
                                TxtVendorName = item.TxtVendorName;
                                TxtTenVietTatVendor = item.TxtTenVietTatVendor;
                                TxtNgayThanhToanNo = item.TxtNgayThanhToanNo;
                                MST = item.TxtMST;
                                TxtDCDN = item.TxtDCDN;
                                TxtTinhTP = item.TxtTinhTP;
                                TxtQuanHuyen = item.TxtQuanHuyen;
                                TxtSDT = item.TxtSDT;
                                TxtFax = item.TxtFax;
                                TxtHTThuHo = item.TxtHTThuHo;

                                TxtQuyMoCT = item.TxtQuyMoCT;
                                TxtSoLuongCNV = item.TxtSoLuongCNV;
                                TxtShop = item.TxtShop;
                                TxtChuTK = item.TxtChuTK;
                                TxtSoTK = item.TxtSoTK;
                                TxtChietKhau = item.TxtChietKhau;
                                TxtNganHangChietKhau = item.TxtNganHangChietKhau;
                                TxtChiNhanhNHChietKhau = item.TxtChiNhanhNHChietKhau;
                                TxtHoTenDaiDienDN = item.TxtHoTenDaiDienDN;
                                TxtSDTDaiDienDN = item.TxtSDTDaiDienDN;
                                TxtEmailDaiDienDN = item.TxtEmailDaiDienDN;
                                TxtPhuTrach = item.TxtPhuTrach;
                                TxtChucVuPhuTrachNhanSu = item.TxtChucVuPhuTrachNhanSu;
                                TxtSDTPhuTrach = item.TxtSDTPhuTrach;
                                TxtEmailPhuTrach = item.TxtEmailPhuTrach;
                                TxtChietKhauPhuTrach = item.TxtChietKhauPhuTrach;

                                TxtEmailCC = item.TxtEmailCC;
                                TxttraoDoi = item.TxttraoDoi;
                                TxtChuVuNguoiDaiDienDN = item.TxtChuVuNguoiDaiDienDN;
                                TxtNgayCapNhatCBCNV = item.TxtNgayCapNhatCBCNV;
                                TxtNgayChiLuong = item.TxtNgayChiLuong;
                                TxtNgayChotSaoKe = item.TxtNgayChotSaoKe;
                                TxtNgayGuiSaoKe = item.TxtNgayGuiSaoKe;
                                TxtNganhNghe = item.TxtNganhNghe;

                                TxtNguoiPTTH = item.TxtNguoiPTTH;
                                TxtCVNguoiPTTH = item.TxtCVNguoiPTTH;
                                TxtDTNguoiPTTH = item.TxtDTNguoiPTTH;
                                TxtEmailNguoiPTTH = item.TxtEmailNguoiPTTH;
                                TxtChietKhauNguoiPTTH = item.TxtChietKhauNguoiPTTH;
                                TxtnamHDCuaDN = item.TxtnamHDCuaDN;
                                TxtDuoiEmail = item.TxtDuoiEmail;
                                //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                TxtPhongBanNguoiDaiDienDN = item.TxtPhongBanNguoiDaiDienDN;
                                TxtPhongBanPhuTrachNhanSu = item.TxtPhongBanPhuTrachNhanSu;
                                TxtPBNguoiPTTH = item.TxtPBNguoiPTTH;
                                //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                //============= Lưu vào ErrorCode
                                request.ErrorCode = "0";
                                request.ReferenceCode = item.CheckHopDong;
                                request.RequestIdRefer = item.CheckNganHang;
                                request.TotalRequestComplete = item.CheckTraThang;
                            }
                            SqlParameter[] paramS = new SqlParameter[]
                        {
                            new SqlParameter("@RequestId", request.Id) ,
                            new SqlParameter("@VendorName", TxtVendorName) ,
                            new SqlParameter("@TxtTenVietTatVendor", TxtTenVietTatVendor) ,
                            new SqlParameter("@TxtNgayThanhToanNo", TxtNgayThanhToanNo) ,
                            new SqlParameter("@TxtnamHDCuaDN", TxtnamHDCuaDN) ,
                            new SqlParameter("@MST", MST) ,
                            new SqlParameter("@NganhNghe", TxtNganhNghe) ,
                            new SqlParameter("@TxtDCDN", TxtDCDN) ,
                            new SqlParameter("@TxtTinhTP", TxtTinhTP) ,
                            new SqlParameter("@TxtQuanHuyen", TxtQuanHuyen) ,
                            new SqlParameter("@TxtSDT", TxtSDT) ,
                            new SqlParameter("@TxtFax", TxtFax) ,
                            new SqlParameter("@TxtHTThuHo", TxtHTThuHo) ,

                            new SqlParameter("@TxtQuyMoCT", TxtQuyMoCT) ,
                            new SqlParameter("@TxtSoLuongCNV", TxtSoLuongCNV) ,
                            new SqlParameter("@TxtShop", TxtShop) ,
                            new SqlParameter("@TxtNgayCapNhatCBCNV", TxtNgayCapNhatCBCNV) ,
                            new SqlParameter("@TxtNgayChiLuong", TxtNgayChiLuong) ,
                            new SqlParameter("@TxtNgayChotSaoKe", TxtNgayChotSaoKe) ,
                            new SqlParameter("@TxtNgayGuiSaoKe", TxtNgayGuiSaoKe) ,
                            new SqlParameter("@TxtChuTK", TxtChuTK) ,
                            new SqlParameter("@TxtSoTK", TxtSoTK) ,
                            new SqlParameter("@TxtChietKhau", TxtChietKhau) ,
                            new SqlParameter("@TxtNganHangChietKhau", TxtNganHangChietKhau) ,
                            new SqlParameter("@TxtChiNhanhNHChietKhau", TxtChiNhanhNHChietKhau) ,
                            new SqlParameter("@TxtHoTenDaiDienDN", TxtHoTenDaiDienDN) ,
                            new SqlParameter("@TxtChuVuNguoiDaiDienDN", TxtChuVuNguoiDaiDienDN) ,
                            new SqlParameter("@TxtSDTDaiDienDN", TxtSDTDaiDienDN) ,
                            new SqlParameter("@TxtEmailDaiDienDN", TxtEmailDaiDienDN) ,
                            new SqlParameter("@TxtPhuTrach", TxtPhuTrach) ,
                            new SqlParameter("@TxtChucVuPhuTrachNhanSu", TxtChucVuPhuTrachNhanSu) ,
                            new SqlParameter("@TxtSDTPhuTrach", TxtSDTPhuTrach) ,
                            new SqlParameter("@TxtEmailPhuTrach", TxtEmailPhuTrach) ,
                            new SqlParameter("@TxtChietKhauPhuTrach", TxtChietKhauPhuTrach) ,

                            new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode) ,
                            new SqlParameter("@TraThang", CheckTraThang) ,
                            new SqlParameter("@TxtDuoiEmail", TxtDuoiEmail),
                            //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                            new SqlParameter("@TxtPhongBanNguoiDaiDienDN", TxtPhongBanNguoiDaiDienDN),
                            new SqlParameter("@TxtPhongBanPhuTrachNhanSu", TxtPhongBanPhuTrachNhanSu),
                            //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                        };
                            DataTable table = sql.ExecuteCommand("FRT_Vendor_Save_After_Create_Calllog_UpDate", CommandType.StoredProcedure, paramS);

                            if (TxtHTThuHo == "HR")
                            {
                                //============== Update thông tin NV Ngân hàng
                                SqlParameter[] paramX = new SqlParameter[] {
                                new SqlParameter("@RequestId",  request.Id) ,
                                new SqlParameter("@TxtNguoiPTTH", TxtNguoiPTTH) ,
                                new SqlParameter("@TxtCVNguoiPTTH", TxtCVNguoiPTTH) ,
                                new SqlParameter("@TxtDTNguoiPTTH", TxtDTNguoiPTTH) ,
                                new SqlParameter("@TxtEmailNguoiPTTH", TxtEmailNguoiPTTH) ,
                                new SqlParameter("@TxtChietKhauNguoiPTTH", TxtChietKhauNguoiPTTH) ,
                                new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode),
                                //▼	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                                new SqlParameter("@TxtPBNguoiPTTH", TxtPBNguoiPTTH),
                                //▲	Edit - VietMXH - 18/07/2019 - CL Tạo DN==================================================
                            };
                                DataTable tableX = sql.ExecuteCommand("CalllogVendor_SavePTTHNH_Details", CommandType.StoredProcedure, paramX);
                            }
                            if (request.TypeId == 134 && request.StepNo == 1)
                            {
                                //=========== Cập nhật duyệt hoặc từ chối
                                SqlParameter[] paramA = new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@TrangThai", 0),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                };
                                DataTable tableA = sql.ExecuteCommand("Calllog_Vendor_UpdateDuyetHoacTuChoi", CommandType.StoredProcedure, paramA);
                            }
                            else
                            {
                                //=========== Cập nhật duyệt hoặc từ chối
                                SqlParameter[] paramA = new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@TrangThai", 1),
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                };
                                DataTable tableA = sql.ExecuteCommand("Calllog_Vendor_UpdateDuyetHoacTuChoi", CommandType.StoredProcedure, paramA);
                            }

                            //================ Lưu thông tin người đại diện mua hàng
                            var DataSMuaHangFULL = Convert.ToString(form["DataSMuaHangFULL"]);
                            var MuaHangFULL = JsonConvert.DeserializeObject<dynamic>(DataSMuaHangFULL);

                            DataTable tablet = new DataTable();
                            tablet.Columns.Add("Id", typeof(string));
                            tablet.Columns.Add("HoTenMuaHang", typeof(string));
                            tablet.Columns.Add("ChucVuMuaHang", typeof(string));
                            tablet.Columns.Add("SDTMuaHang", typeof(string));
                            tablet.Columns.Add("EmailMuaHang", typeof(string));


                            if (MuaHangFULL != null && MuaHangFULL.ToString() != "[]")
                            {

                                string HoTenMuaHang = string.Empty;
                                string ChucVuMuaHang = string.Empty;
                                string SDTMuaHang = string.Empty;
                                string EmailMuaHang = string.Empty;
                                string Id = string.Empty;
                                foreach (var item in MuaHangFULL)
                                {
                                    Id = item.Id;
                                    HoTenMuaHang = item.HoTenMuaHang;
                                    ChucVuMuaHang = item.ChucVuMuaHang;
                                    SDTMuaHang = item.SDTMuaHang;
                                    EmailMuaHang = item.EmailMuaHang;

                                    tablet.Rows.Add(Id, HoTenMuaHang, ChucVuMuaHang, SDTMuaHang, EmailMuaHang);
                                }

                                SqlParameter[] paramM = new SqlParameter[]
                                    {
                                    new SqlParameter("@Type",  1) ,
                                    new SqlParameter("@RequestId",  request.Id) ,
                                    new SqlParameter("@Table", tablet) ,
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                                DataTable tableM = sql.ExecuteCommand("CalllogVendor_UpdateNguoiDaiDienMuaHang", CommandType.StoredProcedure, paramM);
                            }
                            else
                            {
                                SqlParameter[] paramX = new SqlParameter[]
                                    {
                                    new SqlParameter("@Type",  0) ,
                                    new SqlParameter("@RequestId",  request.Id) ,
                                    new SqlParameter("@Table", tablet) ,
                                    new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                    };
                                DataTable tableX = sql.ExecuteCommand("CalllogVendor_UpdateNguoiDaiDienMuaHang", CommandType.StoredProcedure, paramX);
                            }

                        }
                        #endregion
                    }
                    else if (request.TypeId == 135)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity6 = item.Approved;
                                    requestdetail.Property7 = item.SoHopDong;
                                    requestdetail.Property10 = item.LyDo;
                                    requestdetail.Money4 = item.SoTienTraTruoc == "" ? null : item.SoTienTraTruoc;
                                }
                                //if (item.Approved == 1)
                                //{
                                //sql.ExecuteWithoutResult("HangDoi_UpdateTrangThai", CommandType.StoredProcedure, new SqlParameter[] 
                                //    { 
                                //        new SqlParameter("@IDCallLog", request.Id),
                                //        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                                //    });
                                //}

                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 136)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 13/01/2020 - CL Sao kê DN: Thêm cột thời gian đẩy data sang Sacombank==================================================
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    string timeNgayDNThanhToan = item.NgayDNThanhToan;
                                    if (timeNgayDNThanhToan != null)
                                    {
                                        string[] timeNgayDNThanhToanArr = timeNgayDNThanhToan.Split('/');
                                        if (timeNgayDNThanhToanArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeNgayDNThanhToanArr[0].Length == 1 ? "d" : "dd"
                                               , timeNgayDNThanhToanArr[1].Length == 1 ? "M" : "MM"
                                               , timeNgayDNThanhToanArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeNgayDNThanhToan.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayChiLuongThucTe = item.NgayChiLuongThucTe;
                                    if (NgayChiLuongThucTe != null)
                                    {
                                        string[] timeNgayChiLuongThucTeArr = NgayChiLuongThucTe.Split('/');

                                        if (timeNgayChiLuongThucTeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeNgayChiLuongThucTeArr[0].Length == 1 ? "d" : "dd"
                                               , timeNgayChiLuongThucTeArr[1].Length == 1 ? "M" : "MM"
                                               , timeNgayChiLuongThucTeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = NgayChiLuongThucTe.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayGioBatDauQuetSaoKe = item.NgayGioBatDauQuetSaoKe;
                                    if (NgayGioBatDauQuetSaoKe != null)
                                    {
                                        string[] NgayGioBatDauQuetSaoKeArr = NgayGioBatDauQuetSaoKe.Split('/', ' ', ':');

                                        if (NgayGioBatDauQuetSaoKeArr.Length == 5)
                                        {
                                            string format = String.Format("{0}/{1}/{2} {3}:{4}"
                                               , NgayGioBatDauQuetSaoKeArr[0].Length == 1 ? "d" : "dd"
                                               , NgayGioBatDauQuetSaoKeArr[1].Length == 1 ? "M" : "MM"
                                               , NgayGioBatDauQuetSaoKeArr[2].Length == 2 ? "yy" : "yyyy"
                                               , NgayGioBatDauQuetSaoKeArr[3].Length == 1 ? "HH" : "HH"
                                               , NgayGioBatDauQuetSaoKeArr[4].Length == 1 ? "m" : "mm");
                                            requestdetail.Time3 = NgayGioBatDauQuetSaoKe.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayGioKetThucQuetSaoKe = item.NgayGioKetThucQuetSaoKe;
                                    if (NgayGioKetThucQuetSaoKe != null)
                                    {
                                        string[] NgayGioKetThucQuetSaoKeArr = NgayGioKetThucQuetSaoKe.Split('/', ' ', ':');

                                        if (NgayGioKetThucQuetSaoKeArr.Length == 5)
                                        {
                                            string format = String.Format("{0}/{1}/{2} {3}:{4}"
                                               , NgayGioKetThucQuetSaoKeArr[0].Length == 1 ? "d" : "dd"
                                               , NgayGioKetThucQuetSaoKeArr[1].Length == 1 ? "M" : "MM"
                                               , NgayGioKetThucQuetSaoKeArr[2].Length == 2 ? "yy" : "yyyy"
                                               , NgayGioKetThucQuetSaoKeArr[3].Length == 1 ? "HH" : "HH"
                                               , NgayGioKetThucQuetSaoKeArr[4].Length == 1 ? "m" : "mm");
                                            requestdetail.Time4 = NgayGioKetThucQuetSaoKe.EParseToDateTime(format);
                                        }
                                    }
                                    requestdetail.Money3 = item.TongThanhToanKyNay;
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 13/01/2020 - CL Sao kê DN: Thêm cột thời gian đẩy data sang Sacombank==================================================
                        #endregion
                    }
                    else if (request.TypeId == 137)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 13/01/2020 - CL Sao kê DN: Thêm cột thời gian đẩy data sang Sacombank==================================================
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    string timeNgayDNThanhToan = item.NgayDNThanhToan;
                                    if (timeNgayDNThanhToan != null)
                                    {
                                        string[] timeNgayDNThanhToanArr = timeNgayDNThanhToan.Split('/');
                                        if (timeNgayDNThanhToanArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeNgayDNThanhToanArr[0].Length == 1 ? "d" : "dd"
                                               , timeNgayDNThanhToanArr[1].Length == 1 ? "M" : "MM"
                                               , timeNgayDNThanhToanArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeNgayDNThanhToan.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayChiLuongThucTe = item.NgayChiLuongThucTe;
                                    if (NgayChiLuongThucTe != null)
                                    {
                                        string[] timeNgayChiLuongThucTeArr = NgayChiLuongThucTe.Split('/');

                                        if (timeNgayChiLuongThucTeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeNgayChiLuongThucTeArr[0].Length == 1 ? "d" : "dd"
                                               , timeNgayChiLuongThucTeArr[1].Length == 1 ? "M" : "MM"
                                               , timeNgayChiLuongThucTeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = NgayChiLuongThucTe.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayGioBatDauQuetSaoKe = item.NgayGioBatDauQuetSaoKe;
                                    if (NgayGioBatDauQuetSaoKe != null)
                                    {
                                        string[] NgayGioBatDauQuetSaoKeArr = NgayGioBatDauQuetSaoKe.Split('/', ' ', ':');

                                        if (NgayGioBatDauQuetSaoKeArr.Length == 5)
                                        {
                                            string format = String.Format("{0}/{1}/{2} {3}:{4}"
                                               , NgayGioBatDauQuetSaoKeArr[0].Length == 1 ? "d" : "dd"
                                               , NgayGioBatDauQuetSaoKeArr[1].Length == 1 ? "M" : "MM"
                                               , NgayGioBatDauQuetSaoKeArr[2].Length == 2 ? "yy" : "yyyy"
                                               , NgayGioBatDauQuetSaoKeArr[3].Length == 1 ? "HH" : "HH"
                                               , NgayGioBatDauQuetSaoKeArr[4].Length == 1 ? "m" : "mm");
                                            requestdetail.Time3 = NgayGioBatDauQuetSaoKe.EParseToDateTime(format);
                                        }
                                    }
                                    string NgayGioKetThucQuetSaoKe = item.NgayGioKetThucQuetSaoKe;
                                    if (NgayGioKetThucQuetSaoKe != null)
                                    {
                                        string[] NgayGioKetThucQuetSaoKeArr = NgayGioKetThucQuetSaoKe.Split('/', ' ', ':');

                                        if (NgayGioKetThucQuetSaoKeArr.Length == 5)
                                        {
                                            string format = String.Format("{0}/{1}/{2} {3}:{4}"
                                               , NgayGioKetThucQuetSaoKeArr[0].Length == 1 ? "d" : "dd"
                                               , NgayGioKetThucQuetSaoKeArr[1].Length == 1 ? "M" : "MM"
                                               , NgayGioKetThucQuetSaoKeArr[2].Length == 2 ? "yy" : "yyyy"
                                               , NgayGioKetThucQuetSaoKeArr[3].Length == 1 ? "HH" : "HH"
                                               , NgayGioKetThucQuetSaoKeArr[4].Length == 1 ? "m" : "mm");
                                            requestdetail.Time4 = NgayGioKetThucQuetSaoKe.EParseToDateTime(format);
                                        }
                                    }
                                    requestdetail.Money3 = item.TongThanhToanKyNay;
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 13/01/2020 - CL Sao kê DN: Thêm cột thời gian đẩy data sang Sacombank==================================================
                        #endregion
                    }
                    else if (request.TypeId == 138)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property10 = item.StatusHoanTien;
                                    requestdetail.Note = item.Note;
                                    requestdetail.Approved = item.Approved;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 140)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Money2 = item.Money2;
                                    requestdetail.Approved = item.Approved1 != null ? item.Approved1 : item.Approved2;

                                }
                                if (request.StepNo == 1)
                                {
                                    if (item.Approved2 != null && item.Approved1 == null && item.Approved2 == false && requestdetail.Quantity == 1)
                                    {
                                        sql.ExecuteWithoutResult("sp_CRM_PaymentBillReceipt_Upd_FromCallog", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                         new SqlParameter("@CallogIDCL", request.Id) ,
                                        new SqlParameter("@ResultConfirmCL",0),
                                        new SqlParameter("@ResultConfirmContentCL", message) ,
                                        new SqlParameter("@UpdateByCL",UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@PriceReturnCL",Convert.ToDouble(item.Money2)),
                                        });
                                    }
                                    if (item.Approved1 != null && item.Approved1 == true && item.Approved2 == null && requestdetail.Quantity == 2)
                                    {
                                        sql.ExecuteWithoutResult("sp_CRM_PaymentBillReceipt_Upd_FromCallog", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                        new SqlParameter("@CallogIDCL", request.Id) ,
                                        new SqlParameter("@ResultConfirmCL",1),
                                        new SqlParameter("@ResultConfirmContentCL", message) ,
                                        new SqlParameter("@UpdateByCL",UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@PriceReturnCL",Convert.ToDouble(item.Money2)),
                                        });
                                    }
                                    if (item.Approved2 != null && item.Approved1 == null && item.Approved2 == false && requestdetail.Quantity == 2)
                                    {
                                        sql.ExecuteWithoutResult("sp_CRM_PaymentBillReceipt_Upd_FromCallog", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                         new SqlParameter("@CallogIDCL", request.Id) ,
                                        new SqlParameter("@ResultConfirmCL",0),
                                        new SqlParameter("@ResultConfirmContentCL", message) ,
                                        new SqlParameter("@UpdateByCL",UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@PriceReturnCL",Convert.ToDouble(item.Money2)),
                                        });
                                    }
                                }
                                if (request.StepNo == 2)
                                {
                                    if (item.Approved1 != null && item.Approved1 == true && item.Approved2 == null)
                                    {
                                        sql.ExecuteWithoutResult("sp_CRM_PaymentBillReceipt_Upd_FromCallog", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                        new SqlParameter("@CallogIDCL", request.Id) ,
                                        new SqlParameter("@ResultConfirmCL",1),
                                        new SqlParameter("@ResultConfirmContentCL", message) ,
                                        new SqlParameter("@UpdateByCL",UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@PriceReturnCL",Convert.ToDouble(item.Money2)),
                                        });
                                    }
                                    if (item.Approved2 != null && item.Approved1 == null && item.Approved2 == false)
                                    {
                                        sql.ExecuteWithoutResult("sp_CRM_PaymentBillReceipt_Upd_FromCallog", CommandType.StoredProcedure, new SqlParameter[]
                                        {
                                         new SqlParameter("@CallogIDCL", request.Id) ,
                                        new SqlParameter("@ResultConfirmCL",0),
                                        new SqlParameter("@ResultConfirmContentCL", message) ,
                                        new SqlParameter("@UpdateByCL",UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@PriceReturnCL",Convert.ToDouble(item.Money2)),
                                        });
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 141)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property7 = item.TrangThaiDonHang;
                                    if (item.LyDoXuLyLai != "")
                                    {
                                        requestdetail.Property8 += UserManager.CurrentUser.EmployeeCode + " - " + DateTime.Now.ToShortDateString() + " - " + item.LyDoXuLyLai + "<br />";
                                    }
                                    requestdetail.Property9 = item.MaVanDon;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 142)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                long id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.SaleCode = item.SoTKNH;
                                    requestdetail.Quantity1 = item.IdBank;
                                    requestdetail.Quantity2 = item.IdChiNhanhNganHang;
                                    requestdetail.Money2 = item.Money2;
                                    requestdetail.Property20 = item.LyDoKhongThanhCong;
                                    requestdetail.Note += " " + item.Note;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 143)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                //▼ Edit - TuanNA89 - 27/07/2018 - Loại: 143 - fix lỗi convert số
                                int DieuKien = (item.DieuKien != null && item.DieuKien > 0) ? item.DieuKien : 0;
                                RequestDetail requestdetail = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                }
                                if (requestdetail != null)
                                {
                                    if (DieuKien == 1)
                                    {
                                        requestdetail.Quantity1 = item.XacNhanKVKhongCoSong;
                                    }
                                    else if (DieuKien == 2)
                                    {
                                        requestdetail.Quantity1 = item.XacNhanSimPhatSinhTieuDung;
                                        requestdetail.Quantity2 = item.XacNhanHuySim;
                                    }
                                }
                                //▲ Edit - TuanNA89 - 27/07/2018 - Loại: 143 - fix lỗi convert số
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 145)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity5 = item.XacNhan;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 146)
                    {
                        #region Automatic
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    //requestdetail.Approved = item.DuyetTatCa; //ChuongNT3 - 29/05/2018 - Hủy appr
                                    requestdetail.Money1 = item.HanMuc;
                                    requestdetail.Money2 = item.SoTienGhiNo;
                                    requestdetail.Note = item.LyDoKhac;
                                    requestdetail.Quantity = item.Appr_SoHoKhau;
                                    requestdetail.Property3 = item.LyDoTuChoiMoThe;
                                    requestdetail.Quantity2 = item.CapThe;
                                    requestdetail.Quantity3 = item.KhongCapThe;
                                    requestdetail.Quantity4 = item.DuyetFF;
                                    requestdetail.Quantity5 = item.DuyetThamDinhKH;
                                    requestdetail.Quantity6 = item.DuyetKQThamDinh;
                                    requestdetail.Property2 = item.SPChon;
                                    int Appr_MT_CMND = item.Appr_MT_CMND;
                                    int Appr_MS_CMND = item.Appr_MS_CMND;
                                    int Appr_KH_CMND = item.Appr_KH_CMND;
                                    int Appr_GPLX_MT = item.Appr_GPLX_MT;
                                    int Appr_GPLX_MS = item.Appr_GPLX_MS;
                                    int Appr_LastForm_MoThe_ChuKy = item.Appr_LastForm_MoThe_ChuKy;
                                    int Appr_LastForm_DeXuatTrichNoTinDung = item.Appr_LastForm_DeXuatTrichNoTinDung;
                                    int Appr_SoHoKhau_1 = item.Appr_SoHoKhau_1;
                                    int Appr_SoHoKhau_2 = item.Appr_SoHoKhau_2;
                                    int Appr_SoHoKhau_3 = item.Appr_SoHoKhau_3;
                                    int Appr_SoHoKhau_4 = item.Appr_SoHoKhau_4;
                                    int Appr_SoHoKhau_5 = item.Appr_SoHoKhau_5;
                                    int Appr_SoHoKhau_6 = item.Appr_SoHoKhau_6;
                                    int Appr_SoHoKhau_7 = item.Appr_SoHoKhau_7;
                                    int Appr_SoHoKhau_8 = item.Appr_SoHoKhau_8;
                                    int Appr_CRD_DXTNTD_M2 = item.Appr_CRD_DXTNTD_M2;
                                    int Appr_CRD_CD_DKMoThe = item.Appr_CRD_CD_DKMoThe;
                                    string MaSPThamDinh = item.MaSPThamDinh;
                                    //ChuongNT3 - 02/08/2018 - thêm bảng lưu data
                                    int DuyetFF = item.DuyetFF;
                                    int DuyetThamDinhKH = item.DuyetThamDinhKH;
                                    int DuyetKQThamDinh = item.DuyetKQThamDinh;
                                    DataTable tablesRD_Hist = sql.ExecuteCommand("sp_CreditNoneCard_ProcessStep_Hist", CommandType.StoredProcedure, new SqlParameter[] {
                                        new SqlParameter("@RequestId ", request.Id ),
                                        new SqlParameter("@UpdateBy",  UserManager.CurrentUser.InsideCode ),
                                        new SqlParameter("@BuocXuLy",  DuyetFF+","+DuyetThamDinhKH+","+DuyetKQThamDinh),
                                        new SqlParameter("@StepNo",  request.StepNo)
                                    });
                                    //ChuongNT3 - 02/08/2018 - thêm bảng lưu data
                                    SqlParameter[] param = new SqlParameter[] {
                                        new SqlParameter("@CallLogID ", request.Id ),
                                        new SqlParameter("@UpdateBy",  UserManager.CurrentUser.InsideCode ),
                                        new SqlParameter("@Appr_CRD_MT_CMND",  Appr_MT_CMND),
                                        new SqlParameter("@Appr_CRD_MS_CMND", Appr_MS_CMND),
                                        new SqlParameter("@Appr_CRD_KH_CMND",  Appr_KH_CMND),
                                        new SqlParameter("@Appr_CRD_GPLX_MT", Appr_GPLX_MT),
                                        new SqlParameter("@Appr_CRD_GPLX_MS",  Appr_GPLX_MS),
                                        new SqlParameter("@Appr_CRD_MoThe",  Appr_LastForm_MoThe_ChuKy),
                                        new SqlParameter("@Appr_CRD_DXTNTD", Appr_LastForm_DeXuatTrichNoTinDung ),
                                        new SqlParameter("@Appr_CRD_SHK_1", Appr_SoHoKhau_1),
                                        new SqlParameter("@Appr_CRD_SHK_2",  Appr_SoHoKhau_2),
                                        new SqlParameter("@Appr_CRD_SHK_3", Appr_SoHoKhau_3),
                                        new SqlParameter("@Appr_CRD_SHK_4", Appr_SoHoKhau_4 ),
                                        new SqlParameter("@Appr_CRD_SHK_5", Appr_SoHoKhau_5),
                                        new SqlParameter("@Appr_CRD_SHK_6",  Appr_SoHoKhau_6),
                                        new SqlParameter("@Appr_CRD_SHK_7", Appr_SoHoKhau_7),
                                        new SqlParameter("@Appr_CRD_SHK_8", Appr_SoHoKhau_8),
                                        new SqlParameter("@MaSPThamDinh", MaSPThamDinh),
                                        new SqlParameter("@Appr_CRD_DXTNTD_2", Appr_CRD_DXTNTD_M2),
                                        new SqlParameter("@Appr_CRD_CD_DKMoThe", Appr_CRD_CD_DKMoThe)
                                    };
                                    DataTable tablesRD_HA = sql.ExecuteCommand("sp_CreditNoneCard_ApproveImage", CommandType.StoredProcedure, param);
                                    if (tablesRD_HA != null && tablesRD_HA.Rows.Count > 0)
                                    {
                                        DataRow row = tablesRD_HA.Rows[0];
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 151)
                    {
                        #region Chuyển Đổi Trả Góp Shop
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RDI;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity1 = 1;
                                    requestdetail.Numeric1 = item.TienGiaoDich;
                                    requestdetail.CustomerName = item.TenNguoiDung;
                                    requestdetail.Time1 = DateTime.ParseExact(item.NgayGiaoDich.ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    requestdetail.Property3 = item.SoTheTinDung;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 153)
                    {
                        #region Chuyển Đổi Trả Góp Shop
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.ReqDetId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Quantity = item.TinhTrangHoanTien;
                                    if (item.TinhTrangHoanTien == 0)
                                    {
                                        requestdetail.Note = item.LyDoHoanTienKhongThanhCong;
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 154)
                    {
                        #region claim nvc

                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property16 = item.SoHoaDon;
                                    request.isHighlight = item.isHighLight;
                                }
                            }
                        }
                        #endregion
                    }
                    else if (request.TypeId == 156)
                    {
                        #region --- 156: Chi Phí F.F ---
                        foreach (var item in objects)
                        {
                            int id = item.RDID;
                            RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                            if (requestdetail != null)
                            {
                                requestdetail.Quantity = item.Check;
                            }
                        }
                        #endregion
                    }
                    //▼ Edit - ThuongNM2 - 26/03/2019 - Loại yêu cầu mới 157 Check CIC KH=====
                    else if (request.TypeId == 157)
                    {
                        #region Loại yêu cầu mới 157 Check CIC KH=====
                        if (objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.RequestDetailId;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.Property4 = item.Property4; // N'1' -- Hạng rủi ro
                                    requestdetail.Property5 = item.Property5; // N'1,2,3' -- KH Được mua với hình thức: "1,2,3"
                                    requestdetail.Quantity2 = item.Quantity2; // 1 -- Tình trạng nợ
                                    requestdetail.Quantity3 = item.Quantity3; // 1 -- Nhóm nợ
                                    requestdetail.Quantity4 = item.Quantity4; // 1 -- SL Quan hệ tín dụng
                                    requestdetail.Quantity = item.Quantity;   // 0 -- Mã KH CIC: 0:Không ; 1:Có
                                    requestdetail.QuantityAvaiable = item.QuantityAvaiable; // 0 -- Điểm CIC
                                    requestdetail.Numeric1 = item.Numeric1; //-- Mức dư nợ CIC
                                }
                            }
                        }
                        #endregion
                    }
                    //▲ Edit - ThuongNM2 - 26/03/2019 - Loại yêu cầu mới 157 Check CIC KH=====
                    else if (request.TypeId == 158)
                    {
                        #region Automatic
                        //▼	Edit - VietMXH - 18/04/2019 - 158:CallLog Chi thưởng DN==================================================
                        if (oldStatus < 4 && objects != null && objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int l__158__Item__Id = item.Id;
                                RequestDetail l__158__ReqDet = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l__158__ReqDet = db.RequestDetails.FirstOrDefault(x => x.Id == l__158__Item__Id);
                                }
                                if (l__158__ReqDet != null)
                                {
                                    if (item.Approved == 1)
                                        l__158__ReqDet.Approved = true;
                                    else if (item.Approved == 0)
                                        l__158__ReqDet.Approved = false;
                                    else
                                        l__158__ReqDet.Approved = null;
                                }
                            }
                        }
                        //▲	Edit - VietMXH - 18/04/2019 - 158:CallLog Chi thưởng DN==================================================
                        #endregion
                    }
                    //▼	Add - TuanNA89 - 30/08/2019 - Calllog duyệt chứng từ Mirae - Loại 159
                    else if (request.TypeId == 159)
                    {
                        #region Automatic
                        if (oldStatus < 4 && objects != null && objects.ToString() != "[]")
                        {
                            int l__159__Item__Id = 0;
                            RequestDetail l__159__ReqDet = null;
                            foreach (var item in objects)
                            {
                                l__159__Item__Id = item.Id;
                                l__159__ReqDet = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l__159__ReqDet = db.RequestDetails.FirstOrDefault(x => x.Id == l__159__Item__Id);
                                }
                                if (l__159__ReqDet != null)
                                {
                                    if (item.TrangThaiDuyet == 1)
                                        l__159__ReqDet.Approved = true;
                                    else if (item.TrangThaiDuyet == 0)
                                        l__159__ReqDet.Approved = false;
                                    else
                                        l__159__ReqDet.Approved = null;

                                    l__159__ReqDet.Property4 = item.LyDoTuChoi;
                                }
                            }
                            db.SaveChanges();
                            sql.ExecuteWithoutResult("sp_Calllog_DuyetChungTuMirae_159_Duyet", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                    new SqlParameter("@RequestId", request.Id) ,
                                    new SqlParameter("@User", UserManager.CurrentUser.InsideCode)
                            });

                        }
                        #endregion
                    }
                    //▲ Add - TuanNA89 - 30/08/2019 - Calllog duyệt chứng từ Mirae - Loại 159                    
                    else if (request.TypeId == 162)
                    {
                        #region Automatic
                        //▼	Add - TuanNA89 - 09/01/2020 - Calllog Tripi - Loại 162
                        /*
                         Note:
                           - 09/03/2020 - Add 2 loại xử lý mới ("Yêu cầu hoàn/ huỷ 1 chiều vé khứ hồi" và "Dịch vụ")
                         */

                        if (oldStatus < 4 && objects != null && objects.ToString() != "[]")
                        {
                            RequestDetail l__162__ReqDet = null;
                            long l__162__Item__Id = 0;
                            int l__162__LoaiXuLy = 0;
                            int l__162__BookingID_New = 0;
                            int l__162__ValueXacNhan = 0;
                            int l__162__BookingID_Old = 0;
                            foreach (var item in objects)
                            {
                                l__162__Item__Id = item.Id;
                                l__162__ReqDet = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l__162__ReqDet = db.RequestDetails.FirstOrDefault(x => x.Id == l__162__Item__Id);
                                }
                                if (l__162__ReqDet != null)
                                {
                                    l__162__LoaiXuLy = item.LoaiXuLy;
                                    if (new List<int> { 1, 5 }.IndexOf(l__162__LoaiXuLy) > -1)
                                    {
                                        l__162__ValueXacNhan = item.XacNhanHuy;
                                        if (l__162__ValueXacNhan == 0)
                                        {
                                            TempData["Message"] = "Bắt buộc tích chọn xác nhận huỷ hoặc không huỷ";
                                            request.Status = Key.StatusRequest.Processing;
                                            db.SaveChanges();
                                            return RedirectToAction("Details", new { Id = request.Id });
                                        }
                                        l__162__ReqDet.Quantity2 = l__162__ValueXacNhan;                                        
                                        l__162__BookingID_Old = int.TryParse(l__162__ReqDet.Property1, out l__162__BookingID_Old) ? l__162__BookingID_Old : 0;
                                    }
                                    else if (new List<int> { 2, 3, 4 }.IndexOf(l__162__LoaiXuLy) > -1)
                                    {
                                        l__162__ReqDet.Property8 = item.BookingID_New;
                                        l__162__BookingID_New = item.BookingID_New;
                                        l__162__BookingID_Old = int.TryParse(l__162__ReqDet.Property1, out l__162__BookingID_Old) ? l__162__BookingID_Old : 0;
                                    }
                                    else if (new List<int> { 6 }.IndexOf(l__162__LoaiXuLy) > -1)
                                    {
                                        l__162__ReqDet.Numeric1 = item.PhiThayDoi;
                                    }
                                }
                            }
                            db.SaveChanges();
                            var result = new CallApiHelper.ResponseModel();
                            if (new List<int> { 2, 3, 4 }.IndexOf(l__162__LoaiXuLy) > -1)
                            {
                                // API Sinh bookingId mới
                                result = XuLyGoiAPITripi_162(request.Id, request.Sender, request.FromShop, UserManager.CurrentUser.InsideCode, l__162__BookingID_Old, l__162__BookingID_New);
                                if(result.Result == 1)
                                {
                                    sql.ExecuteWithoutResult("CallLogTripi_Type162_Complete", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@RequestId", request.Id) ,
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode)
                                    });
                                    if (new List<int> { 4 }.IndexOf(l__162__LoaiXuLy) > -1)
                                    {
                                        result = new CallApiHelper.ResponseModel();
                                        result = XuLyGoiAPITripi_162(request.Id, request.Sender, request.FromShop, UserManager.CurrentUser.InsideCode, l__162__BookingID_Old, l__162__BookingID_Old);
                                    }
                                }

                                if (result.Result != 1)
                                {
                                    request.Status = Key.StatusRequest.Processing;
                                    db.SaveChanges();
                                    TempData["Message"] = result.Message;
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                            }
                            else if(new List<int> { 5 }.IndexOf(l__162__LoaiXuLy) > -1)
                            {
                                sql.ExecuteWithoutResult("CallLogTripi_Type162_Complete", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                        new SqlParameter("@RequestId", request.Id) ,
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode)
                                });
                                
                                result = new CallApiHelper.ResponseModel();
                                result = XuLyGoiAPITripi_162(request.Id, request.Sender, request.FromShop, UserManager.CurrentUser.InsideCode, l__162__BookingID_Old, l__162__BookingID_Old);                                

                                if (result.Result != 1)
                                {
                                    request.Status = Key.StatusRequest.Processing;
                                    db.SaveChanges();
                                    TempData["Message"] = result.Message;
                                    return RedirectToAction("Details", new { Id = request.Id });
                                }
                            }
                            else
                            {
                                sql.ExecuteWithoutResult("CallLogTripi_Type162_Complete", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                        new SqlParameter("@RequestId", request.Id) ,
                                        new SqlParameter("@User", UserManager.CurrentUser.InsideCode)
                                });
                            }
                        }
                        //▲ Add - TuanNA89 - 09/01/2020 - Calllog Tripi - Loại 162
                        #endregion
                    }
                    else
                    {
                        #region Automatic
                        if (objects.ToString() != "[]")
                        {
                            foreach (var item in objects)
                            {
                                int id = item.Id;
                                RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                if (requestdetail != null)
                                {
                                    requestdetail.ItemId = item.ItemId;
                                    requestdetail.Quantity = item.Quantity;
                                    requestdetail.Note = item.Note;
                                    //requestdetail.Status = item.Status
                                    requestdetail.Sum = item.Sum;
                                    requestdetail.QuantityAvaiable = item.QuantityAvaiable;
                                    requestdetail.EmpCode = item.EmpCode;
                                    requestdetail.Price = item.Price;
                                    //requestdetail.NoticeAlertId = item.NoticeAlertId;
                                    requestdetail.ShopCode = item.ShopCode;
                                    requestdetail.ShopCode2 = item.ShopCode2;
                                    requestdetail.OfficeCode = item.OfficeCode;
                                    requestdetail.CustomerCode = item.CustomerCode;
                                    requestdetail.CustomerName = item.CustomerName;
                                    requestdetail.SaleCode = item.SaleCode;
                                    #region Time1
                                    if (item.Time1 == null)
                                    {
                                        requestdetail.Time1 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time1;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time1 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time1 = null;
                                        }
                                    }
                                    #endregion
                                    #region Time2
                                    if (item.Time2 == null)
                                    {
                                        requestdetail.Time2 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time2;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time2 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time2 = null;
                                        }
                                    }
                                    #endregion
                                    #region Time3
                                    if (item.Time3 == null)
                                    {
                                        requestdetail.Time3 = null;
                                    }
                                    else
                                    {
                                        string timeStart = item.Time3;
                                        string[] timeArr = timeStart.Split('/');
                                        if (timeArr.Length == 3)
                                        {
                                            string format = String.Format("{0}/{1}/{2}"
                                               , timeArr[0].Length == 1 ? "d" : "dd"
                                               , timeArr[1].Length == 1 ? "M" : "MM"
                                               , timeArr[2].Length == 2 ? "yy" : "yyyy");
                                            requestdetail.Time3 = timeStart.EParseToDateTime(format);
                                        }
                                        else
                                        {
                                            requestdetail.Time3 = null;
                                        }
                                    }
                                    #endregion
                                    requestdetail.Money1 = item.Money1;
                                    requestdetail.Money2 = item.Money2;
                                    requestdetail.Money3 = item.Money3;
                                    requestdetail.Money4 = item.Money4;
                                    requestdetail.ProductCode = item.ProductCode;
                                    requestdetail.ProductName = item.ProductName;
                                    requestdetail.Imei = item.Imei;
                                    requestdetail.Approved = item.Approved;
                                    requestdetail.EmpCode1 = item.EmpCode1;
                                    requestdetail.EmpCode2 = item.EmpCode2;
                                    requestdetail.EmpCode3 = item.EmpCode3;
                                    requestdetail.Quantity1 = item.Quantity1;
                                    requestdetail.Quantity2 = item.Quantity2;
                                    requestdetail.Quantity3 = item.Quantity3;
                                    requestdetail.Quantity4 = item.Quantity4;
                                    requestdetail.Quantity5 = item.Quantity5;
                                    requestdetail.Property1 = item.Property1;
                                    requestdetail.Property2 = item.Property2;
                                    requestdetail.Property3 = item.Property3;
                                    requestdetail.Property4 = item.Property4;
                                    requestdetail.Property5 = item.Property5;
                                    requestdetail.Property6 = item.Property6;
                                    requestdetail.Property7 = item.Property7;
                                    requestdetail.Property8 = item.Property8;
                                    requestdetail.Property9 = item.Property9;
                                    requestdetail.Property10 = item.Property10;
                                    requestdetail.JobCode1 = item.JobCode1;
                                    requestdetail.JobCode2 = item.JobCode2;
                                }
                            }
                        }
                        #endregion
                    }
                    #endregion

                    //▼	Edit - VietMXH - 13/01/2018 - Gom code==================================================
                    #region ===Insert Cc===
                    //▲	Edit - VietMXH - 13/01/2018 - Gom code==================================================
                    if (permissions.Contains(Permission.Sender) || permissions.Contains(Permission.Assigner)
                        || permissions.Contains(Permission.GroupAssigner) || permissions.Contains(Permission.Cc)
                        || permissions.Contains(Permission.Admin) || permissions.Contains(Permission.SupperAdmin))
                    {
                        string strCc = "";
                        foreach (var item in Ccs) { strCc += item.id + ","; }
                        if (strCc.Length > 0)
                        {
                            strCc = strCc.Substring(0, strCc.Length - 1);
                            sql.ExecuteWithoutResult("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@StepNo", request.StepNo),
                                new SqlParameter("@Assigner", strCc),
                                new SqlParameter("@Type", Key.TypeAssigner.Cc),
                                new SqlParameter("@RemoveAssignerOld", 1),
                            });
                        }
                        else
                        {
                            (from a in db.Assigners
                             where a.RequestId == request.Id
                             && a.Type == Key.TypeAssigner.Cc
                             select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                        }
                        //(from a in db.Assigners
                        // where a.RequestId == request.Id
                        // && a.Type == Key.TypeAssigner.Cc && a.GroupMail == null
                        // select a).ToList().ForEach(x => x.Status = Key.Status.Unavailable);
                        //foreach (var Cc in Ccs)
                        //{
                        //    //Cc.id
                        //    string EmpCode = Cc.id;
                        //    var CcExist = db.Assigners.FirstOrDefault(x => x.RequestId == request.Id
                        //                                            && x.Type == Key.TypeAssigner.Cc
                        //                                            && x.EmployeeCode == EmpCode);
                        //    if (CcExist == null)
                        //    {
                        //        CcExist = new Assigner();
                        //        CcExist.RequestId = request.Id;
                        //        CcExist.EmployeeCode = EmpCode;
                        //        CcExist.StepNo = request.StepNo;
                        //        CcExist.Type = Key.TypeAssigner.Cc;
                        //        CcExist.Status = Key.Status.Available;
                        //        CcExist.TimeCreate = DateTime.Now;
                        //        db.Assigners.Add(CcExist);
                        //    }
                        //    else
                        //        CcExist.Status = Key.Status.Available;
                        //}
                    }
                    #endregion

                    //▼	Edit - VietMXH - 13/01/2018 - Gom code==================================================
                    #region ===UploadImage===
                    //▲	Edit - VietMXH - 13/01/2018 - Gom code==================================================
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        //Save file content goes here
                        string fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database

                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = request.Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);

                            //==================== Hiền.Đoàn 18.01.2016 Lưu file của loại CL DN
                            if (request.TypeId == 134)
                            {
                                sql.ExecuteWithoutResult("CalllogVendor_SaveUploadFile", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@Uri", Keyword.GetFolderFileAttach() + fName),
                                    new SqlParameter("@StepNo", request.StepNo),
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@TimeCreate", DateTime.Now),
                                    new SqlParameter("@Status", Key.Status.Available),
                                    new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode)
                                });
                            }
                        }
                    }
                    #endregion

                    request.StillShowing = false;
                    request.TimeLastUpdate = DateTime.Now;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;

                    db.SaveChanges();

                    var msg146 = "";
                    string l_Msg_153 = "";

                    #region ===Xử lý riêng sau khi Hoàn tất===
                    switch (request.TypeId)
                    {
                        case 24:
                            #region MyRegion
                            //    // update CL bên Insside lên bước 4 (sp_StepCL_inside_24)
                            //    if (request.StepNo == 3)
                            //    {
                            //        SqlParameter[] param = new SqlParameter[] {
                            //                                new SqlParameter("@RequestID", request.Id),
                            //                                new SqlParameter("@Flag", 3)
                            //                            };
                            //        sql.ExecuteWithoutResult("CreateAndUpdateDetail_outToins_24", CommandType.StoredProcedure, param);
                            //    }
                            //    if (request.StepNo == 1)
                            //    {
                            //        //BC 1 NCC không đồng ý -> Auto CL outside - inside bc1
                            //        SqlParameter[] param = new SqlParameter[] {
                            //                                new SqlParameter("@RequestID", request.Id),
                            //                                new SqlParameter("@Flag", 1)//tạo mới detail inside
                            //                            };
                            //        sql.ExecuteWithoutResult("CreateAndUpdateDetail_outToins_24", CommandType.StoredProcedure, param);
                            //    }
                            #endregion
                            break;
                        case 121:
                            #region MyRegion
                            RequestDetail detailsTraGop = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id
                                && x.Status == Key.Status.Available);
                            if (statusRequestBefore != Key.StatusRequest.Complete)
                            {
                                sql.ExecuteWithoutResult("CRM_UpdateApprove", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@DocEntryCTTraGopCRM", detailsTraGop.Property8),
                                new SqlParameter("@Sohopdong", detailsTraGop.Property7 == null || detailsTraGop.Property7 == "" ? "" : detailsTraGop.Property7),
                                new SqlParameter("@Status",detailsTraGop.Quantity6),
                                new SqlParameter("@GhiChu",detailsTraGop.Note),
                                new SqlParameter("@IDCallLog",request.Id)
                            });
                            }
                            else
                            {
                                if (detailsTraGop.Quantity6 == 3)
                                {
                                    sql.ExecuteWithoutResult("CRM_UpdateApprove", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@DocEntryCTTraGopCRM", detailsTraGop.Property8),
                                    new SqlParameter("@Sohopdong", detailsTraGop.Property7 == null || detailsTraGop.Property7 == "" ? "" : detailsTraGop.Property7),
                                    new SqlParameter("@Status",detailsTraGop.Quantity6),
                                    new SqlParameter("@GhiChu",detailsTraGop.Note),
                                    new SqlParameter("@IDCallLog",request.Id)
                                });
                                }
                            }
                            if (falgCompletContinueAssigner == true)
                            {
                                sql.ExecuteWithoutResult("FRT_SP_ChiaCallLog_HangDoi", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                                });
                            }
                            else
                            {
                                SqlParameter[] param = new SqlParameter[] {
                                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Status","0")
                            };
                                sql.ExecuteWithoutResult("FRT_SP_DoiTrangThaiUser", CommandType.StoredProcedure, param);
                            }
                            #endregion
                            break;
                        case 124:
                            #region MyRegion
                            if (statusRequestBefore < Key.StatusRequest.Complete)
                            {
                                RequestDetail l__124__ReqDet = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l__124__ReqDet = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                }
                                if (l__124__ReqDet != null)
                                {
                                    sql.ExecuteWithoutResult("FRT_SP_CapNhapThongTinKH", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@IDCalllog", request.Id),
                                        new SqlParameter("@TrangThai", l__124__ReqDet.Approved == true?  1 : 0 ),
                                        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                                        new SqlParameter("@GhiChu", l__124__ReqDet.Property2),
                                        new SqlParameter("@IDFormDK", l__124__ReqDet.SaleCode),
                                    });
                                    #region ===Call API BCN===
                                    int l__124__IDCardCode = int.TryParse(l__124__ReqDet.EmpCode, out l__124__IDCardCode) ? l__124__IDCardCode : 0;
                                    if (l__124__IDCardCode > 0)
                                    {
                                        FFriendsCreditScoring l__124__FFriendsCreditScoring = new FFriendsCreditScoring();
                                        //  Param: SysCode: 1:Duyệt CL Thông tin
                                        l__124__FFriendsCreditScoring.API_Scoring_BCN(l__124__IDCardCode, 1, request.Id);
                                    }
                                    #endregion
                                }
                            }
                            #endregion
                            break;
                        case 127:
                            #region MyRegion
                            sql.ExecuteWithoutResult("POS_UpdateApprovedDuyetHinhAnh", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID", request.Id) ,
                                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode)
                            });
                            #endregion
                            break;
                        case 128:
                            #region MyRegion
                            RequestDetail l__128__ReqDet = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                l__128__ReqDet = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            }
                            if (l__128__ReqDet != null)
                            {
                                sql.ExecuteWithoutResult("FRT_SP_CapNhapSDTKH_POS_CMND_TKNH", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id),
                                    new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode)
                                });
                                #region ===Call API BCN===
                                int l__128__IDCardCode = int.TryParse(l__128__ReqDet.Property5, out l__128__IDCardCode) ? l__128__IDCardCode : 0;
                                if (l__128__IDCardCode > 0)
                                {
                                    FFriendsCreditScoring l__128__FFriendsCreditScoring = new FFriendsCreditScoring();
                                    //  Param: SysCode: 2:Duyệt CL Thay đổi Thông tin
                                    l__128__FFriendsCreditScoring.API_Scoring_BCN(l__128__IDCardCode, 2, request.Id);
                                }
                                #endregion
                            }
                            #endregion
                            break;
                        case 129:
                            #region MyRegion
                            RequestDetail requestDuyet = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id &&
                                        x.Approved == true && x.Status == Key.Status.Available);
                            if (requestDuyet != null)
                            {
                                sql.ExecuteWithoutResult("FRT_SP_CapNhapCMNDKH", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@NewCMND", requestDuyet.Property3) ,
                                new SqlParameter("@IdCardCode", requestDuyet.Property6) ,
                                new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode)
                            });
                            }
                            #endregion
                            break;
                        case 131:
                            #region MyRegion
                            RequestDetail l__131__ReqDet = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                l__131__ReqDet = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            }
                            if (l__131__ReqDet != null)
                            {
                                sql.ExecuteWithoutResult("Duyet_HAChungTuFF", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestID", request.Id),
                                    new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                                });
                                #region ===Call API BCN===
                                int l__131__IDCardCode = int.TryParse(l__131__ReqDet.Property1, out l__131__IDCardCode) ? l__131__IDCardCode : 0;
                                if (l__131__IDCardCode > 0)
                                {
                                    FFriendsCreditScoring l__131__FFriendsCreditScoring = new FFriendsCreditScoring();
                                    //  Param: SysCode: 3:Duyệt CL UQTN
                                    l__131__FFriendsCreditScoring.API_Scoring_BCN(l__131__IDCardCode, 3, request.Id);
                                }
                                #endregion
                            }
                            #endregion
                            break;
                        case 133:
                            #region MyRegion
                            sql.ExecuteWithoutResult("CRM_CapNhatHuyTrangThaiPhieuThu", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@RequestID", request.Id) ,
                            new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
                        });
                            #endregion
                            break;
                        case 136:
                        case 137:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_CallLogSaoKe_AfterComplete", CommandType.StoredProcedure, new SqlParameter[] {
                                new SqlParameter("@ReqId", request.Id)
                            });
                            #endregion
                            break;
                        case 138:
                            #region MyRegion
                            if (request.StepNo == 1 && form["ApprovedHoanTien"].ToString() == "1")
                            {
                                sql.ExecuteWithoutResult("sp_UpdateStepNoCallLogFFriendsRefund", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID", request.Id) ,
                                new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
                            });
                            }
                            else
                            {
                                sql.ExecuteWithoutResult("sp_Web_FinishCallLog_FFriendsRefund", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestID", request.Id) ,
                                new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
                            });
                            }
                            #endregion
                            break;
                        case 140:
                            #region MyRegion
                            RequestDetail rd_140 = null;
                            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                            {
                                rd_140 = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                            }

                            #region "Khách hàng thuộc công ty"
                            if (rd_140 != null && rd_140.Quantity == 1)
                            {
                                if (request.StepNo == 1)
                                {
                                    //Khách hàng thuộc công ty => không duyệt - Bước 1
                                    if (form["ApprovedHoanTien"].ToString() == "0")
                                    {
                                        sql.ExecuteWithoutResult("CallLog_POS_CRM_ApprovalReturnSOCard", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id) ,
                                    new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@Type_CL","0")
                                });
                                    }
                                    //Khách hàng cùng công ty => duyệt - Bước 1
                                    if (form["ApprovedHoanTien"].ToString() == "1" && request.StepNo == 1)
                                    {
                                        sql.ExecuteWithoutResult("UpdateStepRequestCancelPayoo", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id) ,
                                    new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
                                });
                                    }
                                }
                                if (request.StepNo == 2)
                                {
                                    //Khách hàng thuộc công ty => không duyệt - Bước 2
                                    if (form["ApprovedHoanTien"].ToString() == "0" && request.StepNo == 2)
                                    {
                                        sql.ExecuteWithoutResult("CallLog_POS_CRM_ApprovalReturnSOCard", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id) ,
                                    new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@Type_CL","0")
                                });
                                    }
                                    //Khách hàng cùng công ty => duyệt - Bước 2
                                    if (rd_140.Money1 > rd_140.Money2 && form["ApprovedHoanTien"].ToString() == "1" && request.StepNo == 2)
                                    {
                                        sql.ExecuteWithoutResult("CallLog_POS_CRM_ApprovalReturnSOCard", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id) ,
                                    new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@Type_CL","1"),
                                    new SqlParameter("@ApprovalType_CL",50),
                                });
                                    }
                                    else if (rd_140.Money1 <= rd_140.Money2 && form["ApprovedHoanTien"].ToString() == "1" && request.StepNo == 2)
                                    {
                                        sql.ExecuteWithoutResult("CallLog_POS_CRM_ApprovalReturnSOCard", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                    new SqlParameter("@RequestId", request.Id) ,
                                    new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
                                    new SqlParameter("@Type_CL","1"),
                                    new SqlParameter("@ApprovalType_CL",100),
                                });
                                    }
                                }
                            }
                            #endregion "Khách hàng thuộc công ty"

                            #region "Khách hàng không thuộc công ty"
                            if (rd_140 != null && rd_140.Quantity == 2)
                            {
                                //Khách hàng không cùng công ty => duyệt B1
                                if (rd_140.Money1 > rd_140.Money2 && form["ApprovedHoanTien"].ToString() == "1" && request.StepNo == 1)
                                {
                                    sql.ExecuteWithoutResult("CallLog_POS_CRM_ApprovalReturnSOCard", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Type_CL","1"),
                                new SqlParameter("@ApprovalType_CL",50),
                                });
                                }
                                else if (rd_140.Money1 <= rd_140.Money2 && form["ApprovedHoanTien"].ToString() == "1" && request.StepNo == 1)
                                {
                                    sql.ExecuteWithoutResult("CallLog_POS_CRM_ApprovalReturnSOCard", CommandType.StoredProcedure, new SqlParameter[]
                                {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Type_CL","1"),
                                new SqlParameter("@ApprovalType_CL",100),
                                });
                                }
                                //Khách hàng không cùng công ty => Khôngduyệt B1

                                if (form["ApprovedHoanTien"].ToString() == "0" && request.StepNo == 1)
                                {
                                    sql.ExecuteWithoutResult("CallLog_POS_CRM_ApprovalReturnSOCard", CommandType.StoredProcedure, new SqlParameter[]
                           {
                                new SqlParameter("@RequestId", request.Id) ,
                                new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Type_CL","0")
                           });
                                }
                            }
                            #endregion "Khách hàng không thuộc công ty"
                            #endregion
                            break;
                        case 143:
                            #region MyRegion
                            if (objects != null && objects.ToString() != "[]")
                            {
                                foreach (var item in objects)
                                {
                                    int id = item.Id;

                                    //▼ Edit - TuanNA89 - 27/07/2018 - Loại: 143 - fix lỗi convert số
                                    int DieuKien = (item.DieuKien != null && item.DieuKien > 0) ? item.DieuKien : 0;
                                    //▲ Edit - TuanNA89 - 27/07/2018 - Loại: 143 - fix lỗi convert số

                                    string XacNhanHuySim = item.XacNhanHuySim; // NgoanHT - 29/03/2018 - sửa
                                    string XacNhanSimPhatSinhTieuDung = item.XacNhanSimPhatSinhTieuDung;// NgoanHT - 29/03/2018 - sửa
                                    string XacNhanKVKhongCoSong = item.XacNhanKVKhongCoSong;
                                    RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                                    if (requestdetail != null && DieuKien == 1)
                                    {
                                        sql.ExecuteWithoutResult("sp_POS_UpdateStatus_ClaimSubsidy", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@ID_Callog", request.Id) ,
                                        new SqlParameter("@Status",XacNhanKVKhongCoSong)
                                    });
                                    }
                                    else if (requestdetail != null && DieuKien == 2)
                                    {
                                        sql.ExecuteWithoutResult("sp_POS_UpdateStatus_ClaimSubsidy", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@ID_Callog", request.Id) ,
                                        new SqlParameter("@Status",XacNhanHuySim),
                                        new SqlParameter("@StatusTD",XacNhanSimPhatSinhTieuDung)
                                    });
                                    }
                                }
                            }
                            #endregion
                            break;
                        case 145:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_INS_Request_UpdateLightboxHangDemo", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@RequestId", request.Id)
                        });
                            #endregion
                            break;
                        case 146:
                            #region MyRegion
                            DataTable tablesRD = sql.ExecuteCommand("sp_CreditNoneCard_CompleteRequest", CommandType.StoredProcedure, new SqlParameter[]
                        {
                            new SqlParameter("@ReqId", request.Id ),
                            new SqlParameter("@UpdateBy",  UserManager.CurrentUser.InsideCode ),
                            new SqlParameter ("@Is_Complete", 1)
                        });
                            if (tablesRD != null && tablesRD.Rows.Count > 0)
                            {
                                DataRow row = tablesRD.Rows[0];
                                msg146 = row["Msg"].ToString();
                            }
                            #endregion
                            break;
                        case 151:
                            #region MyRegion
                            sql.ExecuteWithoutResult("sp_POS_ChuyenDoiTraGopShop", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id)
                            });
                            #endregion
                            break;
                        case 153:
                            #region MyRegion
                            DataTable table = sql.ExecuteCommand("sp__RefundPayment__CompleteCallLog__ToPOS", CommandType.StoredProcedure, new SqlParameter[]
                            {
                                new SqlParameter("@RequestId", request.Id),
                                new SqlParameter ("@UpdateBy",UserManager.CurrentUser.InsideCode)
                            });
                            l_Msg_153 = (table != null && table.Rows.Count > 0) ? table.Rows[0]["Msg"].ToString() : "Lỗi sp__RefundPayment__CompleteCallLog__ToPOS - Liên hệ VietMXH";
                            #endregion
                            break;
                        case 157:
                            #region MyRegion Edit - ThuongNM2 - 26/03/2019 - Loại yêu cầu mới 157 Check CIC KH
                            if (request.Status == Key.StatusRequest.Complete)
                            {
                                RequestDetail l__157__ReqDet = null;
                                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                                {
                                    l__157__ReqDet = db.RequestDetails.FirstOrDefault(x => x.RequestId == request.Id);
                                }
                                if (l__157__ReqDet != null)
                                {
                                    sql.ExecuteWithoutResult("sp_mpos_Scoring_DuyetCIC", CommandType.StoredProcedure, new SqlParameter[]
                                    {
                                        new SqlParameter("@IDCardCode", l__157__ReqDet.CustomerCode),
                                        new SqlParameter("@CallLogCIC", request.Id),
                                        new SqlParameter("@TrangThaiNo", l__157__ReqDet.Quantity2),
                                        new SqlParameter("@SoQuanHeTinDung", l__157__ReqDet.Quantity4),
                                        new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                                    });
                                    #region ===Call API BCN===
                                    int l__157__IDCardCode = int.TryParse(l__157__ReqDet.CustomerCode, out l__157__IDCardCode) ? l__157__IDCardCode : 0;
                                    if (l__157__IDCardCode > 0)
                                    {
                                        FFriendsCreditScoring l__157__FFriendsCreditScoring = new FFriendsCreditScoring();
                                        //  Param: SysCode: 4:Duyệt CL CIC
                                        l__157__FFriendsCreditScoring.API_Scoring_BCN(l__157__IDCardCode, 4, request.Id);
                                    }
                                    #endregion
                                }
                            }
                            #endregion
                            break;
                        case 158:
                            #region MyRegion
                            //▼	Edit - VietMXH - 18/04/2019 - 158:CallLog Chi thưởng DN==================================================
                            if (statusRequestBefore < Key.StatusRequest.Complete)
                            {
                                //  Do nothing
                            }
                            //▲	Edit - VietMXH - 18/04/2019 - 158:CallLog Chi thưởng DN==================================================
                            #endregion
                            break;
                        default:
                            break;
                    }
                    #endregion

                    #region ===Send Mail===
                    if (request.TypeId == 140 && form["ApprovedHoanTien"].ToString() == "1" && request.StepNo == 1)
                    {
                        XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.ChangeStep, UserManager.CurrentUser.InsideCode);
                    }
                    else if (request.TypeId == 138 && request.StepNo == 1 && form["ApprovedHoanTien"].ToString() == "1")
                    {
                        XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.ChangeStep, UserManager.CurrentUser.InsideCode);
                    }
                    else
                    {
                        XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Complete, UserManager.CurrentUser.InsideCode);
                    }
                    #endregion

                    #region ===Show Thông báo===
                    if (request.TypeId == 138 && request.StepNo == 1 && form["ApprovedHoanTien"].ToString() == "1")
                    {
                        TempData["Message"] = "Chuyển bước thành công!";
                    }
                    else if (request.TypeId == 140 && form["ApprovedHoanTien"].ToString() == "1" && request.StepNo == 1)
                    {
                        TempData["Message"] = "Chuyển bước thành công!";
                    }
                    else if (request.TypeId == 146)
                    {
                        TempData["Message"] = msg146;
                    }
                    else if (request.TypeId == 153)
                    {
                        TempData["Message"] = l_Msg_153;
                    }
                    else
                    {
                        TempData["Message"] = "Hoàn tất thành công!" + CapNhatPos;
                    }
                    #endregion

                    return RedirectToAction("Index", "Home");
                }
                else
                {
                    #region ===Not Valid===
                    TempData["Message"] = "Không tìm được Request!";
                    return RedirectToAction("Index", "Home");
                    #endregion
                }
            }
            catch (Exception ex)
            {
                #region ===Log loi===
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0} -  Id:{1} - sender :{2}", ex.ToString(), requestId, sender));
                TempData["Message"] = ex.Message;
                return RedirectToAction("Index", "Home");
                #endregion
            }
        }
        [HttpPost]
        public ActionResult Unbook(FormCollection form)
        {
            var requestId = form["RequestId"].EParseToLong();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                DataTable checkUserAssigner = sql.ExecuteCommand("FRT_SP_Book_Request", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@IDCallLog",requestId),
                        new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode),
                        new SqlParameter("@Type",2)
                    });
                if (checkUserAssigner.Rows[0][0].ToString() == "0")
                {
                    TempData["Message"] = "Nhả book thành công";
                    return RedirectToAction("Index", "Home");
                }
                else
                {
                    TempData["Message"] = "Nhả book không thành công - Vui lòng thử lại";
                    return RedirectToAction("Index", "Home");
                }
            }
            else
            {
                TempData["Message"] = "Không tìm được Request!";
                return RedirectToAction("Index", "Home");
            }

        }

        public ActionResult Print(long Id, int Type = 1)
        {
            try
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                if (!(Id > 0))
                {
                    TempData["Message"] = "Mã Request Không hợp lệ!";
                    return RedirectToAction("Index", "Home");
                }

                Request request = null;
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    request = db.Requests.FirstOrDefault(x => x.Id == Id);
                }

                if (!(request != null))
                {
                    TempData["Message"] = "Request Không Tồn tại!";
                    return RedirectToAction("Index", "Home");
                }

                switch (request.TypeId)
                {
                    case 142:
                        #region MyRegion
                        ViewBag.TimeCreate = request.TimeCreate;
                        ViewBag.Id = request.Id;
                        ViewBag.TypeId = request.TypeId;
                        ViewBag.Type = Type;
                        return View();
                        #endregion
                        break;
                    default:
                        #region MyRegion
                        TempData["Message"] = "Loại Request chưa cấu hình để In!";
                        return RedirectToAction("Index", "Home");
                        #endregion
                        break;
                }
            }
            catch (Exception ex)
            {
                TempData["Message"] = "Request chưa cấu hình để in! EX!!!";
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult PrintInfo(long Id)
        {
            Request request = db.Requests.FirstOrDefault(x => x.Id == Id);
            Dictionary<string, List<Dictionary<string, object>>> myList =
                            new Dictionary<string, List<Dictionary<string, object>>>();
            DataSet infors = sql.ExecuteCommandDataSet("Request_GetDetail", CommandType.StoredProcedure, new SqlParameter[] {
            new SqlParameter("@RequestId",Id)});
            myList.Add("danhsachnguoixuly", infors.Tables[2].EParseToObjects());

            if (request.TypeId == 82 || request.TypeId == 103)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 32)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("Items_GetByRequest", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 77)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("RequestDetail_Get", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 75)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }
            else if (request.TypeId == 68)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table = sql.ExecuteCommand("[Items_GetByRequest]", CommandType.StoredProcedure, param);
                myList.Add("chitietyeucau", table.EParseToObjects());
            }

            string ans = JsonConvert.SerializeObject(myList, Newtonsoft.Json.Formatting.Indented);
            var jsonResult = Json(ans, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        #endregion

        public ActionResult PrintInfo2(long Id, int Type)
        {
            Request request = null;
            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
            {
                request = db.Requests.FirstOrDefault(x => x.Id == Id);
            }

            Dictionary<string, List<Dictionary<string, object>>> myList = new Dictionary<string, List<Dictionary<string, object>>>();

            //▼	Edit - VietMXH - 11/10/2019 - Thay đổi Form in CL Chuyển trả FFs==================================================
            if (request.TypeId == 142)
            {
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", Id), new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode) };
                DataTable table = sql.ExecuteCommand("sp_HoanTienKH_In_ChuyenTra", CommandType.StoredProcedure, param);
                myList.Add("chitietform", table.EParseToObjects());

                SqlParameter[] param2 = new SqlParameter[] { new SqlParameter("@RequestId", Id) };
                DataTable table2 = sql.ExecuteCommand("sp_HoanTienKH_In_ChiTiet", CommandType.StoredProcedure, param2);
                myList.Add("chitietyeucau", table2.EParseToObjects());
            }
            //▲	Edit - VietMXH - 11/10/2019 - Thay đổi Form in CL Chuyển trả FFs==================================================

            string ans = JsonConvert.SerializeObject(myList, Newtonsoft.Json.Formatting.Indented);
            var jsonResult = Json(ans, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        [HttpGet] // create.js
        public ActionResult GetEmps(string ShopCode = "")
        {
            string OfficeCode = string.Empty;
            if (ShopCode == "0" && UserManager.CurrentUser != null)
            {
                ShopCode = UserManager.CurrentUser.WarehouseCode;
                OfficeCode = UserManager.CurrentUser.OrganizationHierachyCode;
            }
            DataTable table = new EmployeeDAL().GetEmp(ShopCode, "", OfficeCode);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }

        [HttpGet]  // create.js
        public ActionResult GetDevices(int type)
        {
            DataTable table = itemDal.GetDevice(type);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        [HttpGet]  // create.js
        public ActionResult GetLimitedValue(int type)
        {
            DataTable table = itemDal.GetLimited(UserManager.CurrentUser.WarehouseCode, type);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        [HttpGet] // create.js   Hỗ trợ thông tin (8) , It (29) , Sữa chữa cơ sở vật chất (6)
        public ActionResult GetCatagoryTree(int type)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@TypeId", type), };
            DataTable table = sql.ExecuteCommand("Items_GetInCallLog", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> devices = table.EParseToObjects();
                return Json(devices, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        //▼ Add - TrongNM - 05/06/2018 - F.F Gach No 149 - Lay Chi Nhanh Theo Ten Ngan Hang
        [HttpGet] // create.js   
        public ActionResult GetChiNhanhNganHang(string BankCode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@BankCode",BankCode),};
            DataTable table = sql.ExecuteCommand("sp_GetChiNhanhTheoNganHang", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> devices = table.EParseToObjects();
                return Json(devices, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        //▲ Add - TrongNM - 05/06/2018 - F.F Gach No 149 - Lay Chi Nhanh Theo Ten Ngan Hang
        //▼ Add - TrongNM - 05/06/2018 - F.F Gach No 149 - Lay Ngan Hang
        [HttpGet] // create.js   
        public ActionResult GetNganHang()
        {
            DataTable table = sql.ExecuteCommand("GetBank", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> devices = table.EParseToObjects();
                return Json(devices, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        //▲ Add - TrongNM - 05/06/2018 - F.F Gach No 149 - Lay Ngan Hang
        [HttpGet] // create.js  
        public string GetScheduleTime(string TypeId)
        {
            int id = TypeId.EParseToInt();
            var scheduleTime = db.ScheduleTimes.FirstOrDefault(x => x.TypeId == id && x.Status == Key.Status.Available);
            if (scheduleTime != null)
            {
                if (scheduleTime.AfterDays == null)
                {
                    var time = DateTime.Now.AddDays(scheduleTime.BeforeDays.Value);

                    var timeDelivery = new DateTime(DateTime.Now.Year, DateTime.Now.Month, scheduleTime.DateOfMonth.Value);
                    if (time > timeDelivery)
                        timeDelivery = timeDelivery.AddMonths(1);
                    return timeDelivery.ToString("yyyy-MM-dd");
                }
                else
                    return DateTime.Now.AddDays(scheduleTime.AfterDays.Value).ToString("yyyy-MM-dd");

            }
            return DateTime.Now.AddDays(7).ToString("yyyy-MM-dd");
        }

        //▼	Edit - VietMXH - 08/04/2019 - Tối ưu==================================================
        [HttpGet]
        public ActionResult GetConversations(string RequestId)
        {
            long l_RequestId = RequestId.EParseToLong();
            SqlParameter[] l_SqlParameter = new SqlParameter[]{
                    new SqlParameter("@RequestId", l_RequestId)
                };
            DataTable l_DataTable = sql.ExecuteCommand("sp_WEB_GetConversations", CommandType.StoredProcedure, l_SqlParameter);
            var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        //▲	Edit - VietMXH - 08/04/2019 - Tối ưu==================================================

        [HttpGet]
        public ActionResult GetRequestDetails(long id)
        {
            SqlParameter[] param = new SqlParameter[]
                        {
                            new SqlParameter("@RequestId",id)
                        };
            DataTable table = sql.ExecuteCommand("[Items_GetByRequest]", CommandType.StoredProcedure, param);
            if (table != null)
            {
                List<Dictionary<string, object>> details = table.EParseToObjects();
                return Json(details, JsonRequestBehavior.AllowGet);
            }
            return View();
        }
        public ActionResult GetRequestDetails2(long id)
        {
            SqlParameter[] param = new SqlParameter[]
                        {
                            new SqlParameter("@RequestId",id)
                        };
            DataTable table = sql.ExecuteCommand("RequestDetail_Get", CommandType.StoredProcedure, param);
            if (table != null)
            {
                List<Dictionary<string, object>> details = table.EParseToObjects();
                return Json(details, JsonRequestBehavior.AllowGet);
            }
            return View();
        }

        [HttpGet]
        public ActionResult GetRequestSimilar(int TypeId)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@EmpCode",UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@TypeId",TypeId)
                };
            DataTable table = sql.ExecuteCommand("Request_GetSimilar", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult GetDataToCreate()
        {
            Dictionary<string, List<Dictionary<string, object>>> myList =
                             new Dictionary<string, List<Dictionary<string, object>>>();

            DataTable tableCatagory = sql.ExecuteCommand("Categories_Get", CommandType.StoredProcedure, null);
            myList.Add("Categories", tableCatagory.EParseToObjects());

            DataTable tableDevice = sql.ExecuteCommand("Items_Get", CommandType.StoredProcedure, null);
            myList.Add("Devices", tableDevice.EParseToObjects());

            SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@ShopCode",UserManager.CurrentUser.WarehouseCode)
                };
            DataTable tableLimited = sql.ExecuteCommand("Items_LimitedValue", CommandType.StoredProcedure, param);
            myList.Add("Limited", tableLimited.EParseToObjects());

            string ans = JsonConvert.SerializeObject(myList, Newtonsoft.Json.Formatting.Indented);
            return Json(ans, JsonRequestBehavior.AllowGet);

        }
        [HttpPost]
        public ActionResult SaveUploadedFile(string RequestId)
        {
            bool isSavedSuccessfully = true;
            string fName = string.Empty;

            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    //Save file content goes here
                    fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                        long Id = RequestId.EParseToLong();
                        var request = db.Requests.FirstOrDefault(x => x.Id == Id);
                        if (request != null)
                        {
                            FileAttach fileAttach = new FileAttach();
                            fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            fileAttach.StepNo = request.StepNo;
                            fileAttach.RequestId = Id;
                            fileAttach.TimeCreate = DateTime.Now;
                            fileAttach.Status = Key.Status.Available;
                            db.FileAttachs.Add(fileAttach);
                            db.SaveChanges();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                isSavedSuccessfully = false;
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController SaveUploadFile()", ex.ToString());
            }
            if (isSavedSuccessfully)
                return Json(new { Message = fName }, JsonRequestBehavior.AllowGet);
            else
                return Json(new { Message = "Error in saving file" }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SaveUploadedFileDetail(string RequsetDetailId)
        {
            bool isSavedSuccessfully = true;
            string fName = string.Empty;
            List<string> myCollection = new List<string>();
            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    //Save file content goes here

                    fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                        long Id = RequsetDetailId.EParseToLong();
                        var requestdetails = db.RequestDetails.FirstOrDefault(x => x.Id == Id);
                        if (requestdetails != null)
                        {
                            var request = db.Requests.FirstOrDefault(x => x.Id == requestdetails.RequestId);
                            if (request != null)
                            {
                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.RequestDetailId = Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                db.FileAttachs.Add(fileAttach);
                                myCollection.Add(fileAttach.Uri.ToString());
                                db.SaveChanges();

                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                isSavedSuccessfully = false;
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController SaveUploadFile()", ex.ToString());
            }
            if (isSavedSuccessfully)
            {
                string json = JsonConvert.SerializeObject(myCollection);
                return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                string json = JsonConvert.SerializeObject(myCollection);
                return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
            }
        }
        //	Edit - TrongNM - 15/06/2018 - Xuat Excel loại 148-Chuyển đổi trả góp
        public ActionResult ChuyenDoiTraGopExportExcel(long RequestId)
        {
            DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestId",RequestId),
            });
            string fileTemplate = "/TemplateExcel/Export_ChuyenDoiTraGop.xlsx";
            FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
            if (table != null && table.Rows.Count > 0)
            {
                using (ExcelPackage package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                    int index = 2;
                    foreach (DataRow row in table.Rows)
                    {
                        int col = 0;
                        col++; worksheet.Cells[index, col].Value = "";
                        col++; worksheet.Cells[index, col].Value = "";
                        col++; worksheet.Cells[index, col].Value = row["ThueGiaTriGiaTang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NgayGiaoDich"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["TenNguoiDung"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["SoDienThoai"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["SoTheTinDung"].ToString();
                        col++; worksheet.Cells[index, col].Value = XString.EConvertToCurrency(row["TienGiaoDich"].ToString());
                        col++; worksheet.Cells[index, col].Value = XString.EConvertToCurrency(row["TienTraGop"].ToString());
                        col++; worksheet.Cells[index, col].Value = row["PhanTramTraGop"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["SoThang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["DiaChiShop"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["TenMuc"].ToString();
                        index++;
                    }
                    Response.Clear();
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", "attachment; filename=Export_ChuyenDoiTraGop_" + table.Rows[0]["NgayTaoCL"].ToString() + ".xlsx");
                    Response.BinaryWrite(package.GetAsByteArray());
                    Response.Flush();
                    Response.End();
                }
            }
            //return Redirect("/DirectionAction/ConfigEmail");
            return RedirectToAction("Details");
        }
        //	Edit - TrongNM - 15/06/2018 - Xuat Excel loại 148-Chuyển đổi trả góp
        #region Báo cáo

        public ActionResult Report()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (UserManager.CheckPermisionMenu(Request.RawUrl) != true)
            {
                return RedirectToAction("Index", "Home");
            }
            //CategoryController category = new CategoryController();
            //@ViewBag.Categories = category.GetCategories();
            @ViewBag.ItemGroups = itemDal.GetComboGroups();
            @ViewBag.DeliveryTypes = itemDal.GetDeliveryTypes(Key.ComboBox.All);
            return View();
        }
        [HttpPost]
        public ActionResult Report(FormCollection form)
        {
            int typeId = form["typeId"].EParseToInt();
            string items = form["itemIdHidden"].ToString();
            string region = form["regionId"].ToString();
            string orifinal = form["hiddenOriginalId"].ToString();
            string groupItemId = Convert.ToString(form["groupId"]);
            string timeStart = form["timeStart"].ToString();
            string timeEnd = form["timeEnd"].ToString();
            string timeStartHC = form["timeStartHC"].ToString();
            string timeEndHC = form["timeEndHC"].ToString();
            string deliveryType = form["deliveryType"].ToString();
            SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@TypeId",typeId),
                     new SqlParameter("@Items",items),
                     new SqlParameter("@RegionCode",region),
                     new SqlParameter("@OriginalCode",orifinal),
                     new SqlParameter("@GroupItemId",groupItemId),
                     new SqlParameter("@TimeStart",timeStart),
                     new SqlParameter("@TimeEnd",timeEnd),
                     new SqlParameter("@TimeStartHC",timeStartHC),
                     new SqlParameter("@TimeEndHC",timeEndHC),
                     new SqlParameter("@DeliveryType",deliveryType)
                    };

            DataTable table = sql.ExecuteCommand("Report_ItemDetail", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                string fileTemplate = "/TemplateExcel/ThietBiHanhChinh.xlsx";
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                        int index = 2;
                        foreach (DataRow row in table.Rows)
                        {
                            int col = 0;

                            col++; worksheet.Cells[index, col].Value = row["Id"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["WarehouseName"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["GroupName"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["ItemName"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Price"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Quantity"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Unit"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Sum"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TypeDelivery"].ToString();
                            //col++; worksheet.Cells[index, col].Value = row["RequestId"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["MaCallogGoc"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["MaCallogTachView"].ToString();
                            index++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=ThietBiHanhChinh-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }
            return Report();
        }

        #endregion
        public ActionResult ExportExcelDetails(long RequestId)
        {
            DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@RequestId",RequestId),
            });
            string fileTemplate = "/TemplateExcel/ChiTietVoucher.xlsx";
            FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
            if (table != null && table.Rows.Count > 0)
            {
                using (ExcelPackage package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                    int index = 2;
                    foreach (DataRow row in table.Rows)
                    {
                        int col = 0;
                        col++; worksheet.Cells[index, col].Value = row["Approved"].ToString() == "True" ? "Duyệt" : row["Approved"].ToString() == "False" ? "Không duyệt" : "";
                        col++; worksheet.Cells[index, col].Value = row["ProductCode"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["ProductName"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Note"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Quantity"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Quantity1"].ToString();
                        col++; worksheet.Cells[index, col].Value = XString.EConvertToCurrency(row["Money1"].ToString());
                        col++; worksheet.Cells[index, col].Value = row["TenNhomHang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Property2"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Time1"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Time2"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Time3"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NganhHang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NhanHang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["LoaiVoucher"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NganhHangAD"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["LoaiHang"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["NhanAD"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Property9"].ToString();
                        col++; worksheet.Cells[index, col].Value = row["Property10"].ToString();
                        index++;
                    }
                    Response.Clear();
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("Content-Disposition", "attachment; filename=ChiTietVoucher-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                    Response.BinaryWrite(package.GetAsByteArray());
                    Response.Flush();
                    Response.End();
                }
            }
            //return Redirect("/DirectionAction/ConfigEmail");
            return RedirectToAction("Details");
        }
        [HttpGet]
        public ActionResult GetItemName(int GroupId = 0)
        {
            DataTable table = itemDal.GetItemsByGroup(GroupId);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult GetReportItems(int typeid, string[] items, string regions, string originals, string[] groupItemId, string timeStart, string timeEnd, string typeDeliveryName, string timeStartHC, string timeEndHC)
        {
            SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@TypeId",typeid),
                     new SqlParameter("@Items",String.Join(",",items)),
                     new SqlParameter("@RegionCode",regions),
                     new SqlParameter("@OriginalCode",originals),
                     new SqlParameter("@GroupItemId",String.Join(",",groupItemId)),
                     new SqlParameter("@TimeStart",timeStart),
                     new SqlParameter("@TimeEnd",timeEnd),
                     new SqlParameter("@TimeStartHC",timeStartHC),
                     new SqlParameter("@TimeEndHC",timeEndHC),
                     new SqlParameter("@DeliveryType",typeDeliveryName)
                    };

            DataTable table = sql.ExecuteCommand("Report_ItemDetail", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else return null;
        }
        [HttpGet]
        public ActionResult GetRegion()
        {
            RegionDAL regionDal = new RegionDAL();
            DataTable table = regionDal.GetRegions();
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        public enum Permission
        {
            [EnumMember(Value = "Sender")]
            Sender,
            [EnumMember(Value = "Assigner")]
            Assigner,
            [EnumMember(Value = "OldStepAssigner")]
            OldStepAssigner,
            [EnumMember(Value = "GroupAssigner")]
            GroupAssigner,
            [EnumMember(Value = "Cc")]
            Cc,
            [EnumMember(Value = "Admin")]
            Admin,
            [EnumMember(Value = "SupperAdmin")]
            SupperAdmin
        }

        public List<Permission> GetPermissions(long RequestId)
        {
            Request request = null;
            Requests_ARCH request_ARCH = null;

            using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
            {
                request = db.Requests.FirstOrDefault(x => x.Id == RequestId);
                request_ARCH = db.Requests_ARCH.FirstOrDefault(x => x.Id == RequestId);
            }

            if (request == null && request_ARCH != null)
            {
                request = new Models.Request();
                request.Id = request_ARCH.Id;
                request.Sender = request_ARCH.Sender;
                request.Assigner = request_ARCH.Assigner;
                request.Title = request_ARCH.Title;
                request.GroupId = request_ARCH.GroupId;
                request.TypeId = request_ARCH.TypeId;
                request.StepNo = request_ARCH.StepNo;
                request.StepStatus = request_ARCH.StepStatus;
                request.TimeCreate = request_ARCH.TimeCreate;
                request.TimeAppear = request_ARCH.TimeAppear;
                request.TimeFinish = request_ARCH.TimeFinish;
                request.TimeClose = request_ARCH.TimeClose;
                request.TimeFutureFinish = request_ARCH.TimeFutureFinish;
                request.TimeReceipt = request_ARCH.TimeReceipt;
                request.TimeUat = request_ARCH.TimeUat;
                request.TimeGolive = request_ARCH.TimeGolive;
                request.ToShop = request_ARCH.ToShop;
                request.ToOffice = request_ARCH.ToOffice;
                request.isHighlight = request_ARCH.isHighlight;
                request.isParent = request_ARCH.isParent;
                request.RequestIdRefer = request_ARCH.RequestIdRefer;
                request.TotalRequestSplit = request_ARCH.TotalRequestSplit;
                request.TotalRequestComplete = request_ARCH.TotalRequestComplete;
                request.Remark = request_ARCH.Remark;
                request.Status = request_ARCH.Status;
                request.CreateBy = request_ARCH.CreateBy;
                request.FromShop = request_ARCH.FromShop;
                request.FromOffice = request_ARCH.FromOffice;
                request.StillShowing = request_ARCH.StillShowing;
                request.Repeat = request_ARCH.Repeat;
                request.ErrorCode = request_ARCH.ErrorCode;
                request.ReferenceCode = request_ARCH.ReferenceCode;
                request.TimeLastUpdate = request_ARCH.TimeLastUpdate;
                request.UpdateBy = request_ARCH.UpdateBy;
                request.SumtimeComplete = request_ARCH.SumtimeComplete;
                request.ReviewComplete = request_ARCH.ReviewComplete;
                request.LastAdminUpdate = request_ARCH.LastAdminUpdate;
                request.TimeLastAdminUpdate = request_ARCH.TimeLastAdminUpdate;
                request.TimeGoliveExpected = request_ARCH.TimeGoliveExpected;
            }
            List<Permission> permissions = new List<Permission>();
            if (request != null && UserManager.CurrentUser != null)
            {
                string userCode = UserManager.CurrentUser.InsideCode;
                List<Assigner> assigners = null;

                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    assigners = (from a in db.Assigners
                                 where a.RequestId == request.Id
                                 && a.Status == Key.Status.Available
                                 && a.EmployeeCode == userCode
                                 select a).ToList();
                }

                //Người gửi
                if (request.Sender == userCode)
                    permissions.Add(Permission.Sender);
                else
                {
                    var sender = assigners.FirstOrDefault(x => x.Type == Key.TypeAssigner.Sender);
                    if (sender != null)
                        permissions.Add(Permission.Sender);

                }

                //Người xử lý
                var assigner = assigners.FirstOrDefault(x => x.Type == Key.TypeAssigner.To && x.StepNo == (request.StepNo));
                if (assigner != null || request.Assigner == userCode)
                {
                    permissions.Add(Permission.Assigner);
                }

                //Trong nhóm xử lý : kiểm tra theo phân quyền + Admin + Supper Admin
                DataTable table = sql.ExecuteCommand("Request_GetPermission", CommandType.StoredProcedure, new SqlParameter[]{
                    new SqlParameter("@RequestId",request.Id),
                    new SqlParameter("@EmpCode",UserManager.CurrentUser.InsideCode)
                });
                if (table != null && table.Rows.Count > 0)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        if (Convert.ToString(row[0]) == "0")
                            permissions.Add(Permission.GroupAssigner);
                        if (Convert.ToString(row[0]) == "1")
                            permissions.Add(Permission.Admin);
                        if (Convert.ToString(row[0]) == "2")
                            permissions.Add(Permission.SupperAdmin);
                    }
                }

                //Người Cc liên quan
                var cc = assigners.FirstOrDefault(x => x.Type == Key.TypeAssigner.Cc);
                if (cc != null)
                    permissions.Add(Permission.Cc);
                //Người xử lý bước cũ
                List<int> oldSteps = null;
                using (var t = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted }))
                {
                    oldSteps = (from s in db.RequestSteps
                                where s.RequestId == request.Id
                                && s.StepNo < request.StepNo
                                && s.Assigner == UserManager.CurrentUser.InsideCode
                                && s.Status == Key.Status.Available
                                select 1).ToList();
                }
                if (oldSteps != null && oldSteps.Count > 0)
                    permissions.Add(Permission.OldStepAssigner);
            }
            return permissions;
        }

        [HttpGet]
        public ActionResult GetShopByRegion(int regionId)
        {
            ShopDAL shopDal = new ShopDAL();
            DataTable table = shopDal.GetShops(regionId);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        //▼  Add - LuanNT44 - 07/05/2018 - Loại 24 - Sữa chữa CSVC
        public ActionResult GetRegionUser(long request)
        {
            DataTable tb = sql.ExecuteCommand("sp_GetRegionUser", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@requestID",request)});
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetDSThietBi24()
        {
            DataTable tb = sql.ExecuteCommand("sp_GetDanhSachThietBi_24", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲  Add - LuanNT44 - 07/05/2018 - Loại 24 - Sữa chữa CSVC
        [HttpGet]
        public ActionResult GetCategories()
        {
            //Categories_Get,Categories_GetWithCreateAction
            CategoryController cateController = new CategoryController();
            DataTable tableCatagory = cateController.GetCategoriesByPermission(UserManager.CurrentUser.InsideCode);
            if (tableCatagory != null && tableCatagory.Rows.Count > 0)
            {
                return Json(tableCatagory.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //'▼(#007)Add===================================   
        [HttpGet]
        public ActionResult GetCategoriesByTypeId(int type)
        {
            //Categories_Get,Categories_GetWithCreateAction
            var cata = (from s in db.Categories
                        where s.ParentId == 9
                        && s.Status == Key.Status.Available
                        select s).ToList();

            if (cata != null && cata.Count > 0)
            {
                return Json(cata, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        [HttpGet]
        public ActionResult GetCcForDetail(int requestId)
        {

            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", requestId), };
            DataTable table = sql.ExecuteCommand("CC_Get ", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> Cc = table.EParseToObjects();
                return Json(Cc, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        //'▲(#007)Add===================================

        [HttpGet]
        public string GetStatus(int Id)
        {
            switch (Id)
            {
                case Key.StatusRequest.Waitting:
                    return "Chờ xử lý";
                case Key.StatusRequest.Processing:
                    return "Đang xử lý";
                case Key.StatusRequest.Reply:
                    return "Đã trả lời";
                case Key.StatusRequest.Complete:
                    return "Hoàn tất";
                case Key.StatusRequest.Cancel:
                    return "Đã hủy";
                default:
                    return string.Empty;
            }
        }
        public void Download(int TypeId)
        {
            string path = string.Empty;
            string fileName = string.Empty;
            string pathData = string.Empty;
            switch (TypeId)
            {
                case 9999: // Xác nhận công nợ
                    path = "~/TemplateExcel/ImportFormDuyetDangKyTraGopOnline.xlsx";
                    fileName = "ImportFormDuyetDangKyTraGopOnline.xlsx";
                    break;
                case 124: // Quỹ
                    path = "~/TemplateExcel/FFriends-Giay_gioi_thieu.docx";
                    fileName = "FFriends-Giay_gioi_thieu.docx";
                    break;
                case 89: // Quỹ
                    path = "~/TemplateExcel/BienBanKiemKeTaiSanCongCu.xlsx";
                    fileName = "BienBanKiemKeTaiSanCongCu.xlsx";
                    break;
                case 121: // Thanh toán nợ theo kỳ
                    path = "~/TemplateExcel/ImportThanhToanNoTheoKy.xlsx";
                    fileName = "ImportThanhToanNoTheoKy.xlsx";
                    DataTable table = sql.ExecuteCommand("Vendors_InstallmentGetAll", CommandType.StoredProcedure, null);
                    if (table != null && table.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in table.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["Code"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["Name"].ToString();
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=ImportThanhToanNoTheoKy-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }

                    break;
                case 115: // Mkt Mkt tạo
                    path = "~/TemplateExcel/TemplateMkts.xlsx";
                    fileName = "TemplateMkts.xlsx";
                    DataTable tableShop = sql.ExecuteCommand("Shops_Get", CommandType.StoredProcedure, new SqlParameter[]{
                     new SqlParameter("@RegionId", 0 )});
                    DataTable tableSanPham = sql.ExecuteCommand("Items_Get_2", CommandType.StoredProcedure, new SqlParameter[]{
                     new SqlParameter("@TypeId", 22 )});
                    if (tableShop != null && tableShop.Rows.Count > 0 && tableSanPham != null && tableSanPham.Rows.Count > 0)
                    {
                        FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                        if (file.Exists)
                        {
                            using (ExcelPackage package = new ExcelPackage(file))
                            {
                                ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                int index = 2;
                                foreach (DataRow row in tableShop.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet.Cells[index, col].Value = row["WarehouseCodeB1"].ToString();
                                    col++; worksheet.Cells[index, col].Value = row["WarehouseName"].ToString();
                                    index++;
                                }
                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets[3];
                                index = 2;
                                foreach (DataRow row in tableSanPham.Rows)
                                {
                                    int col = 0;
                                    col++; worksheet1.Cells[index, col].Value = row["ItemId"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["ItemName"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["Price"].ToString();
                                    col++; worksheet1.Cells[index, col].Value = row["Unit"].ToString();
                                    index++;
                                }
                                Response.Clear();
                                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                Response.AddHeader("Content-Disposition", "attachment; filename=TemplateMkts-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                                Response.BinaryWrite(package.GetAsByteArray());
                                Response.Flush();
                                Response.End();
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
            if (path != string.Empty)
            {
                System.Web.HttpResponse response = System.Web.HttpContext.Current.Response;
                response.ClearContent();
                response.Clear();
                response.ContentType = "text/plain";
                response.AddHeader("Content-Disposition", "attachment; filename=" + fileName + ";");
                response.TransmitFile(path);
                response.Flush();
                response.End();
            }
        }
        public int Keep_Session_Live()
        {
            try
            {
                UserManager.CurrentUser = UserManager.CurrentUser;
                return 1;
            }
            catch (Exception ex)
            {
                return 0;
            }

        }

        #region 009
        //'▼(#009)Add=================================== 
        public ActionResult GetConfig(int id, string type)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@TypeId",id),
                new SqlParameter("@Type",type)
            };
            DataTable table = sql.ExecuteCommand("Configs_Get", CommandType.StoredProcedure, param);
            if (table != null)
            {
                List<Dictionary<string, object>> details = table.EParseToObjects();
                return Json(details, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //'▲(#009)Add===================================
        #endregion

        [HttpGet]
        public ActionResult CreateBO()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (Session[Key.Session.EcomId] != null)
            {
                // load tiêu đề + nội dung và nhân viên mặc định
                // trường hợp gọi từ Inbound
                #region Gọi từ inbound
                string Ecom = Session[Key.Session.EcomId].ToString();
                if (Ecom.IndexOf("CC") < 0)
                {
                    DataTable inbound = sql.ExecuteCommand("CallCenter_GetContentInbound", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@EcomId",Ecom)
                    });
                    if (inbound != null && inbound.Rows.Count > 0)
                    {
                        ViewBag.RequestTitle = inbound.Rows[0]["CallTitle"];
                        ViewBag.Content = inbound.Rows[0]["CallContent"];
                        string itemShopId = inbound.Rows[0]["ShopID"].ToString();
                        ViewBag.EcomId = inbound.Rows[0]["CallID"].ToString();
                        ViewBag.EmpsByShopsOrOffices = GetEmpsByShopsOrOffices(itemShopId);// người default To
                        ViewBag.DefaultCc = GetDefaultCC(itemShopId);// Người default CC
                        ViewBag.EcomType = inbound.Rows[0]["PhanLoai"].ToString();
                        ViewBag.EcomTypeParent = inbound.Rows[0]["PhanLoaiCha"].ToString();
                        var otherData = string.Empty;
                        var otherDataShopID = string.Empty;
                        var otherDataJobTitle = string.Empty;
                        //otherData = inbound.Rows[0]["PhanLoaiCha"] != null ? inbound.Rows[0]["PhanLoaiCha"].ToString() : "";
                        //otherData += inbound.Rows[0]["PhanLoai"] != null ? "," + inbound.Rows[0]["PhanLoai"].ToString() : ",";
                        //otherData += inbound.Rows[0]["PhanLoaiCalllog"] != null ? "," + inbound.Rows[0]["PhanLoaiCalllog"].ToString() : ",";
                        otherData = Convert.ToString(inbound.Rows[0]["PhanLoaiCha"]) + ",";
                        otherData += Convert.ToString(inbound.Rows[0]["PhanLoai"]) + ",";
                        otherData += Convert.ToString(inbound.Rows[0]["PhanLoaiCalllog"]) + ",";
                        otherData += Convert.ToString(inbound.Rows[0]["SoPhieuBH"]);
                        //otherData += Convert.ToString(inbound.Rows[0]["ShopID"]);
                        ViewBag.OtherData = otherData;
                        otherDataShopID = Convert.ToString(inbound.Rows[0]["ShopID"]);
                        ViewBag.ShopID = otherDataShopID;
                        if (Convert.ToString(inbound.Rows[0]["PhanLoaiCha"]).ToLower() == "thái độ" ||
                           Convert.ToString(inbound.Rows[0]["PhanLoaiCha"]).ToLower() == "nghiệp vụ")
                        {
                            otherDataJobTitle = Convert.ToString(inbound.Rows[0]["InsideCode"]);
                        }
                        ViewBag.JobTitle = otherDataJobTitle;
                    }
                }
                #endregion
                // trường hợp gọi từ Outbound
                #region Gọi từ outbound
                else
                {
                    Ecom = Ecom.Replace("CC", "");
                    DataTable outbound = sql.ExecuteCommand("CallCenter_GetContentOutbound", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@EcomID",Ecom)
                    });
                    if (outbound != null && outbound.Rows.Count > 0)
                    {
                        ViewBag.RequestTitle = outbound.Rows[0]["CallTitle"];
                        ViewBag.Content = outbound.Rows[0]["CallContent"];
                        string itemShopId = outbound.Rows[0]["ShopID"].ToString();
                        ViewBag.EmpsByShopsOrOffices = GetEmpsByShopsOrOffices(itemShopId);
                        ViewBag.DefaultCc = GetDefaultCC(itemShopId);
                        ViewBag.EcomId = outbound.Rows[0]["CallID"].ToString();
                        var otherData = string.Empty;
                        var otherDataShopID = string.Empty;
                        var otherDataJobTitle = string.Empty;
                        otherData = Convert.ToString(outbound.Rows[0]["PhanLoaiCha"]) + ",";
                        otherData += Convert.ToString(outbound.Rows[0]["PhanLoai"]) + ",";
                        otherData += Convert.ToString(outbound.Rows[0]["PhanLoaiCalllog"]) + ",";
                        otherData += Convert.ToString(outbound.Rows[0]["SoPhieuBH"]) + ",";
                        //otherData += Convert.ToString(outbound.Rows[0]["ShopID"]) + "*";
                        otherData += Ecom;

                        ViewBag.OtherData = otherData;
                        otherDataShopID = Convert.ToString(outbound.Rows[0]["ShopID"]);
                        ViewBag.ShopID = otherDataShopID;
                        if (Convert.ToString(outbound.Rows[0]["PhanLoaiCha"]).ToLower() == "thái độ" ||
                            Convert.ToString(outbound.Rows[0]["PhanLoaiCha"]).ToLower() == "nghiệp vụ")
                        {
                            otherDataJobTitle = Convert.ToString(outbound.Rows[0]["ChucDanh"]);
                        }
                        ViewBag.JobTitle = otherDataJobTitle;
                    }
                }
                #endregion

                Session[Key.Session.EcomId] = null;
            }
            return View();
        }
        [HttpPost, ValidateAntiForgeryToken, ValidateInput(false)]
        public ActionResult CreateBO(Request request, FormCollection form)
        {
            try
            {
                string txtStaff = form["txtStaff"].ToString();
                string Cc = form["Cc"].ToString();
                string Title = form["Title"].ToString();
                string txtMessageDes = HttpUtility.HtmlDecode(form["txtMessage"].ToString());
                DateTime dateFrom = DateTime.Parse(form["dateFrom"].ToString());
                DateTime dateTo = DateTime.Parse(form["dateTo"].ToString());
                var schedule = form["schedule"];// tuan hoac ngay trong thang (null : ngay trong thang , on : ngay trong tuan)
                var scheduleTypeData = form["scheduleTypeData"];// Gia tri
                List<string> stringTo = new List<string>();
                List<string> stringCc = new List<string>();
                #region verify
                if (txtStaff.Length == 0)
                {
                    TempData["Message"] = "Bắt buộc nhập thông tin người nhận.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (Title.Length == 0)
                {
                    TempData["Message"] = "Bắt buộc nhập tiêu đề.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (txtMessageDes.Length == 0)
                {
                    TempData["Message"] = "Bắt buộc nhập nội dung.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (DateTime.Compare(dateFrom, dateTo) < 0)
                {
                    TempData["Message"] = "Ngày bắt đầu không được lớn hơn ngày kết thúc.";
                    return RedirectToAction("CreateBO", "Requests");
                }
                if (scheduleTypeData != null)
                {
                    if (form["timeSend"].ToString() == "")
                    {
                        TempData["Message"] = "Bắt buộc chọn giờ để đặt lịch.";
                        return RedirectToAction("CreateBO", "Requests");
                    }
                    try
                    {
                        TimeSpan.Parse(form["timeSend"].ToString());
                    }
                    catch (Exception ex)
                    {
                        TempData["Message"] = "Giờ đặt lịch không đúng định dạng.";
                        return RedirectToAction("CreateBO", "Requests");
                    }
                }
                #endregion

                //Đại diện
                //Tạo yêu cầu
                string sender = UserManager.CurrentUser.InsideCode;
                request.Sender = sender;
                request.Title = Title;
                request.TypeId = 19;
                request.StepNo = 1;
                request.StepStatus = Key.StatusRequest.Waitting;
                request.TimeCreate = DateTime.Now;
                request.TimeAppear = DateTime.Now;
                request.isHighlight = false;
                request.isParent = false;
                request.Status = Key.Status.Available;
                request.CreateBy = UserManager.CurrentUser.InsideCode;
                request.FromOffice = UserManager.CurrentUser.OrganizationHierachyCode;
                request.ReferenceCode = form["EcomId"];
                db.Requests.Add(request);
                db.SaveChanges();
                #region Lưu nội dung
                if (txtMessageDes != "")
                {
                    var converstation = new Conversation();
                    converstation.RequestId = request.Id;
                    converstation.StepNo = 0;
                    converstation.Sender = UserManager.CurrentUser.InsideCode;
                    converstation.Message = txtMessageDes;
                    converstation.CreateBy = UserManager.CurrentUser.InsideCode;
                    converstation.Type = Key.Conversation.Create;
                    converstation.Status = Key.Status.Available;
                    converstation.TimeCreate = DateTime.Now;
                    db.Conversations.Add(converstation);
                }
                #endregion
                #region Đặt lịch
                if (scheduleTypeData != null)
                {
                    RequestAlarm requestAlarm = new RequestAlarm();
                    requestAlarm.RequestId = request.Id;
                    requestAlarm.Time = TimeSpan.Parse(form["timeSend"].ToString());
                    if (schedule == null)
                        requestAlarm.DayOfMonth = scheduleTypeData.ToString();
                    else
                        requestAlarm.DayOfWeek = scheduleTypeData.ToString();
                    requestAlarm.TimeStart = dateFrom;
                    requestAlarm.TimeEnd = dateTo;
                    requestAlarm.TimeCreate = DateTime.Now;
                    requestAlarm.Status = Key.Status.Available;
                    db.RequestAlarms.Add(requestAlarm);
                }
                #endregion

                //Gán người nhận
                if (txtStaff != null && txtStaff != "")
                {
                    DataTable table = sql.ExecuteCommand("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@StepNo",request.StepNo),
                        new SqlParameter("@Assigner",txtStaff),
                        new SqlParameter("@Type",Key.TypeAssigner.To)
                    });
                    if (table != null && table.Rows.Count > 0)
                    {
                        request.Assigner = table.Rows[0][0].ToString(); //Gán mặc định người đại diện đầu tiên
                        stringTo = (from emp in table.AsEnumerable() select emp.Field<string>("EmployeeCode")).Distinct().ToList();
                    }
                }
                //Gán người CC
                if (Cc != null && Cc != "")
                {
                    DataTable table = sql.ExecuteCommand("Assigner_Insert", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@StepNo",request.StepNo),
                        new SqlParameter("@Assigner",Cc),
                        new SqlParameter("@Type",Key.TypeAssigner.Cc)
                    });
                    if (table != null && table.Rows.Count > 0)
                    {
                        stringCc = (from emp in table.AsEnumerable() select emp.Field<string>("EmployeeCode")).Distinct().ToList();
                    }
                }
                #region Lưu file đính kèm
                string fName = string.Empty;
                try
                {
                    for (int i = 0; i < Request.Files.Count; i++)
                    {
                        HttpPostedFileBase file = Request.Files[i];
                        //Save file content goes here
                        fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                            if (request != null)
                            {
                                FileAttach fileAttach = new FileAttach();
                                fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                                fileAttach.StepNo = request.StepNo;
                                fileAttach.RequestId = request.Id;
                                fileAttach.TimeCreate = DateTime.Now;
                                fileAttach.Status = Key.Status.Available;
                                db.FileAttachs.Add(fileAttach);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController CreateBO(Request)", ex.ToString());
                }
                #endregion
                #region Lưu các thông tin khác
                var requestDetail = new RequestDetail();
                requestDetail.RequestId = request.Id;
                requestDetail.Property2 = form["EcomId"];
                string otherData = form["OtherData"] != null ? form["OtherData"].ToString() : string.Empty;
                string shopID = form["ShopID"] != null ? form["ShopID"].ToString() : string.Empty;
                string jobTitle = form["JobTitle"] != null ? form["JobTitle"].ToString() : string.Empty;
                string[] detailArray = otherData.Split(',');
                if (detailArray.Length >= 4)
                {
                    requestDetail.Property3 = detailArray[0];//Phân loại cha
                    requestDetail.Property1 = detailArray[1];//Phân loại
                    requestDetail.Property4 = detailArray[2];//Phân loại CallLog
                    requestDetail.Property5 = detailArray[3]; //Số phiếu BH  
                    requestDetail.Property6 = shopID; //ShopID
                    requestDetail.Property7 = jobTitle; // chức danh
                    if (detailArray.Length > 4)
                    {
                        requestDetail.Quantity = detailArray[4].EParseToInt();//Mã Id Outbound
                        // Gọi store thông báo Outbound đã tạo CallLog:
                        sql.ExecuteWithoutResult("CallCenter_UpdateOutbound", CommandType.StoredProcedure, new SqlParameter[]{
                            new SqlParameter("@EcomId",requestDetail.Quantity),
                            new SqlParameter("@RequestId",request.Id)
                        });
                    }
                }
                else
                {
                    requestDetail.Property1 = form["EcomType"];
                    requestDetail.Property3 = form["EcomTypeParent"];
                }
                requestDetail.Status = Key.Status.Available;
                db.RequestDetails.Add(requestDetail);
                #endregion
                db.SaveChanges();
                // Gửi notification:
                string receive = string.Join(",", stringTo);
                if (stringCc.Count > 0)
                {
                    receive = receive + "," + string.Join(",", stringCc);
                }
                sql.ExecuteWithoutResult("Ins_Notification_Insert", CommandType.StoredProcedure, new SqlParameter[]
                    {
                        new SqlParameter("@RequestId",request.Id),
                        new SqlParameter("@Sender",request.Sender),
                        new SqlParameter("@Title",request.Title),
                        new SqlParameter("@Body",txtMessageDes),
                        new SqlParameter("@Receiver",receive),
                        new SqlParameter("@SendTime",DateTime.Now)
                    });
                // Gửi email thông báo :
                XMail.Send(request.Id, "[CallLog] - " + request.Title, XMail.ProcessType.Create, UserManager.CurrentUser.InsideCode);
                TempData["Message"] = String.Format("Tạo yêu cầu {0} thành công! <br/>", request.Id);
                return RedirectToAction("Index", "Home");
            }
            catch (Exception ex)
            {
                if (request.Id > 0)
                {
                    db = new CallLogDbContext();
                    request = db.Requests.FirstOrDefault(x => x.Id == request.Id);
                    if (request != null)
                    {
                        request.Remark = "Create request fail details";
                        request.Status = Key.StatusRequest.Cancel;
                        db.SaveChanges();
                    }
                }
                Logger.WriteLogError("RequestController CreateBO(Request)", ex.ToString());
                ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                return View();
            }
        }
        public string GetDefaultCC(string Shops = "")
        {
            DataTable tb = sql.ExecuteCommand("Employee_GetDefaultCc", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@Query",Shops)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                return JsonConvert.SerializeObject(tb.EParseToObjects());
            }
            return null;
        }
        public string GetEmpsByShopsOrOffices(string Query)
        {
            DataTable tb = sql.ExecuteCommand("Employee_GetByShopsOrOffices", CommandType.StoredProcedure, new SqlParameter[]
                {
                    new SqlParameter("@Query",Query)
                });
            if (tb != null && tb.Rows.Count > 0)
            {
                return JsonConvert.SerializeObject(tb.EParseToObjects());
            }
            return null;
        }

        [CompressCode]
        public ActionResult GetEmpsAndGroupMail()
        {
            DataTable tb = sql.ExecuteCommand("Employees_GetWithGroupMail", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                return Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        public ActionResult InsertOrUpdateConfirmError(long requestId, string confirmError)
        {
            (from x in db.RequestDetails
             where x.RequestId == requestId
             select x).ToList().ForEach(x => x.Property10 = confirmError);
            db.SaveChanges();
            return Json('1', JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetDetails(long requestId)
        {
            var details = (from x in db.RequestDetails
                           where x.RequestId == requestId && x.Property10 != null
                           select x);
            if (details != null)
            {
                return Json(details, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetDetailsPhanLoai(long requestId)
        {
            var details = (from x in db.RequestDetails
                           where x.RequestId == requestId
                           select new { x.Property1, x.Property3 });
            if (details != null)
            {
                return Json(details, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetDetailsChucDanh(long requestId)
        {
            var details = (from x in db.RequestDetails
                           where x.RequestId == requestId
                           select new { x.Property7 });
            if (details != null)
            {
                return Json(details, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetEmpsShopOfRequest(string requestId)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", requestId) };
            DataTable table = sql.ExecuteCommand("GetEmpsShopOfRequest", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetJobTitleAndGroupMail()
        {
            try
            {
                DataTable table = sql.ExecuteCommand("JobtitlesAndGroupMail_Get", CommandType.StoredProcedure, null);
                if (table != null && table.Rows.Count > 0)
                {
                    List<Dictionary<string, object>> catagories = table.EParseToObjects();
                    return Json(catagories, JsonRequestBehavior.AllowGet);
                }
                else return null;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController GetJobTitleAndGroupMail", ex.ToString());
                return null;
            }
        }

        public ActionResult GetRequestDetailConvertation(int requestdatailId)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequesDetailtId", requestdatailId) };
            DataTable tb = sql.ExecuteCommand("[RequestDetail_Get_Conversations]", CommandType.StoredProcedure, param);
            if (tb != null && tb.Rows.Count > 0)
            {
                return Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        public ActionResult GetEmployeesByPermission(long requestId)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", requestId) };
            DataTable table = sql.ExecuteCommand("Employees_GetByPermission", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        public ActionResult UpdateChangeAssigner(long requestId, string EmpCode)
        {
            if (UserManager.CurrentUser != null)
            {
                EmployeeDAL emp = new EmployeeDAL();
                Request request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                if (request != null)
                {
                    //▼ Add - TuanNA89 - 10/12/2019 - Calllog Hợp đồng trả góp Mirae giải ngân thất bại - Loại 161
                    if (request.TypeId == 161 && (request.Status == Key.StatusRequest.Complete || request.Status == Key.StatusRequest.Cancel))
                    {
                        return Json('0', JsonRequestBehavior.AllowGet);
                    }
                    //▲ Add - TuanNA89 - 10/12/2019 - Calllog Hợp đồng trả góp Mirae giải ngân thất bại - Loại 161

                    request.Assigner = EmpCode;
                    request.UpdateBy = UserManager.CurrentUser.InsideCode;
                    request.TimeLastUpdate = DateTime.Now;

                    Assigner assignerOld = db.Assigners.FirstOrDefault(x => x.EmployeeCode == UserManager.CurrentUser.InsideCode
                        && x.RequestId == request.Id
                        && x.StepNo == request.StepNo
                        && x.Status == Key.Status.Available);
                    //▼ Edit - PhiN - 23/01/2018 - claim subsidy chuyển người xử lí ==================================================
                    if (assignerOld != null)
                    {
                        if ((request.TypeId == 143)
                            //▼ Add - TuanNA89 - 22/1/2019 - Calllog trả góp HC loại 155 chuyển người xử lý
                            || (request.TypeId == 155)
                            //▲ Add - TuanNA89 - 22/1/2019 - Calllog trả góp HC loại 155 chuyển người xử lý
                            )
                        {
                            assignerOld.Status = Key.Status.Available;
                        }
                        //▼ Add - TuanNA89 - 10/12/2019 - Calllog Hợp đồng trả góp Mirae giải ngân thất bại - Loại 161
                        else if (request.TypeId == 161)
                        {
                            assignerOld.Type = Key.TypeAssigner.Cc;
                            assignerOld.Status = Key.Status.Available;
                            db.SaveChanges();
                        }
                        //▲ Add - TuanNA89 - 10/12/2019 - Calllog Hợp đồng trả góp Mirae giải ngân thất bại - Loại 161
                        else
                        {
                            assignerOld.Status = Key.Status.Unavailable;
                        }
                    }
                    //▲ Edit - PhiN - 23/01/2018 - claim subsidy chuyển người xử lí ==================================================
                    Assigner assignerNew = (from a in db.Assigners
                                            where a.RequestId == request.Id
                                            && a.EmployeeCode == EmpCode
                                            && a.StepNo == request.StepNo
                                            select a).FirstOrDefault();
                    if (assignerNew != null)
                    {
                        assignerNew.Status = Key.Status.Available;
                    }
                    else
                    {
                        assignerNew = new Assigner
                        {
                            RequestId = request.Id,
                            EmployeeCode = EmpCode,
                            StepNo = request.StepNo,
                            Type = Key.TypeAssigner.To,
                            Status = Key.Status.Available,
                            TimeCreate = DateTime.Now
                        };
                        db.Assigners.Add(assignerNew);
                    }
                    F03_Employees emOld = emp.Get(UserManager.CurrentUser.InsideCode);
                    F03_Employees emNew = emp.Get(EmpCode);
                    if (emOld != null && emNew != null)
                    {
                        if (request.TypeId == 121 || request.TypeId == 135
                            //▼ Add - TuanNA89 - 22/1/2019 - Calllog trả góp HC loại 155 chuyển người xử lý
                            || request.TypeId == 155
                            //▲ Add - TuanNA89 - 22/1/2019 - Calllog trả góp HC loại 155 chuyển người xử lý
                            )
                        {
                            sql.ExecuteWithoutResult("UpdateChangeAssigner_121", CommandType.StoredProcedure, new SqlParameter[]{
                                new SqlParameter("@IDCallLog",requestId),
                                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@EmpCodeAssigner",EmpCode)
                            });
                            SqlParameter[] param = new SqlParameter[] {
                                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode),
                                new SqlParameter("@Status","0")
                            };
                            sql.ExecuteWithoutResult("FRT_SP_DoiTrangThaiUser", CommandType.StoredProcedure, param);
                        }
                        Conversation conversation = new Conversation
                        {
                            RequestId = request.Id,
                            StepNo = request.StepNo,
                            Sender = "-1",
                            Message = "Người xử lý cũ " + emOld.EmployeeCode + " - " + emOld.EmployeeName + " đã chuyển người xử lý mới " + emNew.EmployeeCode + " - " + emNew.EmployeeName,
                            CreateBy = UserManager.CurrentUser.InsideCode,
                            Type = Key.Conversation.System,
                            Status = Key.Status.Available,
                            TimeCreate = DateTime.Now
                        };
                        db.Conversations.Add(conversation);
                        db.SaveChanges();
                    }
                    else
                    {
                        return Json('0', JsonRequestBehavior.AllowGet);
                    }
                }

                return Json('1', JsonRequestBehavior.AllowGet);
            }
            else
                return Json('0', JsonRequestBehavior.AllowGet);
        }

        public int CreateNewRequestDetailConvertation(int request, int requestDetail, int step, string message)
        {
            try
            {
                #region Cập nhật lại trao đổi sang inside loại 48 Xử lý vi phạm

                Request req = db.Requests.FirstOrDefault(x => x.Id == request);
                if (req.TypeId == 48)
                {
                    SqlParameter[] param = new SqlParameter[] {
                        new SqlParameter("@RequestDetailId", requestDetail),
                        new SqlParameter("@Content", message),
                        new SqlParameter("@Sender", UserManager.CurrentUser.InsideCode),
                    };
                    DataTable table = sql.ExecuteCommand("INS_Insert_Request_CommentCallLog", CommandType.StoredProcedure, param);
                    if (table == null || table.Rows[0][0].ToString() == "0")
                    {
                        return 0;
                    }
                    return 1;
                }
                else
                {
                    Conversation conversation = new Conversation();
                    conversation.RequestId = request;
                    conversation.RequestDetailId = requestDetail;
                    conversation.StepNo = step;
                    conversation.Message = message;
                    conversation.Sender = UserManager.CurrentUser.InsideCode;
                    conversation.Type = Key.Conversation.Comment;
                    conversation.Status = Key.Status.Available;
                    conversation.TimeCreate = DateTime.Now;
                    db.Conversations.Add(conversation);
                    db.SaveChanges();
                    return 1;
                }
                #endregion

            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController CreateNewRequestDetailConvertation()", ex.ToString());
                return 0;
            }
        }

        public ActionResult CreateConvertation(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                if (request.TypeId == 102)
                {
                    foreach (var item in objects)
                    {
                        Conversation conversation = new Conversation();
                        conversation.RequestId = request.Id;
                        conversation.RequestDetailId = item.Id;
                        conversation.StepNo = request.StepNo;
                        conversation.Message = item.GiaiTrinh;
                        conversation.Sender = UserManager.CurrentUser.InsideCode;
                        conversation.Type = Key.Conversation.Comment;
                        conversation.Status = Key.Status.Available;
                        conversation.TimeCreate = DateTime.Now;
                        db.Conversations.Add(conversation);
                    }
                    db.SaveChanges();
                    TempData["MessageSuccess"] = "Thêm trao đổ thành công";
                    return RedirectToAction("Details", new { Id = request.Id });
                }
                else
                {
                    return RedirectToAction("Details", new { Id = request.Id });
                }
            }
            TempData["Message"] = "Không tìm thấy yêu cầu";
            return RedirectToAction("Index", "Home");

        }

        public ActionResult GetProduct(string productCode)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@ProductCode", productCode) };
            DataTable table = sql.ExecuteCommand("Ins_GetProduct", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetProducts()
        {
            DataTable table = sql.ExecuteCommand("Ins_GetProducts", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetAllProducts_Voucher()
        {
            DataTable table = sql.ExecuteCommand("BI_GetAllProducts_Voucher", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetGroupProducts()
        {
            DataTable table = sql.ExecuteCommand("BI_GetGroupProducts", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetNganhHang()
        {
            DataTable table = sql.ExecuteCommand("BI_GetNganhhang", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetNhanHang()
        {
            DataTable table = sql.ExecuteCommand("BI_GetNhanHang", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetLoaiHang()
        {
            DataTable table = sql.ExecuteCommand("BI_GetLoaiHang", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        #region dainlp
        public ActionResult GetInfoUserCreteRequest()
        {
            DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
            if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
            {
                return Json(tableEmpDetail.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetJobsByEmpCode()
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@Emp", UserManager.CurrentUser.InsideCode) };
            DataTable table = sql.ExecuteCommand("dainlp_GetJobsByEmpCode", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;

        }
        public ActionResult GetEmpsByJobCode(string code, string job, int isshop)
        {
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@Code",code) ,
                new SqlParameter("@Job", job) ,
                new SqlParameter("@isShop", isshop) ,
            };
            DataTable table = sql.ExecuteCommand("dainlp_GetEmployByJobs", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetAllRequestDetails(long id)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@RequestId", id) };
            DataTable table = sql.ExecuteCommand("dainlp_GetAllRequestsDetails", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
                //return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetEmpByShopCode(string shopCode)
        {
            EmployeeDAL emps = new EmployeeDAL();
            IEnumerable<F03_Employees> lstemps = emps.GetByShop(shopCode);
            if (lstemps != null)
            {
                return Json(lstemps, JsonRequestBehavior.AllowGet);
            }

            return null;
        }
        public ActionResult GetEmpByShopCodeOneMonth(string shopCode)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@Whs", UserManager.CurrentUser.InsideCode), };
            DataTable table = sql.ExecuteCommand("GetEmployeesAIOneMounth", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetShopsByUserManager()
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@EmpCode", UserManager.CurrentUser.InsideCode), };
            DataTable table = sql.ExecuteCommand("dainlp_ShopsGet", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public int HaveTypeErrorForHTHT(int requestId)
        {
            Request rs = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (rs != null && rs.ErrorCode != null)
            {
                return 1;
            }
            return 0;
        }
        public int HaveFileAttach(int requestId, int step)
        {
            FileAttach f = db.FileAttachs.FirstOrDefault(x => x.RequestId == requestId && x.StepNo == step);
            if (f != null)
            {
                return 1;
            }
            return 0;
        }
        #endregion

        #region hiendt23
        #endregion

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        #region "Encrypt URL"


        public string RenderLinKToInside_GiaiQuyetKhieuNai(long requestId, string content)
        {
            var detailsBO = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId);

            string violationCode = "null";

            if (detailsBO.Property3 != null)
            {
                violationCode = detailsBO.Property3.ToLower() == "thái độ" ? "0038" :
                    (detailsBO.Property3.ToLower() == "bảo hành" || detailsBO.Property3.ToLower() == "đổi trả") ? "0043"
                    : (detailsBO.Property3.ToLower() == "nghiệp vụ" ||
                    detailsBO.Property3.ToLower() == "sản phẩm" || detailsBO.Property3.ToLower() == "khuyến mãi" ||
                    detailsBO.Property3.ToLower() == "khác") ? "0050" : "null";
            }
            string username = UserManager.CurrentUser.InsideCode;
            string password = UserManager.CurrentUser.Password;
            string URL = "http://inside.fptshop.com.vn/Default.aspx?ID=1486";
            URL = URL + "&CategoryViolation=1&ViolationCode=" + violationCode +
                "&Note=" + content + "&RequestID=" + requestId.ToString();
            //URL = URL + "&Shop=" + shop + "&CategoryViolation=1" + "&Note="+content;
            string sPara = username + "@" + password + "@" + URL;
            string para = "http://inside.fptshop.com.vn/InsideLogin.aspx?ParameterViolation=" + Encrypt(sPara);
            return para;
        }
        public static string Encrypt(string original)
        {
            return Encrypt(original, "1qaz2wsx0okm9ijn");
        }
        public static string Encrypt(string original, string key)
        {
            TripleDESCryptoServiceProvider objDESProvider;
            MD5CryptoServiceProvider objHashMD5Provider;
            byte[] keyhash;
            byte[] buffer;
            try
            {
                objHashMD5Provider = new MD5CryptoServiceProvider();
                keyhash = objHashMD5Provider.ComputeHash(UnicodeEncoding.Unicode.GetBytes(key));
                objHashMD5Provider = null;

                objDESProvider = new TripleDESCryptoServiceProvider();
                objDESProvider.Key = keyhash;
                objDESProvider.Mode = CipherMode.ECB;

                buffer = UnicodeEncoding.Unicode.GetBytes(original);
                return Convert.ToBase64String(objDESProvider.CreateEncryptor().TransformFinalBlock(buffer, 0, buffer.Length));
            }
            catch
            {
                return string.Empty;
            }
        }

        public static string Decrypt(string encrypted)
        {
            return Decrypt(encrypted, "1qaz2wsx0okm9ijn");
        }

        public static string Decrypt(string encrypted, string key)
        {
            TripleDESCryptoServiceProvider objDESProvider;
            MD5CryptoServiceProvider objHashMD5Provider;
            byte[] keyhash;
            byte[] buffer;

            try
            {
                objHashMD5Provider = new MD5CryptoServiceProvider();
                keyhash = objHashMD5Provider.ComputeHash(UnicodeEncoding.Unicode.GetBytes(key));
                objHashMD5Provider = null;

                objDESProvider = new TripleDESCryptoServiceProvider();
                objDESProvider.Key = keyhash;
                objDESProvider.Mode = CipherMode.ECB;

                buffer = Convert.FromBase64String(encrypted);
                return UnicodeEncoding.Unicode.GetString(objDESProvider.CreateDecryptor().TransformFinalBlock(buffer, 0, buffer.Length));
            }
            catch
            {
                return string.Empty;
            }
        }
        #endregion

        public ActionResult DownloadExcelExport(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                if (request.TypeId == 89)
                {
                    #region 89

                    string fileTemplate = "/TemplateExcel/BienBanKiemKeTaiSanCongCuEditer.xlsx";
                    FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                    if (file.Exists)
                    {
                        using (ExcelPackage package = new ExcelPackage(file))
                        {
                            ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                            int index = 2;
                            foreach (var item in objects)
                            {
                                int col = 0;

                                col++; worksheet.Cells[index, col].Value = item.Id;
                                col++; worksheet.Cells[index, col].Value = item.ProductCode;
                                col++; worksheet.Cells[index, col].Value = item.ProductName;
                                col++; worksheet.Cells[index, col].Value = item.Imei;
                                col++; worksheet.Cells[index, col].Value = item.Quantity;
                                col++; worksheet.Cells[index, col].Value = item.Quantity1;
                                col++; worksheet.Cells[index, col].Value = item.ShopName;
                                //col++; worksheet.Cells[index, col].Value = Convert.ToInt32(item.Quantity) - Convert.ToInt32(item.Quantity1);
                                //col++; worksheet.Cells[index, col].Value = item.HaveConvertation;
                                index++;
                            }
                            Response.Clear();
                            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            Response.AddHeader("Content-Disposition", "attachment; filename=BienBanKiemKeTaiSanCongCuEditer-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                            Response.BinaryWrite(package.GetAsByteArray());
                            Response.Flush();
                            Response.End();
                        }
                    }

                    #endregion
                }
                if (request.TypeId == 60)
                {
                    #region 60
                    string fileTemplate = "/TemplateExcel/XacNhanCongNoKhoiShopEditer.xlsx";
                    FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                    if (file.Exists)
                    {
                        using (ExcelPackage package = new ExcelPackage(file))
                        {
                            ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                            int index = 2;
                            foreach (var item in objects)
                            {
                                int col = 0;
                                col++; worksheet.Cells[index, col].Value = item.Id;
                                col++; worksheet.Cells[index, col].Value = item.WarehouseName;
                                col++; worksheet.Cells[index, col].Value = item.CustomerCode;
                                col++; worksheet.Cells[index, col].Value = item.CustomerName;
                                col++; worksheet.Cells[index, col].Value = item.SaleCode;
                                col++; worksheet.Cells[index, col].Value = item.Time1;
                                col++; worksheet.Cells[index, col].Value = item.Time2;
                                col++; worksheet.Cells[index, col].Value = item.Property1;
                                col++; worksheet.Cells[index, col].Value = item.Note;
                                col++; worksheet.Cells[index, col].Value = item.Money1;
                                col++; worksheet.Cells[index, col].Value = item.Money2;
                                col++; worksheet.Cells[index, col].Value = item.Money3;
                                col++; worksheet.Cells[index, col].Value = item.Difference;
                                col++; worksheet.Cells[index, col].Value = item.Conversations;
                                col++; worksheet.Cells[index, col].Value = item.EnterConversations;
                                string approved = item.Approved == null || item.Approved == "" || item.Approved == false ? "Không duyệt" : "Duyệt";
                                col++; worksheet.Cells[index, col].Value = approved;
                                index++;
                            }
                            Response.Clear();
                            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            Response.AddHeader("Content-Disposition", "attachment; filename=XacNhanCongNoKhoiShopEditer-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                            Response.BinaryWrite(package.GetAsByteArray());
                            Response.Flush();
                            Response.End();
                        }
                    }

                    #endregion
                }
                if (request.TypeId == 102)
                {
                    #region 102
                    string fileTemplate = "/TemplateExcel/KiemKeKhoEditor.xlsx";
                    FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                    if (file.Exists)
                    {
                        using (ExcelPackage package = new ExcelPackage(file))
                        {
                            ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                            int index = 2;
                            foreach (var item in objects)
                            {
                                int col = 0;
                                col++; worksheet.Cells[index, col].Value = item.Id;
                                col++; worksheet.Cells[index, col].Value = item.ProductCode;
                                col++; worksheet.Cells[index, col].Value = item.ProductName;
                                col++; worksheet.Cells[index, col].Value = item.Imei;
                                col++; worksheet.Cells[index, col].Value = item.Property1;
                                col++; worksheet.Cells[index, col].Value = item.Quantity;
                                col++; worksheet.Cells[index, col].Value = item.QuantityAvaiable;
                                col++; worksheet.Cells[index, col].Value = item.Diff;
                                index++;
                            }
                            Response.Clear();
                            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            Response.AddHeader("Content-Disposition", "attachment; filename=KiemKeKhoEditor-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                            Response.BinaryWrite(package.GetAsByteArray());
                            Response.Flush();
                            Response.End();
                        }
                    }

                    #endregion
                }
            }
            return null;
        }

        public ActionResult ImportExcelEditer(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                foreach (var item in objects)
                {
                    long detailId = item.MaId;
                    if (item.GiaiTrinh != null)
                    {
                        Conversation convertation = new Conversation();
                        convertation.RequestId = request.Id;
                        convertation.StepNo = request.StepNo;
                        convertation.Sender = UserManager.CurrentUser.InsideCode;
                        convertation.Message = item.GiaiTrinh;
                        convertation.CreateBy = UserManager.CurrentUser.InsideCode;
                        convertation.Type = Key.Conversation.Comment;
                        convertation.Status = Key.Status.Available;
                        convertation.RequestDetailId = detailId;
                        convertation.TimeCreate = DateTime.Now;
                        db.Conversations.Add(convertation);
                    }
                    var requestDetail = db.RequestDetails.FirstOrDefault(x => x.Id == detailId);
                    if (requestDetail != null)
                    {
                        requestDetail.Quantity1 = item.TonThucTe;
                    }
                }
                db.SaveChanges();
                return Redirect("/Requests/Details/" + requestId);
            }
            return null;
        }

        public int UpdateTimeFutureFinish(string Data, long RequestId)
        {
            var request = db.Requests.FirstOrDefault(x => x.Id == RequestId);
            if (request != null)
            {
                if (request.TimeGolive == null)
                {
                    request.TimeGolive = request.TimeFutureFinish;
                }
                request.TimeFutureFinish = DateTime.Parse(Data);
                request.Remark += "UDTF-" + DateTime.Now.ToString() + "-" + UserManager.CurrentUser.InsideCode.ToString() + ":"
                    + Data + "||";
                db.SaveChanges();
                return 1;
            }
            return 0;
        }

        public ActionResult GetJobTitleShop()
        {
            JobtitleDAL job = new JobtitleDAL();
            DataTable jobList = job.GetJobtitleByShop();
            var jsonResult = Json(jobList.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetEmpShop(string shopCode)
        {
            EmployeeDAL emp = new EmployeeDAL();
            DataTable emps = emp.GetEmpByShopAndJob(shopCode, "");
            var jsonResult = Json(emps.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetQuanHuyen(string shopCode)
        {
            RegionDAL reigon = new RegionDAL();
            DataTable regions = reigon.GetQuanHuyenDiaChiByShopCode(shopCode);
            var jsonResult = Json(regions.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetCoutJobTitleShop(string shopCode, string jobCode)
        {
            JobtitleDAL job = new JobtitleDAL();
            DataTable jobList = job.GetCoutJobInShop(shopCode, jobCode);
            var jsonResult = Json(jobList.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetWhsPos(long requestId)
        {
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request != null)
            {
                string shopcode = request.FromShop == null || request.FromShop == "" ? request.ToShop : request.FromShop;
                SqlParameter[] param = new SqlParameter[] { new SqlParameter("@ShopCode", shopcode) };
                DataTable table = sql.ExecuteCommand("GetWhsPos", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }
        public ActionResult KiemTraCaLamBanGiaoQuyGiuaCa()
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@EmpCode", UserManager.CurrentUser.InsideCode) };
            DataTable table = sql.ExecuteCommand("KiemTraCaLamBanGiaoQuyGiuaCa", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetFileCallogByRequest(string param)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            try
            {
                string keyword = Keyword.KeyDowloadFileFromOut;
                string[] listParam = param.Split(new char[] { '-' });
                string id = listParam[0];
                string detail = listParam[1];
                string domain = listParam[2];
                string name = listParam[3];
                string col = listParam[4];

                string paramRetrun = id + "-" + detail + "-" + domain;
                string nameFile = col + "-" + name;

                string urlParam = "?param=" + paramRetrun + "&key=" + keyword;
                HttpClient client = new HttpClient();
                client.BaseAddress = new Uri("http://calllogbeta.fptshop.com.vn/ServiceData/DowloadZipFile");
                //ChuongNT3 - 21/06/2018
                string username = UserManager.CurrentUser.InsideCode;
                string password = UserManager.CurrentUser.Password;
                string send = username + ":" + password;
                string Entry = Encrypt(send);
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("basic", Entry);

                HttpResponseMessage responseParent = client.GetAsync(urlParam).Result;

                if (responseParent.IsSuccessStatusCode)
                {

                    //I don't know what to set the returned value to.
                    var byteArray = responseParent.Content.ReadAsByteArrayAsync().Result;
                    Response.Clear();
                    MemoryStream ms = new MemoryStream(byteArray);
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=" + nameFile + ".zip");
                    Response.Buffer = true;
                    ms.WriteTo(Response.OutputStream);
                    Response.End();
                    //ExportFile(byteArray, download);
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestsController GetFileCallogByRequest()", String.Format("{0}", ex.ToString()));
            }
            return null;
        }
        [HttpGet]
        public ActionResult RegisterShopCare()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            List<SelectListItem> positionList = new List<SelectListItem>();
            positionList.Add(new SelectListItem { Value = "0", Text = "Chọn chức vụ", Selected = true });
            DataTable table = sql.ExecuteCommand("OCRD_ChucVu_GetAll", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                foreach (DataRow row in table.Rows)
                {
                    positionList.Add(new SelectListItem { Value = row["ID"].ToString(), Text = row["ChucVu"].ToString() });
                }

                ViewBag.Positions = positionList;
            }
            List<SelectListItem> vendorItem = new List<SelectListItem>();
            vendorItem.Add(new SelectListItem { Value = "0", Text = "Chọn doanh nghiệp", Selected = true });
            DataTable tbVendor = sql.ExecuteCommand("Vendors_InstallmentGetAll", CommandType.StoredProcedure, null);
            if (tbVendor != null && tbVendor.Rows.Count > 0)
            {
                foreach (DataRow row in tbVendor.Rows)
                {
                    vendorItem.Add(new SelectListItem { Value = row["Code"].ToString(), Text = row["Name"].ToString() });
                }

                ViewBag.VendorsInstallment = vendorItem;
            }


            return View();
        }

        [CompressCode]
        public ActionResult GetAllProducts_Installment(int type)
        {
            DataTable tb = sql.ExecuteCommand("FRT_SP_Listitem", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@type",type)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult GetAllChucVuOfVendorInstallment()
        {
            DataTable tb = sql.ExecuteCommand("OCRD_ChucVu_GetAll", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult FormApproveRegShopCare()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            List<SelectListItem> vendorItem = new List<SelectListItem>();
            vendorItem.Add(new SelectListItem { Value = "0", Text = "Chọn doanh nghiệp", Selected = true });
            DataTable tbVendor = sql.ExecuteCommand("Vendors_InstallmentGetAll", CommandType.StoredProcedure, null);
            if (tbVendor != null && tbVendor.Rows.Count > 0)
            {
                foreach (DataRow row in tbVendor.Rows)
                {
                    vendorItem.Add(new SelectListItem { Value = row["Code"].ToString(), Text = row["Name"].ToString() });
                }

                ViewBag.VendorsInstallment = vendorItem;
            }
            return View();
        }
        public ActionResult GetListItemCustomerReg()
        {
            DataTable tb = sql.ExecuteCommand("OCRD_GetAll", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetVendorsTypeInstllment()
        {
            DataTable tb = sql.ExecuteCommand("Vendors_InstallmentGetAll", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        //▼	Edit - VietMXH - 13/05/2018 - Credit không thẻ==================================================
        public ActionResult Credit_Vendor_Get(string p_CMND)
        {
            SqlParameter[] l_SqlParameter =
            {
                new SqlParameter("@CMND", p_CMND)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_Credit_Vendor_Get", CommandType.StoredProcedure,
                l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult Credit_GetVendor_ByCreditCard(string p_CreditCard)
        {
            SqlParameter[] l_SqlParameter =
            {
                new SqlParameter("@CreditCard", p_CreditCard)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_Credit_GetVendor_ByCreditCard", CommandType.StoredProcedure,
                l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult Credit_CheckExist_CMNDvsVendor(int p_VendorCode, string p_CMND)
        {
            SqlParameter[] l_SqlParameter =
            {
                new SqlParameter("@VendorCode", p_VendorCode),
                new SqlParameter("@CMND", p_CMND)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_Credit_CheckExist_CMNDvsVendor", CommandType.StoredProcedure,
                l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult Credit_CheckExist_SDTvsVendor(int p_VendorCode, string p_SDT)
        {
            SqlParameter[] l_SqlParameter =
            {
                new SqlParameter("@VendorCode", p_VendorCode),
                new SqlParameter("@SDT", p_SDT)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_Credit_CheckExist_SDTvsVendor", CommandType.StoredProcedure,
                l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult LuuThongTinDH_NhomMua_Credit(IEnumerable<NhomMuaViewModel_Credit> p_NhomMuaViewModel_Credit)
        {
            if (p_NhomMuaViewModel_Credit == null)
            {
                return null;
            }

            using (DataTable l_Table = new DataTable())
            {
                #region ---Add Column---
                l_Table.Columns.Add("IDCardCode", typeof(string));
                l_Table.Columns.Add("cmnd", typeof(string));
                l_Table.Columns.Add("MaNV", typeof(string));
                l_Table.Columns.Add("VendorCode", typeof(int));
                l_Table.Columns.Add("IDGoc", typeof(int));
                l_Table.Columns.Add("MaSP", typeof(string));
                l_Table.Columns.Add("SL", typeof(int));
                l_Table.Columns.Add("MaShop", typeof(string));
                l_Table.Columns.Add("HinhThucGiaoHang", typeof(int));
                l_Table.Columns.Add("DiaChiGiaoHang ", typeof(string));
                l_Table.Columns.Add("NgayGiaoHang", typeof(DateTime));
                l_Table.Columns.Add("GhiChu", typeof(string));
                l_Table.Columns.Add("HoTen_NguoiNhanHang", typeof(string));
                l_Table.Columns.Add("CMND_NguoiNhanHang", typeof(string));
                l_Table.Columns.Add("DiaChiGiaoHang_NguoiNhanHang", typeof(string));
                l_Table.Columns.Add("SDT_NguoiNhanHang", typeof(string));
                #endregion

                #region ---Add Row---
                foreach (NhomMuaViewModel_Credit l_NhomMuaViewModel_Credit in p_NhomMuaViewModel_Credit)
                {
                    l_Table.Rows.Add(
                        l_NhomMuaViewModel_Credit.IDCardCode,
                        l_NhomMuaViewModel_Credit.CMND,
                        l_NhomMuaViewModel_Credit.MaNV,
                        l_NhomMuaViewModel_Credit.VendorCode,
                        l_NhomMuaViewModel_Credit.IDGoc,
                        l_NhomMuaViewModel_Credit.MaSP,
                        l_NhomMuaViewModel_Credit.SL,
                        l_NhomMuaViewModel_Credit.MaShop,
                        l_NhomMuaViewModel_Credit.HinhThucGiaoHang,
                        l_NhomMuaViewModel_Credit.DiaChiGiaoHang,
                        DateTime.Now,
                        l_NhomMuaViewModel_Credit.GhiChu,
                        l_NhomMuaViewModel_Credit.HoTen_NguoiNhanHang,
                        l_NhomMuaViewModel_Credit.CMND_NguoiNhanHang,
                        l_NhomMuaViewModel_Credit.DiaChiGiaoHang_NguoiNhanHang,
                        l_NhomMuaViewModel_Credit.SDT_NguoiNhanHang
                    );
                }
                #endregion

                #region ---Add Parameter---
                SqlParameter[] l_SqlParameter =
                {
                    new SqlParameter("@Table", l_Table),
                    new SqlParameter("@UserID", UserManager.CurrentUser == null ?  "" : UserManager.CurrentUser.InsideCode)
                };
                #endregion

                #region ---Execute and Return---
                DataTable l_DataTable = sql.ExecuteCommand("FRT_SP_LuuThongTinDH_NhomMua_Credit", CommandType.StoredProcedure, l_SqlParameter);
                if (l_DataTable != null && l_DataTable.Rows.Count > 0)
                {
                    var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                #endregion
            }

            return null;
        }

        #region     ===▼	Edit - VietMXH - 13/05/2018 - Credit không thẻ==================================================
        [CompressCode]
        /// <summary>GET: /Requests/CreditNoneCard_Vendor_Get</summary>
        public ActionResult CreditNoneCard_Vendor_Get()
        {
            DataTable l_DataTable = sql.ExecuteCommand("sp_Web_CreditNoneCard_Vendor_Get", CommandType.StoredProcedure, null);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        #endregion  ===▲	Edit - VietMXH - 13/05/2018 - Credit không thẻ==================================================
        //▲	Edit - VietMXH - 13/05/2018 - Credit không thẻ==================================================

        public ActionResult SearchFormDKTraGop(string vendorCode, int customerReg, string dateRegStart, string dateRegEnd,
            string dateApprovedStart, string dateApprovedEnd, string statusApprove, string Ids, string phoneNumber)
        {
            try
            {
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@VendorCode",vendorCode),
                    new SqlParameter("@CustomerReg",customerReg),
                    new SqlParameter("@DateRegStart",dateRegStart),
                    new SqlParameter("@DateRegEnd",dateRegEnd),
                    new SqlParameter("@DateApprovedStart",dateApprovedStart),
                    new SqlParameter("@DateApprovedEnd",dateApprovedEnd),
                    new SqlParameter("@StatusApproved",statusApprove),
                    new SqlParameter("@Ids",Ids),
                    new SqlParameter("@PhoneNumber",phoneNumber),
                };
                var table = sql.ExecuteCommand("FormDKTraGop_Search", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                return null;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController SearchFormDKTraGop", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public int UpdateInfoFormDKTraGop(string IDCardCode, string IDFormDK, string vendorCode, string empCode, string empName,
            string gender, string birthday, string noiSinh, string hoKhauThuongTru, string hanMuc)
        {
            string[] timeBirthday = birthday.Split('/');
            string format = String.Format("{0}/{1}/{2}"
                        , timeBirthday[0].Length == 1 ? "d" : "dd"
                        , timeBirthday[1].Length == 1 ? "M" : "MM"
                        , timeBirthday[2].Length == 2 ? "yy" : "yyyy");

            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@IDCardCode", IDCardCode),
                new SqlParameter("@IDFormDK", IDFormDK),
                new SqlParameter("@FullName", empName),
                new SqlParameter("@Gender", gender),
                new SqlParameter("@Birthday", birthday.EParseToDateTime(format)),
                new SqlParameter("@NoiSinh", noiSinh),
                new SqlParameter("@HoKhauthuogntru", hoKhauThuongTru),
                new SqlParameter("@MaNhanVien", empCode),
                new SqlParameter("@HanMuc", hanMuc),
                new SqlParameter("@VendorCode", vendorCode),
                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
            };
            DataTable table = sql.ExecuteCommand("FormDKTrarGop_UpdateInfo", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return 1;
            }
            return 0;
        }
        public int FormDKTraGop_UpdateApprove(long idFormDK, string statusApproved)
        {
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@IDFormDK", idFormDK),
                new SqlParameter("@StatusApprove", statusApproved),
                new SqlParameter("@ApprovedBy", UserManager.CurrentUser.InsideCode)
            };
            DataTable table = sql.ExecuteCommand("FormDKTraGop_UpdateApprove", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return 1;
            }
            return 0;
        }
        [HttpPost]
        public ActionResult FormDKTraGop_ExportExcel(FormCollection form)
        {
            string vendorCode = form["nameComp"].ToString();
            if (vendorCode == "0")
            {
                vendorCode = "";
            }
            string customerReg = form["customerReg"].ToString();
            string dateRegStart = form["dateRegStart"].ToString();
            string dateRegEnd = form["dateRegEnd"].ToString();
            string dateApprovedStart = form["dateApprovedStart"].ToString();
            string dateApprovedEnd = form["dateApprovedEnd"].ToString();
            string statusApprove = form["statusApprove"].ToString();
            string phoneNumber = form["txtPhoneNumber"].ToString();
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@VendorCode",vendorCode),
                    new SqlParameter("@CustomerReg",customerReg),
                    new SqlParameter("@DateRegStart",dateRegStart),
                    new SqlParameter("@DateRegEnd",dateRegEnd),
                    new SqlParameter("@DateApprovedStart",dateApprovedStart),
                    new SqlParameter("@DateApprovedEnd",dateApprovedEnd),
                    new SqlParameter("@StatusApproved",statusApprove),
                    new SqlParameter("@PhoneNumber",phoneNumber)
                };
            var table = sql.ExecuteCommand("FormDKTraGop_Search", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                string fileTemplate = "/TemplateExcel/ThongTinDuyetDangKyTraGopOnline.xlsx";
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                        int index = 2;
                        foreach (DataRow row in table.Rows)
                        {
                            int col = 0;
                            col++; worksheet.Cells[index, col].Value = row["statusApproved"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["ID"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["IDCalllog"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["MaNV"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenKH"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenNhomKH"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["GioiTinh"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgaySinh"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenNoiSinh"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["HoKhauThuongTru"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["CMND"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenNoiCapCMND"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayCapCMND"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["SDT"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenTinhThanhPho"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenQuanHuyen"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["PhuongXa"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Email"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenTinhTrangHonNhan"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NguoiLienHe"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["SDTNguoiLienHe"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NameVendor"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenChiNhanhDN"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenChucVu"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["BoPhan"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayBatDauLamViec"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["SoBHXH"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenLoaiHopDong"].ToString();
                            col++; worksheet.Cells[index, col].Value = XString.EConvertToCurrency(row["LuongCung"].ToString());
                            col++; worksheet.Cells[index, col].Value = XString.EConvertToCurrency(row["TongLuongNV"].ToString());
                            if (row["DateReg"].ToString() != "")
                            {
                                col++; worksheet.Cells[index, col].Value = Convert.ToDateTime(row["DateReg"]);
                            }
                            else
                            {
                                col++; worksheet.Cells[index, col].Value = "";
                            }
                            col++; worksheet.Cells[index, col].Value = row["SoTKNH"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["BankName"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenChiNhanh"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["KyHan"].ToString();
                            col++; worksheet.Cells[index, col].Value = XString.EConvertToCurrency(row["HanMuc"].ToString());
                            col++; worksheet.Cells[index, col].Value = row["IDCardCode"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["statusApproved"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["DateApproved"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NguoiDuyet"].ToString();
                            index++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=ThongTinDuyetDangKyTraGopOnline-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }
            return RedirectToAction("FormApproveRegShopCare", "Requests");
        }

        public ActionResult GetInfoOCRDSearch()
        {
            DataTable tb = sql.ExecuteCommand("OCRD_Search", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string GetThanhTienOfSP(string maSP, string vendorCode)
        {
            DataTable tb = sql.ExecuteCommand("FRT_SP_LayGiaSP", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@MaSP",maSP),
                new SqlParameter("@MaDN",vendorCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                return tb.Rows[0][0].ToString();
            }
            return string.Empty;
        }

        /// <summary>Lưu Thông tin Đơn hàng</summary>
        public ActionResult LuuThongTinDH(LuuThongTinDonHang tt)
        {
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@IDFormDK", tt.IDFormDK)
                , new SqlParameter("@MaShop", tt.Shop)
                , new SqlParameter("@MaSP", tt.SanPham)
                , new SqlParameter("@ThanhTien", tt.ThanhTien)
                , new SqlParameter("@SoTienTraTruoc", tt.SoTienTraTruoc)
                , new SqlParameter("@KyHan", tt.KiHan)
                , new SqlParameter("@Note", tt.GhiChu)
                , new SqlParameter("@NgayDenShopMua", tt.NgayDenShop)
                , new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode)
                , new SqlParameter("@IDcardcode", tt.IDCardCode)
                , new SqlParameter("@HinhThucGH", tt.HinhThucGiao)
                , new SqlParameter("@DiaChi", tt.DiaChi)
                , new SqlParameter("@HoTen_NguoiNhanhang", tt.HoTenNguoiNhan)
                , new SqlParameter("@CMND_NguoiNhanHang", tt.CMNDNguoiNhan)
                , new SqlParameter("@SDT_NguoiNhanHang", tt.SDTNguoiNhan)
                , new SqlParameter("@DiaChiNguoiNhanHang", tt.DiaChiNguoiNhan)
                , new SqlParameter("@OTPCode", tt.OtpCode)
                , new SqlParameter("@NV_BanHang", tt.NV_BanHang)
                , new SqlParameter("@Is_SS_Online", tt.DH_SamSung_Online)
                , new SqlParameter("@BankCard", tt.BankCard)
                
                //▼	Edit - VietMXH - 07/08/2018 - Check SM/PSM==================================================
                , new SqlParameter("@AuthenBy", tt.AuthenBy)                
                //▲	Edit - VietMXH - 07/08/2018 - Check SM/PSM==================================================

            };
            DataTable l_DataTable = sql.ExecuteCommand("FRT_SP_LuuThongTinDH", CommandType.StoredProcedure, param);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }

        public int LuuLaiThongTinDH(string IDFormDK, string Shop, string SanPham, string ThanhTien, string SoTienTraTruoc,
                        string NgayDenShop, string GhiChu, string IDCardCode, string HinhThucGiao, string DiaChi, string hoTenNguoiNhan,
            string cmndNguoiNhan, string sdtNguoiNhan, string diaChiNguoiNhan)
        {
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@IDFormDK", IDFormDK),
                new SqlParameter("@MaShop", Shop),
                new SqlParameter("@MaSP", SanPham),
                new SqlParameter("@ThanhTien", ThanhTien),
                new SqlParameter("@SoTienTraTruoc", SoTienTraTruoc),
                new SqlParameter("@KyHan", 6),
                new SqlParameter("@Note", GhiChu),
                new SqlParameter("@NgayDenShopMua", NgayDenShop),
                new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                new SqlParameter("@IDcardcode", IDCardCode),
                new SqlParameter("@HinhThucGH", HinhThucGiao),
                new SqlParameter("@DiaChi", DiaChi),
                new SqlParameter("@HoTen_NguoiNhanhang", hoTenNguoiNhan),
                new SqlParameter("@CMND_NguoiNhanHang", cmndNguoiNhan),
                new SqlParameter("@SDT_NguoiNhanHang", sdtNguoiNhan),
                new SqlParameter("@DiaChiNguoiNhanHang", diaChiNguoiNhan)

            };
            DataTable table = sql.ExecuteCommand("FRT_SP_LuuLaiThongTinDH", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return 1;
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "2")
            {
                return 2;// vuot han muc
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "3")
            {
                return 3;// han muc dang cho duyet
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "5")
            {
                return 5;// han muc dang cho duyet
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "6")
            {
                return 6;// đơn hàng chưa hoàn tất
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "7")
            {
                return 7;// sai mã OTP
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "8")
            {
                return 8;// không có sp có imei
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "9")
            {
                return 9;// đơn hàng dưới 1tr
            }
            return 0;
        }

        public ActionResult LoadThongTinKhachHang(string vendorCode, string maNV, string cmnd)
        {
            Dictionary<string, List<Dictionary<string, object>>> myList =
                            new Dictionary<string, List<Dictionary<string, object>>>();
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@sdt",""),
                    new SqlParameter("@cmnd",cmnd),
                    new SqlParameter("@IDcardCode",""),
                    new SqlParameter("@MaNV",maNV),
                    new SqlParameter("@Vendor",vendorCode)
                };
            DataSet infoCustomer = sql.ExecuteCommandDataSet("FRT_SP_LoadThongTinKhachHang", CommandType.StoredProcedure, param);
            myList.Add("thongtinkhachhang", infoCustomer.Tables[0].EParseToObjects());
            myList.Add("thongtinsanpham", infoCustomer.Tables[1].EParseToObjects());
            myList.Add("thongtinnguoinhan", infoCustomer.Tables[2].EParseToObjects());
            myList.Add("thongtinphieuxacnhanmuahang", infoCustomer.Tables[3].EParseToObjects());
            string json = JsonConvert.SerializeObject(myList, Newtonsoft.Json.Formatting.Indented);
            var jsonResult = Json(json, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult LoadDanhSachSPKhachHang(string IDcardcode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@IDcardcode",IDcardcode)
                };
            var table = sql.ExecuteCommand("FRT_SP_DSSanPhamKH", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult LoadDanhSachSPKhachHang_NhomMua(string IDcardcode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@IDcardcode",IDcardcode)
                };
            var table = sql.ExecuteCommand("FRT_SP_DSSanPhamKH_NhomMua", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        [HttpPost]
        public ActionResult ApprotedShopCare(FormCollection form)
        {
            var details = Convert.ToString(form["DataPost"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);

            var detailsUpdate = Convert.ToString(form["DataPostUpdate"]);
            var objectsUpdate = JsonConvert.DeserializeObject<dynamic>(detailsUpdate);

            using (DataTable dt = new DataTable())
            {

                dt.Columns.Add("ID", typeof(string));
                dt.Columns.Add("MaNV", typeof(string));
                dt.Columns.Add("TenKH", typeof(string));
                dt.Columns.Add("NhomKH", typeof(string));
                dt.Columns.Add("GioiTinh", typeof(string));
                dt.Columns.Add("NgaySinh", typeof(string));
                dt.Columns.Add("NoiSinh", typeof(string));
                dt.Columns.Add("HoKhauThuongTru", typeof(string));
                dt.Columns.Add("CMND", typeof(string));
                dt.Columns.Add("NoiCapCMND", typeof(string));
                dt.Columns.Add("NgayCapCMND", typeof(string));
                dt.Columns.Add("SDT ", typeof(string));
                dt.Columns.Add("TinhThanhPho ", typeof(string));
                dt.Columns.Add("QuanHuyen ", typeof(string));
                dt.Columns.Add("PhuongXa ", typeof(string));
                dt.Columns.Add("Email ", typeof(string));
                dt.Columns.Add("TinhTrangHonNhan ", typeof(string));
                dt.Columns.Add("NguoiLienHe", typeof(string));
                dt.Columns.Add("SDTNguoiLienHe", typeof(string));
                dt.Columns.Add("VendorCode", typeof(string));
                dt.Columns.Add("ChiNhanhVendor", typeof(string));
                dt.Columns.Add("ChucVu", typeof(string));
                dt.Columns.Add("BoPhan", typeof(string));
                dt.Columns.Add("NgayBatDauLamViec", typeof(string));
                dt.Columns.Add("SoBHXH", typeof(string));
                dt.Columns.Add("IDCardCode", typeof(string));
                dt.Columns.Add("LoaiHopDong", typeof(string));
                dt.Columns.Add("LuongCung", typeof(string));
                dt.Columns.Add("TongLuongNV", typeof(string));
                dt.Columns.Add("SoTKNH", typeof(string));
                dt.Columns.Add("IdBank", typeof(string));
                dt.Columns.Add("ChiNhanhNH", typeof(string));
                dt.Columns.Add("KiHan", typeof(string));

                foreach (var item in objectsUpdate)
                {
                    string Id = (string)item.Id;
                    string MaNV = (string)item.MaNV;
                    string TenKH = (string)item.TenKH;
                    string NhomKH = (string)item.NhomKH;
                    string GioiTinh = (string)item.GioiTinh;
                    string NgaySinh = (string)item.NgaySinh;
                    string NoiSinh = (string)item.NoiSinh;
                    string HoKhauThuongTru = (string)item.HoKhauThuongTru;
                    string CMND = (string)item.CMND;
                    string NoiCapCMND = (string)item.NoiCapCMND;
                    string NgayCapCMND = (string)item.NgayCapCMND;
                    string SDT = (string)item.SDT;
                    string TinhThanhPho = (string)item.TinhThanhPho;
                    string QuanHuyen = (string)item.QuanHuyen;
                    string PhuongXa = (string)item.PhuongXa;
                    string Email = (string)item.Email;
                    string TinhTrangHonNhan = (string)item.TinhTrangHonNhan;
                    string NguoiLienHe = (string)item.NguoiLienHe;
                    string SDTNguoiLienHe = (string)item.SDTNguoiLienHe;
                    string VendorCode = (string)item.VendorCode;
                    string ChiNhanhVendor = (string)item.ChiNhanhVendor;
                    string ChucVu = (string)item.ChucVu;
                    string BoPhan = (string)item.BoPhan;
                    string NgayBatDauLamViec = (string)item.NgayBatDauLamViec;
                    string SoBHXH = (string)item.SoBHXH;
                    string IDCardCode = (string)item.IDCardCode;
                    string LoaiHopDong = (string)item.LoaiHopDong;
                    string LuongCung = (string)item.LuongCung;
                    string TongLuongNV = (string)item.TongLuongNV;
                    string SoTKNH = (string)item.SoTKNH;
                    string IdBank = (string)item.IdBank;
                    string ChiNhanhNH = (string)item.ChiNhanhNH;
                    string KiHan = (string)item.KiHan;


                    dt.Rows.Add(Id, MaNV, TenKH, NhomKH, GioiTinh, NgaySinh, NoiSinh, HoKhauThuongTru, CMND, NoiCapCMND, NgayCapCMND, SDT, TinhThanhPho, QuanHuyen, PhuongXa, Email, TinhTrangHonNhan, NguoiLienHe, SDTNguoiLienHe, VendorCode, ChiNhanhVendor, ChucVu, BoPhan, NgayBatDauLamViec, SoBHXH, IDCardCode, LoaiHopDong, LuongCung, TongLuongNV, SoTKNH, IdBank, ChiNhanhNH, KiHan);
                }
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@Table", dt),
                    new SqlParameter("@UpdateBy", UserManager.CurrentUser == null ?  "" : UserManager.CurrentUser .InsideCode )
                };
                DataTable tableCustomers = sql.ExecuteCommand("UpdateShopCareForm", System.Data.CommandType.StoredProcedure, param);
            }


            using (DataTable dt = new DataTable())
            {
                dt.Columns.Add("Id", typeof(string));
                dt.Columns.Add("Approved", typeof(string));
                foreach (var item in objects)
                {
                    string Id = (string)item.Id;
                    string Approved = (string)item.Approved;
                    dt.Rows.Add(Id, Approved);
                }
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@Table", dt),
                    new SqlParameter("@ApprovedBy", UserManager.CurrentUser == null ?  "" : UserManager.CurrentUser .InsideCode )
                };
                DataTable tableCustomers = sql.ExecuteCommand("ApprotedShopCare", System.Data.CommandType.StoredProcedure, param);
                if (tableCustomers != null && tableCustomers.Rows.Count > 0)
                {
                    var jsonResult = Json(tableCustomers.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    TempData["LoadData"] = JsonConvert.SerializeObject(jsonResult.Data);
                }
            }
            return RedirectToAction("FormApproveRegShopCare");
        }
        [HttpPost]
        public ActionResult UpdatedShopCare(FormCollection form)
        {
            var details = Convert.ToString(form["DataPost"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            using (DataTable dt = new DataTable())
            {

                dt.Columns.Add("ID", typeof(string));
                dt.Columns.Add("MaNV", typeof(string));
                dt.Columns.Add("TenKH", typeof(string));
                dt.Columns.Add("NhomKH", typeof(string));
                dt.Columns.Add("GioiTinh", typeof(string));
                dt.Columns.Add("NgaySinh", typeof(string));
                dt.Columns.Add("NoiSinh", typeof(string));
                dt.Columns.Add("HoKhauThuongTru", typeof(string));
                dt.Columns.Add("CMND", typeof(string));
                dt.Columns.Add("NoiCapCMND", typeof(string));
                dt.Columns.Add("NgayCapCMND", typeof(string));
                dt.Columns.Add("SDT ", typeof(string));
                dt.Columns.Add("TinhThanhPho ", typeof(string));
                dt.Columns.Add("QuanHuyen ", typeof(string));
                dt.Columns.Add("PhuongXa ", typeof(string));
                dt.Columns.Add("Email ", typeof(string));
                dt.Columns.Add("TinhTrangHonNhan ", typeof(string));
                dt.Columns.Add("NguoiLienHe", typeof(string));
                dt.Columns.Add("SDTNguoiLienHe", typeof(string));
                dt.Columns.Add("VendorCode", typeof(string));
                dt.Columns.Add("ChiNhanhVendor", typeof(string));
                dt.Columns.Add("ChucVu", typeof(string));
                dt.Columns.Add("BoPhan", typeof(string));
                dt.Columns.Add("NgayBatDauLamViec", typeof(string));
                dt.Columns.Add("SoBHXH", typeof(string));
                dt.Columns.Add("IDCardCode", typeof(string));
                dt.Columns.Add("LoaiHopDong", typeof(string));
                dt.Columns.Add("LuongCung", typeof(string));
                dt.Columns.Add("TongLuongNV", typeof(string));
                dt.Columns.Add("SoTKNH", typeof(string));
                dt.Columns.Add("IdBank", typeof(string));
                dt.Columns.Add("ChiNhanhNH", typeof(string));
                dt.Columns.Add("KiHan", typeof(string));

                foreach (var item in objects)
                {
                    string Id = (string)item.Id;
                    string MaNV = (string)item.MaNV;
                    string TenKH = (string)item.TenKH;
                    string NhomKH = (string)item.NhomKH;
                    string GioiTinh = (string)item.GioiTinh;
                    string NgaySinh = (string)item.NgaySinh;
                    string NoiSinh = (string)item.NoiSinh;
                    string HoKhauThuongTru = (string)item.HoKhauThuongTru;
                    string CMND = (string)item.CMND;
                    string NoiCapCMND = (string)item.NoiCapCMND;
                    string NgayCapCMND = (string)item.NgayCapCMND;
                    string SDT = (string)item.SDT;
                    string TinhThanhPho = (string)item.TinhThanhPho;
                    string QuanHuyen = (string)item.QuanHuyen;
                    string PhuongXa = (string)item.PhuongXa;
                    string Email = (string)item.Email;
                    string TinhTrangHonNhan = (string)item.TinhTrangHonNhan;
                    string NguoiLienHe = (string)item.NguoiLienHe;
                    string SDTNguoiLienHe = (string)item.SDTNguoiLienHe;
                    string VendorCode = (string)item.VendorCode;
                    string ChiNhanhVendor = (string)item.ChiNhanhVendor;
                    string ChucVu = (string)item.ChucVu;
                    string BoPhan = (string)item.BoPhan;
                    string NgayBatDauLamViec = (string)item.NgayBatDauLamViec;
                    string SoBHXH = (string)item.SoBHXH;
                    string IDCardCode = (string)item.IDCardCode;
                    string LoaiHopDong = (string)item.LoaiHopDong;
                    string LuongCung = (string)item.LuongCung;
                    string TongLuongNV = (string)item.TongLuongNV;
                    string SoTKNH = (string)item.SoTKNH;
                    string IdBank = (string)item.IdBank;
                    string ChiNhanhNH = (string)item.ChiNhanhNH;
                    string KiHan = (string)item.KiHan;


                    dt.Rows.Add(Id, MaNV, TenKH, NhomKH, GioiTinh, NgaySinh, NoiSinh, HoKhauThuongTru, CMND, NoiCapCMND, NgayCapCMND, SDT, TinhThanhPho, QuanHuyen, PhuongXa, Email, TinhTrangHonNhan, NguoiLienHe, SDTNguoiLienHe, VendorCode, ChiNhanhVendor, ChucVu, BoPhan, NgayBatDauLamViec, SoBHXH, IDCardCode, LoaiHopDong, LuongCung, TongLuongNV, SoTKNH, IdBank, ChiNhanhNH, KiHan);
                }
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@Table", dt),
                    new SqlParameter("@UpdateBy", UserManager.CurrentUser == null ?  "" : UserManager.CurrentUser .InsideCode )
                };
                DataTable tableCustomers = sql.ExecuteCommand("UpdateShopCareForm", System.Data.CommandType.StoredProcedure, param);
                if (tableCustomers != null && tableCustomers.Rows.Count > 0)
                {
                    var jsonResult = Json(tableCustomers.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    //return jsonResult;
                    TempData["LoadDataUpdate"] = JsonConvert.SerializeObject(jsonResult.Data);
                }
            }
            return RedirectToAction("FormApproveRegShopCare");
        }
        [HttpGet]
        public void DownloadExportExcel(string view, string type)
        {
            string path = string.Empty;
            string fileName = string.Empty;
            string pathData = string.Empty;

            if (view == "FormApproveRegShopCare" && type == "import")
            {
                path = "~/TemplateExcel/MauVoucher.xlsx";
                fileName = "MauVoucher.xlsx";
            }


            DataTable table = sql.ExecuteCommand("BI_GetGroupProducts", CommandType.StoredProcedure, null);
            DataTable table2 = sql.ExecuteCommand("BI_GetNganhhang", CommandType.StoredProcedure, null);
            DataTable table3 = sql.ExecuteCommand("BI_GetNhanHang", CommandType.StoredProcedure, null);
            DataTable table4 = sql.ExecuteCommand("BI_GetLoaiHang", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0 && table2 != null && table2.Rows.Count > 0 && table3 != null && table3.Rows.Count > 0
                && table4 != null && table4.Rows.Count > 0)
            {
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(path));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets[5];
                        int index = 2;
                        foreach (DataRow row in table.Rows)
                        {
                            int col = 0;
                            col++; worksheet.Cells[index, col].Value = row["DocEntry"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["U_PRO_NAME"].ToString();
                            index++;
                        }
                        ExcelWorksheet worksheet1 = package.Workbook.Worksheets[2];
                        index = 2;
                        foreach (DataRow row in table2.Rows)
                        {
                            int col = 0;
                            col++; worksheet1.Cells[index, col].Value = row["U_pro_code"].ToString();
                            col++; worksheet1.Cells[index, col].Value = row["U_PRO_NAME"].ToString();
                            index++;
                        }
                        ExcelWorksheet worksheet3 = package.Workbook.Worksheets[4];
                        index = 2;
                        foreach (DataRow row in table3.Rows)
                        {
                            int col = 0;
                            col++; worksheet3.Cells[index, col].Value = row["FirmCode"].ToString();
                            col++; worksheet3.Cells[index, col].Value = row["FirmName"].ToString();
                            index++;
                        }
                        ExcelWorksheet worksheet4 = package.Workbook.Worksheets[3];
                        index = 2;
                        foreach (DataRow row in table4.Rows)
                        {
                            int col = 0;
                            col++; worksheet4.Cells[index, col].Value = row["ItmsGrpCod"].ToString();
                            col++; worksheet4.Cells[index, col].Value = row["ItmsGrpNam"].ToString();
                            index++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=MauVoucher-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }
            if (path != string.Empty)
            {
                System.Web.HttpResponse response = System.Web.HttpContext.Current.Response;
                response.ClearContent();
                response.Clear();
                response.ContentType = "text/plain";
                response.AddHeader("Content-Disposition", "attachment; filename=" + fileName + ";");
                response.TransmitFile(path);
                response.Flush();
                response.End();
            }
        }
        public ActionResult HanMucTamTinh_Get(string vendorCode, string tongLuong)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@vendorCode",vendorCode),
                    new SqlParameter("@ChucVu","0"),
                    new SqlParameter("@TongLuong",tongLuong)
                };
            var table = sql.ExecuteCommand("FRT_SP_LayHanMucTamTinh", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public string LoadShopTheoVendor(string vendorCode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@vendor",vendorCode)
                };
            var table = sql.ExecuteCommand("FRT_SP_LoadShopTheoVendor", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        //▼ ChuongNT3 - 24/04/2018 - them xác nhận sổ thẻ loại 146
        public ActionResult ApprOpenCreditCard_CheckExist_CreditCardWithVend(string VendorCode, string CreditCard)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@VendCode",VendorCode),
                    new SqlParameter("@CreditCard",CreditCard)
                };
            DataTable tb = sql.ExecuteCommand("sp_ApprOpenCreditCard_CheckExist_CreditCardWithVend", CommandType.StoredProcedure, param);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲ ChuongNT3 - 24/04/2018 - them xác nhận sổ thẻ loại 146
        public string LoadDiaChiGiaoHang(string vendorCode, string hinhthucgiao, string mashop)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@vendor",vendorCode),
                    new SqlParameter("@hinhThucGH",hinhthucgiao),
                    new SqlParameter("@MaShop",mashop)
                };
            var table = sql.ExecuteCommand("FRT_SP_LoadDiaChiKH", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public ActionResult ListFormDKPending()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            List<SelectListItem> trangthaihanmuc = new List<SelectListItem>();
            DataTable tbStatus = sql.ExecuteCommand("FRT_SP_LoadComboxOcrd", CommandType.StoredProcedure, null);
            if (tbStatus != null && tbStatus.Rows.Count > 0)
            {
                foreach (DataRow row in tbStatus.Rows)
                {
                    trangthaihanmuc.Add(new SelectListItem { Value = row["Code"].ToString(), Text = row["Name"].ToString() });
                }

                ViewBag.statushanMuc = trangthaihanmuc;
            }
            return View();
        }
        public ActionResult GetOCRDCustomer()
        {
            DataTable tb = sql.ExecuteCommand("GetOCRDCustomer", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult SearchFormDKPending(string vendorCode, string customerName, string cmnd, string trangthai,
            string idCallLog, string tuNgay, string denNgay)
        {
            try
            {
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@Vendor",vendorCode),
                    new SqlParameter("@CardName",customerName),
                    new SqlParameter("@CMND",cmnd),
                    new SqlParameter("@TrangThai",trangthai),
                    new SqlParameter("@IDCalllog",idCallLog),
                    new SqlParameter("@TuNgay",tuNgay),
                    new SqlParameter("@DenNgay",denNgay),
                    new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode)
                };
                var table = sql.ExecuteCommand("FRT_SP_LoadDSPending", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                return null;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController SearchFormDKPending", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }
        [HttpGet]
        public ActionResult GetAjaxHanMuc(string MaCongTy, string MaChucVu, string TongLuong)
        {
            if (!Request.IsAjaxRequest())
                return null;
            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@MaCongTy",MaCongTy),
                new SqlParameter("@ChucVu",MaChucVu),
                new SqlParameter("@TongLuong",TongLuong),
            };
            DataTable table = sql.ExecuteCommand("LayHanMucDuaVaoTongLuong", System.Data.CommandType.StoredProcedure, param);
            if (table != null)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }

            return null;
        }
        public ActionResult FormDKPending_ExportExcel(FormCollection form)
        {
            string vendorCode = form["nameComp"].ToString();
            string customerName = form["nameCus"] != null && form["nameCus"] != "" ? form["nameCus"] : "";
            string cmnd = form["cmnd"].ToString();
            string trangthai = form["statusHanMuc"].ToString();
            string timeStart = form["timeStart"].ToString();
            string timeEnd = form["timeEnd"].ToString();
            string idCallLog = form["idCallLog"].ToString();
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@Vendor",vendorCode),
                    new SqlParameter("@CardName",customerName),
                    new SqlParameter("@CMND",cmnd),
                    new SqlParameter("@TrangThai",trangthai),
                    new SqlParameter("@IDCalllog",idCallLog),
                    new SqlParameter("@TuNgay",timeStart),
                    new SqlParameter("@DenNgay",timeEnd),
                    new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode)
                };
            var table = sql.ExecuteCommand("FRT_SP_LoadDSPending", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                string fileTemplate = "/TemplateExcel/BaoCaoChiTietDanhSachPhieuDKPending.xlsx";
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                        int index = 2;
                        foreach (DataRow row in table.Rows)
                        {
                            int col = 0;
                            col++; worksheet.Cells[index, col].Value = row["IDFormDK"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenCty"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["CardName"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["MaNV_KH"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["SDT"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["CMND"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["IDCalllog"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TTDuyet"].ToString();
                            index++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=BaoCaoChiTietDanhSachPhieuDKPending-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }
            return RedirectToAction("ListFormDKPending", "Requests");
        }
        public string CheckPhoneNumCustomerReg(string phoneNum)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@PhoneNum",phoneNum)
                };
            var table = sql.ExecuteCommand("CustomerRegInstallment_CheckPhoneNum", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public string CheckCMNDCustomerReg(string cmnd)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@CMND",cmnd)
                };
            var table = sql.ExecuteCommand("CustomerRegInstallment_CheckCMND", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public ActionResult DownloadFileGuarantee(string fileName)
        {
            const string FtpUrl = "ftp://10.96.254.143:2121/CRM-BH%202015/Upload/";
            string FtpUrlDowload = FtpUrl + fileName;
            const string User = "ftp-upload";
            const string Pass = "ftp@FTP@2121";
            byte[] downloadedData = new byte[0];

            try
            {
                //Get File Size
                FtpWebRequest req = (FtpWebRequest)WebRequest.Create(FtpUrlDowload);
                req.Method = WebRequestMethods.Ftp.GetFileSize;
                req.Credentials = new NetworkCredential(User, Pass);
                req.UseBinary = true;
                req.UsePassive = true;
                req.KeepAlive = true;
                int dataLength = (int)req.GetResponse().ContentLength;

                //Get Date
                req = (FtpWebRequest)WebRequest.Create(FtpUrlDowload);
                req.Method = WebRequestMethods.Ftp.DownloadFile;
                req.Credentials = new NetworkCredential(User, Pass);
                req.UseBinary = true;
                req.UsePassive = true;
                req.KeepAlive = false;

                //Streams
                FtpWebResponse response = req.GetResponse() as FtpWebResponse;
                Stream reader = response.GetResponseStream();

                //Download to memory
                //Note: adjust the streams here to download directly to the hard drive
                MemoryStream memStream = new MemoryStream();
                byte[] buffer = new byte[1024]; //downloads in chuncks

                while (true)
                {
                    //Application.DoEvents(); //prevent application from crashing

                    //Try to read the data
                    int bytesRead = reader.Read(buffer, 0, buffer.Length);

                    if (bytesRead == 0)
                    {
                        //Nothing was read, finished downloading
                        break;
                    }
                    else
                    {
                        //Write the downloaded data
                        memStream.Write(buffer, 0, bytesRead);
                    }
                }

                //Convert the downloaded stream to a byte array
                downloadedData = memStream.ToArray();

                //using (var zipStream = new ZipOutputStream(Response.OutputStream))
                //{
                //    // Give the file name of downloaded zip file
                //    Response.AddHeader("Content-Disposition", "attachment; filename=BaoHanh.zip");
                //    // Define content type
                //    Response.ContentType = "application/zip";
                //    // Get all file path one by one
                //    byte[] fileBytes = memStream.ToArray();
                //    // Get every file path
                //    var fileEntry = new ZipEntry(fileName)
                //    {
                //        Size = fileBytes.Length
                //    };
                //    zipStream.PutNextEntry(fileEntry);
                //    zipStream.Write(fileBytes, 0, fileBytes.Length);

                //    // Clear and closed zipStream object
                //    zipStream.Flush();
                //    reader.Close();
                //    memStream.Close();
                //    response.Close();
                //    zipStream.Close();
                //}
                byte[] fileBytes = memStream.ToArray();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + fileName);
                Response.BinaryWrite(fileBytes);
                reader.Close();
                memStream.Close();
                response.Close();
            }
            catch
            {
                return null;
            }
            return null;
        }
        public ActionResult DownLoadFilePos(string url)
        {
            //SO123/b.jpg  -- SO123/a.txt
            string UrlDowload = "ftp://118.69.201.35/" + url;
            const string User = "posupload";
            const string Pass = "posupload@frt123";
            byte[] downloadedData = new byte[0];
            try
            {
                FtpWebRequest Ftp = (FtpWebRequest)WebRequest.Create(UrlDowload);
                Ftp.Method = WebRequestMethods.Ftp.GetFileSize;
                Ftp.Credentials = new NetworkCredential(User, Pass);
                Ftp.UseBinary = true;
                Ftp.UsePassive = true;
                Ftp.KeepAlive = true;

                int dataLength = (int)Ftp.ContentLength;

                Ftp = (FtpWebRequest)WebRequest.Create(UrlDowload);
                Ftp.Method = WebRequestMethods.Ftp.DownloadFile;
                Ftp.Credentials = new NetworkCredential(User, Pass);
                Ftp.UseBinary = true;
                Ftp.UsePassive = true;
                Ftp.KeepAlive = false;

                FtpWebResponse response = Ftp.GetResponse() as FtpWebResponse;
                Stream reader = response.GetResponseStream();

                MemoryStream memory = new MemoryStream();
                byte[] buffer = new byte[1024];
                while (true)
                {
                    int byteRead = reader.Read(buffer, 0, buffer.Length);
                    if (byteRead == 0)
                    {
                        break;
                    }
                    else
                    {
                        memory.Write(buffer, 0, byteRead);
                    }
                }
                downloadedData = memory.ToArray();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + url);
                Response.BinaryWrite(downloadedData);
                reader.Close();
                memory.Close();
                response.Close();
            }
            catch (Exception ex)
            {
                return null;
            }
            return null;
        }
        public string DownLoadFilePosByte(string url)
        {
            //SO123/b.jpg  -- SO123/a.txt
            string UrlDowload = "ftp://118.69.201.35/" + url;
            const string User = "posupload";
            const string Pass = "posupload@frt123";
            byte[] downloadedData = new byte[0];
            try
            {
                FtpWebRequest Ftp = (FtpWebRequest)WebRequest.Create(UrlDowload);
                Ftp.Method = WebRequestMethods.Ftp.GetFileSize;
                Ftp.Credentials = new NetworkCredential(User, Pass);
                Ftp.UseBinary = true;
                Ftp.UsePassive = true;
                Ftp.KeepAlive = true;

                int dataLength = (int)Ftp.ContentLength;

                Ftp = (FtpWebRequest)WebRequest.Create(UrlDowload);
                Ftp.Method = WebRequestMethods.Ftp.DownloadFile;
                Ftp.Credentials = new NetworkCredential(User, Pass);
                Ftp.UseBinary = true;
                Ftp.UsePassive = true;
                Ftp.KeepAlive = false;

                FtpWebResponse response = Ftp.GetResponse() as FtpWebResponse;
                Stream reader = response.GetResponseStream();

                MemoryStream memory = new MemoryStream();
                byte[] buffer = new byte[1024];
                while (true)
                {
                    int byteRead = reader.Read(buffer, 0, buffer.Length);
                    if (byteRead == 0)
                    {
                        break;
                    }
                    else
                    {
                        memory.Write(buffer, 0, byteRead);
                    }
                }
                downloadedData = memory.ToArray();
                reader.Close();
                memory.Close();
                response.Close();
                var data = Convert.ToBase64String(downloadedData);
                return data;

            }
            catch (Exception ex)
            {
                return null;
            }
            return null;
        }
        public string DownLoadFilePosCMND(string url)
        {
            //SO123/b.jpg  -- SO123/a.txt
            string[] filesNames = url.Split('/');
            string fileName = filesNames[1];
            //string UrlDowload = "ftp://118.69.201.35/POS_TraGop/" + url;
            string UrlDowload = "ftp://10.96.254.47/POS_TraGop/" + url;
            const string User = "posupload";
            const string Pass = "posupload@frt123";
            byte[] downloadedData = new byte[0];
            try
            {
                FtpWebRequest Ftp = (FtpWebRequest)WebRequest.Create(UrlDowload);
                Ftp.Method = WebRequestMethods.Ftp.GetFileSize;
                Ftp.Credentials = new NetworkCredential(User, Pass);
                Ftp.UseBinary = true;
                Ftp.UsePassive = true;
                Ftp.KeepAlive = true;

                int dataLength = (int)Ftp.ContentLength;

                Ftp = (FtpWebRequest)WebRequest.Create(UrlDowload);
                Ftp.Method = WebRequestMethods.Ftp.DownloadFile;
                Ftp.Credentials = new NetworkCredential(User, Pass);
                Ftp.UseBinary = true;
                Ftp.UsePassive = true;
                Ftp.KeepAlive = false;

                FtpWebResponse response = Ftp.GetResponse() as FtpWebResponse;
                Stream reader = response.GetResponseStream();

                MemoryStream memory = new MemoryStream();
                byte[] buffer = new byte[1024];
                while (true)
                {
                    int byteRead = reader.Read(buffer, 0, buffer.Length);
                    if (byteRead == 0)
                    {
                        break;
                    }
                    else
                    {
                        memory.Write(buffer, 0, byteRead);
                    }
                }

                byte[] fileBytes = memory.ToArray();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + fileName);
                Response.BinaryWrite(fileBytes);
                reader.Close();
                memory.Close();
                response.Close();

                //downloadedData = memory.ToArray();
                //reader.Close();
                //memory.Close();
                //response.Close();
                //var data = Convert.ToBase64String(downloadedData);
                //return data;

            }
            catch (Exception ex)
            {
                return ex.ToString();
            }
            return null;
        }
        public ActionResult DowloadFilePosTest(string url = "")
        {
            if (string.IsNullOrEmpty(url))
                return null;
            //SO4933200/BanCamKet_cuong.jpg
            using (WebClient webClient = new WebClient())
            {
                string[] filesNames = url.Split('/');
                string fileName = filesNames[1];
                //webClient.DownloadFile("http://img.v3.news.zdn.vn/w660/Uploaded/jugtzb/2016_06_06/DSC_9355.jpg", "DSC_9355.jpg");
                var byteArr = webClient.DownloadData("http://10.96.254.47:8080/POS_TraGop/" + url);
                return File(byteArr, fileName);
            }
        }
        public string UpdateSDTKH_Installment(FormCollection form)
        {
            string fName = string.Empty;
            string maKH = form["maKH"].ToString(); string ttHanMuc = form["ttHanMuc"].ToString();
            string newSDT = form["newSDT"].ToString(); string note = form["note"].ToString();
            if (Request.Files.Count > 0)
            {
                try
                {
                    for (int i = 0; i < Request.Files.Count; i++)
                    {
                        HttpPostedFileBase file = Request.Files[i];
                        //Save file content goes here
                        fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);

                            //foreach (var requestItem in requestDics)
                            //{
                            //    FileAttach fileAttach = new FileAttach();
                            //    fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            //    fileAttach.StepNo = requestItem.Value.StepNo;
                            //    fileAttach.RequestId = requestItem.Value.Id;
                            //    fileAttach.TimeCreate = DateTime.Now;
                            //    fileAttach.Status = Key.Status.Available;
                            //    db.FileAttachs.Add(fileAttach);
                            //}

                        }
                    }

                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController UpdateSDTKH_Installment", ex.ToString());
                }
            }

            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@IDCardCode",maKH),
                new SqlParameter("@TTHanMuc",ttHanMuc),
                new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode),
                new SqlParameter("@NewSDT",newSDT),
                new SqlParameter("@Note",note),
                new SqlParameter("@FileAttachName",Keyword.GetFolderFileAttach() + fName)
            };
            var table = sql.ExecuteCommand("FRT_SP_UpdateSDT_DK", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return "1";
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() != "1" && table.Rows[0][0].ToString() != "0")
            {
                return table.Rows[0][0].ToString();
            }

            return string.Empty;
        }
        public string UpdateCMNDKH_Installment(FormCollection form)
        {
            string fName = string.Empty;
            string maKH = form["maKH"].ToString(); string ttHanMuc = form["ttHanMuc"].ToString();
            string newCMND = form["newCMND"].ToString(); string note = form["note"].ToString();
            if (Request.Files.Count > 0)
            {
                try
                {
                    for (int i = 0; i < Request.Files.Count; i++)
                    {
                        HttpPostedFileBase file = Request.Files[i];
                        //Save file content goes here
                        fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);

                            //foreach (var requestItem in requestDics)
                            //{
                            //    FileAttach fileAttach = new FileAttach();
                            //    fileAttach.Uri = Keyword.GetFolderFileAttach() + fName;
                            //    fileAttach.StepNo = requestItem.Value.StepNo;
                            //    fileAttach.RequestId = requestItem.Value.Id;
                            //    fileAttach.TimeCreate = DateTime.Now;
                            //    fileAttach.Status = Key.Status.Available;
                            //    db.FileAttachs.Add(fileAttach);
                            //}

                        }
                    }

                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController UpdateCMNDKH_Installment", ex.ToString());
                }
            }

            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@IDCardCode",maKH),
                new SqlParameter("@TTHanMuc",ttHanMuc),
                new SqlParameter("@CreateBy",UserManager.CurrentUser.InsideCode),
                new SqlParameter("@NewCMND",newCMND),
                new SqlParameter("@Note",note),
                new SqlParameter("@FileAttachName",Keyword.GetFolderFileAttach() + fName)
            };
            var table = sql.ExecuteCommand("FRT_SP_UpdateCMND_DK", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return "1";
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() != "1" && table.Rows[0][0].ToString() != "0")
            {
                return table.Rows[0][0].ToString();
            }

            return string.Empty;
        }
        public string CheckUpdateSDTCustomerReg(string oldSDT)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@OldSDT",oldSDT)
                };
            var table = sql.ExecuteCommand("CustomerRegInstallment_CheckUpdateSDT", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() != "0")
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public string CheckUpdateCMNDCustomerReg(string oldCMND)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@OldCMND",oldCMND)
                };
            var table = sql.ExecuteCommand("CustomerRegInstallment_CheckUpdateCMND", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() != "0")
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public string CustomerRegInstallment_CheckUpdateCMNDSDTTKNH(string oldInfo, string typeCheck, string idCardCode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@IDCardCode",idCardCode),
                    new SqlParameter("@TypeCheck",typeCheck),
                    new SqlParameter("@OldInfo",oldInfo)
                };
            var table = sql.ExecuteCommand("CustomerRegInstallment_CheckUpdateCMNDSDTTKNH", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() != "0")
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public ActionResult GetShopTheoVendor(string vendorCode)
        {
            DataTable tb = sql.ExecuteCommand("FRT_SP_LoadShopTheoVendor", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@vendor",vendorCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string CheckMaNVCompCustomerReg(string manv, string vendorCode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@MaNV",manv),
                    new SqlParameter("@VendorCode",vendorCode)
                };
            var table = sql.ExecuteCommand("CustomerRegInstallment_CheckMaNVVendor", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public string CancelFormDK_TraGopOnline(string idFormDK)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@IDFormDK",idFormDK),
                    new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                };
            var table = sql.ExecuteCommand("CancelFormDK_TraGopOnline", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() != "-1")
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }

        [HttpPost]
        /// <summary>POST: /Requests/GetOTPCode_TraGopOnline</summary>
        public ActionResult GetOTPCode_TraGopOnline(string idCardCode, string listSP, string p_ShopCode, int p_KyHan, string XML_SP_Base64)
        {
            string l_XML_SP = Encoding.UTF8.GetString(Convert.FromBase64String(XML_SP_Base64));
            var table = sql.ExecuteCommand("FRT_SP_LayOTT_TraGop", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@IDcardCode", idCardCode),
                new SqlParameter("@ListSP", listSP),
                new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                new SqlParameter("@ShopCode", p_ShopCode),
                new SqlParameter("@KyHan", p_KyHan),
                new SqlParameter("@XML_SP", l_XML_SP),
            });
            if (table != null && table.Rows.Count > 0 && table.Rows[0]["Result"].ToString() == "1" && table.Rows[0]["Is_API_PushOTP"].ToString() == "1")
            {
                string domain = System.Web.HttpContext.Current.Request.Url.Host;
                string phone = "84" + table.Rows[0]["SDT"].ToString().Substring(1, table.Rows[0]["SDT"].ToString().Length - 1);
                string sms = table.Rows[0]["SMS"].ToString();
                int num = -10000;
                string Account = "";
                if (domain.Contains("calllogoutside.fptshop.com.vn"))
                {
                    try
                    {
                        num = SendSMS_Infobip(phone, sms, _INFOBIP_USER_FRTBAOHANH, _INDOBIP_PASS_FRTBAOHANH, "FPTShop"); //INFOBIP
                        Account = this._INFOBIP_USER_FRTBAOHANH;
                    }
                    catch (Exception ex1)
                    {
                        Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex1.ToString());
                    }
                }
                sql.ExecuteWithoutResult("InsertSMS_Customer", CommandType.StoredProcedure, new SqlParameter[] {
                    new SqlParameter("@IDCardCode", idCardCode),
                    new SqlParameter("@SDT", table.Rows[0]["SDT"].ToString()),
                    new SqlParameter("@ContenSMS", sms),
                    new SqlParameter("@Num", num)
                });
            }
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            return jsonResult;
        }

        public ActionResult GetAll_OCRD(string vendorCode = "")
        {
            DataTable tb = sql.ExecuteCommand("FRT_SP_LoadThongTinKhachHang_NhomMua", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@Vendor",vendorCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [HttpPost]
        /// <summary>POST: /Requests/LuuThongTinDH_NhomMua</summary>
        public ActionResult LuuThongTinDH_NhomMua(IEnumerable<NhomMuaViewModel> NhomMuaViewModel, string otp)
        {
            JsonResult l_JsonResult = null;
            if (NhomMuaViewModel == null)
                return l_JsonResult;

            using (DataTable dt = new DataTable())
            {
                dt.Columns.Add("IDCardCode", typeof(int));
                dt.Columns.Add("cmnd", typeof(string));
                dt.Columns.Add("MaNV", typeof(string));
                dt.Columns.Add("VendorCode", typeof(int));
                dt.Columns.Add("IDGoc", typeof(int));
                dt.Columns.Add("MaSP", typeof(string));
                dt.Columns.Add("SL", typeof(int));
                dt.Columns.Add("MaShop", typeof(string));
                dt.Columns.Add("HinhThucGiaoHang", typeof(int));
                dt.Columns.Add("DiaChiGiaoHang ", typeof(string));
                dt.Columns.Add("NgayGiaoHang", typeof(DateTime));
                dt.Columns.Add("GhiChu", typeof(string));
                dt.Columns.Add("HoTen_NguoiNhanHang", typeof(string));
                dt.Columns.Add("CMND_NguoiNhanHang", typeof(string));
                dt.Columns.Add("DiaChiGiaoHang_NguoiNhanHang", typeof(string));
                dt.Columns.Add("SDT_NguoiNhanHang", typeof(string));
                dt.Columns.Add("ThTinThuMua_SoChTuThuMua", typeof(string));

                foreach (NhomMuaViewModel item in NhomMuaViewModel)
                {
                    dt.Rows.Add(
                        item.IDCardCode,
                        item.CMND,
                        item.MaNV,
                        item.VendorCode,
                        item.IDGoc,
                        item.MaSP,
                        item.SL,
                        item.MaShop,
                        item.HinhThucGiaoHang,
                        item.DiaChiGiaoHang,
                        DateTime.Now,
                        item.GhiChu,
                        item.HoTen_NguoiNhanHang,
                        item.CMND_NguoiNhanHang,
                        item.DiaChiGiaoHang_NguoiNhanHang,
                        item.SDT_NguoiNhanHang,
                        item.ThTinThuMua_SoChTuThuMua
                    );
                }
                var table = sql.ExecuteCommand("FRT_SP_LuuThongTinDH_NhomMua", CommandType.StoredProcedure, new SqlParameter[]
                {
                    new SqlParameter("@Table", dt),
                    new SqlParameter("@UserID", UserManager.CurrentUser == null ?  "" : UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@OTPCode", otp)
                });
                if (table != null && table.Rows.Count > 0)
                {
                    l_JsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    l_JsonResult.MaxJsonLength = int.MaxValue;
                }
            }
            return l_JsonResult;
        }

        public string CancelFormDKSingle_TraGopOnline(string idFormDK, string idFinalSP)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@IDFormDK",idFormDK),
                    new SqlParameter("@IDFinalSP",idFinalSP),
                    new SqlParameter("@UpdateBy",UserManager.CurrentUser.InsideCode)
                };
            var table = sql.ExecuteCommand("CancelFormDKSingle_TraGopOnline", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() != "-1")
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public ActionResult GetAllTinhThanh()
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("LoadTinhThanhPho", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [CompressCode]
        public ActionResult GetQuanHuyenCuaTinhThanh(string idTinhThanh)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("LoadQuanHuyen", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@TinhThanh",idTinhThanh)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult GetAllNganHang()
        {
            DataTable tb = sql.ExecuteCommand("LoadNganHang", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetChiNhanhNH(string idNH)
        {
            DataTable tb = sql.ExecuteCommand("LoadChiNhanhNH", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@IdNH",idNH)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string Check_CMND_Or_MaNV_Exist(string cmnd, string vendorCode, string maNV)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@CMND",cmnd),
                    new SqlParameter("@VendorCode",vendorCode),
                    new SqlParameter("@MaNV",maNV)
                };
            var table = sql.ExecuteCommand("CheckMaNVOrCMNDExistsOCRD", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return "1"; //ma nv
            }
            else if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "2")
            {
                return "2"; //cmnd
            }
            return string.Empty;
        }
        public ActionResult GetNhomKHTraGop()
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("GetNhomKHInstallment", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string CheckHTThanhToanVendor(string vendorCode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@VendorCode",vendorCode)
                };
            var table = sql.ExecuteCommand("CheckHTThanhToanVendors", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return "1"; //ma nv
            }
            return string.Empty;
        }
        public ActionResult GetMoiQuanHeVoiNguoiLL()
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("GetMoiLienHeVoiNguoiLL", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [HttpPost]
        /// <summary>POST: /Requests/GetOTPCode_TraGopOnline_NhomMua</summary>
        public ActionResult GetOTPCode_TraGopOnline_NhomMua(string idCardCodeDaiDien, string listIdCardCode, string p_ShopCode, string XML_SP_Base64)
        {
            string l_XML_SP = Encoding.UTF8.GetString(Convert.FromBase64String(XML_SP_Base64));
            var table = sql.ExecuteCommand("FRT_SP_LayOTT_TraGop_NhomMua", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@ListIdCardCode", listIdCardCode),
                new SqlParameter("@IdCardCodeNguoiDaiDien", idCardCodeDaiDien),
                new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode),
                new SqlParameter("@ShopCode", p_ShopCode),
                new SqlParameter("@XML_SP", l_XML_SP),
            });
            try
            {
                if (table != null && table.Rows.Count > 0 && table.Rows[0]["Web__SendOTP"].ToString() == "1")
                {
                    EmailSender sendMail = new EmailSender();
                    string Subject = "[Auto] F.Friends - OTP đơn hàng mua trả thẳng " + DateTime.Now.ToString("dd/MM/yyyy");
                    string Body = "FPTShop F.Friends xin gửi mã OTP <strong>" + table.Rows[0]["ChuoiXacNhan"].ToString() + "</strong> xác nhận mua hàng của Quý hội viên. Tổng đài miễn phí: 1800 6601 (chọn nhánh số 3). Xin cảm ơn.";
                    string To = table.Rows[0]["Email"].ToString();
                    string Cc = string.Empty;
                    string Bcc = "VietMXH@fpt.com.vn";
                    sendMail.SendMail(Subject, Body, To, Cc, Bcc);
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult SearchNhomMua(string soPhieuSDT)
        {
            DataTable tb = sql.ExecuteCommand("FRT_SP_LayNhomMuaTheoPhieuSDT", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@PhieuSDT",soPhieuSDT)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult Web_InstallCustInfo_Shop_GreatAgain_Check_SM_PSM(string p_ShopCode, string p_EmpCode)
        {
            SqlParameter[] l_SqlParameter =
            {
                new SqlParameter("@ShopCode", p_ShopCode),
                new SqlParameter("@EmpCode", p_EmpCode)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_Web_InstallCustInfo_Shop_GreatAgain_Check_SM_PSM", System.Data.CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        /// <summary>/Requests/InstallCustInfo__ConfirmReUpUQTN</summary>
        public ActionResult InstallCustInfo__ConfirmReUpUQTN(int p_IDCardCode)
        {
            SqlParameter[] l_SqlParameter = {
                                                new SqlParameter("@IDCardCode", p_IDCardCode),
                                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
                                            };
            DataTable l_DataTable = sql.ExecuteCommand("sp__InstallCustInfo__ConfirmReUpUQTN", System.Data.CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        /// <summary>/Requests/InstallCustInfo__CheckCIC</summary>
        public ActionResult InstallCustInfo__CheckCIC(int p_IDCardCode, string p_DeviceName)
        {
            SqlParameter[] l_SqlParameter = {
                                                new SqlParameter("@IDCardCode", p_IDCardCode),
                                                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                                                new SqlParameter("@DeviceName", p_DeviceName)
                                            };
            DataTable l_DataTable = sql.ExecuteCommand("sp__InstallCustInfo__CheckCIC", System.Data.CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null)
            {
                var jsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        //================== Tim theo SDT va CMND
        [HttpGet]
        public JsonResult tSearchByCMNDandPhone(string phone, string cmnd)
        {

            try
            {
                if (!Request.IsAjaxRequest())
                {
                    return null;
                }
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@CMND",cmnd),
                    new SqlParameter("@sdt",phone)
                };
                var table = sql.ExecuteCommand("FRT_SP_DSSanPhamKH_mobile", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController tSearchByCMNDandPhone", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult LayThongTinKHTraGopThanhToanNo(string maDN, string maNV, string cmnd)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("sp_CongNo_KhachHang_Search_Map_Import", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@MaDN",maDN),
                new SqlParameter("@MaNV",maNV),
                new SqlParameter("@CMND",cmnd)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult InsertOrUpdateThanhToanNoTheoKyTraGop(IEnumerable<ThanhToanNoTheoKy> ThanhToanNoModel)
        {
            if (ThanhToanNoModel == null)
                return null;

            using (DataTable l_DataTable = new DataTable())
            {
                l_DataTable.Columns.Add("IDCardCode", typeof(string));
                l_DataTable.Columns.Add("SoTienThanhToan", typeof(string));
                l_DataTable.Columns.Add("GhiChu", typeof(string));
                l_DataTable.Columns.Add("SoSO", typeof(string));
                //▼	Edit - VietMXH - 08/01/2018 - Subsidy==================================================
                l_DataTable.Columns.Add("LoaiTruyThu", typeof(string));
                l_DataTable.Columns.Add("TinhThuTien", typeof(string));
                l_DataTable.Columns.Add("NgayGiaoDich", typeof(string));
                //▲	Edit - VietMXH - 08/01/2018 - Subsidy==================================================

                //▼	Edit - VietMXH - 18/09/2018 - Ngân hàng tiền về==================================================
                l_DataTable.Columns.Add("MaNganHang", typeof(string));
                //▲	Edit - VietMXH - 18/09/2018 - Ngân hàng tiền về==================================================

                foreach (ThanhToanNoTheoKy l_ThanhToanNoTheoKy in ThanhToanNoModel)
                {
                    l_DataTable.Rows.Add(
                        l_ThanhToanNoTheoKy.IDCardCode,
                        l_ThanhToanNoTheoKy.SoTienThanhToan,
                        l_ThanhToanNoTheoKy.GhiChu,
                        l_ThanhToanNoTheoKy.SoSO,
                        //▼	Edit - VietMXH - 08/01/2018 - Subsidy==================================================
                        l_ThanhToanNoTheoKy.LoaiTruyThu,
                        l_ThanhToanNoTheoKy.TinhThuTien,
                        l_ThanhToanNoTheoKy.NgayGiaoDich,
                        //▲	Edit - VietMXH - 08/01/2018 - Subsidy==================================================                

                        //▼	Edit - VietMXH - 18/09/2018 - Ngân hàng tiền về==================================================
                        l_ThanhToanNoTheoKy.MaNganHang
                        //▲	Edit - VietMXH - 18/09/2018 - Ngân hàng tiền về==================================================

                    );
                }

                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@TableType_CongNo_Import", l_DataTable),
                    new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode )
                };

                var l_CongNo_Import_Insert_Result = sql.ExecuteCommand("sp_CongNo_Import_Insert ", System.Data.CommandType.StoredProcedure, param);

                if (l_CongNo_Import_Insert_Result != null && l_CongNo_Import_Insert_Result.Rows.Count > 0)
                {
                    var jsonResult = Json(l_CongNo_Import_Insert_Result.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }
        public ActionResult LayThongTinThanhToanNoTheoKy(string maDN, string kyThuNo, string cmnd, string sdt)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("sp_CongNo_KhachHang_Search", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@VendorCode",maDN),
                new SqlParameter("@KyThuNo",kyThuNo),
                new SqlParameter("@CMND",cmnd),
                new SqlParameter("@SDT",sdt)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult DuyetThanhToanNoTheoKy(string listIdCardCode)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("sp_CongNo_Import_Update_Approved", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IDCardCode_String",listIdCardCode),
                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult ChiTietDonHangPhaiThuNoTheoKy(string maDN, string maNV, string cmnd, string kyThuNo)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("FRT_LietKeDonHangPhaiThuNoTrongKyCuaKH", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@VendorCode",maDN),
                new SqlParameter("@MaNV",maNV),
                new SqlParameter("@CMND",cmnd),
                new SqlParameter("@KyThuNo",kyThuNo)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult LayThongTinQLNoDN(string maDN, string kyThuNo, string noQuaHan)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("FRT_QuanLyNoTheoDNTraGop", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@VendorCode",maDN),
                new SqlParameter("@KyThuNo",kyThuNo),
                new SqlParameter("@NoQuaHan",noQuaHan)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult ChiTietNoCuaDNQuaCacKy(string maDN)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("FRT_LietKeNoCuaDNQuaCacKy", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@VendorCode",maDN)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string CheckHTXacNhanGiayGTDN(string cmnd, string vendorCode, string maNV)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@VendorCode",vendorCode),
                    new SqlParameter("@MaNV",maNV),
                    new SqlParameter("@CMND",cmnd)
                };
            var table = sql.ExecuteCommand("CheckHinhThucXacNhanDN", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public ActionResult GetNhomKHManagerFF(long vendorCode)
        {
            DataTable tb = sql.ExecuteCommand("GetNhomKHManagerFriend", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@VendorCode",vendorCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //====================== HIỀN.ĐOÀN 23.07.2016 Kiểm tra user có đơn hàng chưa hoàn tất
        [HttpGet]
        public JsonResult CheckDonHangChuaHoanTat(string VendorCode, string MaNVKH, string CMND)
        {
            try
            {
                if (!Request.IsAjaxRequest())
                {
                    return null;
                }
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@VendorCode",VendorCode),
                    new SqlParameter("@MaNVKH",MaNVKH),
                    new SqlParameter("@CMND",CMND)
                };
                var table = sql.ExecuteCommand("FRT_SP_CheckDonHangChuaHoanTat", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else
                {
                    return null;
                }

            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController CheckDonHangChuaHoanTat", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult GetChiNhanhCuaDN(string maDN)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("GetChiNhanhDN", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@VendorCode",maDN)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult InfoVendorInstallmentOnline()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            //if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            //{
            //    TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
            //    return RedirectToAction("Index", "Home");
            //}
            return View();
        }
        public ActionResult GetCreateByInstallment()
        {
            DataTable tb = sql.ExecuteCommand("GetEmpByJobtitleCreateInstallment", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetThongTinKHDoanhNghiep(string cmnd, string vendorCode, string maNV)
        {
            DataTable tb = sql.ExecuteCommand("LoadThongTinKHDoanhNghiep", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@VendorCode",vendorCode),
                new SqlParameter("@MaNV",maNV),
                new SqlParameter("@CMND",cmnd)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetHinhThucGHTraGop()
        {
            DataTable tb = sql.ExecuteCommand("GetHinhThucGiaoHang", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult InsertOrUpdateDonHangDoanhNghiep(IEnumerable<DonHangDoanhNghiep> DonHangDNFF)
        {
            if (DonHangDNFF == null)
                return null;

            using (DataTable dt = new DataTable())
            {
                dt.Columns.Add("IdCardCode", typeof(string));
                dt.Columns.Add("MaShop", typeof(string));
                dt.Columns.Add("MaSP", typeof(string));
                dt.Columns.Add("SoLuong", typeof(string));
                dt.Columns.Add("ThanhTien", typeof(string));
                dt.Columns.Add("SoTienTraTruoc", typeof(string));
                dt.Columns.Add("KiHan", typeof(string));
                dt.Columns.Add("GhiChu", typeof(string));
                dt.Columns.Add("HinhThucGH", typeof(string));
                dt.Columns.Add("DiaChiGH", typeof(string));

                foreach (DonHangDoanhNghiep item in DonHangDNFF)
                {
                    dt.Rows.Add(
                        item.IdCardCode,
                        item.MaShop,
                        item.MaSP,
                        item.SoLuong,
                        item.ThanhTien,
                        item.SoTienTraTruoc,
                        item.KiHan,
                        item.GhiChu,
                        item.HinhThucGH,
                        item.DiaChiGH
                    );
                }
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@Table", dt),
                    new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode )
                };
                var table = sql.ExecuteCommand("FRT_SP_InsertOrUpdateDoanHangDoanhNghiepFF", System.Data.CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }
        public string CheckTonTaiDHDoanhNghiepFF(string listIdCardCode)
        {
            if (!Request.IsAjaxRequest())
                return null;
            DataTable tb = sql.ExecuteCommand("CheckExistDHDoanhNghiepFF", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@ListIdCardCode",listIdCardCode)
            });
            if (tb != null && tb.Rows.Count > 0 && tb.Rows[0][0].ToString() != "")
            {
                return tb.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public ActionResult SearchDonHangDoanhNghiepFF(string VendorCode, string MaNV, string CMND, string SDT, string NguoiTao, string timeCreateStart, string timeCreateEnd)
        {
            try
            {
                if (!Request.IsAjaxRequest())
                {
                    return RedirectToAction("ReportingVendorInstallment", "Report");
                }
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@VendorCode",VendorCode),
                    new SqlParameter("@MaNV",MaNV),
                    new SqlParameter("@CMND",CMND),
                    new SqlParameter("@SDT",SDT),
                    new SqlParameter("@NguoiTao", NguoiTao),
                    new SqlParameter("@TuNgay", timeCreateStart),
                    new SqlParameter("@DenNgay", timeCreateEnd)
                };
                DataTable table = sql.ExecuteCommand("SearchDonHangDoanhNghiepFF", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else
                    return null;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("ReportController ReportingVendorInstallment", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult GetAllProducts_Installment_MayTinhXachTay(int type)
        {
            DataTable tb = sql.ExecuteCommand("FRT_SP_Listitem_MayTinhXachTay", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@type",type)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string HuyDonHangDoahNghiepFF(int idCardCode)
        {
            DataTable tb = sql.ExecuteCommand("HuyDonHangDoanhNghiepFF", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IdCardCode",idCardCode),
                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                return "1";
            }
            return string.Empty;
        }

        public ActionResult CheckAnhCanUpCuaKHFFriends(long idCardCode)
        {
            DataTable tb = sql.ExecuteCommand("CheckAnhCanUpFFriends", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IdCardCode",idCardCode)
            });
            if (tb != null && tb.Rows.Count > 0 && tb.Rows[0][0].ToString() == "2")
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult UploadAnhChungTuFF(FormCollection form)
        {
            string fName = string.Empty;
            string listFName = string.Empty;

            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    fName = fileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
            }

            var strdetails = form["Details"].ToString();
            var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
            string idCardCode = details[0].idCardCode;
            string name_PDK_MTCMND = details[0].nameFile_PDK_MTCMND;
            string name_PDK_MSCMND = details[0].nameFile_PDK_MSCMND;
            string name_UQTN_MSCMND = details[0].nameFile_UQTN_MSCMND;
            string name_TDCK = details[0].nameFile_TDCK;
            string name_CMNDMT = details[0].nameFile_CMNDMT;
            string name_CMNDMS = details[0].nameFile_CMNDMS;
            DataTable tb = sql.ExecuteCommand("UploadChungTuHinhAnh", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IdCardCode",idCardCode),
                new SqlParameter("@Link_PDK_MTCMND",name_PDK_MTCMND != null && name_PDK_MTCMND != "" ? name_PDK_MTCMND : null),
                new SqlParameter("@Link_PDK_MSCMND",name_PDK_MSCMND != null && name_PDK_MSCMND != "" ? name_PDK_MSCMND : null),
                new SqlParameter("@Link_UQTN_MSCMND",name_UQTN_MSCMND != null && name_UQTN_MSCMND != "" ? name_UQTN_MSCMND : null),
                new SqlParameter("@Link_TDCK",name_TDCK != null && name_TDCK != "" ? name_TDCK : null),
                new SqlParameter("@Link_CMNDMT",name_CMNDMT != null && name_CMNDMT != "" ? name_CMNDMT : null),
                new SqlParameter("@Link_CMNDMS",name_CMNDMS != null && name_CMNDMS != "" ? name_CMNDMS : null),
                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }

            return Json(string.Empty, JsonRequestBehavior.AllowGet);
        }

        public ActionResult LayNganHangTheoDN(string maDN, string chiNhanhDN)
        {
            DataTable tb = sql.ExecuteCommand("GetNganHangTheoVendor_ChinhanhDN", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@MaDN",maDN),
                new SqlParameter("@ChiNhanhDN",chiNhanhDN)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult LayChiNhanhNHTheoDN(string maDN, string chiNhanhDN, string idBank)
        {
            DataTable tb = sql.ExecuteCommand("LoadChiNhanhNHTheoDN", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@MaDN",maDN),
                new SqlParameter("@ChiNhanhDN",chiNhanhDN),
                new SqlParameter("@IdBank",idBank)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult CheckLenght_SoTKNH(string idBank, string lenght, string soTKNH)
        {
            DataTable tb = sql.ExecuteCommand("CheckLenght_STKNH", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IdBank",idBank),
                new SqlParameter("@Len",lenght),
                new SqlParameter("@SoTKNH",soTKNH)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult CancelRequest_DuyetHinhAnhChungTu(FormCollection form)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            int requestId = form["RequestId"].EParseToInt();
            try
            {
                var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
                request.Status = Key.StatusRequest.Cancel;
                request.TimeFinish = DateTime.Now;
                request.TimeClose = DateTime.Now;
                request.UpdateBy = UserManager.CurrentUser.InsideCode;
                var step = db.RequestSteps.FirstOrDefault(
                                x => x.RequestId == request.Id
                                && x.Status == Key.Status.Available
                                && x.StepNo == request.StepNo
                                && x.TimeEnd == null);
                if (step != null)
                {
                    step.TimeEnd = DateTime.Now;
                    step.Assigner = UserManager.CurrentUser.InsideCode;
                }
                db.SaveChanges();
                TempData["Message"] = "Hủy CallLog thành công";
                return RedirectToAction("Index", "Home");
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController Detail(long?Id)", ex.ToString());
                TempData["Message"] = "Lỗi hủy CallLog! " + ex.Message;
                return RedirectToAction("Index", "Home");
            }
        }
        [HttpGet]
        public string GetSearch_SP(string keyWord)
        {
            var l_objSearch = LuceneService<ProductSearchItem>.Current;
            var l_RsSearch = l_objSearch.Search(keyWord);
            return JsonConvert.SerializeObject(l_RsSearch);
        }
        public string ReLoadLoadDataMaSP()
        {
            LuceneHelper.ReLoadLoadDataMaSP();
            return "OK";
        }
        public ActionResult GetChiTietPhieuDK(string idFormDK)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@IDFormDK",idFormDK)
                };
            var table = sql.ExecuteCommand("Get_ChiTietIDFormDK", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string GetOTP(string sdt)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@SDT",sdt)
                };
            var table = sql.ExecuteCommand("GetOTP", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return "Chưa sinh mã OTP";
        }
        public string Check_NhanVienEcom()
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
                };
            var table = sql.ExecuteCommand("Check_NhanVienECom", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return "";
        }
        public string Check_ThayDoiSDT(string idCardCode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@IDCardCode", idCardCode)
                };
            var table = sql.ExecuteCommand("Check_ThayDoiSDT", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return "";
        }
        public ActionResult UploadAnhXacNhanMuaHang(FormCollection form)
        {
            string fName = string.Empty;
            string listFName = string.Empty;
            string rootDir;
            string domain = System.Web.HttpContext.Current.Request.Url.Host;
            if (domain.Contains("calllogoutside.fptshop.com.vn"))
                rootDir = "POS_TraGop/";
            else
                rootDir = "Beta/";

            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    fName = fileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                        // save file to SFTP
                        string pathUpLoad = rootDir + fName;
                        FtpClient ftpClient = new FtpClient("118.69.201.35", "posupload", "posupload@frt123");

                        ftpClient.f_FTP_Upload(path, pathUpLoad);

                        ftpClient.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
            }
            var strdetails = form["Details"].ToString();
            var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
            string idFormDK = details[0].idFormDK;
            string nameFile_PhieuXNMH = details[0].nameFile_PhieuXNMH;
            string nameFile_CMNDMS_ImeiMay = details[0].nameFile_CMNDMSImei;

            DataTable tb = sql.ExecuteCommand("UpLoadAnhXacNhanMuaHang", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IDFormDK",idFormDK),
                new SqlParameter("@NameFile_PhieuXNMH",nameFile_PhieuXNMH != null && nameFile_PhieuXNMH != "" ? nameFile_PhieuXNMH : null),
                new SqlParameter("@NameFile_CMNDMS_ImeiMay",nameFile_CMNDMS_ImeiMay != null && nameFile_CMNDMS_ImeiMay != "" ? nameFile_CMNDMS_ImeiMay : null),
                new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return Json(string.Empty, JsonRequestBehavior.AllowGet);
        }

        public ActionResult CheckUpLoadAnhXacNhanMuaHang(string idformDK)
        {
            DataTable tb = sql.ExecuteCommand("CheckUploadAnhXacNhanMuaHang", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IDFormDK",idformDK)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetCacKyHanCuaDN(string vendorCode)
        {
            DataTable tb = sql.ExecuteCommand("GetKyHan_DoanhNghiep", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@VendorCode",vendorCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        private int SendSMS_Infobip(string sPhone, string sContent, string sUSER, string sPASS, string sBrandName)
        {
            XmlDocument xml = new XmlDocument();

            string s_XML = @"<SMS>";
            try
            {
                s_XML += "<authentication>";
                s_XML += "<username>" + sUSER + "</username>";
                s_XML += "<password>" + sPASS + "</password>";
                s_XML += "</authentication>";
                s_XML += "<message>";
                s_XML += "<sender>" + sBrandName + "</sender>";
                s_XML += "<text>" + sContent + "</text>";
                s_XML += "<type>longsms</type>";
                s_XML += "<recipients>";
                s_XML += "<gsm>" + sPhone + "</gsm>";
                s_XML += "</recipients>";
                s_XML += "</message>";
                s_XML += "</SMS>";
                //txtInfo.Text += " <br /> XML:  " + s_XML;
                xml.LoadXml(s_XML);
            }
            catch (Exception ex)
            {
                string sLog = "Phone: " + sPhone + ", Content: " + sContent + " <br /> XML: " + s_XML + "<br /> " + s_XML;
                Logger.WriteLogError("SendSMS_Infobip", ex.ToString());
            }


            //txtInfo.Text += " <br /> Load Parsing XML:  " + s_XML;


            InfoBipResponse objResponse = new InfoBipResponse();
            objResponse = PostXMLTransaction(uri, xml);

            return objResponse.Status;
        }
        public static InfoBipResponse PostXMLTransaction(string v_strURL, XmlDocument v_objXMLDoc)
        {
            //Declare XMLResponse document
            XmlDocument XMLResponse = null;

            //Declare an HTTP-specific implementation of the WebRequest class.
            HttpWebRequest objHttpWebRequest;

            //Declare an HTTP-specific implementation of the WebResponse class
            HttpWebResponse objHttpWebResponse = null;

            //Declare a generic view of a sequence of bytes
            Stream objRequestStream = null;
            Stream objResponseStream = null;

            //Declare XMLReader
            XmlTextReader objXMLReader;

            //Creates an HttpWebRequest for the specified URL.
            objHttpWebRequest = (HttpWebRequest)WebRequest.Create(v_strURL);

            try
            {
                //---------- Start HttpRequest 

                //Set HttpWebRequest properties
                byte[] bytes;
                bytes = System.Text.Encoding.ASCII.GetBytes(v_objXMLDoc.InnerXml);
                objHttpWebRequest.Method = "POST";
                objHttpWebRequest.ContentLength = bytes.Length;
                objHttpWebRequest.ContentType = "text/xml; encoding='utf-8'";

                //Get Stream object 
                objRequestStream = objHttpWebRequest.GetRequestStream();

                //Writes a sequence of bytes to the current stream 
                objRequestStream.Write(bytes, 0, bytes.Length);

                //Close stream
                objRequestStream.Close();

                //---------- End HttpRequest

                //Sends the HttpWebRequest, and waits for a response.
                objHttpWebResponse = (HttpWebResponse)objHttpWebRequest.GetResponse();

                //---------- Start HttpResponse
                if (objHttpWebResponse.StatusCode == HttpStatusCode.OK)
                {
                    //Get response stream 
                    objResponseStream = objHttpWebResponse.GetResponseStream();

                    //Load response stream into XMLReader
                    objXMLReader = new XmlTextReader(objResponseStream);

                    //Declare XMLDocument
                    XmlDocument xmldoc = new XmlDocument();
                    xmldoc.Load(objXMLReader);

                    //Set XMLResponse object returned from XMLReader
                    XMLResponse = xmldoc;

                    //Close XMLReader
                    objXMLReader.Close();
                }

                //Close HttpWebResponse
                objHttpWebResponse.Close();
            }
            catch (WebException we)
            {
                //TODO: Add custom exception handling
                throw new Exception(we.Message);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                //Close connections
                objRequestStream.Close();
                objResponseStream.Close();
                objHttpWebResponse.Close();

                //Release objects
                objXMLReader = null;
                objRequestStream = null;
                objResponseStream = null;
                objHttpWebResponse = null;
                objHttpWebRequest = null;
            }

            XmlDocument xm2 = new XmlDocument();
            xm2.LoadXml(XMLResponse.InnerXml);

            InfoBipResponse obj = new InfoBipResponse();

            XmlNodeList parentNode = xm2.GetElementsByTagName("result");
            foreach (XmlNode childrenNode in parentNode)
            {
                foreach (XmlNode childrenNode_2 in parentNode)
                {
                    obj.Status = int.Parse(childrenNode_2.ChildNodes[0].InnerText); //status
                    obj.MessageId = childrenNode_2.ChildNodes[1].InnerText; //messageid
                    obj.Destination = childrenNode_2.ChildNodes[2].InnerText; //destination
                }
            }

            //Return
            return obj;
        }
        public ActionResult UpdatedIMEIFormInXacNhanMuaHang(IEnumerable<IMEI_FinalSanPham> finalSanPham)
        {
            if (finalSanPham == null)
                return null;

            using (DataTable dt = new DataTable())
            {
                dt.Columns.Add("ID", typeof(long));
                dt.Columns.Add("IMEI", typeof(string));
                dt.Columns.Add("SoPOSamSung", typeof(string));

                foreach (IMEI_FinalSanPham item in finalSanPham)
                {
                    dt.Rows.Add(
                        item.ID,
                        item.IMEI,
                        item.SoPOSamSung
                    );
                }
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@Table", dt),
                    new SqlParameter("@UserID", UserManager.CurrentUser.InsideCode )
                };
                var table = sql.ExecuteCommand("UpdateIMEI_FinalSanPham ", System.Data.CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            return null;
        }

        public ActionResult InfoCustInstallmentOnline_CheckHinhThucTraGopDN(int p__VendCode)
        {
            DataTable l__DataTable = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_CheckHinhThucTraGopDN", CommandType.StoredProcedure, new SqlParameter[] { new SqlParameter("@VendCode", p__VendCode) });
            if (l__DataTable != null && l__DataTable.Rows.Count > 0)
            {
                var jsonResult = Json(l__DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [HttpGet]
        public ActionResult Check_Customer_Exits(string i)
        {
            if (!Request.IsAjaxRequest())
            {
                return null;
            }
            DataTable tb = sql.ExecuteCommand("OCRD_Check_Customer_By_CardCode", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@CardCode", i)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult UQTNShinhanBank(int a = 0, int b = 0, int c = 0)
        {
            if (a != 0 && b != 0 && c != 0)
            {
                DataTable tb = sql.ExecuteCommand("Get_Info_Customer_FormPrint_SS", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@CardCode", a),
                new SqlParameter("@VendorCode", b),
                new SqlParameter("@Bank", c)
            });
                if (tb != null && tb.Rows.Count > 0)
                {
                    ViewBag.CusName = tb.Rows[0]["CardName"].ToString();
                    ViewBag.CMND = tb.Rows[0]["CMND"].ToString();
                    ViewBag.SoTKNH = tb.Rows[0]["SoTKNH"].ToString();
                    ViewBag.NgayCapCMND = tb.Rows[0]["NgayCapCMND"].ToString();
                    ViewBag.NoiCapCMND = tb.Rows[0]["NoiCapCMND"].ToString();
                    ViewBag.DiaChiHoKhau = tb.Rows[0]["DiaChiHoKhau"].ToString();
                    ViewBag.SDT = tb.Rows[0]["SDT"].ToString();
                    ViewBag.Email = tb.Rows[0]["Email"].ToString();
                    ViewBag.VendorName = tb.Rows[0]["VendorName"].ToString();
                }
                else
                {
                    ViewBag.CusName = "";
                    ViewBag.CMND = "";
                    ViewBag.SoTKNH = "";
                }
            }
            return View();
        }
        public ActionResult UQTNVietcombank(int a = 0, int b = 0, int c = 0)
        {
            if (a != 0 && b != 0 && c != 0)
            {
                DataTable tb = sql.ExecuteCommand("Get_Info_Customer_FormPrint_SS", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@CardCode", a),
                new SqlParameter("@VendorCode", b),
                new SqlParameter("@Bank", c)
            });
                if (tb != null && tb.Rows.Count > 0)
                {
                    ViewBag.CusName = tb.Rows[0]["CardName"].ToString();
                    ViewBag.CMND = tb.Rows[0]["CMND"].ToString();
                    ViewBag.SoTKNH = tb.Rows[0]["SoTKNH"].ToString().Substring(0, tb.Rows[0]["SoTKNH"].ToString().Length / 2);
                    ViewBag.SoTKNH2 = tb.Rows[0]["SoTKNH"].ToString().Substring(tb.Rows[0]["SoTKNH"].ToString().Length / 2, tb.Rows[0]["SoTKNH"].ToString().Length - (tb.Rows[0]["SoTKNH"].ToString().Length / 2));
                    ViewBag.NgayCapCMND = tb.Rows[0]["NgayCapCMND"].ToString();
                    ViewBag.NoiCapCMND = tb.Rows[0]["NoiCapCMND"].ToString();
                    ViewBag.DiaChiTamTru = tb.Rows[0]["DiaChiTamTru"].ToString();
                    ViewBag.SDT = tb.Rows[0]["SDT"].ToString();
                    ViewBag.Email = tb.Rows[0]["Email"].ToString();
                    ViewBag.VendorName = tb.Rows[0]["VendorName"].ToString();
                    ViewBag.MaNV_KH = tb.Rows[0]["MaNV_KH"].ToString().Substring(0, tb.Rows[0]["MaNV_KH"].ToString().Length / 2); ;
                    ViewBag.MaNV_KH2 = tb.Rows[0]["MaNV_KH"].ToString().Substring(tb.Rows[0]["MaNV_KH"].ToString().Length / 2, tb.Rows[0]["MaNV_KH"].ToString().Length - (tb.Rows[0]["MaNV_KH"].ToString().Length / 2));
                    ViewBag.BankName = tb.Rows[0]["BankName"].ToString();

                    if (tb.Rows[0]["DNSAMSUNG"].ToString() == "SS") //-- SAMSUNG thực: 2176, 1998, Beta: 20157
                    {
                        ViewBag.SoTKGhi = "082100";
                        ViewBag.SoTKGhi2 = "0142555";
                        ViewBag.TaiNH = "VCB CN Thái Nguyên";
                    }
                    else
                    {
                        ViewBag.SoTKGhi = "001100";
                        ViewBag.SoTKGhi2 = "4265608";
                        ViewBag.TaiNH = "Sở Giao Dịch Hà Nội";
                    }
                }
                else
                {
                    ViewBag.CusName = "";
                    ViewBag.CMND = "";
                    ViewBag.SoTKNH = "";
                    ViewBag.SoTKNH2 = "";
                    ViewBag.NgayCapCMND = "";
                    ViewBag.NoiCapCMND = "";
                    ViewBag.DiaChiTamTru = "";
                    ViewBag.SDT = "";
                    ViewBag.Email = "";
                    ViewBag.VendorName = "";
                    ViewBag.MaNV_KH = "";
                    ViewBag.MaNV_KH2 = "";
                    ViewBag.BankName = "";
                    ViewBag.SoTKGhi = "";
                    ViewBag.TaiNH = "";
                }
            }
            return View();
        }

        public ActionResult GetVendorSearch(string keyWord)
        {
            DataTable tb = sql.ExecuteCommand("GetSearchVendor", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@KeySearch",keyWord)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string CheckEmailExist(string email, string vendorCode)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@Email",email),
                    new SqlParameter("@VendorCode",vendorCode)
                };
            var table = sql.ExecuteCommand("CheckExistEmail", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        public string CheckIDFormDK_SangPOS(string idFormDK)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@IDFormDK",idFormDK)
                };
            var table = sql.ExecuteCommand("CheckIDFormDK_SangPOS", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }
        [HttpPost]
        public ActionResult SaveUploadedFileTraGopSinhVien(string requestID, string typeFile)
        {
            bool isSavedSuccessfully = true;
            string fName = string.Empty;
            List<string> myCollection = new List<string>();
            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    //Save file content goes here

                    fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                        long requestId = requestID.EParseToLong();
                        var requestdetails = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId);
                        if (requestdetails != null)
                        {
                            if (typeFile == "1")
                                requestdetails.Property16 = Keyword.GetFolderFileAttach() + fName;
                            else if (typeFile == "2")
                                requestdetails.Property17 = Keyword.GetFolderFileAttach() + fName;

                            db.SaveChanges();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                isSavedSuccessfully = false;
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController SaveUploadFile()", ex.ToString());
            }
            if (isSavedSuccessfully)
            {
                return Json(new { Message = Keyword.GetFolderFileAttach() + fName, error = 0, typeFile = typeFile }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
            }

        }
        public ActionResult GetHinhThucMuaHangDN(string vendorCode)
        {
            DataTable tb = sql.ExecuteCommand("LoadHinhThucMuaHangDN", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@VendorCode",vendorCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string CheckAssigerStep(int stepNo, long requestID)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@StepNo",stepNo),
                    new SqlParameter("@RequestID",requestID),
                    new SqlParameter("@UserCode",UserManager.CurrentUser.InsideCode)
                };
            var table = sql.ExecuteCommand("CheckAssignerStepNo", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                return table.Rows[0][0].ToString();
            }
            return string.Empty;
        }

        public ActionResult GetSearchEmployees(string keySearch)
        {
            DataTable tb = sql.ExecuteCommand("GetSearchEmployees", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@KeySearch",keySearch)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult UploadHA_HoaDonSS(FormCollection form)
        {
            string fName = string.Empty;

            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    fName = fileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);

                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
            }
            var strdetails = form["Details"].ToString();
            var details = JsonConvert.DeserializeObject<dynamic>(strdetails);
            string idFormDK = details[0].idFormDK;
            string nameFile_HoaDonSS = details[0].nameFile_HoaDonSS;

            DataTable tb = sql.ExecuteCommand("UploadHA_HoaDonSS", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IDFormDK",idFormDK),
                new SqlParameter("@FileName_HAHoaDon",nameFile_HoaDonSS != null && nameFile_HoaDonSS != "" ? nameFile_HoaDonSS : null),
                new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return Json(string.Empty, JsonRequestBehavior.AllowGet);
        }
        public ActionResult CheckUpLoadAnhHoaDonSS(string idformDK)
        {
            DataTable tb = sql.ExecuteCommand("CheckHAHoaDonSS", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IDFormDK",idformDK)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult sp_CallLogSaoKe_LoadDoanhNghiep(string MaDN)
        {
            DataTable tb = sql.ExecuteCommand("sp_CallLogSaoKe_LoadDoanhNghiep", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@MaDN",MaDN)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        /// <summary>GET: /Requests/CallLogSaoKe_CheckNgayChiLuongThucTe</summary>
        public ActionResult CallLogSaoKe_CheckNgayChiLuongThucTe(string ReqId, string NgayChiLuongThucTe)
        {
            DataTable tb = sql.ExecuteCommand("sp_CallLogSaoKe_CheckNgayChiLuongThucTe", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@ReqId", ReqId),
                new SqlParameter("@NgayChiLuongThucTe", NgayChiLuongThucTe),
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string CheckUpdateCardName_DNNuocNgoai(long idCardCode)
        {
            DataTable tb = sql.ExecuteCommand("CheckUpdateCardName_DN_NuocNgoai", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@IdCardCode",idCardCode)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                return "1";
            }
            return null;
        }

        //▼ Add - TrungNC3 - 11-10-2017 - IN ỐP LƯNG
        public ActionResult SaveUploadedFileInOpLung(string requestID, string typeFile)
        {
            bool isSavedSuccessfully = true;
            string fName = string.Empty;
            List<string> myCollection = new List<string>();
            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    //Save file content goes here

                    fName = UserManager.CurrentUser.InsideCode + DateTime.Now.ToString("yyyyMMddHHmmss") + file.FileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                        // Save file attach fo database
                        long requestId = requestID.EParseToLong();
                        var requestdetails = db.RequestDetails.FirstOrDefault(x => x.RequestId == requestId);
                        if (requestdetails != null)
                        {
                            if (typeFile == "1")
                                requestdetails.Property1 = Keyword.GetFolderFileAttach() + fName;
                            else if (typeFile == "2")
                                requestdetails.Property2 = Keyword.GetFolderFileAttach() + fName;

                            db.SaveChanges();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                isSavedSuccessfully = false;
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController SaveUploadFile()", ex.ToString());
            }
            if (isSavedSuccessfully)
            {
                return Json(new { Message = Keyword.GetFolderFileAttach() + fName, error = 0, typeFile = typeFile }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
            }
        }
        //▲ Add - TrungNC3 - 11-10-2017 - IN ỐP LƯNG

        //▼ Add - TrungNC3 - 08/11/2017 - Hoàn tiền khách hàng
        public ActionResult GetCusInfoByCMND(string CMND)
        {
            DataTable tb = sql.ExecuteCommand("sp_HoanTienKH_LayThongTinKhachHang_TheoCMND", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@CMND",CMND)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult HoanTienKHLayNganHang()
        {
            DataTable tb = sql.ExecuteCommand("sp_HoanTienKH_LayNganHang", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult HoanTienKHLayChiNhanhNganHang()
        {
            DataTable tb = sql.ExecuteCommand("sp_HoanTienKH_LayChiNhanhNganHang", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                var jsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        [HttpGet]
        public ActionResult CallLogCustRefund()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            //if (UserManager.CheckPermisionMenu(Request.RawUrl) != true)
            //{
            //    return RedirectToAction("Index", "Home");
            //}
            string empDetail = string.Empty;
            DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
            if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
            {
                empDetail += " - " + tableEmpDetail.Rows[0]["Region"];
                empDetail += " - " + tableEmpDetail.Rows[0]["PlaceToWork"];
                ViewBag.Shop = empDetail;
            }
            ViewBag.TimeOut = Session.Timeout;
            return View(new Request());
        }
        //▼ Edit - TrongNM - 07/06/2018 - F.F Gach No - Loai149 - View
        [HttpGet]
        public ActionResult FFriendReduce()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            string empDetail = string.Empty;
            DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
            if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
            {
                empDetail += " - " + tableEmpDetail.Rows[0]["Region"];
                empDetail += " - " + tableEmpDetail.Rows[0]["PlaceToWork"];
                ViewBag.Shop = empDetail;
            }
            ViewBag.TimeOut = Session.Timeout;
            return View(new Request());
        }
        //▲ Edit - TrongNM - 07/06/2018 - F.F Gach No - Loai149 - view
        //▼ Edit - TrongNM - 18/03/2019 - Chi phí đối tác F.Friends - Loai 156 - View
        [HttpGet]
        public ActionResult ChiPhiFF()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            string empDetail = string.Empty;
            DataTable tableEmpDetail = new EmployeeDAL().GetDetail(UserManager.CurrentUser.InsideCode);
            if (tableEmpDetail != null && tableEmpDetail.Rows.Count > 0)
            {
                empDetail += " - " + tableEmpDetail.Rows[0]["Region"];
                empDetail += " - " + tableEmpDetail.Rows[0]["PlaceToWork"];
                ViewBag.Shop = empDetail;
            }
            ViewBag.TimeOut = Session.Timeout;
            return View(new Request());
        }
        //▲ Edit - TrongNM - 18/03/2019 - Chi phí đối tác F.Friends - Loai 156 - View
        [HttpPost, ValidateAntiForgeryToken, ValidateInput(false)]
        public ActionResult CallLogCustRefund(Request request, FormCollection form)
        {
            if (ModelState.IsValid)
            {
                if (UserManager.CurrentUser == null)
                    return Redirect("/Users/Login?u=" + Request.RawUrl);
                Dictionary<string, Request> requestDics = new Dictionary<string, Request>();
                try
                {
                    #region Info
                    string cc = Convert.ToString(form["Cc"]);
                    string sender = Convert.ToString(form["sender"]);
                    string message = Convert.ToString(form["Message"]);

                    DateTime dateFrom = DateTime.Parse(form["dateFrom"].ToString());
                    DateTime dateTo = DateTime.Parse(form["dateTo"].ToString());
                    var timeSend = TimeSpan.Parse(form["timeSend"].ToString());
                    var schedule = form["schedule"];
                    var scheduleTypeData = form["scheduleTypeData"];

                    var strdetails = form["Details"].ToString();
                    var details = JsonConvert.DeserializeObject<dynamic>(strdetails);

                    var strdetailsLimited = Convert.ToString(form["DetailsLimited"]);
                    var detailsLimited = JsonConvert.DeserializeObject<dynamic>(strdetailsLimited);

                    int countDetail = 0;
                    #endregion

                    #region Verify
                    if (details != null)
                    {
                        foreach (var item in details) { countDetail++; }
                    }
                    if (countDetail == 0 && new List<int>() { 142 }.Contains(request.TypeId))
                    {
                        TempData["Message"] = "Yêu cầu không có thông tin chi tiết<br/>Yêu cầu đã bị hủy.";
                        return RedirectToAction("Create", "Requests");
                    }
                    #endregion
                    DataTable dataGrid = new DataTable();
                    dataGrid.Columns.Add("IDCardCode", typeof(int));    //Mã người gửi
                    dataGrid.Columns.Add("SoTKNH", typeof(string));        //Tên người nhận
                    dataGrid.Columns.Add("IDBank", typeof(int));     //Số điện thoại người nhận
                    dataGrid.Columns.Add("IDChiNhanh", typeof(int));       //RequestId Gốc
                    dataGrid.Columns.Add("PhaiThanhToanTrongKy", typeof(decimal));          //Bước CallLog gốc
                    dataGrid.Columns.Add("DaThanhToanTrongKy", typeof(decimal));          //Bước CallLog gốc
                    dataGrid.Columns.Add("SoTienPhaiTra", typeof(decimal));     //Mô tả loại calllog
                    dataGrid.Columns.Add("LyDo", typeof(string));     //Mô tả loại calllog

                    foreach (var item in details)
                    {
                        decimal PhaiThanhToanTrongKy = item.PhaiThanhToanTrongKy != null ? Convert.ToDecimal(item.PhaiThanhToanTrongKy) : null;
                        decimal DaThanhToanTrongKy = item.DaThanhToanTrongKy != null ? Convert.ToDecimal(item.DaThanhToanTrongKy) : null;
                        decimal SoTienPhaiTra = item.SoTienPhaiTra != null ? Convert.ToDecimal(item.SoTienPhaiTra) : null;
                        var LyDo = item.Remark;
                        dataGrid.Rows.Add(
                              item.IDCardCode
                            , item.SoTKNH
                            , item.IDBank
                            , item.IDChiNhanh
                            , PhaiThanhToanTrongKy
                            , DaThanhToanTrongKy
                            , SoTienPhaiTra
                            , LyDo
                            );
                    }
                    SqlParameter[] param = new SqlParameter[]{
                        new SqlParameter("@Table", dataGrid),
                        new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
                        new SqlParameter("@CC", cc),
                        new SqlParameter("@Message", message),
                    };
                    DataTable table = sql.ExecuteCommand("sp_HoanTienKH_CreateCallLog", CommandType.StoredProcedure, param);
                    string strReturn = string.Empty;
                    if (table != null && table.Rows.Count > 0)
                    {
                        if (Convert.ToInt32(table.Rows[0]["Result"]) == 1)
                        {
                            TempData["Message"] = table.Rows[0]["Msg"];
                        }
                        else
                        {
                            ViewBag.Message = table.Rows[0]["Msg"];
                        }
                    }
                    return RedirectToAction("Index", "Home");
                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestController Create(Request)", ex.ToString());
                    ViewBag.Message = "Có lỗi xảy ra khi tạo Request! <br/>Xin vui lòng thử lại! <br/> " + ex.Message;
                    return View();
                }
            }
            return View();
        }
        //▲ Add - TrungNC3 - 08/11/2017 - Hoàn tiền khách hàng
        //▼ Add - NgoanHT - 05/04/2018 - Loại: 145 - thêm hàm xử lý calllog lightbox
        public ActionResult Get_RepairItem()
        {
            DataTable table = sql.ExecuteCommand("sp_MasterDatas_getRepairItem", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult Get_HangDemo()
        {
            DataTable table = sql.ExecuteCommand("sp_POS_GetHangDemo", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public FileResult DownloadHangDemo(string filename)
        {
            string path = "~/Uploads/FileAttachs/" + filename;
            byte[] fileBytes = System.IO.File.ReadAllBytes(HttpContext.Server.MapPath(path));
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, filename);
        }
        [HttpPost]
        public ActionResult SaveUploadedFileDetailMultipleCol(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        int id = item.RequestDId;
                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        if (requestdetail != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestDetailId == requestdetail.Id && f.Status == 1
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0;
                            }

                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhLayoutMatTien";
                                    db.FileAttachs.Add(fileAttach);
                                    myCollection.Add(fileAttach.Uri.ToString());
                                    db.SaveChanges();
                                }
                            }
                            string fNames2 = Convert.ToString(item.ListNameFile_2);
                            if (fNames2 != null)
                            {
                                string[] words2 = fNames2.Split(',');
                                foreach (string word in words2)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = word;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = requestdetail.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutmatBang";
                                        db.FileAttachs.Add(fileAttach);
                                        myCollection.Add(fileAttach.Uri.ToString());
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController SaveUploadFile()", ex.ToString());
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Add - NgoanHT - 05/04/2018 - Loại: 145 - thêm hàm xử lý calllog lightbox

        //▼  Add - LuanNT44 - 12/05/2018 - Loại 24 -  Sửa chữa CSVC
        [HttpPost]
        public ActionResult SaveUploadedFileDetailMultipleCol_24(FormCollection form)
        {
            var details = Convert.ToString(form["Details"]);
            var objects = JsonConvert.DeserializeObject<dynamic>(details);
            int requestId = form["RequestId"].EParseToInt();
            var request = db.Requests.FirstOrDefault(x => x.Id == requestId);
            if (request.Status < Key.StatusRequest.Complete)
            {
                bool isSavedSuccessfully = true;
                string fName = string.Empty;
                List<string> myCollection = new List<string>();
                try
                {
                    foreach (string fileName in Request.Files)
                    {
                        HttpPostedFileBase file = Request.Files[fileName];
                        fName = fileName;
                        if (file != null && file.ContentLength > 0)
                        {
                            // Save file
                            var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                            string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                            var path = string.Format("{0}\\{1}", pathString, fName);
                            file.SaveAs(path);
                            // Save file attach fo database
                        }
                    }
                    foreach (var item in objects)
                    {
                        //permissions.Contains(RequestsController.Permission.Assigner)
                        int id = item.RequestDId;
                        RequestDetail requestdetail = db.RequestDetails.FirstOrDefault(x => x.Id == id);
                        if (requestdetail != null)
                        {
                            var File = from f in db.FileAttachs
                                       where f.RequestDetailId == requestdetail.Id && f.Status == 1
                                       select f;
                            foreach (FileAttach f in File)
                            {
                                f.Status = 0;
                            }

                            string fNames1 = Convert.ToString(item.ListNameFile);
                            string[] words1 = fNames1.Split(',');
                            foreach (string word in words1)
                            {
                                if (word != "")
                                {
                                    FileAttach fileAttach = new FileAttach();
                                    fileAttach.Uri = Keyword.FolderFileAttach + word;
                                    fileAttach.StepNo = request.StepNo;
                                    fileAttach.RequestId = request.Id;
                                    fileAttach.RequestDetailId = requestdetail.Id;
                                    fileAttach.TimeCreate = DateTime.Now;
                                    fileAttach.Status = Key.Status.Available;
                                    fileAttach.Domain = "HinhLayoutMatTien";
                                    db.FileAttachs.Add(fileAttach);
                                    myCollection.Add(fileAttach.Uri.ToString());
                                    db.SaveChanges();
                                }
                            }
                            string fNames2 = Convert.ToString(item.ListNameFile_2);
                            //▼ Add - NgoanHT -  05/04/2018 - thêm điều kiện
                            if (fNames2 != null)
                            {
                                string[] words2 = fNames2.Split(',');
                                foreach (string word in words2)
                                {
                                    if (word != "")
                                    {
                                        FileAttach fileAttach = new FileAttach();
                                        fileAttach.Uri = Keyword.FolderFileAttach + word;
                                        fileAttach.StepNo = request.StepNo;
                                        fileAttach.RequestId = request.Id;
                                        fileAttach.RequestDetailId = requestdetail.Id;
                                        fileAttach.TimeCreate = DateTime.Now;
                                        fileAttach.Status = Key.Status.Available;
                                        fileAttach.Domain = "HinhLayoutmatBang";
                                        db.FileAttachs.Add(fileAttach);
                                        myCollection.Add(fileAttach.Uri.ToString());
                                        db.SaveChanges();
                                    }
                                }
                            }
                            //▲ Add - NgoanHT -  05/04/2018 - thêm điều kiện
                        }
                    }

                }
                catch (Exception ex)
                {
                    isSavedSuccessfully = false;
                    TempData["Message"] = ex.Message;
                    Logger.WriteLogError("RequestsController SaveUploadFile()", ex.ToString());
                }
                if (isSavedSuccessfully)
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = json, error = 0 }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string json = JsonConvert.SerializeObject(myCollection);
                    return Json(new { Message = "Error in saving file", error = 1 }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }
        //▲ Add - LuanNT44 - 12/05/2018 - Loại 24 -  Sửa chữa CSVC
        //Edit - TrongNM - 20/06/2018 - Gui POS check hop le
        [HttpGet]
        public ActionResult Check_KThoplethenganhang(string RequestId, string Sothe)
        {
            try
            {
                SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@RequestId",RequestId),
                 new SqlParameter("@Sothe",Sothe)
                };
                DataTable table = sql.ExecuteCommand("sp_KThoplethenganhang", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var l_JsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    return l_JsonResult;
                }
                return null;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return null;
        }
        //Edit - TrongNM - 20/06/2018 - Gui POS check hop le//Edit - TrongNM - 20/06/2018 - Gui POS check hop le

        #region --- TUANNA89
        public ActionResult GetStatusNTG(int loaiCalllog)
        {
            try
            {
                SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@LoaiCallLog",loaiCalllog)
                };
                DataSet ds = sql.ExecuteCommandDataSet("CallLogTraGopOnlineTichHopNhaTraGop_GetStatusNTG", CommandType.StoredProcedure, param);

                if (ds != null && ds.Tables.Count > 0)
                {
                    ds.DataSetName = "StatusNTG";
                    ds.Tables[0].TableName = "StatusFPT";
                    ds.Tables[1].TableName = "StatusReason";
                    var json_ds = JsonConvert.SerializeObject(ds);

                    var l_JsonResult = Json(json_ds, JsonRequestBehavior.AllowGet);
                    return l_JsonResult;
                }
                return null;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }
            return null;
        }

        [HttpPost]
        //public ActionResult CallLogTGOLTichHopNhaTraGop_CapNhatTay(int RequestId, int LoaiCallLog, int Status, string StatusNTG, string StatusReason, string GhiChu)
        public ActionResult CallLogTGOLTichHopNhaTraGop_CapNhatTay(FormCollection form)
        {
            string message = "";
            int error = 0;
            try
            {
                var requestId = Convert.ToString(form["RequestId"]);
                var loaiCallLog = Convert.ToString(form["LoaiCallLog"]);
                var status = Convert.ToString(form["Status"]);
                var statusNTG = Convert.ToString(form["StatusNTG"]);
                var ghiChu = Convert.ToString(form["GhiChu"]);
                var statusReason = Convert.ToString(form["StatusReason"]);
                var traodoi = Convert.ToString(form["NoiDungTraoDoi"]);
                long lngRequestId = Convert.ToInt32(requestId);
                var soHopDongNTG = Convert.ToString(form["SoHopDongNTG"]);//Add - TuanNA89 - 12/02/2019 - Cho phép nhập số hợp đồng HC
                #region Insert Converstation
                if (traodoi != "")
                {
                    var conversation = new Conversation();
                    conversation.RequestId = lngRequestId;
                    conversation.Sender = UserManager.CurrentUser.InsideCode;
                    conversation.CreateBy = UserManager.CurrentUser.InsideCode;
                    conversation.Message = traodoi;
                    conversation.Status = 1;
                    conversation.TimeCreate = DateTime.Now;
                    conversation.Type = Key.Conversation.Comment;
                    conversation.StepNo = 1;
                    db.Conversations.Add(conversation);

                    var recordUpdate = db.Requests.SingleOrDefault(x => x.Id == lngRequestId);
                    if (recordUpdate.Status == 1)
                    {
                        recordUpdate.Status = 2;
                        recordUpdate.TimeLastUpdate = DateTime.Now;
                    }
                    db.SaveChanges();

                    message = "Cập nhật nội dung trao đổi thành công!";
                    error = 0;
                }
                #endregion

                //if (status != "0")
                {
                    SqlParameter[] param = new SqlParameter[] {
                        new SqlParameter("@CallLogID",requestId),
                        new SqlParameter("@LoaiCallLog",loaiCallLog),
                        new SqlParameter("@Status",status),
                        new SqlParameter("@StatusNTG",statusNTG),
                        new SqlParameter("@GhiChu",ghiChu),
                        new SqlParameter("@StatusReason",statusReason),
                        new SqlParameter("@UserUpdate",UserManager.CurrentUser.InsideCode),
                        new SqlParameter("@HopDongNhaTraGopID",soHopDongNTG),//Add - TuanNA89 - 12/02/2019 - Cho phép nhập số hợp đồng HC
                    };

                    DataTable table = sql.ExecuteCommand("CallLogTraGopOnlineTichHopNhaTraGop_CapNhatTay", CommandType.StoredProcedure, param);

                    if (table != null && table.Rows.Count > 0)
                    {
                        if (table.Rows[0]["Error"].ToString() == "")
                        {
                            message = "Cập nhật thành công!";
                            error = 0;
                        }
                        else
                        {
                            message = table.Rows[0]["Error"].ToString();
                            error = -1;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                message = ex.ToString();
                error = -2;
            }
            return Json(new { Message = message, error = error }, JsonRequestBehavior.AllowGet);
            //TempData["Message"] = message;
            //return RedirectToAction("Index", "Home");
        }

        //▼	Add - TuanNA89 - 30/08/2019 - Calllog duyệt chứng từ Mirae - Loại 159
        public ActionResult Mirae()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            //if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            //{
            //    TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
            //    return RedirectToAction("Index", "Home");
            //}

            try
            {
                ViewBag.g__View__Key = UserManager.CurrentUser.LoginDateTime.ToString("yyyyMMddHHmmss");
                ViewBag.g__View__UserCode = UserManager.CurrentUser.InsideCode;
                ViewBag.g__View__ShopCode = UserManager.CurrentUser.WarehouseCode;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("Mirae - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return View();
        }
        //▼	Add - TuanNA89 - 16/09/2019 - Tách riêng function giành cho nhân viên Mirae và báo cáo
        public ActionResult GetEmpMirae()
        {
            DataTable tb = sql.ExecuteCommand("GetEmpMirae", CommandType.StoredProcedure, new SqlParameter[] { });
            if (tb != null && tb.Rows.Count > 0)
            {
                return Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult Mirae_TimKiem(FormCollection p_FormCollection)
        {
            var l_StrData = p_FormCollection["FormData"].ToString();
            var l_Data = JsonConvert.DeserializeObject<dynamic>(l_StrData);

            try
            {
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@SoHopDong",l_Data.SoHopDong.ToString()),
                    new SqlParameter("@CMND",l_Data.CMND.ToString()),
                    new SqlParameter("@SoVanDon",l_Data.SoVanDon.ToString()),
                    new SqlParameter("@TrangThaiYeuCau",l_Data.TrangThaiYeuCau.ToString()),
                    new SqlParameter("@NguoiGoi",l_Data.NguoiGoi.ToString()),
                    new SqlParameter("@TimeStart",l_Data.TimeStart.ToString()),
                    new SqlParameter("@TimeEnd",l_Data.TimeEnd.ToString()),
                    new SqlParameter("@NguoiDuyet",l_Data.NguoiDuyet.ToString()),
                    new SqlParameter("@TimeStartFinish",l_Data.TimeStartFinish.ToString()),
                    new SqlParameter("@TimeEndFinish",l_Data.TimeEndFinish.ToString()),
                };
                DataTable table = sql.ExecuteCommand("GetRequests_Mirae", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("Mirae_Report", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public ActionResult GetReportCalllogMirae(FormCollection form)
        {
            string SHD = form["SHD"].ToString();
            string CMND = form["CMND"].ToString();
            string SVD = form["SVD"].ToString();
            string Status = form["DSTrangThai"].ToString();
            string sender = form["sender"].ToString();
            string timeStart = form["timeStart"].ToString();
            string timeEnd = form["timeEnd"].ToString();
            string assigner = form["assigner"].ToString();
            string timeStartFinish = form["timeStartFinish"].ToString();
            string timeEndFinish = form["timeStart"].ToString();

            try
            {
                SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@SoHopDong",SHD),
                    new SqlParameter("@CMND",CMND),
                    new SqlParameter("@SoVanDon",SVD),
                    new SqlParameter("@TrangThaiYeuCau",Status),
                    new SqlParameter("@NguoiGoi",sender),
                    new SqlParameter("@TimeStart",timeStart),
                    new SqlParameter("@TimeEnd",timeEnd),
                    new SqlParameter("@NguoiDuyet",assigner),
                    new SqlParameter("@TimeStartFinish",timeStartFinish),
                    new SqlParameter("@TimeEndFinish",timeEndFinish),
                };
                DataTable table = sql.ExecuteCommand("Mirae_Report", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    string domain = string.Format("{0}://{1}", System.Web.HttpContext.Current.Request.Url.Scheme, System.Web.HttpContext.Current.Request.Url.Authority);
                    string fileTemplate = "/TemplateExcel/DanhSachCalllogMirae.xlsx";
                    FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                    if (file.Exists)
                    {
                        using (ExcelPackage package = new ExcelPackage(file))
                        {
                            ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                            int index = 2;
                            int col = 0;
                            string linkCalllog;
                            foreach (DataRow row in table.Rows)
                            {
                                col = 0;
                                linkCalllog = "";
                                col++; worksheet.Cells[index, col].Value = row["STT"].ToString();
                                if (row["Id"].ToString() != "")
                                {
                                    linkCalllog = domain + "/Requests/Details/" + row["Id"].ToString();
                                    col++; worksheet.Cells[index, col].Hyperlink = new ExcelHyperLink(linkCalllog, UriKind.Absolute);
                                    worksheet.Cells[index, col].Value = row["Id"].ToString();
                                    worksheet.Cells[index, col].Style.Font.UnderLine = true;
                                    worksheet.Cells[index, col].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                                }
                                else
                                {
                                    col++; worksheet.Cells[index, col].Value = "";
                                }
                                col++; worksheet.Cells[index, col].Value = row["TieuDe"].ToString();
                                col++; worksheet.Cells[index, col].Value = row["TrangThaiYeuCau"].ToString();
                                col++; worksheet.Cells[index, col].Value = row["NgayGoi"].ToString();
                                col++; worksheet.Cells[index, col].Value = row["NguoiGoi"].ToString();
                                col++; worksheet.Cells[index, col].Value = row["NgayDuyet"].ToString();
                                col++; worksheet.Cells[index, col].Value = row["NguoiDuyet"].ToString();
                                index++;
                            }
                            Response.Clear();
                            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            Response.AddHeader("Content-Disposition", "attachment; filename=DanhSachCalllogMirae-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                            Response.BinaryWrite(package.GetAsByteArray());
                            Response.Flush();
                            Response.End();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("GetReportCalllogMirae", ex.ToString());
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //▲	Add - TuanNA89 - 16/09/2019 - Tách riêng function giành cho nhân viên Mirae và báo cáo
        //▲	Add - TuanNA89 - 30/08/2019 - Calllog duyệt chứng từ Mirae - Loại 159

        #region == Tripi ==
        //▼ TuanNA89 - 09/01/2020 - Calllog Tripi - Loại 162
        public CallApiHelper.ResponseModel XuLyGoiAPITripi_162(long RequestId, string NguoiGuiYC, string ShopGui, string User, int BookingID_Old, int BookingID_New)
        {
            CallApiHelper api = new CallApiHelper();
            
            string l__162__Url_Tripi_InsertBooking = System.Configuration.ConfigurationManager.AppSettings["Url_Tripi_InsertBooking"].ToString();
            var objData = new
            {
                CreateBy = NguoiGuiYC,
                ShopCode = ShopGui,
                DeviceType = 3,
                Token = User,
                bookingId = BookingID_New,
                RequestId = RequestId,
                bookingIdOld = BookingID_Old
            };
            CallApiHelper.ResponseModel result = null;
            try
            {
                result = api.CallAPI_POST<CallApiHelper.ResponseModel>(l__162__Url_Tripi_InsertBooking, objData);
            }
            catch (Exception ex) { }

            if (result == null)
            {
                result = new CallApiHelper.ResponseModel();
                result.Result = 0;
                result.Message = "Lỗi Api Tripi_InsertBooking";
            }
            return result;
        }
        public ActionResult GetConversation(int RequestId, int ConversationId)
        {
            SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@RequestId", RequestId),
                     new SqlParameter("@ConversationId", ConversationId),
            };
            DataTable table = sql.ExecuteCommand("sp_MonitorConversation", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }

        public ActionResult RefreshConversation(int RequestId)
        {
            SqlParameter[] param = new SqlParameter[] {
                     new SqlParameter("@RequestId", RequestId),
            };
            DataSet ds = sql.ExecuteCommandDataSet("sp_GetDataConversation_ByRequestId", CommandType.StoredProcedure, param);
            if (ds != null && ds.Tables.Count > 0)
            {
                Dictionary<string, List<Dictionary<string, object>>> myList =
                new Dictionary<string, List<Dictionary<string, object>>>();

                myList.Add("Conversations", ds.Tables[0].EParseToObjects());
                myList.Add("FileAttachs", ds.Tables[1].EParseToObjects());
                var jsonResult = Json(myList, JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        //▲ TuanNA89 - 09/01/2020 - Calllog Tripi - Loại 162
        #endregion

        #endregion
        #region ChuongNT3 - Claim NVC
        public int Check_IsNVC(long requestId)
        {
            SqlParameter[] para = { new SqlParameter("@RequestId", requestId), new SqlParameter("@User", UserManager.CurrentUser.InsideCode) };
            DataTable tableResult = sql.ExecuteCommand("Check_IsNVC", CommandType.StoredProcedure, para);
            if (tableResult != null && tableResult.Rows.Count > 0)
            {
                return 1;
            }
            else
            {
                return 2;
            }
        }

        #endregion
        //▼ Edit - TrongNM - 22/03/2019 - Chi phí đối tác F.Friends - Loai 156
        [HttpPost]
        public ActionResult SaveUploadedFileChiPhiFF(FormCollection form)
        {
            string fName = string.Empty;
            List<string> myCollection = new List<string>();
            try
            {
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    fName = fileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, fName);
                        file.SaveAs(path);
                    }
                }
            }
            catch (Exception ex)
            {
                TempData["Message"] = ex.Message;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return Json(new { Message = "", error = 0 }, JsonRequestBehavior.AllowGet);
        }

        #region ===CL cho Scoring===
        /// <summary>GET: /Requests/InfoReq__GetSaoKeLuong</summary>
        public ActionResult InfoReq__GetSaoKeLuong(int ReqId)
        {
            JsonResult l_JsonResult = null;
            SqlParameter[] l_SqlParameter_Arr = new SqlParameter[]{
                new SqlParameter("@ReqId", ReqId)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp__WEB__Req__Det__InfoReq__GetSaoKeLuong", CommandType.StoredProcedure, l_SqlParameter_Arr);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
            }
            return l_JsonResult;
        }

        /// <summary>POST: /Requests/InfoReq__UpFile</summary>
        [HttpPost]
        public string InfoReq__UpFile(FormCollection Form)
        {
            string l_Result_FileName = string.Empty;
            try
            {
                var l_OriginalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                string l_PathString = System.IO.Path.Combine(l_OriginalDirectory.ToString(), "");
                string l_MidName = "CreditScoring";
                string l_FolderRoot_Mid = string.Format("{0}{1}", l_PathString, l_MidName);

                //  Kiểm tra nếu Thư mục chưa tồn tại => Tạo mới
                if (!Directory.Exists(l_FolderRoot_Mid))
                {
                    Directory.CreateDirectory(l_FolderRoot_Mid);
                }

                string fName = string.Empty;
                foreach (string fileName in Request.Files)
                {
                    HttpPostedFileBase file = Request.Files[fileName];
                    fName = fileName;
                    if (file != null && file.ContentLength > 0)
                    {
                        // Save file
                        var path = string.Format("{0}/{1}", l_FolderRoot_Mid, fName);
                        file.SaveAs(path);
                        l_Result_FileName = string.Format("{0}{1}/{2}", Keyword.FolderFileAttach, l_MidName, fName);
                    }
                }
            }
            catch (Exception ex)
            {
                l_Result_FileName = string.Empty;
                Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
            }

            return l_Result_FileName;
        }
        #endregion

        #region ===158:CallLog Chi thưởng DN===
        /// <summary>GET: /Requests/VendRewdInfoTemp</summary>
        public ActionResult VendRewdInfoTemp(int ReqId)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            SqlParameter[] l_SqlParameter_Arr = new SqlParameter[]{
                new SqlParameter("@ReqId", ReqId)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp__WEB__Req__VendRewdInfoTemp", CommandType.StoredProcedure, l_SqlParameter_Arr);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                ViewBag.NguoiDeNghi = UserManager.CurrentUser.InsideCode + "-" + UserManager.CurrentUser.EmployeeName;
                ViewBag.SoTien = l_DataTable.Rows[0]["SoTien"].ToString();
                ViewBag.SoTien__BangChu = XString.VietHoaDauChuoi(XString.DocSoThanhChu(l_DataTable.Rows[0]["SoTien_BangChu"].ToString())) + " đồng chẵn";
                ViewBag.CardName = l_DataTable.Rows[0]["CardName"].ToString();
                ViewBag.SoTKNH = l_DataTable.Rows[0]["SoTKNH"].ToString();
                ViewBag.BankName = l_DataTable.Rows[0]["BankName"].ToString();
                ViewBag.VendName = l_DataTable.Rows[0]["VendName"].ToString();
                ViewBag.KyThuNo = l_DataTable.Rows[0]["KyThuNo"].ToString();
            }
            return View();
        }

        /// <summary>GET: /Requests/VendRewdInfoStatement</summary>
        public ActionResult VendRewdInfoStatement(int ReqId)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            SqlParameter[] l_SqlParameter_Arr = new SqlParameter[]{
                new SqlParameter("@ReqId", ReqId)
            };
            DataSet l_DataSet = sql.ExecuteCommandDataSet("sp__WEB__Req__VendRewdInfoStatement", CommandType.StoredProcedure, l_SqlParameter_Arr);
            DataTable l_DataTable_Vend = l_DataSet.Tables[0];
            DataTable l_DataTable_Statement = l_DataSet.Tables[1];
            if (l_DataTable_Vend != null && l_DataTable_Vend.Rows.Count > 0)
            {
                ViewBag.VendName = l_DataTable_Vend.Rows[0]["VendName"].ToString();
                ViewBag.VendAddr = l_DataTable_Vend.Rows[0]["VendAddr"].ToString();
                ViewBag.NgayTaoSaoKe = l_DataTable_Vend.Rows[0]["NgayTaoSaoKe"].ToString();
                ViewBag.KyThanhToan = l_DataTable_Vend.Rows[0]["KyThanhToan"].ToString();
                ViewBag.TongThuKyNay = l_DataTable_Vend.Rows[0]["TongThuKyNay"].ToString();
                ViewBag.TongThucThu = l_DataTable_Vend.Rows[0]["TongThucThu"].ToString();
                ViewBag.GiaoDich = l_DataTable_Vend.Rows[0]["GiaoDich"].ToString();
                ViewBag.SoTienGiaoDich = l_DataTable_Vend.Rows[0]["SoTienGiaoDich"].ToString();
                ViewBag.ChietKhauDN = l_DataTable_Vend.Rows[0]["ChietKhauDN"].ToString();
                ViewBag.SoTienChietKhau = l_DataTable_Vend.Rows[0]["SoTienChietKhau"].ToString();
                ViewBag.NguoiDeNghi = UserManager.CurrentUser.InsideCode + "-" + UserManager.CurrentUser.EmployeeName;
            }
            if (l_DataTable_Statement != null && l_DataTable_Statement.Rows.Count > 0)
            {
                ViewBag.Statement = l_DataTable_Statement.Rows;
            }
            return View();
        }
        #endregion

        #region ===/Requests/InfoCustomerInstallmentOnline (Thông tin đăng ký trả góp)===
        public ActionResult InfoCustomerInstallmentOnline(string phoneNum, string cmnd, string IDCardCode, string maNV, string venderCode)
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu("/Requests/InfoCustomerInstallmentOnline"))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            ViewBag.ShopSender = "";
            if (UserManager.CurrentUser.WarehouseCode != "" && UserManager.CurrentUser.WarehouseCode != null)
            {
                DataTable tbWare = sql.ExecuteCommand("GetWarehouseCodeB1", CommandType.StoredProcedure, new SqlParameter[]{
                    new SqlParameter("@WarehouseCode",UserManager.CurrentUser.WarehouseCode)
                });
                if (tbWare != null && tbWare.Rows.Count > 0)
                {
                    ViewBag.ShopSender = tbWare.Rows[0][0].ToString();
                }
            }
            DataTable tbCheckSS = sql.ExecuteCommand("CheckNhomQuyenSamSung", CommandType.StoredProcedure, new SqlParameter[]{
                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
                });
            if (tbCheckSS != null && tbCheckSS.Rows.Count > 0)
            {
                ViewBag.UserPermissionSS = tbCheckSS.Rows[0][0].ToString();
            }
            else
            {
                ViewBag.UserPermissionSS = "0";
            }
            List<SelectListItem> positionList = new List<SelectListItem>();
            positionList.Add(new SelectListItem { Value = "", Text = "Chọn chức vụ", Selected = true });
            DataTable tbChucVu = sql.ExecuteCommand("OCRD_ChucVu_GetAll", CommandType.StoredProcedure, null);
            if (tbChucVu != null && tbChucVu.Rows.Count > 0)
            {
                foreach (DataRow row in tbChucVu.Rows)
                {
                    positionList.Add(new SelectListItem { Value = row["ID"].ToString(), Text = row["ChucVu"].ToString() });
                }

                ViewBag.Positions = positionList;
            }
            List<SelectListItem> hinhthucgiaohang = new List<SelectListItem>();
            hinhthucgiaohang.Add(new SelectListItem { Value = "0", Text = "Chọn hình thức", Selected = true });
            DataTable tbHinhThuc = sql.ExecuteCommand("GetHinhThucGiaoHang", CommandType.StoredProcedure, null);
            if (tbHinhThuc != null && tbHinhThuc.Rows.Count > 0)
            {
                foreach (DataRow row in tbHinhThuc.Rows)
                {
                    hinhthucgiaohang.Add(new SelectListItem { Value = row["ID"].ToString(), Text = row["Name"].ToString() });
                }

                ViewBag.HinhThucGiao = hinhthucgiaohang;
            }
            List<SelectListItem> loaiHD = new List<SelectListItem>();
            loaiHD.Add(new SelectListItem { Value = "", Text = "Chọn loại HĐ", Selected = true });
            DataTable tbLoaiHD = sql.ExecuteCommand("GetAllLoaiHopDong", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@All",2)
            });
            if (tbLoaiHD != null && tbLoaiHD.Rows.Count > 0)
            {
                foreach (DataRow row in tbLoaiHD.Rows)
                {
                    loaiHD.Add(new SelectListItem { Value = row["Id"].ToString(), Text = row["LoaiHopDong"].ToString() });
                }

                ViewBag.LoaiHD = loaiHD;
            }
            List<SelectListItem> moiQuanHeVoiNguoiLL = new List<SelectListItem>();
            moiQuanHeVoiNguoiLL.Add(new SelectListItem { Value = "", Text = "Chọn mối quan hệ", Selected = true });
            DataTable tbLL = sql.ExecuteCommand("GetMoiLienHeVoiNguoiLL", CommandType.StoredProcedure, null);
            if (tbLL != null && tbLL.Rows.Count > 0)
            {
                foreach (DataRow row in tbLL.Rows)
                {
                    moiQuanHeVoiNguoiLL.Add(new SelectListItem { Value = row["Code"].ToString(), Text = row["Name"].ToString() });
                }

                ViewBag.MoiLienHeVoiNguoiLL = moiQuanHeVoiNguoiLL;
            }
            DataTable tbCheckEcom = sql.ExecuteCommand("CheckEmployeeEcom", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@UserID",UserManager.CurrentUser.InsideCode)
            });
            if (tbCheckEcom != null && tbCheckEcom.Rows.Count > 0 && tbCheckEcom.Rows[0][0].ToString() == "1")
            {
                ViewBag.CheckEmpEcom = "1";
            }
            else
            {
                ViewBag.CheckEmpEcom = "0";
            }
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@sdt",phoneNum),
                    new SqlParameter("@cmnd",cmnd),
                    new SqlParameter("@IDcardCode",IDCardCode),
                    new SqlParameter("@MaNV",maNV),
                    new SqlParameter("@Vendor",venderCode)
                };
            string IDCardCodeGet;
            ViewBag.TenSP = "Chọn sản phẩm";
            DataSet infos = sql.ExecuteCommandDataSet("FRT_SP_LoadThongTinKhachHang", CommandType.StoredProcedure, param);
            if (infos.Tables[0] != null && infos.Tables[0].Rows.Count > 0)
            {
                IDCardCodeGet = infos.Tables[0].Rows[0]["IDCardCode"].ToString();
                ViewBag.IDCardCode = infos.Tables[0].Rows[0]["IDCardCode"].ToString();
                ViewBag.IDFormDK = infos.Tables[0].Rows[0]["IDFormDK"].ToString();
                ViewBag.MaCty = infos.Tables[0].Rows[0]["VendorCode"].ToString();
                ViewBag.TenCty = infos.Tables[0].Rows[0]["TenCty"].ToString();
                ViewBag.TenKH = infos.Tables[0].Rows[0]["CardName"].ToString();
                ViewBag.GioiTinh = infos.Tables[0].Rows[0]["GioiTinhCode"].ToString();
                ViewBag.NgaySinh = infos.Tables[0].Rows[0]["Birthday"].ToString();
                ViewBag.CMND = infos.Tables[0].Rows[0]["CMND"].ToString();
                ViewBag.Passport = infos.Tables[0].Rows[0]["Passport"].ToString();
                ViewBag.NoiSinh = infos.Tables[0].Rows[0]["NoiSinh"].ToString();
                ViewBag.TinhThanhPho = infos.Tables[0].Rows[0]["TinhThanhPho"].ToString();
                ViewBag.QuanHuyen = infos.Tables[0].Rows[0]["QuanHuyen"].ToString();
                ViewBag.PhuongXa = infos.Tables[0].Rows[0]["PhuongXa"].ToString();
                ViewBag.NhomKH = infos.Tables[0].Rows[0]["NhomKH"].ToString();
                ViewBag.NgayCapCMND = infos.Tables[0].Rows[0]["NgayCapCMND"].ToString();
                ViewBag.NoiCapCMND = infos.Tables[0].Rows[0]["NoiCapCMND"].ToString();
                ViewBag.SoBHXH = infos.Tables[0].Rows[0]["SoBHXH"].ToString();
                ViewBag.SoTKNH = infos.Tables[0].Rows[0]["SoTKNH"].ToString();
                ViewBag.IdBank = infos.Tables[0].Rows[0]["IdBank"].ToString();
                ViewBag.ChiNhanhNH = infos.Tables[0].Rows[0]["ChiNhanhNH"].ToString();
                ViewBag.Email = infos.Tables[0].Rows[0]["Email"].ToString();
                ViewBag.DuoiEmail = infos.Tables[0].Rows[0]["DuoiEmail"].ToString();
                ViewBag.TinhTrangHonNhan = infos.Tables[0].Rows[0]["TinhTrangHonNhan"].ToString();
                ViewBag.TamTru = infos.Tables[0].Rows[0]["DiaChiTamTru"].ToString();
                ViewBag.SDT = infos.Tables[0].Rows[0]["SDT"].ToString();
                ViewBag.HTThanhToan = infos.Tables[0].Rows[0]["HTThanhToan"].ToString();

                //▼	Edit - VietMXH - 02/02/2018 - Info CMND + Người liên hệ + Chân dung==================================================
                ViewBag.NguoiLienHe = infos.Tables[0].Rows[0]["NguoiLienHe"].ToString();
                ViewBag.QuanHeVoiNguoiLienHe = infos.Tables[0].Rows[0]["QuanHeVoiNguoiLienHe"].ToString();
                ViewBag.SDTNguoiLienHe = infos.Tables[0].Rows[0]["SDT_NguoiLienHe"].ToString();
                ViewBag.NguoiLienHe_2 = infos.Tables[0].Rows[0]["NguoiLienHe_2"].ToString();
                ViewBag.QuanHeVoiNguoiLienHe_2 = infos.Tables[0].Rows[0]["QuanHeVoiNguoiLienHe_2"].ToString();
                ViewBag.SDTNguoiLienHe_2 = infos.Tables[0].Rows[0]["SDT_NguoiLienHe_2"].ToString();
                //▲	Edit - VietMXH - 02/02/2018 - Info CMND + Người liên hệ + Chân dung==================================================

                ViewBag.MaNV = infos.Tables[0].Rows[0]["MaNV"].ToString();
                ViewBag.ChucVu = infos.Tables[0].Rows[0]["ChucVuCode"].ToString();
                ViewBag.BoPhan = infos.Tables[0].Rows[0]["BoPhan"].ToString();
                ViewBag.NgayKiHop = infos.Tables[0].Rows[0]["NgayKiHop"].ToString();
                ViewBag.LoaiHopDong = infos.Tables[0].Rows[0]["LoaiHopDongCode"].ToString();
                ViewBag.LuongCung = infos.Tables[0].Rows[0]["LuongCung"].ToString();
                ViewBag.TongLuongNV = infos.Tables[0].Rows[0]["TongLuongNV"].ToString();
                ViewBag.HanMucChoPhep = infos.Tables[0].Rows[0]["HanMucSoTien"].ToString();
                ViewBag.HanMucConLai = infos.Tables[0].Rows[0]["HanMucConLai"].ToString();
                ViewBag.TTHanMuc = infos.Tables[0].Rows[0]["TTHanMuc"].ToString();
                ViewBag.LoaiDonHang = infos.Tables[0].Rows[0]["LoaiDonHang"].ToString();
                ViewBag.SoTienDNHoTro = infos.Tables[0].Rows[0]["SoTienDNHoTro"].ToString();
                ViewBag.IDCardCode_NhomTruong = infos.Tables[0].Rows[0]["IDCardCode_NhomTruong"].ToString();
                ViewBag.ChiNhanhVendor = infos.Tables[0].Rows[0]["ChiNhanhVendor"].ToString();
                ViewBag.IDCLDuyetTK = infos.Tables[0].Rows[0]["IDCLDuyetTK"].ToString();
                ViewBag.IDCLDuyetCT = infos.Tables[0].Rows[0]["IDCLDuyetCT"].ToString();

                //▼	Edit - VietMXH - 27/03/2018 - Fix Link KH Credit==================================================
                ViewBag.IDCLMoThe = infos.Tables[0].Rows[0]["IDCLMoThe"].ToString();
                //▲	Edit - VietMXH - 27/03/2018 - Fix Link KH Credit==================================================

                //▼	Edit - VietMXH - 04/05/2018 - Trạng thái duyệt UQTN==================================================
                ViewBag.TTDuyetUQTN = infos.Tables[0].Rows[0]["TTDuyetUQTN"].ToString();
                //▲	Edit - VietMXH - 04/05/2018 - Trạng thái duyệt UQTN==================================================

                ViewBag.TenHinhThucMuaHang = infos.Tables[0].Rows[0]["TenHinhThucMuaHang"].ToString();
                ViewBag.LoaiKH = infos.Tables[0].Rows[0]["LoaiKH"].ToString();

                //▼	Edit - VietMXH - 27/03/2018 - Fix Link KH Credit==================================================
                var l_LoaiKH_Ma = infos.Tables[0].Rows[0]["LoaiKH_Ma"].ToString();
                ViewBag.g_LoaiKH_Ma = l_LoaiKH_Ma;

                //▼	Edit - VietMXH - 28/08/2018 - Newbie SS==================================================
                ViewBag.g_LoaiHopDong_Code = infos.Tables[0].Rows[0]["LoaiHopDongCode"].ToString();
                //▲	Edit - VietMXH - 28/08/2018 - Newbie SS==================================================

                //▼	Edit - VietMXH - 07/08/2018 - Check SM/PSM==================================================
                ViewBag.g_AuthenBy = "";
                //▲	Edit - VietMXH - 07/08/2018 - Check SM/PSM==================================================

                switch (l_LoaiKH_Ma)
                {
                    case "0":   //  0:Vừa trả góp vừa trả thẳng
                    case "1":   //  1:Trả góp
                    case "2":   //  2:Trả thẳng
                        #region 0/1/2
                        ViewBag.g_CustInfoUpdate_MaKH = infos.Tables[0].Rows[0]["IDCardCode"].ToString();
                        ViewBag.g_CustInfoUpdate_MaCty = infos.Tables[0].Rows[0]["VendorCode"].ToString();

                        //▼	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================
                        ViewBag.g_CustInfoUpdate_AnhCIC = infos.Tables[0].Rows[0]["AnhCIC"].ToString();
                        //▲	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================

                        ViewBag.g_TraGop_Credit_IDCardCode_Update = 0;
                        ViewBag.g_CustInfoUpda_CredNoneCard_IDCardCode = 0;
                        #endregion
                        break;
                    case "4":   //  4:Credit có thẻ
                        #region 4:Credit có thẻ
                        ViewBag.g_CustInfoUpdate_MaKH = 0;
                        ViewBag.g_CustInfoUpdate_MaCty = 0;

                        //▼	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================
                        ViewBag.g_CustInfoUpdate_AnhCIC = "";
                        //▲	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================

                        ViewBag.g_TraGop_Credit_IDCardCode_Update = infos.Tables[0].Rows[0]["IDCardCode"].ToString();
                        ViewBag.g_CustInfoUpda_CredNoneCard_IDCardCode = 0;
                        #endregion
                        break;
                    case "5":   //  5:Credit không thẻ
                        #region 5:Credit không thẻ
                        ViewBag.g_CustInfoUpdate_MaKH = 0;
                        ViewBag.g_CustInfoUpdate_MaCty = 0;

                        //▼	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================
                        ViewBag.g_CustInfoUpdate_AnhCIC = "";
                        //▲	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================

                        ViewBag.g_TraGop_Credit_IDCardCode_Update = 0;
                        ViewBag.g_CustInfoUpda_CredNoneCard_IDCardCode = infos.Tables[0].Rows[0]["IDCardCode"].ToString();
                        #endregion
                        break;
                    default:
                        #region
                        ViewBag.g_CustInfoUpdate_MaKH = 0;
                        ViewBag.g_CustInfoUpdate_MaCty = 0;

                        //▼	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================
                        ViewBag.g_CustInfoUpdate_AnhCIC = "";
                        //▲	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================

                        ViewBag.g_TraGop_Credit_IDCardCode_Update = 0;
                        ViewBag.g_CustInfoUpda_CredNoneCard_IDCardCode = 0;
                        #endregion
                        break;
                }

                //▲	Edit - VietMXH - 27/03/2018 - Fix Link KH Credit==================================================

                if (infos.Tables[1] != null && infos.Tables[1].Rows.Count > 0)
                {
                    ViewBag.ThongTinSanPhamm = XDataTable.DataTableToJSONWithJSONNet(infos.Tables[1]);
                    ViewBag.MaShop = infos.Tables[1].Rows[0]["MaShop"].ToString();
                    ViewBag.MaSP = infos.Tables[1].Rows[0]["MaSP"].ToString();
                    ViewBag.TenSP = infos.Tables[1].Rows[0]["ItemName"].ToString();
                    ViewBag.ThanhTien = infos.Tables[1].Rows[0]["GiaSP"].ToString();
                    ViewBag.SoTienTraTruoc = infos.Tables[1].Rows[0]["SoTienTraTruoc"].ToString();
                    ViewBag.SoTienHangThang = infos.Tables[1].Rows[0]["SoTienHangThang"].ToString();
                    ViewBag.NgayDenShop = infos.Tables[1].Rows[0]["NgayDenShop"].ToString();
                    ViewBag.GhiChu = infos.Tables[1].Rows[0]["GhiChu"].ToString();
                    ViewBag.DiachiGH = infos.Tables[1].Rows[0]["DiachiGH"].ToString();
                }
                if (infos.Tables[2] != null && infos.Tables[2].Rows.Count > 0)
                {
                    ViewBag.HoTen_NguoiNhanHang = infos.Tables[2].Rows[0]["HoTen_NguoiNhanHang"].ToString();
                    ViewBag.CMND_NguoiNhanHang = infos.Tables[2].Rows[0]["CMND_NguoiNhanHang"].ToString();
                    ViewBag.SDT_NguoiNhanHang = infos.Tables[2].Rows[0]["SDT_NguoiNhanHang"].ToString();
                    ViewBag.DiaChi_NguoiNhanHang = infos.Tables[2].Rows[0]["DiaChi_NguoiNhanHang"].ToString();
                }
            }

            return View();
        }
        public string InfoCustInstallmentOnline_Insert(InfoCustInstallmentOnline p_Customer)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@VendorCode", p_Customer.VendorCode),
                new SqlParameter("@MaNhanVien", p_Customer.MaNV),
                new SqlParameter("@CMND", p_Customer.CMND),
                new SqlParameter("@FullName", p_Customer.TenKH),
                new SqlParameter("@SDT", p_Customer.SDT),
                new SqlParameter("@HoKhauTT", p_Customer.HoKhauThuongTru),
                new SqlParameter("@TinhThanhPho", p_Customer.TinhThanhPho),
                new SqlParameter("@QuanHuyen", p_Customer.QuanHuyen),
                new SqlParameter("@PhuongXa", p_Customer.PhuongXa),
                new SqlParameter("@Birthday", p_Customer.NgaySinh),
                new SqlParameter("@NoiSinh", p_Customer.NoiSinh),
                new SqlParameter("@Gender", p_Customer.GioiTinh),
                new SqlParameter("@NhomKH", p_Customer.NhomKH),
                new SqlParameter("@NgayCapCMND", p_Customer.NgayCapCMND),
                new SqlParameter("@NoiCapCMND", p_Customer.NoiCapCMND),
                new SqlParameter("@BoPhan", p_Customer.BoPhan),
                new SqlParameter("@ChucVu", p_Customer.ChucVu),
                new SqlParameter("@LoaiHD", p_Customer.LoaiHD),
                new SqlParameter("@NgayKiHD", p_Customer.NgayKiHD),
                new SqlParameter("@TongLuong", p_Customer.TongThuNhap),
                new SqlParameter("@SoBHXH", p_Customer.SoBHXH),
                new SqlParameter("@SoTKNH", p_Customer.SoTKNH),
                new SqlParameter("@IdBank", p_Customer.IDBank),
                new SqlParameter("@ChiNhanhNH", p_Customer.ChiNhanhNH),
                new SqlParameter("@Email", p_Customer.Email),
                new SqlParameter("@NguoiLienHe", p_Customer.NguoiLLKhan),
                new SqlParameter("@QuanHeVoiNguoiLienHe", p_Customer.QuanHeVoiNguoiLL),
                new SqlParameter("@SDT_NguoiLienHe", p_Customer.SDTLienLac),
                new SqlParameter("@TinhTrangHonNhan", p_Customer.TinhTrangHonNhan),
                new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_InsertOrUpdate", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0 && l_DataTable.Rows[0]["Result"].ToString() == "1")
            {
                return l_DataTable.Rows[0]["Result"].ToString();
            }
            return string.Empty;
        }
        public ActionResult InfoCustInstallmentOnline_Update(FormCollection p_FormCollection)
        {
            var l_Details = Convert.ToString(p_FormCollection["dataUpdate"]);
            var l_Objects = JsonConvert.DeserializeObject<dynamic>(l_Details);
            string l_ListFName = string.Empty;
            string l_AnhDaiDien = string.Empty;

            //▼	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================
            string l__AnhCIC = string.Empty;
            //▲	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================

            if (Request.Files.Count > 0)
            {
                try
                {

                    //▼	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================
                    foreach (string l_FileName in Request.Files)
                    {
                        HttpPostedFileBase l_HttpPostedFileBase = Request.Files[l_FileName];
                        if (l_HttpPostedFileBase != null && l_HttpPostedFileBase.ContentLength > 0)
                        {
                            //  ===Tên file mặc định===
                            string l_FileName_Save = string.Empty;
                            string l_FileName_GetExtension = Path.GetExtension(l_HttpPostedFileBase.FileName);

                            switch (l_FileName)
                            {
                                case "AnhDaiDien":
                                    #region ===AnhDaiDien===
                                    l_FileName_Save = DateTime.Now.ToString("yyyyMMddHHmmssFFF_") + UserManager.CurrentUser.LoginDateTime.ToString("yyyyMMddHHmmssFFF_") + UserManager.CurrentUser.InsideCode + "_AnhDaiDien" + l_FileName_GetExtension;
                                    #endregion
                                    break;
                                case "AnhCIC":
                                    #region ===AnhCIC===
                                    l_FileName_Save = DateTime.Now.ToString("yyyyMMddHHmmssFFF_") + UserManager.CurrentUser.LoginDateTime.ToString("yyyyMMddHHmmssFFF_") + UserManager.CurrentUser.InsideCode + "_AnhCIC" + l_FileName_GetExtension;
                                    #endregion
                                    break;
                                default:
                                    #region ===default===
                                    if (!string.IsNullOrEmpty(l_FileName) && l_FileName.Split('_')[0] == "FileAttach")
                                    {
                                        #region ===FileAttach===
                                        l_FileName_Save = DateTime.Now.ToString("yyyyMMddHHmmssFFF_") + UserManager.CurrentUser.LoginDateTime.ToString("yyyyMMddHHmmssFFF_") + UserManager.CurrentUser.InsideCode + "_" + l_FileName + l_FileName_GetExtension;
                                        #endregion
                                    }
                                    else
                                    {
                                        #region ===default===
                                        l_FileName_Save = DateTime.Now.ToString("yyyyMMddHHmmssFFF_") + UserManager.CurrentUser.LoginDateTime.ToString("yyyyMMddHHmmssFFF_") + UserManager.CurrentUser.InsideCode + "_" + l_HttpPostedFileBase.FileName;
                                        #endregion
                                    }
                                    #endregion
                                    break;
                            }

                            //  ===Save file===
                            DirectoryInfo l__DirectoryInfo = new DirectoryInfo(Server.MapPath(Keyword.GetFolderFileAttach()));
                            string l_PathString = System.IO.Path.Combine(l__DirectoryInfo.ToString(), "");
                            string l_FilePathString = string.Format("{0}\\{1}", l_PathString, l_FileName_Save);
                            l_HttpPostedFileBase.SaveAs(l_FilePathString);

                            switch (l_FileName)
                            {
                                case "AnhDaiDien":
                                    #region ===AnhDaiDien===
                                    l_ListFName += "|" + Keyword.GetFolderFileAttach() + l_FileName_Save;
                                    if (string.IsNullOrEmpty(l_AnhDaiDien))
                                    //  Chỉ Set 1 ảnh
                                    {
                                        l_AnhDaiDien = Keyword.GetFolderFileAttach() + l_FileName_Save;
                                    }
                                    #endregion
                                    break;
                                case "AnhCIC":
                                    #region ===AnhCIC===
                                    if (string.IsNullOrEmpty(l__AnhCIC))
                                    //  Chỉ Set 1 ảnh
                                    {
                                        l__AnhCIC = Keyword.GetFolderFileAttach() + l_FileName_Save;
                                    }
                                    #endregion
                                    break;
                                default:
                                    #region ===default===
                                    l_ListFName += "|" + Keyword.GetFolderFileAttach() + l_FileName_Save;
                                    #endregion
                                    break;
                            }
                        }
                    }
                    //▲	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================

                }
                catch (Exception ex)
                {
                    Logger.WriteLogError("RequestsController - " + MethodBase.GetCurrentMethod().Name + "()", ex.ToString());
                }
            }

            InfoCustInstallmentOnline l_Info = new InfoCustInstallmentOnline();
            l_Info.IDCardCode = l_Objects[0].IDCardCode;
            l_Info.VendorCode = l_Objects[0].VendorCode;
            l_Info.MaNV = l_Objects[0].MaNV;
            l_Info.CMND = l_Objects[0].CMND;
            l_Info.PassPort = l_Objects[0].PassPort;
            l_Info.TenKH = l_Objects[0].TenKH;
            l_Info.SDT = l_Objects[0].SDT;
            l_Info.HoKhauThuongTru = l_Objects[0].HoKhauThuongTru;
            l_Info.TinhThanhPho = l_Objects[0].TinhThanhPho;
            l_Info.QuanHuyen = l_Objects[0].QuanHuyen;
            l_Info.PhuongXa = l_Objects[0].PhuongXa;
            l_Info.NgaySinh = l_Objects[0].NgaySinh;
            l_Info.NoiSinh = l_Objects[0].NoiSinh;
            l_Info.GioiTinh = l_Objects[0].GioiTinh;
            l_Info.NhomKH = l_Objects[0].NhomKH;
            l_Info.NgayCapCMND = l_Objects[0].NgayCapCMND;
            l_Info.NoiCapCMND = l_Objects[0].NoiCapCMND;
            l_Info.BoPhan = l_Objects[0].BoPhan;
            l_Info.ChucVu = l_Objects[0].ChucVu;
            l_Info.LoaiHD = l_Objects[0].LoaiHD;
            l_Info.NgayKiHD = l_Objects[0].NgayKiHD;
            l_Info.TongThuNhap = l_Objects[0].TongThuNhap;
            l_Info.SoBHXH = l_Objects[0].SoBHXH;
            l_Info.SoTKNH = l_Objects[0].SoTKNH;
            l_Info.IDBank = l_Objects[0].IDBank;
            l_Info.ChiNhanhNH = l_Objects[0].ChiNhanhNH;
            l_Info.Email = l_Objects[0].Email;
            l_Info.NguoiLLKhan = l_Objects[0].NguoiLLKhan;
            l_Info.QuanHeVoiNguoiLL = l_Objects[0].QuanHeVoiNguoiLL;
            l_Info.SDTLienLac = l_Objects[0].SDTLienLac;
            l_Info.TinhTrangHonNhan = l_Objects[0].TinhTrangHonNhan;
            l_Info.NguoiQuanLy = l_Objects[0].NguoiQuanLy;
            ////l_Info.DonHangFFDN = l_Objects[0].DonHangFFDN;
            ////l_Info.SoTienDNHoTro = l_Objects[0].SoTienDNHoTro;
            l_Info.ChiNhanhDN = l_Objects[0].ChiNhanhDN;
            l_Info.LoaiKH = l_Objects[0].LoaiKH;
            l_Info.Note = l_Objects[0].Note;

            if (l_Info.TongThuNhap == "")
                l_Info.TongThuNhap = "0";
            ////if (l_Info.SoTienDNHoTro == "")
            ////    l_Info.SoTienDNHoTro = "0";

            l_Info.NguoiLienHe_2 = l_Objects[0].NguoiLienHe_2;
            l_Info.SDT_NguoiLienHe_2 = l_Objects[0].SDT_NguoiLienHe_2;
            l_Info.QuanHeVoiNguoiLienHe_2 = l_Objects[0].QuanHeVoiNguoiLienHe_2;

            SqlParameter[] param = new SqlParameter[] {
                new SqlParameter("@IDCardCode", l_Info.IDCardCode),
                new SqlParameter("@VendorCode", l_Info.VendorCode),
                new SqlParameter("@MaNhanVien", l_Info.MaNV),
                new SqlParameter("@CMND", l_Info.CMND),
                new SqlParameter("@PassPort", l_Info.PassPort),
                new SqlParameter("@FullName", l_Info.TenKH),
                new SqlParameter("@SDT", l_Info.SDT),
                new SqlParameter("@HoKhauTT", l_Info.HoKhauThuongTru),
                new SqlParameter("@TinhThanhPho", l_Info.TinhThanhPho),
                new SqlParameter("@QuanHuyen", l_Info.QuanHuyen),
                new SqlParameter("@PhuongXa", l_Info.PhuongXa),
                new SqlParameter("@Birthday", l_Info.NgaySinh),
                new SqlParameter("@NoiSinh", l_Info.NoiSinh),
                new SqlParameter("@Gender", l_Info.GioiTinh),
                new SqlParameter("@NhomKH", l_Info.NhomKH),
                new SqlParameter("@NgayCapCMND", l_Info.NgayCapCMND),
                new SqlParameter("@NoiCapCMND", l_Info.NoiCapCMND),
                new SqlParameter("@BoPhan", l_Info.BoPhan),
                new SqlParameter("@ChucVu", l_Info.ChucVu),
                new SqlParameter("@LoaiHD", l_Info.LoaiHD),
                new SqlParameter("@NgayKiHD", l_Info.NgayKiHD),
                new SqlParameter("@TongLuong", l_Info.TongThuNhap),
                new SqlParameter("@SoBHXH", l_Info.SoBHXH),
                new SqlParameter("@SoTKNH", l_Info.SoTKNH),
                new SqlParameter("@IdBank", l_Info.IDBank),
                new SqlParameter("@ChiNhanhNH", l_Info.ChiNhanhNH),
                new SqlParameter("@Email", l_Info.Email),
                new SqlParameter("@NguoiLienHe", l_Info.NguoiLLKhan),
                new SqlParameter("@QuanHeVoiNguoiLienHe", l_Info.QuanHeVoiNguoiLL),
                new SqlParameter("@SDT_NguoiLienHe", l_Info.SDTLienLac),
                new SqlParameter("@TinhTrangHonNhan", l_Info.TinhTrangHonNhan),
                new SqlParameter("@NguoiQuanLi", l_Info.NguoiQuanLy),
                ////new SqlParameter("@DonHangFFDN", l_Info.DonHangFFDN),
                ////new SqlParameter("@SoTienDNHoTro", l_Info.SoTienDNHoTro),
                new SqlParameter("@CreateBy", UserManager.CurrentUser.InsideCode),
                new SqlParameter("@Note", l_Info.Note),
                new SqlParameter("@FileAttachName", l_ListFName != "" ? l_ListFName.Substring(1) : ""),
                new SqlParameter("@ChiNhanhDN", l_Info.ChiNhanhDN),
                new SqlParameter("@LoaiKH", l_Info.LoaiKH),
                new SqlParameter("@FromForm","L"),
                new SqlParameter("@NguoiLienHe_2", l_Info.NguoiLienHe_2 ),
                new SqlParameter("@SDT_NguoiLienHe_2", l_Info.SDT_NguoiLienHe_2 ),
                new SqlParameter("@QuanHeVoiNguoiLienHe_2", l_Info.QuanHeVoiNguoiLienHe_2 ),
                new SqlParameter("@AnhDaiDien", l_AnhDaiDien ),
                
                //▼	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================
                new SqlParameter("@AnhCIC", l__AnhCIC )
                //▲	Edit - VietMXH - 03/10/2018 - Ảnh CIC==================================================

            };
            DataTable table = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_InsertOrUpdate", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        /// <summary>GET: /Requests/InfoCustInstallmentOnline_SS_NhapImeiPO_CheckSO</summary>
        public ActionResult InfoCustInstallmentOnline_SS_NhapImeiPO_CheckSO(int p_IDFormDK)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@IDFormDK", p_IDFormDK)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_SS_NhapImeiPO_CheckSO", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }

        /// <summary>GET: /Requests/InfoCustInstallmentOnline_SS_NhapImeiPO_LoadInfo</summary>
        public ActionResult InfoCustInstallmentOnline_SS_NhapImeiPO_LoadInfo(int p_IDFormDK)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@IDFormDK", p_IDFormDK)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_SS_NhapImeiPO_LoadInfo", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }

        /// <summary>GET: /Requests/InfoCustInstallmentOnline_SS_HoanTatKG_CheckSO</summary>
        public ActionResult InfoCustInstallmentOnline_SS_HoanTatKG_CheckSO(int p_IDFormDK)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@IDFormDK", p_IDFormDK)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_SS_HoanTatKG_CheckSO", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }

        /// <summary>GET: /Requests/InfoCustInstallmentOnline_SS_HoanTatKG_LoadInfo</summary>
        public ActionResult InfoCustInstallmentOnline_SS_HoanTatKG_LoadInfo(int p_IDFormDK)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@IDFormDK", p_IDFormDK)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_SS_HoanTatKG_LoadInfo", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }

        /// <summary>GET: /Requests/InfoCustInstallmentOnline_SS_HoanTatKG_UpdateStatus</summary>
        public ActionResult InfoCustInstallmentOnline_SS_HoanTatKG_UpdateStatus(int p_IDFormDK)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@IDFormDK", p_IDFormDK),
                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_SS_HoanTatKG_UpdateStatus", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }

        /// <summary>GET: /Requests/InfoCustInstallmentOnline_SS_PrintXNMH_CheckSO</summary>
        public ActionResult InfoCustInstallmentOnline_SS_PrintXNMH_CheckSO(int p_IDFormDK)
        {
            SqlParameter[] l_SqlParameter = new SqlParameter[] {
                new SqlParameter("@IDFormDK", p_IDFormDK)
            };
            DataTable l_DataTable = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_SS_PrintXNMH_CheckSO", CommandType.StoredProcedure, l_SqlParameter);
            if (l_DataTable != null && l_DataTable.Rows.Count > 0)
            {
                var l_JsonResult = Json(l_DataTable.EParseToObjects(), JsonRequestBehavior.AllowGet);
                l_JsonResult.MaxJsonLength = int.MaxValue;
                return l_JsonResult;
            }
            return null;
        }
        public ActionResult FormPrintFFriendsSamSung(long idFormDK)
        {
            DataTable tb = sql.ExecuteCommand("LoadThongTinFormDK_HAXacNhanMuaHang", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@IDFormDK", idFormDK)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                ViewBag.STT = tb.Rows[0]["STT"].ToString();
                ViewBag.WarehouseName = tb.Rows[0]["WarehouseName"].ToString();
                ViewBag.NgayMuaHang = tb.Rows[0]["NgayMuaHang"].ToString();
                ViewBag.NgayIn = tb.Rows[0]["NgayIn"].ToString();
                ViewBag.CardName = tb.Rows[0]["CardName"].ToString();
                ViewBag.CMND = tb.Rows[0]["CMND"].ToString();
                ViewBag.SDT = tb.Rows[0]["SDT"].ToString();
                ViewBag.TenCty = tb.Rows[0]["TenCty"].ToString();
                ViewBag.AddressVendor = tb.Rows[0]["AddressVendor"].ToString();
                ViewBag.MaNV_KH = tb.Rows[0]["MaNV_KH"].ToString();
                ViewBag.DCThuongTru = tb.Rows[0]["DCThuongTru"].ToString();
                ViewBag.HoTen_NguoiNhanHang = tb.Rows[0]["HoTen_NguoiNhanHang"].ToString();
                ViewBag.CMND_NguoiNhanHang = tb.Rows[0]["CMND_NguoiNhanHang"].ToString();
                ViewBag.SDT_NguoiNhanHang = tb.Rows[0]["SDT_NguoiNhanHang"].ToString();
                ViewBag.SoSO = tb.Rows[0]["SoSO"].ToString();
                ViewBag.KyHan = tb.Rows[0]["KyHan"].ToString();
                ViewBag.SoTienTraTruoc = tb.Rows[0]["SoTienTraTruoc"].ToString();
                ViewBag.SoTienConLai = tb.Rows[0]["SoTienConLai"].ToString();
                ViewBag.PhaiTraMoiThang = tb.Rows[0]["PhaiTraMoiThang"].ToString();
                ViewBag.TongCong = tb.Rows[0]["TongCong"].ToString();
                ViewBag.DiaChi_NguoiNhanHang = tb.Rows[0]["DiaChi_NguoiNhanHang"].ToString();
                ViewBag.PhiTraCham = tb.Rows[0]["PhiTraCham"].ToString();
                ViewBag.SoPOSamSung = tb.Rows[0]["SoPOSamSung"].ToString();
                ViewBag.Is_SamSung_Online = tb.Rows[0]["Is_SamSung_Online"].ToString();
                ViewBag.SoTKNH = tb.Rows[0]["SoTKNH"].ToString();
                ViewBag.BankName = tb.Rows[0]["BankName"].ToString();
                ViewBag.NhanVienBanHang = tb.Rows[0]["NV_BanHang"].ToString();
                ViewBag.PhiHoSo = tb.Rows[0]["PhiHoSo"].ToString();
                ViewBag.SoPhieuDK = tb.Rows[0]["ViewBag__IDFormDK"].ToString();
                ViewBag.DanhSachSPMuaHang = tb.Rows;
            }
            return View();
        }
        /// <summary>GET: /Requests/FormPrintFFriendsSamSungTraThangTradeIn</summary>
        public ActionResult FormPrintFFriendsSamSungTraThangTradeIn(long idFormDK)
        {
            DataTable tb = sql.ExecuteCommand("LoadThongTinFormDK_HAXacNhanMuaHang_TraThangTradeIn", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@IDFormDK", idFormDK)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                ViewBag.WarehouseName = tb.Rows[0]["WarehouseName"].ToString();
                ViewBag.NgayIn = tb.Rows[0]["NgayIn"].ToString();
                ViewBag.CardName = tb.Rows[0]["CardName"].ToString();
                ViewBag.CMND = tb.Rows[0]["CMND"].ToString();
                ViewBag.SDT = tb.Rows[0]["SDT"].ToString();
                ViewBag.TenCty = tb.Rows[0]["TenCty"].ToString();
                ViewBag.MaNV_KH = tb.Rows[0]["MaNV_KH"].ToString();
                ViewBag.AddressVendor = tb.Rows[0]["AddressVendor"].ToString();
                ViewBag.DCThuongTru = tb.Rows[0]["DCThuongTru"].ToString();
                ViewBag.SoPOSamSung = tb.Rows[0]["SoPOSamSung"].ToString();
                ViewBag.SoPhieuDK = idFormDK;
                ViewBag.NhanVienBanHang = tb.Rows[0]["NV_BanHang"].ToString();
                ViewBag.DanhSachSPMuaHang = tb.Rows;
                ViewBag.TongCong = tb.Rows[0]["TongCong"].ToString();
                ViewBag.TradeIn_GiaThuMua = tb.Rows[0]["TradeIn_GiaThuMua"].ToString();
                ViewBag.TradeIn_VoucherMoney = tb.Rows[0]["TradeIn_VoucherMoney"].ToString();
                ViewBag.TongThanhToan = tb.Rows[0]["TongThanhToan"].ToString();
            }
            return View();
        }
        /// <summary>GET: /Requests/InfoCustInstallmentOnline_TraThangTradeIn_SS_NhapImeiPO_CheckSO</summary>
        public ActionResult InfoCustInstallmentOnline_TraThangTradeIn_SS_NhapImeiPO_CheckSO(long IDFormDK)
        {
            DataTable tb = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_TraThangTradeIn_SS_NhapImeiPO_CheckSO", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@IDFormDK", IDFormDK)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var JsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                JsonResult.MaxJsonLength = int.MaxValue;
                return JsonResult;
            }
            return null;
        }
        /// <summary>GET: /Requests/InfoCustInstallmentOnline_TraThangTradeIn_SS_NhapImeiPO_LoadInfo</summary>
        public ActionResult InfoCustInstallmentOnline_TraThangTradeIn_SS_NhapImeiPO_LoadInfo(long IDFormDK)
        {
            DataTable tb = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_TraThangTradeIn_SS_NhapImeiPO_LoadInfo", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@IDFormDK", IDFormDK)
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var JsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                JsonResult.MaxJsonLength = int.MaxValue;
                return JsonResult;
            }
            return null;
        }
        /// <summary>GET: /Requests/InfoCustInstallmentOnline_TraThangTradeIn_SS_HoanTat</summary>
        public ActionResult InfoCustInstallmentOnline_TraThangTradeIn_SS_HoanTat(long IDFormDK)
        {
            DataTable tb = sql.ExecuteCommand("sp_InfoCustInstallmentOnline_TraThangTradeIn_SS_HoanTat", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@IDFormDK", IDFormDK),
                new SqlParameter("@UpdateBy", UserManager.CurrentUser.InsideCode),
            });
            if (tb != null && tb.Rows.Count > 0)
            {
                var JsonResult = Json(tb.EParseToObjects(), JsonRequestBehavior.AllowGet);
                JsonResult.MaxJsonLength = int.MaxValue;
                return JsonResult;
            }
            return null;
        }
        #endregion ===/Requests/InfoCustomerInstallmentOnline (Thông tin đăng ký trả góp)===

    }

    public class NhomMuaViewModel
    {
        public int IDCardCode { set; get; }
        public string CMND { get; set; }
        public string MaNV { get; set; }
        public int VendorCode { get; set; }
        public int IDGoc { get; set; }
        public string MaSP { get; set; }
        public int SL { get; set; }
        public string MaShop { get; set; }
        public int HinhThucGiaoHang { get; set; }
        public string DiaChiGiaoHang { get; set; }
        public DateTime NgayGiaoHang { get; set; }
        public string GhiChu { get; set; }
        public string HoTen_NguoiNhanHang { get; set; }
        public string CMND_NguoiNhanHang { get; set; }
        public string DiaChiGiaoHang_NguoiNhanHang { get; set; }
        public string SDT_NguoiNhanHang { get; set; }
        public string ThTinThuMua_SoChTuThuMua { set; get; }
    }

    //▼	Add - VietMXH - 30/10/2017 - Credit==================================================
    public class NhomMuaViewModel_Credit
    {
        public int IDCardCode { get; set; }
        public string CMND { get; set; }
        public string MaNV { get; set; }
        public int VendorCode { get; set; }
        public int IDGoc { get; set; }
        public string MaSP { get; set; }
        public int SL { get; set; }
        public string MaShop { get; set; }
        public int HinhThucGiaoHang { get; set; }
        public string DiaChiGiaoHang { get; set; }
        public DateTime NgayGiaoHang { get; set; }
        public string GhiChu { get; set; }
        public string HoTen_NguoiNhanHang { get; set; }
        public string CMND_NguoiNhanHang { get; set; }
        public string DiaChiGiaoHang_NguoiNhanHang { get; set; }
        public string SDT_NguoiNhanHang { get; set; }
    }
    //▲	Add - VietMXH - 30/10/2017 - Credit==================================================

    public class ThongTinKHMoi
    {
        public string VendorCode { get; set; }
        public string MaNV { get; set; }
        public string CMND { get; set; }
        public string PassPort { get; set; }
        public string TenKH { get; set; }
        public string SDT { get; set; }
        public string HoKhauThuongTru { get; set; }
        public string TinhThanhPho { get; set; }
        public string QuanHuyen { get; set; }
        public string PhuongXa { get; set; }
        public string NgaySinh { get; set; }
        public string NoiSinh { get; set; }
        public string GioiTinh { get; set; }
        public string NhomKH { get; set; }
        public string NgayCapCMND { get; set; }
        public string NoiCapCMND { get; set; }
        public string BoPhan { get; set; }
        public string ChucVu { get; set; }
        public string LoaiHD { get; set; }
        public string NgayKiHD { get; set; }
        public string TongThuNhap { get; set; }
        public string SoBHXH { get; set; }
        public string SoTKNH { get; set; }
        public string IDBank { get; set; }
        public string ChiNhanhNH { get; set; }
        public string Email { get; set; }
        public string NguoiLLKhan { get; set; }
        public string QuanHeVoiNguoiLL { get; set; }
        public string SDTLienLac { get; set; }
        public string Note { get; set; }
        public string TinhTrangHonNhan { get; set; }
        public string NguoiQuanLy { get; set; }
        public string DonHangFFDN { get; set; }
        public string SoTienDNHoTro { get; set; }
        public string ChiNhanhDN { get; set; }
        public string LoaiKH { get; set; }

        //▼	Edit - VietMXH - 02/02/2018 - Info CMND + Người liên hệ + Chân dung==================================================
        public string NguoiLienHe_2 { get; set; }
        public string SDT_NguoiLienHe_2 { get; set; }
        public string QuanHeVoiNguoiLienHe_2 { get; set; }
        //▲	Edit - VietMXH - 02/02/2018 - Info CMND + Người liên hệ + Chân dung==================================================

    }

    //▼	Edit - VietMXH - 08/05/2018 - Đổi Store có IDCardCode==================================================
    public class InfoCustInstallmentOnline
    {
        public string IDCardCode { get; set; }
        public string VendorCode { get; set; }
        public string MaNV { get; set; }
        public string CMND { get; set; }
        public string PassPort { get; set; }
        public string TenKH { get; set; }
        public string SDT { get; set; }
        public string HoKhauThuongTru { get; set; }
        public string TinhThanhPho { get; set; }
        public string QuanHuyen { get; set; }
        public string PhuongXa { get; set; }
        public string NgaySinh { get; set; }
        public string NoiSinh { get; set; }
        public string GioiTinh { get; set; }
        public string NhomKH { get; set; }
        public string NgayCapCMND { get; set; }
        public string NoiCapCMND { get; set; }
        public string BoPhan { get; set; }
        public string ChucVu { get; set; }
        public string LoaiHD { get; set; }
        public string NgayKiHD { get; set; }
        public string TongThuNhap { get; set; }
        public string SoBHXH { get; set; }
        public string SoTKNH { get; set; }
        public string IDBank { get; set; }
        public string ChiNhanhNH { get; set; }
        public string Email { get; set; }
        public string NguoiLLKhan { get; set; }
        public string QuanHeVoiNguoiLL { get; set; }
        public string SDTLienLac { get; set; }
        public string Note { get; set; }
        public string TinhTrangHonNhan { get; set; }
        public string NguoiQuanLy { get; set; }
        public string DonHangFFDN { get; set; }
        public string SoTienDNHoTro { get; set; }
        public string ChiNhanhDN { get; set; }
        public string LoaiKH { get; set; }
        public string NguoiLienHe_2 { get; set; }
        public string SDT_NguoiLienHe_2 { get; set; }
        public string QuanHeVoiNguoiLienHe_2 { get; set; }
    }
    //▲	Edit - VietMXH - 08/05/2018 - Đổi Store có IDCardCode==================================================

    public class ThanhToanNoTheoKy
    {

        public string IDCardCode { get; set; }
        public string SoTienThanhToan { get; set; }
        public string GhiChu { get; set; }
        public string SoSO { get; set; }

        //▼	Edit - VietMXH - 08/01/2018 - Subsidy==================================================
        public string LoaiTruyThu { get; set; }
        public string TinhThuTien { get; set; }
        public string NgayGiaoDich { get; set; }
        //▲	Edit - VietMXH - 08/01/2018 - Subsidy==================================================

        //▼	Edit - VietMXH - 18/09/2018 - Ngân hàng tiền về==================================================
        public string MaNganHang { get; set; }
        //▲	Edit - VietMXH - 18/09/2018 - Ngân hàng tiền về==================================================

    }
    public class DonHangDoanhNghiep
    {
        public string IdCardCode { get; set; }
        public string MaShop { get; set; }
        public string MaSP { get; set; }
        public string SoLuong { get; set; }
        public string ThanhTien { get; set; }
        public string SoTienTraTruoc { get; set; }
        public string KiHan { get; set; }
        public string GhiChu { get; set; }
        public string HinhThucGH { get; set; }
        public string DiaChiGH { get; set; }
    }
    public class InfoBipResponse
    {
        private int _status = -10000;
        public int Status
        {
            get { return _status; }
            set { _status = value; }
        }

        private string _messageid = "";
        public string MessageId
        {
            get { return _messageid; }
            set { _messageid = value; }
        }

        private string _destination = "";
        public string Destination
        {
            get { return _destination; }
            set { _destination = value; }
        }
    }
    public class IMEI_FinalSanPham
    {

        public long ID { get; set; }
        public string IMEI { get; set; }
        public string SoPOSamSung { get; set; }
    }
    public class LuuThongTinDonHang
    {
        public string IDFormDK { get; set; }
        public string Shop { get; set; }
        public string SanPham { get; set; }
        public string ThanhTien { get; set; }
        public string SoTienTraTruoc { get; set; }
        public string NgayDenShop { get; set; }
        public string GhiChu { get; set; }
        public string IDCardCode { get; set; }
        public string HinhThucGiao { get; set; }
        public string DiaChi { get; set; }
        public string HoTenNguoiNhan { get; set; }
        public string CMNDNguoiNhan { get; set; }
        public string SDTNguoiNhan { get; set; }
        public string DiaChiNguoiNhan { get; set; }
        public string OtpCode { get; set; }
        public string KiHan { get; set; }
        public string NV_BanHang { get; set; }
        public string DH_SamSung_Online { get; set; }

        //▼ Add - VietMXH - 30/09/2017 - Thêm BankCard====================================================================================================
        public string BankCard { set; get; }
        //▲ Add - VietMXH - 30/09/2017 - Thêm BankCard====================================================================================================

        //▼	Edit - VietMXH - 07/08/2018 - Check SM/PSM==================================================
        public string AuthenBy { set; get; }
        //▲	Edit - VietMXH - 07/08/2018 - Check SM/PSM==================================================

    }
}
