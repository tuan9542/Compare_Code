using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using WebCallLog.DAL;
using WebCallLog.Helpers;
using WebCallLog.Models;
using System.Web.Script.Serialization;
using System.Net.Http;
using Newtonsoft.Json.Converters;
using System.IO;
using OfficeOpenXml;
using System.Linq.Dynamic; // add reference system.linq.dynamic
using System.Reflection; // add reference system.linq.dynamic
using System.Xml.Serialization;

namespace WebCallLog.Controllers
{
    public class ConfigController : Controller
    {
        CallLogDbContext db = new CallLogDbContext();
        SqlDBHelper sql = new SqlDBHelper();
        public ActionResult Index()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            return View();
        }

        public string Create(string form)
        {
            if (form != null && form != "")
            {
                var obj = JsonConvert.DeserializeObject<dynamic>(form.ToString());
                Config cog = new Config();
                cog.TypeId = obj.TypeId;
                cog.HeaderText = obj.HeaderText;
                cog.Text = obj.Text;
                cog.Index = obj.Index;
                cog.HasLoadAll = obj.HasLoadAll;
                cog.HasSum = obj.HasSum;
                cog.DataSource = obj.DataSource;
                cog.Property1 = obj.Property1;
                cog.Property2 = obj.Property2;
                cog.Property3 = obj.Property3;
                cog.Property4 = obj.Property4;
                cog.Property5 = obj.Property5;
                cog.DataType = obj.DataType;
                cog.TimeCreate = DateTime.Now;
                cog.CreateBy = UserManager.CurrentUser.InsideCode;
                cog.Status = Key.Status.Available;
                db.Configs.Add(cog);
                db.SaveChanges();
                return "success";
            }
            return "faild";
        }
        public string Edit(string form)
        {
            if (form != null && form != "")
            {
                var obj = JsonConvert.DeserializeObject<dynamic>(form.ToString());
                int id = obj.Id;
                Config cog = db.Configs.FirstOrDefault(x => x.Id == id);
                if (cog != null)
                {
                    cog.TypeId = obj.TypeId;
                    cog.HeaderText = obj.HeaderText;
                    cog.Text = obj.Text;
                    cog.Index = obj.Index;
                    cog.HasLoadAll = obj.HasLoadAll;
                    cog.HasSum = obj.HasSum;
                    cog.DataSource = obj.DataSource;
                    cog.Property1 = obj.Property1;
                    cog.Property2 = obj.Property2;
                    cog.Property3 = obj.Property3;
                    cog.Property4 = obj.Property4;
                    cog.Property5 = obj.Property5;
                    cog.DataType = obj.DataType;
                    cog.TimeCreate = DateTime.Now;
                    cog.CreateBy = UserManager.CurrentUser.InsideCode;
                    cog.Status = Key.Status.Available;
                    db.Configs.Add(cog);
                    db.SaveChanges();
                    return "success";
                }
                return "faild";
            }
            return "faild";
        }

        public string Delete(int id)
        {
            Config cog = db.Configs.FirstOrDefault(x => x.Id == id);
            if (cog != null)
            {
                db.Configs.Remove(cog);
                db.SaveChanges();
                return "success";
            }
            return "faild";
        }
        public ActionResult Detail(int id)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@ConfigId", id) };
            DataTable table = sql.ExecuteCommand("Config_Detail", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> catagories = table.EParseToObjects();
                return Json(catagories, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }

        public ActionResult LoadTable(int id)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@TypeId", id) };
            DataTable table = sql.ExecuteCommand("Config_LoadTable", CommandType.StoredProcedure, param);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> catagories = table.EParseToObjects();
                return Json(catagories, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        public ActionResult GetCategories()
        {
            DataTable table = sql.ExecuteCommand("Categories_Get", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                List<Dictionary<string, object>> catagories = table.EParseToObjects();
                return Json(catagories, JsonRequestBehavior.AllowGet);
            }
            else return null;
        }
        public ActionResult GetColumn(int id, string type)
        {
            var column = (from c in db.Configs
                          where c.TypeId == id && c.DataType == type
                          select c);
            return Json(column, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetColumnDataSource(int id, string type)
        {
            var column = (from c in db.Configs
                          where c.TypeId == id && c.DataSource == type
                          select c);
            return Json(column, JsonRequestBehavior.AllowGet);
        }
        public ActionResult Schedule()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            List<SelectListItem> lstThang = new List<SelectListItem>();
            for (int i = 1; i <= 12; i++)
            {
                if (DateTime.Now.Month == i)
                    lstThang.Add(new SelectListItem { Value = i.ToString(), Text = i.ToString(), Selected = true });
                else
                    lstThang.Add(new SelectListItem { Value = i.ToString(), Text = i.ToString() });
            }

            ViewBag.MonthYearShow = DateTime.Now.ToString("MMMM") + " " + DateTime.Now.Year.ToString();

            List<SelectListItem> lstnam = new List<SelectListItem>();
            for (int i = DateTime.Now.Year - 1; i <= DateTime.Now.Year + 1; i++)
            {
                if (DateTime.Now.Year == i)
                    lstnam.Add(new SelectListItem { Value = i.ToString(), Text = i.ToString(), Selected = true });
                else
                    lstnam.Add(new SelectListItem { Value = i.ToString(), Text = i.ToString() });
            }

            ViewBag.ThangHienTai = lstThang;
            ViewBag.NamHienTai = lstnam;

            List<SelectListItem> calendarType = new List<SelectListItem>();
            DataTable tb = sql.ExecuteCommand("Get_CalendarType", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                foreach (DataRow row in tb.Rows)
                {
                    calendarType.Add(new SelectListItem { Value = row["ID"].ToString(), Text = row["CalendarName"].ToString() });
                }

                ViewBag.CalenderType = calendarType;
            }
            ViewBag.DateNow = DateTime.Now.ToString("dd/M/yyyy");
            return View();
        }
        public ActionResult GetRegionTree()
        {
            DataTable table = sql.ExecuteCommand("Get_Region", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetOrganizationTree()
        {
            DataTable table = sql.ExecuteCommand("Get_Organization", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetJobtitleByOrganizationRegion(string organizationCode, string regionCode)
        {
            DataTable table = sql.ExecuteCommand("GetJobtitleByOrganizationRegion", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@OrganizationHierarchyCode", organizationCode),
                new SqlParameter("@RegionHierarchyCode", regionCode)

            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult Get_Employees_ByJobtitle(string jobtitleCode = "")
        {
            DataTable table = sql.ExecuteCommand("Get_Employees_ByJobtitle", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@JobtitleCode",jobtitleCode)
            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetShopByOrganRegion(string organizationCode, string regionCode)
        {
            DataTable table = sql.ExecuteCommand("Get_ShopByOrganizationRegion", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@Organization", organizationCode),
                new SqlParameter("@Region", regionCode)

            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string CreateEventCalendar(Event_Header event_header, IEnumerable<Event_DetailsShop> event_details)
        {
            using (DataTable dt = new DataTable())
            {
                dt.Columns.Add("OrganizationCode", typeof(string));
                dt.Columns.Add("RegionCode", typeof(string));
                dt.Columns.Add("ShopCode", typeof(string));
                dt.Columns.Add("JobtitleCode", typeof(string));

                foreach (Event_DetailsShop item in event_details)
                {
                    dt.Rows.Add(
                        item.OrganizationCode,
                        item.RegionCode,
                        item.ShopCode,
                        item.JobtitleCode
                    );
                }
                SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@EventID",event_header.EventID),
                    new SqlParameter("@CalendarType",event_header.CalendarType),
                    new SqlParameter("@RequestType",event_header.RequestType),
                    new SqlParameter("@EventTitle",event_header.EventTitle),
                    new SqlParameter("@EventContent",event_header.EventContent),
                    new SqlParameter("@User",UserManager.CurrentUser.InsideCode),
                    new SqlParameter("@ListPaymentDate",event_header.ListPayment),
                    new SqlParameter("@Table",dt)
                };
                DataTable table = sql.ExecuteCommand("Event_CreateCalendar", CommandType.StoredProcedure, param);
                if (table != null && table.Rows.Count > 0)
                {
                    //var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    //jsonResult.MaxJsonLength = int.MaxValue;
                    return table.Rows[0][0].ToString();
                }
            }
            return string.Empty;
        }
        public ActionResult Get_EventPayment(string jobtitleCreate, string employCreate, string shopReceive, string employReceive, int month, int year)
        {
            DataTable table = sql.ExecuteCommand("Get_EventPayment", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@JobtitleCreate",jobtitleCreate),
                new SqlParameter("@EmployeeCreate",employCreate),
                new SqlParameter("@ShopReceive",shopReceive),
                new SqlParameter("@EmployeeReceive",employReceive),
                new SqlParameter("@Month",month),
                new SqlParameter("@Year",year),
                new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult Get_DetailCalendar(long eventID)
        {
            DataTable table = sql.ExecuteCommand("Get_EventDetailCalendars", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@EventID",eventID)
            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string Delete_EventCalendar(long eventID, string paymentDate = "")
        {
            DataTable table = sql.ExecuteCommand("Event_DeleteCalendar", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@EventID",eventID),
                new SqlParameter("@PaymentDate",paymentDate),
                new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
            });
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return "1";
            }
            return "0";
        }
        public string Accept_EventCalendar(long eventID)
        {
            DataTable table = sql.ExecuteCommand("Event_AcceptCalendar", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@EventID",eventID),
                new SqlParameter("@User",UserManager.CurrentUser.InsideCode)
            });
            if (table != null && table.Rows.Count > 0 && table.Rows[0][0].ToString() == "1")
            {
                return "1";
            }
            return "2";
        }
        public ActionResult GetOrganAndRegionByShop(string shopCode)
        {
            DataTable table = sql.ExecuteCommand("GetRegionAndOrganizationByShopCode", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@ShopCode", shopCode)

            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetShopByAssignmentQuyOfUser()
        {
            DataTable table = sql.ExecuteCommand("LoadShopByAssigmentQuyOfUser", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@User", UserManager.CurrentUser.InsideCode)

            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetAllJobTitle()
        {
            DataTable table = sql.ExecuteCommand("Get_AllJobTitle", CommandType.StoredProcedure, null);
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public ActionResult GetEmployeeByShopCode(string shopCode)
        {
            DataTable table = sql.ExecuteCommand("Get_EmployeeByShop", CommandType.StoredProcedure, new SqlParameter[] {
                new SqlParameter("@ShopCode",shopCode)
            });
            if (table != null && table.Rows.Count > 0)
            {
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;
        }
        public string Check_Holiday(string timeCheck)
        {
            DataTable table = sql.ExecuteCommand("Check_Holiday", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@TimeCheck", timeCheck)

            });
            if (table != null && table.Rows.Count > 0)
            {
                return "1";
            }
            return string.Empty;
        }
        public ActionResult CreateSchedule()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            List<SelectListItem> calendarType = new List<SelectListItem>();
            DataTable tb = sql.ExecuteCommand("Get_CalendarType", CommandType.StoredProcedure, null);
            if (tb != null && tb.Rows.Count > 0)
            {
                foreach (DataRow row in tb.Rows)
                {
                    calendarType.Add(new SelectListItem { Value = row["ID"].ToString(), Text = row["CalendarName"].ToString() });
                }

                ViewBag.CalenderType = calendarType;
            }
            ViewBag.DateNow = DateTime.Now.ToString("dd/M/yyyy");
            return View();
        }
        //▼  Add - LuanNT44 - 28/05/2019 - Màn hình định nghĩa chiến giá
        public ActionResult PriceWarDefine()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            return View();
        }
        public ActionResult GetAllShop()
        {
            DataTable table = sql.ExecuteCommand("sp_GetAllShopFRT", CommandType.StoredProcedure, null);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetListOfCompetitors()
        {
            DataTable table = sql.ExecuteCommand("sp_GetListOfCompetitors", CommandType.StoredProcedure, null);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        public ActionResult InsertListOfCompetitors(string NameCompetitors)
        {
            string CreateBy = UserManager.CurrentUser.InsideCode.ToString();
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@NameCompetitors", NameCompetitors), new SqlParameter("@CreateBy", CreateBy) };
            DataTable table = sql.ExecuteCommand("sp_insertListOfCompetitors", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        public ActionResult LoadDataCompetitorOfWarehouse(string[] ShopName, string[] Competitor, string Type)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ShopName", String.Join(",",ShopName)),
                new SqlParameter("@Competitor",String.Join("," ,Competitor)) ,
                new SqlParameter("@Type", Type)
            };
            DataTable table = sql.ExecuteCommand("sp_LoadDataCompetitorOfWarehouse", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        public ActionResult UpdateStatusCompetitorOfWarehouse(string ID)
        {
            string CreateBy = UserManager.CurrentUser.InsideCode.ToString();
            long Id = long.Parse(ID);
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@ID", Id), new SqlParameter("@UpdateBy", CreateBy) };
            DataTable table = sql.ExecuteCommand("sp_UpdateStatusCompetitorOfWarehouse", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetExelCompetitorOfWarehouse(FormCollection form)
        {
            string ShopName = form["shopchiengia"];
            string Competitor = form["doithu"];
            int Type = int.Parse(form["optradio"] == null ? "0" : form["optradio"].ToString());
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ShopName", String.Join(",",ShopName)),
                new SqlParameter("@Competitor",String.Join("," ,Competitor)) ,
                new SqlParameter("@Type", Type)
            };
            DataTable table = sql.ExecuteCommand("sp_LoadDataCompetitorOfWarehouse", CommandType.StoredProcedure, param);
            if (table.Rows.Count > 0)
            {
                string fileTemplate = "/TemplateExcel/BaoCaoDinhNghiaChienGia.xlsx";
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                        int index = 2;
                        int row_STT = 1;
                        foreach (DataRow row in table.Rows)
                        {
                            int col = 0;
                            col++; worksheet.Cells[index, col].Value = row_STT;
                            col++; worksheet.Cells[index, col].Value = row["shop"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["khuvuc"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["tinh"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["vung"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["shopdoithu"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["loaichiengia"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["nguoithaotac"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["ngaythuchien"].ToString();

                            index++;
                            row_STT++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=BaoCaoDinhNghiaChienGia-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }

            return RedirectToAction("PriceWarDefine");
        }
        public ActionResult CreateCompetitorOfWarehouse(string[] ShopName, string[] Competitor, string Type)
        {
            string CreateBy = UserManager.CurrentUser.InsideCode.ToString();
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Shop", String.Join(",",ShopName)),
                new SqlParameter("@Competitor",String.Join("," ,Competitor)) ,
                new SqlParameter("@Type", Type),
                new SqlParameter("@CreateBy", CreateBy)
            };
            DataTable table = sql.ExecuteCommand("sp_CreateCompetitorOfWarehouse", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }
        //▲  Add - LuanNT44 - 28/05/2019 - Màn hình định nghĩa chiến giá 

        #region # Duyệt đề nghị thanh toán -- tích hợp với mobile
        public ActionResult BrowserPaymentRequest()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }

            string UserRole_Region = "";
            DataTable table_UserRole = sql.ExecuteCommand("sp_FRTCallLog_Web_BrowserPaymentRequest_GetRoleUser", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            });
            if(table_UserRole != null && table_UserRole.Rows.Count > 0)
            {
                UserRole_Region = table_UserRole.Rows[0]["UserRole_Region"].ToString();
            }
            if (UserRole_Region == "")
            {
                TempData["Message"] = String.Format("Bạn không được phân quyền xem và xử lý dữ liệu!", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }

            DataTable tinhthanh = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetTinhThanh", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@RoleRegions", UserRole_Region)
            });
            var jsonResult = Json(tinhthanh.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            ViewBag.TinhThanh = jsonResult;

            string list_TinhTP = "";
            if(tinhthanh != null && tinhthanh.Rows.Count > 0)
            {
                list_TinhTP = string.Join(",", tinhthanh.Rows.OfType<DataRow>().Select(r => r["value"].ToString()));
            }
            DataTable tableQH = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetQuanHuyen", CommandType.StoredProcedure, new SqlParameter[]
            {
                new SqlParameter("@ListCity", list_TinhTP)
            });

            var jsonResultQH = Json(tableQH.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResultQH.MaxJsonLength = int.MaxValue;
            ViewBag.QuanHuyen = jsonResultQH;
            DataTable LoaiHD = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetLoaiKyHD", CommandType.StoredProcedure, null);
            var jsonResult1 = Json(LoaiHD.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult1.MaxJsonLength = int.MaxValue;
            ViewBag.LoaiHD = jsonResult1;
            DataTable NganHang = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetBank", CommandType.StoredProcedure, null);
            var jsonResult2 = Json(NganHang.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult2.MaxJsonLength = int.MaxValue;
            ViewBag.NganHang = jsonResult2;
            DataTable Thue = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetThue", CommandType.StoredProcedure, null);
            var jsonResult3 = Json(Thue.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult3.MaxJsonLength = int.MaxValue;
            ViewBag.Thue = jsonResult3;
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
                new SqlParameter("@RoleRegions", UserRole_Region)
            };
            DataTable handsontable = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetDataHandsontable", CommandType.StoredProcedure, param);
            var jsonResulthandsontable = Json(handsontable.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResulthandsontable.MaxJsonLength = int.MaxValue;
            ViewBag.Handsontable = jsonResulthandsontable;

            SqlParameter[] parambutton = new SqlParameter[]
            {
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            };
            DataTable button = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_RenderButton", CommandType.StoredProcedure, parambutton);
            var jsonResultbutton = Json(button.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResultbutton.MaxJsonLength = int.MaxValue;
            ViewBag.Button = jsonResultbutton;
            SqlParameter[] paramshop = new SqlParameter[]
            {
                new SqlParameter("@RoleRegions", UserRole_Region)
            };
            DataTable tableshop = sql.ExecuteCommand("sp_FRTCallLog_Web_BrowserPaymentRequest_GetWarehouse", CommandType.StoredProcedure, paramshop);
            var jsonResultshop = Json(tableshop.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResultshop.MaxJsonLength = int.MaxValue;
            ViewBag.Shop = jsonResultshop;

            DataTable tablePB = sql.ExecuteCommand("sp_FRTCallLog_Web_BrowserPaymentRequest_OrganizationHierachies", CommandType.StoredProcedure, new SqlParameter[] { });
            var jsonResultPB = Json(tablePB.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResultPB.MaxJsonLength = int.MaxValue;
            ViewBag.PhongBan = jsonResultPB;
            return View();
        }

        //▼  Add - TuanNA89 - 26/12/2019 - Màn hình hợp đồng thuê nhà
        public ActionResult BrowserPaymentRequest__BAK20201005()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            #region ==== Load Data ====
            DataTable tbl_LoaiHD = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetLoaiKyHD", CommandType.StoredProcedure, null);
            var js_LoaiHD = Json(tbl_LoaiHD.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_LoaiHD.MaxJsonLength = int.MaxValue;
            ViewBag.LoaiHD = js_LoaiHD;

            DataTable tbl_NganHang = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetBank", CommandType.StoredProcedure, null);
            var js_NganHang = Json(tbl_NganHang.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_NganHang.MaxJsonLength = int.MaxValue;
            ViewBag.NganHang = js_NganHang;

            DataTable tbl_Thue = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetThue", CommandType.StoredProcedure, null);
            var js_Thue = Json(tbl_Thue.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_Thue.MaxJsonLength = int.MaxValue;
            ViewBag.Thue = js_Thue;

            DataTable tbl_HTTT = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetHTTT", CommandType.StoredProcedure, null);
            var js_HTTT = Json(tbl_HTTT.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_HTTT.MaxJsonLength = int.MaxValue;
            ViewBag.HTTT = js_HTTT;

            DataTable tbl_HTTTThue = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetHTTTThue", CommandType.StoredProcedure, null);
            var js_HTTTThue = Json(tbl_HTTTThue.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_HTTT.MaxJsonLength = int.MaxValue;
            ViewBag.HTTTThue = js_HTTTThue;

            DataTable tbl_KyHan = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetKyHan", CommandType.StoredProcedure, null);
            var js_KyHan = Json(tbl_KyHan.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_KyHan.MaxJsonLength = int.MaxValue;
            ViewBag.KyHanTT = js_KyHan;

            DataTable tbl_DonViTinh = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetDonVi", CommandType.StoredProcedure, null);
            var js_DonViTinh = Json(tbl_DonViTinh.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_DonViTinh.MaxJsonLength = int.MaxValue;
            ViewBag.DonViTinh = js_DonViTinh;

            DataTable tbl_Status = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetStatus", CommandType.StoredProcedure, null);
            var js_Status = Json(tbl_Status.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_Status.MaxJsonLength = int.MaxValue;
            ViewBag.TrangThai = js_Status;

            DataTable tbl_Region = sql.ExecuteCommand("sp_FRTCallLog_Web_BrowserPaymentRequest_GetRegion", CommandType.StoredProcedure
                                                        , new SqlParameter[] {
                                                            new SqlParameter("@InsideCode", UserManager.CurrentUser.InsideCode)
                                                        }
            );
            var js_Region = Json(tbl_Region.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_Region.MaxJsonLength = int.MaxValue;
            ViewBag.Regions = js_Region;

            string str_Regions = "";
            if (tbl_Region.Rows.Count > 0)
            {
                str_Regions += string.Join(",", tbl_Region.Rows.OfType<DataRow>().Select(r => r[0].ToString()));
            }

            DataTable tbl_TinhThanh = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetTinhThanh", CommandType.StoredProcedure
                                                        , new SqlParameter[] {
                                                            new SqlParameter("@Regions", str_Regions)
                                                        });
            var js_TinhThanh = Json(tbl_TinhThanh.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_TinhThanh.MaxJsonLength = int.MaxValue;
            ViewBag.TinhThanh = js_TinhThanh;

            string str_TinhThanh = "";
            if (tbl_TinhThanh.Rows.Count > 0)
            {
                str_TinhThanh += string.Join(",", tbl_TinhThanh.Rows.OfType<DataRow>().Select(r => r[0].ToString()));
            }

            DataTable tbl_QuanHuyen = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetQuanHuyen", CommandType.StoredProcedure
                                                    , new SqlParameter[] {
                                                        new SqlParameter("@IDCity", str_TinhThanh)
                                                    }
            );
            var js_QuanHuyen = Json(tbl_QuanHuyen.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_QuanHuyen.MaxJsonLength = int.MaxValue;
            ViewBag.QuanHuyen = js_QuanHuyen;

            DataTable tbl_Shop = sql.ExecuteCommand("sp_FRTCallLog_Web_BrowserPaymentRequest_GetWarehouse", CommandType.StoredProcedure
                                                    , new SqlParameter[] {
                                                        new SqlParameter("@Type", 3) ,
                                                        new SqlParameter("@Regions", str_Regions),
                                                    }
             );
            var js_Shop = Json(tbl_Shop.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_Shop.MaxJsonLength = int.MaxValue;
            ViewBag.Shops = js_Shop;

            DataTable tbl_Button = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_RenderButton", CommandType.StoredProcedure
                                                    , new SqlParameter[] {
                                                        new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
                                                    }
            );
            var js_Button = Json(tbl_Button.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_Button.MaxJsonLength = int.MaxValue;
            ViewBag.Button = js_Button;

            string str_TrangThai = "", str_Shops = "";
            if (tbl_Button != null && tbl_Button.Rows.Count > 0)
            {
                if (tbl_Button.Rows[0]["CapNhat"].ToString() == "A")
                {
                    str_TrangThai = "1,2,5";
                }
                else
                {
                    str_TrangThai = "3,4,";
                }
            }
            if (tbl_Shop != null && tbl_Button.Rows.Count > 0)
            {
                str_Shops += string.Join(",", tbl_Shop.Rows.OfType<DataRow>().Select(r => r[0].ToString()));
            }
            DataTable tbl_Handsontable = sql.ExecuteCommand("sp_FRT_Web_SearchBrowserPaymentRequest_GetDataHandsontable_New", CommandType.StoredProcedure
                                                    , new SqlParameter[] {
                                                        new SqlParameter("@Shop", str_Shops),
                                                        new SqlParameter("@TrangThai", str_TrangThai),
                                                    }
            );
            var js_Handsontable = Json(tbl_Handsontable.EParseToObjects(), JsonRequestBehavior.AllowGet);
            js_Handsontable.MaxJsonLength = int.MaxValue;
            ViewBag.Handsontable = js_Handsontable;


            #endregion
            return View();
        }

        public ActionResult GetWarehouseByType(int type)
        {
            string UserRole_Region = "";
            DataTable table_UserRole = sql.ExecuteCommand("sp_FRTCallLog_Web_BrowserPaymentRequest_GetRoleUser", CommandType.StoredProcedure, new SqlParameter[]{
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            });
            if (table_UserRole != null && table_UserRole.Rows.Count > 0)
            {
                UserRole_Region = table_UserRole.Rows[0]["UserRole_Region"].ToString();
            }

            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Type", type),
                new SqlParameter("@RoleRegions", UserRole_Region),
            };
            DataTable table = sql.ExecuteCommand("sp_FRTCallLog_Web_BrowserPaymentRequest_GetWarehouse", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult BrowserPaymentRequest_GetDataById(int Id_RequestPayment = 0)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
                new SqlParameter("@Id", Id_RequestPayment)
            };
            DataSet ds = sql.ExecuteCommandDataSet("sp_FRT_Web_BrowserPaymentRequest_GetDataHandsontable", CommandType.StoredProcedure, param);

            var jsonResult = Json(JsonConvert.SerializeObject(ds), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult GetQuanHuyenByIDCity(int IDcity)
        {
            SqlParameter[] paramqh = new SqlParameter[]
            {
                new SqlParameter("@IDCity", IDcity)
            };
            DataTable tableQH = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetQuanHuyen", CommandType.StoredProcedure, paramqh);
            var jsonResultQH = Json(tableQH.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResultQH.MaxJsonLength = int.MaxValue;
            return jsonResultQH;
        }

        [HttpPost]
        public ActionResult LoadDataTable(long id)
        {
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            string searchvalue = Request.Form.GetValues("search[value]").FirstOrDefault();
            var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
            var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            int pageSize = length != null ? Convert.ToInt32(length) : 0;
            int skip = start != null ? Convert.ToInt32(start) : 0;
            int recordsTotal = 0;
            var _sStore = "EXEC sp_FRT_Web_BrowserPaymentRequest_GetPriceMonth @Id={0}";
            var listProduct = Execute<Month_Price>(_sStore, id);
            if (!(string.IsNullOrEmpty(searchvalue)))
            {
                List<Month_Price> listSearch = listProduct.FindAll(l => l.FromDate.ToLower().Contains(searchvalue.ToLower()) == true);
                listProduct = listSearch;
            }
            if (!(string.IsNullOrEmpty(sortColumn) && string.IsNullOrEmpty(sortColumnDir)))
            {
                listProduct = listProduct.OrderBy(sortColumn + " " + sortColumnDir).ToList();
            }
            recordsTotal = listProduct.Count();
            var data = listProduct.Skip(skip).Take(pageSize).ToList();
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult LoadDataTableHistory(long id)
        {
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            string searchvalue = Request.Form.GetValues("search[value]").FirstOrDefault();
            var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault() + "][name]").FirstOrDefault();
            var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            int pageSize = length != null ? Convert.ToInt32(length) : 0;
            int skip = start != null ? Convert.ToInt32(start) : 0;
            int recordsTotal = 0;
            var _sStore = "EXEC sp_FRT_Web_BrowserPaymentRequest_GetHistoryById @Id={0}";
            var listProduct = Execute<RequestPayment_History>(_sStore, id);
            if (!(string.IsNullOrEmpty(searchvalue)))
            {
                List<RequestPayment_History> listSearch = listProduct.FindAll(l => l.UpdateBy.ToLower().Contains(searchvalue.ToLower()) == true);
                listProduct = listSearch;
            }
            if (!(string.IsNullOrEmpty(sortColumn) && string.IsNullOrEmpty(sortColumnDir)))
            {
                listProduct = listProduct.OrderBy(sortColumn + " " + sortColumnDir).ToList();
            }
            recordsTotal = listProduct.Count();
            var data = listProduct.Skip(skip).Take(pageSize).ToList();
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult InAcrtiveMonthPrice(long id)
        {
            SqlParameter[] param = new SqlParameter[] { new SqlParameter("@Id", id), new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode) };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_InActiveMonthPrice", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        [HttpPost]
        public ActionResult CreateMonthPrice(Month_Price month)
        {

            SqlParameter[] param = new SqlParameter[]
            { new SqlParameter("@Id", month.Id),
              new SqlParameter("@Fromdate", month.FromDate),
              new SqlParameter("@Todate", month.ToDate),
              new SqlParameter("@Money", month.Money),
              new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_CreateMonthPrice", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult ValidateBodyRequestPayment(List<RequestPaymentHome> request)
        {
            if (request.Count > 0)
            {
                DataTable dt = new DataTable();
                dt.Columns.Add("STT", typeof(int));
                dt.Columns.Add("Id", typeof(long));
                dt.Columns.Add("Status", typeof(int));
                dt.Columns.Add("urlHinh", typeof(string));
                dt.Columns.Add("LinkTaiLieuTongHop", typeof(string));
                dt.Columns.Add("TenChuNha", typeof(string));
                dt.Columns.Add("MaSoThue", typeof(string));
                dt.Columns.Add("SDT", typeof(string));
                dt.Columns.Add("ChuTK", typeof(string));
                dt.Columns.Add("STK", typeof(string));
                dt.Columns.Add("NganHang", typeof(int));
                dt.Columns.Add("ChiNhanhNganHang", typeof(string));
                dt.Columns.Add("LoaiShop", typeof(int));
                dt.Columns.Add("MaShop", typeof(string));
                dt.Columns.Add("TenShop", typeof(string));
                dt.Columns.Add("MaPhongBan", typeof(string));
                dt.Columns.Add("TenPhongBan", typeof(string));
                dt.Columns.Add("DiaChiShop", typeof(string));
                dt.Columns.Add("QuanHuyen", typeof(int));
                dt.Columns.Add("TinhTP", typeof(int));
                dt.Columns.Add("ViTriThucTe", typeof(string));
                dt.Columns.Add("LoaiKyHD", typeof(string));
                dt.Columns.Add("SoHD", typeof(string));
                dt.Columns.Add("NgayNhanMB", typeof(string));
                dt.Columns.Add("NgayTTTNha ", typeof(string));
                dt.Columns.Add("NgayBDHD", typeof(string));
                dt.Columns.Add("NgayKTHD", typeof(string));
                dt.Columns.Add("ThoiHanThue", typeof(string));
                dt.Columns.Add("TienDatCoc", typeof(double));
                dt.Columns.Add("DonVi", typeof(string));
                dt.Columns.Add("TiGia", typeof(double));
                dt.Columns.Add("HinhThucRutCoc", typeof(string));
                dt.Columns.Add("KyThanhToan", typeof(int));
                dt.Columns.Add("NgayBDTT", typeof(string));
                dt.Columns.Add("NgayTT", typeof(string));
                dt.Columns.Add("NgayDCGiaTT", typeof(string));
                dt.Columns.Add("DienTich", typeof(string));
                dt.Columns.Add("FRTChiuThue", typeof(string));
                dt.Columns.Add("Thue", typeof(int));
                dt.Columns.Add("SoTienChiuThue", typeof(double));
                dt.Columns.Add("TypeButton", typeof(int));
                foreach (RequestPaymentHome item in request)
                {
                    dt.Rows.Add(
                          item.STT
                          , item.Id
                          , item.Status
                          , item.urlHinh
                          , item.LinkTaiLieuTongHop
                          , item.TenChuNha
                          , item.MaSoThue
                          , item.SDT
                          , item.ChuTK
                          , item.STK
                          , item.NganHang
                          , item.CNNganHang
                          , item.LoaiShop
                          , item.MaShop
                          , item.TenShop
                          , item.MaPhongBan
                          , item.TenPhongBan
                          , item.DiaChiShop
                          , item.QuanHuyen
                          , item.TinhTP
                          , item.ViTriThucTe
                          , item.LoaiKyHD
                          , item.SoHD
                          , item.NgayNhanMB
                          , item.NgayTTTNha
                          , item.NgayBDHD
                          , item.NgayKTHD
                          , item.ThoiHanThue
                          , item.TienDatCoc
                          , item.DonVi
                          , item.TiGia
                          , item.HinhThucRutCoc
                          , item.KyThanhToan
                          , item.NgayBDTT
                          , item.NgayTT
                          , item.NgayDCGiaTT
                          , item.DienTich
                          , item.FRTChiuThue
                          , item.Thue
                          , item.SoTienChiuThue
                          , item.TypeButton
                        );
                }
                SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Table", dt),
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            };
                DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_ValidationBodyRequest", CommandType.StoredProcedure, param);
                var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else return null;
        }

        public ActionResult UpdateRequestPayment(List<RequestPaymentHome> request)
        {
            try
            {

                if (request.Count > 0)
                {
                    DataTable dt = new DataTable();
                    dt.Columns.Add("STT", typeof(int));
                    dt.Columns.Add("Id", typeof(long));
                    dt.Columns.Add("Status", typeof(int));
                    dt.Columns.Add("urlHinh", typeof(string));
                    dt.Columns.Add("LinkTaiLieuTongHop", typeof(string)); 
                    dt.Columns.Add("TenChuNha", typeof(string));
                    dt.Columns.Add("MaSoThue", typeof(string));
                    dt.Columns.Add("SDT", typeof(string));
                    dt.Columns.Add("ChuTK", typeof(string));
                    dt.Columns.Add("STK", typeof(string));
                    dt.Columns.Add("NganHang", typeof(int));
                    dt.Columns.Add("ChiNhanhNganHang", typeof(string));
                    dt.Columns.Add("LoaiShop", typeof(int));
                    dt.Columns.Add("MaShop", typeof(string));
                    dt.Columns.Add("TenShop", typeof(string));
                    dt.Columns.Add("MaPhongBan", typeof(string));
                    dt.Columns.Add("TenPhongBan", typeof(string));
                    dt.Columns.Add("DiaChiShop", typeof(string));
                    dt.Columns.Add("QuanHuyen", typeof(int));
                    dt.Columns.Add("TinhTP", typeof(int));
                    dt.Columns.Add("ViTriThucTe", typeof(string));
                    dt.Columns.Add("LoaiKyHD", typeof(string));
                    dt.Columns.Add("SoHD", typeof(string));
                    dt.Columns.Add("NgayNhanMB", typeof(string));
                    dt.Columns.Add("NgayTTTNha ", typeof(string));
                    dt.Columns.Add("NgayBDHD", typeof(string));
                    dt.Columns.Add("NgayKTHD", typeof(string));
                    dt.Columns.Add("ThoiHanThue", typeof(string));
                    dt.Columns.Add("TienDatCoc", typeof(double));
                    dt.Columns.Add("DonVi", typeof(string));
                    dt.Columns.Add("TiGia", typeof(double));
                    dt.Columns.Add("HinhThucRutCoc", typeof(string));
                    dt.Columns.Add("KyThanhToan", typeof(int));
                    dt.Columns.Add("NgayBDTT", typeof(string));
                    dt.Columns.Add("NgayTT", typeof(string));
                    dt.Columns.Add("NgayDCGiaTT", typeof(string));
                    dt.Columns.Add("DienTich", typeof(string));
                    dt.Columns.Add("FRTChiuThue", typeof(string));
                    dt.Columns.Add("Thue", typeof(int));
                    dt.Columns.Add("SoTienChiuThue", typeof(double));
                    dt.Columns.Add("TypeButton", typeof(int));
                    foreach (RequestPaymentHome item in request)
                    {
                        dt.Rows.Add(
                              item.STT
                              , item.Id
                              , item.Status
                              , item.urlHinh
                              , item.LinkTaiLieuTongHop
                              , item.TenChuNha
                              , item.MaSoThue
                              , item.SDT
                              , item.ChuTK
                              , item.STK
                              , item.NganHang
                              , item.CNNganHang
                              , item.LoaiShop
                              , item.MaShop
                              , item.TenShop
                              , item.MaPhongBan
                              , item.TenPhongBan
                              , item.DiaChiShop
                              , item.QuanHuyen
                              , item.TinhTP
                              , item.ViTriThucTe
                              , item.LoaiKyHD
                              , item.SoHD
                              , item.NgayNhanMB
                              , item.NgayTTTNha
                              , item.NgayBDHD
                              , item.NgayKTHD
                              , item.ThoiHanThue
                              , item.TienDatCoc
                              , item.DonVi
                              , item.TiGia
                              , item.HinhThucRutCoc
                              , item.KyThanhToan
                              , item.NgayBDTT
                              , item.NgayTT
                              , item.NgayDCGiaTT
                              , item.DienTich
                              , item.FRTChiuThue
                              , item.Thue
                              , item.SoTienChiuThue
                              , item.TypeButton
                            );
                    }
                    SqlParameter[] param = new SqlParameter[]
                    {
                        new SqlParameter("@Table", dt),
                        new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
                    };
                    DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_ButtonUpadte", CommandType.StoredProcedure, param);
                    var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else return null;
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("ConfigController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0}", ex.ToString()));
                return null;
            }
        }

        [HttpPost]
        public ActionResult UploadImageRequestPayment(FormCollection form)
        {
            try
            {
                if (Request.Files.Count > 0)
                {
                    foreach (string filename in Request.Files)
                    {
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "");
                        var path = string.Format("{0}\\{1}", pathString, filename);
                        if (!System.IO.File.Exists(path))
                        {
                            HttpPostedFileBase fileupload = Request.Files[filename];
                            fileupload.SaveAs(path);
                        }
                    }
                }
                return Json(new { success = true, file = Request.Files.Count }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("ConfigController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0}", ex.ToString()));
                return null;
            }
        }

        [HttpPost]
        public ActionResult UploadImageRequestPayment__BAK20201005(FormCollection form)
        {
            try
            {
                if (Request.Files.Count > 0)
                {
                    foreach (string filename in Request.Files)
                    {
                        var originalDirectory = new DirectoryInfo(Server.MapPath(Keyword.FolderFileAttach));
                        string pathString = System.IO.Path.Combine(originalDirectory.ToString(), "HDTN");

                        if (!Directory.Exists(pathString))
                        {
                            Directory.CreateDirectory(pathString);
                        }
                        var path = string.Format("{0}\\{1}", pathString, filename);
                        if (!System.IO.File.Exists(path))
                        {
                            HttpPostedFileBase fileupload = Request.Files[filename];
                            fileupload.SaveAs(path);
                        }
                    }
                }
                return Json(new { success = true, file = Request.Files.Count }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Logger.WriteLogError("ConfigController - " + MethodBase.GetCurrentMethod().Name + "()", String.Format("{0}", ex.ToString()));
                return null;
            }
        }

        public ActionResult LoadDataBrowserPaymentRequest(string typeshop, string[] shopname, string[] typecontract, string[] kyhanthanhtoan, string[] trangthai, string soHD, string[] phongBan)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@TypeShop",typeshop),
                new SqlParameter("@Shop", String.Join(",",shopname)),
                new SqlParameter("@TypeContract",String.Join(",",typecontract)),
                new SqlParameter("@KyHanThanhToan", String.Join(",",kyhanthanhtoan)),
                new SqlParameter("@TrangThai", String.Join(",",trangthai)),
                new SqlParameter("@soHD",soHD),
                new SqlParameter("@PhongBan", String.Join(",",phongBan)),
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode),
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_SearchBrowserPaymentRequest_GetDataHandsontable", CommandType.StoredProcedure, param);
            return Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetExelBrowserPaymentRequest(FormCollection form)
        {
            string typeshop = form["typeShop"];
            if (typeshop == "" || typeshop == null)
            {
                typeshop = "0";
            }
            string shopname = form["shop"];
            string typecontract = form["contract_type"];
            string kyhanthanhtoan = form["kyhan"];
            string trangthai = form["status"];
            string soHD = form["SoHdId"];
            string phongBan = form["phongban"];
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@TypeShop",typeshop),
                new SqlParameter("@Shop", String.Join(",",shopname)),
                new SqlParameter("@TypeContract",String.Join(",",typecontract)),
                new SqlParameter("@KyHanThanhToan", String.Join(",",kyhanthanhtoan)),
                new SqlParameter("@TrangThai", String.Join(",",trangthai)),
                new SqlParameter("@soHD",soHD),
                new SqlParameter("@PhongBan", String.Join(",",phongBan))
            };
            DataSet dataSet = sql.ExecuteCommandDataSet("sp_FRT_Web_SearchBrowserPaymentRequest_GetDataHandsontable", CommandType.StoredProcedure, param);
            if (dataSet != null && dataSet.Tables.Count > 0)
            {
                string fileTemplateName = "BaoCaoPaymentContractHome.xlsx";
                string fileTemplate = string.Format("{0}/{1}", "/TemplateExcel/Config", fileTemplateName);
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    var export = new ExportFiles();
                    string fileName = Path.GetFileNameWithoutExtension(file.Name) + "-" + DateTime.Now.ToString("yyyyMMdd") + Path.GetExtension(file.Name);
                    export.ExportToExcel(HttpContext.Server.MapPath(fileTemplate), fileName, dataSet);
                }
                //string fileTemplate = "/TemplateExcel/BaoCaoPaymentContractHome.xlsx";
                //FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                //if (file.Exists)
                //{
                //    using (ExcelPackage package = new ExcelPackage(file))
                //    {
                //        ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                //        int index = 2;
                //        int row_STT = 1;
                //        foreach (DataRow row in table.Rows)
                //        {
                //            int col = 0;
                //            col++; worksheet.Cells[index, col].Value = row_STT;
                //            //col++; worksheet.Cells[index, col].Value = row["Active"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["Status"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["HinhHopDongExcel"].ToString();
                //            //col++; worksheet.Cells[index, col].Value = row["HinhHopDongUpThem"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["HinhMatTienExcel"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["TenChuNha"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["MaSoThueCN"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["SDT"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["ChuTaiKhoan"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["STK"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["NganHang"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["LoaiShop"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["TenShop"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["DiaChiShop"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["QuanHuyen"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["TinhTP"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["ViTriThucTe"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["LoaiKyHD"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["SoHD"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["NgayNhanMB"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["NgayTTTNha"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["NgayBDHD"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["NgayKTHD"].ToString();
                //            //col++; worksheet.Cells[index, col].Value = row["Money"].ToString();//giá thuê hàng tháng
                //            col++; worksheet.Cells[index, col].Value = row["ThoiHanThue"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["TienDatCoc"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["DonVi"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["TiGia"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["HTRutCoc"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["KyHanTT"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["NgayBDTT"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["NgayThanhToan"].ToString();
                //            //col++; worksheet.Cells[index, col].Value = row["NgayDieuChinh"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["DienTich"].ToString();
                //            col++; worksheet.Cells[index, col].Value = row["ThueList"].ToString();//thuế
                //            col++; worksheet.Cells[index, col].Value = row["SoTienChiuThue"].ToString();

                //            index++;
                //            row_STT++;
                //        }
                //        Response.Clear();
                //        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                //        Response.AddHeader("Content-Disposition", "attachment; filename=BaoCaoPaymentContractHome-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                //        Response.BinaryWrite(package.GetAsByteArray());
                //        Response.Flush();
                //        Response.End();
                //    }
                //}
            }

            return RedirectToAction("BrowserPaymentRequest");
        }

        public ActionResult GetExelBrowserPaymentRequest__BAK20201005(FormCollection form)
        {
            string region = Convert.ToString(Convert.ToString(form["RegionId"]));
            string shop = Convert.ToString(form["ShopId"]);
            string typecontract = Convert.ToString(form["contract_type"]);
            string timeThanhToanStart = Convert.ToString(form["timeThanhToanStart"]);
            string timeThanhToanEnd = Convert.ToString(form["timeThanhToanEnd"]);
            string soHD = Convert.ToString(form["SoHdId"]);
            string status = Convert.ToString(form["month_TT"]);
            string timeKTHDStart = Convert.ToString(form["timeKTHDStart"]);
            string timeKTHDEnd = Convert.ToString(form["timeKTHDEnd"]);
            string payment_type = Convert.ToString(form["payment_type"]);
            if (timeThanhToanStart == "") timeThanhToanStart = null;
            if (timeThanhToanEnd == "") timeThanhToanEnd = null;
            if (timeKTHDStart == "") timeKTHDStart = null;
            if (timeKTHDEnd == "") timeKTHDEnd = null;
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Action",1)
              , new SqlParameter("@region",region)
              , new SqlParameter("@Shop",shop)
              , new SqlParameter("@TypeContract",typecontract)
              , new SqlParameter("@TimeThanhToan_Start",timeThanhToanStart)
              , new SqlParameter("@TimeThanhToan_End", timeThanhToanEnd)
              , new SqlParameter("@soHD",soHD)
              , new SqlParameter("@TrangThai",status)
              , new SqlParameter("@TimeKTHD_Start",timeKTHDStart)
              , new SqlParameter("@TimeKTHD_End", timeKTHDEnd)
              , new SqlParameter("@HinhThucThanhToan", payment_type)
            };
            DataSet ds = sql.ExecuteCommandDataSet("sp_FRT_Web_SearchBrowserPaymentRequest_GetDataHandsontable_New", CommandType.StoredProcedure, param);

            if (ds != null && ds.Tables.Count > 0)
            {
                string fileTemplate = "/TemplateExcel/Config/ThongTinHopDongThueNha.xlsx";
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet ws1 = package.Workbook.Worksheets[1];

                        int index = 2;

                        foreach (DataRow row in ds.Tables[0].Rows)
                        {
                            int col = 0;
                            col++; ws1.Cells[index, col].Value = row["Status"].ToString();
                            col++; ws1.Cells[index, col].Value = row["TenChuNha"].ToString();
                            col++; ws1.Cells[index, col].Value = row["MaSoThueCN"].ToString();
                            col++; ws1.Cells[index, col].Value = row["SDT"].ToString();
                            col++; ws1.Cells[index, col].Value = row["ChuTaiKhoan"].ToString();
                            col++; ws1.Cells[index, col].Value = row["STK"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NganHang"].ToString();
                            col++; ws1.Cells[index, col].Value = row["VungMien"].ToString();
                            col++; ws1.Cells[index, col].Value = row["TinhTP"].ToString();
                            col++; ws1.Cells[index, col].Value = row["QuanHuyen"].ToString();
                            col++; ws1.Cells[index, col].Value = string.Format("{0} - {1}", row["MaShop"].ToString(), row["TenShop"].ToString());
                            col++; ws1.Cells[index, col].Value = row["DiaChiShop"].ToString();
                            col++; ws1.Cells[index, col].Value = row["LoaiKyHD"].ToString();
                            col++; ws1.Cells[index, col].Value = row["SoHD"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NgayBDHD"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NgayKTHD"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NgayNhanMB"].ToString();
                            col++; ws1.Cells[index, col].Value = row["ThoiHanThue"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NgayTTTNha"].ToString();
                            col++; ws1.Cells[index, col].Value = row["TienDatCoc"].ToString();
                            col++; ws1.Cells[index, col].Value = row["DonVi"].ToString();
                            col++; ws1.Cells[index, col].Value = row["TiGia"].ToString();
                            col++; ws1.Cells[index, col].Value = row["HTRutCoc"].ToString();
                            col++; ws1.Cells[index, col].Value = row["KyHanTT"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NgayBDCKTT"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NgayThanhToan"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NgayBDTT"].ToString();
                            col++; ws1.Cells[index, col].Value = row["DienTich"].ToString();
                            col++; ws1.Cells[index, col].Value = row["ThueList"].ToString();
                            col++; ws1.Cells[index, col].Value = row["ChiCucThue"].ToString();
                            col++; ws1.Cells[index, col].Value = row["TKKhoBac"].ToString();
                            col++; ws1.Cells[index, col].Value = row["NHDongThue"].ToString();

                            index++;
                        }

                        DataTable dataTable1 = ds.Tables[0];
                        DataTable dataTable2 = ds.Tables[1];
                        DataTable targetTable = dataTable1.Clone();
                        targetTable.Columns.Add("Id_Request", typeof(string));
                        targetTable.Columns.Add("MaShop2", typeof(string));
                        targetTable.Columns.Add("TenShop2", typeof(string));
                        targetTable.Columns.Add("TuNgay", typeof(string));
                        targetTable.Columns.Add("DenNgay", typeof(string));
                        targetTable.Columns.Add("GiaThue", typeof(string));
                        var rowData =
                            from row1 in dataTable1.AsEnumerable()
                            join row2 in dataTable2.AsEnumerable()
                                on row1.Field<Int64>("Id") equals row2.Field<Int64>("Id_Request")
                            select row1.ItemArray.Concat(row2.ItemArray).ToArray();

                        foreach (object[] values in rowData)
                            targetTable.Rows.Add(values);

                        ExcelWorksheet ws2 = package.Workbook.Worksheets[2];
                        index = 4;

                        decimal TiGia, GiaThue, TongTien, ThueMonBai, ThueGTGT, ThueTNCN, TongTienThue;
                        foreach (DataRow row in targetTable.Rows)
                        {
                            int col = 0;
                            col++; ws2.Cells[index, col].Value = row["Status"].ToString();
                            col++; ws2.Cells[index, col].Value = row["HTTT"].ToString();
                            col++; ws2.Cells[index, col].Value = string.Format("{0} - {1}", row["MaShop"].ToString(), row["TenShop"].ToString());
                            col++; ws2.Cells[index, col].Value = row["VungMien"].ToString();
                            col++; ws2.Cells[index, col].Value = row["TinhTP"].ToString();
                            col++; ws2.Cells[index, col].Value = row["TenChuNha"].ToString();
                            col++; ws2.Cells[index, col].Value = row["SDT"].ToString();
                            col++; ws2.Cells[index, col].Value = row["ChuTaiKhoan"].ToString();
                            col++; ws2.Cells[index, col].Value = row["STK"].ToString();
                            col++; ws2.Cells[index, col].Value = row["NganHang"].ToString();
                            col++; ws2.Cells[index, col].Value = row["TuNgay"].ToString();
                            col++; ws2.Cells[index, col].Value = row["DenNgay"].ToString();
                            GiaThue = decimal.TryParse(row["GiaThue"].ToString(), out GiaThue) ? GiaThue : 0;
                            col++; ws2.Cells[index, col].Value = String.Format("{0:#,#.}", GiaThue);
                            col++; ws2.Cells[index, col].Value = row["DonVi"].ToString();
                            TiGia = decimal.TryParse(row["TiGia"].ToString(), out TiGia) ? TiGia : 0;
                            col++; ws2.Cells[index, col].Value = String.Format("{0:#,#.}", TiGia);
                            col++; ws2.Cells[index, col].Value = row["KyHanTT"].ToString();
                            col++; ws2.Cells[index, col].Value = row["NgayBDCKTT"].ToString();
                            TongTien = decimal.TryParse(row["TongTien"].ToString(), out TongTien) ? TongTien : 0;
                            if (row["DonVi"] != null && row["DonVi"].ToString() == "VND") TiGia = 1;
                            col++;
                            ws2.Cells[index, col].Value = String.Format("{0:#,#.}", (TongTien * TiGia));
                            col++; ws2.Cells[index, col].Value = row["NgayKTCKTT"].ToString();
                            col++; ws2.Cells[index, col].Value = row["NgayBDTT"].ToString();
                            col++; ws2.Cells[index, col].Value = row["HTTTThue"].ToString();
                            col++; ws2.Cells[index, col].Value = row["HTTTThue_TenNguoiNhan"].ToString();
                            col++; ws2.Cells[index, col].Value = row["HTTTThue_TKNhan"].ToString();
                            ThueMonBai = decimal.TryParse(row["ThueMonBai"].ToString(), out ThueMonBai) ? ThueMonBai : 0;
                            col++; ws2.Cells[index, col].Value = String.Format("{0:#,#.}", ThueMonBai);
                            ThueTNCN = decimal.TryParse(row["ThueTNCN"].ToString(), out ThueTNCN) ? ThueTNCN : 0;
                            col++; ws2.Cells[index, col].Value = String.Format("{0:#,#.}", ThueTNCN);
                            ThueGTGT = decimal.TryParse(row["ThueGTGT"].ToString(), out ThueGTGT) ? ThueGTGT : 0;
                            col++; ws2.Cells[index, col].Value = String.Format("{0:#,#.}", ThueGTGT);
                            TongTienThue = decimal.TryParse(row["TongTienThue"].ToString(), out TongTienThue) ? TongTienThue : 0;
                            col++; ws2.Cells[index, col].Value = String.Format("{0:#,#.}", TongTienThue);
                            col++; ws2.Cells[index, col].Value = row["NgayBDCKNopThue"].ToString();
                            col++; ws2.Cells[index, col].Value = row["NgayKTCKNopThue"].ToString();

                            index++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=ThongTinHopDongThueNha-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }

            return RedirectToAction("BrowserPaymentRequest");
        }
        [HttpPost]
        public ActionResult SearchDataBrowserPaymentRequest(SearchRequestPaymentHome paramSearch)
        {
            if (paramSearch.timeKTHDStart == "") paramSearch.timeKTHDStart = null;
            if (paramSearch.timeKTHDEnd == "") paramSearch.timeKTHDEnd = null;
            if (paramSearch.timeThanhToanStart == "") paramSearch.timeThanhToanStart = null;
            if (paramSearch.timeThanhToanEnd == "") paramSearch.timeThanhToanEnd = null;
            var jsonResult = new JsonResult();
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Action",1)
              , new SqlParameter("@region",paramSearch.region)
              , new SqlParameter("@Shop",paramSearch.shop)
              , new SqlParameter("@TypeContract",paramSearch.typecontract)
              , new SqlParameter("@TimeThanhToan_Start",paramSearch.timeThanhToanStart)
              , new SqlParameter("@TimeThanhToan_End", paramSearch.timeThanhToanEnd)
              , new SqlParameter("@soHD",paramSearch.soHD)
              , new SqlParameter("@TrangThai",paramSearch.status)
              , new SqlParameter("@TimeKTHD_Start",paramSearch.timeKTHDStart)
              , new SqlParameter("@TimeKTHD_End", paramSearch.timeKTHDEnd)
              , new SqlParameter("@HinhThucThanhToan", paramSearch.payment_type)
            };
            DataSet ds = sql.ExecuteCommandDataSet("sp_FRT_Web_SearchBrowserPaymentRequest_GetDataHandsontable_New", CommandType.StoredProcedure, param);
            if (ds != null && ds.Tables.Count > 0)
            {

                jsonResult = Json(new { success = true, table = ds.Tables[0].EParseToObjects() }, JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return Json(new { success = false, table = "" }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetExelBrowserPaymentRequest_New(FormCollection form)
        {
            string typeshop = form["typeShop"];
            if (typeshop == "" || typeshop == null)
            {
                typeshop = "0";
            }
            string shopname = form["shop"];
            string typecontract = form["contract_type"];
            string kyhanthanhtoan = form["kyhan"];
            string trangthai = form["status"];
            string soHD = form["SoHdId"];
            string MonthTT = form["month_TT"];
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@TypeShop",typeshop),
                new SqlParameter("@Shop", String.Join(",",shopname)),
                new SqlParameter("@TypeContract",String.Join(",",typecontract)),
                new SqlParameter("@KyHanThanhToan", String.Join(",",kyhanthanhtoan)),
                new SqlParameter("@TrangThai", String.Join(",",trangthai)),
                new SqlParameter("@soHD",soHD),
                new SqlParameter("@MonthTT",MonthTT), // LuanNT44-05/11/2019-add user
                new SqlParameter("@InsideCode",UserManager.CurrentUser.InsideCode) // LuanNT44-05/11/2019-add user
            };
            //▲ LuanNT44-07/10/2019
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_SearchBrowserPaymentRequest_GetDataHandsontable", CommandType.StoredProcedure, param);
            if (table.Rows.Count > 0)
            {
                string fileTemplate = "/TemplateExcel/BaoCaoPaymentContractHome.xlsx";
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                        int index = 2;
                        int row_STT = 1;
                        foreach (DataRow row in table.Rows)
                        {
                            int col = 0;
                            col++; worksheet.Cells[index, col].Value = row_STT;
                            //col++; worksheet.Cells[index, col].Value = row["Active"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["Status"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["HinhHopDongExcel"].ToString();
                            //col++; worksheet.Cells[index, col].Value = row["HinhHopDongUpThem"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["HinhMatTienExcel"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenChuNha"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["MaSoThueCN"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["SDT"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["ChuTaiKhoan"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["STK"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NganHang"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["LoaiShop"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TenShop"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["DiaChiShop"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["QuanHuyen"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TinhTP"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["ViTriThucTe"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["LoaiKyHD"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["SoHD"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayNhanMB"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayTTTNha"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayBDHD"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayKTHD"].ToString();
                            //col++; worksheet.Cells[index, col].Value = row["Money"].ToString();//giá thuê hàng tháng
                            col++; worksheet.Cells[index, col].Value = row["ThoiHanThue"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TienDatCoc"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["DonVi"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["TiGia"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["HTRutCoc"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["KyHanTT"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayBDTT"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["NgayThanhToan"].ToString();
                            //col++; worksheet.Cells[index, col].Value = row["NgayDieuChinh"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["DienTich"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["ThueList"].ToString();//thuế
                            col++; worksheet.Cells[index, col].Value = row["SoTienChiuThue"].ToString();

                            index++;
                            row_STT++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=BaoCaoPaymentContractHome-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }

            return RedirectToAction("BrowserPaymentRequest");
        }

        public ActionResult UpdateStatusBrowserPaymentRequest(string IDrequest)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Id", IDrequest)
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_ButtonDuyetDNTT", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult UpdateApproveBrowserPaymentRequest__BAK20201005(string IDrequest)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Id", IDrequest),
                new SqlParameter("@User", UserManager.CurrentUser.InsideCode),
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_ButtonDuyetDNTT", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult loadEmpLogin()
        {
            string emp = UserManager.CurrentUser.InsideCode;
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@EmpCode", emp)
            };
            DataTable table = sql.ExecuteCommand("Employee_GetDetail", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult loadPriceofID(string ID, string fromdate, string todate)
        {
            string emp = UserManager.CurrentUser.InsideCode;
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ID", ID) ,
                new SqlParameter("@fromedate", fromdate) ,
                new SqlParameter("@todate", todate)
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GetPrice", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public List<T> Execute<T>(string store, params object[] param)
        {
            string _sParam = string.Format(store, param);
            try
            {
                using (CallLogDbContext _context = new CallLogDbContext())
                {
                    return _context.Database.SqlQuery<T>(store, param).ToList();
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        public ActionResult TinhTongTienPaymentRequest(string ID, string NgayBDCKTT, int KyHanTT)
        {
            string emp = UserManager.CurrentUser.InsideCode;
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Id_Request", ID) ,
                new SqlParameter("@NgayBDCKTT", NgayBDCKTT) ,
                new SqlParameter("@KyHanTT", KyHanTT)
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_TinhTongTien", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult ValidateBodyRequestPayment__BAK20201005(List<RequestPaymentHome_New> request, string tabUpdate)
        {
            string xml = "";
            using (var stringwriter = new System.IO.StringWriter())
            {
                var serializer = new XmlSerializer(request.GetType());
                serializer.Serialize(stringwriter, request);
                xml = stringwriter.ToString();
            };

            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@DataUpdate", xml),
                new SqlParameter("@TabUpdate", tabUpdate),
                //new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_ValidationBodyRequest_New", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        [HttpPost]
        public ActionResult UpdateRequestPayment__BAK20201005(List<RequestPaymentHome_New> request, string tabUpdate)
        {
            string xml = "";
            using (var stringwriter = new System.IO.StringWriter())
            {
                var serializer = new XmlSerializer(request.GetType());
                serializer.Serialize(stringwriter, request);
                xml = stringwriter.ToString();
            };

            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@DataUpdate", xml),
                new SqlParameter("@TabUpdate", tabUpdate),
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_Update", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        [HttpPost]
        public ActionResult SendRequestPayment(List<RequestPaymentHome_New> request)
        {
            string xml = "";
            using (var stringwriter = new System.IO.StringWriter())
            {
                var serializer = new XmlSerializer(request.GetType());
                serializer.Serialize(stringwriter, request);
                xml = stringwriter.ToString();
            };

            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@DataUpdate", xml),
                new SqlParameter("@UserCode", UserManager.CurrentUser.InsideCode)
            };
            DataTable table = sql.ExecuteCommand("sp_FRT_Web_BrowserPaymentRequest_GuiDNTT", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        //▲  Add - TuanNA89 - 26/12/2019 - Màn hình hợp đồng thuê nhà
        #endregion

        //▼  Add - LuanNT44 - 25/06/2019 - Màn hình định nghĩa CL Hỗ trợ bán hàng
        public DataTable GetSystemSellLineDefine()
        {
            DataTable table = sql.ExecuteCommand("sp_GetSystemSellLineDefine", CommandType.StoredProcedure, null);
            return table;
        }
        public DataTable GetFunctionSellLineDefine(string IDsystem)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@IdSystem", IDsystem)
            };
            DataTable table = sql.ExecuteCommand("sp_GetFunctionSellLineDefine", CommandType.StoredProcedure, param);

            return table;
        }
        public ActionResult GetFunctionSellLineDefineBySystem(string IDsystem)
        {
            DataTable table = GetFunctionSellLineDefine(IDsystem);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult SellLineDefine()
        {
            if (UserManager.CurrentUser == null)
                return Redirect("/Users/Login?u=" + Request.RawUrl);
            if (!UserManager.CheckPermisionMenu(Request.RawUrl))
            {
                TempData["Message"] = String.Format("Bạn không có quyền trên màn hình {0}", Request.RawUrl);
                return RedirectToAction("Index", "Home");
            }
            List<SelectListItem> systemItem = new List<SelectListItem>();
            List<SelectListItem> functionItem = new List<SelectListItem>();
            systemItem.Add(new SelectListItem { Value = "0", Text = "Chọn loại hệ thống", Selected = true });
            functionItem.Add(new SelectListItem { Value = "0", Text = "Chọn chức năng", Selected = true });
            DataTable tbSystem = GetSystemSellLineDefine();
            if (tbSystem != null && tbSystem.Rows.Count > 0)
            {
                foreach (DataRow row in tbSystem.Rows)
                {
                    systemItem.Add(new SelectListItem { Value = row["code"].ToString(), Text = row["value"].ToString() });
                }
            }
            ViewBag.SystemItem = systemItem;

            DataTable tbFunction = GetFunctionSellLineDefine("0");
            if (tbFunction != null && tbFunction.Rows.Count > 0)
            {
                foreach (DataRow row in tbFunction.Rows)
                {
                    functionItem.Add(new SelectListItem { Value = row["code"].ToString(), Text = row["value"].ToString() });
                }
            }
            ViewBag.functionItem = functionItem;
            return View();
        }
        public ActionResult LoadSellLineDefine(string IdSystem, string IdFunction, string Level)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@IdSystem", IdSystem) ,
                new SqlParameter("@IdFunction", IdFunction) ,
                new SqlParameter("@Level", Level)
            };
            DataTable table = sql.ExecuteCommand("sp_LoadSellLineDefine", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult UpdateStatusHidenSellLineDefine(string Id, string status)
        {
            string acc = UserManager.CurrentUser.InsideCode.ToString();
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ID", Id) ,
                new SqlParameter("@Trangthai", status) ,
                new SqlParameter("@UpdateBy", acc)
            };
            DataTable table = sql.ExecuteCommand("sp_UpdateStatusHidenSellLineDefine", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetExelSellLineDefine(FormCollection form)
        {
            string typeSystem = form["phanloai"];
            string typeFunction = form["chucnang"];
            string typeLevel = form["caphethong"];
            if (typeSystem == "" || typeSystem == null)
            {
                typeSystem = "0";
            }
            if (typeFunction == "" || typeFunction == null)
            {
                typeFunction = "0";
            }
            if (typeLevel == "" || typeLevel == null)
            {
                typeLevel = "-1";
            }
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@IdSystem",typeSystem),
                new SqlParameter("@IdFunction",typeFunction),
                new SqlParameter("@Level",typeLevel)
            };
            DataTable table = sql.ExecuteCommand("sp_LoadSellLineDefine", CommandType.StoredProcedure, param);
            if (table.Rows.Count > 0)
            {
                string fileTemplate = "/TemplateExcel/BaoCaoManHinhDinhNghiaChucNangCLHoTroBanHang.xlsx";
                FileInfo file = new FileInfo(HttpContext.Server.MapPath(fileTemplate));
                if (file.Exists)
                {
                    using (ExcelPackage package = new ExcelPackage(file))
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.First();
                        int index = 2;
                        int row_STT = 1;
                        foreach (DataRow row in table.Rows)
                        {
                            int col = 0;
                            //col++; worksheet.Cells[index, col].Value = row_STT;
                            col++; worksheet.Cells[index, col].Value = row["loaihethong"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["chucnang"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["cap"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["noidung"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["nguoicapnhat"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["ngaycapnhat"].ToString();
                            col++; worksheet.Cells[index, col].Value = row["trangthai"].ToString();
                            index++;
                            //row_STT++;
                        }
                        Response.Clear();
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=BaoCaoManHinhDinhNghiaChucNangCLHoTroBanHang-" + DateTime.Now.ToString("yyyyMMdd") + ".xlsx");
                        Response.BinaryWrite(package.GetAsByteArray());
                        Response.Flush();
                        Response.End();
                    }
                }
            }

            return RedirectToAction("SellLineDefine");
        }
        public ActionResult CreateORUpdateSellLineDefine(string system, string functions, string level, string content, string type)
        {
            string acc = UserManager.CurrentUser.InsideCode.ToString();
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@system", system) ,
                new SqlParameter("@functions", functions) ,
                new SqlParameter("@level", level) ,
                new SqlParameter("@content", content) ,
                new SqlParameter("@Type", type) ,
                new SqlParameter("@CreateBy", acc)
            };
            DataTable table = sql.ExecuteCommand("sp_CreateORUpdateSellLineDefine", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        public ActionResult GetContentSellLineDefine(string IDfunction)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@IdFunction", IDfunction)
            };
            DataTable table = sql.ExecuteCommand("sp_GetContentSellLineDefine", CommandType.StoredProcedure, param);
            var jsonResult = Json(table.EParseToObjects(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        //▲  Add - LuanNT44 - 25/06/2019 - Màn hình định nghĩa CL Hỗ trợ bán hàng
    }

    public class Event_DetailsShop
    {
        public string OrganizationCode { get; set; }
        public string RegionCode { get; set; }
        public string ShopCode { get; set; }
        public string JobtitleCode { get; set; }
        public string Code { get; set; }
    }
    public class Event_Header
    {
        public string EventID { get; set; }
        public string CalendarType { get; set; }
        public string RequestType { get; set; }
        public string EventTitle { get; set; }
        public string EventContent { get; set; }
        public string ListPayment { get; set; }
    }
    #region # Duyệt đề nghị thanh toán -- tích hợp với mobile - class
    //▼  Add - TuanNA89 - 26/12/2019 - Màn hình hợp đồng thuê nhà
    public class Month_Price
    {
        public long STT { get; set; }
        public long Id { get; set; }
        public long Id_Request { get; set; }
        public string FromDate { get; set; }
        public string ToDate { get; set; }
        public int SoThangHieuLuc { get; set; }
        public string Money { get; set; }
    }
    public class RequestPayment_History
    {
        public int STT { get; set; }
        public string UpdateBy { get; set; }
        public string UpdateTime { get; set; }
        public string Message { get; set; }
    }
    public class RequestPaymentHome
    {
        public int? STT { get; set; }
        public long? Id { get; set; }
        public int Status { get; set; }
        public string urlHinh { get; set; }
        public string LinkTaiLieuTongHop { get; set; }
        public string TenChuNha { get; set; }
        public string MaSoThue { get; set; }
        public string SDT { get; set; }
        public string ChuTK { get; set; }
        public string STK { get; set; }
        public int? NganHang { get; set; }
        public string CNNganHang { get; set; }
        public int? LoaiShop { get; set; }
        public string MaShop { get; set; }
        public string TenShop { get; set; }
        public string MaPhongBan { get; set; }
        public string TenPhongBan { get; set; }
        public string DiaChiShop { get; set; }
        public int? QuanHuyen { get; set; }
        public int? TinhTP { get; set; }
        public string ViTriThucTe { get; set; }
        public int? LoaiKyHD { get; set; }
        public string SoHD { get; set; }
        public string NgayNhanMB { get; set; }
        public string NgayTTTNha { get; set; }
        public string NgayBDHD { get; set; }
        public string NgayKTHD { get; set; }
        public string ThoiHanThue { get; set; }
        public double? TienDatCoc { get; set; }
        public string DonVi { get; set; }
        public double? TiGia { get; set; }
        public string HinhThucRutCoc { get; set; }
        public int? KyThanhToan { get; set; }
        public string NgayBDTT { get; set; }
        public string NgayTT { get; set; }
        public string NgayDCGiaTT { get; set; }
        public string DienTich { get; set; }
        public string FRTChiuThue { get; set; }
        public int? Thue { get; set; }
        public double? SoTienChiuThue { get; set; }
        public int? TypeButton { get; set; }
    }
    [XmlRoot("DATA")]
    public class RequestPaymentHome_New
    {
        public int? STT { get; set; }
        public long? Id { get; set; }
        public string HinhHopDongUpThem { get; set; }
        public string TenHinhUpThem { get; set; }
        public string TenChuNha { get; set; }
        public string MaSoThueCN { get; set; }
        public string SDT { get; set; }
        public string ChuTaiKhoan { get; set; }
        public string STK { get; set; }
        public int? NganHang { get; set; }
        public string VungMien { get; set; }
        public string MaShop { get; set; }
        public string TenShop { get; set; }
        public string DiaChiShop { get; set; }
        public int? TinhTP { get; set; }
        public int? QuanHuyen { get; set; }
        public int? LoaiKyHD { get; set; }
        public string SoHD { get; set; }
        public string NgayBDHD { get; set; }
        public string NgayKTHD { get; set; }
        public string NgayNhanMB { get; set; }
        public string NgayTTTNha { get; set; }
        public int? ThoiHanThue { get; set; }
        public double? TienDatCoc { get; set; }
        public string DonViTinh { get; set; }
        public double? TiGia { get; set; }
        public string HTRutCoc { get; set; }
        public int? KyHanTT { get; set; }
        public string NgayBDCKTT { get; set; }
        public int? NgayThanhToan { get; set; }
        public string NgayBDTT { get; set; }
        public string NgayDCGiaTT { get; set; }
        public double? DienTich { get; set; }
        public string Thue { get; set; }
        public string ChiCucThue { get; set; }
        public string TKKhoBac { get; set; }
        public int? NHDongThue { get; set; }
        public int? HTTT { get; set; }
        public string NgayKTCKTT { get; set; }
        public double? TongTienThanhToan { get; set; }
        public int? HTTTThue { get; set; }
        public string HTTTThue_TenNguoiNhan { get; set; }
        public string HTTTThue_TKNhan { get; set; }
        public double? ThueMonBai { get; set; }
        public double? ThueTNCN { get; set; }
        public double? ThueGTGT { get; set; }
        public double? TongTienThue { get; set; }
        public string NgayBDCKNopThue { get; set; }
        public string NgayKTCKNopThue { get; set; }
        public int? TypeButton { get; set; }
    }
    public class SearchRequestPaymentHome
    {
        public int typeExport { get; set; }
        public string region { get; set; }
        public string shop { get; set; }
        public string typecontract { get; set; }
        public string timeThanhToanStart { get; set; }
        public string timeThanhToanEnd { get; set; }
        public string soHD { get; set; }
        public string status { get; set; }
        public string timeKTHDStart { get; set; }
        public string timeKTHDEnd { get; set; }
        public string payment_type { get; set; }
    }
    //▲  Add - TuanNA89 - 26/12/2019 - Màn hình hợp đồng thuê nhà
    #endregion  
}