
var _gaq = [['_setAccount', 'UA-XXXXX-X'], ['_trackPageview']];
(function (d, t) {
    var g = d.createElement(t), s = d.getElementsByTagName(t)[0];
    s.parentNode.insertBefore(g, s)
}(document, 'script'));

$(document).ready(function () {
    //_____________________________declare selecter for jquery_________________________________________

    //▼ Edit - ChuongNT3 - 18/05/2018 -- thêm popup up hình
    //ChuongNT3 - 05/07/2018 - loại 143
    $(function () {
        Dropzone.options.dropzoneJsForm = {
            parallelUploads: 999, // ChuongNT3 - 04/05/2018 -- sữa số lượng file up
            init: function () {
                var self = this;
                this.on("sending", function (file) {
                    if (file.name.search('_') != -1) {
                        self.removeAllFiles(file);
                        XFunction.RenderMessage("error", "Tên ảnh không được chứa ký tự đặc biệt. Tên ảnh viết liền không dấu"); return;
                    }
                    else {
                        this.options.renameFilename = function (file) {
                            return file.name = new Date().getTime() + '_' + file.name;
                        };
                    }
                });
                this.on("addedfile", function (file) { // Add nút xóa khi add file
                    var id = [] = file.name.split('.');
                    var removeButton = Dropzone.createElement("<span id='" + id[0] + "_minhChungKhac134' class='fa fa-remove' style='font-size: 30px;color:red;cursor:  pointer;position:  absolute;top: -11px;z-index:  50;right: -8px;'></span>");
                    var _this = this;
                    removeButton.addEventListener("click", function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        _this.removeFile(file);
                    });
                    file.previewElement.appendChild(removeButton);
                });
                self.on("success", function (file, response) { // Xóa sau khi up thành công
                    var reqId = response.IdCallLog;
                    var reqDId = response.RequestDId;
                    var Url = '/Uploads/FileAttachs/' + response.FileName;
                    var Domain = response.Domain;
                    var name = response.FileName.split('_')[1];
                    var idHinh = name.split('.')[0];
                    $('#' + idHinh + '_minhChungKhac134').click(function () {
                        $.get('/Requests/DeleteFileUpload', {
                            requestId: reqId,
                            requestDetailId: reqDId,
                            Domain: Domain,
                            Uris: Url
                        }, function (respone) {
                            if (respone !== '' && respone !== null && respone !== undefined) {
                                XFunction.RenderMessage("success", "Xóa thành công"); return;
                            } else {
                                XFunction.RenderMessage("success", "Xóa thành công"); return;
                            }
                        }).error(function () {
                            XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                        });
                    });
                });
            }
        };
    })
    //ChuongNT3 - 05/07/2018 - loại 143
    //▲  Edit - ChuongNT3 - 18/05/2018 -- thêm popup up hình

    var requestInfo = CL;
    var newTypeIdflag;
    var statusRequest = status;
    var $btnComment = $('#comment'),
        $btnReply = $('#reply'),
        $btnComplete = $('#complete'),
        $btnChangeStep = $('#changeStep'),
        $btnPrint = $('#btnPrint'),
        $btnChangeAssigner = $('#changeAssigner'),
        $btnSenPartner = $('#sendPartner');

    var $hansontable = $('#tableDetails'),
        $sumMoney = $('#sum-money'),
        $listCheckBoxImages = $('.file1'),
        $imageValidate = $('#ImageValidate'),
        $txtMessage = $("#Message");

    var $hiddenDetails = $('#Details'),
        $hiddenDetailsCc = $('#DetailsCc'),
        $form = $("form#form-detail");

    var dataInRespone;

    var $areaTrouble = $('#accordionTrouble'),
        $timeTrouble = $('#timeTrouble'),
        $senderTrouble = $('#senderTrouble'),
        $contentTrouble = $('#contentTrouble');

    //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
    var $areaProcessingResults = $('#accordionProcessingResults'),
        $timeProcessingResults = $('#timeProcessingResults'),
        $contentProcessingResults = $('#contentProcessingResults'),
        $senderProcessingResults = $('#senderProcessingResults');
    //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý

    var $areaInternal = $('#accordionInternal'),
        $timeInternal = $('#timeInternal'),
        $senderInternal = $('#senderInternal'),
        $contentInternal = $('#contentInternal');
    var $areaCSVC = $('#accordionCSVC'),
        $timeCSVC = $('#timeCSVC'),
        $senderCSVC = $('#senderCSVC'),
        $contentCSVC = $('#contentCSVC');
    //▼ Add - TrungNC3 - 2017.09.01 - Thêm loại 175 - Hành chính hỗ trợ shop
    var $areaNVHC = $('#accordionNVHC'),
        $timeNVHC = $('#timeNVHC'),
        $senderNVHC = $('#senderNVHC'),
        $contentNVHC = $('#contentNVHC');
    //▲ Add - =======================================
    $('#TypeId-tree').hide();
    $('#categoriesId_CSKH-tree').hide();
    $('#dowloadSupport').hide();
    $('#DownloadDetails').hide();

    //▼ChuongNT3 - 31/12/2018 -  Phân loại CallLog mới
    var data = [
        //▼ TuanNA89 - 04/02/2020 - gom loại KN vào 2 nhóm Công nghệ, Mỹ phẩm
        //▼	Edit - VietMXH - 04/06/2018 - Phân loại CallLog mới==================================================
        { id: "BH", text: "Bảo hành", parent: "CN" },
        { id: "TTBH", text: "Thông tin bảo hành", parent: "BH" },
        { id: "THBH", text: "Trễ hạn bảo hành", parent: "BH" },
        { id: "TCBH", text: "Từ chối bảo hành", parent: "BH" },
        { id: "BHNL", text: "Bảo hành nhiều lần", parent: "BH" },
        { id: "SP", text: "Sản phẩm", parent: "CN" },
        { id: "G", text: "Giá", parent: "SP" },
        { id: "CL", text: "Chất lượng", parent: "SP" },
        { id: "TT", text: "Thông tin", parent: "SP" },
        { id: "ĐT", text: "Đổi trả", parent: "CN" },
        { id: "TĐL", text: "Thẩm định lỗi", parent: "ĐT" },
        { id: "PĐT", text: "Phí đổi trả", parent: "ĐT" },
        { id: "CSĐT", text: "Chính sách đổi trả", parent: "ĐT" },
        { id: "TĐ", text: "Thái độ", parent: "CN" },
        { id: "K", text: "Khác", parent: "CN" },
        { id: "NV", text: "Nghiệp vụ", parent: "CN" },
        { id: "KM", text: "Khuyến mãi", parent: "CN" },
        { id: "TTKM", text: "Thông tin khuyến mãi", parent: "KM" },
        { id: "NKM", text: "Nợ khuyến mãi", parent: "KM" },
        { id: "KM__TTTFS", text: "Trúng thưởng thuộc FPTShop", parent: "KM" },
        { id: "KM__TTMDFS", text: "Trúng thưởng mạo danh FPTShop", parent: "KM" },
        { id: "KM__Khac", text: "Khác", parent: "KM" },
        //▼ Edit - ThuongNM2 - 29/05/2018 - off BHV PhátBA Yêu cầu
        //{ id: "BHV", text: "Bảo hành vàng", parent: "#" },
        //{ id: "TTBH_V", text: "Thông tin bảo hành (BHV)", parent: "BHV" },
        //{ id: "TCBH_V", text: "Từ chối bảo hành (BHV)", parent: "BHV" },
        //{ id: "THBH_V", text: "Trễ hạn bảo hành (BHV)", parent: "BHV" },
        //{ id: "BHNL_V", text: "Bảo hành nhiều lần (BHV)", parent: "BHV" },
        { id: "FF", text: "F.friends", parent: "CN" },
        { id: "FF__TN", text: "Trích nợ", parent: "FF" },
        { id: "SSD", text: "Subsidy", parent: "CN" },
        { id: "SSD__NKM", text: "Nợ khóa máy", parent: "SSD" },
        { id: "SSD__CGKn", text: "Chưa gỡ Knox (SSD)", parent: "SSD" },
        { id: "SSD__SimS", text: "Sim sóng", parent: "SSD" },
        { id: "TG", text: "Trả góp", parent: "CN" },
        { id: "TGN", text: "Trả góp 0% qua ngân hàng", parent: "TG" },  //  Cũ: { id: "TGN", text: "Trả góp 0% qua ngân hàng", parent: "#" },
        { id: "TG__T", text: "Trả góp thường", parent: "TG" },
        { id: "MDMH", text: "Check MDMH", parent: "CN" },
        //▲	Edit - VietMXH - 04/06/2018 - Phân loại CallLog mới==================================================
        //▼ ChuongNT3 - 11/20/2018 -  Phân loại CallLog mới
        { id: "MM", text: "Mượn máy", parent: "BH" },
        //{ id: "MM_V", text: "Mượn máy (BHV)", parent: "BHV" },
        //{ id: "DSNM_V", text: "Đổi shop nhận máy (BHV)", parent: "BHV" },
        { id: "DSNM", text: "Đổi shop nhận máy", parent: "BH" },
        //▲ Edit - ThuongNM2 - 29/05/2018 - off BHV PhátBA Yêu cầu
        //▲ ChuongNT3 - 11/20/2018 -  Phân loại CallLog mới
        { id: "SSD__Version_cu_bi_khoa_may", text: "Version cũ bị khóa máy (SSD)", parent: "SSD" },
        { id: "SSD__Tu_van_goi_cuoc", text: "Tư vấn gói cước SSD", parent: "SSD" },
        { id: "SSD__Da_nap_may_bi_khoa", text: "Đã nạp, máy bị khóa", parent: "SSD" },
        { id: "SSD__Khac", text: "Khác (SSD)", parent: "SSD" },
        { id: "FF__Chua_Go_Knox", text: "Chưa gỡ Knox (F.F)", parent: "FF" },
        { id: "FF__Version_cu_bi_khoa_may", text: "Version cũ bị khóa máy (F.F)", parent: "FF" },
        { id: "FF__Tu_van_dong_tien", text: "Tư vấn đóng tiền FF", parent: "FF" },
        { id: "FF__Khac", text: "Khác (F.F)", parent: "FF" },
        { id: "TH", text: "Thu hộ", parent: "CN" }, // Add - ThuongNM2 - 12/04/2019 - Add Group BH Theo vùng miền==============
        //▲ ChuongNT3 - 31/12/2018  -  Phân loại CallLog mới
        { id: "ECM", text: "Ecom", parent: "CN" }, // Add - TuanNA89 - 22/10/2019 - Calllog khiếu nại, loại khiếu nại Ecom
        { id: "CN", text: "Công nghệ", parent: "#" },
        { id: "MP", text: "Mỹ phẩm", parent: "#" },
        { id: "MP_Khac", text: "Khác_MP", parent: "MP" },
        { id: "MP_TD", text: "Thái độ_MP", parent: "MP" },
        { id: "MP_NV", text: "Nghiệp vụ_MP", parent: "MP" },
        { id: "MP_SP", text: "Sản phẩm_MP", parent: "MP" },
        { id: "MP_Ecom", text: "Ecom_MP", parent: "MP" },
        { id: "MP_KM", text: "Khuyến mại_MP", parent: "MP" },
        { id: "MP_DT", text: "Đổi trả_MP", parent: "MP" },
        //▲ TuanNA89 - 04/02/2020 - gom loại KN vào 2 nhóm Công nghệ, Mỹ phẩm
    ];
    var phanLoaiCha;
    var dataSystemTree;
    var rowline134 = -1;
    //___________________________________________________________________________________________________
    var per = [];
    var superadmin = false;
    $.each(permissons, function (index, item) {
        if (item == 'admin')
            per.push("assigner");
        else
            per.push(item);
        if (item == 'supperAdmin') {
            superadmin = true;
            per.push("assigner");
            per.push("sender");
            per.push("cc");
        }
    });
    permissons = per;
    //___________________________________________________________________________________________________
    $areaTrouble.hide();
    var RenderHiddenTrouble = function () {
        $.get('/Requests/GetConversations', { RequestId: requestInfo.Id }, function (response) {
            $.each(response, function (index, item) {
                if (item.Type === 4 && item.Message != '') {
                    $.get('/Requests/GetByJobAndShop', { employeeCode: item.Sender }, function (data) {
                        if (data != '' && data != null && data != undefined)
                            $senderTrouble.text(data[0].EmpJobShop);
                    });
                    $.get('/Requests/GetChiPhiCSKH_19', { RequestId: requestInfo.Id }, function (data2) {
                        $contentTrouble.text(item.Message);
                        if (data2 !== '' && data2 != null && data2 != undefined && data2[0].Property9 != null) {
                            var chiPhi = data2[0].Property9;
                            //var cbHXL24h = data2[0].Quantity6;
                            var msgConfirm = '';
                            if (chiPhi != '' && chiPhi.length > 0)
                                msgConfirm += '</br> * Chí phí CSKH confirm: ' + chiPhi.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1.") + ' vnđ';
                            //if (cbHXL24h == '1')
                            //    msgConfirm += '</br> Hướng xử lý với KH trong 24h';
                            $contentTrouble.append(msgConfirm);
                        }
                        $timeTrouble.text(item.TimeCreate);
                        $areaTrouble.show();
                    });
                }
            });
        });
    };

    $areaInternal.hide();
    var RenderHiddenInternal = function () {
        //▼ Add - TrungNC3 - 16/10/2017 - Bổ sung yêu cầu Chất lượng xử lý CSKH
        $.get('/Requests/GetConversations', { RequestId: requestInfo.Id }, function (response) {
            var MessageInfomation = '';
            var MessageInternal = '';
            $.each(response, function (index, item) {
                //▼ Add - TrungNC3 - 16/10/2017 - Bổ sung yêu cầu Chất lượng xử lý CSKH
                if (item.Type === 10 && item.Message != '') {
                    MessageInfomation = item.Message;
                };
                if (item.Type === 6 && item.Message != '') {
                    $.get('/Requests/GetByJobAndShop', { employeeCode: item.Sender }, function (data) {
                        $senderInternal.text(data[0].EmpJobShop);
                    });
                    MessageInternal = item.Message;
                    $timeInternal.text(item.TimeCreate);
                };
                $contentInternal.text('HXL nội bộ: ' + MessageInternal + '. Thông tin: ' + MessageInfomation);
                if ((item.Type === 10 && item.Message != '') || (item.Type === 6 && item.Message != '')) {
                    $areaInternal.show();
                }
                //▲ Add - TrungNC3 - 16/10/2017 - Bổ sung yêu cầu Chất lượng xử lý CSKH
            });
        });
        //▲ Add - TrungNC3 - 16/10/2017 - Bổ sung yêu cầu Chất lượng xử lý CSKH
    };

    $areaCSVC.hide();
    var RenderHiddenCSVC = function () {
        $.get('/Requests/GetConversations', { RequestId: requestInfo.Id }, function (response) {
            $.each(response, function (index, item) {
                if (item.Type === 7 && item.Message != '') {
                    $.get('/Requests/GetByJobAndShop', { employeeCode: item.Sender }, function (data) {
                        $senderCSVC.text(data[0].EmpJobShop);
                    });
                    $('#MessageCSVC').val(item.Message);
                    $contentCSVC.text(item.Message);
                    $timeCSVC.text(item.TimeCreate);
                    $areaCSVC.show();
                }
            });
        });
    };

    //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
    $areaProcessingResults.hide();
    var RenderHiddenProcessingResults = function () {
        $.get('/Requests/GetDetailsPhanLoai', { RequestId: requestInfo.Id }, function (response) {
            if (response != null && response != '' && response != undefined) {
                if ((response[0].Property1 == 'Khác' || response[0].Property1 == 'Trúng thưởng mạo danh FPTShop' || response[0].Property1 == 'Trúng thưởng thuộc FPTShop')) {
                    $('#changeStep').hide();
                }
                $.get('/Requests/GetConversations', { RequestId: requestInfo.Id }, function (response_cv) {
                    $.each(response_cv, function (index, item) {
                        if (item.Type === 13 && item.Message != '') {
                            console.log(item.Sender)
                            $.get('/Requests/GetByJobAndShop', { employeeCode: item.Sender }, function (data) {
                                $senderProcessingResults.text(data[0].EmpJobShop);
                            });
                            $('#MessageProcessingResults').val(response[0].Note);
                            $contentProcessingResults.text(response[0].Note);
                            $timeProcessingResults.text(item.TimeCreate);
                            $areaProcessingResults.show();
                        }
                    });
                });
            }
        });
    };

    //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
    var RenderLoaiKhieuNai = function () {
        $('#TypeId-tree').on('changed.jstree', function (e, data) {
            var i, j, name, id, children; //ChuongNT3 - 13/06/2018 - loại 19 - chọn nhánh nhỏ nhất
            for (i = 0, j = data.selected.length; i < j; i++) {
                name = data.instance.get_node(data.selected[i]).text;
                id = data.instance.get_node(data.selected[i]).id;
                children = data.instance.get_node(data.selected[i]).children.length; //ChuongNT3 - 13/06/2018 - loại 19 - chọn nhánh nhỏ nhất
            }

            //ChuongNT3 - 13/06/2018 - loại 19 - chọn nhánh nhỏ nhất
            if (children > 0) {
                XFunction.RenderMessage('error', 'Chỉ có thể chọn mục nhỏ nhất');
                return false;
            }
            //ChuongNT3 - 13/06/2018 - loại 19 - chọn nhánh nhỏ nhất

            $.each(data, function (index, item) {

                //▼	Edit - VietMXH - 04/06/2018 - Phân loại CallLog mới==================================================
                if (item.id === id && (item.parent !== '#' || item.id === 'TVBH' || item.id === 'HTKT' || item.id === 'TĐ' || item.id === 'K' || item.id === 'NV' || item.id === 'KM' || item.id === 'FF' || item.id === 'SSD' || item.id === 'TG' || item.id === 'MDMH' || item.id === 'TH'
                    || item.id === 'ECM' // Add - TuanNA89 - 07/11/2019 - Calllog khiếu nại, loại khiếu nại Ecom
                )) {
                    $('#Type').val(name);
                    $('#TypeId').val(id);
                    $('#TypeId-tree').hide();
                    return true;
                }
                //▲	Edit - VietMXH - 04/06/2018 - Phân loại CallLog mới==================================================

            });
            //if ($("#Type").val() === "Nghiệp vụ" || $("#Type").val() === "Thái độ") {
            var jobTitle = '';
            $.get('/Requests/GetDetailsChucDanh', { RequestId: requestInfo.Id }, function (response3) {
                if (response3 != null && response3 != undefined && response3 != "") {
                    if (response3[0].Property7 !== null && response3[0].Property7 !== "") {
                        var array = response3[0].Property7.split(',');
                        $.each(array, function (index, item) {
                            $('#chucDanhNB').multiselect('select', [item]);
                        });
                    }
                }
            });
            $('#chucDanhNB').multiselect('enable');
            //}
            //else {
            //    $('#chucDanhNB').multiselect('deselectAll', false);
            //    $('#chucDanhNB').multiselect('updateButtonText');
            //    $('#chucDanhNB').multiselect('disable');
            //}
        }).jstree({
            'core': {
                'data': data
            },
            "plugins": ["wholerow", "search", "types"],
            "types": {
                "default": { "icon": "/assets/images/Maps-Pin-Place-icon.png" }
            }
        });
    };

    //▼ Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog
    var RenderLoaiCSKH = function () {
        $('#categoriesId_CSKH-tree').on('changed.jstree', function (e, data) {
            var i, j, name, id, children;  //ChuongNT3 - 13/06/2018 - loại 19 - chọn nhánh nhỏ nhất
            for (i = 0, j = data.selected.length; i < j; i++) {
                name = data.instance.get_node(data.selected[i]).text;
                id = data.instance.get_node(data.selected[i]).id;
                children = data.instance.get_node(data.selected[i]).children.length; //ChuongNT3 - 13/06/2018 - loại 19 - chọn nhánh nhỏ nhất
            }

            //ChuongNT3 - 13/06/2018 - loại 19 - chọn nhánh nhỏ nhất
            if (children > 0) {
                XFunction.RenderMessage('error', 'Chỉ có thể chọn mục nhỏ nhất');
                return false;
            }
            //ChuongNT3 - 13/06/2018 - loại 19 - chọn nhánh nhỏ nhất

            $.each(data, function (index, item) {

                //▼	Edit - VietMXH - 04/06/2018 - Phân loại CallLog mới==================================================
                if (item.id === id && (item.parent !== '#' || item.id === 'TVBH' || item.id === 'HTKT' || item.id === 'TĐ' || item.id === 'K' || item.id === 'NV' || item.id === 'KM' || item.id === 'FF' || item.id === 'SSD' || item.id === 'TG' || item.id === 'MDMH' || item.id === 'TH'
                    || item.id === 'ECM' // Add - TuanNA89 - 07/11/2019 - Calllog khiếu nại, loại khiếu nại Ecom
                )) {
                    $('#categoriesId_CSKH').val(name);
                    $('#categoriesId_CSKH_ID').val(id);
                    $('#categoriesId_CSKH-tree').hide();
                    console.log($.inArray(item.id, ['BH', 'TTBH', 'THBH', 'TCBH', 'BHNL', 'BP', 'BHV', 'TTBH_V', 'BP_V', 'TCBH_V', 'THBH_V', 'BHNL_V'] !== -1) && $.inArray(Jobs, ['00349', '00510', '00511']) !== -1)
                    if ($.inArray($("#categoriesId_CSKH").val(), ['Bảo hành', 'Thông tin bảo hành', 'Trễ hạn bảo hành', 'Từ chối bảo hành', 'Bảo hành nhiều lần', 'Báo phí', 'Bảo hành vàng', 'Thông tin bảo hành (BHV)', 'Báo phí (BHV)', 'Từ chối bảo hành (BHV)', 'Trễ hạn bảo hành (BHV)', 'Bảo hành nhiều lần (BHV)']) !== -1
                        && $.inArray(Jobs, ['00349', '00510', '00511']) !== -1) {
                        $('#btnResendWarranty').show();
                    }
                    else {
                        $('#btnResendWarranty').hide();
                    };
                    return true;
                }
                //▲	Edit - VietMXH - 04/06/2018 - Phân loại CallLog mới==================================================

            });
        }).jstree({
            'core': {
                'data': data
            },
            "plugins": ["wholerow", "search", "types"],
            "types": {
                "default": { "icon": "/assets/images/Maps-Pin-Place-icon.png" }
            }
        });
    };
    //▲ Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog

    var getChucDanh = function () {
        $.get('/Permission/GetJobs', { OfficeCode: '' }, function (response) {
            $('#chucDanhNB').multiselect({
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                buttonWidth: '100%',
                nonSelectedText: 'Chọn chức danh',
                allSelectedText: 'Chọn tất cả',
                selectAllText: 'Chọn tất cả',
                maxHeight: 200,
            });

            //▼ ChuongNT3 - 04/12/2018 - thêm ds nvvp
            $('#viPhamNB').multiselect({
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                buttonWidth: '100%',
                nonSelectedText: 'Chọn nhân viên',
                allSelectedText: 'Chọn tất cả',
                selectAllText: 'Chọn tất cả',
                maxHeight: 200,
            });
            //▲ ChuongNT3 - 04/12/2018 - thêm ds nvvp

            $('#chucDanhNB').multiselect('dataprovider', response);
        });
    };

    //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại
    var getNVKN = function () {
        $.get('/Requests/GetDetailsPhanLoai', { RequestId: requestInfo.Id }, function (response2) {
            if (response2 != null && response2 != undefined && response2 != "") {
                if (response2[0].Property1 == "Thái độ" && response2[0].Property3 == "Thái độ") {
                    $.get('/Requests/GetDetailsChucDanh', { RequestId: requestInfo.Id }, function (response3) {
                        if (response3 != null && response3 != undefined && response3 != "") {
                            if (response3[0].Property7 !== null && response3[0].Property7 !== "") {
                                var array = response3[0].Property7;
                                if (array.lastIndexOf('00000') == -1 && array.lastIndexOf('00261') && array.lastIndexOf('00476')) {
                                    $.get('/Requests/GetNhanVienBiKhieuNai', { RequestId: requestInfo.Id }, function (response_nvkn) {
                                        //ChuongNT3 - 1/11/2018 - ẩn ds nhân viên
                                        if (response_nvkn == '' || response_nvkn == null || response_nvkn == undefined || response2[0].Quantity1 == 1) {
                                            $('#hiddenNVKN_19').hide();
                                        }
                                        else {
                                            //ChuongNT3 - 10/23/2018 - thêm nhánh
                                            if (($.inArray(Jobs, ['00004', '00005', '00256', '00257', '00447', '00448', '00407', '00644', '00514', '00241']) != -1 || array.lastIndexOf(Jobs) != -1) && response2[0].Quantity1 == 0) {
                                                $('#comment').hide();
                                                $('#complete').hide();
                                                $('#changeStep').hide();
                                                $('#changeAssigner').hide();
                                                $('#dateExtend').prop("disabled", true);
                                                $("#dateExtend").prop("readonly", false);
                                            }

                                            $('#nvKhieuNai_19').multiselect({
                                                includeSelectAllOption: true,
                                                enableCaseInsensitiveFiltering: true,
                                                buttonWidth: '100%',
                                                nonSelectedText: 'Chọn nhân viên',
                                                allSelectedText: 'Chọn tất cả',
                                                selectAllText: 'Chọn tất cả',
                                                maxHeight: 200,
                                            });
                                            var ar_ds_nhanVienKhieuNai_All = $.grep(response_nvkn, function (item, index) {
                                                return item.typeC == 0
                                            });
                                            var ar_ds_nhanVienKhieuNai = $.grep(response_nvkn, function (item, index) {
                                                return item.typeC == 1
                                            });
                                            //if (ar_ds_nhanVienKhieuNai.length == 0) {
                                            //    ar_ds_nhanVienKhieuNai = ar_ds_nhanVienKhieuNai_All
                                            //}
                                            $('#nvKhieuNai_19').multiselect('dataprovider', ar_ds_nhanVienKhieuNai_All);
                                            $.each(ar_ds_nhanVienKhieuNai, function (index, item) {
                                                $('#nvKhieuNai_19').multiselect('select', [item.value]);
                                            });
                                            $('#hiddenNVKN_19').show();
                                        }
                                    });
                                }
                                else {
                                    $('#hiddenNVKN_19').hide();
                                }
                            }
                        }
                    });
                }
            }
        });
    };
    //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại

    //▼ Add - TrungNC3 - 2017.09.01 - Thêm loại 175 - Hành chính hỗ trợ shop
    getChucDanh();
    $areaNVHC.hide();
    var RenderHiddenNVHC = function () {
        $.get('/Requests/GetConversations', { RequestId: requestInfo.Id }, function (response) {
            $.each(response, function (index, item) {
                if (item.Type === 9 && item.Message != '') {
                    $.get('/Requests/GetByJobAndShop', { employeeCode: item.Sender }, function (data) {
                        $senderNVHC.text(data[0].EmpJobShop);
                    });
                    $('#MessageNVHC').val(item.Message);
                    $contentNVHC.text(item.Message);
                    $timeNVHC.text(item.TimeCreate);
                    $areaNVHC.show();
                }
            });
        });
    };
    //▲ Add - =======================================

    //▼	Edit - VietMXH - 11/01/2019 - Tối ưu==================================================
    switch (requestInfo.TypeId) {
        case 19:
            RenderHiddenTrouble();
            RenderHiddenInternal();
            RenderHiddenProcessingResults();
            break;
        case 24:
            RenderHiddenCSVC();
            break;
        case 157:
            RenderHiddenTrouble();
            RenderHiddenInternal();
            RenderHiddenProcessingResults();
            break;
        case 175:
            RenderHiddenNVHC();
            break;
        default:
    }
    //▲	Edit - VietMXH - 11/01/2019 - Tối ưu==================================================

    var pageSize = 50;
    var checkFist = true;

    var TimeFutureFinishGlobal;
    var TimeGoliveTimeGolive;
    var listOffice19 = [];
    //var Refresh_Categories = function () {
    //    $('#Type').val('Chọn loại khiếu nại');
    //    $('#TypeId').val('');
    //    $('#TypeId-tree').jstree("deselect_all");
    //    $('#TypeId-tree').jstree("close_all");
    //};
    //$('#refreshCategories').click(function () {
    //    Refresh_Categories();
    //});
    $sumMoney.hide();

    //▼	Edit - VietMXH - 21/10/2019 - Tối ưu==================================================
    var Load = function () {
        $btnComment.on('click', function () { });
        $btnReply.on('click', function () { });
        $btnChangeStep.on('click', function () { });
        $btnComplete.on('click', function () { });
        $btnPrint.on('click', function () { });
    }
    Load();

    var sender = sender;
    //▲	Edit - VietMXH - 21/10/2019 - Tối ưu==================================================

    var $$ = function (id) { return document.getElementById(id); },
        container = $$('tableDetails'), hot, sum = 0;
    var countFiles = 0;
    var dataHc = [];
    var dataHr = [];
    var dataDebt = [], hili = [], commetConvertation = [];
    var dataMko = [];
    var data100tr = [];
    var dataFundHandsontable = [], commetConvertationFund = [];
    var dataInventoryCash = [], dataInventoryCashHandsontable = [];
    var dataApple = [], dataAppleHandsontable = [];

    var typeIdHtht = 0; systemIdHtht = 0, titleOfDetail = $('#titleX').html();
    var dataCc = [], dataCcHandsontable = [], containerCc = $$('tableDetailsCc'), hotCc,
        dataEmploy = [], arrNameEmploy = [];
    var dataHandsontable = [];
    var dataKhoPos = [];
    //===============================================================================
    var functionCellColor = {
        diffRenderer: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.cellTypes['formula'].renderer.apply(this, arguments);
            td.style.backgroundColor = 'Gainsboro';
            td.style.fontWeight = (col === 13 ? 'bold' : 'normal');
            td.style.textAlign = 'left';
        },
        headerRenderer: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.fontWeight = 'bold';
            td.style.color = '#ff6a00';
        },
        inputRender: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.fontWeight = 'bold';
            td.style.color = 'green';
        },
        Render_Color_Row: function () {
            hot.updateSettings({
                cells: function (row, col, prop) {
                    var cellProperties = {};
                    var data = $.grep(hili, function (item, index) {
                        return item === row;
                    });
                    if (data.length > 0) {
                        cellProperties.renderer = functionCellColor.headerRenderer;
                    }
                    return cellProperties;
                }
            })
        },

        //▼	Add - VietMXH - 18/09/2017 - Tách lưới 3 phần==========================================================
        GroupLineRenderer_1: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.fontWeight = 'bold';
            td.style.color = 'black';
            td.style.fontSize = '15px';
            td.style.backgroundColor = '#b4c6e7';
        },
        GroupLineRenderer_2: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.fontWeight = 'bold';
            td.style.color = 'black';
            td.style.fontSize = '15px';
            td.style.backgroundColor = '#fff2cc';
        },
        GroupLineRenderer_3: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.fontWeight = 'bold';
            td.style.color = 'black';
            td.style.fontSize = '15px';
            td.style.backgroundColor = '#c6e0b4';
        },
        LineRenderer_1: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.fontWeight = 'unset';
            td.style.color = 'blue';
            td.style.fontSize = '13px';
        },
        LineRenderer_2: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.fontWeight = 'unset';
            td.style.color = '#ff6600';
            td.style.fontSize = '13px';
        },
        LineRenderer_3: function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.fontWeight = 'unset';
            td.style.color = 'green';
            td.style.fontSize = '13px';
        }
        //▲	Add====================================================================================================

    };
    //===============================================================================

    //'▼(#001)Add===================================  
    var Validater = {
        number: function (value, callback) {
            if (value === 0)
                callback(true);
            else if (isNaN(value) || value === undefined || value === null || value === "")
                callback(false);
            else if (value < 0)
                callback(false);
            else
                callback(true);
        },
        checkBox: function (value, callback) {
            if (value !== true && value !== false) {
                callback(false);
            }
            else {
                callback(true);
            }
        },
    };
    var g_FunctionDefaultValueEmty = function (p_Value) {
        var l_ValueReturn = '';
        if (p_Value == '' || p_Value == null || p_Value == undefined) {
            l_ValueReturn = '';
        } else {
            l_ValueReturn = p_Value;
        }
        if (p_Value instanceof Array) {
            l_ValueReturn = p_Value.length == 0 ? "" : p_Value.join(",");
        }
        return l_ValueReturn;
    }
    //'▲(#001)Add===================================================================    

    //===============================================================================
    var XFunction = {
        LoadPageDetail: function (info) {
            var id = info.Id, type = info.TypeId;
            if (
                type === 28
                || type === 121 || type === 122
                || type == 134
                || type === 150 || type == 152 || type === 155 || type === 156
                || type == 163 || type == 164 || type == 168 || type == 169
                || type == 170 || type == 171 || type == 172 || type == 173
                || type === 189
                || type == 191
                || type == 214 || type == 216 || type == 218
                || type == 222 || type == 223 || type == 224 || type == 225
            ) {
                $('head').append('<link href="/assets/plugins/handsontablepro_v2/handsontable.full.min.css" rel="stylesheet" />');
                $('head').append('<script src="/assets/plugins/handsontablepro_v2/handsontable.full.min.js"></script>');
                $('head').append('<script src="/assets/plugins/handsontable/js/ruleJS.js"></script>');
                $('head').append('<script src="/assets/plugins/handsontable/js/formula.js"></script>');
                $('head').append('<script src="/assets/plugins/handsontable/js/ruleJS.all.full.js"></script>');
            }
            else {
                $('head').append('<link href="/assets/plugins/handsontable/css/handsontable.full.css" rel="stylesheet" />');
                $('head').append('<script src="/assets/plugins/handsontable/js/handsontable.full.js"></script>');
                $('head').append('<script src="/assets/plugins/handsontable/js/ruleJS.js"></script>');
                $('head').append('<script src="/assets/plugins/handsontable/js/formula.js"></script>');
                $('head').append('<script src="/assets/plugins/handsontable/js/ruleJS.all.full.js"></script>');
            }
            if (type === 23 || type === 125 || type === 126 || type === 127 || type === 129) {
                XFunction.RenderGridHC();
            }

            //▼ Add - LuanNT44 - 16/05/2018 - Loại 24 Sửa chữa CSVC
            else if (type == 24) {
                contruct_24();
            }
            //▲ Add - LuanNT44 - 16/05/2018 - Loại 24 Sửa chữa CSVC

            else if (type === 37) {
                contruct_37();
                //XFunction.RenderGridHR();
            } else if (type === 60) {
                XFunction.RenderGridDept();
            } else if (type === 22 || type == 115) {
                XFunction.RenderGridMkts();
            } else if (type === 61) {
                XFunction.RenderGrid100M();
            } else if (type === 32) {
                XFunction.RenderGridMoneyAdvance();
            } else if (type === 68) {
                XFunction.RenderGridInventoryCash();
            } else if (type === 1 || type === 2 || type === 3 || type === 4 || type === 16 || type === 25 || type === 40 || type === 41 || type === 43 || type === 132

                //▼	Add - VietMXH - 15/11/2017 - 184:Hỗ trợ F.Friends==================================================
                || type === 184
                //▲	Add - VietMXH - 15/11/2017 - 184:Hỗ trợ F.Friends==================================================

            ) {
                XFunction.RenderEditDetails();
            } else if (type == 69) {
                XFunction.RenderApple();
            } else if (type == 39) {
                contruct_39();
            } else if (type == 48) {
                contruct_48();
            } else if (type == 65) {
                contruct_65();
            } else if (type == 97) {
                contruct_97();
            } else if (type == 53) {
                contruct_53();
            } else if (type == 100) {
                contruct_100();
            } else if (type == 75) {
                contruct_75();
            } else if (type == 74) {
                contruct_74();
            } else if (type == 82) {
                contruct_82();
            }

            //▼	Edit - VietMXH - 11/09/2018 - 102:Kiêm kê kho==================================================
            else if (type == 102) {
                contruct_102();
            }
            //▲	Edit - VietMXH - 11/09/2018 - 102:Kiêm kê kho==================================================

            else if (type == 103) {
                contruct_103();
            } else if (type == 104) {
                contruct_104();
            } else if (type == 51) {
                contruct_51();
            } else if (type == 56) {
                contruct_56();
            } else if (type == 108) {
                contruct_108();
            } else if (type == 109) {
                contruct_109();
            } else if (type == 110) {
                contruct_110();
            } else if (type == 111) {
                contruct_111();
            } else if (type == 35) {
                contruct_35();
            } else if (type == 112) {
                contruct_112();
            } else if (type == 50) {
                contruct_50();
            } else if (type == 120) {
                contruct_120();
            } else if (type == 122) {
                contruct_122();
            } else if (type == 121) {
                contruct_121();
            } else if (type == 123) {
                contruct_123();
            } else if (type == 114) {
                contruct_114();
            } else if (type == 124) {
                contruct_124();
            } else if (type == 128) {
                contruct_temp();
            } else if (type == 130) {
                contruct_130();
            } else if (type == 134) {
                contruct_134();
            } else if (type == 135) {
                contruct_135();
            } else if (type == 136) {
                contruct_136();
            } else if (type == 146) {
                contruct_146();
            } else if (type == 137) {
                contruct_137();
            } else if (type == 64) {
                contruct_64();
            } else if (type == 139) {
                contruct_139();
            } else if (type == 143) {
                contruct_143();
            } else if (type == 145) {
                contruct_145();
            } else if (type == 147) {
                contruct_147();
            } else if (type == 148) {
                contruct_148();
            } else if (type == 150) {
                contruct_150();
            } else if (type == 152) {
                contruct_152();
            }
            else if (type == 42) {
                contruct_42();
            } else if (type == 151) {
                contruct_151();
            }
            else if (type == 154) {
                if (CL.Status == "0") {
                    alert('CL đang ở trạng thái lưu! Không được xem chi tiết!');
                    var win = window.open('/Home', '_self');
                }
                if (CL.FromForm.indexOf('Ver2') != -1) {
                    contruct_154__Ver2();
                }
                else {
                    contruct_154();
                }
            }
            else if (type == 155) {
                contruct_155();
            }
            else if (type == 156) {
                contruct_156();
            }
            else if (type == 158) {
                contruct_158();
            }
            else if (type == 161) {
                contruct_161();
            }
            else if (type == 162) {
                contruct_162();
            }
            else if (type == 28) {
                contruct_28();
            }
            else if (type == 45) {
                contruct_45();
            }
            /*▼ Add - TrungNC3 - 2017.09.27 - Up thực CR - Cấp bóng đèn bảo hành bóng đèn*/
            else if (type == 163) {
                contruct_163();
            }
            else if (type == 164) {
                contruct_164();
            }
            //▲ Add - TrungNC3 - 2017.09.27 - =======================================
            else if (type == 165) {
                contruct_165();
            }
            else if (type == 166) {
                contruct_166();
            }
            else if (type == 168) {
                contruct_168();
            }
            else if (type == 169) {
                contruct_169();
            }
            else if (type == 170) {
                contruct_170();
            }
            else if (type == 171) {
                contruct_171();
            }
            else if (type == 172) {
                contruct_172();
            }
            else if (type == 173) {
                contruct_173();
            }
            //▼ Add - VietMXH - 08/09/2017 - Thêm loại 174 - Đổi trả bảo hành
            else if (type == 174) {
                contruct_174();
            }
            //▲ Add - VietMXH - 08/09/2017 - Thêm loại 174 - Đổi trả bảo hành
            //▼ Add - TrungNC3 - 2017.09.01 - Thêm loại 175 - Hành chính hỗ trợ shop
            else if (type == 175) {

                contruct_175();
            }
            //▲ Add - =======================================
            //▼ Add - VietMXH - 25/09/2017 - Thêm loại 176-Yêu cầu gửi OTP SMS Loyalty F-Studio
            else if (type == 176) {
                contruct_176();
            }
            //▲ Add - VietMXH - 25/09/2017 - Thêm loại 176-Yêu cầu gửi OTP SMS Loyalty F-Studio
            //▼ Add - NghiaTV5 - 18/10/2017 - thêm loại 179
            else if (type == 179) {
                contruct_179();
            }
            //▲ Add - NghiaTV5 - 18/10/2017 - thêm loại 179
            //▼NgoanHT - 16/10/2017 - Loại: 180 - Thêm
            else if (type == 180) {
                contruct_180();
            }
            //▲NgoanHT - 16/10/2017 - Loại: 180 - Thêm

            //▼ Add - NgoanHT - 01/11/2017 - Thêm loại 181
            else if (type == 181) {
                contruct_181();
            }
            //▲ Add - NgoanHT - 01/11/2017 - Thêm loại 181

            //▼ Add - NgoanHT - 09/11/2017 - Thêm loại 182
            else if (type == 182) {
                contruct_182();
            }
            //▲ Add========================================
            //▼ Add - NghiaTV5 - 04/11/2017 - thêm loại 183
            else if (type == 183) {
                contruct_183();
            }
            //▲ Add - NghiaTV5 - 04/11/2017 - thêm loại 183

            //▼ Add - TrungNC3 - 28/12/2017 -  Xác nhận truy thu từ calllog hành chinh
            else if (type == 185) {
                contruct_185();
            }
            //▲ Add - TrungNC3 - 28/12/2017 -  Xác nhận truy thu từ calllog hành chinh
            //▼ Add -PhiN-08/12/2017-thêm loại 186
            else if (type == 186) {
                contruct_186();
            }
            //▲ Add -PhiN-08/12/2017-thêm loại 186
            //▼ Add - NghiaTV5 - 8/12/2017 - 188 - bổ sung
            else if (type == 188) {
                contruct_188();
            }
            //▲ Add - NghiaTV5 - 8/12/2017 - 188 - bổ sung

            //▼ Add - NghiaTV5 - 8/12/2017 - 189
            else if (type == 189) {
                contruct_189();
            }
            //▲ Add - NghiaTV5 - 8/12/2017 - 189

            //▼ Add - PhiN - 09/01/2018 - 191 -Cập nhật Layout shop thông thường
            else if (type == 191) {
                contruct_191();
            }
            //▲  Add - PhiN - 09/01/2018 - 191 -Cập nhật Layout shop thông thường

            //▼ Add - NghiaTV5 - 11/01/2018 - 192 - nợ khuyến mãi
            else if (type == 192) {
                contruct_192();
            }
            //▲ Add - NghiaTV5 - 11/01/2018 - 192 - nợ khuyến mãi
            //▼ Add - NghiaTV5 -25/01/2018 - Bảo Hành Máy Củ
            else if (type == 198) {
                contruct_198();
            }
            //▲ Add - NghiaTV5 -25/01/2018 - Bảo Hành Máy Củ
            //▼  Add - LuanNT44 - 22/01/2018 - Loại 199 - Danh sách Imei cần gỡ Knox
            else if (type == 199) {
                contruct_199();
            }
            //▲  Add - LuanNT44 - 22/01/2018 - Loại 199 - Danh sách Imei cần gỡ Knox
            //▼  Add - LuanNT44 - 27/01/2018 - Loại 200 - Chuyển cọc đơn hàng ecom
            else if (type == 200) {
                contruct_200();
            }
            //▲  Add - LuanNT44 - 27/01/2018 - Loại 200 - Chuyển cọc đơn hàng ecom
            //▼  Add - LuanNT44 - 02/02/2018 - Loại 201 - Kiểm hàng online
            else if (type == 201) {
                contruct_201();
            }
            //▲  Add - LuanNT44 - 02/02/2018 - Loại 201 - Kiểm hàng online
            //▼ Add - NghiaTV5 - 06/03/2018 - We Love nội bộ
            else if (type == 203) {
                contruct_203();
            }
            //▲ Add - NghiaTV5 - 06/03/2018 - We Love nội bộ
            else if (type == 204) {
                contruct_204();
            }
            //▼ Add - NghiaTV5 - 26/03/2018 - 205 claim bảo hiểm
            else if (type == 205) {
                contruct_205();
            }
            //▲ Add - NghiaTV5 - 26/03/2018 - 205 claim bảo hiểm

            //▼ Add - ThuongNM2 - 02/08/2018 - Loại 207 Chiến giá đại bàng
            else if (type == 207) {
                contruct_207();
            }
            //▲ Add - ThuongNM2 - 02/08/2018 - Loại 207 Chiến giá đại bàng
            //▼ Add - TuanNA89 - 02/08/2018 - Loại 208 Check CIC khách hàng
            else if (type == 208) {
                contruct_208();
            }
            //▲ Add - TuanNA89 - 02/08/2018 - Loại 208 Check CIC khách hàng

            //▼ ChuongNT3 - 20/02/2019 - hủy cọc cà thẻ
            else if (type == 209) {
                contruct_209();
            }
            //▲ ChuongNT3 - 20/02/2019 - hủy cọc cà thẻ
            //▼ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
            else if (type == 210) {
                contruct_210();
            }
            //▲ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
            else if (type == 213) {
                contruct_213();
            }
            else if (type == 214) {
                contruct_214();
            }
            else if (type == 216) {
                contruct_216();
            }
            //▼  Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
            else if (type == 218) {
                contruct_218();
            }
            //▲  Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
            else if (type == 221) {
                contruct_221();
            }
            else if (type == 222) {
                contruct_222();
            }
            else if (type == 223) {
                contruct_223();
            }
            else if (type == 224) {
                contruct_224();
            }
            else if (type == 225) {
                contruct_225(); //▶	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
            }
            else if (type == 226) {
                contruct_226();
            }
            else {
                xData.Render(requestInfo);
            }

            $btnPrint.on('click', function () {

                //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                if ($.inArray(CL.TypeId, [32, 42, 68, 75, 77, 82, 103, 154, 163, 164]) >= 0) {
                    if (CL.TypeId === 154) {
                        if (CL.FromForm.indexOf('Ver2') != -1) {
                            if (CL.StepNo == 1) {
                                XFunction.RenderMessage('error', 'Không thể in vận đơn tại bước 1, vui lòng thao tác in vận đơn tại bước 2.');
                                return false;
                            }
                            else if (CL.StepNo == 2 && CL.StepStatus == 1) {
                                // Bước 2 + Trạng thái Bước: 1:Chờ xử lý => Cho In
                            }
                            else {
                                XFunction.RenderMessage('error', 'Không thể in vận đơn đã được gửi hàng.');
                                return false;
                            }
                        }
                        else { // CL tạo theo rule cũ
                            if (status > 1) {
                                XFunction.RenderMessage('error', 'Không thể in vận đơn đã được gửi hàng.');
                                return false;
                            }
                        }
                    };
                    var win = window.open('/Requests/Print?Id=' + CL.Id, '_blank');
                    if (win) {
                        //Browser has allowed it to be opened
                        win.focus();
                        if (CL.TypeId === 154) {
                            console.log('g_BillVanChuyen_ParentTypeId:', g_BillVanChuyen_ParentTypeId);
                            console.log('g_BillVanChuyen_ParentRequestId:', g_BillVanChuyen_ParentRequestId);
                            if (g_BillVanChuyen_ParentTypeId == 23 && g_BillVanChuyen_ParentRequestId > 0) {
                                //  Bill sinh từ CL HC => Mở form in DS SP Đồ dùng HC
                                var win2 = window.open('/Requests/Print?Id=' + CL.Id + '&Type=2', '_blank');
                            }
                        }
                    } else {
                        //Broswer has blocked it
                        alert('Setting lại trình duyệt cho phep mở hộp thoại popup');
                    }
                }
                else {
                    XFunction.RenderMessage('error', 'Loại này chưa có form in!');
                    return false;
                }
                //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

            });
        },
        RenderNotDetail: function () {
            $('#sum-money').hide();
            $("#comment").click(function () {
                //=========================================================================================
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                //=========================================================================================
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    return false;
                }
                //=========================================================================================
                $('#Details').val(JSON.stringify(""));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $("#reply").click(function () {
                //=========================================================================================
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                //=========================================================================================
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                    return false;
                }
                //=========================================================================================
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
            });
            $("#complete").click(function () {
                //=========================================================================================
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                //=========================================================================================
                $('#Details').val(JSON.stringify(""));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
            $("#changeStep").click(function () {
                //=========================================================================================
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                //=========================================================================================
                $('#Details').val(JSON.stringify(""));
                $('#DetailsCc').val(JSON.stringify(myDataCc)); changeStep
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });

        },
        RenderGridHC: function () {
            $('#sum-money').hide();
            $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
                $.get('/Requests/LoadNVByShopDetail', { shopCode: CL.FromShop }, function (dataNV) { // LuanNT44-23/10/2019-23-edit SLAO shop    23/10/2019-23
                    dataHc = data;
                    var checkSender = false, checkAssiner;
                    $.each(permissons, function (index, item) {
                        if (item == 'sender')
                            checkSender = true;
                        if (item == 'assigner' || item == 'groupAssigner')
                            checkAssiner = true;
                    });
                    //ChuongNT3 - 19/09/2018 - thêm nút tạo bill
                    if (checkAssiner == true && CL.StepNo == 4 && CL.Status < 4) {
                        $('#div_tao_bill_do_dung_hc').show();
                    }
                    //ChuongNT3 - 19/09/2018 - thêm nút tạo bill
                    var checkEdit = checkAssiner == false;
                    var EditSoluongConfirm = false;
                    var EditSoluongDat = false;
                    //______________ Loai 23 và 125
                    if ((CL.TypeId == 23 || CL.TypeId == 125) && (CL.StepNo == 1 || CL.StepNo == 2) && status != 4 && checkAssiner == true) {
                        EditSoluongConfirm = true;
                    }
                    if ((CL.TypeId == 23 || CL.TypeId == 125) && (CL.StepNo == 4) && status != 4 && checkSender == true) {
                        EditSoluongDat = true;
                    }
                    //______________
                    //Loại 126 và 127
                    if ((CL.TypeId == 126 || CL.TypeId == 127) && (CL.StepNo == 1 || CL.StepNo == 2) && status != 4 && checkAssiner == true) {
                        EditSoluongConfirm = true;
                    }
                    if ((CL.TypeId == 126 || CL.TypeId == 127) && (CL.StepNo == 4) && status != 4 && checkSender == true) {
                        EditSoluongDat = true;
                    }
                    //______________
                    //Loại 126 và 127
                    if (CL.TypeId == 129 && CL.StepNo == 1 && status != 4 && checkAssiner == true) {
                        EditSoluongConfirm = true;
                    }
                    if (CL.TypeId == 129 && (CL.StepNo == 1) && status != 4 && checkSender == true) {
                        EditSoluongDat = true;
                    }
                    //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                    var HTXApp = false;

                    if ((CL.TypeId == 23 || CL.TypeId == 126 || CL.TypeId == 127 || CL.TypeId == 125) && CL.StepNo == 2 && status != 4 && status != 5 && checkAssiner == true) {
                        HTXApp = true;
                    }
                    if ((CL.TypeId == 23) && (CL.StepNo == 5) && status != 4) {
                        EditSoluongDat = true;
                    }
                    var sourceHinhThuc = ['Xuất từ NCC', 'Xuất từ kho HC'];
                    //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                    //______________

                    if (CL.TypeId == 23 || CL.TypeId == 127 || CL.TypeId == 125 || CL.TypeId == 126) {//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        //▼  LuanNT44-06/09/2019-23
                        $('#hansontable_data_truy_thu_shop_23').css('overflow', 'auto');
                        //▼ LuanNT44-23/10/2019-23-edit SLAO shop
                        var container_TruyThuShop23 = $$('hansontable_data_truy_thu_shop_23'), hot_23;
                        var Loaddata_NVTT23 = [];
                        if (dataNV.length > 0 && (CL.FromShop != '' && CL.FromShop != null && CL.FromShop != undefined)) {
                            $.each(dataNV, function (index, item) {
                                Loaddata_NVTT23.push(item.NVShop);
                            });
                        }
                        var checkPopup = true;
                        if (checkAssiner == true && CL.StepNo == 2 && CL.Status < 4) {
                            checkPopup = false;
                        }
                        var setting_ShopTT23 = function () {
                            return {
                                //=================================Data=======
                                //data: dataLoad2,
                                //================================Cols=======
                                manualColumnMove: true,
                                rowHeaders: true,
                                minSpareRows: 5,
                                stretchH: 'all',

                                //====================================Oder ==============================================
                                colHeaders: [
                                    'Tên nhân viên bị truy thu',
                                    'Email nhân viên bị truy thu',
                                    'Số lượng áo',   // LuanNT44-20/09/2019-23
                                    'Tháng truy thu'
                                ],
                                columns: [
                                    { data: "Employess", type: 'autocomplete', strict: false, source: Loaddata_NVTT23, width: 200, className: 'htLeft', readOnly: checkPopup },
                                    { data: "Email", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                    { data: "SLAo", type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, width: 100, readOnly: checkPopup }, // LuanNT44-20/09/2019-23
                                    { data: "ThangTT", type: 'text', width: 100, className: 'htLeft', readOnly: true }
                                ],
                                afterChange: function (changes, source) {
                                    if (!changes || source == 'not') {
                                        return;
                                    }
                                    var instance = this;
                                    changes.forEach(function (change) {
                                        var row = change[0];
                                        var col = change[1];
                                        var newValue = change[3];
                                        var cellProperties, options;
                                        var d = new Date();
                                        if (col === 'Employess') {
                                            if (newValue !== null && newValue !== '' && newValue !== undefined) {
                                                var email = ''
                                                $.grep(dataNV, function (item, index) {
                                                    if (item.NVShop === newValue) {
                                                        email = item.Email;
                                                    }
                                                })
                                                hot_23.setDataAtRowProp(row, 'Email', email, 'not');
                                                //▼ LuanNT44-19/09/2019-23-edit ngày
                                                var dataDate = dataHc[0].TimeCreate;
                                                var ThangTT = Number(dataDate.split('/')[1]);  // LuanNT44-19/09/2019-23-edit ngày
                                                hot_23.setDataAtRowProp(row, 'SLAo', 1, 'not');
                                                hot_23.setDataAtRowProp(row, 'ThangTT', ThangTT, 'not');
                                                //▲ LuanNT44-19/09/2019-23-edit ngày
                                            }
                                            else {
                                                hot_23.setDataAtRowProp(row, 'Email', '', 'not');
                                                hot_23.setDataAtRowProp(row, 'ThangTT', '', 'not');
                                            }
                                        }
                                        if (col === 'SLAo') {
                                            if (newValue === '' || newValue === null || newValue === undefined || Number(newValue) < 1) {
                                                hot_23.setDataAtRowProp(row, 'SLAo', 1, 'not');
                                            }
                                        }
                                    });
                                    hot_23.render();
                                },
                            };
                        };
                        //▲ LuanNT44-23/10/2019-23-edit SLAO shop
                        var actionRendererUpload_23 = function (instance, td, row, col, prop, value, cellProperties) {

                            if (prop == 'NVTT') {
                                var valid = instance.getDataAtRowProp(row, 'Item');
                                var $button = '';
                                if (valid === null || valid === '' || valid === undefined || dataHc[row].Property13 === '' || dataHc[row].Property13 === null || dataHc[row].Property13 === undefined) { // LuanNT44-23/10/2019-23-edit SLAO shop
                                    $button = '';
                                }
                                else {
                                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:blue; margin-top: 5%;"></i>');

                                    $button.click(function () {
                                        hot_23 = new Handsontable(container_TruyThuShop23, setting_ShopTT23());
                                        var rowline = $(this).attr('data-value');
                                        var ThangTT;
                                        var dataNV = [];
                                        var dataMail = [];
                                        var dataSoLuong = [];// LuanNT44-20/09/2019-23
                                        if (dataHc[rowline].Property13 !== '' && dataHc[rowline].Property13 !== null && dataHc[rowline].Property13 !== undefined) {
                                            if (dataHc[rowline].Property13.indexOf(',') > 0) {
                                                dataNV = dataHc[rowline].Property13.split(',');
                                            }
                                            else {
                                                dataNV.push(dataHc[rowline].Property13);
                                            }
                                        }
                                        if (dataHc[rowline].Email !== '' && dataHc[rowline].Email !== null && dataHc[rowline].Email !== undefined) {
                                            if (dataHc[rowline].Email.indexOf(',') > 0) {
                                                dataMail = dataHc[rowline].Email.split(',');
                                            }
                                            else {
                                                dataMail.push(dataHc[rowline].Email);
                                            }
                                        }
                                        //▼ LuanNT44-20/09/2019-23
                                        if (dataHc[rowline].Property14 !== '' && dataHc[rowline].Property14 !== null && dataHc[rowline].Property14 !== undefined) {
                                            if (dataHc[rowline].Property14.indexOf(',') > 0) {
                                                dataSoLuong = dataHc[rowline].Property14.split(',');
                                            }
                                            else {
                                                dataSoLuong.push(dataHc[rowline].Property14);
                                            }
                                        }
                                        var dataDate = dataHc[0].TimeCreate;
                                        //if(Number(dataDate.split('/')[0]) < 11)
                                        //{
                                        //    ThangTT = Number(dataDate.split('/')[1])-;
                                        //}
                                        //else
                                        //{
                                        //    ThangTT = Number(dataDate.split('/')[1]);
                                        //}
                                        ThangTT = Number(dataDate.split('/')[1]);  // LuanNT44-19/09/2019-23-edit ngày
                                        var dataLoad = [];
                                        if (dataNV.length > 0) {
                                            $.each(dataNV, function (index, item) {
                                                dataLoad.push({ Employess: item, Email: dataMail[index], SLAo: dataSoLuong[index], ThangTT: ThangTT });
                                            });
                                        }
                                        //▲ LuanNT44-20/09/2019-23
                                        //console.log(dataLoad);
                                        hot_23.loadData(dataLoad);
                                        $('#modalNVTruyThu_23').modal('show');
                                        $('#btncomfirm23').attr('data-id', rowline); // LuanNT44-23/10/2019-23-edit SLAO shop
                                        setTimeout(function () {
                                            document.getElementById('hansontable_data_truy_thu_shop_23').click();
                                        }, 500);
                                    });
                                }
                                $button != '' ?
                                    $(td).empty().append($button) :
                                    $(td).empty().append('');
                            }
                            else {
                                $(td).empty().append('');
                            }
                            td.style.textAlign = 'center';
                        };
                        //▲ LuanNT44-06/09/2019-23                        
                        //▼  LuanNT44-13/11/2019-23
                        if (dataHc[0].Property16 === '00304') {
                            var setting = function () {
                                return {
                                    data: dataHc,
                                    colHeaders: true,
                                    rowHeaders: true,
                                    stretchH: 'all',
                                    fillHandle: false,
                                    allowInvalid: false,
                                    currentRowClassName: 'currentRow',
                                    fixedColumnsLeft: 2,
                                    manualColumnResize: true,
                                    manualRowResize: true,
                                    outsideClickDeselects: true,
                                    minSpareRows: 2,
                                    minRows: dataHc.length + 1,
                                    colHeaders: ["Nhóm sản phẩm",
                                        "Mặt hàng",
                                        "Hình thức xuất",
                                        "Chi tiết thay đổi kho xuất sp",
                                        "Số lượng tồn kho",
                                        "Số lượng đặt",
                                        'Số lương đặt Confirm',
                                        "Số lượng xác nhận của Shop/BO",
                                        "Ngày thực tế nhận hàng",
                                        "Đơn giá",
                                        "Thành tiền",
                                        "Đơn vị tính",
                                        "Ghi chú",
                                        "Số giao dịch",
                                        "Số lượng xuất hoá đơn",
                                        "Số hoá đơn",
                                        "Shop đặt áo"],
                                    columns: [
                                        {
                                            data: "ProductGroup",
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: "Item",
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: "HinhThucXuat",
                                            className: 'htLeft',
                                            type: 'autocomplete',
                                            source: sourceHinhThuc,
                                            width: 200,
                                            readOnly: !HTXApp
                                        }, {
                                            data: "Property2",
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'text'
                                        }, {
                                            data: 'Quantity3',
                                            type: 'numeric',
                                            readOnly: true,
                                            format: '0,0'
                                        }, {
                                            data: 'Quantity',
                                            type: 'numeric',
                                            readOnly: true,
                                            format: '0,0',
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (dataHc[row].Approved === true) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.color = 'red';
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            },
                                        },
                                        {
                                            data: 'Quantity1',
                                            readOnly: !EditSoluongConfirm,
                                            type: 'numeric',
                                            format: '0,0',
                                            validator: Validater.number,
                                            allowInvalid: false,
                                        }, {
                                            data: 'QuantityAvaiable',
                                            readOnly: !EditSoluongDat,
                                            type: 'numeric',
                                            format: '0,0',
                                            validator: Validater.number,
                                            allowInvalid: false,
                                        }, {
                                            data: 'TimeConfirm',
                                            readOnly: !EditSoluongDat,
                                            type: 'date',
                                        }, {
                                            data: 'Price',
                                            readOnly: true,
                                            type: 'numeric',
                                            format: '0,0',
                                            width: 80,
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (col === 9 && row === dataHc.length - 1) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.textAlign = 'right';
                                                    td.style.color = 'green';
                                                    value = 'Tổng tiền:';
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            }
                                        }, {
                                            data: 'Sum',
                                            readOnly: true,
                                            type: 'numeric',
                                            format: '0,0',
                                            width: 150,
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (col === 10 && row === dataHc.length - 1) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.textAlign = 'right';
                                                    td.style.color = 'green';
                                                    var total = 0;
                                                    $.each(dataHc, function (index, item) {
                                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                                    });
                                                    value = total;
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            }
                                        }, {
                                            data: 'Unit',
                                            readOnly: true,
                                            className: 'htLeft',
                                            width: 100
                                        }, {
                                            data: 'Note',
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: 'Property10',
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: 'Quantity2',
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'numeric',
                                            format: '0,0'
                                        }, {
                                            data: 'Property9',
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'text'
                                        },
                                        { data: "Property15", type: 'text', className: 'htLeft', readOnly: true },

                                    ],

                                    beforeChange: function (changes, source) {
                                        if (source == 'not') return;
                                        for (i = 0; i < changes.length; i++) {
                                            var row = changes[i][0], col = changes[i][1];
                                            if (col === 'Quantity1') {
                                                var value = changes[i][3];
                                                var newthanhtien = value * hot.getDataAtCell(row, 9);
                                                hot.setDataAtCell(row, 10, newthanhtien, 'not');
                                                return true;
                                            }
                                            if (col === 'HinhThucXuat') {
                                                var value = changes[i][3];
                                                if (value == '' || value == null || value == undefined) {
                                                    return false;
                                                }
                                                else {
                                                    var listArr = [];
                                                    $.each(sourceHinhThuc, function (index, item) {
                                                        listArr.push(item);
                                                    });
                                                    if ($.inArray(value, listArr) == -1) {
                                                        return false;
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    cells: function (row, col, prop) {
                                        cellProperties = {};
                                        if (row === dataHc.length - 1)
                                            cellProperties.readOnly = true;
                                        return cellProperties;
                                    }
                                };
                            };
                        }
                        else if (dataHc[0].Property12 === 'NCC') {
                            //▲ LuanNT44-13/11/2019-23
                            var setting = function () {
                                return {
                                    data: dataHc,
                                    colHeaders: true,
                                    rowHeaders: true,
                                    stretchH: 'all',
                                    fillHandle: false,
                                    allowInvalid: false,
                                    currentRowClassName: 'currentRow',
                                    fixedColumnsLeft: 2,//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    manualColumnResize: true,
                                    manualRowResize: true,
                                    outsideClickDeselects: true,
                                    minSpareRows: 2,//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    //maxRows: dataHc.length + 1,
                                    minRows: dataHc.length + 1,
                                    //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    colHeaders: ["Nhóm sản phẩm",
                                        "Mặt hàng",
                                        "Hình thức xuất",
                                        "Chi tiết thay đổi kho xuất sp",
                                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                        "Số lượng tồn kho",
                                        "Số lượng đặt",
                                        'Số lương đặt Confirm',
                                        "Số lượng xác nhận của Shop/BO",
                                        "Ngày thực tế nhận hàng",
                                        "Đơn giá",
                                        "Thành tiền",
                                        "Đơn vị tính",
                                        "Ghi chú",
                                        "Số giao dịch",
                                        "Số lượng xuất hoá đơn",
                                        "Số hoá đơn",
                                        "NV đặt mua áo"], // LuanNT44-06/09/2019-23
                                    columns: [
                                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                        {
                                            data: "ProductGroup",
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: "Item",
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: "HinhThucXuat",
                                            className: 'htLeft',
                                            type: 'autocomplete',
                                            source: sourceHinhThuc,
                                            width: 200,
                                            readOnly: !HTXApp
                                        }, {
                                            data: "Property2",
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'text'
                                        }, {
                                            data: 'Quantity3',
                                            type: 'numeric',
                                            readOnly: true,
                                            format: '0,0'
                                        }, {
                                            data: 'Quantity',
                                            type: 'numeric',
                                            readOnly: true,
                                            format: '0,0',
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (dataHc[row].Approved === true) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.color = 'red';
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            },
                                        },
                                        {
                                            data: 'Quantity1',
                                            readOnly: !EditSoluongConfirm,
                                            type: 'numeric',
                                            format: '0,0',
                                            validator: Validater.number,
                                            allowInvalid: false,
                                        }, {
                                            data: 'QuantityAvaiable',
                                            readOnly: !EditSoluongDat,
                                            type: 'numeric',
                                            format: '0,0',
                                            validator: Validater.number,
                                            allowInvalid: false,
                                        }, {
                                            data: 'TimeConfirm',
                                            readOnly: !EditSoluongDat,
                                            type: 'date',
                                        }, {
                                            data: 'Price',
                                            readOnly: true,
                                            type: 'numeric',
                                            format: '0,0',
                                            width: 80,
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (col === 9 && row === dataHc.length - 1) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.textAlign = 'right';
                                                    td.style.color = 'green';
                                                    value = 'Tổng tiền:';
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            }
                                        }, {
                                            data: 'Sum',
                                            readOnly: true,
                                            type: 'numeric',
                                            format: '0,0',
                                            width: 150,
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (col === 10 && row === dataHc.length - 1) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.textAlign = 'right';
                                                    td.style.color = 'green';
                                                    var total = 0;
                                                    $.each(dataHc, function (index, item) {
                                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                                    });
                                                    value = total;
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            }
                                        }, {
                                            data: 'Unit',
                                            readOnly: true,
                                            className: 'htLeft',
                                            width: 100
                                        }, {
                                            data: 'Note',
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: 'Property10',
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: 'Quantity2',
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'numeric',
                                            format: '0,0'
                                        }, {
                                            data: 'Property9',
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'text'
                                        },
                                        { data: "NVTT", type: 'text', editor: false, renderer: actionRendererUpload_23, width: 150, className: 'htLeft', readOnly: true }, // LuanNT44-06/09/2019-23
                                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    ],
                                    //▼ Edit - ThuongNM2 - 06/06/2018 - Thay đổi số lượng
                                    beforeChange: function (changes, source) {
                                        if (source == 'not') return;
                                        for (i = 0; i < changes.length; i++) {
                                            var row = changes[i][0], col = changes[i][1];
                                            if (col === 'Quantity1') {
                                                var value = changes[i][3];
                                                var newthanhtien = value * hot.getDataAtCell(row, 9);//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                                hot.setDataAtCell(row, 10, newthanhtien, 'not');//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                                //▼ Add - LuanNT44 - 30/12/2019 - 23 - fix SL
                                                if (value == 0 && dataHc[row].GroupId == 19) {
                                                    $.each(hot.getData(), function (index, item) {
                                                        if (index == row) {
                                                            item.NhanVienTT = '';
                                                            item.NV = '';
                                                            item.Email = '';
                                                            item.SoluongAo = 0;
                                                            item.Month = '';
                                                            item.Property13 = '';
                                                            item.Property14 = '';
                                                            item.EmailS = '';
                                                        }
                                                    });
                                                }
                                                //▲ Add - LuanNT44 - 30/12/2019 - 23 - fix SL
                                                return true;
                                            }
                                            //▲ Edit - ThuongNM2 - 06/06/2018 - Thay đổi số lượng
                                            //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                            if (col === 'HinhThucXuat') {
                                                var value = changes[i][3];
                                                if (value == '' || value == null || value == undefined) {
                                                    return false;
                                                }
                                                else {
                                                    var listArr = [];
                                                    $.each(sourceHinhThuc, function (index, item) {
                                                        listArr.push(item);
                                                    });
                                                    if ($.inArray(value, listArr) == -1) {
                                                        return false;
                                                    }
                                                }
                                            }
                                            //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                        }
                                    },
                                    cells: function (row, col, prop) {
                                        cellProperties = {};
                                        if (row === dataHc.length - 1)
                                            cellProperties.readOnly = true;
                                        return cellProperties;
                                    }
                                };
                            };
                        }
                        else {
                            var setting = function () {
                                return {
                                    data: dataHc,
                                    colHeaders: true,
                                    rowHeaders: true,
                                    stretchH: 'all',
                                    fillHandle: false,
                                    allowInvalid: false,
                                    currentRowClassName: 'currentRow',
                                    fixedColumnsLeft: 2,//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    manualColumnResize: true,
                                    manualRowResize: true,
                                    outsideClickDeselects: true,
                                    minSpareRows: 2,//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    //maxRows: dataHc.length + 1,
                                    minRows: dataHc.length + 1,
                                    //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    colHeaders: ["Nhóm sản phẩm",
                                        "Mặt hàng",
                                        "Hình thức xuất",
                                        "Chi tiết thay đổi kho xuất sp",
                                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                        "Số lượng tồn kho",
                                        "Số lượng đặt",
                                        'Số lương đặt Confirm',
                                        "Số lượng xác nhận của Shop/BO",
                                        //▼ Add - ThuongNM2 - 08/06/2018 - Thêm Cột ngày thực tế nhận hàng vào nhóm yêu cầu Hành chính
                                        "Ngày thực tế nhận hàng",
                                        "Đơn giá",
                                        "Thành tiền",
                                        "Đơn vị tính",
                                        "Ghi chú",
                                        "Số giao dịch",
                                        "Số lượng xuất hoá đơn",
                                        "Số hoá đơn",
                                        "NV bị truy thu"], // LuanNT44-06/09/2019-23
                                    columns: [
                                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                        {
                                            data: "ProductGroup",
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: "Item",
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: "HinhThucXuat",
                                            className: 'htLeft',
                                            type: 'autocomplete',
                                            source: sourceHinhThuc,
                                            width: 200,
                                            readOnly: !HTXApp
                                        }, {
                                            data: "Property2",
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'text'
                                        }, {
                                            data: 'Quantity3',
                                            type: 'numeric',
                                            readOnly: true,
                                            format: '0,0'
                                        }, {
                                            data: 'Quantity',
                                            type: 'numeric',
                                            readOnly: true,
                                            format: '0,0',
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (dataHc[row].Approved === true) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.color = 'red';
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            },
                                        },
                                        {
                                            data: 'Quantity1',
                                            readOnly: !EditSoluongConfirm,
                                            type: 'numeric',
                                            format: '0,0',
                                            validator: Validater.number,
                                            allowInvalid: false,
                                        }, {
                                            data: 'QuantityAvaiable',
                                            readOnly: !EditSoluongDat,
                                            type: 'numeric',
                                            format: '0,0',
                                            validator: Validater.number,
                                            allowInvalid: false,
                                        }, {
                                            data: 'TimeConfirm',
                                            readOnly: !EditSoluongDat,
                                            type: 'date',
                                        },
                                        //▲ Add - ThuongNM2 - 08/06/2018 - Thêm Cột ngày thực tế nhận hàng vào nhóm yêu cầu Hành chính
                                        {
                                            data: 'Price',
                                            readOnly: true,
                                            type: 'numeric',
                                            format: '0,0',
                                            width: 80,
                                            //▼ Add - ThuongNM2 - 16/06/2018 - Chỉnh sửa line Tổng tiền
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (col === 9 && row === dataHc.length - 1) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.textAlign = 'right';
                                                    td.style.color = 'green';
                                                    value = 'Tổng tiền:';
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            }
                                        }, {
                                            data: 'Sum',
                                            readOnly: true,
                                            type: 'numeric',
                                            format: '0,0',
                                            width: 150,
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (col === 10 && row === dataHc.length - 1) {
                                                    td.style.fontWeight = 'bold';
                                                    td.style.textAlign = 'right';
                                                    td.style.color = 'green';
                                                    var total = 0;
                                                    $.each(dataHc, function (index, item) {
                                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                                    });
                                                    value = total;
                                                }
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            }
                                            //▲ Add - ThuongNM2 - 16/06/2018 - Chỉnh sửa line Tổng tiền
                                        }, {
                                            data: 'Unit',
                                            readOnly: true,
                                            className: 'htLeft',
                                            width: 100
                                        }, {
                                            data: 'Note',
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: 'Property10',
                                            readOnly: true,
                                            className: 'htLeft'
                                        }, {
                                            data: 'Quantity2',
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'numeric',
                                            format: '0,0'
                                        }, {
                                            data: 'Property9',
                                            readOnly: true,
                                            className: 'htLeft',
                                            type: 'text'
                                        },
                                        { data: "NVTT", type: 'text', editor: false, renderer: actionRendererUpload_23, width: 150, className: 'htLeft', readOnly: true }, // LuanNT44-06/09/2019-23
                                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    ],
                                    //▼ Edit - ThuongNM2 - 09/06/2018 -  Thay đổi Quantity1 thì Sum = Quantity1*Price
                                    beforeChange: function (changes, source) {
                                        if (source == 'not') return;
                                        for (i = 0; i < changes.length; i++) {
                                            var row = changes[i][0], col = changes[i][1];
                                            if (col === 'Quantity1') {
                                                var value = changes[i][3], newthanhtien = value * hot.getDataAtCell(row, 9);//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                                hot.setDataAtCell(row, 10, newthanhtien, 'not');//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                                //▼ Add - LuanNT44 - 30/12/2019 - 23 - fix SL
                                                if (value == 0 && dataHc[row].GroupId == 19) {
                                                    $.each(hot.getData(), function (index, item) {
                                                        if (index == row) {
                                                            item.NhanVienTT = '';
                                                            item.NV = '';
                                                            item.Email = '';
                                                            item.SoluongAo = 0;
                                                            item.Month = '';
                                                            item.Property13 = '';
                                                            item.Property14 = '';
                                                            item.EmailS = '';
                                                        }
                                                    });
                                                }
                                                //▲ Add - LuanNT44 - 30/12/2019 - 23 - fix SL
                                                return true;
                                            }
                                            //▲ Edit - ThuongNM2 - 09/06/2018 -  Thay đổi Quantity1 thì Sum = Quantity1*Price
                                            //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                            if (col === 'HinhThucXuat') {
                                                var value = changes[i][3];
                                                if (value == '' || value == null || value == undefined) {
                                                    return false;
                                                }
                                                else {
                                                    var listArr = [];
                                                    $.each(sourceHinhThuc, function (index, item) {
                                                        listArr.push(item);
                                                    });
                                                    if ($.inArray(value, listArr) == -1) {
                                                        return false;
                                                    }
                                                }
                                            }
                                            //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                        }


                                    },
                                    cells: function (row, col, prop) {
                                        cellProperties = {};
                                        if (row === dataHc.length - 1)
                                            cellProperties.readOnly = true;
                                        return cellProperties;
                                    }
                                };
                            };
                        };
                        //▼  LuanNT44-06/09/2019-23
                        $('#modalNVTruyThu_23').on('hide.bs.modal', function (e) {
                            hot_23.destroy();
                        });
                        //▼ LuanNT44-23/10/2019-23-edit SLAO shop
                        $('#btncomfirm23').click(function () {
                            var idtemp = $(this).attr('data-id');
                            //console.log(idtemp);
                            var listNV = [], listStringNV = '';
                            var dataCheckSLAO = $.grep(hot_23.getData(), function (item, index) {
                                return (item.Employess !== '' && item.Employess !== null && item.Employess !== undefined)
                            })
                            if (dataCheckSLAO.length > 0) {
                                var FlagcheckSLTT = 0;
                                var flagCheckSLDat = 0;
                                $.each(dataCheckSLAO, function (index, item) {
                                    FlagcheckSLTT += Number(item.SLAo)
                                })
                                $.each(hot.getData(), function (index, item) {
                                    if (index == idtemp) {
                                        flagCheckSLDat = item.Quantity1;
                                    }
                                })
                                if (FlagcheckSLTT != flagCheckSLDat) {
                                    XFunction.RenderMessage('error', 'Số lượng áo trên popup phải bằng số lượng shop confirm nhập trên lưới Calllog !'); return;
                                }
                            }
                            var listNVAll = [], listStringNVAll = '', ListEmail = [], ListStringEmail = '', Thang = '';
                            var listSoLuong = [], listStringSoLuong = '';
                            var soluongAoCF = 0;
                            $.each(hot_23.getData(), function (index, item) {
                                if (item.Employess !== '' && item.Employess !== null && item.Employess !== undefined) {
                                    listNV.push(item.Employess.split('-')[0]);
                                    listNVAll.push(item.Employess);
                                    var tmpemail = ' ';
                                    if (item.Email !== '' && item.Email !== null && item.Email !== undefined) {
                                        tmpemail = item.Email;
                                    }
                                    ListEmail.push(tmpemail);
                                    listSoLuong.push(item.SLAo);
                                    soluongAoCF = soluongAoCF + Number(item.SLAo);
                                    Thang = item.ThangTT;
                                }
                            })
                            if (listNV.length > 0) {
                                listStringNV = listNV.join(',');
                                listStringNVAll = listNVAll.join(',');
                            }
                            if (ListEmail.length > 0) {
                                ListStringEmail = ListEmail.join(',');
                            }
                            if (listSoLuong.length > 0) {
                                listStringSoLuong = listSoLuong.join(',');
                            }
                            $.each(hot.getData(), function (index, item) {
                                if (index == idtemp) {
                                    item.NhanVienTT = listStringNV;
                                    item.NV = listStringNVAll;
                                    item.Email = ListStringEmail;
                                    item.SoluongAo = soluongAoCF; //listStringSoLuong
                                    item.Month = Thang;
                                    item.Property13 = listStringNVAll;
                                    item.Property14 = listStringSoLuong;
                                    item.EmailS = ListStringEmail;
                                }
                            });
                            $('#modalNVTruyThu_23').modal('hide'); console.log(hot.getData())
                        });
                        //▲ LuanNT44-23/10/2019-23-edit SLAO shop
                        $('#btncancel23').click(function () {
                            $('#modalNVTruyThu_23').modal('hide');
                        });
                        //▲ LuanNT44-06/09/2019-23
                    }
                    else {
                        var setting = function () {
                            return {
                                data: dataHc,
                                colHeaders: true,
                                rowHeaders: true,
                                stretchH: 'all',
                                startCols: 10,
                                maxCols: 10,
                                minCols: 10,
                                fillHandle: false,
                                allowInvalid: false,
                                currentRowClassName: 'currentRow',
                                fixedColumnsLeft: 1,
                                manualColumnResize: true,
                                manualRowResize: true,
                                outsideClickDeselects: true,
                                minSpareRows: 0,
                                maxRows: dataHc.length + 1,
                                minRows: dataHc.length + 1,
                                colHeaders: ["Mặt hàng", "Hình thức xuất", "Chi tiết thay đổi kho xuất sp", "Số lượng tồn kho", "Số lượng đặt", 'Số lương đặt Confirm', "Số lượng xác nhận của Shop/BO", "Đơn giá", "Thành tiền", "Đơn vị tính", "Ghi chú", "Số giao dịch", "Số lượng xuất hoá đơn", "Số hoá đơn"],//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                columns: [
                                    { data: "Item", readOnly: true, className: 'htLeft' },
                                    //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    { data: "HinhThucXuat", className: 'htLeft', type: 'autocomplete', source: sourceHinhThuc, width: 200, readOnly: !HTXApp },
                                    { data: "Property2", readOnly: true, className: 'htLeft', type: 'text' },
                                    //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    { data: 'Quantity3', type: 'numeric', readOnly: true, format: '0,0' },
                                    { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0' },

                                    { data: 'Quantity1', readOnly: !EditSoluongConfirm, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                                    { data: 'QuantityAvaiable', readOnly: !EditSoluongDat, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                                    {
                                        data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 80,
                                        renderer: function (instance, td, row, col, prop, value) {
                                            if (col === 7 && row === dataHc.length - 1) {//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                                td.style.fontWeight = 'bold';
                                                td.style.textAlign = 'right';
                                                td.style.color = 'green';
                                                value = 'Tổng tiền:';
                                            }
                                            Handsontable.NumericRenderer.apply(this, arguments);
                                        }
                                    },
                                    {
                                        data: 'Sum', readOnly: true, type: 'numeric', format: '0,0', width: 150,
                                        renderer: function (instance, td, row, col, prop, value) {
                                            if (col === 8 && row === dataHc.length - 1) {//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                                td.style.fontWeight = 'bold';
                                                td.style.textAlign = 'right';
                                                td.style.color = 'green';
                                                var total = 0;
                                                $.each(dataHc, function (index, item) {
                                                    (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                                });
                                                value = total;
                                            }
                                            Handsontable.NumericRenderer.apply(this, arguments);
                                        }
                                    },
                                    { data: 'Unit', readOnly: true, className: 'htLeft', width: 100 },
                                    { data: 'Note', readOnly: true, className: 'htLeft' },
                                    { data: 'Property10', readOnly: true, className: 'htLeft' },
                                    { data: 'Quantity2', readOnly: true, className: 'htLeft', type: 'numeric', format: '0,0' },
                                    { data: 'Property9', readOnly: true, className: 'htLeft', type: 'text' }
                                ],
                                //▼ Edit - ThuongNM2 - 06/06/2018 - Thay đổi số lượng
                                beforeChange: function (changes, source) {
                                    if (source == 'not') return;
                                    for (i = 0; i < changes.length; i++) {
                                        var row = changes[i][0], col = changes[i][1];
                                        if (col === 'QuantityAvaiable') {
                                            var value = changes[i][3], newthanhtien = value * hot.getDataAtCell(row, 7);//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                            hot.setDataAtCell(row, 8, newthanhtien, 'not');//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                            return true;
                                        }
                                        if (col === 'Quantity1') {
                                            var value = changes[i][3];
                                            hot.setDataAtCell(row, 6, value, 'edit');//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                            return true;
                                        }
                                        //▲ Edit - ThuongNM2 - 06/06/2018 - Thay đổi số lượng
                                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                        if (col === 'HinhThucXuat') {
                                            var value = changes[i][3];
                                            if (value == '' || value == null || value == undefined) {
                                                return false;
                                            }
                                            else {
                                                var listArr = [];
                                                $.each(sourceHinhThuc, function (index, item) {
                                                    listArr.push(item);
                                                });
                                                if ($.inArray(value, listArr) == -1) {
                                                    return false;
                                                }
                                            }
                                        }
                                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    }


                                },
                                cells: function (row, col, prop) {
                                    cellProperties = {};
                                    if (row === dataHc.length - 1)
                                        cellProperties.readOnly = true;
                                    return cellProperties;
                                }
                            };
                        };
                    }
                    var hot = new Handsontable(container, setting());
                    $("#comment").click(function () {
                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));

                        var message = $("#Message").val();
                        var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                        });
                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });
                        if (message.length == 0) {
                            XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                        } else {
                            if (myData.length < 0) {
                                XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                            } else {
                                $('#Details').val(JSON.stringify(myData));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Conversation");
                                form.submit();
                            }
                        }
                    });
                    $("#reply").click(function () {
                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        var message = $("#Message").val();
                        var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                        });

                        if (message.length == 0) {
                            XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                        } else {
                            if (myData.length < 0) {
                                XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                            } else {
                                //▼ Add - TrungNC3 - 30/11/2017 - Config bill vận chuyển -> shop ngoại thành
                                //ChuongNT3 - 30/06/2018 - chuyển từ reply -> changstep
                                if (CL.TypeId === 126 && CL.StepNo === 4) {
                                    $.ajax({
                                        url: '/Requests/CheckWarehouseConfig',
                                        type: 'GET',
                                        data: {
                                            WarehouseCode: CL.FromShop,
                                        },
                                        error: function (jqXHR, textStatus, errorThrown) {
                                            console.log("ERROR!");
                                        },
                                        success: function (datasCF) {
                                            if (datasCF[0].ShopConfig === 0) {
                                                $('#Approved_HuongXL_45').val('0');
                                                $('#Details').val(JSON.stringify(myData));
                                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                var form = $("form#form-detail");
                                                form.attr("action", "/Requests/Reply");
                                                form.submit();

                                            }
                                            else if (datasCF[0].ShopConfig === 1) {
                                                $('#Approved_HuongXL_45').val('1');
                                                $('#Details').val(JSON.stringify(myData));
                                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                var form = $("form#form-detail");
                                                form.attr("action", "/Requests/Reply");
                                                form.submit();
                                            }
                                            else if (datasCF[0].ShopConfig === -1) {
                                                if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                                    $('#Approved_HuongXL_45').val('0');
                                                    $('#Details').val(JSON.stringify(myData));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/Reply");
                                                    form.submit();
                                                }
                                                else {
                                                    $('#Approved_HuongXL_45').val('1');
                                                    $('#Details').val(JSON.stringify(myData));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/Reply");
                                                    form.submit();
                                                };
                                            };
                                        }
                                    });
                                }
                                else {
                                    $('#Approved_HuongXL_45').val('1');
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/Reply");
                                    form.submit();
                                };
                                //▲ Add - TrungNC3 - 30/11/2017 - Config bill vận chuyển -> shop ngoại thành

                            };
                        };
                    });
                    $("#complete").click(function () {
                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));

                        var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                        });
                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        //▼ Edit - ThuongNM2 - 27/07/2018 - Điều kiện hoàn tất callLog
                        //▼ Edit - ThuongNM2 - 31/12/2018 - Bỏ rule D13 mới nhập số lượng confirm = 0
                        if (CL.TypeId == 23) {
                            var checkQuantityAvaiable = [], dataDateConfirm = [], dataFileUpload = [];
                            var checkInputConfirm = false;
                            var checkSLAoShop = 0; // LuanNT44-23/10/2019-23-edit SLAO shop
                            $.each(myData, function (index, item) {
                                if (CL.StepNo > 2) {
                                    if (item.QuantityAvaiable != null && item.QuantityAvaiable >= 0) {
                                        if (item.QuantityAvaiable > 0) {
                                            if (item.TimeConfirm == '' || item.TimeConfirm == null || item.TimeConfirm == undefined) {
                                                dataDateConfirm.push(index + 1);
                                            }
                                            if ($('#fileUpload').val() == '' || $('#fileUpload').val() == null || $('#fileUpload').val() == undefined) {
                                                dataFileUpload.push(index + 1);
                                            }
                                        }
                                        if (CL.StepNo === 5 && CL.Status < 4 && item.QuantityAvaiable === 0) {
                                            checkInputConfirm = true;
                                        }
                                    }
                                    else {
                                        checkQuantityAvaiable.push(index + 1);
                                    }
                                }
                                //▼ LuanNT44-23/10/2019-23-edit SLAO shop
                                if (CL.StepNo == 2 && (CL.FromShop != '' && CL.FromShop != null && CL.FromShop != undefined)) {
                                    if (item.Property13 !== '' && item.Property13 !== null && item.Property13 !== undefined) {
                                        if (item.Quantity1 != item.SoluongAo) {
                                            checkSLAoShop++;
                                        }
                                    }
                                }
                                //▲ LuanNT44-23/10/2019-23-edit SLAO shop
                            });
                            //▼ LuanNT44-23/10/2019-23-edit SLAO shop
                            if (checkSLAoShop > 0) {
                                XFunction.RenderMessage("error", "Số lượng áo trên popup phải bằng số lượng shop confirm nhập trên lưới Calllog !");
                                return false;
                            }
                            //▲ LuanNT44-23/10/2019-23-edit SLAO shop
                            if (checkQuantityAvaiable.length > 0) {
                                XFunction.RenderMessage("error", "Vui lòng nhập số lượng hàng nhận trước khi hoàn tất.");
                                return false;
                            }
                            if (dataDateConfirm.length > 0) {
                                XFunction.RenderMessage("error", "Vui lòng cập nhật ngày nhận hàng thực tế trước khi hoàn tất.");
                                return false;
                            }
                            if (dataFileUpload.length > 0) {
                                XFunction.RenderMessage("error", "Vui lòng đính kèm file biên bản giao nhận trước khi hoàn tất.");
                                return false;
                            }
                            var message = $("#Message").val();
                            if (checkInputConfirm === true && message === "") {
                                XFunction.RenderMessage("error", "Vui lòng nhập lý do Số lượng xác nhận của Shop/BO bằng 0 vào nội dung trao đổi trước khi hoàn tất ");
                                return false;
                            }
                        }
                        //▲ Edit - ThuongNM2 - 31/12/2018 - Bỏ rule D13 mới nhập số lượng confirm = 0
                        //▲ Edit - ThuongNM2 - 27/07/2018 - Điều kiện hoàn tất callLog

                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                        } else {

                            //▼ Add - TrungNC3 - 30/11/2017 - Config bill vận chuyển -> shop ngoại thành
                            if (CL.TypeId === 127 && CL.StepNo === 3) {
                                $.ajax({
                                    url: '/Requests/CheckWarehouseConfig',
                                    type: 'GET',
                                    data: {
                                        WarehouseCode: CL.FromShop,
                                    },
                                    error: function (jqXHR, textStatus, errorThrown) {
                                        console.log("ERROR!");
                                    },
                                    success: function (datasCF) {
                                        if (datasCF[0].ShopConfig === 0) {
                                            $('#Approved_HuongXL_45').val('0');
                                            $('#Details').val(JSON.stringify(myData));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/Complete");
                                            form.submit();

                                        }
                                        else if (datasCF[0].ShopConfig === 1) {
                                            $('#Approved_HuongXL_45').val('1');
                                            $('#Details').val(JSON.stringify(myData));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/Complete");
                                            form.submit();
                                        }
                                        else if (datasCF[0].ShopConfig === -1) {
                                            if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                                $('#Approved_HuongXL_45').val('0');
                                                $('#Details').val(JSON.stringify(myData));
                                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                var form = $("form#form-detail");
                                                form.attr("action", "/Requests/Complete");
                                                form.submit();
                                            }
                                            else {
                                                $('#Approved_HuongXL_45').val('1');
                                                $('#Details').val(JSON.stringify(myData));
                                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                var form = $("form#form-detail");
                                                form.attr("action", "/Requests/Complete");
                                                form.submit();
                                            };
                                        };
                                    }
                                });
                            }
                            else {
                                $('#Approved_HuongXL_45').val('1');
                                $('#Details').val(JSON.stringify(myData));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Complete");
                                form.submit();
                            };
                            //▲ Add - TrungNC3 - 30/11/2017 - Config bill vận chuyển -> shop ngoại thành
                        }
                    });

                    //ChuongNT3 - 19/09/2018 - thêm nút tạo bill
                    $("#changeStep").click(function () {
                        $.get('/Requests/CheckBillVC', { requestid: requestInfo.Id }, function (check_bill) {
                            if (check_bill[0].Check_bill == 0 && check_bill[0].Noi_Thanh == 0 && check_bill[0].Ngoai_Thanh == 1 && CL.TypeId === 23 && CL.StepNo === 4) {
                                XFunction.RenderMessage("error", "Shop ngoại thành phải tạo bill mới được chuyển bước ");
                                return false;
                            }
                            else {
                                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                $('#ImageValidate').val(checkedVals.join(","));
                                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                                });
                                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                });
                                if (myData.length < 0) {
                                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                                } else {
                                    //ChuongNT3 - 30/06/2018 - chuyển từ reply -> changstep
                                    if (CL.TypeId === 23 && CL.StepNo === 4) {
                                        $.ajax({
                                            url: '/Requests/CheckWarehouseConfig',
                                            type: 'GET',
                                            data: {
                                                WarehouseCode: CL.FromShop,
                                            },
                                            error: function (jqXHR, textStatus, errorThrown) {
                                                console.log("ERROR!");
                                            },
                                            success: function (datasCF) {
                                                if (datasCF[0].ShopConfig === 0) {
                                                    $('#Approved_HuongXL_45').val('0');
                                                    $('#Details').val(JSON.stringify(myData));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/ChangeStep");
                                                    form.submit();
                                                }
                                                else if (datasCF[0].ShopConfig === 1) {
                                                    $('#Approved_HuongXL_45').val('1');
                                                    $('#Details').val(JSON.stringify(myData));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/ChangeStep");
                                                    form.submit();
                                                }
                                                else if (datasCF[0].ShopConfig === -1) {
                                                    if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                                        $('#Approved_HuongXL_45').val('0');
                                                        $('#Details').val(JSON.stringify(myData));
                                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/ChangeStep");
                                                        form.submit();
                                                    }
                                                    else {
                                                        $('#Approved_HuongXL_45').val('1');
                                                        $('#Details').val(JSON.stringify(myData));
                                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/ChangeStep");
                                                        form.submit();
                                                    };
                                                };
                                            }
                                        });
                                    }
                                    else {
                                        //▼ Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC
                                        if (CL.Status == 4) {
                                            XFunction.RenderMessage("error", "CallLog đã hoàn tất bạn không thể chuyển bước !"); return;
                                        }
                                        if (CL.TypeId === 23 && CL.StepNo === 1 && (CL.FromShop == '' || CL.FromShop == null || CL.FromShop == undefined)) {
                                            var FlagHT_step1 = 0;
                                            $.each(myData, function (index, item) {
                                                if (item.Quantity1 == 0) {
                                                    FlagHT_step1++;
                                                }
                                            });
                                            if (FlagHT_step1 == myData.length) {
                                                //console.log('3'); return;
                                                $('#Approved_HuongXL_45').val('1');
                                                $('#Approved_HuongXL_23').val('1');
                                                $('#Details').val(JSON.stringify(myData));
                                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                var form = $("form#form-detail");
                                                form.attr("action", "/Requests/Complete");
                                                form.submit();
                                            }
                                            else {
                                                $.get('/Requests/Items_LimitedValue_BO', null, function (dataBO) {
                                                    $.get('/Requests/GetDevices', { type: 23 }, function (data) {
                                                        var dataCheckLimitedHc = [];
                                                        var dataDevices;
                                                        dataDevices = $.grep(data, function (item, index) {
                                                            return item.Loai == 2 || item.Loai == 3;
                                                        });
                                                        var datas = [];
                                                        $.each(myData, function (index, item) {
                                                            var SoLuong = item.Quantity1; // LuanNT44-16/08/2019-HC
                                                            var timkiemthietbi = $.grep(dataDevices, function (element, index) {
                                                                return element.ItemName === item.Item && SoLuong > 0;
                                                            });

                                                            if (timkiemthietbi != null && timkiemthietbi != undefined && timkiemthietbi.length > 0) {
                                                                datas.push({
                                                                    'ProductGroup': timkiemthietbi[0].MaNhomSP,
                                                                    'Item': timkiemthietbi[0].ItemId,
                                                                    'ItemGroup': timkiemthietbi[0].GroupId,
                                                                    'QuantityTonKho': item.Quantity3,
                                                                    'Quantity': SoLuong,
                                                                    'Price': timkiemthietbi[0].Price,
                                                                    'Sum': SoLuong * timkiemthietbi[0].Price,
                                                                    'Unit': timkiemthietbi[0].Unit,
                                                                    'Note': item.Note,
                                                                });
                                                            }
                                                        })

                                                        var dataLimitedHc_BO = dataBO;
                                                        $.each(dataLimitedHc_BO, function (index, itemBO) {
                                                            var nhomgioihan = $.grep(datas, function (element, index) {
                                                                return element.ItemGroup == 5;
                                                            });
                                                            if (nhomgioihan !== null && nhomgioihan !== undefined && nhomgioihan !== "" && nhomgioihan.length > 0) {
                                                                var thanhtien = 0, vuot = 0;
                                                                $.each(nhomgioihan, function (index, itemGroup) {
                                                                    thanhtien += parseInt(itemGroup.Sum);
                                                                });
                                                                if (thanhtien > itemBO.DinhMuc) {
                                                                    vuot = thanhtien - parseInt(itemBO.DinhMuc);
                                                                }
                                                                dataCheckLimitedHc.push({
                                                                    'ItemGroup': itemBO.TenNhom,
                                                                    'DinhMuc': itemBO.DinhMuc,
                                                                    'Vuot': vuot,
                                                                    'Sum': thanhtien,
                                                                    'MaNhom': itemBO.MaPB
                                                                    , 'HanMuc': itemBO.HanMuc
                                                                });
                                                            }
                                                        });
                                                        var checkVuot = $.grep(dataCheckLimitedHc, function (item, index) { return parseInt(item.Vuot) > 0; });
                                                        if (checkVuot !== null && checkVuot !== undefined && checkVuot !== "" && checkVuot.length > 0) {
                                                            $.each(checkVuot, function (index, item) {
                                                                $('#tableGioiHan').append('<tr class="danger"><td>' + item.ItemGroup + '</td><td>' + item.DinhMuc.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</td><td>' + item.Vuot.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</td><td>' + item.Sum.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</td></tr>');
                                                            });
                                                            $('#warningModal23').modal('show');
                                                        }
                                                        else {
                                                            $('#Approved_HuongXL_45').val('1');
                                                            $('#Details').val(JSON.stringify(myData));
                                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                            var form = $("form#form-detail");
                                                            form.attr("action", "/Requests/ChangeStep");
                                                            form.submit();
                                                        }
                                                        $("#SendModal").off('click').click(function () {
                                                            $('#warningModal23').modal("hide");
                                                            $('#tableGioiHan').empty();
                                                            dataCheckLimitedHc = [], datas = [];
                                                            //console.log('1')
                                                            //return;
                                                            $('#Approved_HuongXL_45').val('1');
                                                            $('#Details').val(JSON.stringify(myData));
                                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                            var form = $("form#form-detail");
                                                            form.attr("action", "/Requests/ChangeStep");
                                                            form.submit();
                                                        });
                                                        $("#NoSendModal").off('click').click(function () {
                                                            $('#warningModal23').modal("hide");
                                                            $('#tableGioiHan').empty();
                                                            dataCheckLimitedHc = [], datas = [];
                                                            //console.log('2')
                                                            return false;
                                                        });
                                                    });
                                                });
                                            }
                                        }
                                        else {
                                            $('#Approved_HuongXL_45').val('1');
                                            $('#Details').val(JSON.stringify(myData));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/ChangeStep");
                                            form.submit();
                                        }
                                        //▲  Add - ThuongNM2 - 02/08/2019 - Loại 23 - HC
                                    };
                                }
                            }
                        });
                    });
                    //ChuongNT3 - 19/09/2018 - thêm nút tạo bill
                    $("#tao_bill_do_dung_hc").click(function () {
                        $.get('/Requests/CheckBillVC', { requestid: requestInfo.Id }, function (check_bill) {

                            //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                            if (check_bill[0].Check_bill == 1 && CL.TypeId == 23) {
                                XFunction.RenderMessage("error", "CL đã tạo bill vận chuyển trước đó.</br>Mã bill vận chuyển: " + check_bill[0].Ma_bill);
                                return false;
                            }
                            else if (check_bill[0].Noi_Thanh == 1 && check_bill[0].Ngoai_Thanh == 0 && CL.TypeId == 23) {
                                XFunction.RenderMessage("error", "Shop nội thành không thể tạo bill vận chuyển");
                                return false;
                            }
                            else {
                                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                $('#ImageValidate').val(checkedVals.join(","));
                                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                                });
                                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                });
                                if (myData.length < 0) {
                                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                                } else {
                                    if (CL.TypeId === 23 && CL.StepNo === 4) {
                                        $.ajax({
                                            url: '/Requests/CheckWarehouseConfig',
                                            type: 'GET',
                                            data: {
                                                WarehouseCode: CL.FromShop,
                                            },
                                            error: function (jqXHR, textStatus, errorThrown) {
                                                console.log("ERROR!");
                                            },
                                            success: function (datasCF) {
                                                if (datasCF[0].ShopConfig === 0) {
                                                    $('#Approved_HuongXL_45').val('0');
                                                    $('#Details').val(JSON.stringify(myData));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/TaoBillVC_DoDungHC");
                                                    form.attr("target", "_blank");
                                                    form.submit();
                                                }
                                                else if (datasCF[0].ShopConfig === 1) {
                                                    $('#Approved_HuongXL_45').val('1');
                                                    $('#Details').val(JSON.stringify(myData));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/TaoBillVC_DoDungHC");
                                                    form.attr("target", "_blank");
                                                    form.submit();
                                                }
                                                else if (datasCF[0].ShopConfig === -1) {
                                                    if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                                        $('#Approved_HuongXL_45').val('0');
                                                        $('#Details').val(JSON.stringify(myData));
                                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/TaoBillVC_DoDungHC");
                                                        form.attr("target", "_blank");
                                                        form.submit();
                                                    }
                                                    else {
                                                        $('#Approved_HuongXL_45').val('1');
                                                        $('#Details').val(JSON.stringify(myData));
                                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/TaoBillVC_DoDungHC");
                                                        form.attr("target", "_blank");
                                                        form.submit();
                                                    };
                                                };
                                            }
                                        });
                                    }
                                    else {
                                        $('#Approved_HuongXL_45').val('1');
                                        $('#Details').val(JSON.stringify(myData));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/TaoBillVC_DoDungHC");
                                        form.attr("target", "_blank");
                                        form.submit();
                                    };
                                }
                            }
                            //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

                        });
                    });
                    //ChuongNT3 - 19/09/2018 - thêm nút tạo bill
                }); // LuanNT44-23/10/2019-23-edit SLAO shop
            });
        },
        RenderGridHR: function () {
            $('#sum-money').hide();
            $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
                dataHr = data;
                var Setting_Hr = function () {
                    return {
                        data: dataHr,
                        rowHeaders: true,
                        colHeaders: true,
                        fillHandle: false,
                        stretchH: 'last',
                        startCols: 7,
                        maxCols: 7,
                        minCols: 7,
                        allowInvalid: false,
                        outsideClickDeselects: true,
                        currentRowClassName: 'currentRow',
                        maxRows: dataHr.length + 1,
                        minSpareRows: 1,
                        colHeaders: ["Tên nhân viên", "Số tiền truy thu mỗi tháng", "Ghi chú"],
                        columns: [
                            {
                                data: "Emp", readOnly: true, width: 300, className: 'htLeft',
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === 0 && row === dataHr.length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        value = 'Tổng tiền:';
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            {
                                data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 200, className: 'htRight',
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === 1 && row === dataHr.length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        var total = 0;
                                        $.each(dataHr, function (index, item) {
                                            (item.Price !== null && item.Price !== undefined && item.Price !== "" && !isNaN(item.Price)) ? total += item.Price : total += 0;
                                        });
                                        value = total;
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            { data: 'Note', readOnly: true, className: 'htLeft' }
                        ],
                        beforeChange: function (changes, source) { },
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if (row == dataHr.length - 1) {
                                cellProperties.readOnly = true;
                            }
                            return cellProperties;
                        },
                    };
                };
                var hot = new Handsontable(container, Setting_Hr());
                hot.setDataAtCell(0, 3, dataHr[0].Note, 'not');
                $("#comment").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                        } else {
                            $('#Details').val('');
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                    }
                });
                $("#reply").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                        } else {
                            $('#Details').val('');
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Reply");
                            form.submit();
                        }
                    }
                });
                $("#complete").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val('');
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    }
                });
                $("#changeStep").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val('');
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/ChangeStep");
                        form.submit();
                    }
                });
                $("#btnPrint").click(function (e) {
                    window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                    e.preventDefault();
                });
            });
        },
        RenderGridDept: function () {
            $('#sum-money').hide();
            $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
                var checkSender = false, checkAssiner = false;
                $.each(permissons, function (index, item) {
                    if (item == 'sender') { checkSender = true; }
                    if (item == 'assigner' || item == 'groupAssigner') { checkAssiner = true }
                });

                var l_Container_60 = $$('grvTableDetails_TypeId_60'), l_Hot_60;

                var data_1 = $.grep(data, function (p_Item, p_Index) {
                    return p_Item.UuTien_CongNo == 1
                });
                var data_2 = $.grep(data, function (p_Item, p_Index) {
                    return p_Item.UuTien_CongNo == 2
                });
                var data_3 = $.grep(data, function (p_Item, p_Index) {
                    return p_Item.UuTien_CongNo == 3
                });

                dataDebt = [];
                var f_Add_DataN = function (p_Caption, p_Data, p_GroupLine) {
                    dataDebt.push({
                        STT: null,
                        Id: 0,
                        ShopCode: p_Caption,
                        WarehouseName: null,
                        CustomerName: null,
                        SaleCode: null,
                        Time1: null,
                        Quantity: null,
                        Note: null,
                        Money1: null,
                        Money2: null,
                        Property2: null,
                        Property1: null,
                        Approved: null,
                        Conversations: null,
                        UuTien_CongNo: null,
                        GroupLine: p_GroupLine
                    });

                    $.each(p_Data, function (p_Index, p_Item) {
                        dataDebt.push({
                            STT: null,
                            Id: p_Item.Id,
                            ShopCode: p_Item.ShopCode,
                            WarehouseName: p_Item.WarehouseName,
                            CustomerName: p_Item.CustomerName,
                            SaleCode: p_Item.SaleCode,
                            Time1: p_Item.Time1,
                            Quantity: p_Item.Quantity,
                            Note: p_Item.Note,
                            Money1: p_Item.Money1,
                            Money2: p_Item.Money2,
                            Property2: p_Item.Property2,
                            Property1: p_Item.Property1,
                            Approved: p_Item.Approved,
                            Conversations: p_Item.Conversations,
                            UuTien_CongNo: p_Item.UuTien_CongNo,
                            GroupLine: 0
                        });
                    });
                };

                f_Add_DataN('Công nợ quá hạn > 7 day bắt buộc giải trình', data_1, 1);
                f_Add_DataN('Công nợ quá hạn 3-7 day cần giải trình', data_2, 2);
                f_Add_DataN('Công nợ quá hạn 1-3 day không cần giải trình', data_3, 3);

                //  ===Mảng chứa Column Header của Bảng (Lưu ý: Vị trí của Mảng = Vị trí Column Header của Bảng)===
                var l_ColHeader_Array = [
                    "STT", "Mã BP", "Tên BP", "Tên khách hàng", "Số hóa đơn", "Ngày hóa đơn", "Số ngày quá hạn"
                    , "Diễn giải", "Số tiền hóa đơn (VND)", "Số dư còn lại (VND)", "Nhóm công nợ", "Số ĐH POS"
                    , "Giải trình", "Nhập giải trình"
                ];

                var l_MergeCells = [];
                $.each(dataDebt, function (p_Index, p_Item) {
                    p_Item.STT = p_Index + 1;
                    if (p_Item.GroupLine > 0) {
                        l_MergeCells.push({
                            row: p_Index,
                            col: l_ColHeader_Array.indexOf('Mã BP'),
                            rowspan: 1,
                            colspan: 3
                        });
                    }
                });

                var Setting_Debt = function () {
                    return {
                        data: dataDebt,
                        ////rowHeaders: true,   //  Ẩn cột STT Row của lưới
                        stretchH: 'all',    //  Dãn cột
                        comments: true,
                        allowInvalid: false,
                        currentRowClassName: 'currentRow',
                        manualColumnResize: true,
                        manualRowResize: true,
                        minSpareRows: 1,
                        maxRows: dataDebt.length + 1,
                        ////fixedColumnsLeft: 1,    //  Không bỏ Đóng băng vì Lệch cột

                        mergeCells: l_MergeCells,

                        colHeaders: l_ColHeader_Array,
                        ////colHeaders: [
                        ////    ////"STT",
                        ////    "Mã BP", "Tên BP", "Tên khách hàng", "Số hóa đơn", "Ngày hóa đơn", "Số ngày quá hạn"
                        ////    , "Diễn giải", "Số tiền hóa đơn (VND)", "Số dư còn lại (VND)", "Nhóm công nợ", "Số ĐH POS"
                        ////    , "Giải trình", "Nhập giải trình"
                        ////    ////, "Xác nhận giải trình"
                        ////],
                        columns: [
                            { data: "STT", readOnly: true, className: 'htCenter' },
                            { data: "ShopCode", readOnly: true, className: 'htLeft', width: 75 },
                            { data: "WarehouseName", readOnly: true, className: 'htLeft', width: 200 },
                            { data: "CustomerName", readOnly: true, className: 'htLeft', width: 200 },
                            { data: "SaleCode", readOnly: true, className: 'htLeft', width: 75 },
                            { data: "Time1", readOnly: true, className: 'htLeft', width: 100 },
                            { data: "Quantity", readOnly: true, className: 'htLeft', width: 125 },
                            {
                                data: "Note", readOnly: true, className: 'htLeft', width: 400,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === l_ColHeader_Array.indexOf('Diễn giải') && row === instance.getData().length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        value = 'Tổng tiền:';
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            {
                                data: 'Money1', readOnly: true, type: 'numeric', format: '0,0', className: 'htRight', width: 150,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === l_ColHeader_Array.indexOf('Số tiền hóa đơn (VND)') && row === instance.getData().length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        var total = 0;
                                        $.each(dataDebt, function (index, item) {
                                            (item.Money1 !== null && item.Money1 !== undefined && item.Money1 !== "" && !isNaN(item.Money1)) ? total += item.Money1 : total += 0;
                                        });
                                        value = total;
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            {
                                data: 'Money2', readOnly: true, type: 'numeric', format: '0,0', className: 'htRight', width: 150,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === l_ColHeader_Array.indexOf('Số dư còn lại (VND)') && row === instance.getData().length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        var total = 0;
                                        $.each(dataDebt, function (index, item) {
                                            (item.Money2 !== null && item.Money2 !== undefined && item.Money2 !== "" && !isNaN(item.Money2)) ? total += item.Money2 : total += 0;
                                        });
                                        value = total;
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            { data: "Property2", readOnly: true, className: 'htLeft', width: 100 },
                            { data: "Property1", readOnly: true, className: 'htLeft', width: 100 },
                            { data: "Conversations", renderer: 'html', readOnly: true, className: 'htLeft', width: 300 },
                            { data: "EnterConversations", className: 'htLeft', className: 'htLeft', width: 300 },
                            ////{ data: 'Approved', readOnly: !checkSender, type: 'checkbox', validator: Validater.checkBox, allowInvalid: false, width: 75 }
                        ],
                    };
                };
                l_Hot_60 = new Handsontable(l_Container_60, Setting_Debt());

                var l_GroupLineRenderer_1 = [], l_GroupLineRenderer_2 = [], l_GroupLineRenderer_3 = []
                    , l_LineRenderer_1 = [], l_LineRenderer_2 = [], l_LineRenderer_3 = [];

                $.each(l_Hot_60.getData(), function (index, item) {
                    if (item.Id !== undefined && item.Id !== null && item.Id !== "") {
                        var rootConvertation = item.Conversations;
                        if (item.Conversations !== null && item.Conversations !== undefined && item.Conversation !== "") {
                            var dataConversations = item.Conversations.split("</br>"), rootConvertation = item.Conversations;
                            $.each(dataConversations, function (indexs, item) {
                                rootConvertation = rootConvertation.replace("</br>", ". (" + (indexs + 1) + ")\n");
                            });
                            rootConvertation += ". (" + dataConversations.length + ")";

                            if (dataConversations.length > 0) {
                                item.Conversations = "(" + dataConversations.length + ")" + dataConversations[dataConversations.length - 1];
                                commetConvertation.push({ indexrow: index, comment: rootConvertation });
                            }
                        }

                        //▼	Add - VietMXH - 18/09/2017 - Tách lưới 3 phần==========================================================
                        if (item.GroupLine > 0) {
                            if (item.GroupLine == 1) {
                                l_GroupLineRenderer_1.push(index);
                            }
                            else if (item.GroupLine == 2) {
                                l_GroupLineRenderer_2.push(index);
                            }
                            else if (item.GroupLine == 3) {
                                l_GroupLineRenderer_3.push(index);
                            }
                        }
                        else {
                            if (item.UuTien_CongNo == 1) {
                                l_LineRenderer_1.push(index);
                            }
                            else if (item.UuTien_CongNo == 2) {
                                l_LineRenderer_2.push(index);
                            }
                            else if (item.UuTien_CongNo == 3) {
                                l_LineRenderer_3.push(index);
                            }
                        }
                        //▲	Add====================================================================================================

                    }
                });

                l_Hot_60.updateSettings({
                    cells: function (row, col, prop) {
                        var cellProperties = {};

                        var dataComment = $.grep(commetConvertation, function (item, index) {
                            return item.indexrow === row;
                        });

                        if (dataComment.length > 0 && col == l_ColHeader_Array.indexOf('Giải trình')) {
                            cellProperties.comment = dataComment[0].comment;
                        }
                        if (row == dataDebt.length - 1) {
                            cellProperties.readOnly = true;
                        }

                        //▼	Add - VietMXH - 18/09/2017 - Tách lưới 3 phần==========================================================
                        var l_GroupLineRenderer_1_Check = $.grep(l_GroupLineRenderer_1, function (p_Item, p_Index) {
                            return p_Item === row;
                        });
                        if (l_GroupLineRenderer_1_Check.length > 0) {
                            cellProperties.renderer = functionCellColor.GroupLineRenderer_1;
                        }

                        var l_GroupLineRenderer_2_Check = $.grep(l_GroupLineRenderer_2, function (p_Item, p_Index) {
                            return p_Item === row;
                        });
                        if (l_GroupLineRenderer_2_Check.length > 0) {
                            cellProperties.renderer = functionCellColor.GroupLineRenderer_2;
                        }

                        var l_GroupLineRenderer_3_Check = $.grep(l_GroupLineRenderer_3, function (p_Item, p_Index) {
                            return p_Item === row;
                        });
                        if (l_GroupLineRenderer_3_Check.length > 0) {
                            cellProperties.renderer = functionCellColor.GroupLineRenderer_3;
                        }

                        var l_LineRenderer_1_Check = $.grep(l_LineRenderer_1, function (p_Item, p_Index) {
                            return p_Item === row;
                        });
                        if (l_LineRenderer_1_Check.length > 0 &&
                            (col === l_ColHeader_Array.indexOf('Mã BP')
                                || col === l_ColHeader_Array.indexOf('Tên BP')
                                || col === l_ColHeader_Array.indexOf('Tên khách hàng')
                                || col === l_ColHeader_Array.indexOf('Số hóa đơn')
                                || col === l_ColHeader_Array.indexOf('Ngày hóa đơn')
                                || col === l_ColHeader_Array.indexOf('Số ngày quá hạn')
                                || col === l_ColHeader_Array.indexOf('Diễn giải'))) {
                            cellProperties.renderer = functionCellColor.LineRenderer_1;
                        }

                        var l_LineRenderer_2_Check = $.grep(l_LineRenderer_2, function (p_Item, p_Index) {
                            return p_Item === row;
                        });
                        if (l_LineRenderer_2_Check.length > 0 &&
                            (col === l_ColHeader_Array.indexOf('Mã BP')
                                || col === l_ColHeader_Array.indexOf('Tên BP')
                                || col === l_ColHeader_Array.indexOf('Tên khách hàng')
                                || col === l_ColHeader_Array.indexOf('Số hóa đơn')
                                || col === l_ColHeader_Array.indexOf('Ngày hóa đơn')
                                || col === l_ColHeader_Array.indexOf('Số ngày quá hạn')
                                || col === l_ColHeader_Array.indexOf('Diễn giải'))) {
                            cellProperties.renderer = functionCellColor.LineRenderer_2;
                        }

                        var l_LineRenderer_3_Check = $.grep(l_LineRenderer_3, function (p_Item, p_Index) {
                            return p_Item === row;
                        });
                        if (l_LineRenderer_3_Check.length > 0 &&
                            (col === l_ColHeader_Array.indexOf('Mã BP')
                                || col === l_ColHeader_Array.indexOf('Tên BP')
                                || col === l_ColHeader_Array.indexOf('Tên khách hàng')
                                || col === l_ColHeader_Array.indexOf('Số hóa đơn')
                                || col === l_ColHeader_Array.indexOf('Ngày hóa đơn')
                                || col === l_ColHeader_Array.indexOf('Số ngày quá hạn')
                                || col === l_ColHeader_Array.indexOf('Diễn giải'))) {
                            cellProperties.renderer = functionCellColor.LineRenderer_3;
                        }
                        //▲	Add====================================================================================================

                        return cellProperties;
                    }
                });

                l_Hot_60.render();

                ////$('#dowloadSupport').show();
                $('#dowloadSupport').hide();

                $('#fileSupp').on('click', function () {
                    $('#Details').val(JSON.stringify(dataDebt));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/DownloadExcelExport");
                    form.submit();
                });
                function endFile(name) {
                    var extension = name.split('.').pop().toLowerCase();
                    if ($.inArray(extension, ['xlsx']) == -1) {
                        XFunction.RenderMessage('error', 'File exel không hợp lệ định dạng file hỗ trợ : xlsx');
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                function contructExecl_mtk() {
                    var X = XLSX;
                    function fixdata(data) {
                        var o = "", l = 0, w = 10240;
                        for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
                        o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
                        return o;
                    }
                    function to_json(workbook) {
                        var result = {};
                        workbook.SheetNames.forEach(function (sheetName) {
                            var roa = X.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                            if (roa.length > 0) {
                                result[sheetName] = roa;
                            }
                        });
                        return result;
                    }
                    $('#FileSupport').change(function (event) {
                        var fileValid = false;
                        fileValid = endFile($('#FileSupport').val());

                        if (fileValid) {
                            var files = event.target.files;
                            var f = files[0];
                            {
                                var reader = new FileReader();
                                var name = f.name;
                                reader.onload = function (e) {
                                    var data = e.target.result;
                                    var arr = fixdata(data);
                                    wb = X.read(btoa(arr), { type: 'base64' });
                                    var wb;
                                    var output = to_json(wb);
                                    if (output.Sheet1 !== '' && output.Sheet1 !== undefined && output.Sheet1 !== null) {
                                        var count = 0;
                                        $.each(dataDebt, function (index, item) {
                                            var Giaitrinh = $.grep(output.Sheet1, function (element, count) {
                                                return element.Id == item.Id && element.Id !== '' && element.Id !== undefined && element.Id !== null;
                                            });
                                            if (Giaitrinh.length > 0 && Giaitrinh[0].NhapGiaiTrinh !== null && Giaitrinh[0].NhapGiaiTrinh !== undefined && Giaitrinh[0].NhapGiaiTrinh !== '') {
                                                item.EnterConversations = Giaitrinh[0].NhapGiaiTrinh;
                                                count += 1;
                                            }
                                        });
                                        l_Hot_60.render();
                                        XFunction.RenderMessage("success", "import thành công " + count + " dòng giải trình "); return;
                                    } else {
                                        XFunction.RenderMessage("error", "không có dữ liệu import"); return;
                                    }
                                };
                                reader.readAsArrayBuffer(f);
                            }
                        }
                        $('#FileSupport').val('');
                    });
                }
                contructExecl_mtk();

                $('.htCommentTextArea').attr('readonly', 'readonly');

                $("#comment").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    var myData = l_Hot_60 == undefined ? "" : $.grep(l_Hot_60.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var dataInValid = [];
                    $.each(myData, function (index, item) {
                        if (item.UuTien_CongNo == 1 || item.UuTien_CongNo == 2) {
                            if (item.Conversations === "" || item.Conversations === null || item.Conversations === undefined) {
                                if (item.EnterConversations === "" || item.EnterConversations === null || item.EnterConversations === undefined) {
                                    dataInValid.push(item);
                                }
                            }
                        }
                    });

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                        } else if (dataInValid.length > 0 && superadmin == false) {
                            XFunction.RenderMessage("error", "Vui lòng nhập giải trình đầy đủ cho các dòng công nợ đã quá hạn phải giải trình (màu cam/xanh lá)");
                        }
                        else {
                            $('#Details').val(JSON.stringify(myData).toString());
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                    }
                });
                $("#reply").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();
                    var myData = l_Hot_60 == undefined ? "" : $.grep(l_Hot_60.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var dataInValid = [];
                    $.each(myData, function (index, item) {
                        if (item.UuTien_CongNo == 1 || item.UuTien_CongNo == 2) {
                            if (item.Conversations === "" || item.Conversations === null || item.Conversations === undefined) {
                                if (item.EnterConversations === "" || item.EnterConversations === null || item.EnterConversations === undefined) {
                                    dataInValid.push(item);
                                }
                                else {
                                    if (item.Approved == false) {
                                        dataInValid.push(item);
                                    }
                                }
                            } else {
                                if (item.Approved == false) {
                                    dataInValid.push(item);
                                }
                            }
                        }
                    });

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                        } else if (dataInValid.length > 0 && superadmin == false) {
                            XFunction.RenderMessage("error", "Vui lòng nhập giải trình đầy đủ cho các dòng công nợ đã quá hạn phải giải trình (màu cam/xanh lá)");
                        }
                        else {
                            $('#Details').val(JSON.stringify(myData));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Reply");
                            form.submit();
                        }
                    }
                });
                $("#changeStep").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myData = l_Hot_60 == undefined ? "" : $.grep(l_Hot_60.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var dataInValid = [];
                    var dataInvalid2 = [];
                    $.each(myData, function (index, item) {
                        if (item.UuTien_CongNo == 1 || item.UuTien_CongNo == 2) {
                            if (item.Conversations == "" || item.Conversations == null || item.Conversations == undefined) {
                                if (item.EnterConversations == "" || item.EnterConversations == null || item.EnterConversations == undefined) {
                                    dataInValid.push(item);
                                }
                            }

                            if (item.Approved != true) {
                                dataInvalid2.push(item);
                            }
                        }
                    });

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else if (dataInValid.length > 0 && superadmin == false && CL.StepNo == 1) {
                        XFunction.RenderMessage("error", "Vui lòng nhập giải trình đầy đủ cho các dòng công nợ đã quá hạn phải giải trình (màu cam/xanh lá)");
                    }
                    else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/ChangeStep");
                        form.submit();
                    }
                });
                $("#complete").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myData = l_Hot_60 == undefined ? "" : $.grep(l_Hot_60.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var dataInValid = [];
                    $.each(myData, function (index, item) {
                        if (item.UuTien_CongNo == 1 || item.UuTien_CongNo == 2) {
                            if (item.Conversations == "" || item.Conversations == null || item.Conversations == undefined) {
                                if (item.EnterConversations == "" || item.EnterConversations == null || item.EnterConversations == undefined) {
                                    dataInValid.push(item);
                                }
                            }
                        }
                    });

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else if (dataInValid.length > 0 && superadmin == false) {
                        XFunction.RenderMessage("error", "Vui lòng nhập giải trình đầy đủ cho các dòng công nợ đã quá hạn phải giải trình (màu cam/xanh lá)");
                    }
                    else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    }
                });
                $("#btnPrint").click(function (e) {
                    window.open('data:application/vnd.ms-excel,' + $('#grvTableDetails_TypeId_60').html());
                    e.preventDefault();
                });
            });
        },
        RenderGridMkts: function () {
            $('#sum-money').hide();
            $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
                dataMko = data;
                var checkSender = false, checkAssigner = false;
                var DataFormsProcessing = ['Cấp mới', 'Bảo hành'];
                $.each(permissons, function (index, item) {
                    if (requestInfo.TypeId == 22) {
                        if ((item == 'assigner' || item == 'groupAssigner') && (status != 3 && status != 4) && (CL.StepNo != 4 && CL.StepNo != 3)) { checkAssigner = true }
                        if (item == 'sender' && (status == 3 || status == 4)) { checkSender = true }
                    }
                    else if (requestInfo.TypeId == 115) {
                        if ((item == 'assigner' || item == 'groupAssigner') && status != 2 && status != 3 && status != 4) { checkAssigner = true }
                        if (item == 'sender' && (status == 3 || status == 4)) { checkSender = true }
                    }
                });

                var Setting_Mko = function () {
                    return {
                        data: dataMko,
                        colHeaders: true,
                        rowHeaders: true,
                        //stretchH: 'all',
                        startCols: 9,
                        maxCols: 9,
                        minCols: 9,
                        fillHandle: false,
                        allowInvalid: false,
                        currentRowClassName: 'currentRow',
                        manualColumnResize: true,
                        manualRowResize: true,
                        outsideClickDeselects: true,
                        minSpareRows: 1,
                        maxRows: dataMko.length + 1,
                        colHeaders: ["Hình thức xử lý", "Mặt hàng", "Số lượng đặt", "Số lượng bảo hành", "Số lượng cấp mới", "Đơn giá", "Thành tiền", "Đơn vị tính", "Ghi chú"],
                        columns: [
                            { data: "Property1", type: 'dropdown', readOnly: !checkAssigner, source: DataFormsProcessing, className: 'htLeft' },
                            { data: "Item", readOnly: true, className: 'htLeft', width: 300 },
                            { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0', width: 100, validator: Validater.number, allowInvalid: false, },
                            { data: 'Quantity1', type: 'numeric', readOnly: !checkAssigner, format: '0,0', width: 150, validator: Validater.number, allowInvalid: false, },
                            { data: 'Quantity2', type: 'numeric', readOnly: !checkAssigner, format: '0,0', width: 150, validator: Validater.number, allowInvalid: false, },
                            {
                                data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 80,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === 5 && row === dataMko.length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        value = 'Tổng tiền:';
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            {
                                data: 'Sum', readOnly: true, type: 'numeric', format: '0,00', width: 150,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === 6 && row === dataMko.length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        var total = 0;
                                        $.each(dataMko, function (index, item) {
                                            (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                        });
                                        value = total;
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            { data: 'Unit', readOnly: true, className: 'htLeft', width: 100 },
                            { data: 'Note', readOnly: true, className: 'htLeft' }
                        ],

                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];

                                if (col === 'Quantity2') {
                                    var value = changes[i][3];
                                    var quantity = hot.getDataAtRowProp(row, 'Quantity');
                                    var quantity1 = hot.getDataAtRowProp(row, 'Quantity1');
                                    if (value > quantity) {
                                        XFunction.RenderMessage("error", "số cấp mới không được lớn hơn số đặt!");
                                        return false;
                                    }
                                    else if ((value + quantity1) > quantity) {
                                        XFunction.RenderMessage("error", "Tổng số lượng bảo hành và cấp mới phải nhỏ hơn hoặc bằng số lượng đặt!");
                                        return false;
                                    }
                                    else {
                                        var newthanhtien = (value * hot.getDataAtCell(row, 5)) + (quantity1 * hot.getDataAtCell(row, 5));
                                        hot.setDataAtCell(row, 6, newthanhtien, 'not');
                                        hot.setDataAtCell(row, 4, value, 'not');
                                        return true;
                                    }
                                }
                                if (col === 'Quantity1') {
                                    var value = changes[i][3];
                                    var quantity = hot.getDataAtRowProp(row, 'Quantity');
                                    var quantity2 = hot.getDataAtRowProp(row, 'Quantity2');
                                    if (value > quantity) {
                                        XFunction.RenderMessage("error", "số bảo hành không được lớn hơn số đặt!");
                                        return false;
                                    }
                                    else if ((value + quantity2) > quantity) {
                                        XFunction.RenderMessage("error", "Tổng số lượng bảo hành và cấp mới phải nhỏ hơn hoặc bằng số lượng đặt!");
                                        hot.setDataAtCell(row, 3, 0, 'not');
                                    }

                                    else {
                                        var newthanhtien = (value * hot.getDataAtCell(row, 5)) + (quantity2 * hot.getDataAtCell(row, 5));
                                        hot.setDataAtCell(row, 6, newthanhtien, 'not');
                                        hot.setDataAtCell(row, 3, value, 'not');
                                        return true;
                                    }
                                }

                            }
                        },
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if (row == dataMko.length - 1) {
                                cellProperties.readOnly = true;
                            }
                            return cellProperties;
                        },
                    };
                };
                var hot = new Handsontable(container, Setting_Mko());
                $("#comment").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (requestInfo.TypeId == 22) {
                        if (CL.StepNo !== 1 && CL.StepNo !== 2) {
                            myData = [];
                        }
                    }
                    else if (requestInfo.TypeId == 115) {
                        if (CL.StepNo === 2 && CL.StepNo === 3) {
                            myData = [];
                        }
                    }
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                        } else {
                            $('#Details').val(JSON.stringify(myData));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                    }
                });
                $("#reply").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    if (requestInfo.TypeId == 22) {
                        if (CL.StepNo !== 1 && CL.StepNo !== 2) {
                            myData = [];
                        }
                    }
                    else if (requestInfo.TypeId == 115) {
                        if (CL.StepNo === 2 && CL.StepNo === 3) {
                            myData = [];
                        }
                    }
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                        } else {
                            $('#Details').val(JSON.stringify(myData));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Reply");
                            form.submit();
                        }
                    }
                });
                $("#complete").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (requestInfo.TypeId == 22) {
                        if (CL.StepNo !== 1 && CL.StepNo !== 2) {
                            myData = [];
                        }
                    }
                    else if (requestInfo.TypeId == 115) {
                        if (CL.StepNo === 2 && CL.StepNo === 3) {
                            myData = [];
                        }
                    }
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    }
                });
                $("#changeStep").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (requestInfo.TypeId == 22) {
                        if (CL.StepNo !== 1 && CL.StepNo !== 2) {
                            myData = [];
                        }
                    }
                    else if (requestInfo.TypeId == 115) {
                        if (CL.StepNo === 2 && CL.StepNo === 3) {
                            myData = [];
                        }
                    }
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/ChangeStep");
                        form.submit();
                    }
                });
                $("#btnPrint").click(function (e) {
                    window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                    e.preventDefault();
                });
            });
        },
        RenderGrid100M: function () {
            $('#sum-money').hide();
            $('#form-Approved').show();
            $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
                data100tr = data;
                var dataCheckDuyet_true = [], dataCheckDuyet_false = [];
                $.each(data100tr, function (index, item) {
                    if (item.Approved == true) {
                        dataCheckDuyet_true.push(item);
                    };
                    if (item.Approved == false) {
                        dataCheckDuyet_false.push(item);
                    };
                });
                if (dataCheckDuyet_true.length === data100tr.length) {
                    $("#btn-Approved-All").prop('checked', true).uniform('refresh');
                }
                else {
                    $("#btn-Approved-All").prop('checked', false).uniform('refresh');
                };
                if (dataCheckDuyet_false.length === data100tr.length) {
                    $("#btn-Approved-Remove").prop('checked', true).uniform('refresh');
                }
                else {
                    $("#btn-Approved-Remove").prop('checked', false).uniform('refresh');
                };
                $('#btn-Approved-All').on('change', function () {
                    $("#btn-Approved-Remove").prop('checked', false).uniform('refresh');
                });
                $('#btn-Approved-Remove').on('change', function () {
                    $("#btn-Approved-All").prop('checked', false).uniform('refresh');
                });
                var checkAssigner = false;
                $.each(permissons, function (index, item) {
                    if ((item == 'assigner' || item == 'groupAssigner')) { checkAssigner = true }
                });
                var Setting_100tr = function () {
                    return {
                        data: data100tr,
                        colHeaders: true,
                        rowHeaders: true,
                        stretchH: 'all',
                        startCols: 7,
                        maxCols: 7,
                        minCols: 7,
                        rowHeights: 20,
                        fillHandle: false,
                        allowInvalid: false,
                        currentRowClassName: 'currentRow',
                        manualColumnResize: true,
                        manualRowResize: true,
                        outsideClickDeselects: true,
                        minSpareRows: 1,
                        copyable: false,
                        maxRows: data100tr.length + 1,
                        colHeaders: ["Số SO", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Giá sản phẩm", "Giá trị Sum", "Xác nhận"],
                        columns: [
                            { data: "SaleCode", readOnly: true, className: 'htLeft', width: 150 },
                            { data: 'ProductCode', readOnly: true, className: 'htLeft', width: 150 },
                            { data: 'ProductName', readOnly: true, className: 'htLeft', width: 300 },
                            { data: 'Quantity', type: 'numeric', format: '0,0', readOnly: true, width: 100 },
                            {
                                data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 100,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === 3 && row === data100tr.length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        value = 'Tổng tiền:';
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            {
                                data: 'TotalSum', readOnly: true, type: 'numeric', format: '0,0', width: 150,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === 5 && row === data100tr.length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        var total = 0;
                                        $.each(data100tr, function (index, item) {
                                            (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                        });
                                        value = total;
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            //{
                            //    data: 'Approved', readOnly: !checkAssigner, type: 'checkbox', validator: Validater.checkBox,
                            //},

                        ],
                        cells: function (row, col, prop) {
                            var cellProperties = {};

                            if (row === data100tr.length - 1) {
                                cellProperties.readOnly = true;
                            }
                            return cellProperties;
                        },
                        mergeCells: [{ row: 0, col: 5, rowspan: data100tr.length, colspan: 1 }],
                    };
                };
                var hot = new Handsontable(container, Setting_100tr());
                // hot.setDataAtCell(0, 6, data100tr[0].Note);
                $('#btn-Approved-All').click(function () {
                    check = true;
                    //console.log(check);
                });
                $('#btn-Approved-Remove').click(function () {
                    check = false;
                    //console.log(check);
                });
                $("#comment").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.SaleCode != undefined && item.SaleCode != '' && item.SaleCode != null && item.SaleCode != 0;
                    });
                    //var allow = myData[0].Approved;
                    //$.each(myData, function (index, item) {
                    //    item.Approved = allow;
                    //});

                    if ($('#btn-Approved-All').is(":checked") == true) {
                        $.each(myData, function (index, item) {
                            item.Approved = true;
                        });
                    };
                    if ($('#btn-Approved-Remove').is(":checked") == true) {
                        $.each(myData, function (index, item) {
                            item.Approved = false;
                        });
                    };
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                        } else {
                            $('#Details').val(JSON.stringify(myData));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                    }
                });
                $("#reply").click(function () {
                    XFunction.RenderMessage('info', 'Loại này không có trả lời');
                });
                $("#reply").hide();

                $("#complete").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.SaleCode != undefined && item.SaleCode != '' && item.SaleCode != null && item.SaleCode != 0;
                    });
                    //▼ Add - TrungNC3 - 2017.10.02 - Fix lỗi Duyệt đơn hàng công nợ
                    if ($('#btn-Approved-All').is(":checked") == true) {
                        $.each(myData, function (index, item) {
                            item.Approved = true;
                        });
                    };
                    if ($('#btn-Approved-Remove').is(":checked") == true) {
                        $.each(myData, function (index, item) {
                            item.Approved = false;
                        });
                    };
                    //▲ Add - TrungNC3 - 2017.10.02 - Fix lỗi Duyệt đơn hàng công nợ

                    //var allow = myData[0].Approved;
                    //$.each(myData, function (index, item) {
                    //    item.Approved = allow;
                    //});

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    }
                });

                $("#changeStep").click(function () {
                    XFunction.RenderMessage('info', 'Loại này không có chuyển bước');
                });
                $("#changeStep").hide();

                $("#btnPrint").click(function (e) {
                    window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                    e.preventDefault();
                });
            });
        },
        RenderGridMoneyAdvance: function () {
            $('#sum-money').hide();
            $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: data,
                        //================================Cols=======
                        maxCols: 7,
                        minCols: 7,
                        startCols: 7,
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: true,
                        columnSorting: true,
                        colWidths: 'undefined',
                        copyColsLimit: 7,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 0,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 7,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: true,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 10,
                        startRows: 10,
                        //viewportRowRenderingOffset : 'auto',
                        maxRows: data.length,
                        //minRows: 'Infinity',
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: true,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: true,
                        //====================================Oder ==============================================
                        colHeaders: ["Người xin tạm ứng", "Số tiền", "Hình thức tạm ứng", "Số tài khoản", "Tên ngân hàng-chi nhánh", "Ngày hoàn ứng", "Lý do"],
                        columns: [
                            { data: "Name", readOnly: true, className: 'htLeft', width: 250, },
                            { data: "Money", readOnly: true, type: 'numeric', format: '0,0', width: 100, },
                            { data: "Type", readOnly: true, className: 'htLeft', width: 120 },
                            { data: "BankNumber", readOnly: true, className: 'htLeft' },
                            { data: "BankName", readOnly: true, className: 'htLeft' },
                            { data: "DateReturn", readOnly: true, width: 100 },
                            { data: "Reason", readOnly: true, className: 'htLeft', width: 300 },
                        ],
                    };
                };
                hot = new Handsontable(container, setting());

            });
            $("#comment").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                } else {
                    $('#Details').val(JSON.stringify(""));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
            });
            $("#reply").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                } else {
                    $('#Details').val("");
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }
            });
            $("#complete").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                $('#Details').val(JSON.stringify(""));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                $('#Details').val(JSON.stringify(""));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
        },
        RenderGridInventoryCash: function () {
            // 0 : Tổng tiền hàng tồn quỹ  1:Tổng tiền thu hộ hàng tồn quỹ 2:Tổng tiền hàng tồn quỹ xác nhận ho 3 :Tổng tiền thu hộ hàng tồn quỹ xac nhan ho
            $('#sum-money').hide();
            $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
                dataInventoryCash = data;
                dataInventoryCashHandsontable = [
                    { Id: 0, Denomination: 500000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 200000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 100000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 50000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 20000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 10000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 5000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 2000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 1000, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 500, Quantity: 0, Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: '', Quantity: 'Tổng tiền :', Money: '', Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: '', Quantity: '', Money: '', Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 'Loại tiền kiểm kê', Quantity: 'Tồn thực tế tại shop', Money: 'Tồn hệ thống (HO nhập)', Note: 'Chênh lệch', Reason: 'Giải trình', CompensationPlans: 'Phương án đền bù' },
                    { Id: 0, Denomination: 'Tổng tiền hàng tồn quỹ :', Quantity: '', Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                    { Id: 0, Denomination: 'Tổng tiền thu hộ tồn quỹ :', Quantity: '', Money: 0, Note: '', Reason: '', CompensationPlans: '' },
                ];
                $.each(dataInventoryCashHandsontable, function (index, item) {
                    if (item.Denomination !== '' && item.Denomination !== undefined && item.Denomination !== null && isNaN(item.Denomination) == false) {
                        var line = $.grep(dataInventoryCash, function (element, index) { return element.Denomination == item.Denomination; });
                        if (line !== undefined && line !== '' && line !== null && line.length > 0) {
                            item.Id = line[0].Id;
                            item.Quantity = line[0].Quantity;
                            item.Note = line[0].Note;
                        }
                    }
                    if (index === 13) {
                        var line = $.grep(dataInventoryCash, function (element, index) { return element.Denomination == 0 });
                        if (line !== undefined && line !== '' && line !== null && line.length > 0) {
                            item.Id = line[0].Id;
                            item.Quantity = line[0].Quantity;
                            item.Money = line[0].Quantity2;
                            item.Reason = line[0].Property1;
                            item.CompensationPlans = line[0].Property2;
                        }
                    }
                    if (index === 14) {
                        var line = $.grep(dataInventoryCash, function (element, index) { return element.Denomination == 1 });
                        if (line !== undefined && line !== '' && line !== null && line.length > 0) {
                            item.Id = line[0].Id;
                            item.Quantity = line[0].Quantity;
                            item.Money = line[0].Quantity2;
                            item.Reason = line[0].Property1;
                            item.CompensationPlans = line[0].Property2;
                        }
                    }
                });


                var checkSender = false, checkAssiner = false; checkCc = false;
                $.each(permissons, function (index, item) {
                    if (item == 'sender') { checkSender = true; }
                    if (item == 'assigner' || item == 'groupAssigner') { checkAssiner = true }
                    if (item == 'cc') { checkCc = true; }
                });

                if (requestInfo.StepNo === 1) {
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: dataInventoryCashHandsontable,
                            //================================Cols=======
                            maxCols: 6,
                            minCols: 6,
                            startCols: 6,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 6,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 6,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            startRows: 17,
                            //viewportRowRenderingOffset : 'auto',
                            maxRows: 17,
                            minRows: 17,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: false,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: true,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: false,
                            formulas: true,
                            wordWrap: true,
                            //====================================Oder ==============================================
                            colHeaders: ["Mệnh giá", "Số tờ", "Thành tiền", "Ghi chú", "", ""],
                            columns: [
                                { data: "Denomination", readOnly: true, type: 'numeric', format: '0,0', width: 100, validator: Validater.money, allowInvalid: false, width: 200, },
                                { data: "Quantity", type: 'numeric', readOnly: true, format: '0,0', width: 100, validator: Validater.money, allowInvalid: false, width: 200, className: 'htRight' },
                                {
                                    data: "Money", type: 'numeric', format: '0,0', width: 200, validator: Validater.money, allowInvalid: false, readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (col === 2 && row < 10) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            var Denomination = instance.getDataAtCell(row, 0);
                                            var Quantity = instance.getDataAtCell(row, 1);
                                            if (isNaN(Denomination * Quantity)) {
                                                value = 0;
                                            } else {
                                                value = Denomination * Quantity;
                                            }
                                        } else if (col === 2 && row === 10) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            $.each(dataInventoryCashHandsontable, function (index, item) {
                                                if (index === 10) return false;
                                                var Denomination = item.Denomination;
                                                var Quantity = item.Quantity;
                                                if (isNaN(Denomination * Quantity)) {
                                                    sum += 0;
                                                } else {
                                                    sum += Denomination * Quantity;
                                                }
                                            });
                                            value = sum;
                                        }

                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                {
                                    data: "Note", className: 'htLeft', readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value) {

                                        if (col === 3 && (row === 13 || row === 14)) {
                                            td.style.fontWeight = 'bold';
                                            td.style.textAlign = 'right';
                                            var Quantity = instance.getDataAtCell(row, 1);
                                            var Money = instance.getDataAtCell(row, 2);
                                            if (isNaN(Money - Quantity)) {
                                                value = 0;
                                            } else {
                                                value = (Money - Quantity).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                            }

                                        }
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                { data: "Reason", className: 'htLeft', readOnly: true, },
                                { data: "CompensationPlans", className: 'htLeft', readOnly: true, },
                            ],
                            cells: function (row, col, prop) {
                                cellProperties = {};
                                if (row === 12) {
                                    cellProperties.renderer = functionCellColor.diffRenderer;
                                }
                                if (col === 0) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 1) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 2) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;
                                    }
                                }
                                if (col === 3) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 4) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;

                                    }
                                }
                                if (col === 5) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;

                                    }
                                }
                                return cellProperties;
                            },
                        };
                    };
                    hot = new Handsontable(container, setting());
                } else if (requestInfo.StepNo === 2) {
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: dataInventoryCashHandsontable,
                            //================================Cols=======
                            maxCols: 6,
                            minCols: 6,
                            startCols: 6,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 6,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 6,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            startRows: 17,
                            //viewportRowRenderingOffset : 'auto',
                            maxRows: 17,
                            minRows: 17,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: false,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: true,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: false,
                            formulas: true,
                            wordWrap: true,
                            //====================================Oder ==============================================
                            colHeaders: ["Mệnh giá", "Số tờ", "Thành tiền", "Ghi chú", "", ""],
                            columns: [
                                { data: "Denomination", readOnly: true, type: 'numeric', format: '0,0', width: 100, validator: Validater.money, allowInvalid: false, width: 200, },
                                { data: "Quantity", type: 'numeric', readOnly: true, format: '0,0', width: 100, validator: Validater.money, allowInvalid: false, width: 200, className: 'htRight' },
                                {
                                    data: "Money", type: 'numeric', format: '0,0', width: 200, validator: Validater.money, allowInvalid: false, readOnly: !checkAssiner,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (col === 2 && row < 10) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            var Denomination = instance.getDataAtCell(row, 0);
                                            var Quantity = instance.getDataAtCell(row, 1);
                                            if (isNaN(Denomination * Quantity)) {
                                                value = 0;
                                            } else {
                                                value = Denomination * Quantity;
                                            }
                                        } else if (col === 2 && row === 10) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            $.each(dataInventoryCashHandsontable, function (index, item) {
                                                if (index === 10) return false;
                                                var Denomination = item.Denomination;
                                                var Quantity = item.Quantity;
                                                if (isNaN(Denomination * Quantity)) {
                                                    sum += 0;
                                                } else {
                                                    sum += Denomination * Quantity;
                                                }
                                            });
                                            value = sum;
                                        }

                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                {
                                    data: "Note", className: 'htLeft', readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value) {

                                        if (col === 3 && (row === 13 || row === 14)) {
                                            td.style.fontWeight = 'bold';
                                            td.style.textAlign = 'right';
                                            var Quantity = instance.getDataAtCell(row, 1);
                                            var Money = instance.getDataAtCell(row, 2);
                                            if (isNaN(Money - Quantity)) {
                                                value = 0;
                                            } else {
                                                value = (Money - Quantity).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                            }

                                        }
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                { data: "Reason", className: 'htLeft', readOnly: true, },
                                { data: "CompensationPlans", className: 'htLeft', readOnly: true, },
                            ],
                            cells: function (row, col, prop) {
                                cellProperties = {};
                                if (row === 12) {
                                    cellProperties.renderer = functionCellColor.diffRenderer;
                                }
                                if (col === 0) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 1) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 2) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;
                                    }
                                }
                                if (col === 3) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 4) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;

                                    }
                                }
                                if (col === 5) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;

                                    }
                                }
                                return cellProperties;
                            },
                        };
                    };
                    hot = new Handsontable(container, setting());
                } else if (requestInfo.StepNo === 3) {
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: dataInventoryCashHandsontable,
                            //================================Cols=======
                            maxCols: 6,
                            minCols: 6,
                            startCols: 6,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 6,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 6,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            startRows: 17,
                            //viewportRowRenderingOffset : 'auto',
                            maxRows: 17,
                            minRows: 17,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: false,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: true,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: false,
                            formulas: true,
                            wordWrap: true,
                            //====================================Oder ==============================================
                            colHeaders: ["Mệnh giá", "Số tờ", "Thành tiền", "Ghi chú", "", ""],
                            columns: [
                                { data: "Denomination", readOnly: true, type: 'numeric', format: '0,0', width: 100, validator: Validater.money, allowInvalid: false, width: 200, },
                                { data: "Quantity", type: 'numeric', readOnly: true, format: '0,0', width: 100, validator: Validater.money, allowInvalid: false, width: 200, className: 'htRight' },
                                {
                                    data: "Money", type: 'numeric', format: '0,0', width: 200, validator: Validater.money, allowInvalid: false, readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (col === 2 && row < 10) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            var Denomination = instance.getDataAtCell(row, 0);
                                            var Quantity = instance.getDataAtCell(row, 1);
                                            if (isNaN(Denomination * Quantity)) {
                                                value = 0;
                                            } else {
                                                value = Denomination * Quantity;
                                            }
                                        } else if (col === 2 && row === 10) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            $.each(dataInventoryCashHandsontable, function (index, item) {
                                                if (index === 10) return false;
                                                var Denomination = item.Denomination;
                                                var Quantity = item.Quantity;
                                                if (isNaN(Denomination * Quantity)) {
                                                    sum += 0;
                                                } else {
                                                    sum += Denomination * Quantity;
                                                }
                                            });
                                            value = sum;
                                        }

                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                {
                                    data: "Note", className: 'htLeft', readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value) {

                                        if (col === 3 && (row === 13 || row === 14)) {
                                            td.style.fontWeight = 'bold';
                                            td.style.textAlign = 'right';
                                            var Quantity = instance.getDataAtCell(row, 1);
                                            var Money = instance.getDataAtCell(row, 2);
                                            if (isNaN(Money - Quantity)) {
                                                value = 0;
                                            } else {
                                                value = (Money - Quantity).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                            }

                                        }
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                { data: "Reason", className: 'htLeft', readOnly: !checkAssiner, },
                                { data: "CompensationPlans", className: 'htLeft', readOnly: !checkAssiner, },
                            ],
                            cells: function (row, col, prop) {
                                cellProperties = {};
                                if (row === 12) {
                                    cellProperties.renderer = functionCellColor.diffRenderer;
                                }
                                if (col === 0) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 1) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 2) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;
                                    }
                                }
                                if (col === 3) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 4) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;

                                    }
                                }
                                if (col === 5) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;

                                    }
                                }
                                return cellProperties;
                            },
                        };
                    };
                    hot = new Handsontable(container, setting());
                } else if (requestInfo.StepNo === 4) {
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: dataInventoryCashHandsontable,
                            //================================Cols=======
                            maxCols: 6,
                            minCols: 6,
                            startCols: 6,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 6,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 6,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            startRows: 17,
                            //viewportRowRenderingOffset : 'auto',
                            maxRows: 17,
                            minRows: 17,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: false,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: true,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: false,
                            formulas: true,
                            wordWrap: true,
                            //====================================Oder ==============================================
                            colHeaders: ["Mệnh giá", "Số tờ", "Thành tiền", "Ghi chú", "", ""],
                            columns: [
                                { data: "Denomination", readOnly: true, type: 'numeric', format: '0,0', width: 100, validator: Validater.money, allowInvalid: false, width: 200, },
                                { data: "Quantity", type: 'numeric', readOnly: true, format: '0,0', width: 100, validator: Validater.money, allowInvalid: false, width: 200, className: 'htRight' },
                                {
                                    data: "Money", type: 'numeric', format: '0,0', width: 200, validator: Validater.money, allowInvalid: false, readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (col === 2 && row < 10) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            var Denomination = instance.getDataAtCell(row, 0);
                                            var Quantity = instance.getDataAtCell(row, 1);
                                            if (isNaN(Denomination * Quantity)) {
                                                value = 0;
                                            } else {
                                                value = Denomination * Quantity;
                                            }
                                        } else if (col === 2 && row === 10) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            $.each(dataInventoryCashHandsontable, function (index, item) {
                                                if (index === 10) return false;
                                                var Denomination = item.Denomination;
                                                var Quantity = item.Quantity;
                                                if (isNaN(Denomination * Quantity)) {
                                                    sum += 0;
                                                } else {
                                                    sum += Denomination * Quantity;
                                                }
                                            });
                                            value = sum;
                                        }

                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                {
                                    data: "Note", className: 'htLeft', readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value) {

                                        if (col === 3 && (row === 13 || row === 14)) {
                                            td.style.fontWeight = 'bold';
                                            td.style.textAlign = 'right';
                                            var Quantity = instance.getDataAtCell(row, 1);
                                            var Money = instance.getDataAtCell(row, 2);
                                            if (isNaN(Money - Quantity)) {
                                                value = 0;
                                            } else {
                                                value = (Money - Quantity).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                            }

                                        }
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                { data: "Reason", className: 'htLeft', readOnly: true, },
                                { data: "CompensationPlans", className: 'htLeft', readOnly: true, },
                            ],
                            cells: function (row, col, prop) {
                                cellProperties = {};
                                if (row === 12) {
                                    cellProperties.renderer = functionCellColor.diffRenderer;
                                }
                                if (col === 0) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 1) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 2) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;
                                    }
                                }
                                if (col === 3) {
                                    cellProperties.readOnly = true;
                                }
                                if (col === 4) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;

                                    }
                                }
                                if (col === 5) {
                                    if (row !== 13 && row !== 14) {
                                        cellProperties.readOnly = true;

                                    }
                                }
                                return cellProperties;
                            },
                        };
                    };
                    hot = new Handsontable(container, setting());
                }


                $("#comment").click(function () {
                    //=============================================================================================
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();

                    var myData = hot == undefined ? "" : hot.getData();
                    var datas = [];

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (myData !== undefined && myData !== null || myData !== '') {
                        datas.push({ Id: myData[13].Id, Quantity: 2, Money0: myData[13].Quantity, Money: myData[13].Money, Reason: myData[13].Reason, CompensationPlans: myData[13].CompensationPlans });
                        datas.push({ Id: myData[14].Id, Quantity: 3, Money0: myData[14].Quantity, Money: myData[14].Money, Reason: myData[14].Reason, CompensationPlans: myData[14].CompensationPlans });
                    }
                    //=============================================================================================
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                        return false;
                    }
                    if (datas.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ :(");
                        return false;
                    }
                    //=============================================================================================
                    $('#Details').val(JSON.stringify(datas));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                    return false;

                });
                $("#reply").click(function () {
                    //=============================================================================================
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();

                    var myData = hot == undefined ? "" : hot.getData();
                    var datas = []

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (myData !== undefined && myData !== null || myData !== '') {
                        datas.push({ Id: myData[13].Id, Quantity: 2, Money0: myData[13].Quantity, Money: myData[13].Money, Reason: myData[13].Reason, CompensationPlans: myData[13].CompensationPlans });
                        datas.push({ Id: myData[14].Id, Quantity: 3, Money0: myData[14].Quantity, Money: myData[14].Money, Reason: myData[14].Reason, CompensationPlans: myData[14].CompensationPlans });
                    }
                    //=============================================================================================
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                        return false;
                    }
                    if (datas.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ :(");
                        return false;
                    }
                    if (datas[0].Money0 !== datas[0].Money && superadmin == false) {
                        if (datas[0].Reason === undefined || datas[0].Reason === null || datas[0].Reason === ''
                            || datas[0].CompensationPlans === undefined || datas[0].CompensationPlans === '' || datas[0].CompensationPlans === null) {
                            XFunction.RenderMessage("error", "Có chênh lệch Tổng tiền hàng tồn quỹ giữa Shop và HO vui lòng nhập giải trình và phương án đền bù  :(");
                            return false;
                        }
                    }
                    if (datas[1].Money0 !== datas[1].Money && superadmin == false) {
                        if (datas[1].Reason === undefined || datas[1].Reason === null || datas[1].Reason === ''
                            || datas[1].CompensationPlans === undefined || datas[1].CompensationPlans === '' || datas[1].CompensationPlans === null) {
                            XFunction.RenderMessage("error", "Có chênh lệch Tổng tiền thu hộ tồn quỹ giữa Shop và HO vui lòng nhập giải trình và phương án đền bù  :(");
                            return false;
                        }
                    }
                    //=============================================================================================
                    $('#Details').val(JSON.stringify(datas));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                    return false;


                });
                $("#changeStep").click(function () {
                    //=============================================================================================
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();

                    var myData = hot == undefined ? "" : hot.getData();
                    var datas = []

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (myData !== undefined && myData !== null || myData !== '') {
                        datas.push({ Id: myData[13].Id, Quantity: 2, Money0: myData[13].Quantity, Money: myData[13].Money, Reason: myData[13].Reason, CompensationPlans: myData[13].CompensationPlans });
                        datas.push({ Id: myData[14].Id, Quantity: 3, Money0: myData[14].Quantity, Money: myData[14].Money, Reason: myData[14].Reason, CompensationPlans: myData[14].CompensationPlans });
                    }
                    //=============================================================================================
                    if (datas.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ :(");
                        return false;
                    }
                    if (requestInfo.StepNo >= 3 && superadmin == false) {
                        if (datas[0].Money0 !== datas[0].Money) {
                            if (datas[0].Reason === undefined || datas[0].Reason === null || datas[0].Reason === ''
                                || datas[0].CompensationPlans === undefined || datas[0].CompensationPlans === '' || datas[0].CompensationPlans === null) {
                                XFunction.RenderMessage("error", "Có chênh lệch Tổng tiền hàng tồn quỹ giữa Shop và HO vui lòng nhập giải trình và phương án đền bù  :(");
                                return false;
                            }
                        }
                        if (datas[1].Money0 !== datas[1].Money && superadmin == false) {
                            if (datas[1].Reason === undefined || datas[1].Reason === null || datas[1].Reason === ''
                                || datas[1].CompensationPlans === undefined || datas[1].CompensationPlans === '' || datas[1].CompensationPlans === null) {
                                XFunction.RenderMessage("error", "Có chênh lệch Tổng tiền thu hộ tồn quỹ giữa Shop và HO vui lòng nhập giải trình và phương án đền bù  :(");
                                return false;
                            }
                        }
                    }
                    //=============================================================================================
                    $('#Details').val(JSON.stringify(datas));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                    return false;


                });
                $("#complete").click(function () {
                    //=============================================================================================
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : hot.getData();
                    var datas = []

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (myData !== undefined && myData !== null || myData !== '') {
                        datas.push({ Id: myData[13].Id, Quantity: 2, Money0: myData[13].Quantity, Money: myData[13].Money, Reason: myData[13].Reason, CompensationPlans: myData[13].CompensationPlans });
                        datas.push({ Id: myData[14].Id, Quantity: 3, Money0: myData[14].Quantity, Money: myData[14].Money, Reason: myData[14].Reason, CompensationPlans: myData[14].CompensationPlans });
                    }
                    //=============================================================================================

                    if (datas.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ :(");
                        return false;
                    }

                    if (datas[0].Money0 !== datas[0].Money && superadmin == false) {
                        if (datas[0].Reason === undefined || datas[0].Reason === null || datas[0].Reason === ''
                            || datas[0].CompensationPlans === undefined || datas[0].CompensationPlans === '' || datas[0].CompensationPlans === null) {
                            XFunction.RenderMessage("error", "Kế toán HO không được hoàn tất yêu cầu khi có chênh lệch giữa tồn thực tế tại shop và tồn hệ thống :(");
                            return false;
                        }
                    }
                    if (datas[1].Money0 !== datas[1].Money && superadmin == false) {
                        if (datas[1].Reason === undefined || datas[1].Reason === null || datas[1].Reason === ''
                            || datas[1].CompensationPlans === undefined || datas[1].CompensationPlans === '' || datas[1].CompensationPlans === null) {
                            XFunction.RenderMessage("error", "Kế toán shop/SM/PSM bắt buộc nhập giải trình và phương án đền bù khi có chênh lệch giữa tồn thực tế tại shop và tồn hệ thống :(");
                            return false;
                        }
                    }
                    //=============================================================================================

                    $('#Details').val(JSON.stringify(datas));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                    return false;
                });

            });
        },
        RenderApple: function () {
            $('#sum-money').hide();
            $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
                dataApple = (data !== null && data !== '' && data !== undefined && data.length > 0) ? data : [{ NameShop: '', NameEmploy: '', Note: '', Approved: false }];
                var checkSender = false, checkAssiner = false, checkCc = false;
                //▼ ChuongNT3 - 26/03/2018 - Thêm bản cam kết
                $('#captionHot1').before('<div class="form-group"><button type="button" class="btn btn-info btn-info" data-toggle="modal" data-target="#model_Apple_Expert">' +
                    '<span class="glyphicon glyphicon-hand-right">&nbsp</span>Bản cam kết</button></div>');//ChuongNT3 - 03/04/2018 Thêm bước 2
                //▲ ChuongNT3 - 26/03/2018 - Thêm bản cam kết
                $.each(permissons, function (index, item) {
                    ;
                    if (item == 'sender') { checkSender = true; }
                    if (item == 'assigner' || item == 'groupAssigner') { checkAssiner = true };
                    if (item === 'cc') { checkCc = true; }
                });
                //▼ ChuongNT3 - 03/04/2018 Thêm bước 2
                $('#Apple_Emloyee_69').removeAttr("hidden")
                $('#Apple_Pay_69').removeAttr("hidden")
                //▲ ChuongNT3 - 03/04/2018 Thêm bước 2
                //▼ ChuongNT3 - 26/03/2018 - Thêm bản cam kết
                var now = new Date();
                $$("Apple_ngay").innerHTML = now.getDate();
                $$("Apple_thang").innerHTML = now.getMonth() + 1;
                $$("Apple_nam").innerHTML = now.getFullYear();
                if (data !== null && data !== '' && data !== undefined) {
                    $.each(data, function (index, item) {
                        $$("Apple_TenNV").innerHTML = item.EmpName;
                        $$("Apple_SinhNhat").innerHTML = item.Birthday;
                        $$("Apple_CMND").innerHTML = item.IDCard;
                        $$("Apple_NgayCap").innerHTML = item.IDCardDate;
                        $$("Apple_NoiCap").innerHTML = item.IDCardPlace;
                        $$("Apple_DiaChi").innerHTML = item.Address;
                        $$("Apple_SDT").innerHTML = item.Phone;
                        $$("Apple_NgayThamGia").innerHTML = item.Time; //ChuongNT3 - 30/03/2018 - Thêm ngày tham gia CL APPLE 
                        $$("Apple_Shop").innerHTML = item.WarehouseName;//ChuongNT3 - 30/03/2018 - Thêm ngày shop CL APPLE 
                        //▼ ChuongNT3 - 02/04/2018 Sữa checkbox
                        //▼ ChuongNT3 - 03/04/2018 Thêm bước 2
                        if (item.CheckOK == 1) {
                            jQuery.uniform.update(jQuery("#Apple_Check_OK").prop('checked', true));
                        }
                        if (item.CheckOK == 0) {
                            jQuery.uniform.update(jQuery("#Apple_Check_NOK").prop('checked', true));
                        }
                        if (item.CheckPayOk == 1) {
                            jQuery.uniform.update(jQuery("#Apple_Pay_Check_TraThang").prop('checked', true));
                        }
                        if (item.CheckPayOk == 0) {
                            jQuery.uniform.update(jQuery("#Apple_Pay_Check_TraGop").prop('checked', true));
                        }
                        //▲ ChuongNT3 - 03/04/2018 Thêm bước 2
                    });
                }
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: dataApple,
                        //================================Cols=======
                        maxCols: 4,
                        minCols: 4,
                        startCols: 4,
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: true,
                        columnSorting: true,
                        colWidths: 'undefined',
                        copyColsLimit: 4,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 0,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 4,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: true,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 0,
                        //startRows: 10,
                        //viewportRowRenderingOffset : 'auto',
                        //maxRows: data.length,
                        //minRows: 'Infinity',
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: false,
                        contextMenu: false,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: false,
                        formulas: false,
                        wordWrap: true,
                        //====================================Oder ==============================================
                        colHeaders: ["Tên shop", "Tên nhân viên", "Ghi chú (Imei)", 'Số đơn hàng', "Xác nhân nhân viên"], // ChuongNT3 - 04/04/2018 - Thêm cột số SO
                        columns: [
                            { data: "WarehouseName", readOnly: true, className: 'htLeft', width: 250, },
                            { data: "EmployeeName", readOnly: true, className: 'htLeft', width: 350, },
                            { data: "Imei", readOnly: true, className: 'htLeft', width: 200, },
                            { data: "SoSO", readOnly: true, className: 'htLeft', width: 130, }, // ChuongNT3 - 04/04/2018 - Thêm cột số SO
                            { data: 'Approved', readOnly: !checkAssiner, type: 'checkbox', validator: Validater.checkBox, width: 200, readOnly: true },  // ChuongNT3 - 03/04/2018 Thêm bước 2
                        ],
                    };
                };
                var hot = new Handsontable(container, setting());
                //▼ ChuongNT3 - 03/04/2018 Thêm bước 2
                if (CL.StepNo == 1) {
                    if (!checkAssiner)
                        $('input[name=RD_ConfirmEmloyee_69]').attr("disabled", true);
                    $('input[name=ConfirmPay_69]').attr("disabled", true);
                }
                else if (CL.StepNo == 2) {
                    $('input[name=RD_ConfirmEmloyee_69]').attr("disabled", true);
                    $('input[name=ConfirmPay_69]').attr("disabled", true);
                }
                $('#Apple_Check_OK').click(function () {
                    $('input[name=ConfirmPay_69]').attr("disabled", false);
                });
                $('#Apple_Check_NOK').click(function () {
                    $("span").removeClass("checked")
                    jQuery.uniform.update(jQuery("#Apple_Check_NOK").prop('checked', true));
                    $('input[name=ConfirmPay_69]').attr("disabled", true);
                });
                //▲ ChuongNT3 - 03/04/2018 Thêm bước 2
                $("#comment").click(function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ :(");
                        } else {
                            $('#Details').val(JSON.stringify(myData));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                    }
                });
                $("#reply").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ :(");
                        } else {
                            $('#Details').val(JSON.stringify(myData));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Reply");
                            form.submit();
                        }
                    }
                });
                $("#changeStep").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));
                    //▼ ChuongNT3 - 03/04/2018 Thêm bước 2
                    var ckOk = -1;
                    var ckPayOk = -1;

                    if ($$('Apple_Check_OK').checked == true) ckOk = 1;
                    else if ($$('Apple_Check_NOK').checked == true) ckOk = 0;
                    if (ckOk == -1) {
                        XFunction.RenderMessage("error", "Vui lòng chọn xác nhận của bạn về điều khoản trong [Bản Cam Kết]");
                        return;
                    }
                    if (ckOk == 1) {
                        if ($$('Apple_Pay_Check_TraThang').checked == true) ckPayOk = 1;
                        else if ($$('Apple_Pay_Check_TraGop').checked == true) ckPayOk = 0;
                        if (ckPayOk == -1) {
                            XFunction.RenderMessage("error", "Vui lòng chọn xác nhận hình thức thanh toán");
                            return;
                        }
                    }
                    //▲ ChuongNT3 - 03/04/2018 Thêm bước 2
                    var dataReturn = [];
                    //▲   ChuongNT3 - 29/03/2018 - Thao tác CL Apple chuyển POS 
                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getSettings().data, function (item, index) {//ChuongNT3 - 30/03/2018 - Thêm ngày tham gia CL APPLE 
                        return item.Id !== undefined && item.Id !== '' && item.Id !== null && item.Id !== 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ :(");
                    } else {
                        //▼  ChuongNT3 - 29/03/2018 - Thao tác CL Apple chuyển POS 
                        $.grep(myData, function (item, index) {
                            dataReturn.push({
                                IdCallLog: item.IdCallLog == '' && item.IdCallLog == null && item.IdCallLog == undefined ? '' : item.IdCallLog,
                                Id: item.Id == '' && item.Id == null && item.Id == undefined ? '' : item.Id,
                                EmpCode: item.EmpCode == '' && item.EmpCode == null && item.EmpCode == undefined ? '' : item.EmpCode,
                                EmpName: item.EmpName == '' && item.EmpName == null && item.EmpName == undefined ? '' : item.EmpName,
                                Imei: item.Imei == '' && item.Imei == null && item.Imei == undefined ? '' : item.Imei,
                                Approved: item.Approved == '' && item.Approved == null && item.Approved == undefined ? '' : item.Approved,
                                WarehouseCode: item.WarehouseCode == '' && item.WarehouseCode == null && item.WarehouseCode == undefined ? '' : item.WarehouseCode,
                                ProductCode: item.ProductCode == '' && item.ProductCode == null && item.ProductCode == undefined ? '' : item.ProductCode,
                                Quantity: item.Quantity == '' && item.Quantity == null && item.Quantity == undefined ? '' : item.Quantity,
                                User: item.User == '' && item.User == null && item.User == undefined ? '' : item.User,
                                ckClick: ckOk,
                                ckPay: ckPayOk  // ChuongNT3 - 03/04/2018 Thêm bước 2
                            });
                        });
                        $('#Details').val(JSON.stringify(dataReturn));
                        //▲  ChuongNT3 - 29/03/2018 - Thao tác CL Apple chuyển POS 
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/ChangeStep");
                        form.submit();
                    }
                });
                $("#complete").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));
                    //▲ ChuongNT3 - 03/04/2018 Thêm bước 2
                    var ckOk = -1;
                    if ($$('Apple_Check_OK').checked == true) ckOk = 1;
                    else if ($$('Apple_Check_NOK').checked == true) ckOk = 0;
                    if (ckOk == -1) {
                        XFunction.RenderMessage("error", "Vui lòng chọn xác nhận của bạn về điều khoản trong [Bản Cam Kết]");
                        return;
                    }
                    if (ckOk == 1) {
                        var ckPayOk = -1;
                        if ($$('Apple_Pay_Check_TraThang').checked == true) ckPayOk = 1;
                        else if ($$('Apple_Pay_Check_TraGop').checked == true) ckPayOk = 0;
                        if (ckPayOk == -1) {
                            XFunction.RenderMessage("error", "Vui lòng chọn xác nhận hình thức thanh toán");
                            return;
                        }
                    }
                    var dataReturn = [];
                    //▲ ChuongNT3 - 03/04/2018 Thêm bước 2
                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ :(");
                    } else {
                        //▲ ChuongNT3 - 03/04/2018 Thêm bước 2
                        $.grep(myData, function (item, index) {
                            dataReturn.push({
                                IdCallLog: item.IdCallLog == '' && item.IdCallLog == null && item.IdCallLog == undefined ? '' : item.IdCallLog,
                                Id: item.Id == '' && item.Id == null && item.Id == undefined ? '' : item.Id,
                                EmpCode: item.EmpCode == '' && item.EmpCode == null && item.EmpCode == undefined ? '' : item.EmpCode,
                                EmpName: item.EmpName == '' && item.EmpName == null && item.EmpName == undefined ? '' : item.EmpName,
                                Imei: item.Imei == '' && item.Imei == null && item.Imei == undefined ? '' : item.Imei,
                                Approved: item.Approved == '' && item.Approved == null && item.Approved == undefined ? '' : item.Approved,
                                WarehouseCode: item.WarehouseCode == '' && item.WarehouseCode == null && item.WarehouseCode == undefined ? '' : item.WarehouseCode,
                                ProductCode: item.ProductCode == '' && item.ProductCode == null && item.ProductCode == undefined ? '' : item.ProductCode,
                                Quantity: item.Quantity == '' && item.Quantity == null && item.Quantity == undefined ? '' : item.Quantity,
                                User: item.User == '' && item.User == null && item.User == undefined ? '' : item.User,
                                ckClick: ckOk,
                                ckPay: ckPayOk
                            });
                        });
                        //▲ ChuongNT3 - 03/04/2018 Thêm bước 2
                        $('#Details').val(JSON.stringify(dataReturn));         // ChuongNT3 - 29/03/2018 - Thao tác CL Apple chuyển POS 
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    }


                });
                $("#btnPrint").click(function (e) {
                    window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                    e.preventDefault();
                });
            });
        },
        RenderEditDetails: function () {
            $('#sum-money').hide();
            $.get('/Requests/GetCatagoryTree', { type: 9 }, function (data) {

                var trees = [];
                $.each(data, function (index, item) {
                    var newdata = {
                        id: item.Id,
                        parent: item.ParentId,
                        text: item.Name,
                        type: 'Fa'
                    };
                    trees.push(newdata);
                });

                $('#edit-system-tree').jstree({
                    "core": { data: trees },
                    "plugins": ["wholerow", "search", "types"],
                    "types": {
                        "Fa": { "icon": "/assets/images/Maps-Pin-Place-icon.png" },
                    },
                }).on('changed.jstree', function (e, data) {
                    var i, j, r = [], name, id;
                    for (i = 0, j = data.selected.length; i < j; i++) {
                        r.push(data.instance.get_node(data.selected[i]).text);
                        name = data.instance.get_node(data.selected[i]).text;
                        id = data.instance.get_node(data.selected[i]).id
                    }
                    var tt = titleOfDetail.split("-");
                    tt[1] = name;
                    var st = tt.join(' - ');

                    systemIdHtht = id;
                    titleOfDetail = st;
                    $('#edit-system').val(name);
                    $('#titleName').html(st);
                    $('#system-tree-g').hide();
                }).bind("loaded.jstree", function (e, data) {
                    $('#edit-system-tree').jstree("select_node", requestInfo.GroupId, true);
                });

                var to = false;
                $('#searchSystem').keyup(function () {
                    if (to) { clearTimeout(to); }
                    to = setTimeout(function () {
                        var v = $('#searchSystem').val();
                        $('#edit-system-tree').jstree(true).search(v);
                    }, 250);
                });

                $('#system-tree-g').hide();
                $('#edit-system').click(function () {
                    $('#system-tree-g').toggle();
                });

                $(document).mouseup(function (e) {
                    var edit_system_tree = $("#system-tree-g"), edit_system = $('#edit-system');

                    if (!edit_system_tree.is(e.target)
                        && edit_system_tree.has(e.target).length === 0 && !edit_system.is(e.target)) {
                        edit_system_tree.hide();
                    }
                });
            });

            $.get('/Requests/GetCategoriesByTypeId', { type: 9 }, function (data) {
                var trees = [];
                $.each(data, function (index, item) {
                    var newdata = {
                        id: item.Id,
                        parent: '#',
                        text: item.Description,
                        type: 'Fa'
                    };
                    trees.push(newdata);
                });
                if (requestInfo.TypeId == 1 || requestInfo.TypeId == 25) {
                    trees.push({ id: 45, parent: '#', text: 'IT Support', type: 'Fa' });
                }
                $('#edit-type-tree').jstree({
                    "core": { data: trees },
                    "plugins": ["wholerow", "search", "types"],
                    "types": {
                        "Fa": { "icon": "/assets/images/Maps-Pin-Place-icon.png" },
                    },
                }).on('changed.jstree', function (e, data) {
                    var i, j, r = [], name, id;
                    for (i = 0, j = data.selected.length; i < j; i++) {
                        r.push(data.instance.get_node(data.selected[i]).text);
                        name = data.instance.get_node(data.selected[i]).text;
                        id = data.instance.get_node(data.selected[i]).id
                    }
                    var tt = titleOfDetail.split("-");
                    tt[0] = name;
                    var st = tt.join(' - ');

                    typeIdHtht = id;
                    titleOfDetail = st;
                    $('#type-system').val(name);
                    $('#titleName').html(st);
                    $('#type-tree-g').hide();
                }).bind("loaded.jstree", function (e, data) {
                    $('#edit-type-tree').jstree("select_node", requestInfo.TypeId, true);
                });

                //$('#edit-type-tree').jstree(true).select_node('#');

                var to = false;
                $('#searchType').keyup(function () {
                    if (to) { clearTimeout(to); }
                    to = setTimeout(function () {
                        var v = $('#searchType').val();
                        $('#edit-type-tree').jstree(true).search(v);
                    }, 250);
                });

                $('#type-tree-g').hide();
                $('#type-system').click(function () {
                    $('#type-tree-g').toggle();
                });

                $(document).mouseup(function (e) {
                    var edit_system_tree = $("#type-tree-g"), edit_system = $('#type-system');

                    if (!edit_system_tree.is(e.target)
                        && edit_system_tree.has(e.target).length === 0 && !edit_system.is(e.target)) {
                        edit_system_tree.hide();
                    }
                });
            });

            //▼ Add - NgoanHT - 20/11/2017 - Loại: 184 - Thêm
            $.get('/Requests/GetCatagoryTree', { type: 184 }, function (data) {
                var trees = [];
                var Description = data[0].Description;
                $.each(data, function (index, item) {
                    var newdata = {
                        id: item.Id,
                        parent: item.ParentId,
                        text: item.Name,
                        type: 'Fa'
                    };
                    trees.push(newdata);
                });
                $('#txtLoaiYeuCau-FFHT').val(Description);
                $('#edit-system-tree-FFHT').jstree({
                    "core": { data: trees },
                    "plugins": ["wholerow", "search", "types"],
                    "types": {
                        "Fa": { "icon": "/assets/images/Maps-Pin-Place-icon.png" },
                    },
                }).on('changed.jstree', function (e, data) {
                    var i, j, r = [], name, id;
                    for (i = 0, j = data.selected.length; i < j; i++) {
                        r.push(data.instance.get_node(data.selected[i]).text);
                        name = data.instance.get_node(data.selected[i]).text;
                        id = data.instance.get_node(data.selected[i]).id
                    }
                    var tt = titleOfDetail.split("-");
                    tt[1] = name;
                    var st = tt.join(' - ');

                    systemIdHtht = id;
                    titleOfDetail = st;
                    $('#edit-system-FFHT').val(name);
                    $('#titleName-FFHT').html(st);
                    $('#system-tree-g-FFHT').hide();
                }).bind("loaded.jstree", function (e, data) {
                    $('#edit-system-tree-FFHT').jstree("select_node", requestInfo.GroupId, true);
                });

                var to = false;
                $('#searchSystem').keyup(function () {
                    if (to) { clearTimeout(to); }
                    to = setTimeout(function () {
                        var v = $('#searchSystem').val();
                        $('#edit-system-tree-FFHT').jstree(true).search(v);
                    }, 250);
                });

                $('#system-tree-g-FFHT').hide();
                $('#edit-system-FFHT').click(function () {
                    $('#system-tree-g-FFHT').toggle();
                });

                $(document).mouseup(function (e) {
                    var edit_system_tree = $("#system-tree-g-FFHT"), edit_system = $('#edit-system-FFHT');

                    if (!edit_system_tree.is(e.target)
                        && edit_system_tree.has(e.target).length === 0 && !edit_system.is(e.target)) {
                        edit_system_tree.hide();
                    }
                });
            });
            //▲ Add - NgoanHT - 20/11/2017 - Loại: 184 - Thêm

            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            if (CL.TypeId == 3) {
                $('#infoCkAS').show();

                if (CL.TimeCreate !== null && CL.TimeCreate !== '' && CL.TimeCreate !== undefined) {
                    var timeCreate = new Date(CL.TimeCreate);
                    var dateTimeCreate = new Date(timeCreate.getFullYear(), timeCreate.getMonth(), timeCreate.getDate());
                    $('#dateNow').val(dateTimeCreate.toDateInputValue());
                }

                if (CL.TimeReceipt !== null && CL.TimeReceipt !== '' && CL.TimeReceipt !== undefined) {
                    var timeRecive = new Date(CL.TimeReceipt);
                    var dateTimeReceipt = new Date(timeRecive.getFullYear(), timeRecive.getMonth(), timeRecive.getDate());
                    $('#dateRecive').val(dateTimeReceipt.toDateInputValue());
                }

                if (CL.TimeUat !== null && CL.TimeUat !== '' && CL.TimeUat !== undefined) {
                    var timeUat = new Date(CL.TimeUat);
                    var dateTimeUat = new Date(timeUat.getFullYear(), timeUat.getMonth(), timeUat.getDate());
                    $('#dateUAT').val(dateTimeUat.toDateInputValue());
                }

                if (CL.TimeGolive !== null && CL.TimeGolive !== '' && CL.TimeGolive !== undefined) {
                    var timeGolive = new Date(CL.TimeGolive);
                    var dateTimeGolive = new Date(timeGolive.getFullYear(), timeGolive.getMonth(), timeGolive.getDate());
                    $('#dateGolive').val(dateTimeGolive.toDateInputValue());
                }

                if (CL.TimeGoliveExpected !== null && CL.TimeGoliveExpected !== '' && CL.TimeGoliveExpected !== undefined) {
                    var timeGoliveDK = new Date(CL.TimeGoliveExpected);
                    var dateTimeGoliveExpected = new Date(timeGoliveDK.getFullYear(), timeGoliveDK.getMonth(), timeGoliveDK.getDate());
                    $('#dateGoliveDK').val(dateTimeGoliveExpected.toDateInputValue());
                }

                if (CL.TimeFutureFinish !== null && CL.TimeFutureFinish !== '' && CL.TimeFutureFinish !== undefined) {
                    var timeFufi = new Date(CL.TimeFutureFinish);
                    var dateTimeFutureFinish = new Date(timeFufi.getFullYear(), timeFufi.getMonth(), timeFufi.getDate());
                    $('#dateFuFi').val(dateTimeFutureFinish.toDateInputValue());
                }

                if ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1) {
                    $('#dateRecive').attr('readonly', false);
                    $('#dateUAT').attr('readonly', false);
                    $('#dateGolive').attr('readonly', false);
                    $('#dateGoliveDK').attr('readonly', false);
                    $('#dateFuFi').attr('readonly', false);
                } else if ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 2) {
                    $('#dateFuFi').attr('readonly', false);
                } else if ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 3) {
                    $('#dateRecive').attr('readonly', false);
                    $('#dateUAT').attr('readonly', false);
                    $('#dateGolive').attr('readonly', false);
                    $('#dateGoliveDK').attr('readonly', false);
                    $('#dateFuFi').attr('readonly', false);
                }
            }
            //▼  Add - LuanNT44 - 25/06/2019 - Màn hình định nghĩa CL Hỗ trợ bán hàng
            else if (CL.TypeId == 25) { //console.log(CL.Note)
                //$('#noidungHDSD_25').text(CL.Note)
                $('#noidungHDSD').show();
            }
            //▲  Add - LuanNT44 - 25/06/2019 - Màn hình định nghĩa CL Hỗ trợ bán hàng
            else if (CL.TypeId == 132) {
                $('#infoCommitError').show();

                if (CL.TimeGolive !== null && CL.TimeGolive !== '' && CL.TimeGolive !== undefined) {
                    var timeGolive = new Date(CL.TimeGolive);
                    var montGolive = timeGolive.getMonth() + 1;
                    if (montGolive < 10)
                        montGolive = '0' + montGolive;
                    else
                        montGolive = montGolive;
                    var dayGolive = timeGolive.getDate();
                    if (dayGolive < 10)
                        dayGolive = '0' + dayGolive;
                    else
                        dayGolive = dayGolive;
                    var hourGolive = timeGolive.getHours();
                    if (hourGolive < 10)
                        hourGolive = '0' + hourGolive;
                    else
                        hourGolive = hourGolive;
                    var minuteGolive = timeGolive.getMinutes();
                    if (minuteGolive < 10)
                        minuteGolive = '0' + minuteGolive;
                    else
                        minuteGolive = minuteGolive;
                    var datetimeGolive = timeGolive.getFullYear() + '/' + montGolive + '/' + dayGolive + ' ' + hourGolive + ':' + minuteGolive;
                    $('#dateTimeCommitError').val(datetimeGolive);
                }
                if (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) {
                    $('#datetimepickerCommitError').datetimepicker();
                } else
                    $('#datetimepickerCommitError').datetimepicker('remove');
            }

            $('#editDetails').click(function () {
                if (typeIdHtht === undefined || typeIdHtht === '' || typeIdHtht === null || typeIdHtht === 0) {
                    XFunction.RenderMessage('error', 'Loại yêu cầu chưa hợp lệ :(');
                    return false;
                }
                if (systemIdHtht === undefined || systemIdHtht === '' || systemIdHtht === null || systemIdHtht === 0) {
                    XFunction.RenderMessage('error', 'Hệ thống chưa hợp lệ :(');
                    return false;
                }
                if (typeIdHtht != requestInfo.TypeId) {
                    newTypeIdflag = true;
                }
                else {
                    newTypeIdflag = false;
                }
                $.get('/Requests/EditDetail', {
                    requestId: requestInfo.Id,
                    typeId: typeIdHtht,
                    groupId: systemIdHtht,
                    title: titleOfDetail.toString(),
                    ErrorCode: $('#ErrorCode').val(),
                    Repeat: $('#Repeat').is(':checked'),
                    newTypeIdflag: newTypeIdflag
                }, function (data) {
                    if (data !== null && data !== undefined && data !== '' && data == 1) {
                        window.window.location.reload();
                        XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                        $('#titleX').empty();
                        $('#titleX').html(titleOfDetail);
                        $('#dialog-edit').modal('hide');
                    }
                });
            });

            //▼ Add - NgoanHT - 20/11/2017 - Loại: 184 - Thêm
            $('#editDetails-FFHT').click(function () {
                $.get('/Requests/EditDetailFFHT', {
                    requestId: CL.Id,
                    title: titleOfDetail,
                    ErrorCode: $('#ErrorCode').val(),
                }, function (data) {
                    if (data !== null && data !== undefined && data !== '' && data == 1) {
                        window.window.location.reload();
                        XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                        $('#titleX').empty();
                        $('#titleX').html(titleOfDetail);
                        $('#dialog-edit').modal('hide');
                    }
                });
            });
            //▲ Add - NgoanHT - 20/11/2017 - Loại: 184 - Thêm

            $("#comment").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    return false;
                } else {
                    switch (CL.TypeId) {
                        case 1:
                            {
                                //▼	Edit - VietMXH - 31/05/2019 - ActionAlarm==================================================
                                var l__Is_ReturnFalse = false;
                                $.ajax({
                                    async: false,
                                    url: "/Requests/Requests__Details__ActionAlarm",
                                    type: "GET",
                                    data: { ReqId: CL.Id },
                                    error: function () {
                                        XFunction.RenderMessage("error", "Lỗi: /Requests/Requests__Details__ActionAlarm!");
                                        l__Is_ReturnFalse = true;
                                    },
                                    success: function (p_ActionResult) {
                                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                                            if (p_ActionResult[0].Result == "1") {
                                                //  Do nothing
                                            }
                                            else {
                                                if (p_ActionResult[0].IsAlarm == "1") {
                                                    if (confirm(p_ActionResult[0].AlarmMsg)) {
                                                        //  Do nothing
                                                    }
                                                    else {
                                                        l__Is_ReturnFalse = true;
                                                        location.reload();
                                                    }
                                                }
                                                else {
                                                    XFunction.RenderMessage("error", p_ActionResult[0].Msg);
                                                    l__Is_ReturnFalse = true;
                                                }
                                            }
                                        }
                                        else {
                                            XFunction.RenderMessage("error", "Kiểm tra Cảnh báo Không có kết quả!");
                                            l__Is_ReturnFalse = true;
                                        }
                                    }
                                });
                                if (l__Is_ReturnFalse == true) {
                                    return false;
                                }
                                //▲	Edit - VietMXH - 31/05/2019 - ActionAlarm==================================================
                            }
                            break;
                        case 25:
                            {
                                //▼	Edit - VietMXH - 31/05/2019 - ActionAlarm==================================================
                                var l__Is_ReturnFalse = false;
                                $.ajax({
                                    async: false,
                                    url: "/Requests/Requests__Details__ActionAlarm",
                                    type: "GET",
                                    data: { ReqId: CL.Id },
                                    error: function () {
                                        XFunction.RenderMessage("error", "Lỗi: /Requests/Requests__Details__ActionAlarm!");
                                        l__Is_ReturnFalse = true;
                                    },
                                    success: function (p_ActionResult) {
                                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                                            if (p_ActionResult[0].Result == "1") {
                                                //  Do nothing
                                            }
                                            else {
                                                if (p_ActionResult[0].IsAlarm == "1") {
                                                    if (confirm(p_ActionResult[0].AlarmMsg)) {
                                                        //  Do nothing
                                                    }
                                                    else {
                                                        l__Is_ReturnFalse = true;
                                                        location.reload();
                                                    }
                                                }
                                                else {
                                                    XFunction.RenderMessage("error", p_ActionResult[0].Msg);
                                                    l__Is_ReturnFalse = true;
                                                }
                                            }
                                        }
                                        else {
                                            XFunction.RenderMessage("error", "Kiểm tra Cảnh báo Không có kết quả!");
                                            l__Is_ReturnFalse = true;
                                        }
                                    }
                                });
                                if (l__Is_ReturnFalse == true) {
                                    return false;
                                }
                                //▲	Edit - VietMXH - 31/05/2019 - ActionAlarm==================================================
                            }
                            break;
                        case 132:
                            {
                                var l__TypeId_132__Is_Ass = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) ? true : false;
                                var l__TypeId_132__DateTimeCommitError = $('#dateTimeCommitError').val();
                                if (l__TypeId_132__Is_Ass == true) {
                                    if (!l__TypeId_132__DateTimeCommitError) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập Thời gian cam kết yêu cầu!");
                                        return false;
                                    }
                                    $('#Details').val(JSON.stringify(l__TypeId_132__DateTimeCommitError));
                                }
                                else {
                                    $('#Details').val(JSON.stringify(""));
                                }
                            }
                            break;
                        default:
                            {
                                $('#Details').val(JSON.stringify(""));
                            }
                            break;
                    }

                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
            });
            $("#reply").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                    return false;
                }
                else {
                    switch (CL.TypeId) {
                        case 1:
                            {
                                //▼	Edit - VietMXH - 31/05/2019 - ActionAlarm==================================================
                                var l__Is_ReturnFalse = false;
                                $.ajax({
                                    async: false,
                                    url: "/Requests/Requests__Details__ActionAlarm",
                                    type: "GET",
                                    data: { ReqId: CL.Id },
                                    error: function () {
                                        XFunction.RenderMessage("error", "Lỗi: /Requests/Requests__Details__ActionAlarm!");
                                        l__Is_ReturnFalse = true;
                                    },
                                    success: function (p_ActionResult) {
                                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                                            if (p_ActionResult[0].Result == "1") {
                                                //  Do nothing
                                            }
                                            else {
                                                if (p_ActionResult[0].IsAlarm == "1") {
                                                    if (confirm(p_ActionResult[0].AlarmMsg)) {
                                                        //  Do nothing
                                                    }
                                                    else {
                                                        l__Is_ReturnFalse = true;
                                                        location.reload();
                                                    }
                                                }
                                                else {
                                                    XFunction.RenderMessage("error", p_ActionResult[0].Msg);
                                                    l__Is_ReturnFalse = true;
                                                }
                                            }
                                        }
                                        else {
                                            XFunction.RenderMessage("error", "Kiểm tra Cảnh báo Không có kết quả!");
                                            l__Is_ReturnFalse = true;
                                        }
                                    }
                                });
                                if (l__Is_ReturnFalse == true) {
                                    return false;
                                }
                                //▲	Edit - VietMXH - 31/05/2019 - ActionAlarm==================================================
                            }
                            break;
                        case 3:
                            {
                                var l__TypeId_3__Is_Ass = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) ? true : false;
                                if (l__TypeId_3__Is_Ass == true) {
                                    if (CL.StepNo == 1) {
                                        if ($('#dateRecive').val() === null || $('#dateRecive').val() === '' || $('#dateRecive').val() === undefined) {
                                            XFunction.RenderMessage("error", "Ngày chốt yêu cầu không hợp lệ");
                                            return false;
                                        }
                                    }
                                    else if (CL.StepNo == 2) {
                                        if ($('#dateFuFi').val() === null || $('#dateFuFi').val() === '' || $('#dateFuFi').val() === undefined) {
                                            XFunction.RenderMessage("error", "Ngày dự kiến hoàn thành không hợp lệ");
                                            return false;
                                        }
                                        var timeRecive = new Date(CL.TimeReceipt);
                                        if ($('#dateFuFi').val() !== null && $('#dateFuFi').val() !== '' && $('#dateFuFi').val() !== undefined) {
                                            var timeFufis = new Date($('#dateFuFi').val());
                                            if (timeFufis < timeRecive) {
                                                XFunction.RenderMessage("error", "Ngày dự kiếm hoàn thành phải lớn hơn ngày chốt yêu cầu");
                                                return false;
                                            }
                                        }
                                    }
                                    else if (CL.StepNo == 3) {
                                        if ($('#dateFuFi').val() === null || $('#dateFuFi').val() === '' || $('#dateFuFi').val() === undefined) {
                                            XFunction.RenderMessage("error", "Ngày dự kiến hoàn thành không hợp lệ");
                                            return false;
                                        }
                                        if ($('#dateUAT').val() === null || $('#dateUAT').val() === '' || $('#dateUAT').val() === undefined) {
                                            XFunction.RenderMessage("error", "Ngày UAT không hợp lệ");
                                            return false;
                                        }
                                        if ($('#dateGolive').val() === null || $('#dateGolive').val() === '' || $('#dateGolive').val() === undefined) {
                                            XFunction.RenderMessage("error", "Ngày Golive không hợp lệ");
                                            return false;
                                        }
                                        var timeFufis = new Date($('#dateFuFi').val());
                                        var timeUats = new Date($('#dateUAT').val());
                                        var timeGolives = new Date($('#dateGolive').val());
                                        if (timeUats < timeFufis) {
                                            XFunction.RenderMessage("error", "Ngày UAT phải lớn hơn ngày dự kiến hoàn thành");
                                            return false;
                                        }
                                        if (timeGolives < timeUats) {
                                            XFunction.RenderMessage("error", "Ngày Golive phải lớn hơn ngày UAT");
                                            return false;
                                        }
                                    }
                                }
                                $('#Details').val(JSON.stringify(""));
                            }
                            break;
                        case 25:
                            {
                                //▼	Edit - VietMXH - 31/05/2019 - ActionAlarm==================================================
                                var l__Is_ReturnFalse = false;
                                $.ajax({
                                    async: false,
                                    url: "/Requests/Requests__Details__ActionAlarm",
                                    type: "GET",
                                    data: { ReqId: CL.Id },
                                    error: function () {
                                        XFunction.RenderMessage("error", "Lỗi: /Requests/Requests__Details__ActionAlarm!");
                                        l__Is_ReturnFalse = true;
                                    },
                                    success: function (p_ActionResult) {
                                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                                            if (p_ActionResult[0].Result == "1") {
                                                //  Do nothing
                                            }
                                            else {
                                                if (p_ActionResult[0].IsAlarm == "1") {
                                                    if (confirm(p_ActionResult[0].AlarmMsg)) {
                                                        //  Do nothing
                                                    }
                                                    else {
                                                        l__Is_ReturnFalse = true;
                                                        location.reload();
                                                    }
                                                }
                                                else {
                                                    XFunction.RenderMessage("error", p_ActionResult[0].Msg);
                                                    l__Is_ReturnFalse = true;
                                                }
                                            }
                                        }
                                        else {
                                            XFunction.RenderMessage("error", "Kiểm tra Cảnh báo Không có kết quả!");
                                            l__Is_ReturnFalse = true;
                                        }
                                    }
                                });
                                if (l__Is_ReturnFalse == true) {
                                    return false;
                                }
                                //▲	Edit - VietMXH - 31/05/2019 - ActionAlarm==================================================
                            }
                            break;
                        case 132:
                            {
                                var l__TypeId_132__Is_Ass = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) ? true : false;
                                var l__TypeId_132__DateTimeCommitError = $('#dateTimeCommitError').val();
                                if (l__TypeId_132__Is_Ass == true) {
                                    if (!l__TypeId_132__DateTimeCommitError) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập Thời gian cam kết yêu cầu!");
                                        return false;
                                    }
                                    $('#Details').val(JSON.stringify(l__TypeId_132__DateTimeCommitError));
                                }
                                else {
                                    $('#Details').val(JSON.stringify(""));
                                }
                            }
                            break;
                        default:
                            {
                                $('#Details').val(JSON.stringify(""));
                            }
                            break;
                    }

                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    if (CL.TypeId == 1 || CL.TypeId == 3 || CL.TypeId == 25 || CL.TypeId == 132) {
                        form.submit();
                    } else {
                        $.get('/Requests/HaveTypeErrorForHTHT', { requestId: CL.Id }, function (respone) {
                            if (respone == 1) {
                                form.submit();
                            } else {
                                //▼ Add - NgoanHT - 24/11/2017 - Loại: 184 - Thêm
                                if (CL.TypeId == 184) {
                                    XFunction.RenderMessage('error', 'Cập nhật loại hỗ trợ trước khi trả lời');
                                }
                                else {
                                    XFunction.RenderMessage('error', 'Cập nhật loại lỗi trước khi trả lời');
                                }
                                //▲ Add - NgoanHT - 24/11/2017 - Loại: 184 - Thêm
                                return;
                            }
                        });
                    }
                }
            });
            $("#complete").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (CL.TypeId == 3 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1) {
                    if ($('#dateRecive').val() === null || $('#dateRecive').val() === '' || $('#dateRecive').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày chốt yêu cầu không hợp lệ");
                        return false;
                    }
                }
                if (CL.TypeId == 3 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 2) {
                    if ($('#dateFuFi').val() === null || $('#dateFuFi').val() === '' || $('#dateFuFi').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày dự kiến hoàn thành không hợp lệ");
                        return false;
                    }
                    var timeRecive = new Date(CL.TimeReceipt);
                    if ($('#dateFuFi').val() !== null && $('#dateFuFi').val() !== '' && $('#dateFuFi').val() !== undefined) {
                        var timeFufis = new Date($('#dateFuFi').val());
                        if (timeFufis < timeRecive) {
                            XFunction.RenderMessage("error", "Ngày dự kiếm hoàn thành phải lớn hơn ngày chốt yêu cầu");
                            return false;
                        }
                    }
                }
                if (CL.TypeId == 3 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 3) {
                    if ($('#dateFuFi').val() === null || $('#dateFuFi').val() === '' || $('#dateFuFi').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày dự kiến hoàn thành không hợp lệ");
                        return false;
                    }
                    if ($('#dateUAT').val() === null || $('#dateUAT').val() === '' || $('#dateUAT').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày UAT không hợp lệ");
                        return false;
                    }
                    if ($('#dateGolive').val() === null || $('#dateGolive').val() === '' || $('#dateGolive').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày Golive không hợp lệ");
                        return false;
                    }
                    var timeFufis = new Date($('#dateFuFi').val());
                    var timeUats = new Date($('#dateUAT').val());
                    var timeGolives = new Date($('#dateGolive').val());
                    if (timeUats < timeFufis) {
                        XFunction.RenderMessage("error", "Ngày UAT phải lớn hơn ngày dự kiến hoàn thành");
                        return false;
                    }
                    if (timeGolives < timeUats) {
                        XFunction.RenderMessage("error", "Ngày Golive phải lớn hơn ngày UAT");
                        return false;
                    }
                }
                if (CL.TypeId == 132 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && ($('#dateTimeCommitError').val() == '' || $('#dateTimeCommitError').val().length == 0)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập thời gian cam kết yêu cầu");
                    return false;
                }
                if (CL.TypeId == 132 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true))
                    $('#Details').val(JSON.stringify($('#dateTimeCommitError').val()));
                else
                    $('#Details').val(JSON.stringify(""));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                if (CL.TypeId == 3) {
                    form.submit();
                } else {
                    $.get('/Requests/HaveTypeErrorForHTHT', { requestId: CL.Id }, function (respone) {
                        if (respone == 1) {
                            form.submit();
                        } else {
                            //▼ Add - NgoanHT - 24/11/2017 - Loại: 184 - Thêm
                            if (CL.TypeId == 184) {
                                XFunction.RenderMessage('error', 'Cập nhật loại hỗ trợ trước khi trả lời');
                            }
                            else {
                                XFunction.RenderMessage('error', 'Cập nhật loại lỗi trước khi trả lời');
                            }
                            //▲ Add - NgoanHT - 24/11/2017 - Loại: 184 - Thêm
                            return;
                        }
                    });
                }
            });
            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));


                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (CL.TypeId == 3 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1) {
                    if ($('#dateRecive').val() === null || $('#dateRecive').val() === '' || $('#dateRecive').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày chốt yêu cầu không hợp lệ");
                        return false;
                    }
                }
                if (CL.TypeId == 3 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 2) {
                    if ($('#dateFuFi').val() === null || $('#dateFuFi').val() === '' || $('#dateFuFi').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày dự kiến hoàn thành không hợp lệ");
                        return false;
                    }
                    var timeRecive = new Date(CL.TimeReceipt);
                    if ($('#dateFuFi').val() !== null && $('#dateFuFi').val() !== '' && $('#dateFuFi').val() !== undefined) {
                        var timeFufis = new Date($('#dateFuFi').val());
                        if (timeFufis < timeRecive) {
                            XFunction.RenderMessage("error", "Ngày dự kiếm hoàn thành phải lớn hơn ngày chốt yêu cầu");
                            return false;
                        }
                    }
                }
                if (CL.TypeId == 3 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 3) {
                    if ($('#dateFuFi').val() === null || $('#dateFuFi').val() === '' || $('#dateFuFi').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày dự kiến hoàn thành không hợp lệ");
                        return false;
                    }
                    if ($('#dateUAT').val() === null || $('#dateUAT').val() === '' || $('#dateUAT').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày UAT không hợp lệ");
                        return false;
                    }
                    if ($('#dateGolive').val() === null || $('#dateGolive').val() === '' || $('#dateGolive').val() === undefined) {
                        XFunction.RenderMessage("error", "Ngày Golive không hợp lệ");
                        return false;
                    }
                    var timeFufis = new Date($('#dateFuFi').val());
                    var timeUats = new Date($('#dateUAT').val());
                    var timeGolives = new Date($('#dateGolive').val());
                    if (timeUats < timeFufis) {
                        XFunction.RenderMessage("error", "Ngày UAT phải lớn hơn ngày dự kiến hoàn thành");
                        return false;
                    }
                    if (timeGolives < timeUats) {
                        XFunction.RenderMessage("error", "Ngày Golive phải lớn hơn ngày UAT");
                        return false;
                    }
                }
                $('#Details').val(JSON.stringify(""));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
        },
        RenderSmallDate: function () {
            // $("[rel^='lightbox']").prettyPhoto();
            //$('small.date').each(function () {
            //    var dateFormat = $(this).text()

            //    var old = new Date(dateFormat);
            //    var old1 = old.getHours() + ":" + old.getMinutes() + ":" + old.getSeconds();
            //    var old2 = old.getDate() + ":" + old.getMonth() + ":" + old.getFullYear();

            //    var now = new Date(Date.now());
            //    var now1 = now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds();
            //    var now2 = now.getDate() + ":" + now.getMonth() + ":" + now.getFullYear();


            //    if (now.getFullYear() - old.getFullYear() == 0) {
            //        if (now.getMonth() - old.getMonth() == 0) {

            //            if (now.getDate() - old.getDate() == 0) {
            //                if (now.getHours() - old.getHours() == 0) {
            //                    var x = now.getMinutes() - old.getMinutes();
            //                    $(this).html(x + " phút trước");
            //                }
            //                else {
            //                    var x = now.getHours() - old.getHours();
            //                    $(this).html(x + " giờ trước");
            //                }

            //            }
            //            else {
            //                var x = now.getDate() - old.getDate();
            //                $(this).html(x + " ngày trước");
            //            }
            //        }
            //        else {
            //            var x = now.getMonth() - old.getMonth();
            //            $(this).html(x + " tháng trước");
            //        }
            //    }
            //    else {
            //        var x = now.getFullYear() - old.getFullYear();
            //        $(this).html(x + " năm trước");
            //    }
            //});

            $('#addFile').click(function () {
                countFiles++;
                $('#fileUploads').append('<input class="form-control" style="width:400px" type="file"  id="fileUpload' + countFiles + '" name="fileUpload' + countFiles + '" onchange="checkFileUpload(this);" />');
            });

            // load Cc
            $.get('/Requests/GetEmpsAndGroupMail', {}, function (data) {
                var dataEdit = [];
                $.each(data, function (index, item) {
                    if (item.Type == "Employee") {
                        var nameslip = toString().split('-');
                        dataEdit.push({ text: item.Name, value: item.Code, type: item.Type });
                    } else {
                        dataEdit.push({ text: item.Code + ' - ' + item.Name, value: item.Code, type: item.Type });
                    }
                })
                dataEmploy = dataEdit;
                $.each(dataEmploy, function (index, item) {
                    arrNameEmploy.push(item.text);
                });

                $.get('/Requests/GetCcForDetail', { requestId: requestInfo.Id }, function (data) {
                    //=====================================================================
                    dataCc = data;
                    $('#countCc').html(data.length.toString());
                    $.each(dataCc, function (index, element) {
                        dataCcHandsontable.push({
                            id: element.EmployeeCode,
                            name: element.EmployeeName,
                            email: element.Email,
                            type: element.Type
                        });
                    });
                    //=====================================================================
                    var checkSenderAndAsinner = false;
                    $.each(permissons, function (index, item) {
                        if (item == 'sender' || item == 'assigner' || item == 'groupAssigner' || item == 'cc') {
                            checkSenderAndAsinner = true;
                        }
                    });
                    //=====================================================================
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: dataCcHandsontable,
                            //================================Cols=======
                            maxCols: 4,
                            minCols: 4,
                            startCols: 4,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 4,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 4,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 1,
                            //startRows: 5,
                            //viewportRowRenderingOffset : 'auto',
                            //maxRows: 'Infinity',
                            //minRows: 'Infinity',
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'none',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: true,
                            //====================================Oder ==============================================
                            colHeaders: ["Mã nhân viên", "Tên Nhân Viên", "Email", "Kiểu nhận"],
                            columns: [
                                { data: 'id', readOnly: !checkSenderAndAsinner, type: 'autocomplete', source: arrNameEmploy, strict: false, width: 300, className: 'htLeft' },
                                { data: 'name', type: 'text', width: 250, className: 'htLeft', readOnly: true },
                                { data: 'email', type: 'text', width: 200, className: 'htLeft', readOnly: true },
                                { data: 'type', type: 'text', width: 100, className: 'htLeft', readOnly: true },
                            ],
                            beforeChange: function (change, source) {
                                if (source === 'not') return;
                                for (i = 0, len = change.length; i < len; i++) {
                                    var row = change[i][0], col = change[i][1];
                                    if (col === 'id') {

                                        var oldFull = change[i][2];
                                        var oldId = (oldFull === null || oldFull === '' || oldFull === undefined) ? '' : oldFull.trim();

                                        var newFull = change[i][3].toString().split('-');
                                        var newId = (newFull === null || newFull === '' || newFull === undefined) ? '' : newFull[0].trim();

                                        //valiedater
                                        if (newId === '' || newFull === null || newFull === undefined) {
                                            return false;
                                        }

                                        var colls = hotCc.getDataAtCol(0);
                                        var repeat = $.grep(colls, function (item, index) {
                                            return item == newId
                                                && item !== "" && item !== null && item !== undefined
                                                && newId != oldId;
                                        });

                                        if (repeat.length > 0) {
                                            XFunction.RenderMessage('error', 'Đã tồn tại trên lưới Cc vui lòng chọn lại :(');
                                            return false;
                                        } else {
                                            var findEmploy = $.grep(dataEmploy, function (item, index) {
                                                return newId == item.value;
                                            });
                                            if (findEmploy !== undefined && findEmploy !== null && findEmploy !== '' && findEmploy.length > 0) {
                                                var full = findEmploy[0].text.split('-');
                                                var id = findEmploy[0].value,
                                                    name = full[1].replace(/^\s+/, '');

                                                var email = '';
                                                if (findEmploy[0].type == "GroupMail") {
                                                    email = full[1].replace(/^\s+/, '');
                                                } else {
                                                    email = (full[2].trim() === undefined || full[2].trim() === '' || full[2].trim() === null) ? 'Không có email' : full[2].trim() + 'fpt.com.vn';
                                                }

                                                var type = '';
                                                if (findEmploy[0].type == "GroupMail") {
                                                    type = "GroupMail";
                                                } else {
                                                    type = "Cc";
                                                }
                                                hotCc.setDataAtCell(row, 0, id, 'not');
                                                hotCc.setDataAtCell(row, 1, name, 'not');
                                                hotCc.setDataAtCell(row, 2, email, 'not');
                                                hotCc.setDataAtCell(row, 3, type, 'not');
                                                return;
                                            } else {
                                                XFunction.RenderMessage('error', 'Không tìm thấy nhân viên này trong danh sách nhân viên :(');
                                                return false;
                                            }
                                        }


                                    }

                                }
                            },
                        };
                    };
                    hotCc = new Handsontable(containerCc, setting());
                    var datainCell = hotCc.getDataAtCell(0, 1);
                    hotCc.setDataAtCell(0, 1, datainCell, 'not');
                    //=====================================================================
                    $('#infoCc').click(function () {
                        $('#tableDetailsCc').toggle('fast');
                    });
                    $('#tableDetailsCc').hide();
                });
            });

        },
        RenderMessage: function (type, message) {
            toastr.options = { "newestOnTop": true, "showMethod": "show", "hideMethod": "hide" };
            toastr[type]("<trong>" + message + "</strong>");
        },
        RenderSystemTreeOfType: function () {
            $.get('/Requests/GetCatagoryTree', { type: 45 }, function (response) {
                dataSystemTree = response;
                var data = [];
                $.each(response, function (index, item) {
                    data.push({
                        id: item.Id,
                        parent: item.ParentId,
                        text: item.Name,
                        type: 'Fa'
                    });
                })
                //if ($('#Subject-tree').jstree(true).settings == undefined) {
                $('#Subject-tree').on('changed.jstree', function (e, data) {
                    var i, j, r = [];
                    for (i = 0, j = data.selected.length; i < j; i++) {
                        r.push(data.instance.get_node(data.selected[i]).text);
                        $('#Subject').val(data.instance.get_node(data.selected[i]).text);
                        $('#SubjectId').val(data.instance.get_node(data.selected[i]).id);
                        $('#system-tree-g-it').hide();
                    }
                }).jstree({
                    'core': {
                        'data': data
                    },
                    "plugins": ["wholerow", "search", "types"],
                    "types": {
                        "Fa": { "icon": "/assets/images/Maps-Pin-Place-icon.png" },
                    },
                }).bind("loaded.jstree", function (e, data) {
                    $('#Subject-tree').jstree("select_node", requestInfo.GroupId, true);
                });
                var to = false;
                $('#searchSystemIt').keyup(function () {
                    if (to) { clearTimeout(to); }
                    to = setTimeout(function () {
                        var v = $('#searchSystemIt').val();
                        $('#Subject-tree').jstree(true).search(v);
                    }, 250);
                });

                $('#Subject').click(function () {
                    $('#system-tree-g-it').toggle();
                })
                //}
                //else {
                //    if (data !== null && data !== undefined && data !== '') {
                //        $("#Subject").prop("disabled", false);
                //        $('#Subject-tree').jstree(true).settings.core.data = data;
                //        $('#Subject-tree').jstree(true).refresh();
                //        $('#SubjectId').val('');
                //    } else {
                //        $("#Subject").prop("disabled", true);
                //        $('#Subject-tree').jstree(true).settings.core.data = [];
                //        $('#Subject-tree').jstree(true).refresh();
                //        $('#SubjectId').val('');
                //    }
                //}
                $(document).mouseup(function (e) {
                    var edit_system_tree = $("#system-tree-g-it"), edit_system = $('#Subject');

                    if (!edit_system_tree.is(e.target)
                        && edit_system_tree.has(e.target).length === 0 && !edit_system.is(e.target)) {
                        edit_system_tree.hide();
                    }
                });
            });
        },
    };
    //===================== Hiền.Đoàn 30.09.2016 Chức năng click up hình lại loại duyệt hình ảnh
    var isSenderA = false, isAssinerA = false, isGroupAssinerA = false;
    $.each(permissons, function (index, item) {
        if (item == 'sender')
            isSenderA = true;
        if (item == 'assigner')
            isAssinerA = true;
        if (item == 'groupAssigner')
            isGroupAssinerA = true;
    });
    if (isAssinerA == true || isGroupAssinerA == true) {
        $('.button-images-up-anh').show();
    }
    else {
        $('.button-images-up-anh').hide();
    }
    $('.image-upload-duyet').click(function () {
        var FileId = $(this).attr('data-value');
        var UriOld = $(this).attr('data-id');
        $('#btnuploadDetailsDuyetAnh').attr('data-value', FileId).attr('value', UriOld);
        $('#uploadDetailsDuyetAnh').val('');
        $('#myModalUploadDuyetAnh').modal('show');
    });

    $("#UploadFormDuyetAnh").submit(function (e) {
        var data = new FormData();
        var selectedFiles = $("#uploadDetailsDuyetAnh")[0].files;
        if (selectedFiles.length == 0) {
            e.preventDefault();
            XFunction.RenderMessage('error', 'Không có file để lưu');
            return;
        }
        var UriNew = '';
        $.each(selectedFiles, function (index, item) {
            UriNew = selectedFiles[index].name;
            data.append(selectedFiles[index].name, selectedFiles[index]);
        });

        var FileId = $('#btnuploadDetailsDuyetAnh').attr('data-value');
        var UriOld = $('#btnuploadDetailsDuyetAnh').attr('value');

        $.ajax({
            type: "POST",
            url: "/ReportImages/UpLoadLaiHinhDuyet?FileId=" + FileId + "&UriOld=" + UriOld + "&UriNew=" + UriNew,
            contentType: false,
            processData: false,
            data: data,
            success: function (result) {
                if (result.length > 0) {
                    var FileUri = '', Id;
                    $.each(result, function (index, item) {
                        FileUri = item.Uri;
                        Id = item.Id;
                    });
                    //==== Gán lại hình
                    $('#' + Id + '').attr('src', function (i, e) {
                        return e.replace(UriOld, FileUri);
                    });
                    $("[data-lighter='" + UriOld + "']").attr('data-lighter', FileUri).attr('href', FileUri);
                    $("[data-value='" + Id + "']").attr('data-value', Id).attr('data-id', FileUri).attr('src', 'http://calllog.fptshop.com.vn/assets/images/upload-media-icon-green.png');

                    $('#myModalUploadDuyetAnh').modal('hide');
                    XFunction.RenderMessage('success', 'Up hình thành công!');
                } else {
                    $('#myModalUploadDuyetAnh').modal('hide');
                    XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                }
            },
            error: function () {
                $('#myModalUploadDuyetAnh').modal('hide');
                XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
            }
        });
        e.preventDefault();
    });
    //===============================================================================

    $('#KHConfirmMoney').on('keyup', function (e) {
        var b = $(this).val().replace(/,/g, '', -1);
        $(this).val(b.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,"));
    });
    //▼ Add - TrungNC3 - 07/11/2017 Thêm chi phí CSKH tiết kiệm
    $('#KHSaveMoney').on('keyup', function (e) {
        var b = $(this).val().replace(/,/g, '', -1);
        $(this).val(b.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,"));
    });
    //▲ Add - TrungNC3 - 07/11/2017 Thêm chi phí CSKH tiết kiệm
    $('#btn-searchSO').click(function () {
        $('#modalDetailsSO').modal('show');
        $.get('/Requests/GetSearchNumSO_19', { numSO: $('#numSO').val() }, function (response) {
            //var renderContent = '';
            //console.log(response.length);
            //$.each(response, function (index, item) {                        
            //    renderContent += functionGetData.renderRow(index, item);
            //})
            //$('#bodyTable').html(renderContent);
            if (response != '' && response != undefined && response != null && response.length > 0) {
                $('#data').DataTable({
                    "aaData": response,
                    destroy: true,
                    "iDisplayLength": 5,
                    "bLengthChange": false,
                    "bInfo": false,
                    "aoColumns": [
                        { "mDataProp": "CtyTraGop" },
                        { "mDataProp": "Quantity" },
                        { "mDataProp": "DocNum" },
                        { "mDataProp": "SDT" },
                        { "mDataProp": "NgayMua" },
                        { "mDataProp": "Code" },
                        { "mDataProp": "tenshop" },
                        { "mDataProp": "ItemCode" },
                        { "mDataProp": "HanBaoHanh" },
                        { "mDataProp": "ThanhTien" },
                        { "mDataProp": "tensanpham" },
                        { "mDataProp": "SanPhamKhuyenMai" }
                    ],
                    "aoColumnDefs": [{
                        "aTargets": [9],
                        "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                            var $currencyCell = $(nTd);
                            var commaValue = $currencyCell.text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
                            $currencyCell.text(commaValue);
                        }
                    }]
                });
            }
            else {
                $('#data').DataTable({
                    "aaData": [],
                    destroy: true,
                    "iDisplayLength": 5,
                    "bLengthChange": false,
                    "bInfo": false
                });
            }
        });
    });

    //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
    $('#btn-ProcessingResults').click(function () {
        $.get('/Requests/GetDetailsPhanLoai', { RequestId: requestInfo.Id }, function (response) {
            if (response != null && response != '' && response != undefined) {
                $('#MessageProcessingResults').val(response[0].Note);
            }
        });
        $('#dialog-ProcessingResults').modal('show');
    });
    $('#editProcessingResults').click(function () {
        if ($("#MessageProcessingResults").val().length == 0) {
            alert('Vui lòng nhập kết quả xử lý');
            return;
        }
        $('#dialog-ProcessingResults').modal('hide');
        $('#myModalWatting').modal('show');
        $.get('/Requests/InsertOrUpdateProcessingResults', {
            requestId: requestInfo.Id,
            message: $("#MessageProcessingResults").val()
        }, function (response_rs) {
            if (response_rs !== null && response_rs !== undefined && response_rs !== '' && response_rs == 1) {
                RenderHiddenProcessingResults();
                $('#myModalWatting').modal('hide');
                XFunction.RenderMessage('success', 'Cập nhật thành công');
            }
            else {
                $('#myModalWatting').modal('hide');
                XFunction.RenderMessage('error', 'Chức năng thuộc phân quyền của CSKH');
            }
        });
    });
    //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý

    $('#btn-trouble').click(function () {
        listOffice19 = [];

        //ChuongNT3 - 13/06/2018 - loai 19
        jQuery.uniform.update(jQuery("#complian_cus").prop('disabled', true));
        jQuery.uniform.update(jQuery("#info_cus").prop('disabled', true));

        jQuery.uniform.update(jQuery("#support_cus").prop('disabled', true));//ChuongNT3 - 06/09/2018 - thêm kết quả xử lý

        //ChuongNT3 - 13/06/2018 - loai 19

        $.get('/Requests/GetConversations', { RequestId: requestInfo.Id }, function (response) {
            $.each(response, function (index, item) {
                if (item.Type === 4) {
                    $('#MessageTrouble').val(item.Message);
                }
            });
            $.get('/Requests/GetChiPhiCSKH_19', { RequestId: requestInfo.Id }, function (data) {

                if (data !== '' && data !== null) {
                    if (data[0].Property6 != null) {
                        $('#region-tree').jstree("deselect_all");
                        $('#region-tree').jstree("close_all");
                        var listShop = data[0].Property6.split(',');
                        var listShopCode = [];
                        $.each(listShop, function (index, item) {
                            if (item != '' && item.indexOf('***') == -1) {
                                listShopCode.push(item);
                                $('#region-tree').jstree('select_node', 's' + item);
                            }
                            else if (item.indexOf('***') != -1) {
                                listOffice19.push(item);
                            }
                        })
                        $('#shopIdList').val(listShopCode.join(','));
                    }
                }
            });
            $.get('/Requests/GetDetailsPhanLoai', { RequestId: requestInfo.Id }, function (response2) {
                if (response2 != null && response2 != undefined && response2 != "") {

                    //ChuongNT3 - 13/06/2018 - loại 19 - thêm popup check thông tin/ khiếu nại
                    if (response2[0].Property4 != null || response2[0].Property4 != "") {
                        if (response2[0].Property4 == 'Khiếu nại') {
                            jQuery.uniform.update(jQuery("#complian_cus").prop('checked', true));
                        }
                        if (response2[0].Property4 == 'Thông tin') {
                            jQuery.uniform.update(jQuery("#info_cus").prop('checked', true));
                        }

                        //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
                        if (response2[0].Property4 == 'Hỗ trợ') {
                            jQuery.uniform.update(jQuery("#support_cus").prop('checked', true));
                        }
                        //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý

                    }
                    jQuery.uniform.update(jQuery("#complian_cus").prop('disabled', false));
                    jQuery.uniform.update(jQuery("#info_cus").prop('disabled', false));

                    jQuery.uniform.update(jQuery("#support_cus").prop('disabled', false));                   //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý

                    if (response2[0].Property1 === null || response2[0].Property1 === "") {
                        $("#categoriesId_CSKH").val(response2[0].Property3);
                    }
                    else {
                        $("#categoriesId_CSKH").val(response2[0].Property1);
                    };
                    console.log($.inArray($("#categoriesId_CSKH").val(), ['Bảo hành', 'Thông tin bảo hành', 'Trễ hạn bảo hành', 'Từ chối bảo hành', 'Bảo hành nhiều lần', 'Báo phí', 'Bảo hành vàng', 'Thông tin bảo hành (BHV)', 'Báo phí (BHV)', 'Từ chối bảo hành (BHV)', 'Trễ hạn bảo hành (BHV)', 'Bảo hành nhiều lần (BHV)']) !== -1 && $.inArray(Jobs, ['00349', '00510', '00511']) !== -1)
                    console.log(Jobs);
                    console.log($("#categoriesId_CSKH").val());
                    if ($.inArray($("#categoriesId_CSKH").val(), ['Bảo hành', 'Thông tin bảo hành', 'Trễ hạn bảo hành', 'Từ chối bảo hành', 'Bảo hành nhiều lần', 'Báo phí', 'Bảo hành vàng', 'Thông tin bảo hành (BHV)', 'Báo phí (BHV)', 'Từ chối bảo hành (BHV)', 'Trễ hạn bảo hành (BHV)', 'Bảo hành nhiều lần (BHV)']) !== -1
                        && $.inArray(Jobs, ['00349', '00510', '00511']) !== -1) {
                        $('#btnResendWarranty').show();
                    }
                    else {
                        $('#btnResendWarranty').hide();
                    };
                }
            });
        });
        $('#dialog-trouble').modal('show');
        RenderLoaiCSKH();
    });

    $('#editTrouble').click(function () {

        //▼ ChuongNT3 - 17/09/2018 - checkCSHK
        $.get('/Requests/checkCSKH', null, function (check_CSKH) {
            if (check_CSKH == 'False') {
                XFunction.RenderMessage('error', 'Chức năng thuộc phân quyền của CSKH');
                $('#dialog-trouble').modal('hide');
                return false;
            }
            $.each(data, function (index, item1) {
                if (item1.text === $('#categoriesId_CSKH').val()) {
                    if (item1.parent === "#") {
                        phanLoaiCha = item1.text;
                    }
                    else {
                        $.each(data, function (index, item2) {
                            if (item1.parent === item2.id) {
                                phanLoaiCha = item2.text;
                            }
                        });
                    }
                }
            });
            if ($("#MessageTrouble").val().length == 0) {
                alert('Vui lòng nhập nội dung hướng xử lý');
                return;
            }
            if ($("#shopIdList").val() == '' || $("#shopIdList").val() == null || $("#shopIdList").val() == undefined) {
                alert('Vui lòng chọn shop');
                return;
            }

            var ShopOffice = listOffice19.join(',').length > 0 ? $("#shopIdList").val() + ',' + listOffice19.join(',') : $("#shopIdList").val();
            $("#shopIdList").val(ShopOffice);

            ////ChuongNT3 - 13/06/2018 - loai 19
            var type19 = '';
            if ($('#complian_cus').is(':checked') == true) {
                type19 = $('#complian_cus').val();
            }
            else if ($('#info_cus').is(':checked') == true) {
                type19 = $('#info_cus').val();
            }
            //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
            else if ($('#support_cus').is(':checked') == true) {
                type19 = $('#support_cus').val();
            }
            $.get('/Requests/InsertOrUpdateConversation', {
                requestId: requestInfo.Id,
                message: $("#MessageTrouble").val(),
                listShop: $("#shopIdList").val(),
                type19: type19
            }, function (data) {
                if (data !== null && data !== undefined && data !== '' && data == 0) {
                    alert('Trạng Thái Request đã hoàn tất không thể cập nhật');
                    return;
                }
                else if (data !== null && data !== undefined && data !== '' && data == 1) {
                    if ($("#categoriesId_CSKH").val() !== "" && $("#categoriesId_CSKH").val() !== undefined && $("#categoriesId_CSKH").val() !== null) {
                        $.get('/Requests/ReplacePhanLoai', {
                            requestId: requestInfo.Id,
                            phanLoaiChaNew: $("#categoriesId_CSKH").val()
                        }, function (respone) {
                            if (respone != 1) {
                                alert('Lỗi trong quá trình update tiêu đề :(, Refresh Page'); return;
                            }
                            $.get('/Requests/UpdatePhanLoai_KhieuNai', {
                                requestId: requestInfo.Id, phanLoai: $('#categoriesId_CSKH').val(),
                                phanLoaiCha: phanLoaiCha
                            }, function (respone) {
                                if (respone != 1) {
                                    alert('Lỗi trong quá trình update phân loại :(, Refresh Page'); return;
                                }
                                else {
                                    XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                    $contentTrouble.text($('#MessageTrouble').val());
                                    RenderHiddenTrouble();
                                    $('#dialog-trouble').modal('hide');
                                    location.reload();
                                }
                            });
                        });
                    };
                }
            });
        });
        //▲ ChuongNT3 - 17/09/2018 - checkCSHK

    });

    //▼ Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog
    $('#btnResendWarranty').click(function () {
        $.each(data, function (index, item1) {
            if (item1.text === $('#categoriesId_CSKH').val()) {
                if (item1.parent === "#") {
                    phanLoaiCha = item1.text;
                }
                else {
                    $.each(data, function (index, item2) {
                        if (item1.parent === item2.id) {
                            phanLoaiCha = item2.text;
                        }
                    });
                }
            }
        });

        if ($("#MessageTrouble").val().length == 0) {
            alert('Vui lòng nhập nội dung hướng xử lý');
            return;
        }
        if ($("#shopIdList").val() == '' || $("#shopIdList").val() == null || $("#shopIdList").val() == undefined) {
            alert('Vui lòng chọn shop');
            return;
        }

        var ShopOffice = listOffice19.join(',').length > 0 ? $("#shopIdList").val() + ',' + listOffice19.join(',') : $("#shopIdList").val();
        $("#shopIdList").val(ShopOffice);

        $.get('/Requests/InsertOrUpdateConversation', {
            requestId: requestInfo.Id,
            message: $("#MessageTrouble").val(),
            listShop: $("#shopIdList").val()
            //,statusHXL24h: $('#cbHXL24h').is(":checked") ? 1 : 0
        }, function (data) {
            if (data !== null && data !== undefined && data !== '' && data == 0) {
                alert('Trạng Thái Request đã hoàn tất không thể cập nhật');
                return;
            }
            else if (data !== null && data !== undefined && data !== '' && data == 1) {
                if ($("#categoriesId_CSKH").val() !== "" && $("#categoriesId_CSKH").val() !== undefined && $("#categoriesId_CSKH").val() !== null) {
                    $.get('/Requests/ReplacePhanLoai', {
                        requestId: requestInfo.Id,
                        phanLoaiChaNew: $("#categoriesId_CSKH").val()
                    }, function (respone) {
                        if (respone != 1) {
                            alert('Lỗi trong quá trình update tiêu đề :(, Refresh Page'); return;
                        }
                        $.get('/Requests/UpdatePhanLoai_KhieuNai', {
                            requestId: requestInfo.Id, phanLoai: $('#categoriesId_CSKH').val(),
                            phanLoaiCha: phanLoaiCha
                        }, function (respone) {
                            if (respone != 1) {
                                alert('Lỗi trong quá trình update phân loại :(, Refresh Page'); return;
                            }
                            else {
                                $.get('/Requests/ResendWarranty', { requestId: requestInfo.Id }, function (respone_ResendWarranty) {
                                    //console.log(respone);return false;
                                    if (respone_ResendWarranty[0].Result !== 1) {
                                        XFunction.RenderMessage('success', 'Có lỗi trong quá trình đẩy calllog sang OB :)');
                                    }
                                    else {
                                        XFunction.RenderMessage('success', 'Đã chuyển OB bảo hành  :)');
                                        $contentTrouble.text($('#MessageTrouble').val());
                                        RenderHiddenTrouble();
                                        $('#dialog-trouble').modal('hide');
                                        location.reload();
                                    }
                                });
                            }
                        });
                    });
                };
            }
        });

    });
    //▲ Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog
    $('#btn-chiPhiCSKH').click(function () {
        $.get('/Requests/GetChiPhiCSKH_19', { RequestId: requestInfo.Id }, function (data) {
            if (data !== '' && data !== null) {
                if (data[0].Property9 != null) {
                    var chiPhi = data[0].Property9.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                    $('#KHConfirmMoney').val(chiPhi);
                };
                if (data[0].SaleCode != null) {
                    var soSO = data[0].SaleCode;
                    $('#numSO').val(soSO);
                };
                //▼ Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
                if (data[0].Money1 !== null) {
                    var soTienTietKiem = data[0].Money1.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");;
                    $('#KHSaveMoney').val(soTienTietKiem);
                };
                if (data[0].Property11 !== null) {
                    var noteCPTK = data[0].Property11;
                    $('#MessageNoteMoneyIsNotNull').val(noteCPTK);
                };
                //▲ Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
            };
        });
        $('#dialog-ChiPhiCSKH').modal('show');
    });
    $('#editChiPhiCSKH').click(function () {
        if ($('#KHConfirmMoney').val().length > 0 && !$.isNumeric($('#KHConfirmMoney').val().replace(/,/g, '', -1))) {
            alert('Chí phí phải là số');
            return;
        }
        //▼ Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
        else if ($('#KHSaveMoney').val().length > 0 && !$.isNumeric($('#KHSaveMoney').val().replace(/,/g, '', -1))) {
            alert('Chí phí tiết kiệm phải là số');
            return;
        }
        else if ($('#KHSaveMoney').val().length > 0 && ($('#MessageNoteMoneyIsNotNull').val() === '' || $('#MessageNoteMoneyIsNotNull').val() === null || $('#MessageNoteMoneyIsNotNull').val() === undefined)) {
            alert('Anh/chị vui lòng nhập diễn giải Chi phí CSKH tiết kiệm');
            return false;
        }
        //▲ Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
        else {
            //var cbHXL24h = $('#cbHXL24h').is(":checked") ? 1 : 0;
            $.get('/Requests/UpdateChiPhiCSKHConfirm', {
                requestId: requestInfo.Id
                , moneyConfirm: $('#KHConfirmMoney').val().replace(/,/g, '', -1)
                , soSO: $('#numSO').val()
                //▼ Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
                , moneySave: $('#KHSaveMoney').val().replace(/,/g, '', -1)
                , Note: ($('#MessageNoteMoneyIsNotNull').val() !== null && $('#MessageNoteMoneyIsNotNull').val() !== '' && $('#MessageNoteMoneyIsNotNull').val() !== undefined && $('#MessageNoteMoneyIsNotNull').val().length > 0) ? $('#MessageNoteMoneyIsNotNull').val() : ''
                //▲ Add - TrungNC3 - 13/11/2017 - Thêm Chi phí CSKH Tiết kiệm
            }, function (response) {
                if (response === "1") {
                    XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                    RenderHiddenTrouble();
                    $('#dialog-ChiPhiCSKH').modal('hide');
                    location.reload();
                }
            });
        };
    });
    $('#btn-editCSVC').click(function () {
        $.get('/Requests/InsertOrUpdateConversation_CSVC', {
            requestId: requestInfo.Id,
            message: $("#MessageCSVC").val()
        }, function (data) {
            if (data !== null && data !== undefined && data !== '' && data == 1) {
                XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                $contentCSVC.text($('#MessageCSVC').val());
                RenderHiddenCSVC();
                $('#dialog-edit-CSVC').modal('hide');
            }
        });

    });
    $(document).mouseup(function (e) {
        var type = $("#TypeId-tree"), txttype = $("#Type"), CategoriesIdTree = $('#categoriesId_CSKH-tree'), txtCategoriesId = $('#categoriesId_CSKH'); //Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog

        if (!type.is(e.target) && type.has(e.target).length === 0 && !txttype.is(e.target))
            type.hide();
        //▼ Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog
        if (!CategoriesIdTree.is(e.target) && CategoriesIdTree.has(e.target).length === 0 && !txtCategoriesId.is(e.target))
            CategoriesIdTree.hide();
        //▲ Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog
        var txtRegion = $('#region'), region = $("#region-tree-g");
        if (!region.is(e.target)
            && region.has(e.target).length === 0 && !txtRegion.is(e.target)) {
            region.hide();
        }
    });
    $('#btn-internal').click(function () {

        //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
        $('#myModalWatting').modal('show');

        $.get('/Requests/GetConversations', { RequestId: requestInfo.Id }, function (response) {
            $.each(response, function (index, item) {
                if (item.Type === 6) {
                    $('#MessageInternal').val(item.Message);
                }
                if (item.Type === 10) {
                    $('#MessageInfomation').val(item.Message);
                }
            });
        });

        $.get('/Requests/GetDetails', { RequestId: requestInfo.Id }, function (response1) {
            if (response1 != null && response1 != undefined && response1 != "") {
                jQuery.uniform.update(jQuery("#" + response1[0].Property10).prop('checked', true));
                jQuery.uniform.update(jQuery("#" + response1[0].EmpCode2).prop('checked', true));
            }
        });
        $.get('/Requests/GetCalllogType_19', { RequestId: requestInfo.Id }, function (data) {
            if (data != null && data != undefined && data != "") {
                if (data[0].Property4 == 'Thông tin' && data[0].Property1 != 'Thái độ') {            //ChuongNT3 - 27/06/2018 - loại 19
                    jQuery.uniform.update(jQuery("#info").prop('checked', true));
                }
                else if (data[0].Property4 == 'Khiếu nại') {
                    jQuery.uniform.update(jQuery("#complian").prop('checked', true));
                }

                //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
                else if (data[0].Property4 == 'Hỗ trợ') {
                    jQuery.uniform.update(jQuery("#support").prop('checked', true));
                }

            }
        });
        $.get('/Requests/GetDetailsPhanLoai', { RequestId: requestInfo.Id }, function (response2) {
            if (response2 != null && response2 != undefined && response2 != "") {
                if (response2[0].Property1 === null || response2[0].Property1 === "") {
                    $("#Type").val(response2[0].Property3);
                } else {
                    $("#Type").val(response2[0].Property1);
                }
                //ChuongNT3 - 10/23/2018 - thêm nhánh
                if (response2[0].Property1 == 'Thái độ' && response2[0].Property8 != '' && response2[0].Property8 != null && response2[0].Quantity1 == 0 && response2[0].Property12 != '' && response2[0].Property12 != null) {       //ChuongNT3 - 31/08/2018 - thêm p12
                    //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
                    if (response2[0].Property4 == 'Khiếu nại') {
                        jQuery.uniform.update(jQuery("#info").prop('disabled', true));
                        jQuery.uniform.update(jQuery("#NOK").prop('disabled', true));
                        jQuery.uniform.update(jQuery("#noError").prop('disabled', true));
                        //-------------------------------------------------
                        jQuery.uniform.update(jQuery("#complian").prop('checked', true));
                        jQuery.uniform.update(jQuery("#OK").prop('checked', true));
                        if (response2[0].Property10 == 'noError') {
                            jQuery.uniform.update(jQuery("#noError").prop('checked', true));
                        } else {
                            jQuery.uniform.update(jQuery("#error").prop('checked', true));
                        }
                        //-------------------------------------------------
                        jQuery.uniform.update(jQuery("#info").prop('disabled', false));
                        jQuery.uniform.update(jQuery("#NOK").prop('disabled', false));
                        jQuery.uniform.update(jQuery("#noError").prop('disabled', false));
                    }
                    //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý

                    $("#Type").val(response2[0].Property1);
                }

                var jobTitle = '';
                $.get('/Requests/GetDetailsChucDanh', { RequestId: requestInfo.Id }, function (response3) {
                    if (response3 != null && response3 != undefined && response3 != "") {
                        if (response3[0].Property7 !== null && response3[0].Property7 !== "") {

                            //▼ ChuongNT3 - 04/12/2018 - thêm ds nvvp
                            var list_vp_thaido = []
                            list_vp_thaido = $('select#nvKhieuNai_19').val()
                            $.get('/Requests/List_NVKN_HXLNB', { RequestId: requestInfo.Id, chucDanh: response3[0].Property7 }, function (response_nv) {
                                $.each(response_nv, function (index, item) {
                                    $('#viPhamNB').multiselect({
                                        includeSelectAllOption: true,
                                        enableCaseInsensitiveFiltering: true,
                                        buttonWidth: '100%',
                                        nonSelectedText: 'Chọn nhân viên',
                                        allSelectedText: 'Chọn tất cả',
                                        selectAllText: 'Chọn tất cả',
                                        maxHeight: 200,
                                    });

                                });
                                var data = [];
                                var ar_ds_nhanVienKhieuNai_All = $.grep(response_nv, function (item, index) {
                                    return item.typeC == 0
                                });
                                var ar_ds_nhanVienKhieuNai = $.grep(response_nv, function (item, index) {
                                    return item.typeC == 1
                                });

                                $.each(response_nv, function (index, item) {
                                    data.push({
                                        label: item.EmployeeName,
                                        value: item.EmployeeCode
                                    });
                                });
                                $('#viPhamNB').multiselect('dataprovider', ar_ds_nhanVienKhieuNai_All);
                                $.each(ar_ds_nhanVienKhieuNai, function (index, item) {
                                    $('#viPhamNB').multiselect('select', [item.value]);
                                });
                            });
                            //▲ ChuongNT3 - 04/12/2018 - thêm ds nvvp

                            var array = response3[0].Property7.split(',');
                            $.each(array, function (index, item) {
                                $('#chucDanhNB').multiselect('select', [item]);
                            });

                        }
                    }
                });
            }

            //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
            RenderLoaiKhieuNai();
            //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý

        });

        //▼ ChuongNT3 - 04/12/2018 - thêm ds nvvp
        $('#myModalWatting').modal('hide');
        $('#dialog-internal').modal('show');
        //▲ ChuongNT3 - 04/12/2018 - thêm ds nvvp

    });
    $('#Type').click(function () {
        $('#TypeId-tree').toggle();
    });
    //▼ Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog
    $('#categoriesId_CSKH').click(function () {
        $('#categoriesId_CSKH-tree').toggle();
    });
    //▲ Add - TrungNC3 - 02/04/2018 - Add Categoy CallLog
    $('#editInternal').click(function () {
        var confirmError = jQuery("input:radio[name=ConfirmError]:checked").val();
        var confirmType = jQuery("input:radio[name=ConfirmCalllogType]:checked").val();
        var confirmQuality = jQuery("input:radio[name=ConfirmQuality]:checked").val();
        if (confirmType === undefined || confirmType === null || confirmType === "") {
            alert('Vui lòng chọn loại Calllog :(');
            return;
        }
        if (confirmError != '' && confirmError != null && confirmError != undefined && ($('#chucDanhNB').val() == '' || $('#chucDanhNB').val() == null || $('#chucDanhNB').val() == undefined)) {
            alert('Vui lòng chọn chức danh :(');
            return;
        }
        if (confirmQuality != '' && confirmQuality != null && confirmQuality != undefined) {
        }
        $.get('/Requests/InsertOrUpdateConfirmQuality', { requestId: requestInfo.Id, confirmQuality: confirmQuality != undefined ? confirmQuality : null }, function (respone) {
            if (respone != 1) {
                alert('Lỗi trong quá trình lưu xác nhận lỗi :(, Refresh Page'); return;
            }
            $.get('/Requests/InsertOrUpdateConfirmError', { requestId: requestInfo.Id, confirmError: confirmError != undefined ? confirmError : null }, function (respone) {
                if (respone != 1) {
                    alert('Lỗi trong quá trình lưu xác nhận lỗi :(, Refresh Page'); return;
                }
                $.each(data, function (index, item1) {
                    if (item1.text === $('#Type').val()) {
                        if (item1.parent === "#") {
                            phanLoaiCha = item1.text;
                        }
                        else {
                            $.each(data, function (index, item2) {
                                if (item1.parent === item2.id) {
                                    phanLoaiCha = item2.text;
                                }
                            });
                        }
                    }
                });

                if ($('#chucDanhNB').val() !== null) {
                    var listJobtitle = '';
                    if ($('#chucDanhNB').val() != '' && $('#chucDanhNB').val() != null && $('#chucDanhNB').val() != undefined) {
                        $.each($('#chucDanhNB').val(), function (index, item) {
                            listJobtitle = listJobtitle + "," + item;
                        });
                    }

                    listJobtitle = listJobtitle.substring(1, listJobtitle.length);
                    $.get('/Requests/UpdateChucDanh_19', { requestId: requestInfo.Id, listJobTitle: listJobtitle }, function (respone) {
                        if (respone != 1) {
                            alert('Lỗi trong quá trình lưu chức danh :(, Refresh Page'); return;
                        }
                    });
                }

                //▼ ChuongNT3 - 04/12/2018 - thêm ds nvvp
                if ($('#viPhamNB').val() != null) {
                    var arr_nv = [];
                    var list_nv = '';
                    arr_nv = $('select#viPhamNB').val();
                    $.grep(arr_nv, function (item, index) {
                        list_nv = list_nv + item + ',';
                    });
                    $.get('/Requests/Update_NVVP_HXLNB', {
                        requestId: requestInfo.Id, nhanVien: list_nv
                    }, function (respone1) {
                    });
                };
                //▲ ChuongNT3 - 04/12/2018 - thêm ds nvvp

                if ($("#Type").val() !== "" && $("#Type").val() !== undefined && $("#Type").val() !== null) {
                    $.get('/Requests/ReplacePhanLoai', {
                        requestId: requestInfo.Id,
                        phanLoaiChaNew: $("#Type").val()
                    }, function (respone) {
                        if (respone != 1) {
                            alert('Lỗi trong quá trình update tiêu đề :(, Refresh Page'); return;
                        }
                        $.get('/Requests/UpdatePhanLoai_KhieuNai', {
                            requestId: requestInfo.Id, phanLoai: $('#Type').val(),
                            phanLoaiCha: phanLoaiCha
                        }, function (respone) {
                            if (respone != 1) {
                                alert('Lỗi trong quá trình update phân loại :(, Refresh Page'); return;
                            }
                            $.get('/Requests/UpdateCalllogType_19', {
                                requestId: requestInfo.Id, typeCalllog: confirmType
                            }, function (respone1) {
                                if (respone1 != 1) {
                                    alert('Lỗi trong quá trình update loại calllog :(, Refresh Page'); return;
                                }
                                if ($('#MessageInfomation').val().length > 0) {
                                    $.get('/Requests/InsertOrUpdateConversationInfomation', {
                                        requestId: requestInfo.Id,
                                        message: $("#MessageInfomation").val()
                                    }, function (data) {
                                        if (data !== null && data !== undefined && data !== '' && data == 1) {
                                            if ($('#MessageInternal').val().length > 0) {
                                                // ChuongNT3 - 08/08/2018 - cập nhật hướng xử lý nội bộ 
                                                var requestIdRefer;
                                                if (requestInfo.RequestIdRefer == '' || requestInfo.RequestIdRefer == null || requestInfo.RequestIdRefer == undefined) {
                                                    requestIdRefer = -1
                                                }
                                                else {
                                                    requestIdRefer = parseFloat(requestInfo.RequestIdRefer);
                                                }
                                                $.get('/Requests/InsertOrUpdateConversationInternal', {
                                                    requestId: requestInfo.Id,
                                                    requestIdRefer: requestIdRefer,
                                                    message: $("#MessageInternal").val()
                                                }, function (data) {
                                                    if (data !== null && data !== undefined && data !== '' && data == 1) {
                                                        XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                                        $contentInternal.text('HXL nội bộ: ' + $('#MessageInternal').val() + '. Thông tin: ' + $("#MessageInfomation").val());// Add - TrungNC3 - 16/10/2017 - Bổ sung yêu cầu Chất lượng xử lý CSKH
                                                        RenderHiddenInternal();
                                                        $('#dialog-internal').modal('hide');
                                                        var content = $("#MessageInternal").val();
                                                        content = content.replace('@', '');
                                                        content = content.replace('&', '');
                                                        if (confirmError === "error") {
                                                            $.get('/Requests/RenderLinKToInside_GiaiQuyetKhieuNai', { requestId: requestInfo.Id, content: content }, function (respone) {
                                                                window.open(respone, '_blank');
                                                            });
                                                        }
                                                    }
                                                });
                                            }
                                            else {
                                                $('#dialog-internal').modal('hide');
                                                XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                                if (confirmError === "error") {
                                                    $.get('/Requests/RenderLinKToInside_GiaiQuyetKhieuNai', { requestId: requestInfo.Id, content: content }, function (respone) {
                                                        window.open(respone, '_blank');
                                                    });
                                                }
                                            };
                                        } else {
                                            if ($('#MessageInternal').val().length > 0) {
                                                // ChuongNT3 - 08/08/2018 - cập nhật hướng xử lý nội bộ 
                                                var requestIdRefer;
                                                if (requestInfo.RequestIdRefer == '' || requestInfo.RequestIdRefer == null || requestInfo.RequestIdRefer == undefined) {
                                                    requestIdRefer = -1
                                                }
                                                else {
                                                    requestIdRefer = parseFloat(requestInfo.RequestIdRefer);
                                                }
                                                $.get('/Requests/InsertOrUpdateConversationInternal', {
                                                    requestId: requestInfo.Id,
                                                    requestIdRefer: requestIdRefer,
                                                    message: $("#MessageInternal").val()
                                                }, function (data) {

                                                    if (data !== null && data !== undefined && data !== '' && data == 1) {
                                                        XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                                        $contentInternal.text($('#MessageInternal').val());
                                                        RenderHiddenInternal();
                                                        $('#dialog-internal').modal('hide');
                                                        var content = $("#MessageInternal").val();
                                                        content = content.replace('@', '');
                                                        content = content.replace('&', '');
                                                        if (confirmError === "error") {
                                                            $.get('/Requests/RenderLinKToInside_GiaiQuyetKhieuNai', { requestId: requestInfo.Id, content: content }, function (respone) {
                                                                window.open(respone, '_blank');
                                                            });
                                                        }   //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
                                                    }
                                                });
                                            }
                                            else {
                                                $('#dialog-internal').modal('hide');
                                                XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                                if (confirmError === "error") {
                                                    $.get('/Requests/RenderLinKToInside_GiaiQuyetKhieuNai', { requestId: requestInfo.Id, content: content }, function (respone) {
                                                        window.open(respone, '_blank');
                                                    });
                                                }
                                            };
                                        }
                                    });
                                }
                                else {
                                    if ($('#MessageInternal').val().length > 0) {
                                        // ChuongNT3 - 08/08/2018 - cập nhật hướng xử lý nội bộ 
                                        var requestIdRefer;
                                        if (requestInfo.RequestIdRefer == '' || requestInfo.RequestIdRefer == null || requestInfo.RequestIdRefer == undefined) {
                                            requestIdRefer = -1
                                        }
                                        else {
                                            requestIdRefer = parseFloat(requestInfo.RequestIdRefer);
                                        }
                                        $.get('/Requests/InsertOrUpdateConversationInternal', {
                                            requestId: requestInfo.Id,
                                            requestIdRefer: requestIdRefer,
                                            message: $("#MessageInternal").val()
                                        }, function (data) {
                                            if (data !== null && data !== undefined && data !== '' && data == 1) {
                                                XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                                $contentInternal.text($('#MessageInternal').val());
                                                RenderHiddenInternal();
                                                $('#dialog-internal').modal('hide');
                                                var content = $("#MessageInternal").val();
                                                content = content.replace('@', '');
                                                content = content.replace('&', '');
                                                if (confirmError === "error") {
                                                    $.get('/Requests/RenderLinKToInside_GiaiQuyetKhieuNai', { requestId: requestInfo.Id, content: content }, function (respone) {
                                                        window.open(respone, '_blank');
                                                    });
                                                }
                                            }
                                        });
                                    }
                                    else {
                                        $('#dialog-internal').modal('hide');
                                        XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                        if (confirmError === "error") {
                                            $.get('/Requests/RenderLinKToInside_GiaiQuyetKhieuNai', { requestId: requestInfo.Id, content: content }, function (respone) {
                                                window.open(respone, '_blank');
                                            });
                                        }
                                    };
                                }
                            });
                        });
                    });
                }
                else {
                    $.get('/Requests/UpdateCalllogType_19', {
                        requestId: requestInfo.Id, typeCalllog: confirmType
                    }, function (respone1) {
                        if (respone1 != 1) {
                            alert('Lỗi trong quá trình update loại calllog :(, Refresh Page'); return;
                        }

                        //▼ ChuongNT3 - 04/12/2018 - thêm ds nvvp
                        if ($('#viPhamNB').val() != null) {
                            var arr_nv = [];
                            var list_nv = '';
                            arr_nv = $('select#viPhamNB').val();
                            $.grep(arr_nv, function (item, index) {
                                list_nv = list_nv + item + ',';
                            });
                            $.get('/Requests/Update_NVVP_HXLNB', {
                                requestId: requestInfo.Id, nhanVien: list_nv
                            }, function (respone1) {
                            });
                        };
                        //▲ ChuongNT3 - 04/12/2018 - thêm ds nvvp

                        if ($('#MessageInternal').val().length > 0) {
                            var requestIdRefer;
                            if (requestInfo.RequestIdRefer == '' || requestInfo.RequestIdRefer == null || requestInfo.RequestIdRefer == undefined) {
                                requestIdRefer = -1
                            }
                            else {
                                requestIdRefer = parseFloat(requestInfo.RequestIdRefer);
                            }
                            $.get('/Requests/InsertOrUpdateConversationInternal', {
                                requestId: requestInfo.Id,
                                requestIdRefer: requestIdRefer,
                                message: $("#MessageInternal").val()
                            }, function (data) {
                                if (data !== null && data !== undefined && data !== '' && data == 1) {
                                    XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                    $contentInternal.text($('#MessageInternal').val());
                                    RenderHiddenInternal();
                                    $('#dialog-internal').modal('hide');
                                    var content = $("#MessageInternal").val();
                                    content = content.replace('@', '');
                                    content = content.replace('&', '');
                                    if (confirmError === "error") {
                                        $.get('/Requests/RenderLinKToInside_GiaiQuyetKhieuNai', { requestId: requestInfo.Id, content: content }, function (respone) {
                                            window.open(respone, '_blank');
                                        });
                                    }
                                }
                            });
                        }
                    });
                }
            });      //ChuongNT3 - 06/09/2018 - thêm kết quả xử lý
        });
    });

    //▼ ChuongNT3 - 04/12/2018 - thêm ds nvvp
    $('#editInternal_ChucDanh').click(function () {
        var list_cd_thaido = []
        var cd_hxlnb = '';
        list_cd_thaido = $('select#chucDanhNB').val()
        $.grep(list_cd_thaido, function (item, index) {
            cd_hxlnb = cd_hxlnb + item + ',';
        });
        var dataR = [];
        dataR.push({
            requestId: requestInfo.Id,
            chucDanh: cd_hxlnb
        });
        console.log(dataR)
        $.ajax({
            type: "POST",
            url: "/Requests/UpdateChucDanhHXLNB?requestId=" + requestInfo.Id + "&chucDanh=" + cd_hxlnb,
            contentType: false,
            processData: false,
            data: dataR,
            success: function (result) {
                console.log('result', result[0].Column1)
                var list_vp_thaido = []
                list_vp_thaido = $('select#nvKhieuNai_19').val()
                $.get('/Requests/List_NVKN_HXLNB', { RequestId: requestInfo.Id, chucDanh: result[0].Column1 }, function (response_nv) {
                    $.each(response_nv, function (index, item) {
                        $('#viPhamNB').multiselect({
                            includeSelectAllOption: true,
                            enableCaseInsensitiveFiltering: true,
                            buttonWidth: '100%',
                            nonSelectedText: 'Chọn nhân viên',
                            allSelectedText: 'Chọn tất cả',
                            selectAllText: 'Chọn tất cả',
                            maxHeight: 200,
                        });
                    });
                    var data = [];
                    $.each(response_nv, function (index, item) {
                        data.push({
                            label: item.EmployeeName,
                            value: item.EmployeeCode
                        });
                    });
                    $('#viPhamNB').multiselect('dataprovider', response_nv);
                    $.each(list_vp_thaido, function (index, item) {
                        $('#viPhamNB').multiselect('select', [item]);
                    });
                });
            },
            error: function () {
                alert("Lỗi cập nhật chức danh")
            }
        });
    });
    //▲ ChuongNT3 - 04/12/2018 - thêm ds nvvp

    $('#btn-editNVHC').click(function () {
        if ($("#MessageNVHC").val().length == 0) {
            alert('Vui lòng nhập nội dung hướng xử lý');
            return;
        }
        $.get('/Requests/InsertOrUpdateConversationHXLHC', {
            requestId: requestInfo.Id,
            message: $("#MessageNVHC").val(),
            //listShop: $("#shopIdList").val(),
            //,statusHXL24h: $('#cbHXL24h').is(":checked") ? 1 : 0
        }, function (data) {
            if (data !== null && data !== undefined && data !== '' && data == 0) {
                alert('Trạng Thái Request đã hoàn tất không thể cập nhật');
                return;
            }
            else if (data !== null && data !== undefined && data !== '' && data == 1) {
                XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                $contentNVHC.text($('#MessageNVHC').val());
                RenderHiddenNVHC();
                $('#dialog-edit-NVHC').modal('hide');
            }
        });
    });
    //▲ Add - =======================================
    $(document).on('click', '#changeAssigner', function () {
        $('#dialog-change-assigner').modal('show');
        $.get('/Requests/GetEmployeesByPermission', { requestId: requestInfo.Id }, function (response) {
            if (response !== undefined && response !== null && response !== '') {
                $('#employee-jobTitle').multiselect({
                    enableCaseInsensitiveFiltering: true,
                    includeSelectAllOption: true,
                    buttonWidth: '100%',
                    nonSelectedText: 'Chọn người xử lý',
                    allSelectedText: 'Chọn tất cả',
                    selectAllText: 'Chọn tất cả',
                    maxHeight: 500,
                    onDropdownShown: function (even) {
                        this.$filter.find('.multiselect-search').focus();
                    }
                });
                var data = [];
                $.each(response, function (index, item) {
                    data.push({
                        label: item.EmployeeName,
                        value: item.EmployeeCode
                    });
                });
                $('#employee-jobTitle').multiselect('dataprovider', data);
            }
        });
    });
    $(document).on('click', '#btn-changeAssigner', function () {

        $newAssigner = $('#employee-jobTitle').val();
        $.get('/Requests/UpdateChangeAssigner', { requestId: requestInfo.Id, EmpCode: $newAssigner }, function (response) {

            if (response !== null && response !== undefined && response !== '' && response == 1) {
                XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                $('#dialog-change-assigner').modal('hide');
                //========= Hiền.Đoàn 27.10.2016 cho waiting 3s rồi mới load lại trang
                $(function () {
                    function show_popup() {
                        window.location.href = '/';
                    };
                    window.setTimeout(show_popup, 3000); // 3 seconds
                });
            }
            else {
                XFunction.RenderMessage('error', 'Cập nhật không thành công  :)');
            }
        });

    });

    $('#btn-SummaryMessage').click(function () {
        $('#dialog-SummaryMessage').modal('show');
        $.get('/Requests/GetConversations', { RequestId: requestInfo.Id }, function (response) {
            var MessageSummary = '';
            $.each(response, function (index, item) {
                if (item.Type === 16 && item.Message != '') {
                    MessageSummary = item.Message;
                };
                $('#txtSummaryMessage').val(MessageSummary);
            });
        });

        $('#editSummaryMessage').unbind("click");
        $('#editSummaryMessage').click(function () {
            var messageSummary = $('#txtSummaryMessage').val() || '';
            console.log('1');
            if (messageSummary.length == 0) {
                XFunction.RenderMessage('error', 'Chưa nhập nội dung tóm tắt');
                return false;
            }
            $.get('/Requests/InsertOrUpdateSummaryMessage', { requestId: requestInfo.Id, message: messageSummary }, function (response) {
                if ([null, undefined, '', '0'].indexOf(response) > -1) {
                    location.reload();
                } else {
                    XFunction.RenderMessage('success', 'Cập nhật thành công');
                    $('#dialog-SummaryMessage').modal('hide');
                }
            });
        });
    });

    var time = timeOut * 60;
    function adown() {
        time = time - 1;
        $('#messageTimeOut').html('Còn lại ' + (time) + ' giây.');
        if (time == 60) {
            toastr.options = { "newestOnTop": true, "showMethod": "show", "hideMethod": "hide", "positionClass": "toast-top-right", "timeOut": "100000", "extendedTimeOut": "100000", };
            toastr['info']('<button type="button" id="SetNewTimeOut" class="btn btn-info">Đồng ý</button><span id="messageTimeOut">Còn lại ' + time + ' giây.</span>', 'Hết thời gian làm việc trên màn hình này bạn có muốn tiếp tục');
            $('#SetNewTimeOut').click(function () {
                $.get('/Requests/Keep_Session_Live', null, function (data) {
                    if (data == 1) {
                        time = timeOut * 60;
                    }
                });
            });
        }
        if (time == 0) {
            $.get('/Users/Logout', null, function (data) {
                var form = $("form#form-detail");
                form.attr("action", "/Users/Logout");
                form.submit();
            });
        }
        setTimeout(function () {
            adown();
        }, 1000);
    }
    setTimeout(function () { adown(); }, 1000);

    var xData = {
        Render: function (info) {

            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            if ($.inArray(info.TypeId, [39, 65, 74, 75, 77, 78, 72, 83, 84, 71, 88, 89, 90, 91, 92, 93, 94, 30, 95, 96]) !== -1) {
                $.get('/Requests/GetConfig', { id: info.TypeId, type: 'detail' }, function (respone) {
                    if (respone !== null && respone !== '' && respone !== undefined && respone.length > 0) {

                        var ReadOnly = false;
                        $.each(respone, function (number, values) {
                            if ((permisstion.isAssiner == true) || (permisstion.isGroupAssiner == true)) {
                                ReadOnly = true;
                            }
                            else {
                                ReadOnly = false;
                            }
                        });

                        var responeHaveData = function () {
                            var now = new Date();
                            var oneDay = (now.getDate() < 10) ? '0' + now.getDate() : now.getDate() + "/" + ((now.getMonth() + 1) < 10) ? '0' + (now.getMonth() + 1) : (now.getMonth() + 1) + "/" + (now.getYear() + 1900);
                            dataFull = respone;
                            var colHeaders = []; columns = [];
                            var Cog = function () {
                                $.get('/Requests/GetRequestDetails2', { id: info.Id }, function (respone) {
                                    $.each(respone, function (index, item) {
                                        dataHandsontable.push({
                                            Id: item.Id == undefined ? null : item.Id,
                                            ItemId: item.ItemId == undefined ? null : item.ItemId,
                                            Quantity: item.Quantity == undefined ? null : item.Quantity,
                                            Note: item.Note == undefined ? null : item.Note,
                                            Status: item.Status == undefined ? false : item.Status,
                                            Sum: item.Sum == undefined ? null : item.Sum,
                                            QuantityAvaiable: item.QuantityAvaiable == undefined ? null : item.QuantityAvaiable,
                                            EmpCode: item.EmpCode == undefined ? null : item.EmpCode,
                                            EmpName: item.EmployeeName == undefined ? null : item.EmpCode + '--' + item.EmployeeName,
                                            EmpCode1: item.EmpCode1 == undefined ? null : item.EmpCode1,
                                            EmpName1: item.EmployeeName1 == undefined ? null : item.EmpCode1 + '--' + item.EmployeeName1,
                                            EmpCode2: item.EmpCode2 == undefined ? null : item.EmpCode2,
                                            EmpName2: item.EmployeeName2 == undefined ? null : item.EmpCode2 + '--' + item.EmployeeName2,
                                            EmpCode3: item.EmpCode3 == undefined ? null : item.EmpCode3,
                                            EmpName3: item.EmployeeName3 == undefined ? null : item.EmployeeName3,
                                            Price: item.Price == undefined ? null : item.Price,
                                            NoticeAlertId: item.NoticeAlertId == undefined ? null : item.NoticeAlertId,
                                            ShopCode: item.ShopCode == undefined ? null : item.ShopCode,
                                            ShopName: item.WarehouseName == undefined ? null : item.ShopCode + '--' + item.WarehouseName,
                                            ShopCode2: item.ShopCode2 == undefined ? null : item.ShopCode2,
                                            ShopName2: item.WarehouseName2 == undefined ? null : item.ShopCode2 + '--' + item.WarehouseName2,
                                            OfficeCode: item.OfficeCode == undefined ? null : item.OfficeCode,
                                            OfficeName: item.OfficeCode == undefined ? null : item.OrganizationHierachyName,
                                            CustomerCode: item.CustomerCode == undefined ? null : item.CustomerCode,
                                            CustomerName: item.CustomerName == undefined ? null : item.CustomerName,
                                            SaleCode: item.SaleCode == undefined ? null : item.SaleCode,
                                            Time1: item.Time1 == undefined ? null : item.Time1,
                                            Time2: item.Time2 == undefined ? null : item.Time2,
                                            Money1: item.Money1 == undefined ? null : item.Money1,
                                            Money2: item.Money2 == undefined ? null : item.Money2,
                                            ProductCode: item.ProductCode == undefined ? null : item.ProductCode,
                                            ProductName: item.ProductName == undefined ? null : item.ProductName,
                                            Imei: item.Imei == undefined ? null : item.Imei,
                                            Time3: item.Time3 == undefined ? null : item.Time3,
                                            Money3: item.Money3 == undefined ? null : item.Money3,
                                            Money4: item.Money4 == undefined ? null : item.Money4,
                                            Approved: item.Approved === undefined ? false : item.Approved,
                                            Quantity1: item.Quantity1 == undefined ? null : item.Quantity1,
                                            Quantity2: item.Quantity2 == undefined ? null : item.Quantity2,
                                            Quantity3: item.Quantity3 == undefined ? null : item.Quantity3,
                                            Quantity4: item.Quantity4 == undefined ? null : item.Quantity4,
                                            Quantity5: item.Quantity5 == undefined ? null : item.Quantity5,
                                            Property1: item.Property1 == undefined ? null : item.Property1,
                                            Property2: item.Property2 == undefined ? null : item.Property2,
                                            Property3: item.Property3 == undefined ? null : item.Property3,
                                            Property3V2: (item.Property3 !== undefined && $.inArray(info.TypeId, [91, 92, 93, 94]) !== -1) ? item.Property3.split('-')[1] : null,
                                            Property4: item.Property4 == undefined ? null : item.Property4,
                                            Property5: item.Property5 == undefined ? null : item.Property5,
                                            Property6: item.Property6 == undefined ? null : item.Property6,
                                            Property7: item.Property7 == undefined ? null : item.Property7,
                                            Property8: item.Property8 == undefined ? null : item.Property8,
                                            Property9: item.Property9 == undefined ? null : item.Property9,
                                            Property10: item.Property10 == undefined ? null : item.Property10,
                                            JobCode1: item.JobCode1 == undefined ? null : item.JobCode1,
                                            JobName1: item.JobTitleName1 == undefined ? null : item.JobCode1 + '--' + item.JobTitleName1,
                                            JobCode2: item.JobCode2 == undefined ? null : item.JobCode2,
                                            JobName2: item.JobTitleName2 == undefined ? null : item.JobCode2 + '--' + item.JobTitleName2,
                                            HaveConvertation: item.HaveConvertation == null ? 0 : 1
                                        });
                                    });
                                    $.each(dataFull, function (index, item) {
                                        if (item.DataType == 'text') {
                                            colHeaders.push(item.HeaderText);
                                            if (item.ColumnSave !== null && item.ColumnSave !== '' && item.ColumnSave !== undefined) {
                                                var options = item.ColumnSave.split(",");
                                                columns.push({ data: '' + item.Text + '', readOnly: item.HasReadOnly, className: 'htLeft', type: 'dropdown', width: item.Weight, source: options });
                                            } else if (item.Text == 'JobCode1') {
                                                columns.push({ data: 'JobName1', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight, });
                                            } else if (item.Text == 'JobCode2') {
                                                columns.push({ data: 'JobName2', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight, });
                                            } else if (item.Text == 'Property3' && $.inArray(info.TypeId, [91, 92, 93, 94]) !== -1) {
                                                columns.push({ data: 'Property3V2', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight, });
                                            } else {
                                                columns.push({ data: '' + item.Text + '', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight });
                                            }

                                        } else if (item.DataType == 'autocomplete') {
                                            colHeaders.push(item.HeaderText);
                                            //------------- Hiền.Đoàn 27.08.2016 lấy cột hình thức đào tạo loại [92,94]
                                            if (item.Text == "Property5" && $.inArray(info.TypeId, [92, 94]) !== -1) {
                                                var dataOpp = ["Online", "Offline"];
                                                if ((($.inArray(info.TypeId, [92, 94]) !== -1 && info.StepNo == 3) /*|| ($.inArray(info.TypeId, [94]) !== -1 && info.StepNo == 2)*/) && ReadOnly == true && (info.Status != $.inArray(4, 5))) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh

                                                    columns.push({
                                                        data: 'Property5',
                                                        readOnly: false,
                                                        className: 'htCenter',
                                                        type: "dropdown",
                                                        width: item.Weights,
                                                        source: dataOpp
                                                    });
                                                } else {
                                                    columns.push({
                                                        data: 'Property5',
                                                        readOnly: true,
                                                        className: 'htCenter',
                                                        type: "dropdown",
                                                        width: item.Weights,
                                                        source: dataOpp
                                                    });
                                                }
                                            }
                                            //------------- Hiền.Đoàn 27.08.2016 lấy cột xác nhận của ASM
                                            else if (item.Text == "Property6" && $.inArray(info.TypeId, [92, 94]) !== -1) {
                                                var dataOpp_ = ["Tôi đồng ý chịu trách nhiệm các vấn đề xảy ra về việc chuyển chức danh trước khi có kết quả đào tạo", "Đào tạo nhân viên"];
                                                if ((($.inArray(info.TypeId, [92, 94]) !== -1 && info.StepNo == 4) /*|| ($.inArray(info.TypeId, [94]) !== -1 && info.StepNo == 3)*/) && ReadOnly == true && (info.Status != $.inArray(4, 5))) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                                                    columns.push({
                                                        data: 'Property6',
                                                        readOnly: false,
                                                        className: 'htCenter',
                                                        type: "dropdown",
                                                        width: 700,
                                                        source: dataOpp_
                                                    });
                                                } else {
                                                    columns.push({
                                                        data: 'Property6',
                                                        readOnly: true,
                                                        className: 'htCenter',
                                                        type: "dropdown",
                                                        width: 700,
                                                        source: dataOpp_
                                                    });
                                                }
                                            }
                                            //------------- Hiền.Đoàn 27.08.2016 Kết quả đào tạo
                                            else if (item.Text == "Property7" && $.inArray(info.TypeId, [92, 94]) !== -1) {
                                                var dataOpp_ = ["Đạt", "Không Đạt"];
                                                if ((($.inArray(info.TypeId, [92, 94]) !== -1 && info.StepNo == 5) /*|| ($.inArray(info.TypeId, [94]) !== -1 && info.StepNo == 3)*/) && ReadOnly == true && (info.Status != $.inArray(4, 5))) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                                                    columns.push({
                                                        data: 'Property7',
                                                        readOnly: false,
                                                        className: 'htCenter',
                                                        type: "dropdown",
                                                        width: item.Weights,
                                                        source: dataOpp_
                                                    });
                                                } else {
                                                    columns.push({
                                                        data: 'Property7',
                                                        readOnly: true,
                                                        className: 'htCenter',
                                                        type: "dropdown",
                                                        width: item.Weights,
                                                        source: dataOpp_
                                                    });
                                                }
                                            }
                                            else
                                                if (item.Text == 'ShopCode') {
                                                    columns.push({ data: 'ShopName', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight });
                                                } else if (item.Text == 'ShopCode2') {
                                                    columns.push({ data: 'ShopName2', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight });
                                                } else if (item.Text == 'EmpCode') {
                                                    columns.push({ data: 'EmpName', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight });
                                                }
                                                else if (item.Text == 'EmpCode1') {
                                                    columns.push({ data: 'EmpName1', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight });
                                                }
                                                else if (item.Text == 'EmpCode2') {
                                                    columns.push({ data: 'EmpName2', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight });
                                                } else if (item.Text == 'OfficeCode') {
                                                    columns.push({ data: 'OfficeName', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight });
                                                } else {
                                                    columns.push({ data: '' + item.Text + '', readOnly: item.HasReadOnly, className: 'htLeft', type: 'text', width: item.Weight });
                                                }

                                        } else if (item.DataType == 'numeric') {
                                            if (item.Text == "Quantity1" && $.inArray(info.TypeId, [91, 92, 94]) !== -1 && (info.Status != $.inArray(4, 5))) { }
                                            else {
                                                colHeaders.push(item.HeaderText);
                                                columns.push({ data: '' + item.Text + '', readOnly: !item.HasEditDetail, className: 'htRight', type: 'numeric', format: '0,0', width: item.Weight });
                                            }
                                        } else if (item.DataType == 'date') {
                                            //------------- Hiền.Đoàn 26.08.2016 ReadOnly loại [91, 92, 94]
                                            if ($.inArray(info.TypeId, [91, 92, 94]) !== -1) {
                                                if (item.Text == "Time1") {
                                                    colHeaders.push(item.HeaderText);
                                                    columns.push({
                                                        data: '' + item.Text + '',
                                                        readOnly: item.HasReadOnly,
                                                        type: 'date',
                                                        dateFormat: 'DD/MM/YYYY',
                                                        correctFormat: true,
                                                        allowInvalid: true,
                                                        defaultDate: oneDay,
                                                        width: item.Weight
                                                    });
                                                } else if (info.TypeId == 92 && info.StepNo == 3 && ReadOnly == true && (info.Status != $.inArray(4, 5))) {
                                                    colHeaders.push(item.HeaderText);
                                                    columns.push({
                                                        data: '' + item.Text + '',
                                                        readOnly: false,
                                                        type: 'date',
                                                        dateFormat: 'DD/MM/YYYY',
                                                        correctFormat: true,
                                                        allowInvalid: true,
                                                        defaultDate: oneDay,
                                                        width: item.Weight
                                                    });
                                                } else if (info.TypeId == 94 && info.StepNo == 3 && ReadOnly == true && (info.Status != $.inArray(4, 5))) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                                                    colHeaders.push(item.HeaderText);
                                                    columns.push({
                                                        data: '' + item.Text + '',
                                                        readOnly: false,
                                                        type: 'date',
                                                        dateFormat: 'DD/MM/YYYY',
                                                        correctFormat: true,
                                                        allowInvalid: true,
                                                        defaultDate: oneDay,
                                                        width: item.Weight
                                                    });
                                                } else {
                                                    colHeaders.push(item.HeaderText);
                                                    columns.push({
                                                        data: '' + item.Text + '',
                                                        readOnly: item.HasReadOnly,
                                                        type: 'date',
                                                        dateFormat: 'DD/MM/YYYY',
                                                        correctFormat: true,
                                                        allowInvalid: true,
                                                        defaultDate: oneDay,
                                                        width: item.Weight
                                                    });
                                                }
                                            } else {
                                                colHeaders.push(item.HeaderText);
                                                columns.push({
                                                    data: '' + item.Text + '',
                                                    readOnly: item.HasReadOnly,
                                                    type: 'date',
                                                    dateFormat: 'DD/MM/YYYY',
                                                    correctFormat: true,
                                                    allowInvalid: true,
                                                    defaultDate: oneDay,
                                                    width: item.Weight
                                                });
                                            }
                                        } else if (item.DataType == 'checkbox') {
                                            if (item.Text == "Approved" && $.inArray(info.TypeId, [91, 92, 94]) !== -1) {
                                                colHeaders.push(item.HeaderText);
                                                var options = item.ColumnSave.split(",");
                                                var dataOpp = ["Duyệt", "Chưa duyệt"];
                                                if (((info.TypeId == 91 && info.StepNo == 1) || (info.TypeId == 92 && (info.StepNo == 2 || info.StepNo == 1)) || ($.inArray(info.TypeId, [94]) !== -1 && (info.StepNo == 2 || info.StepNo == 1))) && ReadOnly == true && (info.Status != $.inArray(4, 5))) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                                                    columns.push({
                                                        data: 'ApprovedSelect',
                                                        readOnly: false,
                                                        className: 'htLeft',
                                                        type: "dropdown",
                                                        width: item.Weights,
                                                        source: dataOpp
                                                    });
                                                } else {
                                                    columns.push({
                                                        data: 'ApprovedSelect',
                                                        readOnly: true,
                                                        className: 'htLeft',
                                                        type: "dropdown",
                                                        width: item.Weights,
                                                        source: dataOpp
                                                    });
                                                }

                                            } else {
                                                colHeaders.push(item.HeaderText);
                                                columns.push({
                                                    data: '' + item.Text + '',
                                                    readOnly: item.HasReadOnly,
                                                    className: 'htLeft',
                                                    type: 'checkbox',
                                                    width: 100,
                                                    checkedTemplate: true,
                                                    uncheckedTemplate: false
                                                });
                                            }
                                        }
                                    });
                                    var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                                        var data = $.grep(instance.getData(), function (item, index) {
                                            return index == row && prop == 'button';
                                        });
                                        var $button = ''
                                        if (data[0].HaveConvertation == 1) {
                                            $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                                        } else {
                                            $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                                        }

                                        $button.click(function () {
                                            $('#MessageGiaiTrinh').val('');
                                            $('#modalBodyGiaitrinh').empty();
                                            var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                                            $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                                            if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                                                $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                                    if (respone !== undefined && respone !== '' && respone !== null) {
                                                        var inner = '';
                                                        $.each(respone, function (index, item) {
                                                            inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                                                '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                                                ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                                        });
                                                        $('#modalBodyGiaitrinh').html(inner);
                                                        $('#modalBodyGiaitrinh').show();
                                                    } else {
                                                        $('#modalBodyGiaitrinh').hide();
                                                    }
                                                    $('#modalGiaiTrinh').modal('show');
                                                });
                                            }
                                        });
                                        $(td).empty().append($button);
                                    };
                                    if (info.TypeId == 89) {
                                        colHeaders.push('Chênh lệch');
                                        columns.push({
                                            data: 'Difference', type: 'numeric', format: '0,0', readOnly: true, className: 'htRight',
                                            renderer: function (instance, td, row, col, prop, value) {
                                                if (prop === 'Difference') {
                                                    var quantity = $.isNumeric(instance.getDataAtRowProp(row, 'Quantity')) ? instance.getDataAtRowProp(row, 'Quantity') : 0;
                                                    var quantity1 = $.isNumeric(instance.getDataAtRowProp(row, 'Quantity1')) ? instance.getDataAtRowProp(row, 'Quantity1') : 0;
                                                    value = quantity - quantity1;
                                                }
                                                //if (col === 11 && row === dataDebt.length - 1) {
                                                //    td.style.fontWeight = 'bold';
                                                //    td.style.textAlign = 'right';
                                                //    td.style.color = 'green';
                                                //    var total = 0;
                                                //    $.each(dataDebt, function (index, item) {
                                                //        (item.Difference !== null && item.Difference !== undefined && item.Difference !== "" && !isNaN(item.Difference)) ? total += item.Difference : total += 0;
                                                //    });
                                                //    value = total;
                                                //}
                                                Handsontable.NumericRenderer.apply(this, arguments);
                                            }
                                        });
                                        $('#dowloadSupport').show();
                                        $('#fileSupp').on('click', function () {
                                            $('#Details').val(JSON.stringify(dataHandsontable));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/DownloadExcelExport");
                                            form.submit();
                                        });
                                        function endFile(name) {
                                            var extension = name.split('.').pop().toLowerCase();
                                            if ($.inArray(extension, ['xlsx']) == -1) {
                                                XFunction.RenderMessage('error', 'File exel không hợp lệ định dạng file hỗ trợ : xlsx');
                                                return false;
                                            }
                                            else {
                                                return true;
                                            }
                                        }
                                        function contructExecl89() {
                                            var X = XLSX;
                                            function fixdata(data) {
                                                var o = "", l = 0, w = 10240;
                                                for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
                                                o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
                                                return o;
                                            }
                                            function to_json(workbook) {
                                                var result = {};
                                                workbook.SheetNames.forEach(function (sheetName) {
                                                    var roa = X.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                                                    if (roa.length > 0) {
                                                        result[sheetName] = roa;
                                                    }
                                                });
                                                return result;
                                            }
                                            $('#FileSupport').change(function (event) {
                                                var fileValid = false;
                                                fileValid = endFile($('#FileSupport').val());

                                                if (fileValid) {
                                                    var files = event.target.files;
                                                    var f = files[0];
                                                    {
                                                        var reader = new FileReader();
                                                        var name = f.name;
                                                        reader.onload = function (e) {
                                                            var data = e.target.result;
                                                            var arr = fixdata(data);
                                                            wb = X.read(btoa(arr), { type: 'base64' });
                                                            var wb;
                                                            var output = to_json(wb);
                                                            if (output.Sheet1 !== '' && output.Sheet1 !== undefined && output.Sheet1 !== null) {
                                                                $.each(output.Sheet1, function (index, item) {
                                                                    if (item.GiaiTrinh === undefined || item.GiaiTrinh === null || item.GiaiTrinh.trim() === '') {
                                                                        item.GiaiTrinh = null;
                                                                    }
                                                                    if (item.TonThucTe === undefined || item.TonThucTe === null || item.TonThucTe === '') {
                                                                        item.TonThucTe = 0;
                                                                    }
                                                                });
                                                                $('#Details').val(JSON.stringify(output.Sheet1));
                                                                var form = $("form#form-detail");
                                                                form.attr("action", "/Requests/ImportExcelEditer");
                                                                form.submit();
                                                            }
                                                        };
                                                        reader.readAsArrayBuffer(f);
                                                    }
                                                }
                                                $('#FileSupport').val('');

                                            });
                                        }
                                        contructExecl89();
                                    }
                                    colHeaders.push('Giải trình');
                                    columns.push({ data: "button", renderer: actionRenderer });



                                    var actionPaging = function () {
                                        var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                                        if (pages > 1) {
                                            for (i = 1; i <= pages; i++) {
                                                $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                                                $('#PageM' + (i)).on('click', function () {
                                                    $('.PageMX').removeClass('clickPage');
                                                    $(this).addClass('clickPage');
                                                    var page = $(this).attr('data-value') - 1;
                                                    var start = page * pageSize;
                                                    var data = $.grep(dataHandsontable, function (item, index) {
                                                        return index >= start && index < (start + pageSize)
                                                    });
                                                    hot.loadData(data);
                                                });
                                            }
                                        }
                                    };
                                    actionPaging();
                                    var setting = function () {
                                        return {
                                            //=================================Data=======
                                            data: $.grep(dataHandsontable, function (item, index) {
                                                return index < pageSize;
                                            }),
                                            //================================Cols=======
                                            maxCols: dataFull.length,
                                            minCols: dataFull.length,
                                            startCols: dataFull.length,
                                            minSpareCols: 0,
                                            allowInsertColumn: false,
                                            allowRemoveColumn: false,
                                            autoColumnSize: true,
                                            autoWrapCol: true,
                                            columnSorting: false,
                                            colWidths: 'undefined',
                                            copyColsLimit: dataFull.length,
                                            currentColClassName: 'currentCol', //currentCol
                                            fixedColumnsLeft: 0,
                                            manualColumnMove: false,
                                            manualColumnResize: true,
                                            viewportColumnRenderingOffset: dataFull.length,
                                            sortIndicator: true,
                                            //================================Rows=======
                                            allowInsertRow: true,
                                            allowRemoveRow: true,
                                            autoRowSize: true,
                                            autoWrapRow: true,
                                            copyRowsLimit: 1000,
                                            currentRowClassName: 'currentRow',
                                            fixedRowsTop: 0,
                                            manualRowMove: false,
                                            manualRowResize: true,
                                            rowHeaders: true,
                                            minSpareRows: 0,
                                            //startRows: 10,
                                            //viewportRowRenderingOffset : 'auto',
                                            //maxRows: dataHandsontable.length,
                                            //minRows: dataHandsontable.length,
                                            //================================Oder=======
                                            allowInvalid: false,
                                            stretchH: 'all',
                                            commentedCellClassName: 'htCommentCell',
                                            comments: true,
                                            contextMenu: false,
                                            copyable: true,
                                            customBorders: false,
                                            debug: false,
                                            disableVisualSelection: true,
                                            enterBeginsEditingBoolean: true,
                                            fillHandle: true,
                                            outsideClickDeselects: true,
                                            fragmentSelection: false,
                                            groups: false,
                                            invalidCellClassName: 'htInvalid',
                                            mergeCells: false,
                                            multiSelect: true,
                                            noWordWrapClassName: 'htNoWrap',
                                            placeholder: false,
                                            placeholderCellClassName: 'htPlaceholder',
                                            readOnlyCellClassName: 'htDimmed',
                                            search: false,
                                            trimWhitespace: true,
                                            undo: true,
                                            formulas: true,
                                            wordWrap: true,
                                            //====================================Oder ==============================================
                                            colHeaders: colHeaders,
                                            columns: columns,
                                        };
                                    };
                                    hot = new Handsontable(container, setting());

                                    function UpdateSettingForSelectApproted() {
                                        if ($.inArray(info.TypeId, [91, 92, 94]) !== -1) {
                                            $.each(hot.getData(), function (index, item) {

                                                if (item.Approved === true) {
                                                    hot.setDataAtCell(index, 0, 'Duyệt');
                                                } else if (item.Approved === false) {
                                                    hot.setDataAtCell(index, 0, 'Chưa duyệt');
                                                } else {
                                                    hot.setDataAtCell(index, 0, '---Chọn---');
                                                };

                                                //if (item.Property5 === 'Online') {
                                                //    hot.setDataAtCell(index, 0, 'Online','not');
                                                //} else if (item.Property5 === 'Offline') {
                                                //    hot.setDataAtCell(index, 0, 'Offline', 'not');
                                                //} else {
                                                //    hot.setDataAtCell(index, 0, '---Chọn---');
                                                //}
                                            });
                                            hot.updateSettings({
                                                minSpareRows: 4,
                                                beforeChange: function (changes, source) {
                                                    if (source == 'not')
                                                        return;

                                                    for (var i = 0; i < changes.length; i++) {
                                                        var row = changes[i][0],
                                                            col = changes[i][1],
                                                            oldValue = changes[i][2],
                                                            newValue = changes[i][3];
                                                        if (col === 'ApprovedSelect' && source === 'edit') {
                                                            var dataAtRow = $.grep(hot.getData(), function (item, index) {
                                                                return index == row;
                                                            });
                                                            if (dataAtRow !== null && dataAtRow !== undefined && dataAtRow !== '') {
                                                                if (newValue == 'Duyệt') {
                                                                    hot.setDataAtRowProp(row, 'Approved', true, 'not')
                                                                } else if (newValue == 'Chưa duyệt') {
                                                                    hot.setDataAtRowProp(row, 'Approved', false, 'not')
                                                                } else {
                                                                    hot.setDataAtRowProp(row, 'Approved', null, 'not')
                                                                }
                                                            }
                                                        };

                                                        //if (col === 'Property5Select' && source === 'edit') {
                                                        //    var dataAtRow = $.grep(hot.getData(), function (item, index) {
                                                        //        return index == row;
                                                        //    });
                                                        //    if (dataAtRow !== null && dataAtRow !== undefined && dataAtRow !== '') {
                                                        //        if (newValue == 'Online') {
                                                        //            hot.setDataAtRowProp(row, 'Property5', 'Online', 'not')
                                                        //        } else if (newValue == 'Offline') {
                                                        //            hot.setDataAtRowProp(row, 'Property5', 'Offline', 'not')
                                                        //        } else {
                                                        //            hot.setDataAtRowProp(row, 'Property5', null, 'not')
                                                        //        }
                                                        //    }
                                                        //};
                                                    }

                                                },

                                            });
                                        }
                                    }
                                    UpdateSettingForSelectApproted();

                                    hot.selectCell(0, 0, 0, 0);
                                    $('#btnSendGiaiTrinh').on('click', function () {
                                        var message = $('#MessageGiaiTrinh').val();
                                        var id = $(this).attr('data-value');
                                        var row = $(this).attr('data-id');

                                        if (message === null || message === undefined || message.trim() === '') {
                                            XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                                            return false;
                                        }
                                        $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                                            if (respone == 1) {
                                                hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                                                $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                                                XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                                            } else {
                                                $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                                                XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                                            }
                                            $('#MessageGiaiTrinh').val('');
                                            $('#modalGiaiTrinh').modal('hide');
                                        });

                                    });
                                });
                            };
                            Cog();

                            $btnComment.on('click', function () {
                                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                $('#ImageValidate').val(checkedVals.join(","));

                                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                });

                                var message = $("#Message").val();

                                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                                });

                                var dataInvalid = [];
                                if (info.TypeId == 89) {
                                    myData = dataHandsontable;
                                    $.each(myData, function (index, item) {
                                        if (item.Quantity1 !== item.Quantity && item.HaveConvertation == 0) {
                                            dataInvalid.push(item);
                                        }
                                    });
                                }
                                if (info.TypeId == 89 && dataInvalid.length > 0) {
                                    XFunction.RenderMessage("error", "Nhập đầy đủ giải trình trước khi thực hiện thao tác khác");
                                    return false;
                                }


                                if (message.length == 0) {
                                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                                    return false;
                                } else {
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/Conversation");
                                    form.submit();
                                }

                            });
                            $btnReply.on('click', function () {

                                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                $('#ImageValidate').val(checkedVals.join(","));

                                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                });

                                var message = $("#Message").val();

                                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                                });

                                if ($.inArray(info.TypeId, [91, 92, 94]) !== -1) {
                                    var dataInvalie = $.grep(myData, function (item, index) {
                                        return item.Approved === null || item.Approved === undefined || item.Approved === ''
                                    });
                                    if (dataInvalie.length !== 0) {
                                        XFunction.RenderMessage("error", "Chưa thao tác chọn duyệt nhân viên :(");
                                        return false;
                                    }
                                };

                                var dataInvalid = [];
                                if (info.TypeId == 89) {
                                    myData = dataHandsontable;
                                    $.each(myData, function (index, item) {
                                        if (item.Quantity1 !== item.Quantity && item.HaveConvertation == 0) {
                                            dataInvalid.push(item);
                                        }
                                    });
                                }
                                if (info.TypeId == 89 && dataInvalid.length > 0) {
                                    XFunction.RenderMessage("error", "Nhập đầy đủ giải trình trước khi thực hiện thao tác khác");
                                    return false;
                                }


                                if (message.length == 0) {
                                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                                    return false;
                                } else {
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/Reply");
                                    form.submit();
                                }

                            });
                            $btnChangeStep.on('click', function () {

                                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                $('#ImageValidate').val(checkedVals.join(","));

                                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                });

                                var message = $("#Message").val();

                                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                                });

                                ////------♦-------♦------- HIỀN.ĐOÀN 19.08.2016 THAY ĐỔI RULE LOẠI 91,92,94
                                if ($.inArray(info.TypeId, [92, 94]) !== -1) {
                                    if ((info.TypeId == 92 && info.StepNo) == 2 || (info.TypeId == 94 && info.StepNo == 2)) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                                        var dataInvalie = $.grep(myData, function (item, index) {
                                            return item.Approved === null || item.Approved === undefined || item.Approved === ''
                                        });
                                        if (dataInvalie.length !== 0) {
                                            XFunction.RenderMessage("error", "Chưa thao tác chọn duyệt nhân viên :(");
                                            return false;
                                        }
                                    }

                                };

                                if (CL.TypeId == 90 && CL.StepNo == 1) {
                                    var flag = true;
                                    for (var i = 0; i < myData.length; i++) {
                                        if (myData[i].Money3.length == 0) {
                                            myData[i].Money3 = null;
                                        }
                                    }
                                    $.each(myData, function (index, item) {
                                        if (item.Money3 != null && item.Money3 != undefined && item.Money3 >= 0) {
                                            return true;
                                        } else {
                                            flag = false;
                                        }
                                    });
                                    if (flag == false) {
                                        XFunction.RenderMessage('error', 'Phải nhập Target tháng ASM nhận');
                                        return;
                                    }
                                }

                                var dataInvalid = [];
                                if (info.TypeId == 89) {
                                    myData = dataHandsontable;
                                    $.each(myData, function (index, item) {
                                        if (item.Quantity1 !== item.Quantity && item.HaveConvertation == 0) {
                                            dataInvalid.push(item);
                                        }
                                    });
                                }
                                if (info.TypeId == 89 && dataInvalid.length > 0) {
                                    XFunction.RenderMessage("error", "Nhập đầy đủ giải trình trước khi thực hiện thao tác khác");
                                    return false;
                                }

                                var ChuyenChucDanhText = 'Tôi đồng ý chịu trách nhiệm các vấn đề xảy ra về việc chuyển chức danh trước khi có kết quả đào tạo';

                                //---------------------- Hiền.Đoàn 22.08.2016 Lấy giá trị [1: duyệt, 0: không duyệt]
                                if ($.inArray(info.TypeId, [92, 94]) !== -1) {

                                    var dataApp = $.grep(myData, function (item, index) {
                                        return item.Approved == 1;
                                    });
                                    //TrungNC3 - 15/12/2017 - Add Check không duyệt thì hoàn tất calllog
                                    var dataNotApp = $.grep(myData, function (item, index) {
                                        return item.Approved == 0;
                                    });
                                    if (dataNotApp.length > 0) {
                                        $('#CheckDuyet_92_94_NotApp').val("0");
                                    }
                                    else {
                                        $('#CheckDuyet_92_94_NotApp').val("1");
                                    }
                                    //TrungNC3 - 15/12/2017 - Add Check không duyệt thì hoàn tất calllog
                                    if (dataApp.length > 0) {
                                        $('#CheckDuyet_92_94').val("1");
                                    }
                                    else {
                                        $('#CheckDuyet_92_94').val("0");
                                    }

                                    if ($('#CheckDuyet_92_94').val() == "1") {
                                        //▼	Edit - VietMXH - 17/07/2019 - Thêm mới/Chuyển Chức danh==================================================
                                        var l_ReturnFalse = true;
                                        $.each(myData, function (index, item) {
                                            $.ajax({
                                                async: false,
                                                url: "/Requests/ThemChuyenChucDanh__CheckTrungChucDanhCu",
                                                type: "GET",
                                                data: { p_EmpCode: item.EmpCode, p_JobTitleCode: item.JobCode2 },
                                                error: function () {
                                                    XFunction.RenderMessage("error", "Lỗi: /Requests/ThemChuyenChucDanh__CheckTrungChucDanhCu!");
                                                },
                                                success: function (p_ActionResult) {
                                                    if (!!p_ActionResult && p_ActionResult.length > 0) {
                                                        l_ReturnFalse = false;
                                                        if (!!p_ActionResult[0].Result && p_ActionResult[0].Result == 1) {
                                                            $('#TrungChucDanhCu').val("Co");
                                                        }
                                                        else {
                                                            $('#TrungChucDanhCu').val("Khong");
                                                        }
                                                    }
                                                    else {
                                                        XFunction.RenderMessage("error", "Check Trùng Chức danh cũ: Không có kết quả!");
                                                    }
                                                }
                                            });
                                        });
                                        if (l_ReturnFalse == true) {
                                            return false;
                                        }
                                        //▲	Edit - VietMXH - 17/07/2019 - Thêm mới/Chuyển Chức danh==================================================
                                    }

                                    //===================
                                    if ((info.TypeId == 92 && CL.StepNo == 3) || (info.TypeId == 94 && CL.StepNo == 3)) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                                        var dataTime2 = $.grep(myData, function (item, index) {
                                            return (item.Time2 != null && item.Time2 != undefined && item.Time2 != '')
                                        });
                                        if (dataTime2.length == 0) {
                                            XFunction.RenderMessage("error", "Ngày bắt đầu đào tạo không được rỗng!");
                                            return false;
                                        }
                                        var dataTime3 = $.grep(myData, function (item, index) {
                                            return (item.Time3 != null && item.Time3 != undefined && item.Time3 != '')

                                        });
                                        if (dataTime3.length == 0) {
                                            XFunction.RenderMessage("error", "Ngày kết thúc đào tạo không được rỗng!");
                                            return false;
                                        }

                                        var CompareDate = $.grep(myData, function (item, index) {

                                            var dateVar = item.Time2;
                                            var dsplit = dateVar.split("/");
                                            var d = new Date(dsplit[2], dsplit[1] - 1, dsplit[0]);
                                            var nextDate = new Date(d.getFullYear(), d.getMonth(), d.getDate());

                                            var dateVar_ = item.Time3;
                                            var dsplit_ = dateVar_.split("/");
                                            var d_ = new Date(dsplit_[2], dsplit_[1] - 1, dsplit_[0]);
                                            var nextDate_ = new Date(d_.getFullYear(), d_.getMonth(), d_.getDate());

                                            return (nextDate_ >= nextDate);

                                        });
                                        if (CompareDate.length == 0) {
                                            XFunction.RenderMessage("error", "Ngày kết thúc đào tạo phải bằng hoặc lớn hơn ngày bắt đầu đào tạo!");
                                            return false;
                                        }


                                        var Property5 = $.grep(myData, function (item, index) {
                                            return (item.Property5 != null && item.Property5 != undefined && item.Property5 != '')

                                        });
                                        if (Property5.length == 0) {
                                            XFunction.RenderMessage("error", "Vui lòng chọn hình thức đào tạo!");
                                            return false;
                                        }
                                    };
                                    var dataAppCheckDate = $.grep(myData, function (item, index) {
                                        return (item.Time2 != '' && item.Time2 != null && item.Time2 != undefined) && (item.Time2 == item.Time3);
                                    });
                                    $.each(myData, function (index, item) {
                                        if (dataAppCheckDate.length > 0) {
                                            //  item.Time1 = item.Time2;
                                            $('#CheckNgayBDBangNgayKT').val("Bang");
                                        } else {
                                            $('#CheckNgayBDBangNgayKT').val("KhongBang");
                                        }
                                    });


                                    //=============== Xác nhận của ASM
                                    if ((info.TypeId == 92 && CL.StepNo == 4) || (info.TypeId == 94 && CL.StepNo == 4)) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                                        var XacNhan = $.grep(myData, function (item, index) {
                                            return (item.Property6 != null && item.Property6 != undefined && item.Property6 != '')
                                        });
                                        if (XacNhan.length == 0) {
                                            XFunction.RenderMessage("error", "ASM vui lòng chọn ghi chú!");
                                            return false;
                                        }

                                        $.each(myData, function (index, item) {
                                            if (item.Property6 == ChuyenChucDanhText) {
                                                $('#GhiChuCuaASM').val("ChuyenChucDanh");
                                                //  item.Time1 = item.Time2;
                                            }
                                            else {
                                                $('#GhiChuCuaASM').val("DaoTao");
                                            }
                                        });
                                    };


                                };
                                $('#Details').val(JSON.stringify(myData));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/ChangeStep");
                                form.submit();

                            });
                            $btnComplete.on('click', function () {

                                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                $('#ImageValidate').val(checkedVals.join(","));

                                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                });

                                var message = $("#Message").val();

                                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                                });
                                if ($.inArray(info.TypeId, [91, 92, 94]) !== -1) {
                                    var dataInvalie = $.grep(myData, function (item, index) {
                                        return item.Approved === null || item.Approved === undefined || item.Approved === ''
                                    });
                                    if (dataInvalie.length !== 0) {
                                        XFunction.RenderMessage("error", "Chưa thao tác chọn duyệt nhân viên :(");
                                        return false;
                                    }
                                };

                                if (CL.TypeId == 90 && CL.StepNo == 2) {
                                    var flag = true;
                                    for (var i = 0; i < myData.length; i++) {
                                        if (myData[i].Money4.length == 0) {
                                            myData[i].Money4 = null;
                                        }
                                    }
                                    $.each(myData, function (index, item) {
                                        if (item.Money4 != null && item.Money4 != undefined && item.Money4 >= 0) {
                                            return true;
                                        } else {
                                            flag = false;
                                        }
                                    });
                                    if (flag == false) {
                                        XFunction.RenderMessage('error', 'Phải nhập Target tháng RSM chốt');
                                        return;
                                    }
                                }
                                if (CL.TypeId == 65 && CL.StepNo == 2) {
                                    var lineNotHaveComment = $.grep(myData, function (item, index) {
                                        return item.HaveConvertation == 0 || item.HaveConvertation == null || item.HaveConvertation == undefined || item.HaveConvertation == ''
                                    });
                                    if (lineNotHaveComment.length > 0) {
                                        XFunction.RenderMessage('error', 'Phải nhập hết giải trình trước khi hoàn tất');
                                        return;
                                    }
                                }

                                var dataInvalid = [];
                                if (info.TypeId == 89) {
                                    myData = dataHandsontable;
                                    $.each(myData, function (index, item) {
                                        if (item.Quantity1 !== item.Quantity && item.HaveConvertation == 0) {
                                            dataInvalid.push(item);
                                        }
                                    });
                                }
                                if (info.TypeId == 89 && dataInvalid.length > 0) {
                                    XFunction.RenderMessage("error", "Nhập đầy đủ giải trình trước khi thực hiện thao tác khác");
                                    return false;
                                }

                                var ChuyenChucDanhText = 'Tôi đồng ý chịu trách nhiệm các vấn đề xảy ra về việc chuyển chức danh trước khi có kết quả đào tạo';
                                //=============== Xác nhận của ASM
                                if ((info.TypeId == 92 && CL.StepNo == 5) || (info.TypeId == 94 && CL.StepNo == 5)) {//Add - TrungNC3 - 10/11/2017 - Thêm chức danh Thêm chức danh
                                    var XacNhan = $.grep(myData, function (item, index) {
                                        return (item.Property7 != null && item.Property7 != undefined && item.Property7 != '')
                                    });
                                    if (XacNhan.length == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn kết quả đào tạo!");
                                        return false;
                                    }
                                    $.each(myData, function (index, item) {
                                        //---------- Đạt vào chuyển chức danh
                                        if (item.Property7 == 'Đạt' && item.Property6 == ChuyenChucDanhText) {
                                            item.Property7 = 'Đạt';
                                            $('#XacNhan').val("DatVaChuyenChucDanh");

                                        }
                                        //----------- Không đạt và chuyển chức danh
                                        else if (item.Property7 == 'Không Đạt' && item.Property6 == ChuyenChucDanhText) {
                                            $('#XacNhan').val("KhongDatVaChuyenChucDanh");

                                            var dateVar = item.Time3;
                                            var dsplit = dateVar.split("/");
                                            var d = new Date(dsplit[2], dsplit[1] - 1, dsplit[0]);
                                            var nextDate_ = new Date(d.getFullYear(), d.getMonth(), d.getDate() + 1);

                                            var now = new Date(nextDate_);
                                            var day = (now.getDate() < 10) ? '0' + now.getDate() : now.getDate();
                                            var month = ((now.getMonth() + 1) < 10) ? '0' + (now.getMonth() + 1) : (now.getMonth() + 1);
                                            var oneDay = day + "/" + month + "/" + (now.getYear() + 1900);

                                            //  item.Time1 = oneDay;
                                        }
                                        //----------- Đạt và đào tạo
                                        else if (item.Property7 == 'Đạt' && item.Property6 != ChuyenChucDanhText) {
                                            item.Property7 = 'Đạt';
                                            $('#XacNhan').val("DatVaDaoTao");

                                            var dateVar = item.Time3;
                                            var dsplit = dateVar.split("/");
                                            var d = new Date(dsplit[2], dsplit[1] - 1, dsplit[0]);
                                            var nextDate_ = new Date(d.getFullYear(), d.getMonth(), d.getDate() + 1);

                                            var now = new Date(nextDate_);
                                            var day = (now.getDate() < 10) ? '0' + now.getDate() : now.getDate();
                                            var month = ((now.getMonth() + 1) < 10) ? '0' + (now.getMonth() + 1) : (now.getMonth() + 1);
                                            var oneDay = day + "/" + month + "/" + (now.getYear() + 1900);

                                            //  item.Time1 = oneDay;
                                        }
                                        //--------- Không đạt và đào tạo
                                        else if (item.Property7 == 'Không Đạt' && item.Property6 != ChuyenChucDanhText) {
                                            item.Property7 = 'Không Đạt';
                                            $('#XacNhan').val("KhongDatVaDaoTao");
                                        }
                                    });
                                };

                                $('#Details').val(JSON.stringify(myData));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Complete");
                                form.submit();

                            });
                        };
                        responeHaveData();
                    } else {
                        XFunction.RenderMessage('error', 'Chưa cấu hình cho loại này');
                        return false;
                    }
                });
            } else {
                if (info.TypeId == 45) {
                    XFunction.RenderSystemTreeOfType();
                    $('#TypeShow').change(function () {
                        XFunction.RenderSystemTreeOfType();
                        if ($('#TypeShow').val() == 45) {
                            $.each(dataSystemTree, function (index, item) {
                                if (requestInfo.GroupId == item.Id) {
                                    $('#Subject').val(item.Name);
                                    $('#SubjectId').val(item.Id);
                                }
                            });
                        }
                    });
                    $('#editTypeError').click(function () {
                        if ($('#TypeShow').val() == 45 && ($('#SubjectId').val() == '' || $('#SubjectId').val() == undefined || $('#SubjectId').val() == null)) {
                            XFunction.RenderMessage('error', 'Vui lòng chọn lọai hệ thống'); return;
                        }
                        var tt = titleOfDetail.split("-");
                        tt[0] = $("#TypeShow option:selected").text();
                        tt[1] = $('#Subject').val();
                        var st = tt.join(' - ');
                        titleOfDetail = st;
                        $.get('/Requests/EditErrorType_45', {
                            requestId: info.Id, typeId: $('#TypeShow').val(), title: titleOfDetail,
                            groupId: $('#SubjectId').val(), ErrorCode: $('#ErrorsSupport').val()
                        }, function (data) {
                            if (data !== null && data !== undefined && data !== '' && data == 1) {
                                location.reload();
                                XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                $('#titleX').empty();
                                $('#titleX').html(titleOfDetail);
                                $('#dialog-edit-type-error').modal('hide');
                            }
                        });
                    });
                }
                else if (info.TypeId == 19) {
                    xData.getRegionTree();
                    xData.Render_Region_Tree();
                    if (CL.TimeGolive != '' && CL.TimeGolive != null && CL.TimeGolive != undefined) {
                        var date = new Date(CL.TimeGolive);
                        var dateTimeExtend = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                        $('#dateExtend').val(dateTimeExtend.toDateInputValue());
                    }

                    $('#hiddenExtend_19').show();

                    //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại
                    $('#myModal').modal('show');
                    getNVKN();
                    $('#myModal').modal('hide');
                    if ($.inArray(Jobs, ['00004', '00005', '00256', '00257', '00447', '00448', '00407', '00644', '00514', '00241']) != -1) {
                        $('#hddbtnExTime_19').show();
                    }
                    else {
                        if (FlagAssignerStep1 == 'False') {
                            $("#dateExtend").prop("readonly", true);
                            $('#hddbtnExTime_19').hide();
                        }
                        else {
                            $('#hddbtnExTime_19').show();
                            $("#dateExtend").prop("readonly", false);
                        }
                    }
                }

                var renderevenOnbutton = function () {
                    $btnComment.on('click', function () {
                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        var message = $("#Message").val();

                        var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                        });

                        //▼	Edit - VietMXH - 17/07/2018 - Tối ưu==================================================
                        //▼ Add - TrungNC3 - 27/11/2017 - Chặn thao tác CallLog loại 19 mất CC==============
                        if (info.TypeId == 19) {
                            if (myDataCc.length == 0) {
                                XFunction.RenderMessage("error", "CallLog mất thông tin CC, vui lòng gửi thông tin cho nhà quản trị =((");
                                return false;
                            }
                        }
                        //▲ Add - TrungNC3 - 23/11/2017 - Chặn thao tác CallLog loại 19 mất CC==============

                        //ChuongNT3 - 12/07/2018 - loại 157 - tắt nút hoàn tất
                        else if (info.TypeId == 157) {
                            if (info.Status == 4) {
                                XFunction.RenderMessage("error", "Calllog hoàn tất không thể trao đổi");
                                return;
                            }
                        }
                        //▲	Edit - VietMXH - 17/07/2018 - Tối ưu==================================================

                        if (message.length == 0) {
                            XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                            return false;
                        }

                        //  ===Trao đổi===
                        if (info.TypeId == 20) {
                            //============== Hiền. Đoàn 03.10.2016 Kiểm tra hình up lại
                            var CheckIamges = false;
                            $.get('/ReportImages/KiemTraHinhDaDuocDuyetChua', { RequestId: CL.Id }, function (data) {
                                if (data.length > 0) {
                                    $.each(data, function (index, item) {
                                        if (item.Result == 1) {
                                            CheckIamges = true;
                                        }
                                        else {
                                            CheckIamges = false;
                                        }
                                    });
                                    if (CheckIamges == true && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                                        XFunction.RenderMessage("error", "Vui lòng up lại đầy đủ những hình ảnh bị từ chối!");
                                        return false;
                                    }
                                    else {
                                        $('#Details').val(JSON.stringify(''));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/Conversation");
                                        form.submit();
                                    }
                                }
                            });
                        }
                        else {
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                    });

                    $btnReply.on('click', function () {

                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));
                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        var message = $("#Message").val();

                        var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                        });

                        //▼ Add - TrungNC3 - 27/11/2017 - Chặn thao tác CallLog loại 19 mất CC==============
                        if (info.TypeId == 19 && myDataCc.length == 0) {
                            XFunction.RenderMessage("error", "CallLog mất thông tin CC, vui lòng gửi thông tin cho nhà quản trị =((");
                            return false;
                        }
                        //▲ Add - TrungNC3 - 23/11/2017 - Chặn thao tác CallLog loại 19 mất CC==============

                        if (info.TypeId == 45) {
                            if (message.length == 0) {
                                XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                                return false;
                            } else if (info.TypeId == 45 && (requestInfo.ErrorCode == '' || $.inArray(requestInfo.ErrorCode, ['8', '9']) == -1)) {
                                XFunction.RenderMessage("error", "Phải chọn loại lỗi trước khi trả lời");
                                return false;
                            } else if (info.TypeId == 45 && $('#SubjectId').val() == '' || $('#SubjectId').val() == undefined || $('#SubjectId').val() == null) {
                                XFunction.RenderMessage("error", "Phải chọn loại hệ thống");
                                return false;
                            }
                            else {
                                $('#Details').val(JSON.stringify(''));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Reply");
                                form.submit();
                            }
                        }
                        if (info.TypeId == 20) {
                            //============== Hiền. Đoàn 03.10.2016 Kiểm tra hình up lại
                            var CheckIamges = false;
                            $.get('/ReportImages/KiemTraHinhDaDuocDuyetChua', { RequestId: CL.Id }, function (data) {
                                if (data.length > 0) {
                                    $.each(data, function (index, item) {
                                        if (item.Result == 1) {
                                            CheckIamges = true;
                                        }
                                        else {
                                            CheckIamges = false;
                                        }
                                    });
                                    if (CheckIamges == true && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                                        XFunction.RenderMessage("error", "Vui lòng up lại đầy đủ những hình ảnh bị từ chối!");
                                        return false;
                                    }
                                    else {
                                        $('#Details').val(JSON.stringify(''));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/Reply");
                                        form.submit();
                                    }
                                }
                            });

                        }
                        else {
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Reply");
                            form.submit();
                        }

                    });
                    $btnChangeStep.on('click', function () {

                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        var message = $("#Message").val();

                        var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                        });

                        //▼ Add - TrungNC3 - 27/11/2017 - Chặn thao tác CallLog loại 19 mất CC==============
                        if (info.TypeId == 19 && myDataCc.length == 0) {
                            XFunction.RenderMessage("error", "CallLog mất thông tin CC, vui lòng gửi thông tin cho nhà quản trị =((");
                            return false;
                        }
                        //▲ Add - TrungNC3 - 23/11/2017 - Chặn thao tác CallLog loại 19 mất CC==============

                        $('#Details').val(JSON.stringify(''));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/ChangeStep");
                        form.submit();

                    });

                    $btnComplete.on('click', function () {
                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        var message = $("#Message").val();

                        var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                        });

                        //▼	Edit - VietMXH - 17/07/2018 - Tối ưu==================================================
                        //▼ Add - TrungNC3 - 27/11/2017 - Chặn thao tác CallLog loại 19 mất CC==============
                        if (info.TypeId == 19) {
                            if (myDataCc.length == 0) {
                                XFunction.RenderMessage("error", "CallLog mất thông tin CC, vui lòng gửi thông tin cho nhà quản trị =((");
                                return false;
                            }
                        }
                        //▲ Add - TrungNC3 - 23/11/2017 - Chặn thao tác CallLog loại 19 mất CC==============

                        //ChuongNT3 - 12/07/2018 - loại 157 - tắt nút hoàn tất
                        else if (info.TypeId == 157) {
                            if (info.Status == 4) {
                                XFunction.RenderMessage("error", "Calllog đã hoàn tất");
                                return;
                            }
                        }
                        //▲	Edit - VietMXH - 17/07/2018 - Tối ưu==================================================

                        //  ===Hoàn tất===
                        if (info.TypeId == 20) {
                            //============== Hiền. Đoàn 03.10.2016 Kiểm tra hình up lại
                            var CheckIamges = false;
                            $.get('/ReportImages/KiemTraHinhDaDuocDuyetChua', { RequestId: CL.Id }, function (data) {
                                if (data.length > 0) {
                                    $.each(data, function (index, item) {
                                        if (item.Result == 1) {
                                            CheckIamges = true;
                                        }
                                        else {
                                            CheckIamges = false;
                                        }
                                    });
                                    if (CheckIamges == true && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                                        XFunction.RenderMessage("error", "Vui lòng up lại đầy đủ những hình ảnh bị từ chối!");
                                        return false;
                                    }
                                    else {
                                        $('#Details').val(JSON.stringify(''));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/Reply");
                                        form.submit();
                                    }
                                }
                            });
                        }
                        else {
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Complete");
                            form.submit();
                        }
                    });

                    //ChuongNT3 - 23/08/2018 - thêm nhân viên khiếu nại
                    $('#btnUpdateExTime').on('click', function () {
                        $.get('/Requests/GetDetailsPhanLoai', { RequestId: requestInfo.Id }, function (response2) {
                            if (response2 != null && response2 != undefined && response2 != "") {

                                //ChuongNT3 - 31/08/2018 - tách cskh
                                if (response2[0].Property1 == "Thái độ" && response2[0].Property3 == "Thái độ") {
                                    if ($.inArray(Jobs, ['00080', '00207', '00285', '00349', '00502', '00350', '00501', '00508', '00501', '00511']) != -1) {
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/UpdateExtendTime_19");
                                        form.submit();
                                    }
                                    else {
                                        if ($('#nvKhieuNai_19').val() != '' && $('#nvKhieuNai_19').val() != null && $('#nvKhieuNai_19').val() != undefined) {
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/UpdateExtendTime_19");
                                            form.submit();
                                        }
                                        else {
                                            XFunction.RenderMessage("error", "Phải có ít nhất 1 nhân viên vi phạm");
                                            return false;
                                        }
                                    }
                                }
                                else {
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/UpdateExtendTime_19");
                                    form.submit();
                                }
                            }
                        });
                    });
                };
                renderevenOnbutton();
            }
        },
        getRegionTree: function () {
            $('#myModal').modal('show');
            $.get('/Assignments/getRegion', null, function (response) {
                dataRegionTree = response;
                var listShop = [];
                var listRegion = [];
                $('#region-tree').on('changed.jstree', function (e, data) {
                    var listSelected = data.selected;
                    $.each(listSelected, function (index, item) {

                        if (item.toString().charAt(0) == 's') {
                            item = item.toString().replace('s', '');
                            listShop.push(item);
                        } else {
                            listRegion.push(item);
                        }
                    });
                    if (listShop.length > 0) {
                        $('#shopIdList').val(listShop);
                        if (listShop.length == 1) {
                            var maShop = 's' + listShop[0];
                            var shop = $.grep(response, function (item, index) {
                                return item.id == maShop;
                            });
                            $('#region').val(shop[0].text);
                        }
                        else {
                            $('#region').val('Bạn đã chọn ' + listShop.length + " shop");
                        }

                    } else {
                        $('#shopIdList').val('');
                        $('#region').val('Tất cả shop');
                    }
                    if (listRegion.length > 0) {
                        $('#regionIdlist').val(listRegion);
                    } else {
                        $('#regionIdlist').val('');
                    }

                    listShop = [];
                    listRegion = [];
                }).jstree({
                    'core': {
                        'data': response,
                    },
                    "plugins": ["checkbox", "wholerow", "search", "types"],
                    "types": {
                        "region": {
                            "icon": "/assets/images/Maps-Pin-Place-icon.png"
                        },
                        "shop": {
                            "icon": "/assets/images/homeicon.png"
                        }
                    },
                });
                $('#myModal').modal('hide');
            });
        },
        Render_Region_Tree: function () {
            $('#region-tree-g').hide();
            $('#region').click(function () {
                $('#region-tree-g').toggle();
                $('#searchRegion').focus();
            });
            $("#refreshRegion").click(function () {
                xData.Refresh_Region();
            });
            var to = false;
            $('#searchRegion').keyup(function () {
                if (to) { clearTimeout(to); }
                to = setTimeout(function () {
                    var v = $('#searchRegion').val();
                    $('#region-tree').jstree(true).search(v);
                }, 250);
            });
            //$('#searchRegion').keydown(function (e) {
            //    var txtSearchData = $(this).val();
            //    var dataSearch = $.grep(dataRegionTree, function (item, index) {
            //        return item.text.toLowerCase().indexOf(txtSearchData) >= 0;
            //    });
            //    console.log(dataSearch);
            //    $('#region-tree').jstree(true).settings.core.data = dataSearch;
            //    $('#region-tree').jstree(true).refresh();
            //});
        },
        Refresh_Region: function () {
            $('#region').val('Tất cả vùng miền');
            $('#shopIdList').val('');
            $('#searchRegion').val('');
            $('#region-tree').jstree("deselect_all");
            $('#region-tree').jstree("close_all");
        },
    }

    //===============================================================================

    XFunction.LoadPageDetail(requestInfo);
    XFunction.RenderSmallDate();

    /*__contructer__for */

    //▼  Add - LuanNT44 - 13/09/2018 - Loại 24 - Sữa chữa CSVC
    function contruct_24() {
        $btnComment.on('click', function () {
            var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
            });
            var message = $('#Message').val();
            if (message.length == 0) {
                XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
            }
            else {
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            }
        });

        $btnReply.on('click', function () {
            var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
            $('#ImageValidate').val(checkedVals.join(","));
            var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
            });
            var message = $("#Message").val();
            var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
            });
            $.get('/Requests/CheckConversationCSVC', {
                requestId: CL.Id
            }, function (data) {
                if (data !== null && data !== undefined && data !== '' && data == 0 && CL.TypeId == 24) {
                    XFunction.RenderMessage('error', 'Phải cập nhật hướng xử lý trước khi trả lời  :(');
                    return;
                } else if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                }
                else {
                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }
            });

        });
    };
    //▲  Add - LuanNT44 - 13/09/2018 - Loại 24 - Sữa chữa CSVC

    function contruct_28() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {

            //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================           
            var dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isOldStepAssigner: false, isGroupOldStepAssigner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isOldStepAssigner = true;
                if (item == 'groupOldStepAssigner')
                    permisstion.isGroupOldStepAssigner = true;
            });
            var l_Is_Assiner = false, l_Is_Assiner_Buoc_1_2 = false, l_Is_Assiner_Buoc_1_3 = false, l_Is_Assiner_Buoc_2 = false, l_Is_Assiner_Buoc_3 = false;
            if (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) {
                l_Is_Assiner = true;
                switch (CL.StepNo) {
                    case 1:
                        if (CL.Status < 4) {
                            l_Is_Assiner_Buoc_1_2 = true;
                            l_Is_Assiner_Buoc_1_3 = true;
                        }
                        break;
                    case 2:
                        l_Is_Assiner_Buoc_2 = true;
                        break;
                    case 3:
                        if (CL.Status < 4) {
                            l_Is_Assiner_Buoc_1_3 = true;
                            l_Is_Assiner_Buoc_3 = true;
                        }
                        break;
                    default:
                        break;
                }
            }
            else if (permisstion.isOldStepAssigner || permisstion.isGroupOldStepAssigner) {
                if (CL.StepNo == 2) {
                    l_Is_Assiner_Buoc_1_2 = true;
                }
            }
            var l_Is_AllowUpdate_SoPhuNH = false;
            if (!!dataHandsontable[0].Is_AllowUpdate_SoPhuNH && dataHandsontable[0].Is_AllowUpdate_SoPhuNH == 1) {
                l_Is_AllowUpdate_SoPhuNH = true;
            }
            if (l_Is_AllowUpdate_SoPhuNH) {
                if (l_Is_Assiner_Buoc_1_2) { } else { l_Is_AllowUpdate_SoPhuNH = false }
            }
            if (l_Is_Assiner_Buoc_1_3)
                $('#comment').hide();
            if (!l_Is_Assiner_Buoc_2)
                $('#btnSendGiaiTrinh').hide();
            var l__Data__NguyenNhanChenhLech = [], l__Data__NguyenNhanChenhLech__Name = [''];
            var f__Get__NguyenNhanChenhLech = function () {
                $.ajax({
                    async: false,
                    url: "/Requests/Details__Quy__NguyenNhanChenhLech_Get",
                    type: "GET",
                    data: null,
                    error: function () {
                        XFunction.RenderMessage("error", "Lỗi: /Requests/Details__Quy__NguyenNhanChenhLech_Get!");
                    },
                    success: function (p_ActionResult) {
                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                            p_ActionResult.forEach(function (p_Item) {
                                l__Data__NguyenNhanChenhLech.push({
                                    Code: p_Item.Code,
                                    Name: p_Item.Name
                                });
                                l__Data__NguyenNhanChenhLech__Name.push(p_Item.Name);
                            });
                        }
                    }
                });
            };
            f__Get__NguyenNhanChenhLech();
            var l__Data__HuongXuLyKTHO = [], l__Data__HuongXuLyKTHO__Name = [''];
            var f__Get__HuongXuLyKTHO = function () {
                $.ajax({
                    async: false,
                    url: "/Requests/Details__Quy__HuongXuLyKTHO_Get",
                    type: "GET",
                    data: null,
                    error: function () {
                        XFunction.RenderMessage("error", "Lỗi: /Requests/Details__Quy__HuongXuLyKTHO_Get!");
                    },
                    success: function (p_ActionResult) {
                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                            p_ActionResult.forEach(function (p_Item) {
                                l__Data__HuongXuLyKTHO.push({
                                    Code: p_Item.Code,
                                    Name: p_Item.Name
                                });
                                l__Data__HuongXuLyKTHO__Name.push(p_Item.Name);
                            });
                        }
                    }
                });
            };
            f__Get__HuongXuLyKTHO();
            //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getSourceData(), function (item, index) {
                    return index == row;
                });
                var $button = '';
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else if (data[0].HaveConvertation == 0) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                if ($button !== '') {

                    //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                    if (l_Is_Assiner_Buoc_2 || l_Is_Assiner) {
                        $button.click(function () {
                            $('#MessageGiaiTrinh').val('');
                            $('#modalBodyGiaitrinh').empty();
                            var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                            $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                            if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                                $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                    if (respone !== undefined && respone !== '' && respone !== null) {
                                        var inner = '';
                                        $.each(respone, function (index, item) {
                                            inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                                '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                                ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                        });
                                        $('#modalBodyGiaitrinh').html(inner);
                                        $('#modalBodyGiaitrinh').show();
                                    } else {
                                        $('#modalBodyGiaitrinh').hide();
                                    }
                                    $('#modalGiaiTrinh').modal('show');
                                });
                            }
                        });
                    } else {
                        $button.click(function () {
                            XFunction.RenderMessage('error', 'KTCH phải nhập giải trình số tiền chênh lệch!');
                        });
                    }
                    //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                }

                $(td).empty().append($button);
            };

            var l__ColHeaders__Arr = [
                'Money1', 'Money4', 'Money3',

                //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                'NguyenNhanChenhLech', 'HuongXuLyCuaKTHO',
                //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                'Money2', 'button',

                //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                'SoSO', 'SoTienTruyThu',
                //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                'ImageReceipt'];
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 23,
                    minCols: 23,
                    startCols: 23,
                    minSpareCols: 0,
                    columnSorting: false,
                    currentColClassName: 'currentCol',
                    //================================Rows=======
                    allowInsertRow: false,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    currentRowClassName: 'currentRow',
                    rowHeaders: true,
                    minSpareRows: 4,
                    //================================Oder=======
                    allowInvalid: false,
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    hiddenColumns: {
                        columns: [
                            l__ColHeaders__Arr.indexOf('button'),
                            l__ColHeaders__Arr.indexOf('NguyenNhanChenhLech'),
                            l__ColHeaders__Arr.indexOf('HuongXuLyCuaKTHO'),
                            l__ColHeaders__Arr.indexOf('SoSO'),
                            l__ColHeaders__Arr.indexOf('SoTienTruyThu')
                        ],
                        indicators: true
                    },
                    //====================================Oder ==============================================
                    colHeaders: [
                        'Số tiền quỹ</br>trên hệ thống', 'Tiền trên sổ phụ</br>ngân hàng (KTHO)', 'Chênh lệch',

                        //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        'Nguyên nhân chênh lệch', 'Hướng xử lý của KTHO',
                        //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                        'Số tiền chờ xử lý', 'Nội dung</br>trao đổi',

                        //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        'Số SO hoặc<br>Số phiếu thu', 'Số tiền truy thu',
                        //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                        'Hình ảnh</br>Phiếu nộp tiền'
                    ],
                    columns: [

                        //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        { data: 'Money1', type: 'numeric', width: 150, format: '0,0', className: 'htRight', readOnly: true },
                        {
                            data: 'Money4', type: 'numeric', width: 150, format: '0,0', className: 'htRight', validator: Validater.number, readOnly: !l_Is_AllowUpdate_SoPhuNH,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                Handsontable.NumericRenderer.apply(this, arguments);
                                if (l_Is_AllowUpdate_SoPhuNH) {
                                    td.style.background = 'lightyellow';
                                }
                            }
                        },
                        { data: 'Money3', type: 'numeric', width: 150, format: '0,0', className: 'htRight', readOnly: true },
                        {
                            data: 'NguyenNhanChenhLech', type: 'dropdown', source: l__Data__NguyenNhanChenhLech__Name, width: 300, className: 'htLeft', readOnly: !l_Is_Assiner_Buoc_2,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                Handsontable.AutocompleteCell.renderer.apply(this, arguments);
                                if (l_Is_Assiner_Buoc_2) {
                                    td.style.background = 'lightyellow';
                                }
                            }
                        },
                        {
                            data: 'HuongXuLyCuaKTHO', type: 'dropdown', source: l__Data__HuongXuLyKTHO__Name, width: 250, className: 'htLeft', readOnly: !l_Is_Assiner_Buoc_3,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                Handsontable.AutocompleteCell.renderer.apply(this, arguments);
                                if (l_Is_Assiner_Buoc_3) {
                                    td.style.background = 'lightyellow';
                                }
                            }
                        },
                        {
                            data: 'Money2', type: 'numeric', width: 150, format: '0,0', className: 'htRight', validator: Validater.number, readOnly: !l_Is_Assiner_Buoc_1_3,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                Handsontable.NumericRenderer.apply(this, arguments);
                                if (l_Is_Assiner_Buoc_1_3) {
                                    td.style.background = 'lightyellow';
                                }
                            }
                        },
                        { data: "button", width: 75, renderer: actionRenderer, readOnly: !l_Is_Assiner_Buoc_2 },
                        {
                            data: 'SoSO', type: 'text', width: 100, className: 'htLeft', readOnly: !l_Is_Assiner_Buoc_3,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                Handsontable.renderers.TextRenderer.apply(this, arguments);
                                if (l_Is_Assiner_Buoc_3) {
                                    td.style.background = 'lightyellow';
                                }
                            }
                        },
                        {
                            data: 'SoTienTruyThu', type: 'numeric', width: 150, format: '0,0', className: 'htRight', validator: Validater.number, readOnly: !l_Is_Assiner_Buoc_3,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                Handsontable.NumericRenderer.apply(this, arguments);
                                if (l_Is_Assiner_Buoc_3) {
                                    td.style.background = 'lightyellow';
                                }
                            }
                        },
                        //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                        {
                            data: 'ImageReceipt', type: 'text', width: 100, className: 'htLeft', readOnly: true,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var $image = '';
                                var l__ImageReceipt = instance.getDataAtRowProp(row, 'ImageReceipt');
                                if (!!l__ImageReceipt) {
                                    $image = $('<i class="fa fa-picture-o" style="cursor: pointer; color:Green;" title="Xem Hình ảnh Phiếu nộp tiền"></i>');
                                    $image.click(function () {
                                        $('#pop__WaitDialog').modal('show');

                                        window.open(l__ImageReceipt, '_blank');

                                        $('#pop__WaitDialog').modal('hide');
                                    });
                                }
                                $(td).empty().append(($image != '') ? ($image) : (''));
                            }
                        },
                    ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        var instance = this;
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            var plugin = hot.getPlugin('hiddenColumns');
                            if (col == 'Money4') {
                                hot.setDataAtRowProp(row, 'Money2', '0', 'not');
                                var tienHeThong = hot.getDataAtRowProp(row, 'Money1');
                                if (tienHeThong >= newValue)
                                    hot.setDataAtRowProp(row, 'Money3', tienHeThong - newValue, 'not');
                                else
                                    hot.setDataAtRowProp(row, 'Money3', newValue - tienHeThong, 'not');

                                if (tienHeThong - newValue == 0) {
                                    plugin.hideColumn(l__ColHeaders__Arr.indexOf('Money2'));
                                }
                                else {
                                    plugin.showColumn(l__ColHeaders__Arr.indexOf('Money2'));
                                }
                                hot.render();
                            }
                        });
                    },
                };
            };

            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            var plugin = hot.getPlugin('hiddenColumns');

            //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
            //  ===Check Bước CL => Ẩn/Hiện col===
            switch (CL.StepNo) {
                case 1:
                    break;
                case 2:
                    plugin.showColumn(
                        l__ColHeaders__Arr.indexOf('button'),
                        l__ColHeaders__Arr.indexOf('NguyenNhanChenhLech')
                    );
                    break;
                case 3:
                    plugin.showColumn(
                        l__ColHeaders__Arr.indexOf('button'),
                        l__ColHeaders__Arr.indexOf('NguyenNhanChenhLech'),
                        l__ColHeaders__Arr.indexOf('HuongXuLyCuaKTHO'),
                        l__ColHeaders__Arr.indexOf('SoSO'),
                        l__ColHeaders__Arr.indexOf('SoTienTruyThu')
                    );
                    break;
                default:
                    break;
            }
            //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

            hot.render();
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        hot.setDataAtRowProp(row, 'HaveConvertation1', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });
            });
            //===========================
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                var dataReturn = [];
                var dataInvalidGiaiTrinhChenh = [];
                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                $.each(myData, function (index, item) {

                    //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                    if (item.HaveConvertation == 0 && item.Money3 > 5000 && CL.StepNo == 2 && l_Is_Assiner_Buoc_2 == true)
                        dataInvalidGiaiTrinhChenh.push(item);
                    //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                });
                if (dataInvalidGiaiTrinhChenh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình số tiền chênh lệch!");
                    return;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $.each(myData, function (index, item) {

                    //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                    var l__NguyenNhanChenhLech = null;
                    if (!!item.NguyenNhanChenhLech) {
                        var l__Data__NguyenNhanChenhLech__ByName = $.grep(l__Data__NguyenNhanChenhLech, function (p_Item, p_Index) {
                            return p_Item.Name == item.NguyenNhanChenhLech
                        });
                        if (!!l__Data__NguyenNhanChenhLech__ByName && l__Data__NguyenNhanChenhLech__ByName.length > 0) {
                            l__NguyenNhanChenhLech = l__Data__NguyenNhanChenhLech__ByName[0].Code;
                        }
                    }
                    var l__HuongXuLyCuaKTHO = null;
                    if (!!item.HuongXuLyCuaKTHO) {
                        var l__Data__HuongXuLyKTHO__ByName = $.grep(l__Data__HuongXuLyKTHO, function (p_Item, p_Index) {
                            return p_Item.Name == item.HuongXuLyCuaKTHO
                        });
                        if (!!l__Data__HuongXuLyKTHO__ByName && l__Data__HuongXuLyKTHO__ByName.length > 0) {
                            l__HuongXuLyCuaKTHO = l__Data__HuongXuLyKTHO__ByName[0].Code;
                        }
                    }
                    //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                    dataReturn.push({
                        Id: item.Id,
                        //Approved: CL.StepNo !== 3 ? null : item.Approved == '1' ? true : false,
                        TienChoXuLy: item.Money2 == '' || item.Money2 == null || item.Money2 == undefined ? 0 : item.Money2,
                        TienChenhLech: item.Money3,
                        //GTTienChenhB1: item.Property2 == '' || item.Property2 == null || item.Property2 == undefined ? null : item.Property2,
                        //GTTienChenhB3: item.Property3 == '' || item.Property3 == null || item.Property3 == undefined ? null : item.Property3,
                        //HXuLy: item.Property1,
                        //NgayHenNop: item.Time1 == '' || item.Time1 == null || item.Time1 == undefined ? null : item.Time1,
                        TienSoPhuNH: item.Money4 == '' || item.Money4 == null || item.Money4 == undefined ? null : item.Money4,

                        //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        NguyenNhanChenhLech: (!!l__NguyenNhanChenhLech ? l__NguyenNhanChenhLech : null),
                        HuongXuLyCuaKTHO: (!!l__HuongXuLyCuaKTHO ? l__HuongXuLyCuaKTHO : null),
                        SoSO: (!!item.SoSO ? item.SoSO : null),
                        SoTienTruyThu: (!!item.SoTienTruyThu ? item.SoTienTruyThu : null)
                        //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                    });
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }
                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataInvalidTienSoPhu = [];
                var dataInvalidGiaiTrinhChenh = [];
                $.each(myData, function (index, item) {
                    if ((item.Money4 == '' || item.Money4 == null || item.Money4 == undefined) && CL.StepNo == 1) {
                        dataInvalidTienSoPhu.push(index + 1);
                    }

                    if (item.HaveConvertation == 0 && item.Money3 > 5000 && CL.StepNo > 1)
                        dataInvalidGiaiTrinhChenh.push(item);
                });
                if (dataInvalidTienSoPhu.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập số tiền trên sổ phụ ngân hàng!");
                    return;
                }
                if (dataInvalidGiaiTrinhChenh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình số tiền chênh lệch!");
                    return;
                }

                $.each(myData, function (index, item) {

                    //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                    var l__NguyenNhanChenhLech = null;
                    if (!!item.NguyenNhanChenhLech) {
                        var l__Data__NguyenNhanChenhLech__ByName = $.grep(l__Data__NguyenNhanChenhLech, function (p_Item, p_Index) {
                            return p_Item.Name == item.NguyenNhanChenhLech
                        });
                        if (!!l__Data__NguyenNhanChenhLech__ByName && l__Data__NguyenNhanChenhLech__ByName.length > 0) {
                            l__NguyenNhanChenhLech = l__Data__NguyenNhanChenhLech__ByName[0].Code;
                        }
                    }
                    var l__HuongXuLyCuaKTHO = null;
                    if (!!item.HuongXuLyCuaKTHO) {
                        var l__Data__HuongXuLyKTHO__ByName = $.grep(l__Data__HuongXuLyKTHO, function (p_Item, p_Index) {
                            return p_Item.Name == item.HuongXuLyCuaKTHO
                        });
                        if (!!l__Data__HuongXuLyKTHO__ByName && l__Data__HuongXuLyKTHO__ByName.length > 0) {
                            l__HuongXuLyCuaKTHO = l__Data__HuongXuLyKTHO__ByName[0].Code;
                        }
                    }
                    //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                    dataReturn.push({
                        Id: item.Id,
                        TienChoXuLy: item.Money2 == '' || item.Money2 == null || item.Money2 == undefined ? 0 : item.Money2,
                        TienChenhLech: item.Money3,
                        TienSoPhuNH: item.Money4 == '' || item.Money4 == null || item.Money4 == undefined ? null : item.Money4,

                        //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        NguyenNhanChenhLech: (!!l__NguyenNhanChenhLech ? l__NguyenNhanChenhLech : null),
                        HuongXuLyCuaKTHO: (!!l__HuongXuLyCuaKTHO ? l__HuongXuLyCuaKTHO : null),
                        SoSO: (!!item.SoSO ? item.SoSO : null),
                        SoTienTruyThu: (!!item.SoTienTruyThu ? item.SoTienTruyThu : null)
                        //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                    });
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
            });
            $btnChangeStep.on('click', function () {

                //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                if (CL.StepNo == 1 || CL.StepNo == 2) { }
                else {
                    XFunction.RenderMessage("error", "Không cho phép Chuyển bước ở bước hiện tại!");
                    return;
                }
                //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataInvalidGiaiTrinhChenh = [];
                var dataXacNhan = [];
                var l_Check_HaveNotConvertation = [];

                $.each(myData, function (index, item) {
                    if (item.HaveConvertation == 0 && CL.StepNo > 1) {
                        l_Check_HaveNotConvertation.push(item);
                    }
                    if (item.HaveConvertation == 0 && item.Money3 > 5000 && CL.StepNo == 2)
                        dataInvalidGiaiTrinhChenh.push(item);
                });

                if (l_Check_HaveNotConvertation.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập Nội dung Trao đổi!");
                    return;
                }
                if (dataInvalidGiaiTrinhChenh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình số tiền chênh lệch!");
                    return;
                }

                $.each(myData, function (index, item) {

                    //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                    var l__NguyenNhanChenhLech = null;
                    if (!!item.NguyenNhanChenhLech) {
                        var l__Data__NguyenNhanChenhLech__ByName = $.grep(l__Data__NguyenNhanChenhLech, function (p_Item, p_Index) {
                            return p_Item.Name == item.NguyenNhanChenhLech
                        });
                        if (!!l__Data__NguyenNhanChenhLech__ByName && l__Data__NguyenNhanChenhLech__ByName.length > 0) {
                            l__NguyenNhanChenhLech = l__Data__NguyenNhanChenhLech__ByName[0].Code;
                        }
                    }
                    var l__HuongXuLyCuaKTHO = null;
                    if (!!item.HuongXuLyCuaKTHO) {
                        var l__Data__HuongXuLyKTHO__ByName = $.grep(l__Data__HuongXuLyKTHO, function (p_Item, p_Index) {
                            return p_Item.Name == item.HuongXuLyCuaKTHO
                        });
                        if (!!l__Data__HuongXuLyKTHO__ByName && l__Data__HuongXuLyKTHO__ByName.length > 0) {
                            l__HuongXuLyCuaKTHO = l__Data__HuongXuLyKTHO__ByName[0].Code;
                        }
                    }
                    //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                    dataReturn.push({
                        Id: item.Id,
                        TienChoXuLy: item.Money2 == '' || item.Money2 == null || item.Money2 == undefined ? 0 : item.Money2,
                        TienChenhLech: item.Money3,
                        TienSoPhuNH: item.Money4 == '' || item.Money4 == null || item.Money4 == undefined ? null : item.Money4,

                        //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                        NguyenNhanChenhLech: (!!l__NguyenNhanChenhLech ? l__NguyenNhanChenhLech : null),
                        HuongXuLyCuaKTHO: (!!l__HuongXuLyCuaKTHO ? l__HuongXuLyCuaKTHO : null),
                        SoSO: (!!item.SoSO ? item.SoSO : null),
                        SoTienTruyThu: (!!item.SoTienTruyThu ? item.SoTienTruyThu : null)
                        //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                    });
                });

                //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                var l__Check__Buoc2__NguyenNhanChenhLech__Invalid = [];
                if (CL.StepNo == 2) {
                    $.each(myData, function (index, item) {
                        if (!!item.NguyenNhanChenhLech) { }
                        else {
                            l__Check__Buoc2__NguyenNhanChenhLech__Invalid.push(item);
                        }
                    });
                }
                if (l__Check__Buoc2__NguyenNhanChenhLech__Invalid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn \"Nguyên nhân chênh lệch\"!");
                    return;
                }
                //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $btnComplete.on('click', function () {

                //▼	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================
                if (CL.StepNo == 1 || CL.StepNo == 3) { }
                else {
                    XFunction.RenderMessage("error", "Không cho phép Hoàn tất ở bước hiện tại!");
                    return;
                }
                //▲	Edit - VietMXH - 03/12/2019 - CL Quỹ: Quy trình mới==================================================

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataChenhB3 = [];
                var dataXacNhan = [];
                var dataHTB2 = [];
                var l_Check_ChenhLech5000_NotAllowComplete = [];

                $.each(myData, function (index, item) {
                    if (Math.abs(item.Money3) > 5000) {
                        l_Check_ChenhLech5000_NotAllowComplete.push(item);
                    }
                });

                if (l_Check_ChenhLech5000_NotAllowComplete.length > 0 && CL.StepNo == 1) {
                    XFunction.RenderMessage("error", "Số tiền chênh lệch lớn hơn 5000, không cho phép hoàn tất!");
                    return;
                }

                //▼	Edit - VietMXH - 13/03/2020 - Edit CL Quỹ==================================================
                var l__Check__Buoc3__HuongXuLyCuaKTHO__Invalid = [], l__Check__Buoc3__SoSO__Invalid = [], l__Check__B3__HXLKTHO__TruyThuBoiThuongNoneTienTruyThu = [];

                $.each(myData, function (index, item) {
                    var l__NguyenNhanChenhLech = null;
                    if (!!item.NguyenNhanChenhLech) {
                        var l__Data__NguyenNhanChenhLech__ByName = $.grep(l__Data__NguyenNhanChenhLech, function (p_Item, p_Index) {
                            return p_Item.Name == item.NguyenNhanChenhLech
                        });
                        if (!!l__Data__NguyenNhanChenhLech__ByName && l__Data__NguyenNhanChenhLech__ByName.length > 0) {
                            l__NguyenNhanChenhLech = l__Data__NguyenNhanChenhLech__ByName[0].Code;
                        }
                    }
                    var l__HuongXuLyCuaKTHO = null;
                    if (!!item.HuongXuLyCuaKTHO) {
                        var l__Data__HuongXuLyKTHO__ByName = $.grep(l__Data__HuongXuLyKTHO, function (p_Item, p_Index) {
                            return p_Item.Name == item.HuongXuLyCuaKTHO
                        });
                        if (!!l__Data__HuongXuLyKTHO__ByName && l__Data__HuongXuLyKTHO__ByName.length > 0) {
                            l__HuongXuLyCuaKTHO = l__Data__HuongXuLyKTHO__ByName[0].Code;
                        }
                    }

                    var l__SoTienTruyThu = (!!item.SoTienTruyThu ? item.SoTienTruyThu : null);
                    var l__SoSO = (!!item.SoSO ? item.SoSO : null);

                    if (CL.StepNo == 3) {
                        if (!!l__HuongXuLyCuaKTHO) {
                            if (l__HuongXuLyCuaKTHO == '2' && !l__SoTienTruyThu) {
                                //  "Hướng xử lý của KTHO" là "2:Truy thu/Bồi thường thiệt hại" + Không có "Số tiền truy thu"
                                l__Check__B3__HXLKTHO__TruyThuBoiThuongNoneTienTruyThu.push(item);
                            }
                        }
                        else {
                            l__Check__Buoc3__HuongXuLyCuaKTHO__Invalid.push(item);
                        }
                        if (!!l__SoSO) { }
                        else {
                            l__Check__Buoc3__SoSO__Invalid.push(item);
                        }
                    }

                    dataReturn.push({
                        Id: item.Id,
                        TienChoXuLy: item.Money2 == '' || item.Money2 == null || item.Money2 == undefined ? 0 : item.Money2,
                        TienChenhLech: item.Money3,
                        TienSoPhuNH: item.Money4 == '' || item.Money4 == null || item.Money4 == undefined ? null : item.Money4,
                        NguyenNhanChenhLech: (!!l__NguyenNhanChenhLech ? l__NguyenNhanChenhLech : null),
                        HuongXuLyCuaKTHO: (!!l__HuongXuLyCuaKTHO ? l__HuongXuLyCuaKTHO : null),
                        SoSO: l__SoSO,
                        SoTienTruyThu: l__SoTienTruyThu
                    });
                });

                if (l__Check__Buoc3__HuongXuLyCuaKTHO__Invalid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn \"Hướng xử lý của KTHO\"!");
                    return;
                }
                if (l__Check__Buoc3__SoSO__Invalid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập \"Số SO\"!");
                    return;
                }
                if (l__Check__B3__HXLKTHO__TruyThuBoiThuongNoneTienTruyThu.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập \"Số tiền truy thu\"!");
                    return;
                }
                //▲	Edit - VietMXH - 13/03/2020 - Edit CL Quỹ==================================================

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    };

    function contruct_39() {
        function summernoteMessage() {
            $('#Message').summernote({
                height: 200,
                onpaste: function (e) {
                    var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text');
                    e.preventDefault();
                    setTimeout(function () {
                        document.execCommand('insertText', false, bufferText);
                    }, 10);
                },
                onImageUpload: function (files, editor, welEditable) {
                    setShowMessage('error', 'Callog không hỗ trợ gửi nội dung có hình vui lòng upload hình bên dưới :(');
                },
                toolbar: [
                    ['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['fontname', ['fontname']], ['color', ['color']],
                ],
            });
        };
        //summernoteMessage();
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var shopOrOffice = '';
            dataHandsontable[0]['WarehouseName'] != null ? shopOrOffice = 'WarehouseName' : shopOrOffice = 'OrganizationHierachyName';
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 6,
                    minCols: 6,
                    startCols: 6,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 6,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Loại thắc mắc', 'Shop/Phòng ban', 'Chức danh', 'Nhân viên', 'Tháng thắc mắc', 'Năm Thắc mắc',
                        //'Nội dung thắc mắc',
                        'Giải thích'],
                    columns: [
                        { data: 'Property1', type: 'text', width: 200, readOnly: true },
                        { data: shopOrOffice, type: 'text', width: 200, readOnly: true },
                        { data: 'Property3', type: 'text', width: 300, readOnly: true },
                        { data: 'EmployeeName', type: 'text', width: 250, readOnly: true },
                        { data: 'Quantity', type: 'text', width: 100, readOnly: true },
                        { data: 'Quantity1', type: 'text', width: 100, readOnly: true },
                        //{ data: 'Note', type: 'text', width: 500, readOnly: true },
                        //{ data: "button", renderer: actionRenderer }
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }

            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };

    function contruct_37() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            $.each(dataHandsontable, function (index, item) {
                if (item.Money1 === '' || item.Money1 === null || item.Money1 === undefined) {
                    item.Money1 = 'Toàn bộ lương';
                }
                //▼ Add - NghiaTV5 - 27/04/2018 - thêm câu hiển thị loại  37
                if (item.TypeId == '198') {
                    $('#Showmessg37').show();
                    $('#CalllogGoc').show();
                    if (item.CalllogGoc > 0) {
                        var x = '/Requests/Details/' + item.CalllogGoc + '';
                        document.getElementById("CalllogGoc").href = x;
                        document.getElementById("CalllogGoc").innerHTML = item.CalllogGoc;
                        document.getElementById('Showmessg37').innerHTML = "Hệ thống Auto hủy calllog vì calllog đã được add phí mã xác nhận :";
                    }
                }
                //▲ Add - NghiaTV5 - 27/04/2018 - thêm câu hiển thị loại  37
            });
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var shopOrOffice = '';
            dataHandsontable[0]['WarehouseName'] != null ? shopOrOffice = 'WarehouseName' : shopOrOffice = 'OrganizationHierachyName';
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 5,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    //ChuongNT3 - 14/08/2018 - loại 37
                    colHeaders: ['Loại truy thu', 'Số hóa đơn', 'Shop', 'Nhân viên', 'Tháng giữ lương', 'Năm giữ lương', 'Số tiền cần giữ', 'Shop truy thu', 'Tỉnh truy thu'            //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                        //'Lý do giữ lương', 'Giải trình'
                    ],
                    columns: [
                        { data: 'LoaiTruyThu', type: 'text', width: 250, readOnly: true },
                        { data: 'Property6', type: 'text', width: 250, readOnly: true },
                        //ChuongNT3 - 14/08/2018 - loại 37
                        { data: 'WarehouseName', type: 'text', width: 300, readOnly: true },
                        { data: 'EmployeeName', type: 'text', width: 250, readOnly: true },
                        { data: 'Quantity', type: 'text', width: 150, readOnly: true, },
                        { data: 'Quantity1', type: 'text', width: 150, readOnly: true, },
                        { data: 'Money1', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                        { data: 'TenShopTruyThu', type: 'text', width: 300, readOnly: true },
                        { data: 'TinhShopTruyThu', type: 'text', width: 250, readOnly: true },
                        //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                    ],
                };
            };
            var setting1 = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 5,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    //ChuongNT3 - 14/08/2018 - loại 37
                    colHeaders: ['Loại truy thu', 'Shop', 'Nhân viên', 'Tháng giữ lương', 'Năm giữ lương', 'Số tiền cần giữ', 'Số tiền thực thu', 'Shop truy thu', 'Tỉnh truy thu'            //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                        //'Lý do giữ lương', 'Giải trình'
                    ],
                    columns: [
                        { data: 'LoaiTruyThu', type: 'text', width: 250, readOnly: true },
                        //ChuongNT3 - 14/08/2018 - loại 37
                        { data: 'WarehouseName', type: 'text', width: 300, readOnly: true },
                        { data: 'EmployeeName', type: 'text', width: 250, readOnly: true },
                        { data: 'Quantity', type: 'text', width: 150, readOnly: true, },
                        { data: 'Quantity1', type: 'text', width: 150, readOnly: true, },
                        { data: 'Money1', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'Money2', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                        { data: 'TenShopTruyThu', type: 'text', width: 300, readOnly: true },
                        { data: 'TinhShopTruyThu', type: 'text', width: 250, readOnly: true },
                        //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                    ],
                };
            };
            var setting2 = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 5,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    //ChuongNT3 - 14/08/2018 - loại 37
                    colHeaders: ['Loại truy thu', 'Số hóa đơn', 'Shop', 'Nhân viên', 'Tháng giữ lương', 'Năm giữ lương', 'Số tiền cần giữ', 'Số tiền thực thu', 'Shop truy thu', 'Tỉnh truy thu'          //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                        //'Lý do giữ lương', 'Giải trình'
                    ],
                    columns: [
                        { data: 'LoaiTruyThu', type: 'text', width: 250, readOnly: true },
                        { data: 'Property6', type: 'text', width: 250, readOnly: true },
                        //ChuongNT3 - 14/08/2018 - loại 37
                        { data: 'WarehouseName', type: 'text', width: 300, readOnly: true },
                        { data: 'EmployeeName', type: 'text', width: 250, readOnly: true },
                        { data: 'Quantity', type: 'text', width: 150, readOnly: true, },
                        { data: 'Quantity1', type: 'text', width: 150, readOnly: true, },
                        { data: 'Money1', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'Money2', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                        { data: 'TenShopTruyThu', type: 'text', width: 300, readOnly: true },
                        { data: 'TinhShopTruyThu', type: 'text', width: 250, readOnly: true },
                        //ChuongNT3 - 24/07/2018 - dưới 1tr sinh 1 tháng
                    ],
                };
            };
            //ChuongNT3 - 14/08/2018 - loại 37
            var check_loai = 0
            $.grep(respone, function (item, index) {
                if (item.MaLoaiTruyThu == 'TT002') {
                    check_loai = 1
                }
            });
            if (check_loai == 1) {
                hot = new Handsontable(container, setting());
            }
            else {
                if ((respone[0].Quantity2 !== '' && respone[0].Quantity2 !== null && respone[0].Quantity2 != undefined && respone[0].Quantity2 === 2) || (respone[0].MaLoaiTruyThu != 'TT002')) {
                    hot = new Handsontable(container, setting1());
                }
                else if ((respone[0].Quantity6 !== '' && respone[0].Quantity6 !== null && respone[0].Quantity6 != undefined && respone[0].Quantity6 == 109) || (respone[0].MaLoaiTruyThu != 'TT002')) {
                    hot = new Handsontable(container, setting2());
                }
                else {
                    hot = new Handsontable(container, setting());
                }
            }            //ChuongNT3 - 14/08/2018 - loại 37
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }

                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }

            });
        });
    }; // giữ lương

    function contruct_45() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $.get('/Requests/Get_SanPham_ITSupport', null, function (data) {
                $.get('/Requests/GetCatagoryTree', { type: 45 }, function (dataSys) {
                    $.get('/Requests/GetShopAndOffice', null, function (dataShopOffice) {
                        $.get('/Requests/GetListITSuport', null, function (ListData) {
                            $.get('/Requests/GetHXLITSupport', null, function (ListHXLData) {
                                var listDataCam = [];
                                var listDataWF = [];
                                var LoaiYeuCauCam = [];
                                var LoaiYeuCauWiFi = [];
                                var arrLoaiYeuCauCam = [];
                                var arrLoaiYeuCauWiFi = [];
                                var list = [];
                                list = ListData;
                                $.grep(ListData, function (item, index) {
                                    if (item.ParentId == 26) {
                                        listDataCam.push(item);
                                    } else if (item.ParentId == 29) {
                                        listDataWF.push(item);
                                    }
                                });
                                $.grep(listDataCam, function (item, index) {
                                    arrLoaiYeuCauCam.push(item.Name);
                                });
                                $.grep(listDataWF, function (item, index) {
                                    arrLoaiYeuCauWiFi.push(item.Name);
                                });
                                $('#editTypeError').click(function () {
                                    var tt = titleOfDetail.split("-");
                                    tt[0] = $("#TypeShow option:selected").text();
                                    var st = tt.join(' - ');
                                    titleOfDetail = st;

                                    $.get('/Requests/EditErrorType_45', {
                                        requestId: CL.Id, typeId: $('#TypeShow').val(), title: titleOfDetail
                                    }, function (data) {
                                        if (data !== null && data !== undefined && data !== '' && data == 1) {
                                            location.reload();
                                            XFunction.RenderMessage('success', 'Cập nhật thành công  :)');
                                            $('#titleX').empty();
                                            $('#titleX').html(titleOfDetail);
                                            $('#dialog-edit-type-error').modal('hide');
                                        }
                                    });
                                });
                                var dataHandsontable = [];
                                var dataProduct = [];
                                var arrNameProduct = [];
                                var arrProductCode = [];
                                var dataSystem = [];
                                var arrSysName = [''];
                                var dataShopOffices = [];
                                var arrShopOffice = [''];
                                dataHandsontable = respone;
                                dataProduct = data;
                                dataSystem = dataSys;
                                dataShopOffices = dataShopOffice;

                                var checkLoaiHeThong = 0;
                                $.each(dataHandsontable, function (index, item) {
                                    if (item.SystemName == 'Camera') {
                                        checkLoaiHeThong = 1;
                                    }
                                    else if (item.SystemName == 'Mạng không dây') {
                                        checkLoaiHeThong = 2;
                                    }
                                });
                                $.each(data, function (index, item) {
                                    arrNameProduct.push(item.ItemName);
                                    arrProductCode.push(item.ItemId);
                                });
                                $.each(dataSys, function (index, item) {
                                    arrSysName.push(item.Name);
                                });
                                $.each(dataShopOffice, function (index, item) {
                                    arrShopOffice.push(item.Code + '-' + item.Name);
                                });
                                if (CL.StepNo > 1 && respone[0].Property1 == 'Cấp mới')
                                    $('#hd45_SPMoi').show();
                                else if (CL.StepNo > 1 && respone[0].Property1 == 'Bảo hành') {
                                    $('#hd45_SPMoi').show();
                                    $('#hd45_SPCu').show();
                                }

                                if (CL.StepNo > 3 && CL.Assigner != '-3')
                                    $('#hd45_HanBH').show();

                                if (respone[0].Property9 == 'Đã nhận')
                                    jQuery.uniform.update(jQuery("#received_45").prop('checked', true));
                                else if (respone[0].Property9 == 'Chưa nhận')
                                    jQuery.uniform.update(jQuery("#notReceived_45").prop('checked', true));

                                if (respone[0].Property10 == 'Đã gửi')
                                    jQuery.uniform.update(jQuery("#receivedProductO_45").prop('checked', true));
                                else if (respone[0].Property10 == 'Chưa gửi')
                                    jQuery.uniform.update(jQuery("#notReceivedProductO_45").prop('checked', true));

                                if (respone[0].SaleCode == 'Đã hết')
                                    jQuery.uniform.update(jQuery("#expired_45").prop('checked', true));
                                else if (respone[0].SaleCode == 'Còn')
                                    jQuery.uniform.update(jQuery("#notExpired_45").prop('checked', true));

                                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                                $.each(permissons, function (index, item) {
                                    if (item == 'sender')
                                        permisstion.isSender = true;
                                    if (item == 'assigner')
                                        permisstion.isAssiner = true;
                                    if (item == 'groupAssigner')
                                        permisstion.isGroupAssiner = true;
                                });
                                var check = false, checkStep2 = false, checkStep3 = false, checkStep4 = false, checkUpdateShop = false;
                                var l__Is_AllowEdit_Quantity = false;
                                if (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) {
                                    if (CL.StepNo == 1) {
                                        check = true;
                                        checkUpdateShop = respone[0].FlagUpdateShopOffice == 1 ? true : false;
                                        l__Is_AllowEdit_Quantity = respone[0].FromForm == 'AutoCamera' ? true : false;
                                    }
                                    checkStep2 = CL.StepNo == 2 ? true : false;
                                    checkStep3 = CL.StepNo == 3 ? true : false;
                                    checkStep4 = CL.StepNo == 4 ? true : false;
                                }
                                var arrLoaiYeuCau = [];
                                var l__Src__HXL_Cam = [], l__Src__HXL_Wifi = [], l__Src__HXL_Khac = [];
                                $.grep(ListHXLData, function (item, index) {
                                    if (item.Loai == 'CM') {
                                        l__Src__HXL_Cam.push(item.Name);
                                    }
                                    if (item.Loai == 'WF') {
                                        l__Src__HXL_Wifi.push(item.Name);
                                    }
                                    if (item.Loai == 'Khac') {
                                        l__Src__HXL_Khac.push(item.Name);
                                    }
                                });
                                var f__GenHeaderNameWithSpace = function (p__HeaderName, p__SpaceCount) {
                                    var l__Result = (!!p__HeaderName ? p__HeaderName : '');
                                    for (var i = 0; i < p__SpaceCount; i++) {
                                        l__Result = '&nbsp;' + l__Result + '&nbsp;';
                                    }
                                    return l__Result;
                                };
                                var l__colHeaders__CamWifi = [
                                    f__GenHeaderNameWithSpace('Hệ thống', 10),
                                    f__GenHeaderNameWithSpace('Loại Yêu Cầu hỗ trợ', 4),
                                    'Tên shop/phòng ban',
                                    'Hình thức CallLog',
                                    'Hình thức bảo hành',
                                    'Mã thiết bị SHOP gửi lên',
                                    'Tên thiết bị SHOP gửi lên',
                                    'Số lượng',
                                    'Mã thiết bị IT đổi',
                                    'Tên thiết bị IT đổi',
                                    'Số lượng',
                                    'Hướng xử lý bảo hành',
                                    'Nhập lý do BH không được',
                                ];
                                var l__colHeaders__Khac = [
                                    f__GenHeaderNameWithSpace('Hệ thống', 10),
                                    'Tên shop/phòng ban',
                                    'Hình thức CallLog',
                                    'Hình thức bảo hành',
                                    'Mã thiết bị SHOP gửi lên',
                                    'Tên thiết bị SHOP gửi lên',
                                    'Số lượng',
                                    'Mã thiết bị IT đổi',
                                    'Tên thiết bị IT đổi',
                                    'Số lượng',
                                    'Hướng xử lý bảo hành',
                                    'Nhập lý do BH không được',
                                ];
                                if (checkLoaiHeThong == 1) {
                                    arrLoaiYeuCau = arrLoaiYeuCauCam;
                                }
                                else if (checkLoaiHeThong == 2) {
                                    arrLoaiYeuCau = arrLoaiYeuCauWiFi;
                                }
                                var f__renderer__dropdown = function () {
                                    return function (instance, td, row, col, prop, value, cellProperties) {
                                        Handsontable.AutocompleteCell.renderer.apply(this, arguments);
                                        td.style.background = (cellProperties.readOnly ? '#FFF' : 'lightyellow');
                                    }
                                };
                                var f__renderer__numeric = function () {
                                    return function (instance, td, row, col, prop, value, cellProperties) {
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                        td.style.background = (cellProperties.readOnly ? '#FFF' : 'lightyellow');
                                    }
                                };
                                var f__renderer__text__Note = function () {
                                    return function (instance, td, row, col, prop, value, cellProperties) {
                                        Handsontable.TextCell.renderer.apply(this, arguments);
                                        var hxlBH = instance.getDataAtRowProp(row, 'Property7');
                                        if (hxlBH == 'Bảo hành không được')
                                            cellProperties.readOnly = !checkStep3;
                                        else {
                                            cellProperties.readOnly = true;
                                        }
                                        td.style.background = (cellProperties.readOnly ? '#FFF' : 'lightyellow');
                                    }
                                };
                                var l__columns__CamWifi = [
                                    {
                                        data: 'SystemName', type: 'dropdown', source: arrSysName, className: 'htLeft', readOnly: !check,
                                        renderer: f__renderer__dropdown()
                                    },
                                    {
                                        data: 'Property12', type: 'autocomplete', source: arrLoaiYeuCau, className: 'htLeft', readOnly: !check,
                                        renderer: f__renderer__dropdown()
                                    },
                                    { data: 'ShopOrOffice', type: 'autocomplete', source: arrShopOffice, className: 'htLeft', readOnly: !checkUpdateShop },
                                    { data: 'Property1', readOnly: true, type: 'text', className: 'htLeft' },
                                    { data: 'Property2', readOnly: !check, type: 'autocomplete', source: ['', 'Gửi sản phẩm thay thế cho shop', 'Không lỗi'], strict: false, className: 'htLeft', },
                                    { data: 'Property3', type: 'autocomplete', source: arrProductCode, className: 'htLeft', readOnly: !check },
                                    { data: 'Property4', type: 'autocomplete', source: arrNameProduct, className: 'htLeft', readOnly: !check },
                                    {
                                        data: 'Quantity', type: 'numeric', className: 'htLeft', readOnly: !l__Is_AllowEdit_Quantity, format: '0,00',
                                        renderer: f__renderer__numeric()
                                    },
                                    { data: 'Property5', type: 'autocomplete', source: arrProductCode, className: 'htLeft', readOnly: !check, },
                                    { data: 'Property6', type: 'autocomplete', source: arrNameProduct, className: 'htLeft', readOnly: !check, },
                                    { data: 'Quantity1', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,00', },
                                    {
                                        data: 'Property7', readOnly: !checkStep3, type: 'autocomplete', source: [], strict: false, className: 'htLeft',
                                        renderer: f__renderer__dropdown()
                                    },
                                    {
                                        data: 'Note', readOnly: !checkStep3, type: 'text', className: 'htLeft',
                                        renderer: f__renderer__text__Note()
                                    },
                                ];
                                var l__columns__Khac = [
                                    {
                                        data: 'SystemName', type: 'dropdown', source: arrSysName, className: 'htLeft', readOnly: !check,
                                        renderer: f__renderer__dropdown()
                                    },
                                    { data: 'ShopOrOffice', type: 'autocomplete', source: arrShopOffice, className: 'htLeft', readOnly: !checkUpdateShop },
                                    { data: 'Property1', readOnly: true, type: 'text', className: 'htLeft' },
                                    { data: 'Property2', readOnly: !check, type: 'autocomplete', source: ['', 'Gửi sản phẩm thay thế cho shop', 'Không lỗi'], strict: false, className: 'htLeft', },
                                    { data: 'Property3', type: 'autocomplete', source: arrProductCode, className: 'htLeft', readOnly: !check },
                                    { data: 'Property4', type: 'autocomplete', source: arrNameProduct, className: 'htLeft', readOnly: !check },
                                    {
                                        data: 'Quantity', type: 'numeric', className: 'htLeft', readOnly: !check, format: '0,00',
                                        renderer: f__renderer__numeric()
                                    },
                                    { data: 'Property5', type: 'autocomplete', source: arrProductCode, className: 'htLeft', readOnly: !check, },
                                    { data: 'Property6', type: 'autocomplete', source: arrNameProduct, className: 'htLeft', readOnly: !check, },
                                    { data: 'Quantity1', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,00', },
                                    {
                                        data: 'Property7', readOnly: !checkStep3, type: 'autocomplete', source: l__Src__HXL_Khac, strict: false, className: 'htLeft',
                                        renderer: f__renderer__dropdown()
                                    },
                                    {
                                        data: 'Note', readOnly: !checkStep3, type: 'text', className: 'htLeft',
                                        renderer: f__renderer__text__Note()
                                    },
                                ];
                                var l__setting__CamWifi = function () {
                                    return {
                                        //=================================Data=======
                                        data: dataHandsontable,
                                        //================================Cols=======
                                        maxCols: 16,
                                        minCols: 16,
                                        startCols: 16,
                                        minSpareCols: 0,
                                        allowInsertColumn: false,
                                        allowRemoveColumn: false,
                                        autoColumnSize: true,
                                        autoWrapCol: false,
                                        columnSorting: false,
                                        colWidths: 'undefined',
                                        copyColsLimit: 16,
                                        currentColClassName: 'currentCol', //currentCol
                                        manualColumnMove: false,
                                        manualColumnResize: true,
                                        manualColumnResize: 10,
                                        viewportColumnRenderingOffset: 16,
                                        sortIndicator: true,
                                        //================================Rows=======
                                        allowInsertRow: true,
                                        allowRemoveRow: true,
                                        autoRowSize: true,
                                        autoWrapRow: false,
                                        copyRowsLimit: 1000,
                                        currentRowClassName: 'currentRow',
                                        fixedRowsTop: 0,
                                        manualRowMove: false,
                                        manualRowResize: true,
                                        rowHeaders: true,
                                        minSpareRows: 4,
                                        //================================Oder=======
                                        allowInvalid: false,
                                        stretchH: 'all',
                                        commentedCellClassName: 'htCommentCell',
                                        comments: true,
                                        contextMenu: false,
                                        copyable: true,
                                        customBorders: false,
                                        debug: false,
                                        disableVisualSelection: true,
                                        enterBeginsEditingBoolean: true,
                                        fillHandle: true,
                                        outsideClickDeselects: true,
                                        fragmentSelection: false,
                                        groups: false,
                                        invalidCellClassName: 'htInvalid',
                                        mergeCells: false,
                                        multiSelect: true,
                                        noWordWrapClassName: 'htNoWrap',
                                        placeholder: false,
                                        placeholderCellClassName: 'htPlaceholder',
                                        readOnlyCellClassName: 'htDimmed',
                                        search: false,
                                        trimWhitespace: true,
                                        undo: true,
                                        formulas: true,
                                        wordWrap: false,
                                        //====================================Oder ==============================================
                                        colHeaders: l__colHeaders__CamWifi,
                                        columns: l__columns__CamWifi,
                                        afterChange: function (changes, source) {
                                            if (!changes || source == 'not') {
                                                return;
                                            }
                                            var instance = this;
                                            changes.forEach(function (change, item) {
                                                var row = change[0];
                                                var col = change[1];
                                                var newValue = change[3];
                                                var cellProperties = {}, options;

                                                if (col == 'SystemName') {
                                                    if (!!newValue)
                                                        hot.setDataAtRowProp(row, 'Property1', 'Bảo hành', 'not');
                                                    else
                                                        hot.setDataAtRowProp(row, 'Property1', '', 'not');
                                                    if (newValue == 'Camera') {
                                                        hot.setDataAtRowProp(row, 'Property12', '', '');
                                                        cellProperties = instance.getCellMeta(row, instance.propToCol('Property12'));
                                                        cellProperties.readOnly = false;
                                                        cellProperties.source = arrLoaiYeuCauCam;

                                                    }
                                                    else if (newValue == 'Mạng không dây') {
                                                        hot.setDataAtRowProp(row, 'Property12', '', '');
                                                        cellProperties = instance.getCellMeta(row, instance.propToCol('Property12'));
                                                        cellProperties.readOnly = false;
                                                        cellProperties.source = arrLoaiYeuCauWiFi;
                                                    }
                                                    else {
                                                        hot.setDataAtRowProp(row, 'Property12', '', '');
                                                        var checkHT = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                                                            return item.SystemName == '';
                                                        });
                                                        cellProperties = instance.getCellMeta(row, instance.propToCol('Property12'));
                                                        cellProperties.readOnly = true;
                                                    }
                                                }
                                                if (col == 'Property12') {
                                                    var sys = hot.getDataAtRowProp(row, 'SystemName')
                                                    if (sys != 'Camera' && sys != 'Mạng không dây') {
                                                        hot.setDataAtRowProp(row, 'Property12', '', 'not');
                                                    }
                                                }
                                                if (col == 'Property3') {
                                                    var namePr = $.grep(dataProduct, function (item, index) {
                                                        return item.ItemId == newValue;
                                                    });
                                                    hot.setDataAtRowProp(row, 'Property4', namePr[0].ItemName, 'not');
                                                }
                                                if (col == 'Property4') {
                                                    var namePr = $.grep(dataProduct, function (item, index) {
                                                        return item.ItemName == newValue;
                                                    });
                                                    hot.setDataAtRowProp(row, 'Property3', namePr[0].ItemId, 'not');
                                                }
                                                if (col == 'Property5') {
                                                    var namePr = $.grep(dataProduct, function (item, index) {
                                                        return item.ItemId == newValue;
                                                    });
                                                    hot.setDataAtRowProp(row, 'Property6', namePr[0].ItemName, 'not');
                                                }
                                                if (col == 'Property6') {
                                                    var namePr = $.grep(dataProduct, function (item, index) {
                                                        return item.ItemName == newValue;
                                                    });
                                                    hot.setDataAtRowProp(row, 'Property5', namePr[0].ItemId, 'not');
                                                }

                                                if (col == 'Quantity') {
                                                    hot.setDataAtRowProp(row, 'Quantity1', newValue, 'not');
                                                }
                                            });
                                        },
                                    };
                                };
                                var l__setting__Khac = function () {
                                    return {
                                        //=================================Data=======
                                        data: dataHandsontable,
                                        //================================Cols=======
                                        maxCols: 16,
                                        minCols: 16,
                                        startCols: 16,
                                        minSpareCols: 0,
                                        allowInsertColumn: false,
                                        allowRemoveColumn: false,
                                        autoColumnSize: true,
                                        autoWrapCol: false,
                                        columnSorting: false,
                                        colWidths: 'undefined',
                                        copyColsLimit: 16,
                                        currentColClassName: 'currentCol', //currentCol
                                        manualColumnMove: false,
                                        manualColumnResize: true,
                                        viewportColumnRenderingOffset: 16,
                                        sortIndicator: true,
                                        //================================Rows=======
                                        allowInsertRow: true,
                                        allowRemoveRow: true,
                                        autoRowSize: true,
                                        autoWrapRow: false,
                                        copyRowsLimit: 1000,
                                        currentRowClassName: 'currentRow',
                                        fixedRowsTop: 0,
                                        manualRowMove: false,
                                        manualRowResize: true,
                                        rowHeaders: true,
                                        minSpareRows: 4,
                                        //================================Oder=======
                                        allowInvalid: false,
                                        stretchH: 'all',
                                        commentedCellClassName: 'htCommentCell',
                                        comments: true,
                                        contextMenu: false,
                                        copyable: true,
                                        customBorders: false,
                                        debug: false,
                                        disableVisualSelection: true,
                                        enterBeginsEditingBoolean: true,
                                        fillHandle: true,
                                        outsideClickDeselects: true,
                                        fragmentSelection: false,
                                        groups: false,
                                        invalidCellClassName: 'htInvalid',
                                        mergeCells: false,
                                        multiSelect: true,
                                        noWordWrapClassName: 'htNoWrap',
                                        placeholder: false,
                                        placeholderCellClassName: 'htPlaceholder',
                                        readOnlyCellClassName: 'htDimmed',
                                        search: false,
                                        trimWhitespace: true,
                                        undo: true,
                                        formulas: true,
                                        wordWrap: false,
                                        //====================================Oder ==============================================
                                        colHeaders: l__colHeaders__Khac,
                                        columns: l__columns__Khac,
                                        afterChange: function (changes, source) {
                                            if (!changes || source == 'not') {
                                                return;
                                            }
                                            var instance = this;
                                            changes.forEach(function (change) {
                                                var row = change[0];
                                                var col = change[1];
                                                var newValue = change[3];
                                                var cellProperties = {}, options;
                                                if (col == 'SystemName') {
                                                    if (!!newValue)
                                                        hot.setDataAtRowProp(row, 'Property1', 'Bảo hành', 'not');
                                                    else
                                                        hot.setDataAtRowProp(row, 'Property1', '', 'not');

                                                    if (newValue == 'Camera' || newValue == 'Mạng không dây') {
                                                        hot.updateSettings({
                                                            colHeaders: l__colHeaders__CamWifi,
                                                            columns: l__columns__CamWifi
                                                        });
                                                        cellProperties = instance.getCellMeta(row, instance.propToCol('Property12'));
                                                        cellProperties.readOnly = true;
                                                    }
                                                    if (newValue == 'Camera') {
                                                        hot.setDataAtRowProp(row, 'Property12', '', '');
                                                        cellProperties = instance.getCellMeta(row, instance.propToCol('Property12'));
                                                        cellProperties.readOnly = false;
                                                        cellProperties.source = arrLoaiYeuCauCam;
                                                    }
                                                    else if (newValue == 'Mạng không dây') {
                                                        hot.setDataAtRowProp(row, 'Property12', '', '');
                                                        cellProperties = instance.getCellMeta(row, instance.propToCol('Property12'));
                                                        cellProperties.readOnly = false;
                                                        cellProperties.source = arrLoaiYeuCauWiFi;
                                                    }
                                                    else {
                                                        hot.setDataAtRowProp(row, 'Property12', '', '');
                                                        var checkHT = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                                                            return item.SystemName == 'Camera' || item.SystemName == 'Mạng không dây';
                                                        });
                                                        var sf = hot.getDataAtRowProp(row, 'SystemName');

                                                        if (checkHT.length > 0) {
                                                            if (sf != 'Camera' || sf != 'Mạng không dây') {
                                                                hot.setDataAtRowProp(row, 'Property12', '', '');
                                                                cellProperties = instance.getCellMeta(row, instance.propToCol('Property12'));
                                                                cellProperties.readOnly = true;
                                                                cellProperties = instance.getCellMeta(row, instance.propToCol('Property7'));
                                                                cellProperties.source = l__Src__HXL_Khac;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (col == 'Property12') {
                                                    var sys = hot.getDataAtRowProp(row, 'SystemName')

                                                    if (sys != 'Camera' && sys != 'Mạng không dây') {
                                                        hot.setDataAtRowProp(row, 'Property12', '', 'not');
                                                    }
                                                }
                                                if (col == 'Property3') {
                                                    var namePr = $.grep(dataProduct, function (item, index) {
                                                        return item.ItemId == newValue;
                                                    });
                                                    hot.setDataAtRowProp(row, 'Property4', namePr[0].ItemName, 'not');
                                                }
                                                if (col == 'Property4') {
                                                    var namePr = $.grep(dataProduct, function (item, index) {
                                                        return item.ItemName == newValue;
                                                    });
                                                    hot.setDataAtRowProp(row, 'Property3', namePr[0].ItemId, 'not');
                                                }
                                                if (col == 'Property5') {
                                                    var namePr = $.grep(dataProduct, function (item, index) {
                                                        return item.ItemId == newValue;
                                                    });
                                                    hot.setDataAtRowProp(row, 'Property6', namePr[0].ItemName, 'not');
                                                }
                                                if (col == 'Property6') {
                                                    var namePr = $.grep(dataProduct, function (item, index) {
                                                        return item.ItemName == newValue;
                                                    });
                                                    hot.setDataAtRowProp(row, 'Property5', namePr[0].ItemId, 'not');
                                                }
                                                if (col == 'Property7' && newValue != 'Bảo hành không được') {
                                                    hot.setDataAtRowProp(row, 'Note', '', 'not');
                                                }
                                                if (col == 'Quantity') {
                                                    hot.setDataAtRowProp(row, 'Quantity1', newValue, 'not');
                                                }
                                            });
                                        },
                                    };
                                };
                                if (checkLoaiHeThong == 0) {
                                    var hot = new Handsontable(container, l__setting__Khac());
                                    console.log('l__setting__Khac()');
                                }
                                else if (checkLoaiHeThong == 1 || checkLoaiHeThong == 2) {
                                    var hot = new Handsontable(container, l__setting__CamWifi());
                                    console.log('l__setting__CamWifi()');
                                }
                                hot.render();

                                var dataHAN = $.grep(hot.getData(), function (item, index) {
                                    return item.SystemName != null && item.SystemName != undefined && item.SystemName != '';
                                });
                                $.each(dataHAN, function (index, item) {
                                    if (item.SystemName == 'Camera') {
                                        var cellProperties = hot.getCellMeta(index, hot.propToCol('Property7'));
                                        cellProperties.source = l__Src__HXL_Cam;
                                    }
                                    else if (item.SystemName == 'Mạng không dây') {
                                        var cellProperties = hot.getCellMeta(index, hot.propToCol('Property7'));
                                        cellProperties.source = l__Src__HXL_Wifi;
                                    }
                                    else {
                                        var cellProperties = hot.getCellMeta(index, hot.propToCol('Property7'));
                                        cellProperties.source = l__Src__HXL_Khac;
                                    }
                                    hot.render()
                                });

                                if (!checkStep2) {
                                    $('input[name=ConfirmReplaceProduct_45]').attr("disabled", true);
                                    $('input[name=CfSendProductToIT_45]').attr("disabled", true);
                                }

                                if (!checkStep4)
                                    $('input[name=CfHanBH_45]').attr("disabled", true);

                                $btnComment.on('click', function () {
                                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                    $('#ImageValidate').val(checkedVals.join(","));
                                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                    });

                                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                                        return (item.Property1 !== null && item.Property1 !== undefined && item.Property1 !== '') ||
                                            (item.SystemName !== null && item.SystemName !== undefined && item.SystemName !== '');
                                    });

                                    var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_45]:checked").val();
                                    var cfSendProductToIT = jQuery("input:radio[name=CfSendProductToIT_45]:checked").val();
                                    var cfHetHanBH = jQuery("input:radio[name=CfHanBH_45]:checked").val();
                                    var datareturn = [];
                                    var dataShopCode = $.grep(dataShopOffices, function (item, index) {
                                        return item.Code + '-' + item.Name == myData[0].ShopOrOffice;
                                    });
                                    var dataIdSys;
                                    var dataParentIdSys;
                                    $.each(myData, function (index, item) {
                                        dataIdSys = $.grep(list, function (item1, index) {
                                            if (item1.Name == item.Property12)
                                                return item1.Id;
                                        });
                                        dataParentIdSys = $.grep(list, function (item2, index) {
                                            if (item2.Name == item.Property12)
                                                return item2.ParentId;
                                        });
                                        var Code = $.grep(ListHXLData, function (item1, index) { return item1.Name == item.Property7 });
                                        datareturn.push({
                                            Id: item.Id == null || item.Id == undefined || item.Id == '' ? 0 : item.Id,
                                            Property8: item.SystemName,
                                            Property1: item.Property1,
                                            Property2: item.Property2 == null || item.Property2 == undefined || item.Property2 == '' ? null : item.Property2,
                                            Property3: item.Property3 == null || item.Property3 == undefined || item.Property3 == '' ? null : item.Property3,
                                            Property4: item.Property4 == null || item.Property4 == undefined || item.Property4 == '' ? null : item.Property4,
                                            Quantity: item.Quantity == null || item.Quantity == undefined || item.Quantity == '' ? null : item.Quantity,
                                            Property5: item.Property5 == null || item.Property5 == undefined || item.Property5 == '' ? null : item.Property5,
                                            Property6: item.Property6 == null || item.Property6 == undefined || item.Property6 == '' ? null : item.Property6,
                                            Quantity1: item.Quantity1 == null || item.Quantity1 == undefined || item.Quantity1 == '' ? null : item.Quantity1,
                                            Property7: item.Property7 == null || item.Property7 == undefined || item.Property7 == '' ? null : item.Property7,
                                            Property9: cfReceiveSPMoi == null || cfReceiveSPMoi == undefined || cfReceiveSPMoi == '' ? null : cfReceiveSPMoi,
                                            Property10: cfSendProductToIT == null || cfSendProductToIT == undefined || cfSendProductToIT == '' ? null : cfSendProductToIT,
                                            Note: item.Note == null || item.Note == undefined || item.Note == '' ? null : item.Note,
                                            SaleCode: cfHetHanBH == null || cfHetHanBH == undefined || cfHetHanBH == '' ? null : cfHetHanBH,
                                            ShopCode: dataShopCode != '' && dataShopCode != null && dataShopCode != undefined ? dataShopCode[0].Code : '',
                                            Property12: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : item.Property12,
                                            IdSystem: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : dataIdSys[0].Id,
                                            ParentIdSystem: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : dataParentIdSys[0].ParentId,
                                            Code: item.Property7 == null || item.Property7 == undefined || item.Property7 == '' ? null : Code[0].Code
                                        });
                                    });
                                    var message = $('#Message').val();
                                    if (message.length == 0) {
                                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                                    }
                                    $('#Details').val(JSON.stringify(datareturn));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/Conversation");
                                    form.submit();
                                });
                                $btnReply.on('click', function () {

                                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                    $('#ImageValidate').val(checkedVals.join(","));

                                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                    });


                                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                                        return (item.Property1 !== null && item.Property1 !== undefined && item.Property1 !== '') ||
                                            (item.SystemName !== null && item.SystemName !== undefined && item.SystemName !== '');
                                    });
                                    if (myData.length == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức call log!"); return;
                                    }
                                    var datainvalidSPMoi = [], datainvalidSPBH = [], datainvalidHT = [], datainvalidHTBH = [],
                                        datainvalidHXL = [], datainvalidSLSPMoi = [], datainvalidSLSPBH = [], datainvalidHTCL = [];
                                    $.each(myData, function (index, item) {
                                        if (item.SystemName == '' || item.SystemName == null || item.SystemName == undefined) {
                                            datainvalidHT.push(item);
                                        }
                                        if (item.Property1 == '' || item.Property1 == null || item.Property1 == undefined) {
                                            datainvalidHTCL.push(item);
                                        }
                                        if (item.Property1 == 'Cấp mới' && (item.Property3 == '' || item.Property3 == null || item.Property3 == undefined)) {
                                            datainvalidSPMoi.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && (item.Property2 == '' || item.Property2 == null || item.Property2 == undefined)) {
                                            datainvalidHTBH.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && item.Property2 == 'Gửi sản phẩm thay thế cho shop' && (item.Property3 == '' || item.Property3 == null || item.Property3 == undefined)) {
                                            datainvalidSPMoi.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && item.Property2 == 'Gửi sản phẩm thay thế cho shop' && (item.Property5 == '' || item.Property5 == null || item.Property5 == undefined)) {
                                            datainvalidSPBH.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && CL.StepNo == 3 && (item.Property7 == '' || item.Property7 == null || item.Property7 == undefined)) {
                                            datainvalidHXL.push(item);
                                        }
                                        if (item.Property3 != '' && item.Property3 != null && item.Property3 != undefined && (item.Quantity == '' || item.Quantity == null || item.Quantity == undefined)) {
                                            datainvalidSLSPMoi.push(item);
                                        }
                                        if (item.Property5 != '' && item.Property5 != null && item.Property5 != undefined && (item.Quantity1 == '' || item.Quantity1 == null || item.Quantity1 == undefined)) {
                                            datainvalidSLSPBH.push(item);
                                        }
                                    });
                                    if (datainvalidHT.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn loại hệ thống."); return;
                                    }
                                    if (datainvalidHTCL.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức CallLog."); return;
                                    }
                                    if (datainvalidHTBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức bảo hành."); return;
                                    }
                                    if (datainvalidSPMoi.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Sản phẩm đổi mới."); return;
                                    }
                                    if (datainvalidSPBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Sản phẩm bảo hành."); return;
                                    }
                                    if (datainvalidHXL.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hướng xử lý bảo hành."); return;
                                    }
                                    if (datainvalidSLSPMoi.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập số lượng sản phẩm đổi mới."); return;
                                    }
                                    if (datainvalidSLSPBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập số lượng sản phẩm bảo hành."); return;
                                    }

                                    var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_45]:checked").val();
                                    var cfSendProductToIT = jQuery("input:radio[name=CfSendProductToIT_45]:checked").val();
                                    var cfHetHanBH = jQuery("input:radio[name=CfHanBH_45]:checked").val();

                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Cấp mới' && (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop nhận sản phẩm đổi mới/thay thế của IT."); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Bảo hành' && (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop nhận sản phẩm đổi mới/thay thế của IT."); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Bảo hành' && (cfSendProductToIT == '' || cfSendProductToIT == null || cfSendProductToIT == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop đã gửi sản phẩm cũ về IT."); return;
                                    }
                                    var datareturn = [];
                                    var dataShopCode = $.grep(dataShopOffices, function (item, index) {
                                        return item.Code + '-' + item.Name == myData[0].ShopOrOffice;
                                    });
                                    var dataIdSys;
                                    var dataParentIdSys;
                                    $.each(myData, function (index, item) {
                                        dataIdSys = $.grep(list, function (item1, index) {
                                            if (item1.Name == item.Property12)
                                                return item1.Id;
                                        });
                                        dataParentIdSys = $.grep(list, function (item2, index) {
                                            if (item2.Name == item.Property12)
                                                return item2.ParentId;
                                        });
                                        var Code = $.grep(ListHXLData, function (item1, index) { return item1.Name == item.Property7 });
                                        datareturn.push({
                                            Id: item.Id == null || item.Id == undefined || item.Id == '' ? 0 : item.Id,
                                            Property8: item.SystemName,
                                            Property1: item.Property1,
                                            Property2: item.Property2 == null || item.Property2 == undefined || item.Property2 == '' ? null : item.Property2,
                                            Property3: item.Property3 == null || item.Property3 == undefined || item.Property3 == '' ? null : item.Property3,
                                            Property4: item.Property4 == null || item.Property4 == undefined || item.Property4 == '' ? null : item.Property4,
                                            Quantity: item.Quantity == null || item.Quantity == undefined || item.Quantity == '' ? null : item.Quantity,
                                            Property5: item.Property5 == null || item.Property5 == undefined || item.Property5 == '' ? null : item.Property5,
                                            Property6: item.Property6 == null || item.Property6 == undefined || item.Property6 == '' ? null : item.Property6,
                                            Quantity1: item.Quantity1 == null || item.Quantity1 == undefined || item.Quantity1 == '' ? null : item.Quantity1,
                                            Property7: item.Property7 == null || item.Property7 == undefined || item.Property7 == '' ? null : item.Property7,
                                            Property9: cfReceiveSPMoi == null || cfReceiveSPMoi == undefined || cfReceiveSPMoi == '' ? null : cfReceiveSPMoi,
                                            Property10: cfSendProductToIT == null || cfSendProductToIT == undefined || cfSendProductToIT == '' ? null : cfSendProductToIT,
                                            Note: item.Note == null || item.Note == undefined || item.Note == '' ? null : item.Note,
                                            SaleCode: cfHetHanBH == null || cfHetHanBH == undefined || cfHetHanBH == '' ? null : cfHetHanBH,
                                            ShopCode: dataShopCode != '' && dataShopCode != null && dataShopCode != undefined ? dataShopCode[0].Code : '',
                                            Property12: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : item.Property12,
                                            IdSystem: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : dataIdSys[0].Id,
                                            ParentIdSystem: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : dataParentIdSys[0].ParentId,
                                            Code: item.Property7 == null || item.Property7 == undefined || item.Property7 == '' ? null : Code[0].Code
                                        });
                                    });


                                    var message = $("#Message").val();
                                    if (message.length == 0) {
                                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                                    }


                                    $('#Details').val(JSON.stringify(datareturn));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/Reply");
                                    form.submit();

                                });
                                $btnChangeStep.on('click', function () {

                                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                    $('#ImageValidate').val(checkedVals.join(","));

                                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                    });

                                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                                        return (item.Property1 !== null && item.Property1 !== undefined && item.Property1 !== '') ||
                                            (item.SystemName !== null && item.SystemName !== undefined && item.SystemName !== '');
                                    });
                                    if (myData.length == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức call log!"); return;
                                    }
                                    var datainvalidSPMoi = [], datainvalidSPBH = [], datainvalidHT = [], datainvalidHTBH = [],
                                        datainvalidHXL = [], datainvalidSLSPMoi = [], datainvalidSLSPBH = [], datainvalidHTCL = [],
                                        datainvalidNoteBH = [], dataInvalidShopOffice = [], dataInvalidSystem = []; // ChuongNT3 - 13/03/2018 - Check loại yêu cầu hỗ trợ
                                    $.each(myData, function (index, item) {
                                        if (item.SystemName == '' || item.SystemName == null || item.SystemName == undefined) {
                                            datainvalidHT.push(item);
                                        }
                                        if (item.Property1 == '' || item.Property1 == null || item.Property1 == undefined) {
                                            datainvalidHTCL.push(item);
                                        }
                                        if (item.Property1 == 'Cấp mới' && (item.Property3 == '' || item.Property3 == null || item.Property3 == undefined)) {
                                            datainvalidSPMoi.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && (item.Property2 == '' || item.Property2 == null || item.Property2 == undefined)) {
                                            datainvalidHTBH.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && item.Property2 == 'Gửi sản phẩm thay thế cho shop' && (item.Property3 == '' || item.Property3 == null || item.Property3 == undefined)) {
                                            datainvalidSPMoi.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && item.Property2 == 'Gửi sản phẩm thay thế cho shop' && (item.Property5 == '' || item.Property5 == null || item.Property5 == undefined)) {
                                            datainvalidSPBH.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && CL.StepNo == 3 && (item.Property7 == '' || item.Property7 == null || item.Property7 == undefined)) {
                                            datainvalidHXL.push(item);
                                        }
                                        if (item.Property3 != '' && item.Property3 != null && item.Property3 != undefined && (item.Quantity == '' || item.Quantity == null || item.Quantity == undefined)) {
                                            datainvalidSLSPMoi.push(item);
                                        }
                                        if (item.Property5 != '' && item.Property5 != null && item.Property5 != undefined && (item.Quantity1 == '' || item.Quantity1 == null || item.Quantity1 == undefined)) {
                                            datainvalidSLSPBH.push(item);
                                        }
                                        if (item.Property7 == 'Bảo hành không được' && (item.Note == '' || item.Note == null || item.Note == undefined)) {
                                            datainvalidNoteBH.push(item);
                                        }
                                        if (item.ShopOrOffice == '' || item.ShopOrOffice == null || item.ShopOrOffice == undefined) {
                                            dataInvalidShopOffice.push(item);
                                        }
                                        //▼  ChuongNT3 - 13/03/2018 - Check loại yêu cầu hỗ trợ
                                        if ((item.SystemName == 'Camera' || item.SystemName == 'Mạng không dây') && (item.Property12 == '' || item.Property12 == null || item.Property12 == undefined)) {
                                            dataInvalidSystem.push(item);
                                        }
                                        //▲ ChuongNT3 - 13/03/2018 - Check loại yêu cầu hỗ trợ
                                    });
                                    var message = $("#Message").val();
                                    //▼ ChuongNT3 - 13/03/2018 - Check loại yêu cầu hỗ trợ
                                    if (dataInvalidSystem.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn loại yêu cầu hỗ trợ."); return;
                                    }
                                    //▲ ChuongNT3 - 13/03/2018 - Check loại yêu cầu hỗ trợ
                                    if (datainvalidHT.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn loại hệ thống."); return;
                                    }
                                    if (datainvalidHTCL.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức CallLog."); return;
                                    }
                                    if (datainvalidHTBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức bảo hành."); return;
                                    }
                                    if (datainvalidSPMoi.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Sản phẩm đổi mới."); return;
                                    }
                                    if (datainvalidSPBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Sản phẩm bảo hành."); return;
                                    }
                                    if (datainvalidHXL.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hướng xử lý bảo hành."); return;
                                    }
                                    if (datainvalidSLSPMoi.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập số lượng sản phẩm đổi mới."); return;
                                    }
                                    if (datainvalidSLSPBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập số lượng sản phẩm bảo hành."); return;
                                    }
                                    if (datainvalidNoteBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập lý do bảo hành không được."); return;
                                    }
                                    if (dataInvalidShopOffice.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Shop hoặc phòng ban."); return;
                                    }

                                    var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_45]:checked").val();
                                    var cfSendProductToIT = jQuery("input:radio[name=CfSendProductToIT_45]:checked").val();
                                    var cfHetHanBH = jQuery("input:radio[name=CfHanBH_45]:checked").val();

                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Cấp mới' && (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop nhận sản phẩm đổi mới/thay thế của IT."); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Bảo hành' && (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop nhận sản phẩm đổi mới/thay thế của IT."); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Bảo hành' && (cfSendProductToIT == '' || cfSendProductToIT == null || cfSendProductToIT == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop đã gửi sản phẩm cũ về IT."); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Cấp mới' && cfReceiveSPMoi == 'Chưa nhận' && message.length == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập lý do chưa nhận sản phẩm đổi mới/thay thế của IT!"); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Bảo hành' && cfReceiveSPMoi == 'Chưa nhận' && message.length == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập lý do chưa nhận sản phẩm đổi mới/thay thế của IT!"); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Bảo hành' && cfSendProductToIT == 'Chưa gửi' && message.length == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập lý do chưa gửi sản phẩm cũ về IT!"); return;
                                    }
                                    if (CL.StepNo == 2 && cfReceiveSPMoi == 'Chưa nhận') {
                                        XFunction.RenderMessage("error", "Không thể chuyển bước khi xác nhận là chưa nhận!"); return;
                                    }
                                    if (CL.StepNo == 2 && cfSendProductToIT == 'Chưa gửi') {
                                        XFunction.RenderMessage("error", "Không thể chuyển bước khi xác nhận là chưa nhận/chưa gửi!"); return;
                                    }
                                    if (CL.StepNo == 4 && respone[0].Property1 == 'Bảo hành' && (cfHetHanBH == '' || cfHetHanBH == null || cfHetHanBH == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận hết hạn bảo hành."); return;
                                    }
                                    if (CL.StepNo == 4 && respone[0].Property1 == 'Bảo hành' && cfHetHanBH == 'Còn' && message.length == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập lý do còn hạn bảo hành!"); return;
                                    }
                                    if (CL.StepNo == 4 && respone[0].Property1 == 'Bảo hành' && cfHetHanBH == 'Còn') {
                                        XFunction.RenderMessage("error", "Không thể chuyển bước khi xác nhận là còn hạn bảo hành!"); return;
                                    }
                                    var datareturn = [];
                                    var dataShopCode = $.grep(dataShopOffices, function (item, index) {
                                        return item.Code + '-' + item.Name == myData[0].ShopOrOffice;
                                    });
                                    var dataIdSys;
                                    var dataParentIdSys;
                                    $.each(myData, function (index, item) {
                                        dataIdSys = $.grep(list, function (item1, index) {
                                            if (item1.Name == item.Property12)
                                                return item1.Id;
                                        });
                                        dataParentIdSys = $.grep(list, function (item2, index) {
                                            if (item2.Name == item.Property12)
                                                return item2.ParentId;
                                        });
                                        var Code = $.grep(ListHXLData, function (item1, index) { return item1.Name == item.Property7 });
                                        datareturn.push({
                                            Id: item.Id == null || item.Id == undefined || item.Id == '' ? 0 : item.Id,
                                            Property8: item.SystemName,
                                            Property1: item.Property1,
                                            Property2: item.Property2 == null || item.Property2 == undefined || item.Property2 == '' ? null : item.Property2,
                                            Property3: item.Property3 == null || item.Property3 == undefined || item.Property3 == '' ? null : item.Property3,
                                            Property4: item.Property4 == null || item.Property4 == undefined || item.Property4 == '' ? null : item.Property4,
                                            Quantity: item.Quantity == null || item.Quantity == undefined || item.Quantity == '' ? null : item.Quantity,
                                            Property5: item.Property5 == null || item.Property5 == undefined || item.Property5 == '' ? null : item.Property5,
                                            Property6: item.Property6 == null || item.Property6 == undefined || item.Property6 == '' ? null : item.Property6,
                                            Quantity1: item.Quantity1 == null || item.Quantity1 == undefined || item.Quantity1 == '' ? null : item.Quantity1,
                                            Property7: item.Property7 == null || item.Property7 == undefined || item.Property7 == '' ? null : item.Property7,
                                            Property9: cfReceiveSPMoi == null || cfReceiveSPMoi == undefined || cfReceiveSPMoi == '' ? null : cfReceiveSPMoi,
                                            Property10: cfSendProductToIT == null || cfSendProductToIT == undefined || cfSendProductToIT == '' ? null : cfSendProductToIT,
                                            Note: item.Note == null || item.Note == undefined || item.Note == '' ? null : item.Note,
                                            SaleCode: cfHetHanBH == null || cfHetHanBH == undefined || cfHetHanBH == '' ? null : cfHetHanBH,
                                            ShopCode: dataShopCode != '' && dataShopCode != null && dataShopCode != undefined ? dataShopCode[0].Code : '',
                                            Property12: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : item.Property12,
                                            IdSystem: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : dataIdSys[0].Id,
                                            ParentIdSystem: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : dataParentIdSys[0].ParentId,
                                            Code: item.Property7 == null || item.Property7 == undefined || item.Property7 == '' ? null : Code[0].Code
                                        });
                                    });
                                    if (CL.StepNo == 1 || CL.StepNo == 2) {
                                        $.ajax({
                                            url: '/Requests/CheckWarehouseConfig',
                                            type: 'GET',
                                            data: {
                                                WarehouseCode: datareturn[0].ShopCode, //Edit - NgoanHT - 15/03/2018 - Sửa lại tham số
                                            },
                                            error: function (jqXHR, textStatus, errorThrown) {
                                                console.log("ERROR!");
                                            },
                                            success: function (datasCF) {
                                                if (datasCF[0].ShopConfig === 0) {
                                                    $('#Approved_HuongXL_45').val('0');
                                                    $('#Details').val(JSON.stringify(datareturn));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));

                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/ChangeStep");
                                                    form.submit();

                                                }
                                                else if (datasCF[0].ShopConfig === 1) {
                                                    $('#Approved_HuongXL_45').val('1');
                                                    $('#Details').val(JSON.stringify(datareturn));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));

                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/ChangeStep");
                                                    form.submit();
                                                }
                                                else if (datasCF[0].ShopConfig === -1) {
                                                    if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                                        $('#Approved_HuongXL_45').val('0');
                                                        $('#Details').val(JSON.stringify(datareturn));
                                                        $('#DetailsCc').val(JSON.stringify(myDataCc));

                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/ChangeStep");
                                                        form.submit();
                                                    }
                                                    else {
                                                        $('#Approved_HuongXL_45').val('1');
                                                        $('#Details').val(JSON.stringify(datareturn));
                                                        $('#DetailsCc').val(JSON.stringify(myDataCc));

                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/ChangeStep");
                                                        form.submit();
                                                    };
                                                };
                                            }
                                        });
                                    }//▼ Add-LuanNT44-06/06/2019-auto hoàn tất
                                    else if ((checkLoaiHeThong == 1 || checkLoaiHeThong == 2) && CL.StepNo == 3) {
                                        var message = $("#Message").val();
                                        $('#Details').val(JSON.stringify(datareturn));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/Complete");
                                        form.submit();
                                    } //▲ Add-LuanNT44-06/06/2019-auto hoàn tất
                                    else {
                                        $('#Approved_HuongXL_45').val('1');
                                        $('#Details').val(JSON.stringify(datareturn));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));

                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    };
                                    //▲ Add - NgoanHT - 29/11/2017 - Loại: 154, 45 - Thêm
                                });
                                $btnComplete.on('click', function () {

                                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                                    $('#ImageValidate').val(checkedVals.join(","));

                                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                                    });

                                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                                        return (item.Property1 !== null && item.Property1 !== undefined && item.Property1 !== '') ||
                                            (item.SystemName !== null && item.SystemName !== undefined && item.SystemName !== '');
                                    });
                                    if (myData.length == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức call log!"); return;
                                    }
                                    var datainvalidSPMoi = [], datainvalidSPBH = [], datainvalidHT = [], datainvalidHTBH = [],
                                        datainvalidHXL = [], datainvalidSLSPMoi = [], datainvalidSLSPBH = [], datainvalidHTCL = [];
                                    $.each(myData, function (index, item) {
                                        if (item.SystemName == '' || item.SystemName == null || item.SystemName == undefined) {
                                            datainvalidHT.push(item);
                                        }
                                        if (item.Property1 == '' || item.Property1 == null || item.Property1 == undefined) {
                                            datainvalidHTCL.push(item);
                                        }
                                        if (item.Property1 == 'Cấp mới' && (item.Property3 == '' || item.Property3 == null || item.Property3 == undefined)) {
                                            datainvalidSPMoi.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && (item.Property2 == '' || item.Property2 == null || item.Property2 == undefined)) {
                                            datainvalidHTBH.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && item.Property2 == 'Gửi sản phẩm thay thế cho shop' && (item.Property3 == '' || item.Property3 == null || item.Property3 == undefined)) {
                                            datainvalidSPMoi.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && item.Property2 == 'Gửi sản phẩm thay thế cho shop' && (item.Property5 == '' || item.Property5 == null || item.Property5 == undefined)) {
                                            datainvalidSPBH.push(item);
                                        }
                                        if (item.Property1 == 'Bảo hành' && CL.StepNo == 3 && (item.Property7 == '' || item.Property7 == null || item.Property7 == undefined)) {
                                            datainvalidHXL.push(item);
                                        }
                                        if (item.Property3 != '' && item.Property3 != null && item.Property3 != undefined && (item.Quantity == '' || item.Quantity == null || item.Quantity == undefined)) {
                                            datainvalidSLSPMoi.push(item);
                                        }
                                        if (item.Property5 != '' && item.Property5 != null && item.Property5 != undefined && (item.Quantity1 == '' || item.Quantity1 == null || item.Quantity1 == undefined)) {
                                            datainvalidSLSPBH.push(item);
                                        }
                                    });
                                    if (datainvalidHTCL.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức CallLog."); return;
                                    }
                                    if (datainvalidSLSPBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập số lượng sản phẩm bảo hành."); return;
                                    }
                                    if (datainvalidHTBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hình thức bảo hành."); return;
                                    }
                                    if (datainvalidSPMoi.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Sản phẩm đổi mới."); return;
                                    }
                                    if (datainvalidSPBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Sản phẩm bảo hành."); return;
                                    }
                                    if (datainvalidHXL.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn hướng xử lý bảo hành."); return;
                                    }
                                    if (datainvalidSLSPMoi.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập số lượng sản phẩm đổi mới."); return;
                                    }
                                    if (datainvalidSLSPBH.length > 0) {
                                        XFunction.RenderMessage("error", "Vui lòng nhập số lượng sản phẩm bảo hành."); return;
                                    }

                                    var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_45]:checked").val();
                                    var cfSendProductToIT = jQuery("input:radio[name=CfSendProductToIT_45]:checked").val();
                                    var cfHetHanBH = jQuery("input:radio[name=CfHanBH_45]:checked").val();

                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Cấp mới' && (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop nhận sản phẩm đổi mới/thay thế của IT."); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Bảo hành' && (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop nhận sản phẩm đổi mới/thay thế của IT."); return;
                                    }
                                    if (CL.StepNo == 2 && respone[0].Property1 == 'Bảo hành' && (cfSendProductToIT == '' || cfSendProductToIT == null || cfSendProductToIT == undefined)) {
                                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop đã gửi sản phẩm cũ về IT."); return;
                                    }
                                    var datareturn = [];
                                    var dataShopCode = $.grep(dataShopOffices, function (item, index) {
                                        return item.Code + '-' + item.Name == myData[0].ShopOrOffice;
                                    });
                                    var dataIdSys;
                                    var dataParentIdSys;
                                    $.each(myData, function (index, item) {
                                        dataIdSys = $.grep(list, function (item1, index) {
                                            if (item1.Name == item.Property12)
                                                return item1.Id;
                                        });
                                        dataParentIdSys = $.grep(list, function (item2, index) {
                                            if (item2.Name == item.Property12)
                                                return item2.ParentId;
                                        });
                                        var Code = $.grep(ListHXLData, function (item1, index) { return item1.Name == item.Property7 });
                                        datareturn.push({
                                            Id: item.Id == null || item.Id == undefined || item.Id == '' ? 0 : item.Id,
                                            Property8: item.SystemName,
                                            Property1: item.Property1,
                                            Property2: item.Property2 == null || item.Property2 == undefined || item.Property2 == '' ? null : item.Property2,
                                            Property3: item.Property3 == null || item.Property3 == undefined || item.Property3 == '' ? null : item.Property3,
                                            Property4: item.Property4 == null || item.Property4 == undefined || item.Property4 == '' ? null : item.Property4,
                                            Quantity: item.Quantity == null || item.Quantity == undefined || item.Quantity == '' ? null : item.Quantity,
                                            Property5: item.Property5 == null || item.Property5 == undefined || item.Property5 == '' ? null : item.Property5,
                                            Property6: item.Property6 == null || item.Property6 == undefined || item.Property6 == '' ? null : item.Property6,
                                            Quantity1: item.Quantity1 == null || item.Quantity1 == undefined || item.Quantity1 == '' ? null : item.Quantity1,
                                            Property7: item.Property7 == null || item.Property7 == undefined || item.Property7 == '' ? null : item.Property7,
                                            Property9: cfReceiveSPMoi == null || cfReceiveSPMoi == undefined || cfReceiveSPMoi == '' ? null : cfReceiveSPMoi,
                                            Property10: cfSendProductToIT == null || cfSendProductToIT == undefined || cfSendProductToIT == '' ? null : cfSendProductToIT,
                                            Note: item.Note == null || item.Note == undefined || item.Note == '' ? null : item.Note,
                                            SaleCode: cfHetHanBH == null || cfHetHanBH == undefined || cfHetHanBH == '' ? null : cfHetHanBH,
                                            ShopCode: dataShopCode != '' && dataShopCode != null && dataShopCode != undefined ? dataShopCode[0].Code : '',
                                            Property12: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : item.Property12,
                                            IdSystem: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : dataIdSys[0].Id,
                                            ParentIdSystem: item.Property12 == null || item.Property12 == undefined || item.Property12 == '' ? null : dataParentIdSys[0].ParentId,
                                            Code: item.Property7 == null || item.Property7 == undefined || item.Property7 == '' ? null : Code[0].Code
                                        });
                                    });

                                    var message = $("#Message").val();
                                    $('#Details').val(JSON.stringify(datareturn));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/Complete");
                                    form.submit();
                                });
                            });
                        });
                    });
                });
            });
        });
    };

    function contruct_48() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $.get('/Requests/GetAllEmpQA', function (data_QA) {
                var dataHandsontable = [];
                $.each(respone, function (index, item) {
                    dataHandsontable.push({
                        'Id': item.Id,
                        'HaveConvertation': item.HaveConvertation,
                        'HaveConvertation1': item.HaveConvertation1,
                        'RequestId': null,
                        'ItemId': null,
                        'Quantity': null,
                        'Note': null,
                        'Status': null,
                        'Sum': null,
                        'QuantityAvaiable': null,
                        'EmpCode': item.EmpCode,
                        'EmployeeName': item.EmployeeName,
                        'Price': null,
                        'NoticeAlertId': null,
                        'ShopCode': item.ShopCode,
                        'WarehouseName': item.WarehouseName,
                        'OfficeCode': item.OfficeCode,
                        'OrganizationHierachyName': item.OrganizationHierachyName,
                        'CustomerCode': null,
                        'CustomerName': null,
                        'SaleCode': null,
                        'Time1': item.Time1,
                        'Time2': null,
                        'Money1': item.Money1,
                        'Money2': item.Money2, // Add - LuanNT44 - 30/08/2019 - Thêm cột inside
                        'ProductCode': null,
                        'ProductName': null,
                        'Imei': null,
                        'Time3': null,
                        'Money3': null,
                        'Money4': null,
                        'Approved': item.Approved,
                        'EmpCode1': null,
                        'EmpCode2': item.EmpCode2,
                        'EmployeeName2': item.EmployeeName2,
                        'Quantity1': item.Quantity1,
                        'Quantity2': item.Quantity2,
                        'Quantity3': item.Quantity3,
                        'Quantity4': item.Quantity4,
                        'Property1': item.Property1,
                        'Property2': item.Property2,
                        'Property3': item.Property3,
                        'Property4': item.Property4,
                        'JobCode1': null,
                        'JobCode2': null,
                        'EmpCode3': null,
                        'ShopCode2': null,
                        'Property5': item.Property5,
                        'Property6': item.Property6,
                        'Quantity5': item.Quantity5,
                        'Quantity6': null,
                        'Property7': item.Property7,
                        'Property8': item.Property8,
                        'Property9': item.Property9,
                        'Property10': item.Property10,
                        'Property11': item.Property11, // Edit - LuanNT44 - 22/01/2019 - Loại: 48 - thêm cột inside
                        'Property12': item.Property12, // Edit - LuanNT44 - 22/01/2019 - Loại: 48 - thêm cột inside
                    });
                });
                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                });

                var AssGroup = false;
                var Sender_whatch = false;
                permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? AssGroup = true : AssGroup = false;
                permisstion.isSender == true || AssGroup == true ? Sender_whatch = true : Sender_whatch = false;
                var empQA = [];
                empQA = data_QA;

                var check_QA = 0;
                $.each(empQA, function (index, item) {
                    if (CurrentUserInside === item.EmployeeCode) {
                        check_QA++;
                    }
                });
                var flag_48 = 0;
                $.each(dataHandsontable, function (index, item) {
                    if (CurrentUserInside === item.EmpCode) {
                        flag_48++;
                    }
                });

                if (check_QA == 0 && Sender_whatch == false && flag_48 == 0 && AssGroup == false) {
                    window.open('/Home', '_self');
                    XFunction.RenderMessage('error', 'Bạn không xem được callog này'); return;
                }

                var shopOrOffice = '';
                dataHandsontable[0]['WarehouseName'] != null ? shopOrOffice = 'WarehouseName' : shopOrOffice = 'OrganizationHierachyName';
                var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                    var data = $.grep(instance.getData(), function (item, index) {
                        return index == row && prop == 'button';
                    });
                    var $button = ''
                    if (data[0].HaveConvertation == 1) {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                    } else {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                    }
                    var flagGiaiTrinh = 0;
                    $.each(respone, function (index, item) {
                        if (item.EmpCode1 === CurrentUserInside) {
                            flagGiaiTrinh = 1;
                        }
                    });
                    if (permisstion.isAssiner || permisstion.isGroupAssiner || flagGiaiTrinh === 1) {
                        $button.click(function () {
                            $('#MessageGiaiTrinh').val('');
                            $('#modalBodyGiaitrinh').empty();
                            var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                            $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                            if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                                $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                    if (respone !== undefined && respone !== '' && respone !== null) {
                                        var inner = '';
                                        $.each(respone, function (index, item) {
                                            inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                                '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                                ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                        });
                                        $('#modalBodyGiaitrinh').html(inner);
                                        $('#modalBodyGiaitrinh').show();
                                    } else {
                                        $('#modalBodyGiaitrinh').hide();
                                    }
                                    $('#modalGiaiTrinh').modal('show');
                                });
                            }
                        });
                    } else {
                        $button.click(function () {
                            XFunction.RenderMessage('error', 'Bạn không phải người xử lý của callog này');
                        });
                    }

                    $(td).empty().append($button);

                };
                //▲ Edit - LuanNT44 - 06/03/2019 - Loại: 48 - thêm DK giải trình
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: dataHandsontable,
                        //================================Cols=======
                        maxCols: 21,
                        minCols: 21,
                        startCols: 21,
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: false,
                        columnSorting: false,
                        colWidths: 'undefined',
                        copyColsLimit: 21,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 0,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 21,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: false,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 0,
                        maxRows: dataHandsontable.length,
                        minRows: dataHandsontable.length,
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: false,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: false,
                        //====================================Oder ==============================================
                        colHeaders: [
                            'Giải trình (Shop nhập giải trình tại đây)',
                            'Theo yêu cầu',
                            'Nội dung kiểm tra',
                            'Nội dung vi phạm',
                            'Số lần lặp',
                            'Phòng ban/ Shop',
                            'Nhân viên vi phạm',
                            'Mức độ xử lý',
                            'Số tiền phạt',
                            'Số tiền phạt thêm', // Add - LuanNT44 - 30/08/2019 - Thêm cột inside
                            '% trừ INC',
                            'Tháng',
                            'Năm',
                            'Hướng dẫn thực hiện đúng',
                            'Hướng dẫn tra cứu tài liệu liên quan',
                            'Quy trình/Quy định vi phạm',
                            'Vùng miền',
                            'Chức danh',
                            'Người ghi nhận',
                            'Ngày ghi nhận',
                            'Mã số phiếu ID'],
                        columns: [
                            { data: "button", renderer: actionRenderer },
                            { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Property2', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Property4', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Quantity1', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: shopOrOffice, type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'EmployeeName', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Property5', type: 'text', className: 'htLeft', readOnly: true },
                            { data: 'Money1', type: 'text', className: 'htLeft', readOnly: true },
                            { data: 'Money2', type: 'numeric', format: '0,0', className: 'htLeft', readOnly: true }, // Add - LuanNT44 - 30/08/2019 - Thêm cột inside
                            { data: 'Quantity3', type: 'text', className: 'htLeft', readOnly: true },
                            { data: 'Quantity4', type: 'text', className: 'htLeft', readOnly: true },
                            { data: 'Quantity5', type: 'text', className: 'htLeft', readOnly: true },
                            { data: 'Property11', type: 'text', readOnly: true, className: 'htLeft' },//thêm mới inside
                            { data: 'Property12', type: 'text', readOnly: true, className: 'htLeft' },//thêm mới inside
                            { data: 'Property7', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Property8', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Property9', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'EmployeeName2', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Time1', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Property10', type: 'text', readOnly: true, className: 'htLeft' },
                        ],
                    };
                };
                hot = new Handsontable(container, setting());
                hot.selectCell(0, 0, 0, 0);
                $('#btnSendGiaiTrinh').on('click', function () {
                    var message = $('#MessageGiaiTrinh').val();
                    var id = $(this).attr('data-value');
                    var row = $(this).attr('data-id');

                    if (message === null || message === undefined || message.trim() === '') {
                        XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                        return false;
                    }
                    $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                        if (respone == 1) {
                            hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                            hot.setDataAtRowProp(row, 'HaveConvertation1', 1, 'edit');
                            $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                            XFunction.RenderMessage('success', 'Gửi giải trình thành công <br /> Bạn phải nhập nội dung trao đổi và bấm hoàn tất giải trình để lưu nội dung giải trình');
                        } else {
                            $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                            XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                        }
                        $('#MessageGiaiTrinh').val('');
                        $('#modalGiaiTrinh').modal('hide');
                    });
                    XFunction.RenderMessage('success', 'Hệ thống ghi nhận phản hồi của nhân viên vi phạm” và bắn mail auto !'); //Edit - LuanNT44 - 06/03/2019 - Loại: 48 - thêm DK giải trình
                });
                $btnComment.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $('#Message').val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                        return false;
                    }

                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== '' && item.HaveConvertation1 == 0
                    });
                    if (myData.length > 0) {
                        XFunction.RenderMessage('error', '<p>Bạn phải nhập giải trình vào cột giải trình, nếu không giải trình thì hệ thống mặc định là bạn đồng ý với nội dung xử lý vi phạm.<p>' +
                            '<p><input type="button" class="btn btn-success" value="Đồng ý" id="btndongy" /><p>') //Edit - LuanNT44 - 22/01/2019 - Loại: 48 - thêm cột inside
                        $('#btndongy').on('click', function () {
                            var message = 'Đồng ý với nội dung xử lý vi phạm.';
                            $.each(myData, function (index, item) {
                                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: item.Id, step: requestInfo.StepNo, message: message }, function (respone) { });
                            });
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        });
                        return;
                    }

                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                });
                $btnReply.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                        return false;
                    } else {
                        $('#Details').val(JSON.stringify(''));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }
                });
                $btnChangeStep.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                });
                $btnComplete.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== '' && item.HaveConvertation1 == 0
                    });
                    if (myData.length > 0) {
                        XFunction.RenderMessage('error', '<p>Bạn phải nhập giải trình vào cột giải trình, nếu không giải trình thì hệ thống mặc định là bạn đồng ý với nội dung xử lý vi phạm.<p>' +
                            '<p><input type="button" class="btn btn-success" value="Đồng ý" id="btndongy" /><p>') //Edit - LuanNT44 - 22/01/2019 - Loại: 48 - thêm cột inside
                        $('#btndongy').on('click', function () {
                            var message = 'Đồng ý với nội dung xử lý vi phạm.';
                            $.each(myData, function (index, item) {
                                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: item.Id, step: requestInfo.StepNo, message: message }, function (respone) { });
                            });
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        });
                        return;
                    }

                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                });
            });
        });
    };

    //  65:Hàng demo
    function contruct_65() {
        //▼	Edit - VietMXH - 22/10/2018 - Fix Trao đổi CL 65:Hàng demo==================================================
        //▼	Edit - TuanNA89 - 28/12/2018 - Fix Trao đổi CL 65:Hàng demo
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var l_GetProductPosAll = [];
            $.get('/DirectionAction/GetProductPosAll', null, function (respone) {
                l_GetProductPosAll = respone;
            });
            var dataHandsontable = [];
            dataHandsontable = respone;
            $.each(dataHandsontable, function (index, item) {
                if (item.Images != null && item.Images != undefined && item.Images != '') {
                    var images = item.Images.toString().split(',');
                    var stringImage = '';
                    $.each(images, function (index1, item1) {
                        var duoi = item1.split('.')[1].toLowerCase();
                        if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                            stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-picture-o"></i>' + (index1 + 1) + '</a>  ||';
                        } else if ($.inArray(duoi, ['zip', 'rar']) !== -1) {
                            stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-file-archive-o"></i>' + (index1 + 1) + '</a>  ||';
                        } else {
                            stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i>' + (index1 + 1) + '</a>   ||';
                        }
                    });
                    item.Images = stringImage;
                } else {
                    item.Images = '';
                }
            });
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isoldStepAssigner: false };
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner +=
                                        '<div class="timeline-comment">' +
                                        '   <div class="timeline-comment-header">' +
                                        '       <img src="/assets/images/people.png" />' +
                                        '       <p>' + item.Column1 + '</p>' +
                                        '   </div>' +
                                        '   <p class="timeline-comment-text">' + item.Message + '</p>' +
                                        '</div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionRendererUpload = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-upload" style="color:green"></i>');
                $button.click(function () {
                    if (!check) {
                        XFunction.RenderMessage('error', 'Bạn không có quyền upload hình ảnh trên yêu cầu này'); return;
                    } else {
                        var row = $(this).attr('data-value');
                        $('#btnuploadDetails').attr('data-value', hot.getDataAtRowProp(row, 'Id')).attr('data-id', row);
                        $('#uploadDetails').val('');
                        $('#myModalUpload').modal('show');
                    }
                });
                $(td).empty().append($button);
            };
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isoldStepAssigner = true;
            });
            var check = permisstion.isAssiner == true ||
                permisstion.isGroupAssiner == true ||
                permisstion.isoldStepAssigner == true
                ? true : false;

            //======== Ẩn các nút nếu CL không có người xử lý
            if (Assign == 'Chưa có người xử lý' && CL.StepNo == 1) {
                $btnComment.hide();
            }
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 12,
                    minCols: 12,
                    startCols: 12,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 21,
                    currentColClassName: 'currentCol',
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 12,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Shop', 'Imei', 'Mã sản phẩm', 'Tên sản phẩm', 'Màu sắc', 'Mã nhóm hàng', 'Số lượng', 'Số lượng bắt buộc', 'Kho xuất', 'Lý do', 'Trao đổi', 'Upload Hình ảnh', 'Hình ảnh đính kèm theo line'],
                    columns: [
                        { data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property2', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property5', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'QuantityAvaiable', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property4', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property3', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: "button", renderer: actionRenderer },
                        { data: "button", renderer: actionRendererUpload },
                        { data: "Images", renderer: "html", className: 'htLeft', editor: false },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                if (!check) {
                    XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này');
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                    return;
                }
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');
                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });
            });
            $("#UploadForm").submit(function (e) {
                var data = new FormData();
                var selectedFiles = $("#uploadDetails")[0].files;
                if (selectedFiles.length == 0) {
                    e.preventDefault();
                    $('#myModalUpload').modal('hide');
                    XFunction.RenderMessage('error', 'Không có file để lưu');
                    return;
                }
                var fileExtension = ['jpeg', 'jpg', 'png', 'gif', 'bmp'];
                var Error = [];
                $.each(selectedFiles, function (index, item) {
                    var fileNameExt = selectedFiles[index].name.substr(selectedFiles[index].name.lastIndexOf('.') + 1);
                    if ($.inArray(fileNameExt.toLowerCase(), fileExtension) == -1) {
                        Error.push(index + 1);
                    }
                });
                if (Error.length > 0) {
                    alert("File hình ảnh phải có định dạng đuôi ['jpeg', 'jpg', 'png', 'gif', 'bmp']!");
                    return false;
                }
                else {
                    $.each(selectedFiles, function (index, item) {
                        data.append(selectedFiles[index].name, selectedFiles[index]);
                    });
                    var requestdetailId = $('#btnuploadDetails').attr('data-value');
                    var rowline = $('#btnuploadDetails').attr('data-id');
                    $.ajax({
                        type: "POST",
                        url: "/Requests/SaveUploadedFileDetail?RequsetDetailId=" + requestdetailId,
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            $('#myModalUpload').modal('hide');
                            if (result.error == 0) {
                                var fileNames = $.parseJSON(result.Message);
                                var stringImage = '';
                                $.each(fileNames, function (index1, item1) {
                                    var duoi = item1.split('.')[1].toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-picture-o"></i>new' + (index1 + 1) + '   </a>   ||';
                                    }
                                    else if ($.inArray(duoi, ['zip', 'rar']) !== -1) {
                                        stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-archive-o"></i>new' + (index1 + 1) + '    </a>   ||';
                                    } else {
                                        stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i>new' + (index1 + 1) + '    </a>   ||';
                                    }
                                });
                                var dataRow = hot.getDataAtRowProp(rowline, 'Images');
                                hot.setDataAtRowProp(rowline, 'Images', dataRow + stringImage, 'not');
                                XFunction.RenderMessage('success', 'Lưu ' + fileNames.length + ' file thành công');
                            } else {
                                XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                            }
                        },
                        error: function () {
                            $('#myModalUpload').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }
                    });
                }
                e.preventDefault();
            });
            $btnComment.on('click', function () {
                if (Assign == 'Chưa có người xử lý' && CL.StepNo == 1) {
                    return false;
                }
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });

                    if (permisstion.isSender == true) {
                        //  Không bắt đính kèm Image
                    }
                    else if (permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isoldStepAssigner == true) {
                        if (!item.Images || item.Images === '') {
                            dataImgesInvalid.push(index + 1);
                        }
                    }
                });

                if (dataImgesInvalid.length > 0 && CL.StepNo == 2) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
            });
            $btnReply.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });
                    if (item.Images === '' || item.Images === null || item.Images === undefined) {
                        dataImgesInvalid.push(index + 1);
                    }
                });

                if (dataImgesInvalid.length > 0 && CL.StepNo == 1) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
            });
            $btnChangeStep.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                var dataImeiInvalid = [];

                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });

                    var l_Check_ProductCode_QLSerial = $.grep(l_GetProductPosAll, function (element, count) {
                        return (element.ProductCode === item.ProductCode && element.QLSerial === 'Y')
                    });
                    if (l_Check_ProductCode_QLSerial.length > 0) {
                        if (item.Property5 == '0') {
                            if (splitImeisValid.length < item.Quantity) {
                                dataImeiInvalid.push(index + 1);
                            }
                        } else {
                            if (splitImeisValid.length < item.QuantityAvaiable) {
                                dataImeiInvalid.push(index + 1);
                            }
                        }
                    }

                    if (item.Images === '' || item.Images === null || item.Images === undefined) {
                        dataImgesInvalid.push(index + 1);
                    }
                });

                if (dataImgesInvalid.length > 0 && CL.StepNo == 2) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }

                if (dataImeiInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Imei chưa hợp lệ hoặc chưa đầy đủ : " + dataImeiInvalid.join(','));
                    return false;
                }

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $btnComplete.on('click', function () {
                if (CL.Status == 4) {
                    XFunction.RenderMessage("error", "Yêu cầu đã được hoàn tất. Không thể thao tác");
                    return false;
                }

                if (CL.Status == 5) {
                    XFunction.RenderMessage("error", "Yêu cầu đã bị hủy. Không thể thao tác");
                    return false;
                }

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                var dataImeiInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });

                    var l_Check_ProductCode_QLSerial = $.grep(l_GetProductPosAll, function (element, count) {
                        return (element.ProductCode === item.ProductCode && element.QLSerial === 'Y')
                    });
                    if (l_Check_ProductCode_QLSerial.length > 0) {
                        if (item.Property5 == '0') {
                            if (splitImeisValid.length < item.Quantity) {
                                dataImeiInvalid.push(index + 1);
                            }
                        } else {
                            if (splitImeisValid.length < item.QuantityAvaiable) {
                                dataImeiInvalid.push(index + 1);
                            }
                        }
                    }

                    if (item.Images === '' || item.Images === null || item.Images === undefined) {
                        dataImgesInvalid.push(index + 1);
                    }
                });

                if (dataImgesInvalid.length > 0 && CL.StepNo == 2) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }

                if (dataImeiInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Imei chưa hợp lệ hoặc chưa đầy đủ : " + dataImeiInvalid.join(','));
                    return false;
                }

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
        //▲	Edit - TuanNA89 - 28/12/2018 - Fix Trao đổi CL 65:Hàng demo
        //▲	Edit - VietMXH - 22/10/2018 - Fix Trao đổi CL 65:Hàng demo==================================================
    };

    function contruct_50() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            $.each(dataHandsontable, function (index, item) {
                if (item.Images != null && item.Images != undefined && item.Images != '') {
                    var images = item.Images.toString().split(',');
                    var stringImage = '';
                    $.each(images, function (index1, item1) {
                        var duoi = item1.split('.')[1].toLowerCase();
                        if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                            stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-picture-o"></i>' + (index1 + 1) + '</a>  ||';
                        } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                            stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-file-archive-o"></i>' + (index1 + 1) + '</a>  ||';
                        } else {
                            stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i>' + (index1 + 1) + '</a>   ||';
                        }

                    });
                    item.Images = stringImage;
                } else {
                    item.Images = '';
                }
            });
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isoldStepAssigner: false };
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionRendererUpload = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = '';
                //===== Hiền.Đoàn 01.10.2016 ẩn nút đính kèm hình
                //////$button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-upload" style="color:green"></i>');

                //////$button.click(function () {
                //////    if (!check) {
                //////        XFunction.RenderMessage('error', 'Bạn không có quyền upload hình ảnh trên yêu cầu này'); return;
                //////    } else {
                //////        var row = $(this).attr('data-value');
                //////        $('#btnuploadDetails').attr('data-value', hot.getDataAtRowProp(row, 'Id')).attr('data-id', row);
                //////        $('#uploadDetails').val('');
                //////        $('#myModalUpload').modal('show');
                //////    }
                //////});
                //////$(td).empty().append($button);
            };
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isoldStepAssigner = true;
            });
            var check = permisstion.isAssiner == true ||
                permisstion.isGroupAssiner == true ||
                permisstion.isoldStepAssigner == true
                ? true : false;
            var CheckAssigner = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 10,
                    minCols: 10,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 21,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 10,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Shop', 'Imei', 'Mã sản phẩm', 'Tên sản phẩm', 'Màu sắc', 'Số lượng', 'Kho xuất', 'Lý do', 'Trao đổi', 'Upload Hình ảnh', 'Hình ảnh đính kèm theo line'],
                    columns: [
                        { data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property2', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property4', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property3', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: "button", renderer: actionRenderer },
                        { data: "button", renderer: actionRendererUpload },
                        { data: "Images", renderer: "html", className: 'htLeft', editor: false },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);



            $('#btnSendGiaiTrinh').on('click', function () {
                if (!check) {
                    XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này');
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                    return;
                }

                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });
            $("#UploadForm").submit(function (e) {
                var data = new FormData();
                var selectedFiles = $("#uploadDetails")[0].files;
                if (selectedFiles.length == 0) {
                    e.preventDefault();
                    $('#myModalUpload').modal('hide');
                    XFunction.RenderMessage('error', 'Không có file để lưu');
                    return;
                }
                $.each(selectedFiles, function (index, item) {
                    data.append(selectedFiles[index].name, selectedFiles[index]);
                });
                var requestdetailId = $('#btnuploadDetails').attr('data-value');
                var rowline = $('#btnuploadDetails').attr('data-id');
                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetail?RequsetDetailId=" + requestdetailId,
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        $('#myModalUpload').modal('hide');
                        if (result.error == 0) {
                            var fileNames = $.parseJSON(result.Message);
                            var stringImage = '';
                            $.each(fileNames, function (index1, item1) {
                                var duoi = item1.split('.')[1].toLowerCase();
                                if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                    stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-picture-o"></i>new' + (index1 + 1) + '   </a>   ||';
                                }
                                else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                    stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-archive-o"></i>new' + (index1 + 1) + '    </a>   ||';
                                } else {
                                    stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i>new' + (index1 + 1) + '    </a>   ||';
                                }
                            });
                            var dataRow = hot.getDataAtRowProp(rowline, 'Images');
                            hot.setDataAtRowProp(rowline, 'Images', dataRow + stringImage, 'not');
                            XFunction.RenderMessage('success', 'Lưu ' + fileNames.length + ' file thành công');
                        } else {
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }
                    },
                    error: function () {
                        $('#myModalUpload').modal('hide');
                        XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                    }
                });
                e.preventDefault();
            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });
                    if (item.Images === '' || item.Images === null || item.Images === undefined) {
                        dataImgesInvalid.push(index + 1);
                    }
                });

                //▼ Add - TuanNA89 - 19/12/2018 -- Bỏ chặn up hình đối với người xử lý
                if (!CheckAssigner) {
                    if (dataImgesInvalid.length > 0) {
                        XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                        return false;
                    }
                }
                //▲ Add - TuanNA89 - 19/12/2018 -- Bỏ chặn up hình đối với người xử lý

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                }
                //============== Hiền. Đoàn 03.10.2016 Kiểm tra hình up lại
                var CheckIamges = false;
                $.get('/ReportImages/KiemTraHinhDaDuocDuyetChua', { RequestId: CL.Id }, function (data) {
                    if (data.length > 0) {
                        $.each(data, function (index, item) {
                            if (item.Result == 1) {
                                CheckIamges = true;
                            }
                            else {
                                CheckIamges = false;
                            }
                        });
                        if (CheckIamges == true && CheckAssigner == true) {
                            XFunction.RenderMessage("error", "Vui lòng up lại đầy đủ những hình ảnh bị từ chối!");
                            return false;
                        }
                        else {
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                    }
                });
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });
                    if (item.Images === '' || item.Images === null || item.Images === undefined) {
                        dataImgesInvalid.push(index + 1);
                    }


                });

                if (dataImgesInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                }

                //============== Hiền. Đoàn 03.10.2016 Kiểm tra hình up lại
                var CheckIamges = false;
                $.get('/ReportImages/KiemTraHinhDaDuocDuyetChua', { RequestId: CL.Id }, function (data) {
                    if (data.length > 0) {
                        $.each(data, function (index, item) {
                            if (item.Result == 1) {
                                CheckIamges = true;
                            }
                            else {
                                CheckIamges = false;
                            }
                        });
                        if (CheckIamges == true && CheckAssigner == true) {
                            XFunction.RenderMessage("error", "Vui lòng up lại đầy đủ những hình ảnh bị từ chối!");
                            return false;
                        }
                        else {
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Reply");
                            form.submit();
                        }
                    }
                });

                //==============
            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });
                    if (item.Images === '' || item.Images === null || item.Images === undefined) {
                        dataImgesInvalid.push(index + 1);
                    }


                });

                if (dataImgesInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();


            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });
                    if (item.Images === '' || item.Images === null || item.Images === undefined) {
                        dataImgesInvalid.push(index + 1);
                    }


                });

                if (dataImgesInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }
                //============== Hiền. Đoàn 03.10.2016 Kiểm tra hình up lại
                var CheckIamges = false;
                $.get('/ReportImages/KiemTraHinhDaDuocDuyetChua', { RequestId: CL.Id }, function (data) {
                    if (data.length > 0) {
                        $.each(data, function (index, item) {
                            if (item.Result == 1) {
                                CheckIamges = true;
                            }
                            else {
                                CheckIamges = false;
                            }
                        });
                        if (CheckIamges == true && CheckAssigner == true) {
                            XFunction.RenderMessage("error", "Vui lòng up lại đầy đủ những hình ảnh bị từ chối!");
                            return false;
                        }
                        else {
                            var message = $("#Message").val();
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Complete");
                            form.submit();
                        }
                    }
                });

            });
        });
    };  //Xác nhận hình ảnh hàng demo
    function contruct_97() {
        $('#sum-money').hide();
        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            dataDebt = data;
            dataDebtAllow = data;
            var checkSender = false, checkAssiner = false;
            $.each(permissons, function (index, item) {
                if (item == 'sender') { checkSender = true; }
                if (item == 'assigner' || item == 'groupAssigner') { checkAssiner = true }
            });
            var Setting_Debt = function () {
                return {
                    data: dataDebt,
                    rowHeaders: true,
                    colHeaders: true,
                    fillHandle: false,
                    stretchH: 'all',
                    startCols: 14,
                    maxCols: 14,
                    minCols: 14,
                    formulas: true,
                    comments: true,
                    allowInvalid: false,
                    outsideClickDeselects: true,
                    currentRowClassName: 'currentRow',
                    //currentColClassName: 'currentCol',
                    manualColumnResize: true,
                    manualRowResize: true,
                    minSpareRows: 1,
                    maxRows: dataDebt.length + 1,
                    //contextMenu: true,
                    colHeaders: ["Shop/Phòng ban", "Mã khách hàng", "Tên khách hàng", "Số hóa đơn", "Ngày Chứng từ", "Ngày đến hạn", "Số SO", "Diễn giải", "Tiền Chứng từ", "Dư Chứng từ", "Số xác nhận", "Số chênh lệch", "Giải trình", "Nhập giải trình"],
                    columns: [
                        { data: "WarehouseName", readOnly: true, className: 'htLeft' },
                        { data: "CustomerCode", readOnly: true, className: 'htLeft' },
                        { data: "CustomerName", readOnly: true, className: 'htLeft' },
                        { data: "SaleCode", readOnly: true, className: 'htLeft' },
                        { data: "Time1", readOnly: true, className: 'htLeft' },
                        { data: "Time2", readOnly: true, className: 'htLeft' },
                        { data: "Property1", readOnly: true, className: 'htLeft' },
                        {
                            data: "Note", readOnly: true, className: 'htLeft',
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 7 && row === dataDebt.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Money1', readOnly: true, type: 'numeric', format: '0,0', className: 'htRight',
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 8 && row === dataDebt.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataDebt, function (index, item) {
                                        (item.Money1 !== null && item.Money1 !== undefined && item.Money1 !== "" && !isNaN(item.Money1)) ? total += item.Money1 : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Money2', readOnly: true, type: 'numeric', format: '0,0', className: 'htRight',
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 9 && row === dataDebt.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataDebt, function (index, item) {
                                        (item.Money2 !== null && item.Money2 !== undefined && item.Money2 !== "" && !isNaN(item.Money2)) ? total += item.Money2 : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Money3', readOnly: !checkAssiner, type: 'numeric', format: '0,0', className: 'htRight', validator: Validater.number, allowInvalid: false,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 10 && row === dataDebt.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataDebt, function (index, item) {
                                        (item.Money3 !== null && item.Money3 !== undefined && item.Money3 !== "" && !isNaN(item.Money3)) ? total += item.Money3 : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Difference', type: 'numeric', format: '0,0', readOnly: true, className: 'htRight',
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 11 && row === dataDebt.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataDebt, function (index, item) {
                                        (item.Difference !== null && item.Difference !== undefined && item.Difference !== "" && !isNaN(item.Difference)) ? total += item.Difference : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        { data: "Conversations", renderer: 'html', readOnly: true, className: 'htLeft' },
                        { data: "EnterConversations", className: 'htLeft', className: 'htLeft' },
                        //{ data: 'Approved', readOnly: !checkSender, type: 'checkbox', validator: Validater.checkBox, allowInvalid: false }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') {
                            return;
                        }
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], coll = changes[i][1];
                            if (coll == "Money3") {
                                var rowData = hot.getDataAtRow(row);
                                hot.setDataAtCell(row, 11, Math.abs(rowData[9] - changes[i][3]), 'not');
                            }
                        }
                    },
                };

            };
            var hot = new Handsontable(container, Setting_Debt());
            $.each(hot.getData(), function (index, item) {
                if (item.Id !== undefined && item.Id !== null && item.Id !== "") {

                    if (item.Money3 === null || item.Money3 === "" || item.Money3 === "") item.Money3 = 0;

                    var newdate = item.Time2.split("/").reverse().join("/"), dateValue = new Date(newdate);
                    if ((dateValue.getTime() <= new Date().getTime())) { hili.push(index); }

                    var rootConvertation = item.Conversations;
                    //hot.setDataAtCell(index, 10, Math.abs(item.Money3 - item.Money2));

                    if (item.Conversations !== null && item.Conversations !== undefined && item.Conversation !== "") {
                        var dataConversations = item.Conversations.split("</br>"), rootConvertation = item.Conversations;
                        $.each(dataConversations, function (indexs, item) {
                            rootConvertation = rootConvertation.replace("</br>", ". (" + (indexs + 1) + ")\n");
                        });
                        rootConvertation += ". (" + dataConversations.length + ")";

                        if (dataConversations.length > 0) {
                            item.Conversations = "(" + dataConversations.length + ")" + dataConversations[dataConversations.length - 1];
                            commetConvertation.push({ indexrow: index, comment: rootConvertation });
                        }
                    }


                }
            });
            hot.updateSettings({
                cells: function (row, col, prop) {
                    var cellProperties = {};

                    var data = $.grep(hili, function (item, index) {
                        return item === row;
                    });

                    var dataComment = $.grep(commetConvertation, function (item, index) {
                        return item.indexrow === row;
                    });

                    if (data.length > 0 &&
                        (col === 0 || col === 1 || col === 2 || col === 3 || col === 4 || col === 5 || col === 6 || col === 7)) {
                        cellProperties.renderer = functionCellColor.headerRenderer;
                    }
                    if (data.length > 0 && (col === 8 || col === 9 || col === 11)) {
                        cellProperties.readOnly = true;
                    }
                    if (dataComment.length > 0 && col == 12) {
                        cellProperties.comment = dataComment[0].comment;
                    }
                    if (row == dataDebt.length - 1) {
                        cellProperties.readOnly = true;
                    }
                    return cellProperties;
                }
            });
            $('.htCommentTextArea').attr('readonly', 'readonly');
            $("#comment").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var dataInValid = [];
                $.each(myData, function (index, item) {
                    var newdate = item.Time2.split("/").reverse().join("/"), dateValue = new Date(newdate);
                    if (item.Money3 != item.Money2 || (dateValue.getTime() <= new Date().getTime())) {
                        if (item.Conversations === "" || item.Conversations === null || item.Conversations === undefined) {
                            if (item.EnterConversations === "" || item.EnterConversations === null || item.EnterConversations === undefined) {
                                dataInValid.push(item);
                            }
                        }
                    }
                });

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else if (dataInValid.length > 0 && superadmin == false) {
                        XFunction.RenderMessage("error", "Số xác nhận khác số dư chứng từ hoặc các dòng công nợ đã quá hạn  <br/> Vui lòng nhập giải trình");
                    }
                    else {
                        $('#Details').val(JSON.stringify(myData).toString());
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }
                }
            });
            $("#reply").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var dataInValid = [];
                $.each(myData, function (index, item) {
                    var newdate = item.Time2.split("/").reverse().join("/"), dateValue = new Date(newdate);
                    if (item.Money3 != item.Money2 || (dateValue.getTime() <= new Date().getTime())) {
                        if (item.Conversations === "" || item.Conversations === null || item.Conversations === undefined) {
                            if (item.EnterConversations === "" || item.EnterConversations === null || item.EnterConversations === undefined) {
                                dataInValid.push(item);
                            }

                        }
                    }
                });

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else if (dataInValid.length > 0 && superadmin == false) {
                        XFunction.RenderMessage("error", "Số xác nhận khác số dư chứng từ hoặc các dòng công nợ đã quá hạn  <br/> Vui lòng nhập giải trình");
                    }
                    else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }
                }
            });
            $("#complete").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataInValid = [];
                $.each(myData, function (index, item) {
                    var newdate = item.Time2.split("/").reverse().join("/"), dateValue = new Date(newdate);
                    if (item.Money3 != item.Money2 || (dateValue.getTime() <= new Date().getTime())) {
                        if (item.Conversations == "" || item.Conversations == null || item.Conversations == undefined) {
                            if (item.EnterConversations == "" || item.EnterConversations == null || item.EnterConversations == undefined) {
                                dataInValid.push(item);
                            }
                        }
                    }
                });


                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else if (dataInValid.length > 0 && superadmin == false) {
                    XFunction.RenderMessage("error", "Số xác nhận khác số dư chứng từ hoặc các dòng công nợ đã quá hạn  <br/> Vui lòng nhập giải trình");
                }
                else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                }
            });
            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var dataInValid = [];
                $.each(myData, function (index, item) {
                    var newdate = item.Time2.split("/").reverse().join("/"), dateValue = new Date(newdate);
                    if (item.Money3 != item.Money2 || (dateValue.getTime() <= new Date().getTime())) {
                        if (item.Conversations == "" || item.Conversations == null || item.Conversations == undefined) {
                            if (item.EnterConversations == "" || item.EnterConversations == null || item.EnterConversations == undefined) {
                                dataInValid.push(item);
                            }
                        }
                    }
                });
                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else if (dataInValid.length > 0 && superadmin == false) {
                    XFunction.RenderMessage("error", "Số xác nhận khác số dư chứng từ hoặc các dòng công nợ đã quá hạn  <br/> Vui lòng nhập giải trình");
                }
                else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                }
            });
            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });
        });
    };
    function contruct_53() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $('#captionHot1').html('Thông tin quỹ tiền mặt bàn giao').css('font-weight', 'bold').css('color', 'green');
            $('#captionHot2').html('Giao dịch chưa hoàn tất trên hệ thống').css('font-weight', 'bold').css('color', 'green');
            var table1 = $.grep(respone, function (item, index) {
                return item.Property2 == 1;
            });
            var table2 = $.grep(respone, function (item, index) {
                return item.Property2 == 2;
            });
            var $$ = function (id) { return document.getElementById(id); },
                container1 = $$('tableDetails'), hot1,
                container2 = $$('handsontableEx2'), hot2;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1 ? true : false;
            var actionHot = 0;
            var actionRenderer1 = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r1' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r1' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    if (check == false) {
                        XFunction.RenderMessage('error', 'Bạn không có quyền nhập giải trình trên callog này');
                        return;
                    }

                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    actionHot = 1;
                    var requestdatailId = hot1.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionRenderer2 = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r2' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r2' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    if (check == false) {
                        XFunction.RenderMessage('error', 'Bạn không có quyền nhập giải trình trên callog này');
                        return;
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    actionHot = 2;
                    var requestdatailId = hot2.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var setting1 = function () {
                return {
                    //=================================Data=======
                    data: table1,
                    //================================Cols=======
                    maxCols: 7,
                    minCols: 7,
                    startCols: 7,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 7,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 1,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 7,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: 7,
                    minRows: 7,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Loại thu tiền', 'Số tiền đã thu', 'Số tiền bàn giao', 'Chênh lệch', 'Số tiền xác nhận', 'Giải trình', 'Lý do'],
                    columns: [
                        {
                            data: 'Property1', type: 'text', readOnly: true, className: "htLeft",
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col == 0 && row == 6) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'left';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.TextRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Money1', format: '0,0', type: 'numeric', width: 150, readOnly: true,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 1 && row === 6) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    var colls = instance.getDataAtCol(1);
                                    var sum = 0;
                                    $.each(colls, function (index, item) {
                                        sum += Handsontable.helper.isNumeric(item) ? item : 0;
                                    });
                                    value = sum;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Money2', format: '0,0', type: 'numeric', width: 150, readOnly: true,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 2 && row === 6) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    var colls = instance.getDataAtCol(2);
                                    var sum = 0;
                                    $.each(colls, function (index, item) {
                                        sum += Handsontable.helper.isNumeric(item) ? item : 0;
                                    });
                                    value = sum;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Diffrent', format: '0,0', type: 'numeric', width: 150, readOnly: true,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 3 && row === 6) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    var colls = instance.getDataAtCol(3);
                                    var sum = 0;
                                    $.each(instance.getData(), function (index, item) {
                                        var money1 = Handsontable.helper.isNumeric(item.Money1) ? item.Money1 : 0;
                                        var money2 = Handsontable.helper.isNumeric(item.Money2) ? item.Money2 : 0;
                                        var dix = money1 - money2;
                                        sum += dix;
                                    });
                                    value = sum;
                                } else if (col === 3 && row !== 6) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    var money1 = Handsontable.helper.isNumeric(instance.getDataAtCell(row, 1)) ? instance.getDataAtCell(row, 1) : 0;
                                    var money2 = Handsontable.helper.isNumeric(instance.getDataAtCell(row, 2)) ? instance.getDataAtCell(row, 2) : 0;
                                    var dix = money1 - money2;
                                    value = dix;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Money3', format: '0,0', type: 'numeric', width: 150, readOnly: !check
                        },
                        { data: "button", renderer: actionRenderer1 },
                        { data: 'Note', type: 'text', width: 500, className: "htLeft", readOnly: true, },
                    ],
                };
            };
            hot1 = new Handsontable(container1, setting1());
            hot1.updateSettings({
                cells: function (row, col, prop) {
                    var cellProperties = {};
                    if (row == 6) {
                        cellProperties.readOnly = true;
                    }
                    return cellProperties;
                }
            })
            var setting2 = function () {
                return {
                    //=================================Data=======
                    data: table2,
                    //================================Cols=======
                    maxCols: 6,
                    minCols: 6,
                    startCols: 6,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 6,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 1,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: 7,
                    minRows: 7,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Tên giao dịch', 'Tên khách hàng', 'Số tiền', 'Số tiền xác nhận', 'Giải trình', 'Lý do'],
                    columns: [
                        {
                            data: 'Property1', type: 'text', width: 150, className: 'htLeft', readOnly: true,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col == 0 && row == 6) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'left';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.TextRenderer.apply(this, arguments);
                            }
                        },
                        { data: 'CustomerName', type: 'text', width: 300, className: 'htLeft', readOnly: true, },
                        {
                            data: 'Money1', format: '0,0', type: 'numeric', width: 150, readOnly: true,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 2 && row === 6) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    var colls = instance.getDataAtCol(2);
                                    var sum = 0;
                                    $.each(colls, function (index, item) {
                                        sum += Handsontable.helper.isNumeric(item) ? item : 0;
                                    });
                                    value = sum;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Money3', format: '0,0', type: 'numeric', width: 150, readOnly: !check
                        },
                        { data: "button", renderer: actionRenderer2 },
                        { data: 'Note', type: 'text', width: 500, className: 'htLeft', readOnly: true, },
                    ],
                };
            };
            hot2 = new Handsontable(container2, setting2());
            hot2.updateSettings({
                cells: function (row, col, prop) {
                    var cellProperties = {};
                    if (row == 6) {
                        cellProperties.readOnly = true;
                    }
                    return cellProperties;
                }
            });
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        if (actionHot == 1) {
                            hot1.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        } else if (actionHot == 2) {
                            hot2.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        }
                        $('#r' + actionHot + '' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var mydata = [];
                var datainvalid1 = [], dataInvalid2 = [];
                function getdatatwo() {
                    var myData1 = hot1 == undefined ? [] : $.grep(hot1.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myData2 = hot1 == undefined ? [] : $.grep(hot2.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    $.each(myData1, function (index, item) {
                        if (item.Money2 != item.Money3 && item.HaveConvertation != 1) {
                            datainvalid1.push(item);
                        }
                        mydata.push(item);
                    });
                    $.each(myData2, function (index, item) {
                        if (item.Money1 != item.Money3 && item.HaveConvertation != 1) {
                            dataInvalid2.push(item);
                        }
                        mydata.push(item);
                    });
                }; getdatatwo();

                var message = $('#Message').val();

                if (datainvalid1.length > 0) {
                    XFunction.RenderMessage("error", "Bảng 1 : Nhập giải trình cho các dòng có Số tiền bàn giao khác Số tiền xác nhận"); return;
                }
                if (dataInvalid2.length > 0) {
                    XFunction.RenderMessage("error", "Bảng 2 : Nhập giải trình cho các dòng có Số tiền khác Số tiền xác nhận"); return;
                }
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();

            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var mydata = [];
                var datainvalid1 = [], dataInvalid2 = [];
                function getdatatwo() {
                    var myData1 = hot1 == undefined ? [] : $.grep(hot1.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myData2 = hot1 == undefined ? [] : $.grep(hot2.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    $.each(myData1, function (index, item) {
                        if (item.Money2 != item.Money3 && item.HaveConvertation != 1) {
                            datainvalid1.push(item);
                        }
                        mydata.push(item);
                    });
                    $.each(myData2, function (index, item) {
                        if (item.Money1 != item.Money3 && item.HaveConvertation != 1) {
                            dataInvalid2.push(item);
                        }
                        mydata.push(item);
                    });
                }; getdatatwo();

                var message = $('#Message').val();

                if (datainvalid1.length > 0) {
                    XFunction.RenderMessage("error", "Bảng 1 : Nhập giải trình cho các dòng có Số tiền bàn giao khác Số tiền xác nhận"); return;
                }
                if (dataInvalid2.length > 0) {
                    XFunction.RenderMessage("error", "Bảng 2 : Nhập giải trình cho các dòng có Số tiền khác Số tiền xác nhận"); return;
                }
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return;
                }
                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var mydata = [];
                var datainvalid1 = [], dataInvalid2 = [];
                function getdatatwo() {
                    var myData1 = hot1 == undefined ? [] : $.grep(hot1.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myData2 = hot1 == undefined ? [] : $.grep(hot2.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    $.each(myData1, function (index, item) {
                        if (item.Money2 != item.Money3 && item.HaveConvertation != 1) {
                            datainvalid1.push(item);
                        }
                        mydata.push(item);
                    });
                    $.each(myData2, function (index, item) {
                        if (item.Money1 != item.Money3 && item.HaveConvertation != 1) {
                            dataInvalid2.push(item);
                        }
                        mydata.push(item);
                    });
                }; getdatatwo();

                var message = $('#Message').val();

                if (datainvalid1.length > 0) {
                    XFunction.RenderMessage("error", "Bảng 1 : Nhập giải trình cho các dòng có Số tiền bàn giao khác Số tiền xác nhận"); return;
                }
                if (dataInvalid2.length > 0) {
                    XFunction.RenderMessage("error", "Bảng 2 : Nhập giải trình cho các dòng có Số tiền khác Số tiền xác nhận"); return;
                }

                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var mydata = [];
                var datainvalid1 = [], dataInvalid2 = [];
                function getdatatwo() {
                    var myData1 = hot1 == undefined ? [] : $.grep(hot1.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myData2 = hot1 == undefined ? [] : $.grep(hot2.getData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    $.each(myData1, function (index, item) {
                        if (item.Money2 != item.Money3 && item.HaveConvertation != 1) {
                            datainvalid1.push(item);
                        }
                        mydata.push(item);
                    });
                    $.each(myData2, function (index, item) {
                        if (item.Money1 != item.Money3 && item.HaveConvertation != 1) {
                            dataInvalid2.push(item);
                        }
                        mydata.push(item);
                    });
                }; getdatatwo();

                var message = $('#Message').val();

                if (datainvalid1.length > 0) {
                    XFunction.RenderMessage("error", "Bảng 1 : Nhập giải trình cho các dòng có Số tiền bàn giao khác Số tiền xác nhận"); return;
                }
                if (dataInvalid2.length > 0) {
                    XFunction.RenderMessage("error", "Bảng 2 : Nhập giải trình cho các dòng có Số tiền khác Số tiền xác nhận"); return;
                }

                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });

        });
    };
    function contruct_100() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var isSave = false;
            if (respone !== null && respone !== '' && respone !== undefined && respone.length > 0) {
                isSave = true;
                var dataHandsontable = [];
                dataHandsontable = respone;
                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                });
                var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
                var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                    var data = $.grep(instance.getData(), function (item, index) {
                        return index == row && prop == 'button';
                    });
                    var $button = ''
                    if (data[0].HaveConvertation == 1) {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                    } else {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                    }

                    $button.click(function () {
                        if (!check) {
                            XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này'); return;
                        }
                        $('#MessageGiaiTrinh').val('');
                        $('#modalBodyGiaitrinh').empty();
                        var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                        $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                        if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                            $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                if (respone !== undefined && respone !== '' && respone !== null) {
                                    var inner = '';
                                    $.each(respone, function (index, item) {
                                        inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                            '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                            ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                    });
                                    $('#modalBodyGiaitrinh').html(inner);
                                    $('#modalBodyGiaitrinh').show();
                                } else {
                                    $('#modalBodyGiaitrinh').hide();
                                }
                                $('#modalGiaiTrinh').modal('show');
                            });
                        }
                    });
                    $(td).empty().append($button);
                };
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: dataHandsontable,
                        //================================Cols=======
                        maxCols: 6,
                        minCols: 6,
                        startCols: 6,
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: false,
                        columnSorting: false,
                        colWidths: 'undefined',
                        copyColsLimit: 5,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 0,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 6,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: false,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 0,
                        //startRows: 10,
                        //viewportRowRenderingOffset : 'auto',
                        maxRows: dataHandsontable.length + 4,
                        minRows: dataHandsontable.length + 4,
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: false,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: false,
                        //====================================Oder ==============================================
                        colHeaders: ['Tên shop', 'Tên nhân viên', 'Chức danh', 'Số tiền phạt', 'Tên nhân viên phạt cần cập nhật lại', 'Giải trình'],
                        columns: [
                            { data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'EmpName1', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'JobTitleName', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Money1', type: 'numeric', readOnly: true, className: 'htLeft', format: '0,00' },
                            {
                                data: 'EmpName2', type: "autocomplete", allowInvalid: true, strict: false, className: 'htLeft', width: 250
                            },
                            { data: "button", renderer: actionRenderer }
                        ],
                        afterInit: function () {
                            var instance = this;
                            var data = instance.getData();
                            var value;
                            var defaultValue
                            for (var row = 0; row < data.length; row++) {
                                value = data[row]['ListEmp'];
                                defaultValue = data[row]['EmpName2'];
                                setAutocompleteSource.call(instance, row, value, defaultValue);
                            }
                            instance.render();
                        },
                    };
                };
                hot = new Handsontable(container, setting());
                hot.selectCell(0, 0, 0, 0);
                function setAutocompleteSource(row, value, defaultValue) {
                    var instance = this;
                    var options = $.parseJSON(value);
                    var cellProperties = instance.getCellMeta(row, 4);
                    cellProperties.source = options;
                }
                $('#btnSendGiaiTrinh').on('click', function () {
                    var message = $('#MessageGiaiTrinh').val();
                    var id = $(this).attr('data-value');
                    var row = $(this).attr('data-id');

                    if (message === null || message === undefined || message.trim() === '') {
                        XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                        return false;
                    }
                    $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                        if (respone == 1) {
                            hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                            $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                            XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                        } else {
                            $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                            XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                        }
                        $('#MessageGiaiTrinh').val('');
                        $('#modalGiaiTrinh').modal('hide');
                    });

                });
                $btnComment.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $('#Message').val();

                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    $.each(myData, function (index, item) {
                        var emcode1 = item.EmpName2.split("--")[0].trim();
                        item.EmpCode1 = emcode1;
                    });
                    var myDataReturn = [];
                    $.each(myData, function (index, item) {
                        myDataReturn.push({ 'Id': item.Id, 'EmpCode1': item.EmpCode1 });
                    });

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                        return false;
                    } else {
                        $('#Details').val(JSON.stringify(myDataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }

                });
                $btnReply.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    $.each(myData, function (index, item) {
                        var emcode1 = item.EmpName2.split("--")[0].trim();
                        item.EmpCode1 = emcode1;
                    });
                    var myDataReturn = [];
                    $.each(myData, function (index, item) {
                        myDataReturn.push({ 'Id': item.Id, 'EmpCode1': item.EmpCode1 });
                    });

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                        return false;
                    } else {
                        $('#Details').val(JSON.stringify(myDataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }

                });
                $btnChangeStep.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    $.each(myData, function (index, item) {
                        var emcode1 = item.EmpName2.split("--")[0].trim();
                        item.EmpCode1 = emcode1;
                    });
                    var myDataReturn = [];
                    $.each(myData, function (index, item) {
                        myDataReturn.push({ 'Id': item.Id, 'EmpCode1': item.EmpCode1 });
                    });

                    $('#Details').val(JSON.stringify(myDataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();

                });
                $btnComplete.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    $.each(myData, function (index, item) {
                        var emcode1 = item.EmpName2.split("--")[0].trim();
                        item.EmpCode1 = emcode1;
                    });
                    var myDataReturn = [];
                    $.each(myData, function (index, item) {
                        myDataReturn.push({ 'Id': item.Id, 'EmpCode1': item.EmpCode1 });
                    });


                    $('#Details').val(JSON.stringify(myDataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();

                });
            }
            if (isSave == false) {
                $btnComment.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $('#Message').val();

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                        return false;
                    } else {
                        $('#Details').val(JSON.stringify(''));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }

                });
                $btnReply.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                        return false;
                    } else {
                        $('#Details').val(JSON.stringify(''));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }

                });
                $btnChangeStep.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();

                });
                $btnComplete.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();



                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();

                });
            }
        });
    };

    function contruct_75() {

        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1 ? true : false;
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    if (!check) {
                        XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này'); return;
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            actionPaging();
            var setting = function () {
                return {
                    //=================================Data=======
                    data: $.grep(dataHandsontable, function (item, index) {
                        return index < pageSize;
                    }),
                    //================================Cols=======
                    maxCols: 9,
                    minCols: 9,
                    startCols: 9,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 9,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 9,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    //maxRows: dataHandsontable.length,
                    //minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Duyệt', 'Không Duyệt', 'Mã sản phẩm', 'Tên sản phẩm', 'Serial / Imei',
                        //'Shop',
                        'Kho xuất', 'Số lượng', 'Giải trình', 'Lý do'],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !checkApp,
                            checkedTemplate: 1, uncheckedTemplate: 0, width: 50
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !checkApp,
                            checkedTemplate: 1, uncheckedTemplate: 0, width: 100
                        },
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Imei', type: 'text', readOnly: true, className: 'htLeft' },
                        //{ data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htRight' },
                        { data: "button", renderer: actionRenderer },
                        { data: 'Property2', readOnly: true, className: 'htLeft', renderer: "html" },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 1, 0, 'not');
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 0, 0, 'not');
                                }
                                return true;
                            }
                        }


                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });

            function contructDataFurtureFinish() {
                if (TimeFutureFinish !== null && TimeFutureFinish !== '' && TimeFutureFinish !== undefined) {
                    var dataStr = '';
                    var TimeFutureFinishGlobal = TimeFutureFinish;
                    var TimeGoliveTimeGolive = TimeGolive;
                    if (TimeGoliveTimeGolive == '' || TimeGoliveTimeGolive == undefined || TimeGoliveTimeGolive == null) {
                        TimeGoliveTimeGolive = TimeFutureFinishGlobal;
                    }
                    var timeconvertFutureFinish = new Date(TimeFutureFinishGlobal).toDateInputValue();
                    var TimeGoliveTimeGolive = new Date(TimeGoliveTimeGolive).toDateInputValue();

                    if (permisstion.isSender == true) {
                        dataStr += '<p><table>';
                        dataStr += '<tr>';
                        dataStr += '<td>Ngày dự kiến hoàn thành :</td>';
                        dataStr += '<td><input type="date" class="form-control"  name="TimeFinishData" id="TimeFinishData"  /></td>';
                        dataStr += '<td><button type="button" class="btn btn-success" data-toggle="modal" id="btnUpdateTimeFutureFinish"><i class="fa fa-paper-plane-o"></i></button></td>';
                        dataStr += '</tr>';
                        dataStr += '</table></p>';
                        $('#captionHot1').html(dataStr);
                        $('#TimeFinishData').val(timeconvertFutureFinish);
                        $('#btnUpdateTimeFutureFinish').on('click', function () {
                            var dataUpdateNew = $('#TimeFinishData').val();
                            if (dataUpdateNew === '' || dataUpdateNew === undefined || dataUpdateNew === null || dataUpdateNew < TimeGoliveTimeGolive) {
                                XFunction.RenderMessage('error', 'Ngày cập nhật mới phải lớn hơn hoặc bằng ngày cập nhật lúc tạo callLog : ' + TimeGoliveTimeGolive);
                                return;
                            }
                            $.get('/Requests/UpdateTimeFutureFinish', { Data: dataUpdateNew, RequestId: CL.Id }, function (respone) {
                                if (respone == 1) {
                                    XFunction.RenderMessage('success', 'Cập nhật thành công');
                                } else {
                                    XFunction.RenderMessage('error', 'Cập nhật không thành công vui long xem lai dữ liệu');
                                }
                            });
                        });
                    } else {
                        var currentTime = new Date(TimeFutureFinishGlobal);
                        var month = currentTime.getMonth() + 1;
                        var day = currentTime.getDate();
                        var year = currentTime.getFullYear();
                        var date = day + "/" + month + "/" + year;
                        dataStr += '<p style="width:400px">';
                        dataStr += 'Ngày dự kiến hoàn thành ' + date;
                        dataStr += '</p>';
                        $('#captionHot1').html(dataStr);
                    }
                }

            };
            contructDataFurtureFinish();

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                $.each(mydata, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : false
                    });
                });
                if (CL.StepNo !== 1) {
                    dataReturn = [];
                }

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                $.each(mydata, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : false
                    });
                });
                if (CL.StepNo !== 1) {
                    dataReturn = [];
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                $.each(mydata, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : false
                    });
                });
                if (CL.StepNo !== 1) {
                    dataReturn = [];
                }

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                $.each(mydata, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : false
                    });
                });
                if (CL.StepNo !== 1) {
                    dataReturn = [];
                }

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };  //Xuất khác
    function contruct_74() {
        //Xuất sử dụng
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    if (!check) {
                        XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này'); return;
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            actionPaging();
            var setting = function () {
                return {
                    //=================================Data=======
                    data: $.grep(dataHandsontable, function (item, index) {
                        return index < pageSize;
                    }),
                    //================================Cols=======
                    maxCols: 8,
                    minCols: 8,
                    startCols: 8,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 8,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 1,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 8,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    //maxRows: dataHandsontable.length,
                    //minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Mã sản phẩm', 'Tên sản phẩm', 'Serial / Imei', 'Shop', 'Kho xuất', 'Số lượng', 'Giải trình', 'Lý do'],
                    columns: [
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Imei', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htRight' },
                        { data: "button", renderer: actionRenderer },
                        { data: 'Property2', readOnly: true, className: 'htLeft', renderer: "html" },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            function contructDataFurtureFinish() {
                var dataStr = '';
                var TimeFutureFinishGlobal = TimeFutureFinish;
                var TimeGoliveTimeGolive = TimeGolive;
                if (TimeGoliveTimeGolive == '' || TimeGoliveTimeGolive == undefined || TimeGoliveTimeGolive == null) {
                    TimeGoliveTimeGolive = TimeFutureFinishGlobal;
                }
                var timeconvertFutureFinish = new Date(TimeFutureFinishGlobal).toDateInputValue();
                var TimeGoliveTimeGolive = new Date(TimeGoliveTimeGolive).toDateInputValue();

                if (permisstion.isSender == true) {
                    dataStr += '<p><table>';
                    dataStr += '<tr>';
                    dataStr += '<td>Ngày dự kiến hoàn thành :</td>';
                    dataStr += '<td><input type="date" class="form-control"  name="TimeFinishData" id="TimeFinishData"  /></td>';
                    dataStr += '<td><button type="button" class="btn btn-success" data-toggle="modal" id="btnUpdateTimeFutureFinish"><i class="fa fa-paper-plane-o"></i></button></td>';
                    dataStr += '</tr>';
                    dataStr += '</table></p>';
                    $('#captionHot1').html(dataStr);
                    $('#TimeFinishData').val(timeconvertFutureFinish);
                    $('#btnUpdateTimeFutureFinish').on('click', function () {
                        var dataUpdateNew = $('#TimeFinishData').val();
                        if (dataUpdateNew === '' || dataUpdateNew === undefined || dataUpdateNew === null || dataUpdateNew < TimeGoliveTimeGolive) {
                            XFunction.RenderMessage('error', 'Ngày cập nhật mới phải lớn hơn hoặc bằng ngày cập nhật lúc tạo callLog : ' + TimeGoliveTimeGolive);
                            return;
                        }
                        $.get('/Requests/UpdateTimeFutureFinish', { Data: dataUpdateNew, RequestId: CL.Id }, function (respone) {
                            if (respone == 1) {
                                XFunction.RenderMessage('success', 'Cập nhật thành công');
                            } else {
                                XFunction.RenderMessage('error', 'Cập nhật không thành công vui long xem lai dữ liệu');
                            }
                        });
                    });
                } else {
                    var currentTime = new Date(TimeFutureFinishGlobal);
                    var month = currentTime.getMonth() + 1;
                    var day = currentTime.getDate();
                    var year = currentTime.getFullYear();
                    var date = day + "/" + month + "/" + year;
                    dataStr += '<p style="width:400px">';
                    dataStr += 'Ngày dự kiến hoàn thành ' + date;
                    dataStr += '</p>';
                    $('#captionHot1').html(dataStr);
                }
            };
            contructDataFurtureFinish();

            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });
            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };
    function contruct_82() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var soureDropdownKho = ['Kho hàng bán', 'Kho hàng trưng bày', 'Kho bảo hành', 'Kho hàng ký gởi', 'Sổ tài sản BI', 'Kho máy cũ', 'Kho khuyến mãi']
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-plus" style="color:red"></i>');

                $button.click(function () {
                    var row = $(this).attr('data-value');
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    if (requestdatailId !== null && requestdatailId !== undefined && requestdatailId !== '') {
                        var data = $.grep(hot.getData(), function (item, index) {
                            return index == row;
                        });

                        dataHandsontable.unshift({
                            HaveConvertation: 0,
                            Id: 0,
                            Money1: data[0].Money1,
                            Money2: 0,
                            Property1: data[0].Property1,
                            Property2: data[0].Property2,
                            Property3: data[0].Property3,
                            Property4: data[0].Property4,
                            Property5: "",
                            Property6: "",
                            Property7: "",
                            Property8: "",
                            Property9: data[0].Property9,
                            Quantity: data[0].Quantity,
                            RequestId: 0
                        });
                        hot.render();
                        XFunction.RenderMessage('success', 'Nhập thông tin sản phẩm sau tách'); return;
                    } else {
                        XFunction.RenderMessage('error', 'Chi tiết không tồn tại'); return;
                    }
                });
                $(td).empty().append($button);
            };
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 13,
                    minCols: 13,
                    startCols: 13,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 13,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 13,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 4,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Thêm',
                            'Mã hàng cần tách',
                            'Thiết bị và cấu hình trước tách',
                            'Serial/Imei',
                            'Kho xuất',
                            'Số lượng',
                            'Giá bán',
                            'Mã hàng được tách',
                            'Thiết bị và cấu hình sau tách',
                            'Serial/Imei',
                            'Kho nhập',
                            'Giá nhập',
                            'Lý do'
                        ],
                    columns: [
                        { data: "button", renderer: actionRenderer },
                        { data: 'Property1', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', width: 350, readOnly: true },
                        { data: 'Property3', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'Property4', type: 'text', className: 'htLeft', width: 150, readOnly: true },
                        { data: 'Quantity', type: 'numeric', className: 'htLeft', width: 150, format: '0,00', readOnly: true },
                        { data: 'Money1', type: 'numeric', className: 'htLeft', width: 150, format: '0,00', readOnly: true },
                        { data: 'Property5', type: 'text', className: 'htLeft', width: 200, readOnly: !check },
                        { data: 'Property6', type: 'text', className: 'htLeft', width: 350, readOnly: !check },
                        { data: 'Property7', type: 'text', className: 'htLeft', width: 200, readOnly: !check },
                        { data: 'Property8', type: 'dropdown', className: 'htLeft', source: soureDropdownKho, width: 150, readOnly: !check },
                        { data: 'Money2', type: 'numeric', className: 'htLeft', width: 150, format: '0,00', readOnly: !check },
                        { data: 'Property9', type: 'text', className: 'htLeft', width: 500, readOnly: true },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            hot.updateSettings({
                cells: function (row, col, prop) {
                    var cellProperties = {};
                    var line = dataHandsontable.length
                    if (row == line - 1 || row == line - 2 || row == line - 3 || row == line - 4) {
                        cellProperties.readOnly = true;
                    }
                    return cellProperties;
                }
            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }


                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }


                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }  // Tách cấu hình

    //▼	Edit - VietMXH - 11/09/2018 - 102:Kiêm kê kho==================================================
    function contruct_102() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            $.each(dataHandsontable, function (index, item) {
                if (item.Images != null && item.Images != undefined && item.Images != '') {
                    var images = item.Images.toString().split(',');
                    var stringImage = '';
                    $.each(images, function (index1, item1) {
                        var duoi = item1.split('.')[1];
                        if (duoi === '' || duoi === undefined || duoi === null) {
                            duoi = '';
                        } else {
                            var l_Url = '';
                            $.ajax({
                                async: false,
                                url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                type: "GET",
                                data: { Url: item1 },
                                success: function (p_ActionResult) {
                                    l_Url = p_ActionResult;
                                }
                            });
                            if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i>' + (index1 + 1) + '</a>  ||';
                            } else if ($.inArray(duoi, ['rar', 'zip']) !== -1) {
                                stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-file-archive-o"></i>' + (index1 + 1) + '</a>  ||';
                            } else {
                                stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i>' + (index1 + 1) + '</a>   ||';
                            }
                        }
                    });
                    item.Images = stringImage;
                }
            });
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isoldStepAssigner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isoldStepAssigner = true;
            });
            var check = permisstion.isAssiner == true ||
                permisstion.isGroupAssiner == true ||
                permisstion.isoldStepAssigner == true
                ? true : false;
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 2 ? true : false;
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ''
                                        + '<div class="timeline-comment">'
                                        + '    <div class="timeline-comment-header">'
                                        + '        <img src="/assets/images/people.png" />'
                                        + '        <p>' + item.Column1 + '</p>'
                                        + '    </div>'
                                        + '    <p class="timeline-comment-text">' + item.Message + '</p>'
                                        + '</div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionRendererUpload = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-upload" style="color:green"></i>');
                $button.click(function () {
                    if (!check) {
                        XFunction.RenderMessage('error', 'Bạn không có quyền upload hình ảnh trên yêu cầu này'); return;
                    } else {
                        var row = $(this).attr('data-value');
                        $('#btnuploadDetails').attr('data-value', hot.getDataAtRowProp(row, 'Id')).attr('data-id', row);
                        $('#uploadDetails').val('');
                        $('#myModalUpload').modal('show');
                    }
                });
                $(td).empty().append($button);
            };
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            actionPaging();

            $('#dowloadSupport').show();
            $('#fileSupp').on('click', function () {
                var dataExp = [];
                $.each(dataHandsontable, function (index, item) {
                    dataExp.push({
                        'Id': item.Id,
                        'ProductCode': item.ProductCode,
                        'ProductName': item.ProductName,
                        'Imei': item.Imei,
                        'Property1': item.Property1,
                        'Quantity': item.Quantity,
                        'QuantityAvaiable': item.QuantityAvaiable,
                        'Diff': item.Diff,

                        //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                        ////'Property2': item.Property2,
                        ////'Property3': item.Property3,
                        ////'Property4': item.Property4,
                        ////'Property5': item.Property5,
                        ////'Property6': item.Property6,
                        ////'Property7': item.Property7,
                        ////'Property8': item.Property8,
                        ////'CustomerName': item.CustomerName,
                        ////'Property9': item.Property9,
                        ////'CustomerCode': item.CustomerCode,
                        ////'Property10': item.Property10,
                        //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                        'SL_XacNhan': item.SL_XacNhan,

                        //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                        ////'ChenhLechSauKhiXacNhan': item.ChenhLechSauKhiXacNhan,
                        //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                    });
                });
                $('#Details').val(JSON.stringify(dataExp));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/DownloadExcelExport");
                form.submit();
            });
            function endFile(name) {
                var extension = name.split('.').pop().toLowerCase();
                if ($.inArray(extension, ['xlsx']) == -1) {
                    XFunction.RenderMessage('error', 'File exel không hợp lệ định dạng file hỗ trợ : xlsx');
                    return false;
                }
                else {
                    return true;
                }
            }

            $('#FileSupport').hide();

            function contructExecl_102() {
                var l__Check__FileSupport = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) ? true : false;
                if (l__Check__FileSupport) {
                    $('#FileSupport').show();
                }
                else {
                    $('#FileSupport').hide();
                }

                var X = XLSX;
                function fixdata(data) {
                    var o = "", l = 0, w = 10240;
                    for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
                    o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
                    return o;
                }
                function to_json(workbook) {
                    var result = {};
                    workbook.SheetNames.forEach(function (sheetName) {
                        var roa = X.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                        if (roa.length > 0) {
                            result[sheetName] = roa;
                        }
                    });
                    return result;
                }
                $('#FileSupport').change(function (event) {
                    var fileValid = false;
                    fileValid = endFile($('#FileSupport').val());
                    if (fileValid) {
                        var files = event.target.files;
                        var f = files[0];
                        {
                            var reader = new FileReader();
                            var name = f.name;
                            reader.onload = function (e) {
                                var data = e.target.result;
                                var arr = fixdata(data);
                                wb = X.read(btoa(arr), { type: 'base64' });
                                var wb;
                                var output = to_json(wb);
                                if (output.Sheet1 !== '' && output.Sheet1 !== undefined && output.Sheet1 !== null) {
                                    var count = 0;
                                    var dataReturnCom = [];
                                    var l_List_KiemKeKho__CheckDetailId = [];

                                    $.each(output.Sheet1, function (index, item) {
                                        if (item.GiaiTrinh !== null && item.GiaiTrinh !== undefined && item.GiaiTrinh !== '' &&
                                            item.Id !== null && item.Id !== '' && item.Id !== undefined) {
                                            dataReturnCom.push({ 'Id': item.Id, 'GiaiTrinh': item.GiaiTrinh });
                                            l_List_KiemKeKho__CheckDetailId.push({
                                                ReqDetId: item.Id
                                            });
                                            count += 1;
                                        }
                                    });
                                    if (count == 0) {
                                        XFunction.RenderMessage("error", "Không có giải trình!"); return;
                                    }

                                    var l__DataCheck = {
                                        p_RequestId: CL.Id,
                                        p_List_KiemKeKho__CheckDetailId: l_List_KiemKeKho__CheckDetailId
                                    };
                                    $.ajax({
                                        async: false,
                                        url: "/Requests/KiemKeKho__CheckDetailId",
                                        type: "POST",
                                        data: l__DataCheck,
                                        success: function (p_ActionResult) {
                                            if (p_ActionResult.length > 0) {
                                                if (p_ActionResult[0].Result == 1) {
                                                    $('#Details').val(JSON.stringify(dataReturnCom));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/CreateConvertation");
                                                    form.submit();
                                                } else {
                                                    XFunction.RenderMessage("error", p_ActionResult[0].Msg); return;
                                                }
                                            } else {
                                                XFunction.RenderMessage("error", "Không có kết quả check ID chi tiết!"); return;
                                            }
                                        },
                                        error: function () {
                                            XFunction.RenderMessage("error", "Lỗi! /Requests/KiemKeKho__CheckDetailId"); return;
                                        }
                                    });
                                } else {
                                    XFunction.RenderMessage("error", "Không có dữ liệu import!"); return;
                                }
                                $('#FileSupport').val('');
                            };
                            reader.readAsArrayBuffer(f);
                        }
                    }
                    $('#FileSupport').val('');
                });
            }
            contructExecl_102();
            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)

                var stringRe = '';
                if (escaped !== null && escaped !== '' && escaped !== undefined) {
                    var i = 0;
                    var arryEs = escaped.split('||');
                    $.each(arryEs, function (index, item) {
                        i++;
                        if (i == 5) {
                            stringRe += item + "<br/>";
                            i = 0;
                        } else {
                            stringRe += item;
                        }
                    });
                } else {
                    stringRe = escaped
                }
                td.innerHTML = stringRe;
                td.style.textAlign = 'Left';
                return td;
            }
            var setting = function () {

                //▼	Add - VietMXH - 20/12/2017 - Thêm Link ảnh POS==================================================
                var l_Renderer_POS_Images_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'POS_Images') {
                        var l_ReqDet_Id = instance.getDataAtRowProp(row, 'Id');
                        if (!!l_ReqDet_Id && l_ReqDet_Id > 0) {
                            var l_ReqDet_POS_Images = instance.getDataAtRowProp(row, 'POS_Images');
                            if (!!l_ReqDet_POS_Images && l_ReqDet_POS_Images.length > 0) {
                                var l_List_ReqDet_POS_Images = l_ReqDet_POS_Images.toString().split('|');
                                var l_POS_Images_String = '';
                                var $btn_POS_Images = '';
                                $.each(l_List_ReqDet_POS_Images, function (p_Index, p_Item) {
                                    l_POS_Images_String += '<a href="' + p_Item + '" target="_blank"><i class="fa fa-picture-o"></i></a> ';
                                });
                                $btn_POS_Images = l_POS_Images_String;
                                $(td).empty().append($btn_POS_Images);
                            }
                            else {
                                $(td).empty();
                            };
                            td.style.textAlign = 'left';
                        };
                    }
                };
                //▲	Add - VietMXH - 20/12/2017 - Thêm Link ảnh POS==================================================

                return {
                    //=================================Data=======
                    data: $.grep(dataHandsontable, function (item, index) {
                        return index < pageSize;
                    }),
                    //================================Cols=======
                    maxCols: 11,
                    minCols: 11,
                    startCols: 11,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 11,
                    currentColClassName: 'currentCol',
                    fixedColumnsLeft: 3,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 11,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: [
                        'Mã sản phẩm', 'Tên sản phẩm', 'Imei', 'Mã kho', 'SL hệ thống', 'SL thực tế', "SL Xác nhận"

                        //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                        ////, "Chênh lệch sau khi xác nhận (SL Xác Nhận - SL Tồn)"
                        //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                        , 'Chênh lệch'

                        //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                        ////, 'Xuất bán', 'Xuất khác', 'Xuất LCNB', 'Nhập NCC', 'Nhập LCNB', 'Nhập khác', 'Nhập đổi trả', 'Nhập thu mua máy cũ', 'Máy gửi BH', 'SL miếng dán BH', 'Mượn bảo hành'
                        //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                        , 'Giải trình', 'Duyệt giải trình', 'Upload Hình ảnh', 'Hình ảnh đính kèm theo line', "Ảnh POS"

                        //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                        , "Giải trình từ App"
                        //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                    ],
                    columns: [
                        { data: 'ProductCode', width: 100, type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', width: 250, type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Imei', width: 100, type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true },
                        { data: 'Quantity', type: 'text', readOnly: true },
                        { data: 'QuantityAvaiable', type: 'text', readOnly: true },
                        { data: 'SL_XacNhan', type: 'text', readOnly: true },

                        //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                        ////{ data: 'ChenhLechSauKhiXacNhan', type: 'text', readOnly: true },
                        //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                        { data: 'Diff', type: 'text', readOnly: true },//Chênh lệch

                        //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                        ////{ data: 'Property2', type: 'text', readOnly: true },//Xuất bán 
                        ////{ data: 'Property3', type: 'text', readOnly: true },// Xuất khác 
                        ////{ data: 'Property4', type: 'text', readOnly: true },//Xuất lcnb  
                        ////{ data: 'Property5', type: 'text', readOnly: true },//Nhập NCC
                        ////{ data: 'Property6', type: 'text', readOnly: true },//Nhập lcnb
                        ////{ data: 'Property7', type: 'text', readOnly: true },//Nhập Khác
                        ////{ data: 'Property8', type: 'text', readOnly: true },// Nhập đổi trả
                        ////{ data: 'CustomerName', type: 'text', readOnly: true },//Nhập thu mua máy cũ
                        ////{ data: 'Property9', type: 'text', readOnly: true },//máy gửi BH
                        ////{ data: 'CustomerCode', type: 'text', readOnly: true },//Số lượng miếng dán BH
                        ////{ data: 'Property10', type: 'text', readOnly: true },//Mượn bảo hành
                        //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                        { data: "button", renderer: actionRenderer },
                        { data: 'Approved', type: 'checkbox', className: 'htLeft', checkedTemplate: true, uncheckedTemplate: false, width: 100, readOnly: !checkApp },
                        { data: "button", renderer: actionRendererUpload },
                        { data: "Images", renderer: safeHtmlRenderer, className: 'htLeft', readOnly: true },
                        { data: "POS_Images", renderer: l_Renderer_POS_Images_Html, className: 'htLeft', readOnly: true },

                        //▼	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================
                        { data: "POS_GiaiTrinhTuApp", type: 'text', readOnly: true },
                        //▲	Add - VietMXH - 27/02/2019 - POS-Ghi chú xác nhận==================================================

                    ],
                };
            };

            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                if (!check) {
                    XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này');
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                    return;
                } else {
                    var message = $('#MessageGiaiTrinh').val();
                    var id = $(this).attr('data-value');
                    var row = $(this).attr('data-id');

                    if (message === null || message === undefined || message.trim() === '') {
                        XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                        return false;
                    }
                    $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                        if (respone == 1) {
                            hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                            $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                            XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                        } else {
                            $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                            XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                        }
                        $('#MessageGiaiTrinh').val('');
                        $('#modalGiaiTrinh').modal('hide');
                    });
                }
            });
            $("#UploadForm").submit(function (e) {
                var data = new FormData();
                var selectedFiles = $("#uploadDetails")[0].files;
                if (selectedFiles.length == 0) {
                    e.preventDefault();
                    $('#myModalUpload').modal('hide');
                    XFunction.RenderMessage('error', 'Không có file để lưu');
                    return;
                }
                $.each(selectedFiles, function (index, item) {
                    data.append(selectedFiles[index].name, selectedFiles[index]);
                });
                var requestdetailId = $('#btnuploadDetails').attr('data-value');
                var rowline = $('#btnuploadDetails').attr('data-id');
                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetail?RequsetDetailId=" + requestdetailId,
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        $('#myModalUpload').modal('hide');
                        if (result.error == 0) {
                            var fileNames = $.parseJSON(result.Message);
                            var stringImage = '';
                            $.each(fileNames, function (index1, item1) {
                                var duoi = item1.split('.')[1].toLowerCase();
                                if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                    stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-picture-o"></i>new' + (index1 + 1) + '   </a>   ||';
                                }
                                else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                    stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-archive-o"></i>new' + (index1 + 1) + '    </a>   ||';
                                } else {
                                    stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i>new' + (index1 + 1) + '    </a>   ||';
                                }
                            });
                            var dataRow = hot.getDataAtRowProp(rowline, 'Images');
                            hot.setDataAtRowProp(rowline, 'Images', dataRow + stringImage, 'not');
                            XFunction.RenderMessage('success', 'Lưu ' + fileNames.length + ' file thành công');
                        } else {
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }
                    },
                    error: function () {
                        $('#myModalUpload').modal('hide');
                        XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                    }
                });
                e.preventDefault();
            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();  //  VietMXH - 05/06/2018 - Fix lỗi thiếu code
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                var dataRet = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved
                    });
                });
                if (CL.StepNo !== 2) {
                    dataReturn = [];
                }

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var message = $('#Message').val();
                var dataInvalid = [];
                var myData = dataHandsontable
                $.each(myData, function (index, item) {
                    if (item.HaveConvertation != 1) {
                        dataInvalid.push(index + 1);
                    }
                });
                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Nhập đầy đủ giải trình trước khi trả lời"); return;
                }

                var dataRet = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved
                    });
                });
                if (CL.StepNo !== 2) {
                    dataReturn = [];
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataInvalid = [];
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(dataHandsontable, function (index, item) {
                    if (item.HaveConvertation != 1) {
                        dataInvalid.push(index + 1);
                    }
                });
                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Nhập đầy đủ giải trình trước khi chuyển bước"); return;
                }

                var dataRet = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved
                    });
                });
                if (CL.StepNo !== 2) {
                    dataReturn = [];
                }


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataInvalid = [];
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                $.each(myData, function (index, item) {
                    if (item.HaveConvertation != 1) {
                        dataInvalid.push(index + 1);
                    }
                });
                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Nhập đầy đủ giải trình trước khi hoàn thành"); return;
                }

                var dataRet = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved
                    });
                });
                if (CL.StepNo !== 2) {
                    dataReturn = [];
                }


                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };
    //▲	Edit - VietMXH - 11/09/2018 - 102:Kiêm kê kho==================================================

    //  ===103:Xuất đổi cấu hình===
    function contruct_103() {
        //▼	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
        //  ===103:Xuất đổi cấu hình===
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var l__Check = {
                Allow_Approve: false,
                Allow_Comment: false,
                Allow_Reply: false,
                Allow_ChangeStep: false,
                Allow_Complete: false
            };

            if (CL.StepNo === 1) {
                if (CL.Status < 3) {
                    l__Check.Allow_Comment = true;
                    l__Check.Allow_ChangeStep = true;
                }
                else if (CL.Status === 3 || CL.Status === 4) {
                    l__Check.Allow_ChangeStep = true;
                }
            }
            else if (CL.StepNo === 2) {
                if (CL.Status <= 3) {
                    l__Check.Allow_Approve = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) ? true : false;
                    l__Check.Allow_Comment = true;
                    l__Check.Allow_Reply = true;
                }
            }

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 15,
                    minCols: 15,
                    startCols: 15,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 15,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 15,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: [
                        'Duyệt', 'Không Duyệt'
                        , 'Mã hàng xuất đổi', 'Thiết bị và cấu hình', 'Serial/ Imei', 'Kho xuất', 'Số lượng', 'Giá nhập'
                        , 'Mã hàng mới', 'Thiết bị và cấu hình', 'Serial/ Imei', 'Kho nhập', 'Số lượng nhập', 'Giá bán'
                        , 'Lý do'],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !l__Check.Allow_Approve,
                            checkedTemplate: 1, uncheckedTemplate: 0, width: 50
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !l__Check.Allow_Approve,
                            checkedTemplate: 1, uncheckedTemplate: 0, width: 100
                        },

                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property2', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property3', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property4', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htRight' },
                        { data: 'Money1', type: 'numeric', readOnly: true, className: 'htRight', format: '0,0' },

                        { data: 'Property5', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property6', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property7', type: 'text', className: 'htLeft', readOnly: true },
                        {
                            data: 'Property8',
                            type: 'text',
                            className: 'htLeft',
                            readOnly: true
                        },
                        { data: 'Quantity1', type: 'text', readOnly: true, className: 'htRight' },
                        { data: 'Money2', type: 'numeric', className: 'htRight', format: '0,0,', readOnly: true },

                        { data: 'Property9', type: 'text', className: 'htLeft', readOnly: true },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 1, 0, 'not');
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 0, 0, 'not');
                                }
                                return true;
                            }
                        }
                    },
                };
            };

            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                if (!l__Check.Allow_Comment) {
                    XFunction.RenderMessage("error", "Không được Trao đổi CallLog!"); return;
                }

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :( !"); return;
                }

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData =
                    (!hot.getData() || hot.getData() == '')
                        ? []
                        : $.grep(hot.getData(), function (item, index) {
                            return (!!item.Id && item.Id != '' && item.Id > 0);
                        });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ!"); return;
                }
                if (l__Check.Allow_Approve == true) {
                    $.each(myData, function (index, item) {
                        item.Approved = (item.Approved1 == 1) ? true : false
                    });
                } else {
                    myData = [];
                }

                var myDataCc =
                    (!hotCc || hotCc == '')
                        ? ""
                        : $.grep(hotCc.getData(), function (item, index) {
                            return ((!!item.id && item.id != '' && item.id > 0) && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc'));
                        });

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {
                if (!l__Check.Allow_Reply) {
                    XFunction.RenderMessage("error", "Không được Trả lời CallLog!"); return;
                }

                var message = $("#Message").val();

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData =
                    (!hot.getData() || hot.getData() == '')
                        ? []
                        : $.grep(hot.getData(), function (item, index) {
                            return (!!item.Id && item.Id != '' && item.Id > 0);
                        });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ!"); return;
                }
                if (l__Check.Allow_Approve == true) {
                    $.each(myData, function (index, item) {
                        item.Approved = (item.Approved1 == 1) ? true : false
                    });
                } else {
                    myData = [];
                }

                var myDataCc =
                    (!hotCc || hotCc == '')
                        ? ""
                        : $.grep(hotCc.getData(), function (item, index) {
                            return ((!!item.id && item.id != '' && item.id > 0) && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc'));
                        });

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
            });
            $btnChangeStep.on('click', function () {
                if (!l__Check.Allow_ChangeStep) {
                    XFunction.RenderMessage("error", "Không được Chuyển bước CallLog!"); return;
                }

                var message = $("#Message").val();

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData =
                    (!hot.getData() || hot.getData() == '')
                        ? []
                        : $.grep(hot.getData(), function (item, index) {
                            return (!!item.Id && item.Id != '' && item.Id > 0);
                        });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ!"); return;
                }
                if (l__Check.Allow_Approve == true) {
                    $.each(myData, function (index, item) {
                        item.Approved = (item.Approved1 == 1) ? true : false
                    });
                } else {
                    myData = [];
                }

                var myDataCc =
                    (!hotCc || hotCc == '')
                        ? ""
                        : $.grep(hotCc.getData(), function (item, index) {
                            return ((!!item.id && item.id != '' && item.id > 0) && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc'));
                        });

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $btnComplete.on('click', function () {
                XFunction.RenderMessage("error", "Không được Hoàn tất CallLog!"); return;
            });
        });
        //▲	Edit - VietMXH - 10/10/2018 - Bỏ bước 3==================================================
    }

    function contruct_104() {
        //xuat đổi cấu hình
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var soureDropdownKho = ['Kho hàng bán', 'Kho hàng trưng bày', 'Kho bảo hành', 'Kho hàng ký gởi', 'Sổ tài sản BI', 'Kho máy cũ', 'Kho khuyến mãi']
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 13,
                    minCols: 13,
                    startCols: 13,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 13,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 13,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length + 4,
                    minRows: dataHandsontable.length + 4,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Shop', 'Mã hàng cần tách', 'Thiết bị và cấu hình', 'Serial/ Imei', 'Kho xuất', 'Số lượng', 'Giá bán', 'Mã hàng được tách', 'Thiết bị và cấu hình', 'Serial/ Imei', 'Kho nhập', 'Giá bán', 'Lý do'],
                    columns: [
                        { data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property2', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property3', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property4', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htRight' },
                        { data: 'Money1', type: 'numeric', readOnly: true, className: 'htRight', format: '0,0' },
                        { data: 'Property5', type: 'text', className: 'htLeft', readOnly: !check },
                        { data: 'Property6', type: 'text', className: 'htLeft', readOnly: !check },
                        { data: 'Property7', type: 'text', className: 'htLeft', readOnly: !check },
                        { data: 'Property8', type: 'dropdown', className: 'htLeft', width: 200, source: soureDropdownKho, allowInvalid: true, readOnly: !check },
                        { data: 'Money2', type: 'numeric', className: 'htRight', format: '0,0,', readOnly: !check },
                        { data: 'Property9', type: 'text', className: 'htLeft', width: 500, readOnly: true },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            hot.updateSettings({
                cells: function (row, col, prop) {
                    var cellProperties = {};
                    var line = dataHandsontable.length
                    if (row == line - 1 || row == line - 2 || row == line - 3 || row == line - 4) {
                        cellProperties.readOnly = true;
                    }
                    return cellProperties;
                }
            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }


                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }


                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    } // xuất đổi cấu hình pm máy cũ
    function contruct_51() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;

            var nguyenNhanGiamGia = [{ id: 0, text: '' }, { id: 1, text: 'CTKM' }, { id: 3, text: 'Giải quyết KNKH' }, { id: 4, text: 'Hàng dự án' },
            { id: 6, text: 'Quỹ giảm giá' }, { id: 7, text: 'Lỗi thẩm mỹ' }, { id: 12, text: 'Thu mua máy BHDV' }];
            var nameNguyenNhanGG = [];
            $.each(nguyenNhanGiamGia, function (index, item) {
                nameNguyenNhanGG.push(item.text);
            });
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {

                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                if (permisstion.isAssiner || permisstion.isGroupAssiner) {
                    $button.click(function () {
                        $('#MessageGiaiTrinh').val('');
                        $('#modalBodyGiaitrinh').empty();
                        var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                        $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                        if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                            $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                if (respone !== undefined && respone !== '' && respone !== null) {
                                    var inner = '';
                                    $.each(respone, function (index, item) {
                                        inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                            '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                            ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                    });
                                    $('#modalBodyGiaitrinh').html(inner);
                                    $('#modalBodyGiaitrinh').show();
                                } else {
                                    $('#modalBodyGiaitrinh').hide();
                                }
                                $('#modalGiaiTrinh').modal('show');
                            });
                        }
                    });
                } else {
                    $button.click(function () {
                        XFunction.RenderMessage('error', 'Bạn không phải người xử lý của callog này');
                    });
                }

                $(td).empty().append($button);
            };
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 3,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 4,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Duyệt',
                            'Không duyệt',
                            'Từ chối duyệt',
                            'Nguyên nhân GG',
                            '% dùng Quỹ giảm giá',
                            'Số tiền dùng Quỹ GG',
                            'Shop',
                            'Số SO',
                            'Loại SO phát sinh',
                            'Mã sản phẩm',
                            'Tên sản phẩm',
                            'Imei',
                            //'Kho xuất',
                            //'Ngày tạo đơn hàng',
                            //'Ngày hoàn tất đơn hàng',
                            '% chiết khấu',
                            'Chiết khấu',
                            //'Khuyến mãi',
                            'Số lượng',
                            //'Thuế',
                            'Tổng tiền',
                            //'Đơn giá sau giảm',
                            'Ghi chú',
                        ],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id !== '' && id !== null && id !== undefined) {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    if (CL.StepNo == 2)
                                        cellProperties.readOnly = true;
                                } else {
                                    cellProperties.readOnly = true;
                                }
                            }
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id !== '' && id !== null && id !== undefined) {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    if (CL.StepNo == 2)
                                        cellProperties.readOnly = true;
                                } else {
                                    cellProperties.readOnly = true;
                                }
                            }
                        },
                        {
                            data: 'Approved3', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id !== '' && id !== null && id !== undefined) {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    if (CL.StepNo == 2)
                                        cellProperties.readOnly = true;
                                } else {
                                    cellProperties.readOnly = true;
                                }
                            }
                        },
                        {
                            data: 'Property7', type: 'dropdown', readOnly: !check, width: 150, source: nameNguyenNhanGG, className: 'htLeft',
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                var trangThaiDuyet = instance.getDataAtRowProp(row, 'Quantity3');
                                if (id !== '' && id !== null && id !== undefined && CL.StepNo == 2 && trangThaiDuyet == 3) {
                                    Handsontable.DropdownCell.renderer.apply(this, arguments);
                                } else {
                                    Handsontable.DropdownCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = true;
                                }
                            }
                        },
                        {
                            data: 'Property8', type: 'numeric', className: 'htLeft', readOnly: !check,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                var trangThaiDuyet = instance.getDataAtRowProp(row, 'Quantity3');
                                if (id !== '' && id !== null && id !== undefined && (CL.StepNo == 2 || CL.StepNo == 3 || CL.StepNo == 4) && trangThaiDuyet == 2) {
                                    Handsontable.TextCell.renderer.apply(this, arguments);
                                } else {
                                    Handsontable.TextCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = true;
                                }
                            }
                        },
                        { data: 'SoTienQuyGG', type: 'numeric', className: 'htLeft', readOnly: !check, format: '0,00', readOnly: true },
                        { data: 'WarehouseName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'SaleCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property12', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Imei', type: 'text', className: 'htLeft', readOnly: true },
                        //{ data: 'Property5', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        //{ data: 'Time1', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        //{ data: 'Time2', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'PTChietKhau', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property1', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,00' },
                        //{ data: 'Property2', type: 'numeric', className: 'htLeft', width: 200, readOnly: !check, format: '0,00' },
                        { data: 'Quantity', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,00' },
                        //{ data: 'Property3', type: 'numeric', className: 'htLeft', width: 200, readOnly: true, format: '0,00' },
                        { data: 'Property4', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,00' },
                        //{ data: 'DonGiaSauGiam', type: 'numeric', className: 'htLeft', width: 200, readOnly: true, format: '0,00' },                        
                        { data: "button", renderer: actionRenderer, readOnly: true },

                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (CL.StepNo != 2) {
                                var ttduyetBD = hot.getDataAtRowProp(row, 'TTDuyetBD');
                                if (CL.StepNo > 2 && ttduyetBD == 2 && CL.Status == 4) {
                                    if (col === 'Approved1') {
                                        var value = changes[i][3];
                                        if (value == true && ttduyetBD == 2) {
                                            hot.setDataAtCell(row, 0, null, 'not');
                                            XFunction.RenderMessage("error", "Khổng thể chuyển từ KHÔNG DUYỆT sang DUYỆT");
                                            return false;
                                        }
                                    }
                                }
                                else if (CL.StepNo == 4 && ttduyetBD == 2) {
                                    if (col === 'Approved1') {
                                        var value = changes[i][3];
                                        if (value == true) {
                                            hot.setDataAtCell(row, 0, null, 'not');
                                            XFunction.RenderMessage("error", "Khổng thể cập nhật trạng thái duyệt");
                                            return false;
                                        }
                                    }
                                }
                                else if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, null, 'not');
                                        hot.setDataAtCell(row, 2, null, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 0, null, 'not');
                                        hot.setDataAtCell(row, 2, null, 'not');
                                    }
                                    return true;
                                }
                                if (CL.StepNo > 2 && ttduyetBD == 2 && CL.Status == 4) {
                                    if (col === 'Approved3') {
                                        var value = changes[i][3];
                                        if (value == true && ttduyetBD == 2) {
                                            hot.setDataAtCell(row, 2, null, 'not');
                                            XFunction.RenderMessage("error", "Khổng thể chuyển từ KHÔNG DUYỆT sang TỪ CHỐI DUYỆT");
                                            return false;
                                        }
                                    }
                                }
                                else if (CL.StepNo == 3) {
                                    if (col === 'Approved3') {
                                        var value = changes[i][3];
                                        if (value == true) {
                                            hot.setDataAtCell(row, 2, null, 'not');
                                            XFunction.RenderMessage("error", "Khổng thể chọn trạng thái TỪ CHỐI DUYỆT");
                                            return false;
                                        }
                                    }
                                }
                                else if (CL.StepNo == 4 && ttduyetBD == 2) {
                                    if (col === 'Approved3') {
                                        var value = changes[i][3];
                                        if (value == true) {
                                            hot.setDataAtCell(row, 2, null, 'not');
                                            XFunction.RenderMessage("error", "Khổng thể cập nhật trạng thái duyệt");
                                            return false;
                                        }
                                    }
                                }
                                else if (col === 'Approved3') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 0, null, 'not');
                                        hot.setDataAtCell(row, 1, null, 'not');
                                    }
                                    return true;
                                }
                            }
                            if (col === 'Property8') {
                                var value = parseFloat(changes[i][3]);
                                var ptChietKhau = hot.getDataAtRowProp(row, 'PTChietKhau');
                                //▼ 51 - Edit - TrungNC3 - 18/09/2017 - Fix lỗi nhập % giảm giá*
                                if (!$.isNumeric(parseInt(value))) {
                                    ////alert(1);
                                    XFunction.RenderMessage("error", "% dùng quỹ phải là số"); return false;
                                }
                                if (value.toString().indexOf("%") === "-1") {
                                    ////alert(2);
                                    XFunction.RenderMessage("error", "% quỹ phải là số"); return false;
                                }
                                if (value > 5) {
                                    XFunction.RenderMessage("error", "% dùng quỹ không được lớn hơn 5"); return false;
                                }
                                if (parseFloat(value) > parseFloat(ptChietKhau)) {
                                    XFunction.RenderMessage("error", "% dùng quỹ không được lớn hơn Phần trăm chiết khấu"); return false;
                                }
                            }
                            if (col === 'Property7') {
                                var nguyenNhanGG_BD = hot.getDataAtRowProp(row, 'NguyenNhanGG_BD');
                                var value = changes[i][3];
                                var ptChietKhau = hot.getDataAtRowProp(row, 'PTChietKhau');
                                if (parseFloat(ptChietKhau) > 5 && value == 'Quỹ giảm giá tại shop' && value != nguyenNhanGG_BD) {
                                    XFunction.RenderMessage("error", "Vượt % giảm giá cho phép, không thể cập nhật nguyên nhân GG"); return false;
                                }
                            }
                        }
                    },
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        var instance = this;
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            if (col === 'Property8') {
                                //var emp = hot2.getDataAtRowProp(row, 'Name');
                                var ptChietKhau = hot.getDataAtRowProp(row, 'PTChietKhau');
                                var chietKhau = hot.getDataAtRowProp(row, 'Property1');
                                var soTienQuyGG = parseFloat(newValue) * parseFloat(chietKhau) / parseFloat(ptChietKhau);
                                hot.setDataAtRowProp(row, 'SoTienQuyGG', soTienQuyGG, 'not');
                                //▲ 51 - Edit - =======================================
                            }
                            if (col === 'Property7') {
                                var maNguyenNhanGG = $.grep(nguyenNhanGiamGia, function (item, index) {
                                    return item.text == newValue;
                                });
                                if (maNguyenNhanGG != '' && maNguyenNhanGG != null && maNguyenNhanGG != undefined) {
                                    hot.setDataAtRowProp(row, 'MaNguyenNhanGG', maNguyenNhanGG[0].id, 'not');
                                }
                                else {
                                    hot.setDataAtRowProp(row, 'MaNguyenNhanGG', 0, 'not');
                                }
                            }
                            if (col === 'Approved1') {
                                //var emp = hot2.getDataAtRowProp(row, 'Name');
                                hot.setDataAtRowProp(row, 'Quantity3', 1, 'not');
                            }
                            if (col === 'Approved2') {
                                //var emp = hot2.getDataAtRowProp(row, 'Name');
                                hot.setDataAtRowProp(row, 'Quantity3', 2, 'not');
                                hot.updateSettings({
                                    cells: function (row, col, prop) {
                                        var cellProperties = {};
                                        if (col == 3 && CL.StepNo != 1) {
                                            cellProperties.readOnly = false;
                                        }
                                        return cellProperties;
                                    }
                                });
                            }
                            if (col === 'Approved3') {
                                //var emp = hot2.getDataAtRowProp(row, 'Name');
                                hot.setDataAtRowProp(row, 'Quantity3', 3, 'not');
                            }
                        });
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        hot.setDataAtRowProp(row, 'HaveConvertation1', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });
            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1 || item.Approved3 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == 1 ? 1 : item.Approved2 == 1 ? 2 : item.Approved3 == 1 ? 3 : 0,
                        Property7: item.Property7 != '' && item.Property7 != null && item.Property7 != undefined ? item.Property7 : null,
                        Property8: item.Property8 != '' && item.Property8 != null && item.Property8 != undefined ? item.Property8 : null,
                        Quantity4: item.MaNguyenNhanGG != '' && item.MaNguyenNhanGG != null && item.MaNguyenNhanGG != undefined ? item.MaNguyenNhanGG : null
                    });
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1 || item.Approved3 == 1) {
                    }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == 1 ? 1 : item.Approved2 == 1 ? 2 : item.Approved3 == 1 ? 3 : 0,
                        Property7: item.Property7 != '' && item.Property7 != null && item.Property7 != undefined ? item.Property7 : null,
                        Property8: item.Property8 != '' && item.Property8 != null && item.Property8 != undefined ? item.Property8 : null,
                        Quantity4: item.MaNguyenNhanGG != '' && item.MaNguyenNhanGG != null && item.MaNguyenNhanGG != undefined ? item.MaNguyenNhanGG : null
                    });
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
            });
            $btnChangeStep.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = [], dataInvalidGiaiTrinh = [], dataInvalidPTQuy = [], dataInvalidNguyenNhanGG = [],
                    dataInvalidTuChoiDuyet = [];
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1 || item.Approved3 == 1) {
                    }
                    else { datainvalid.push(item); }
                    if (item.HaveConvertation != 1 && check == true && (item.Approved2 == 1 || item.Approved3 == 1))
                        dataInvalidGiaiTrinh.push(item);
                    //▼ 51 - Edit - TrungNC3 - 08/10/2017 - Fix điều kiện hoàn tất callLog===============
                    if ((CL.StepNo == 2 || CL.StepNo == 4) && item.Quantity3 == 2 && (item.Property8 == '' || item.Property8 == null || item.Property8 == undefined) && !$.isNumeric(item.Property8)) {
                        dataInvalidPTQuy.push(item);
                    }
                    // 51 - Edit - TrungNC3 - 08/10/2017 - Fix điều kiện hoàn tất callLog===============
                    if (CL.StepNo == 2 && item.Quantity3 == 3 && (item.Property7 == '' || item.Property7 == null || item.Property7 == undefined)) {
                        dataInvalidNguyenNhanGG.push(item);
                    }
                    if (CL.StepNo == 3 && item.Quantity3 == 3) {
                        dataInvalidTuChoiDuyet.push(item);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt"); return;
                }
                if (dataInvalidGiaiTrinh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình nếu không duyệt hoặc từ chối duyệt"); return;
                }
                if (dataInvalidPTQuy.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập phần trăm Quỹ giảm giá"); return;
                }
                if (dataInvalidNguyenNhanGG.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn nguyên nhân giảm giá"); return;
                }
                if (dataInvalidTuChoiDuyet.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn Duyệt hoặc Không duyệt!"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == 1 ? 1 : item.Approved2 == 1 ? 2 : item.Approved3 == 1 ? 3 : 0,
                        Property7: item.Property7 != '' && item.Property7 != null && item.Property7 != undefined ? item.Property7 : null,
                        Property8: item.Property8 != '' && item.Property8 != null && item.Property8 != undefined ? item.Property8 : null,
                        Quantity4: item.MaNguyenNhanGG != '' && item.MaNguyenNhanGG != null && item.MaNguyenNhanGG != undefined ? item.MaNguyenNhanGG : null
                    });
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var datainvalid = [], dataInvalidGiaiTrinh = [], dataInvalidPTQuy = [];
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1 || item.Approved3 == 1) { }
                    else { datainvalid.push(item); }
                    if (item.HaveConvertation != 1 && check == true && (item.Approved2 == 1 || item.Approved3 == 1))
                        dataInvalidGiaiTrinh.push(item);
                    //▼ 51 - Add - TrungNC3 - 25/08/2017 - Fix điều kiện hoàn tất callLog===============
                    if ((CL.StepNo == 3 || CL.StepNo == 4) && item.Quantity3 == 2 && (item.Property8 == '' || item.Property8 == null || item.Property8 == undefined) && !$.isNumeric(item.Property8)) {
                        dataInvalidPTQuy.push(item);
                    }
                });

                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt"); return;
                }
                if (dataInvalidGiaiTrinh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình nếu không duyệt hoặc từ chối duyệt"); return;
                }
                if (dataInvalidPTQuy.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập phần trăm Quỹ giảm giá"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == 1 ? 1 : item.Approved2 == 1 ? 2 : item.Approved3 == 1 ? 3 : 0,
                        Property7: item.Property7 != '' && item.Property7 != null && item.Property7 != undefined ? item.Property7 : null,
                        Property8: item.Property8 != '' && item.Property8 != null && item.Property8 != undefined ? item.Property8 : null,
                        Quantity4: item.MaNguyenNhanGG != '' && item.MaNguyenNhanGG != null && item.MaNguyenNhanGG != undefined ? item.MaNguyenNhanGG : null
                    });
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    }  // Duyet giam gia
    function contruct_56() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            function firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {
                Handsontable.renderers.TextRenderer.apply(this, arguments);
                td.style.fontWeight = 'bold';
                td.style.color = 'green';
                td.style.background = '#CEC';
            }
            function firstRowRendererDefault(instance, td, row, col, prop, value, cellProperties) {
                Handsontable.renderers.TextRenderer.apply(this, arguments);
                td.style.fontWeight = 'normal';
                td.style.background = 'white';
            }
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 11,
                    minCols: 11,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 11,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 11,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Duyệt',
                            'Không duyệt',
                            'Ghi chú',
                            'Số YCĐC',
                            'Mã kho nhận',
                            'Mã shop nhận',
                            'Mã kho xuất',
                            'Mã shop Xuất',
                            'Mã sản phẩm',
                            'Tên sản phẩm',
                            'Số lượng YC',
                            'Tồn kho'
                        ],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        { data: 'Note', type: 'text', className: 'htLeft', width: 200, readOnly: !check },
                        { data: 'Property1', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'ShopRecieve', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'Property3', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'ShopSend', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        //{ data: 'Quantity', type: 'text', className: 'htLeft', width: 200 },
                        { data: 'QuantityNew', type: 'text', className: 'htLeft', width: 200, readOnly: !check },
                        { data: 'Quantity1', type: 'text', className: 'htLeft', width: 200, readOnly: true },

                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (statusRequest != 4) {
                                if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, null, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 0, null, 'not');
                                    }
                                    return true;
                                }
                            }
                            else {
                                if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, null, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, null, 'not');
                                        XFunction.RenderMessage("error", "Không được chuyển sang trạng thái không duyệt khi CallLog đã hoàn tất");
                                    }
                                    return false;
                                }
                            }

                            if (col === 'QuantityNew') {
                                var value = changes[i][3];
                                var oldValue = hot.getDataAtRowProp(row, 'Quantity');
                                if (value > oldValue || value <= 0) {
                                    XFunction.RenderMessage('error', 'Số lượng yêu cầu không được lớn hơn số lượng yêu cầu cũ hoặc <= 0');
                                    return false;
                                }
                                return true;
                            }
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = [];
                var datainvalidQuantity = [];
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                    if (item.QuantityNew > item.Quantity) {
                        datainvalidQuantity.push(item);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                if (datainvalidQuantity.length > 0) {
                    XFunction.RenderMessage('error', 'Số lượng yêu cầu không được lớn hơn số lượng yêu cầu cũ'); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Quantity: item.QuantityNew,
                        Note: item.Note
                    });
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                var datainvalidQuantity = [];
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                    if (item.QuantityNew > item.Quantity) {
                        datainvalidQuantity.push(item);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                if (datainvalidQuantity.length > 0) {
                    XFunction.RenderMessage('error', 'Số lượng yêu cầu không được lớn hơn số lượng yêu cầu cũ'); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Quantity: item.QuantityNew,
                        Note: item.Note
                    });
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
            });
            $btnChangeStep.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                var datainvalidQuantity = [];
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                    if (item.QuantityNew > item.Quantity) {
                        datainvalidQuantity.push(item);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                if (datainvalidQuantity.length > 0) {
                    XFunction.RenderMessage('error', 'Số lượng yêu cầu không được lớn hơn số lượng yêu cầu cũ'); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Quantity: item.QuantityNew,
                        Note: item.Note
                    });
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                var datainvalidQuantity = [];
                var dataApproved = [];
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                    if (item.QuantityNew > item.Quantity) {
                        datainvalidQuantity.push(item);
                    }
                    if (item.Approved1 == 1) {
                        dataApproved.push(item.Id);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                if (datainvalidQuantity.length > 0) {
                    XFunction.RenderMessage('error', 'Số lượng yêu cầu không được lớn hơn số lượng yêu cầu cũ'); return;
                }
                $.get('/Requests/CheckTonKhoPOS_GG', { listRequestDetailsID: dataApproved.join(',') }, function (result) {
                    datareturnApprovedYCDC = []; var infoSPYCDCTonKHo = ''; var dataInvalidConver = [];
                    if (result != null && result != '' && result != undefined) {
                        datareturnApprovedYCDC = result;
                        $.each(datareturnApprovedYCDC, function (index_r, item_r) {
                            infoSPYCDCTonKHo += ', ' + item_r.ProductCode.toString() + ': ' + item_r.SoLuong.toString();
                            $.each(myData, function (index, item) {
                                if (item.Id == item_r.Id && (item.Note == '' || item.Note == null || item.Note == undefined)) {
                                    dataInvalidConver.push(item_r);
                                }
                            });
                            //if (item_r.HaveNote == '0')
                            //{
                            //    dataInvalidConver.push(item_r);
                            //}
                        });
                        $('#infoSPDuyetYCDC').text(infoSPYCDCTonKHo.substr(2));
                        if (dataInvalidConver.length > 0) {
                            $('#showNotiNoteYCDC').show();
                            hot.updateSettings({
                                cells: function (row, col, prop) {
                                    var cellProperties = {};
                                    if (datareturnApprovedYCDC != null && datareturnApprovedYCDC != '' && datareturnApprovedYCDC != undefined) {
                                        $.each(myData, function (index, item) {
                                            $.each(datareturnApprovedYCDC, function (index_r, item_r) {
                                                if (item.Id == item_r.Id && (item.Note == '' || item.Note == null || item.Note == undefined)) {
                                                    if (col == 2 && row == index) {
                                                        cellProperties.renderer = firstRowRenderer;
                                                    }
                                                }
                                            });
                                        });
                                    }

                                    return cellProperties;
                                }
                            });
                        }
                        else {
                            hot.updateSettings({
                                cells: function (row, col, prop) {
                                    var cellProperties = {};
                                    if (col == 2) {
                                        cellProperties.renderer = firstRowRendererDefault;
                                    }
                                    return cellProperties;
                                }
                            });
                            $('#showNotiNoteYCDC').hide();
                        }

                        $('#modalDuyetYCDC').modal('show');
                    }
                    else {
                        var datareturn = [];
                        $.each(myData, function (index, item) {
                            datareturn.push({
                                Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                                Quantity: item.QuantityNew,
                                Note: item.Note
                            });
                        });

                        var message = $("#Message").val();
                        $('#Details').val(JSON.stringify(datareturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    }
                });
            });
        });
    }
    function contruct_108() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 7,
                    minCols: 7,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 7,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 1,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 11,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Mã sản phẩm',
                            'Tên sản phẩm',
                            'Số lượng',
                            'Số IMEI',
                            'Tên kho chuyển',
                            'Số phiếu chuyển kho',
                            'Lý do'
                        ],
                    columns: [
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                        { data: 'Imei', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: !check },
                        { data: 'Note', type: 'text', className: 'htLeft', readOnly: !check },

                    ],
                    //beforeChange: function (changes, source) {
                    //    if (source == 'not') return;
                    //    for (i = 0; i < changes.length; i++) {
                    //        var row = changes[i][0], col = changes[i][1];
                    //        if (col === 'Note') {
                    //            var value = changes[i][3];
                    //            if (value == "") {
                    //                hot.setDataAtCell(row, 1, null, 'not');
                    //            }
                    //            return true;
                    //        }
                    //        if (col === 'Property2') {
                    //            var value = changes[i][3];
                    //            if (value == true) {
                    //                hot.setDataAtCell(row, 0, null, 'not');
                    //            }
                    //            return true;
                    //        }
                    //        if (col === 'QuantityNew') {
                    //            var value = changes[i][3];
                    //            var oldValue = hot.getDataAtRowProp(row, 'Quantity');
                    //            if (value > oldValue || value <= 0) {
                    //                XFunction.RenderMessage('error', 'Số lượng yêu cầu không được lớn hơn số lượng yêu cầu cũ hoặc <= 0');
                    //                return false;
                    //            }
                    //            return true;
                    //        }
                    //    }


                    //},
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            function contructDataFurtureFinish() {
                var dataStr = '';
                var TimeFutureFinishGlobal = TimeFutureFinish;
                var TimeGoliveTimeGolive = TimeGolive;
                if (TimeGoliveTimeGolive == '' || TimeGoliveTimeGolive == undefined || TimeGoliveTimeGolive == null) {
                    TimeGoliveTimeGolive = TimeFutureFinishGlobal;
                }
                var timeconvertFutureFinish = new Date(TimeFutureFinishGlobal).toDateInputValue();
                var TimeGoliveTimeGolive = new Date(TimeGoliveTimeGolive).toDateInputValue();

                if (permisstion.isSender == true) {
                    dataStr += '<p><table>';
                    dataStr += '<tr>';
                    dataStr += '<td>Ngày dự kiến hoàn thành :</td>';
                    dataStr += '<td><input type="date" class="form-control"  name="TimeFinishData" id="TimeFinishData"  /></td>';
                    dataStr += '<td><button type="button" class="btn btn-success" data-toggle="modal" id="btnUpdateTimeFutureFinish"><i class="fa fa-paper-plane-o"></i></button></td>';
                    dataStr += '</tr>';
                    dataStr += '</table></p>';
                    $('#captionHot1').html(dataStr);
                    $('#TimeFinishData').val(timeconvertFutureFinish);
                    $('#btnUpdateTimeFutureFinish').on('click', function () {
                        var dataUpdateNew = $('#TimeFinishData').val();
                        if (dataUpdateNew === '' || dataUpdateNew === undefined || dataUpdateNew === null || dataUpdateNew < TimeGoliveTimeGolive) {
                            XFunction.RenderMessage('error', 'Ngày cập nhật mới phải lớn hơn hoặc bằng ngày cập nhật lúc tạo callLog : ' + TimeGoliveTimeGolive);
                            return;
                        }
                        $.get('/Requests/UpdateTimeFutureFinish', { Data: dataUpdateNew, RequestId: CL.Id }, function (respone) {
                            if (respone == 1) {
                                XFunction.RenderMessage('success', 'Cập nhật thành công');
                            } else {
                                XFunction.RenderMessage('error', 'Cập nhật không thành công vui long xem lai dữ liệu');
                            }
                        });
                    });
                } else {
                    var currentTime = new Date(TimeFutureFinishGlobal);
                    var month = currentTime.getMonth() + 1;
                    var day = currentTime.getDate();
                    var year = currentTime.getFullYear();
                    var date = day + "/" + month + "/" + year;
                    dataStr += '<p style="width:400px">';
                    dataStr += 'Ngày dự kiến hoàn thành ' + date;
                    dataStr += '</p>';
                    $('#captionHot1').html(dataStr);
                }
            };
            contructDataFurtureFinish();

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = [];
                var datainvalidNote = [];
                $.each(myData, function (index, item) {
                    if (item.Note == "" || item.Note == undefined || item.Note == null) {
                        datainvalidNote.push(item);
                    }
                    if (item.Property2 == "" || item.Property2 == undefined || item.Property2 == null) {
                        datainvalid.push(item);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập tên phiếu chuyển kho"); return;
                }
                if (datainvalidNote.length > 0) {
                    XFunction.RenderMessage('error', 'Phải nhập lý do'); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Note: item.Note,
                        Property2: item.Property2
                    });
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = [];
                var datainvalidNote = [];
                $.each(myData, function (index, item) {
                    if (item.Note == "" || item.Note == undefined || item.Note == null) {
                        datainvalidNote.push(item);
                    }
                    if (item.Property2 == "" || item.Property2 == undefined || item.Property2 == null) {
                        datainvalid.push(item);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập tên phiếu chuyển kho"); return;
                }
                if (datainvalidNote.length > 0) {
                    XFunction.RenderMessage('error', 'Phải nhập lý do'); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Note: item.Note,
                        Property2: item.Property2
                    });
                });


                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }


                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = [];
                var datainvalidNote = [];
                $.each(myData, function (index, item) {
                    if (item.Note == "" || item.Note == undefined || item.Note == null) {
                        datainvalidNote.push(item);
                    }
                    if (item.Property2 == "" || item.Property2 == undefined || item.Property2 == null) {
                        datainvalid.push(item);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập tên phiếu chuyển kho"); return;
                }
                if (datainvalidNote.length > 0) {
                    XFunction.RenderMessage('error', 'Phải nhập lý do'); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Note: item.Note,
                        Property2: item.Property2
                    });
                });


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = [];
                var datainvalidNote = [];
                $.each(myData, function (index, item) {
                    if (item.Note == "" || item.Note == undefined || item.Note == null) {
                        datainvalidNote.push(item);
                    }
                    if (item.Property2 == "" || item.Property2 == undefined || item.Property2 == null) {
                        datainvalid.push(item);
                    }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập tên phiếu chuyển kho"); return;
                }
                if (datainvalidNote.length > 0) {
                    XFunction.RenderMessage('error', 'Phải nhập lý do'); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Note: item.Note,
                        Property2: item.Property2
                    });
                });



                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }
    function contruct_35() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 10,
                    minCols: 10,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 10,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 13,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Mục đích tuyển', 'Shop', 'Tên chức danh tuyển', 'Chức danh kiêm nhiệm (nếu có)', 'Nhân viên thay thế', 'Lý do thay thế', 'Tên tỉnh thành', 'Vị trí cửa hàng', 'Ngày mở bán', 'Số lượng cần tuyển', 'Số lượng hiện tại'],
                    columns: [
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property6', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property7', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'CustomerName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property3', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property4', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property5', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property8', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property9', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property10', type: 'text', className: 'htLeft', readOnly: true },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }

    //  109:Xuất hóa đơn
    function contruct_109() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            var dataHandsontable2 = [];
            dataHandsontable = $.grep(respone, function (item, index) {
                return item.Quantity1 == 0;
            });
            dataHandsontable2 = $.grep(respone, function (item, index) {
                return item.Quantity1 == 1;
            });

            var ListEmploys = [];
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && status != 4 && status != 3 ? true : false;
            var checkStep1 = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender == true) && CL.StepNo == 1 && status != 4 && status != 3 ? true : false;
            $.get('/Requests/GetEmpsShopOfRequest', { requestId: CL.Id }, function (respone1) {
                ListEmploys = respone1;
                var empNames = [''];
                $.each(ListEmploys, function (index, item) {
                    empNames.push(item.EmployeeCode + '--' + item.EmployeeName);
                });

                var SoTienTruyThu = dataHandsontable[0].Money4;
                var Money = 0;
                $.each(dataHandsontable, function (index, item) {
                    Money += item.Sum == '' || item.Sum == null || item.Sum == undefined ? 0 : item.Sum;
                });

                var $$ = function (id) { return document.getElementById(id); },
                    container2 = $$('handsontableEx2'), hot2;

                var setSum = function (sum) {
                    Money = Math.ceil(sum);
                    var stringSum = Money.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    $('#captionHot1').html('Thông tin đơn hàng, Tổng tiền  : ' + stringSum).css('font-weight', 'bold').css('color', 'green');
                }
                setSum(Money);

                var setting = function () {
                    return {
                        //=================================Data=======
                        data: dataHandsontable,
                        //================================Cols=======
                        maxCols: 9,
                        minCols: 9,
                        startCols: 9,
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: false,
                        columnSorting: false,
                        colWidths: 'undefined',
                        copyColsLimit: 9,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 1,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 9,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: false,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 0,
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: false,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: false,
                        //====================================Oder ==============================================
                        colHeaders:
                            [
                                'Số đơn hàng',
                                'Loại hóa đơn',
                                'Mã sản phẩm',
                                'Tên sản phẩm',
                                'Số lượng',
                                'Đơn giá',
                                'Thành tiền',
                                'Ghi chú',
                                'Thời hạn xử lý',
                            ],
                        columns:
                            [
                                {
                                    data: 'Property1', type: 'text', className: 'htLeft', readOnly: !checkStep1,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        td.style.fontWeight = 'bold';
                                        td.style.color = 'red';
                                        Handsontable.TextCell.renderer.apply(this, arguments);
                                    }
                                },
                                { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },
                                { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                                { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                                { data: 'Quantity', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                                { data: 'Money1', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                                {
                                    data: 'Sum', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0',
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (prop == 'Sum') {
                                            var quantity = instance.getDataAtRowProp(row, 'Quantity');
                                            var money1 = instance.getDataAtRowProp(row, 'Money1');
                                            var Idline = instance.getDataAtRowProp(row, 'Id');
                                            var sum = quantity * money1;
                                            value = sum;
                                            $.each(dataHandsontable, function (index, item) {
                                                if (item.Id == Idline) {
                                                    item.Sum = sum;
                                                    return false;
                                                }
                                            });
                                        }
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                { data: 'Note', type: 'text', className: 'htLeft', readOnly: true },
                                { data: 'Time1', type: 'text', className: 'htLeft', readOnly: true },

                            ],
                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];
                                if (col === 'Property1') {
                                    var value = changes[i][3];
                                    if (value == null || value == '' || value == undefined) {
                                        return false;
                                    }
                                    return true;
                                }
                            }
                        },
                        afterChange: function (changes, source) {
                            if (!changes) {
                                return;
                            }
                            $.each(changes, function (index, element) {
                                var change = element;
                                var oldValue = change[2];
                                var newValue = change[3];
                                var rowIndex = change[0];
                                var columnIndex = change[1];
                                var instance = hot.getInstance();
                                $.each(dataHandsontable, function (index, item) {
                                    item.Property1 = newValue;
                                });
                                hot.render();
                            });
                        },
                    };
                };
                hot = new Handsontable(container, setting());

                var setting2 = function () {
                    return {
                        //=================================Data=======
                        data: dataHandsontable2,
                        //================================Cols=======
                        maxCols: 5,
                        minCols: 5,
                        startCols: 5,
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: false,
                        columnSorting: false,
                        colWidths: 'undefined',
                        copyColsLimit: 5,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 1,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 5,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: false,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 8,
                        contextMenu: true,
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: false,
                        //====================================Oder ==============================================
                        colHeaders:
                            [
                                'Tên nhân viên bị truy thu',
                                'Tiền mặt bị truy thu',
                                'Số tiền bị truy thu lương',
                                'Số tiền truy thu',
                                'Số tháng bị truy thu',
                            ],
                        columns:
                            [
                                {
                                    data: 'Name', type: 'dropdown', readOnly: !check, source: empNames, className: 'htLeft',
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (col === 0 && row === dataHandsontable2.length - 1) {
                                            td.style.fontWeight = 'bold';
                                            td.style.textAlign = 'right';
                                            value = 'Tổng tiền:';
                                            td.style.readOnly;
                                            Handsontable.renderers.TextRenderer.apply(this, arguments);
                                        } else {
                                            Handsontable.DropdownCell.renderer.apply(this, arguments);
                                        }
                                    }
                                },
                                {
                                    data: 'Money3', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0',
                                    renderer: function (instance, td, row, col, prop, value) {
                                        td.style.backgroundColor = 'antiquewhite';
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                {
                                    data: 'Money4', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0',
                                    renderer: function (instance, td, row, col, prop, value) {
                                        td.style.backgroundColor = 'antiquewhite';
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                },
                                {
                                    data: 'Money1', type: 'numeric', className: 'htLeft', readOnly: !check, format: '0,0',
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (col === 3 && row === dataHandsontable2.length - 1) {
                                            td.style.fontWeight = 'bold';
                                            var sum = 0;
                                            $.each(dataHandsontable2, function (index, item) {
                                                var monneyLine = item.Money1;
                                                if (monneyLine === undefined || monneyLine === null || monneyLine === '' || isNaN(monneyLine) === true) {
                                                    monneyLine = 0;
                                                }
                                                sum += monneyLine;
                                            });
                                            value = sum;
                                        }
                                        Handsontable.NumericRenderer.apply(this, arguments);
                                    }
                                }, // so tien truy thu
                                { data: 'Quantity', type: 'numeric', className: 'htLeft', readOnly: !check, format: '0,0' }, // so thang truy thu
                            ],
                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];
                                if (col === 'Money1' || col === 'Money2') {
                                    var value = changes[i][3];
                                    var nameData = hot2.getDataAtRowProp(row, 'Name');
                                    if (nameData == null || nameData == '' || nameData == undefined) {
                                        return false;
                                    }
                                    var thangTruyThu = hot2.getDataAtRowProp(row, 'Quantity');
                                    if (thangTruyThu != null || thangTruyThu != '' || thangTruyThu != undefined) {
                                        if (value <= 1000000 && thangTruyThu > 1) {
                                            XFunction.RenderMessage('error', 'Số tiền truy thu <= 1 triệu truy thu trong 1 tháng!');
                                            return false;
                                        }
                                        else if (value <= 3000000 && thangTruyThu > 3) {
                                            XFunction.RenderMessage('error', 'Số tiền truy thu > 1 triệu và <= 3 triệu truy thu tối đa trong 3 tháng!');
                                            return false;
                                        }
                                    }
                                    if (value == null || value == '' || value == undefined) {
                                        hot2.setDataAtRowProp(row, 'Money1', 0, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Quantity') {
                                    var value = changes[i][3];
                                    var nameData = hot2.getDataAtRowProp(row, 'Name');
                                    if (nameData == null || nameData == '' || nameData == undefined) {
                                        return false;
                                    }
                                    if (value <= 0) {
                                        return false;
                                    }
                                    if (value > 6) {
                                        XFunction.RenderMessage('error', 'Không được quá 6 tháng');
                                        return false;
                                    }
                                    var soTienTruyThu = hot2.getDataAtRowProp(row, 'Money1');
                                    if (soTienTruyThu != null || soTienTruyThu != '' || soTienTruyThu != undefined) {
                                        if (soTienTruyThu <= 1000000 && value > 1) {
                                            XFunction.RenderMessage('error', 'Số tiền truy thu <= 1 triệu truy thu trong 1 tháng!');
                                            return false;
                                        }
                                        else if (soTienTruyThu <= 3000000 && value > 3) {
                                            XFunction.RenderMessage('error', 'Số tiền truy thu > 1 triệu và <= 3 triệu truy thu tối đa trong 3 tháng!');
                                            return false;
                                        }
                                    }
                                    return true;
                                }
                                if (col === 'Name') {
                                    var value = changes[i][3];
                                    var flagEmpEx = false;
                                    $.each(dataHandsontable2, function (index, item) {
                                        if (value == item.Name) {
                                            XFunction.RenderMessage('error', 'Đã tồn tại nhân viên truy thu ở trên');
                                            flagEmpEx = true;
                                        }
                                    });
                                    if (flagEmpEx)
                                        return false;
                                    return true;
                                }
                            }
                        },
                        afterChange: function (changes, source) {
                            if (!changes || source == 'not') {
                                return;
                            }
                            var instance = this;
                            changes.forEach(function (change) {
                                var row = change[0];
                                var col = change[1];
                                var newValue = change[3];
                                var cellProperties = {}, options;

                                //▼	Edit - VietMXH - 21/11/2018 - Fix 109==================================================
                                switch (col) {
                                    case 'Name':
                                        if (true) {
                                            instance.setDataAtRowProp(row, 'Money3', '', 'not');
                                            instance.setDataAtRowProp(row, 'Money4', '', 'not');
                                            var soTienTruyThuLuong = instance.getDataAtRowProp(row, 'Money1');
                                            var soThang = instance.getDataAtRowProp(row, 'Quantity');
                                            if (!!newValue && !!soTienTruyThuLuong && !!soThang) {
                                                $('#myModalWatting').modal('show');
                                                $.ajax({
                                                    async: false,
                                                    url: "/Requests/GetTienMatPhaiTraTruyThuLuong",
                                                    type: "GET",
                                                    data: {
                                                        empCode: newValue.split('--')[0],
                                                        soThang: soThang,
                                                        soTienTruyThu: soTienTruyThuLuong,
                                                        p_RequestId: CL.Id
                                                    },
                                                    success: function (p_ActionResult) {
                                                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                                                            instance.setDataAtRowProp(row, 'Money3', p_ActionResult[0].SoTienPhaiTraTienMat, 'not');
                                                            instance.setDataAtRowProp(row, 'Money4', p_ActionResult[0].TongTienPhaiTraBangLuong, 'not');
                                                        }
                                                    },
                                                    error: function () {
                                                        XData.Render_Message("error", "Lỗi! /Requests/GetTienMatPhaiTraTruyThuLuong");
                                                    }
                                                });
                                                $('#myModalWatting').modal('hide');
                                            }
                                        }
                                        break;
                                    case 'Money1':
                                        if (true) {
                                            instance.setDataAtRowProp(row, 'Money3', '', 'not');
                                            instance.setDataAtRowProp(row, 'Money4', '', 'not');
                                            var emp = instance.getDataAtRowProp(row, 'Name');
                                            var soThang = instance.getDataAtRowProp(row, 'Quantity');
                                            if (!!emp && !!newValue && !!soThang) {
                                                $('#myModalWatting').modal('show');
                                                $.ajax({
                                                    async: false,
                                                    url: "/Requests/GetTienMatPhaiTraTruyThuLuong",
                                                    type: "GET",
                                                    data: {
                                                        empCode: emp.split('--')[0],
                                                        soThang: soThang,
                                                        soTienTruyThu: newValue,
                                                        p_RequestId: CL.Id
                                                    },
                                                    success: function (p_ActionResult) {
                                                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                                                            instance.setDataAtRowProp(row, 'Money3', p_ActionResult[0].SoTienPhaiTraTienMat, 'not');
                                                            instance.setDataAtRowProp(row, 'Money4', p_ActionResult[0].TongTienPhaiTraBangLuong, 'not');
                                                        }
                                                    },
                                                    error: function () {
                                                        XData.Render_Message("error", "Lỗi! /Requests/GetTienMatPhaiTraTruyThuLuong");
                                                    }
                                                });
                                                $('#myModalWatting').modal('hide');
                                            }
                                        }
                                        break;
                                    case 'Quantity':
                                        if (true) {
                                            instance.setDataAtRowProp(row, 'Money3', '', 'not');
                                            instance.setDataAtRowProp(row, 'Money4', '', 'not');
                                            var emp = instance.getDataAtRowProp(row, 'Name');
                                            var soTienTruyThuLuong = instance.getDataAtRowProp(row, 'Money1');
                                            if (!!emp && !!soTienTruyThuLuong && !!newValue) {
                                                $('#myModalWatting').modal('show');
                                                $.ajax({
                                                    async: false,
                                                    url: "/Requests/GetTienMatPhaiTraTruyThuLuong",
                                                    type: "GET",
                                                    data: {
                                                        empCode: emp.split('--')[0],
                                                        soThang: newValue,
                                                        soTienTruyThu: soTienTruyThuLuong,
                                                        p_RequestId: CL.Id
                                                    },
                                                    success: function (p_ActionResult) {
                                                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                                                            instance.setDataAtRowProp(row, 'Money3', p_ActionResult[0].SoTienPhaiTraTienMat, 'not');
                                                            instance.setDataAtRowProp(row, 'Money4', p_ActionResult[0].TongTienPhaiTraBangLuong, 'not');
                                                        }
                                                    },
                                                    error: function () {
                                                        XData.Render_Message("error", "Lỗi! /Requests/GetTienMatPhaiTraTruyThuLuong");
                                                    }
                                                });
                                                $('#myModalWatting').modal('hide');
                                            }
                                        }
                                        break;
                                    default:
                                        break;

                                }
                                //▲	Edit - VietMXH - 21/11/2018 - Fix 109==================================================

                            });
                        },
                    };
                };

                if (CL.StepNo == 2) {
                    var captionHot2 = 'Thông tin xử lý trên đơn hàng. Tổng tiền truy thu lương: ' + dataHandsontable[0].Money4.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    $('#captionHot2').html(captionHot2).css('font-weight', 'bold').css('color', 'green');
                    hot2 = new Handsontable(container2, setting2());
                }

                $btnComment.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var myData1 = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== '';
                    });

                    if (CL.StepNo == 2) {
                        var myData = hot2.getData() == undefined ? [] : $.grep(hot2.getData(), function (item, index) {
                            return item.Name !== null && item.Name !== undefined && item.Name !== '' && item.Name != 'Tổng tiền:';
                        });

                        if (myData.length == 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Vui lòng nhập truy thu"); return;
                        }
                    }

                    if (myData1.length == 0 && permisstion.isSender == true) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    var dataReturn1 = [];
                    var dataInvalid1 = [];

                    $.each(myData1, function (index, item) {
                        dataReturn1.push({
                            Id: item.Id,
                            SoSO: item.Property1
                        })
                    });

                    var datareturn = [];
                    var datareturnInvalidSTTT = [];
                    var datareturnInvalidSTTT2 = [];
                    var datareturnInvalidST = [];
                    var datareturnInvalidTime = [];
                    var monneyEnd = 0;
                    if (CL.StepNo == 2) {
                        $.each(myData, function (index, item) {

                            var currentTime = new Date();
                            var month = currentTime.getMonth() + 1;
                            var day = currentTime.getDate();
                            var year = currentTime.getFullYear();
                            var date = day + "/" + month + "/" + year;
                            item.Time3 = date;

                            if (item.Money1 === '' || item.Money1 === null || item.Money1 === undefined) {
                                item.Money1 = 0;
                            }
                            //if (item.Money2 === '' || item.Money2 === null || item.Money2 === undefined) {
                            //    item.Money2 = 0;
                            //}
                            if (item.Money1 === '' || item.Money1 === null || item.Money1 === undefined) {
                                datareturnInvalidSTTT.push(index + 1);
                            }
                            //if (item.Money2 === '' || item.Money2 === null || item.Money2 === undefined) {
                            //    datareturnInvalidSTTT2.push(index + 1);
                            //}
                            if (item.Quantity === '' || item.Quantity === null || item.Quantity === undefined) {
                                item.Quantity = 0;
                            }
                            if (item.Quantity === '' || item.Quantity === null || item.Quantity === undefined || item.Quantity === 0) {
                                if (item.Money1 != 0 && item.Quantity <= 0) {
                                    datareturnInvalidST.push(index + 1);
                                }
                            }
                            if (item.Time3 == '' || item.Time3 == null || item.Time3 == undefined) {
                                datareturnInvalidTime.push(index + 1);
                            }
                            datareturn.push({
                                'Id': item.Id === null || item.Id === '' || item.Id === undefined ? 0 : item.Id,
                                //'Property1': item.Property1 === '' || item.Property1 === null || item.Property1 === undefined ? '' : item.Property1,
                                'Property2': item.Name.split('--')[0],
                                'Money1': item.Money1 === null || item.Money1 === '' || item.Money1 === undefined ? 0 : item.Money1,
                                'Money3': item.Money3 === null || item.Money3 === '' || item.Money3 === undefined ? 0 : item.Money3,
                                'Money4': item.Money4 === null || item.Money4 === '' || item.Money4 === undefined ? 0 : item.Money4,
                                'Quantity': item.Quantity === null || item.Quantity === '' || item.Quantity === undefined ? 0 : item.Quantity,
                                'Time3': item.Time3 === null || item.Time3 === '' || item.Time3 === undefined ? null : item.Time3,
                            });
                            if (item.Money1 == null || item.Money1 == '' || item.Money1 == undefined) {
                                monneyEnd += 0;
                            } else {
                                monneyEnd += item.Money1;
                            }
                            //if (item.Money2 == null || item.Money2 == '' || item.Money2 == undefined) {
                            //    monneyEnd += 0;
                            //} else {
                            //    monneyEnd += item.Money2;
                            //}
                        });
                        if (monneyEnd != SoTienTruyThu && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Số tiền chưa khớp nhau"); return;
                        }

                        if (datareturnInvalidSTTT.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tiền truy thu"); return;
                        }
                        if (datareturnInvalidSTTT2.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tiền mặt nộp trước"); return;
                        }
                        if (datareturnInvalidST.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Vui lòng nhập số tháng truy thu (<=3)"); return;
                        }
                        if (datareturnInvalidTime.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Nhập chưa đẩy đủ Ngày bắt đầu thực hiện truy thu"); return;
                        }
                    }
                    //if (CL.StepNo != 1 || status == 4 || status == 3) {
                    //    datareturn = [];
                    //    dataReturn1 = [];
                    //}

                    var message = $('#Message').val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                    }

                    //console.log(datareturn);

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#Details2').val(JSON.stringify(dataReturn1));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                });
                $btnReply.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var myData = hot2.getData() == undefined ? [] : $.grep(hot2.getData(), function (item, index) {
                        return item.Name !== null && item.Name !== undefined && item.Name !== '' && item.Name != 'Tổng tiền:';
                    });

                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    var datareturn = [];
                    var datareturnInvalidSTTT = [];
                    var datareturnInvalidSTTT2 = [];
                    var datareturnInvalidST = [];
                    var datareturnInvalidTime = [];
                    var monneyEnd = 0;
                    $.each(myData, function (index, item) {
                        var currentTime = new Date();
                        var month = currentTime.getMonth() + 1;
                        var day = currentTime.getDate();
                        var year = currentTime.getFullYear();
                        var date = day + "/" + month + "/" + year;
                        item.Time3 = date;

                        if (item.Money1 === '' || item.Money1 === null || item.Money1 === undefined) {
                            item.Money1 = 0;
                        }
                        if (item.Money2 === '' || item.Money2 === null || item.Money2 === undefined) {
                            item.Money2 = 0;
                        }
                        if (item.Money1 === '' || item.Money1 === null || item.Money1 === undefined) {
                            datareturnInvalidSTTT.push(index + 1);
                        }
                        if (item.Money2 === '' || item.Money2 === null || item.Money2 === undefined) {
                            datareturnInvalidSTTT.push(index + 1);
                        }
                        if (item.Quantity === '' || item.Quantity === null || item.Quantity === undefined) {
                            item.Quantity = 0;
                        }
                        if (item.Quantity === '' || item.Quantity === null || item.Quantity === undefined || item.Quantity === 0) {
                            if (item.Money1 !== 0 && item.Quantity <= 0)
                                datareturnInvalidST.push(index + 1);
                        }
                        if (item.Time3 == '' || item.Time3 == null || item.Time3 == undefined) {
                            datareturnInvalidTime.push(index + 1);
                        }
                        datareturn.push({
                            'Id': item.Id === null || item.Id === '' || item.Id === undefined ? 0 : item.Id,
                            //'Property1': item.Property1 === '' || item.Property1 === null || item.Property1 === undefined ? '' : item.Property1,
                            'Property2': item.Name.split('--')[0],
                            'Money1': item.Money1 === null || item.Money1 === '' || item.Money1 === undefined ? 0 : item.Money1,
                            'Money2': item.Money2 === null || item.Money2 === '' || item.Money2 === undefined ? 0 : item.Money2,
                            'Quantity': item.Quantity === null || item.Quantity === '' || item.Quantity === undefined ? 0 : item.Quantity,
                            'Time3': item.Time3 === null || item.Time3 === '' || item.Time3 === undefined ? null : item.Time3,
                        });
                        if (item.Money1 == null || item.Money1 == '' || item.Money1 == undefined) {
                            monneyEnd += 0;
                        } else {
                            monneyEnd += item.Money1;
                        }
                        if (item.Money2 == null || item.Money2 == '' || item.Money2 == undefined) {
                            monneyEnd += 0;
                        } else {
                            monneyEnd += item.Money2;
                        }
                    });
                    if (monneyEnd !== Money) {
                        XFunction.RenderMessage("error", "Số tiền chưa khớp nhau"); return;
                    }
                    if (datareturnInvalidSTTT.length > 0) {
                        XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tiền truy thu"); return;
                    }
                    if (datareturnInvalidSTTT2.length > 0) {
                        XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tiền mặt nộp trước"); return;
                    }
                    if (datareturnInvalidST.length > 0) {
                        XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tháng truy thu"); return;
                    }
                    if (datareturnInvalidTime.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                        XFunction.RenderMessage("error", "Nhập chưa đẩy đủ Ngày bắt đầu thực hiện truy thu"); return;
                    }

                    if (CL.StepNo != 1 || status == 4 || status == 3) {
                        datareturn = [];
                    }

                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                    }

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();

                });
                $btnChangeStep.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var myData1 = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== '';
                    });

                    if (CL.StepNo == 2) {
                        var myData = hot2.getData() == undefined ? [] : $.grep(hot2.getData(), function (item, index) {
                            return item.Name !== null && item.Name !== undefined && item.Name !== '' && item.Name != 'Tổng tiền:';
                        });

                        if (myData.length == 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                        }
                    }

                    if (myData1.length == 0 && permisstion.isSender == true) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    var dataReturn1 = [];
                    var dataInvalid1 = [];

                    $.each(myData1, function (index, item) {
                        dataReturn1.push({
                            Id: item.Id,
                            SoSO: item.Property1
                        })
                        //if (item.Property1 === '' || item.Property1 === null || item.Property1 === undefined) {
                        //    dataInvalid1.push(index);
                        //}
                    });

                    //if (dataInvalid1.length > 0 && permisstion.isSender == true) {
                    //    XFunction.RenderMessage("error", "Số lượng chưa hợp lệ"); return;
                    //}
                    var datareturn = [];
                    var datareturnInvalidSTTT = [];
                    var datareturnInvalidSTTT2 = [];
                    var datareturnInvalidST = [];
                    var datareturnInvalidTime = [];
                    var monneyEnd = 0;
                    if (CL.StepNo == 2) {
                        $.each(myData, function (index, item) {

                            var currentTime = new Date();
                            var month = currentTime.getMonth() + 1;
                            var day = currentTime.getDate();
                            var year = currentTime.getFullYear();
                            var date = day + "/" + month + "/" + year;
                            item.Time3 = date;

                            if (item.Money1 === '' || item.Money1 === null || item.Money1 === undefined) {
                                item.Money1 = 0;
                            }
                            //if (item.Money2 === '' || item.Money2 === null || item.Money2 === undefined) {
                            //    item.Money2 = 0;
                            //}
                            if (item.Money1 === '' || item.Money1 === null || item.Money1 === undefined) {
                                datareturnInvalidSTTT.push(index + 1);
                            }
                            //if (item.Money2 === '' || item.Money2 === null || item.Money2 === undefined) {
                            //    datareturnInvalidSTTT2.push(index + 1);
                            //}
                            if (item.Quantity === '' || item.Quantity === null || item.Quantity === undefined) {
                                item.Quantity = 0;
                            }
                            if (item.Quantity === '' || item.Quantity === null || item.Quantity === undefined || item.Quantity === 0) {
                                if (item.Money1 != 0 && item.Quantity <= 0) {
                                    datareturnInvalidST.push(index + 1);
                                }
                            }
                            if (item.Time3 == '' || item.Time3 == null || item.Time3 == undefined) {
                                datareturnInvalidTime.push(index + 1);
                            }
                            datareturn.push({
                                'Id': item.Id === null || item.Id === '' || item.Id === undefined ? 0 : item.Id,
                                //'Property1': item.Property1 === '' || item.Property1 === null || item.Property1 === undefined ? '' : item.Property1,
                                'Property2': item.Name.split('--')[0],
                                'Money1': item.Money1 === null || item.Money1 === '' || item.Money1 === undefined ? 0 : item.Money1,
                                'Money3': item.Money3 === null || item.Money3 === '' || item.Money3 === undefined ? 0 : item.Money3,
                                'Money4': item.Money4 === null || item.Money4 === '' || item.Money4 === undefined ? 0 : item.Money4,
                                'Quantity': item.Quantity === null || item.Quantity === '' || item.Quantity === undefined ? 0 : item.Quantity,
                                'Time3': item.Time3 === null || item.Time3 === '' || item.Time3 === undefined ? null : item.Time3,
                            });
                            if (item.Money1 == null || item.Money1 == '' || item.Money1 == undefined) {
                                monneyEnd += 0;
                            } else {
                                monneyEnd += item.Money1;
                            }
                            //if (item.Money2 == null || item.Money2 == '' || item.Money2 == undefined) {
                            //    monneyEnd += 0;
                            //} else {
                            //    monneyEnd += item.Money2;
                            //}
                        });
                        if (monneyEnd != SoTienTruyThu && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Số tiền chưa khớp nhau"); return;
                        }

                        if (datareturnInvalidSTTT.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tiền truy thu"); return;
                        }
                        if (datareturnInvalidSTTT2.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tiền mặt nộp trước"); return;
                        }
                        if (datareturnInvalidST.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Vui lòng nhập số tháng truy thu (<=3)"); return;
                        }
                        if (datareturnInvalidTime.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Nhập chưa đẩy đủ Ngày bắt đầu thực hiện truy thu"); return;
                        }
                    }
                    //if (CL.StepNo != 1 || status == 4 || status == 3) {
                    //    datareturn = [];
                    //}


                    var message = $("#Message").val();

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#Details2').val(JSON.stringify(dataReturn1));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();

                });
                $btnComplete.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    //▼	Edit - VietMXH - 22/11/2018 - Tối ưu==================================================
                    if (CL.StepNo == 2) {
                        var myData = hot2.getData() == undefined ? [] : $.grep(hot2.getData(), function (item, index) {
                            return !!item.Name && item.Name != 'Tổng tiền:';
                        });
                        if (myData.length == 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                            XFunction.RenderMessage("error", "Vui lòng nhập truy thu"); return;
                        }
                    }
                    //▲	Edit - VietMXH - 22/11/2018 - Tối ưu==================================================

                    var datareturn = [];
                    var datareturnInvalidSTTT = [];
                    var datareturnInvalidSTTT2 = [];
                    var datareturnInvalidST = [];
                    var datareturnInvalidTime = [];
                    var monneyEnd = 0;
                    if (CL.StepNo == 2) {

                        //▼	Edit - VietMXH - 22/11/2018 - Tối ưu==================================================
                        if (!!myData && myData.length > 0) {
                            $.each(myData, function (index, item) {
                                var currentTime = new Date();
                                var month = currentTime.getMonth() + 1;
                                var day = currentTime.getDate();
                                var year = currentTime.getFullYear();
                                var date = day + "/" + month + "/" + year;
                                item.Time3 = date;

                                if (!item.Money1) {
                                    item.Money1 = 0;
                                    datareturnInvalidSTTT.push(index + 1);
                                }
                                if (!item.Quantity) {
                                    item.Quantity = 0;
                                }
                                if (item.Money1 != 0 && item.Quantity <= 0) {
                                    datareturnInvalidST.push(index + 1);
                                }
                                if (!item.Time3) {
                                    datareturnInvalidTime.push(index + 1);
                                }

                                datareturn.push({
                                    'Id': !!item.Id ? item.Id : 0,
                                    'Property2': item.Name.split('--')[0],
                                    'Money1': !!item.Money1 ? item.Money1 : 0,
                                    'Money3': !!item.Money3 ? item.Money3 : 0,
                                    'Money4': !!item.Money4 ? item.Money4 : 0,
                                    'Quantity': !!item.Quantity ? item.Quantity : 0,
                                    'Time3': !!item.Quantity ? item.Quantity : null,
                                });

                                if (!!item.Money1) {
                                    monneyEnd += item.Money1;
                                } else {
                                    monneyEnd += 0;
                                }

                            });
                            if (Math.abs(SoTienTruyThu - monneyEnd) >= 1000 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                                XFunction.RenderMessage("error", "Số tiền chưa khớp nhau!"); return;
                            }

                            if (datareturnInvalidSTTT.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                                XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tiền truy thu"); return;
                            }
                            if (datareturnInvalidSTTT2.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                                XFunction.RenderMessage("error", "Nhập chưa đẩy đủ số tiền mặt nộp trước"); return;
                            }
                            if (datareturnInvalidST.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                                XFunction.RenderMessage("error", "Vui lòng nhập số tháng truy thu (<=3)"); return;
                            }
                            if (datareturnInvalidTime.length > 0 && (permisstion.isAssiner == true || permisstion.isGroupAssiner == true)) {
                                XFunction.RenderMessage("error", "Nhập chưa đẩy đủ Ngày bắt đầu thực hiện truy thu"); return;
                            }
                        }
                        //▲	Edit - VietMXH - 22/11/2018 - Tối ưu==================================================

                    }

                    var message = $("#Message").val();
                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                });
            });
        });
    }

    function contruct_110() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 5,
                    minCols: 5,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 4,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 1,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 11,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Mã sản phẩm',
                            'Tên sản phẩm',
                            'Imei',
                            'Số lượng',
                            'Ghi chú'
                        ],
                    columns: [
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Imei', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                        { data: 'Note', type: 'text', className: 'htLeft', readOnly: true },

                    ],
                    //beforeChange: function (changes, source) {
                    //    if (source == 'not') return;
                    //    for (i = 0; i < changes.length; i++) {
                    //        var row = changes[i][0], col = changes[i][1];
                    //        if (col === 'Note') {
                    //            var value = changes[i][3];
                    //            if (value == "") {
                    //                hot.setDataAtCell(row, 1, null, 'not');
                    //            }
                    //            return true;
                    //        }
                    //        if (col === 'Property2') {
                    //            var value = changes[i][3];
                    //            if (value == true) {
                    //                hot.setDataAtCell(row, 0, null, 'not');
                    //            }
                    //            return true;
                    //        }
                    //        if (col === 'QuantityNew') {
                    //            var value = changes[i][3];
                    //            var oldValue = hot.getDataAtRowProp(row, 'Quantity');
                    //            if (value > oldValue || value <= 0) {
                    //                XFunction.RenderMessage('error', 'Số lượng yêu cầu không được lớn hơn số lượng yêu cầu cũ hoặc <= 0');
                    //                return false;
                    //            }
                    //            return true;
                    //        }
                    //    }


                    //},
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            function contructDataFurtureFinish() {
                var dataStr = '';
                var TimeFutureFinishGlobal = TimeFutureFinish;
                var TimeGoliveTimeGolive = TimeGolive;
                if (TimeGoliveTimeGolive == '' || TimeGoliveTimeGolive == undefined || TimeGoliveTimeGolive == null) {
                    TimeGoliveTimeGolive = TimeFutureFinishGlobal;
                }
                var timeconvertFutureFinish = new Date(TimeFutureFinishGlobal).toDateInputValue();
                var TimeGoliveTimeGolive = new Date(TimeGoliveTimeGolive).toDateInputValue();

                if (permisstion.isSender == true) {
                    dataStr += '<p><table>';
                    dataStr += '<tr>';
                    dataStr += '<td>Ngày dự kiến hoàn thành :</td>';
                    dataStr += '<td><input type="date" class="form-control"  name="TimeFinishData" id="TimeFinishData"  /></td>';
                    dataStr += '<td><button type="button" class="btn btn-success" data-toggle="modal" id="btnUpdateTimeFutureFinish"><i class="fa fa-paper-plane-o"></i></button></td>';
                    dataStr += '</tr>';
                    dataStr += '</table></p>';
                    $('#captionHot1').html(dataStr);
                    $('#TimeFinishData').val(timeconvertFutureFinish);
                    $('#btnUpdateTimeFutureFinish').on('click', function () {
                        var dataUpdateNew = $('#TimeFinishData').val();
                        if (dataUpdateNew === '' || dataUpdateNew === undefined || dataUpdateNew === null || dataUpdateNew < TimeGoliveTimeGolive) {
                            XFunction.RenderMessage('error', 'Ngày cập nhật mới phải lớn hơn hoặc bằng ngày cập nhật lúc tạo callLog : ' + TimeGoliveTimeGolive);
                            return;
                        }
                        $.get('/Requests/UpdateTimeFutureFinish', { Data: dataUpdateNew, RequestId: CL.Id }, function (respone) {
                            if (respone == 1) {
                                XFunction.RenderMessage('success', 'Cập nhật thành công');
                            } else {
                                XFunction.RenderMessage('error', 'Cập nhật không thành công vui long xem lai dữ liệu');
                            }
                        });
                    });
                } else {
                    var currentTime = new Date(TimeFutureFinishGlobal);
                    var month = currentTime.getMonth() + 1;
                    var day = currentTime.getDate();
                    var year = currentTime.getFullYear();
                    var date = day + "/" + month + "/" + year;
                    dataStr += '<p style="width:400px">';
                    dataStr += 'Ngày dự kiến hoàn thành ' + date;
                    dataStr += '</p>';
                    $('#captionHot1').html(dataStr);
                }
            };
            contructDataFurtureFinish();

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }


                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }
    function contruct_111() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {

            if (respone !== '' && respone !== null && respone !== undefined) {
                var dataHandsontable = [];
                dataHandsontable = respone;
                var Col = [];
                var ColCog = [];
                function contructHandSontable() {
                    if (respone[0].Property10 == '2') {
                        Col = ['Số tiền chênh lệch', 'TNguyên nhân', 'Hoat động xử lý', 'Ghi chú'];
                        ColCog = [
                            { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Property2', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Property3', type: 'text', readOnly: true, className: 'htRight' },
                            { data: 'Property4', type: 'text', readOnly: true, className: 'htLeft' },
                        ]
                    } else {
                        Col = ['Mã sản phẩm', 'Tên sản phẩm', 'Số lượng', 'Ghi chú'];
                        ColCog = [
                            { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                            //{ data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                            { data: 'Quantity', type: 'text', readOnly: true, className: 'htRight' },
                            { data: 'Property2', readOnly: true, className: 'htLeft', renderer: "html" },
                        ]
                    }
                };
                contructHandSontable();
                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                });
                var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
                var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                    var data = $.grep(instance.getData(), function (item, index) {
                        return index == row && prop == 'button';
                    });
                    var $button = ''
                    if (data[0].HaveConvertation == 1) {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                    } else {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                    }

                    $button.click(function () {
                        if (!check) {
                            XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này'); return;
                        }
                        $('#MessageGiaiTrinh').val('');
                        $('#modalBodyGiaitrinh').empty();
                        var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                        $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                        if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                            $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                if (respone !== undefined && respone !== '' && respone !== null) {
                                    var inner = '';
                                    $.each(respone, function (index, item) {
                                        inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                            '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                            ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                    });
                                    $('#modalBodyGiaitrinh').html(inner);
                                    $('#modalBodyGiaitrinh').show();
                                } else {
                                    $('#modalBodyGiaitrinh').hide();
                                }
                                $('#modalGiaiTrinh').modal('show');
                            });
                        }
                    });
                    $(td).empty().append($button);
                };
                var actionPaging = function () {
                    var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                    if (pages > 1) {
                        for (i = 1; i <= pages; i++) {
                            $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                            $('#PageM' + (i)).on('click', function () {
                                $('.PageMX').removeClass('clickPage');
                                $(this).addClass('clickPage');
                                var page = $(this).attr('data-value') - 1;
                                var start = page * pageSize;
                                var data = $.grep(dataHandsontable, function (item, index) {
                                    return index >= start && index < (start + pageSize)
                                });
                                hot.loadData(data);
                            });
                        }
                    }
                };
                actionPaging();
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: $.grep(dataHandsontable, function (item, index) {
                            return index < pageSize;
                        }),
                        //================================Cols=======
                        maxCols: 4,
                        minCols: 4,
                        startCols: 4,
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: false,
                        columnSorting: false,
                        colWidths: 'undefined',
                        copyColsLimit: 4,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 1,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 4,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: false,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 0,
                        //startRows: 10,
                        //viewportRowRenderingOffset : 'auto',
                        //maxRows: dataHandsontable.length,
                        //minRows: dataHandsontable.length,
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'last',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: false,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: false,
                        //====================================Oder ==============================================
                        colHeaders: Col,
                        columns: ColCog,
                    };
                };
                hot = new Handsontable(container, setting());
                hot.selectCell(0, 0, 0, 0);
                $('#btnSendGiaiTrinh').on('click', function () {
                    var message = $('#MessageGiaiTrinh').val();
                    var id = $(this).attr('data-value');
                    var row = $(this).attr('data-id');

                    if (message === null || message === undefined || message.trim() === '') {
                        XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                        return false;
                    }
                    $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                        if (respone == 1) {
                            hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                            $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                            XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                        } else {
                            $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                            XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                        }
                        $('#MessageGiaiTrinh').val('');
                        $('#modalGiaiTrinh').modal('hide');
                    });

                });
            }

            function contructDataFurtureFinish() {
                var dataStr = '';
                var TimeFutureFinishGlobal = TimeFutureFinish;
                var TimeGoliveTimeGolive = TimeGolive;
                if (TimeGoliveTimeGolive == '' || TimeGoliveTimeGolive == undefined || TimeGoliveTimeGolive == null) {
                    TimeGoliveTimeGolive = TimeFutureFinishGlobal;
                }
                var timeconvertFutureFinish = new Date(TimeFutureFinishGlobal).toDateInputValue();
                var TimeGoliveTimeGolive = new Date(TimeGoliveTimeGolive).toDateInputValue();

                if (permisstion.isSender == true) {
                    dataStr += '<p><table>';
                    dataStr += '<tr>';
                    dataStr += '<td>Ngày dự kiến hoàn thành :</td>';
                    dataStr += '<td><input type="date" class="form-control"  name="TimeFinishData" id="TimeFinishData"  /></td>';
                    dataStr += '<td><button type="button" class="btn btn-success" data-toggle="modal" id="btnUpdateTimeFutureFinish"><i class="fa fa-paper-plane-o"></i></button></td>';
                    dataStr += '</tr>';
                    dataStr += '</table></p>';
                    $('#captionHot1').html(dataStr);
                    $('#TimeFinishData').val(timeconvertFutureFinish);
                    $('#btnUpdateTimeFutureFinish').on('click', function () {
                        var dataUpdateNew = $('#TimeFinishData').val();
                        if (dataUpdateNew === '' || dataUpdateNew === undefined || dataUpdateNew === null || dataUpdateNew < TimeGoliveTimeGolive) {
                            XFunction.RenderMessage('error', 'Ngày cập nhật mới phải lớn hơn hoặc bằng ngày cập nhật lúc tạo callLog : ' + TimeGoliveTimeGolive);
                            return;
                        }
                        $.get('/Requests/UpdateTimeFutureFinish', { Data: dataUpdateNew, RequestId: CL.Id }, function (respone) {
                            if (respone == 1) {
                                XFunction.RenderMessage('success', 'Cập nhật thành công');
                            } else {
                                XFunction.RenderMessage('error', 'Cập nhật không thành công vui long xem lai dữ liệu');
                            }
                        });
                    });
                } else {
                    var currentTime = new Date(TimeFutureFinishGlobal);
                    var month = currentTime.getMonth() + 1;
                    var day = currentTime.getDate();
                    var year = currentTime.getFullYear();
                    var date = day + "/" + month + "/" + year;
                    dataStr += '<p style="width:400px">';
                    dataStr += 'Ngày dự kiến hoàn thành ' + date;
                    dataStr += '</p>';
                    $('#captionHot1').html(dataStr);
                }
            };
            contructDataFurtureFinish();

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };
    function contruct_112() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $('#DownloadDetails').show();
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 28,
                    minCols: 28,
                    startCols: 28,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 28,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 28,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Duyệt',
                            'Không duyệt',
                            'Mã sản phẩm',
                            'Tên sản phẩm',
                            'Tên Voucher',
                            'Kí hiệu',
                            'Số lượng Voucher',
                            'Độ dài Voucher',
                            'Mệnh giá',
                            'Nhóm hàng',
                            'Đơn hàng sử dụng',
                            'Ngày phát hành',
                            'Số tháng hiệu lực',
                            'Ngày hiệu lực',
                            'Ngày hết hiệu lực',
                            'Ngành hàng',
                            'Nhãn hàng',
                            'Loại Voucher',
                            'Ngành hàng áp dụng',
                            'Loại hàng áp dụng',
                            'Nhãn áp dụng',
                            'Mã hàng áp dụng',
                            'Model áp dụng',
                            'Theo số điện thoại KH',
                            'Loại SO',
                            'Kiểu SO',
                            'Giá trị SO từ',
                            'Giá trị SO đến',
                        ],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'SaleCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Note', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                        { data: 'Quantity1', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                        { data: 'Money1', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                        { data: 'TenNhomHang', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'DHSuDung', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Time1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity2', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                        { data: 'Time2', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Time3', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'NganhHang', type: 'text', className: 'htLeft', readOnly: true },
                        { data: "NhanHang", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "LoaiVoucher", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "NganhHangAD", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "LoaiHang", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "NhanAD", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Property9", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Property10", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Quantity5", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "LoaiSO", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "KieuSO", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Money3", type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                        { data: "Money4", type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },

                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 1, null, 'not');
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 0, null, 'not');
                                }
                                return true;
                            }
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#DownloadDetails').click(function () {
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ExportExcelDetails?RequestId=" + CL.Id);
                form.submit();
            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                    });
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                    });
                });


                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }


                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                    });
                });


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                    });
                });



                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };
    function contruct_120() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender == true
                ? true : false;
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {

                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                if (permisstion.isAssiner || permisstion.isGroupAssiner) {
                    $button.click(function () {
                        $('#MessageGiaiTrinh').val('');
                        $('#modalBodyGiaitrinh').empty();
                        var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                        $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                        if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                            $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                if (respone !== undefined && respone !== '' && respone !== null) {
                                    var inner = '';
                                    $.each(respone, function (index, item) {
                                        inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                            '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                            ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                    });
                                    $('#modalBodyGiaitrinh').html(inner);
                                    $('#modalBodyGiaitrinh').show();
                                } else {
                                    $('#modalBodyGiaitrinh').hide();
                                }
                                $('#modalGiaiTrinh').modal('show');
                            });
                        }
                    });
                } else {
                    $button.click(function () {
                        XFunction.RenderMessage('error', 'Bạn không phải người xử lý của callog này');
                    });
                }

                $(td).empty().append($button);

            };
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 9,
                    minCols: 9,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 4,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 11,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Duyệt',
                            'Không duyệt',
                            'Lệnh luân chuyển thiếu',
                            'Tên phòng bảo hành nhận',
                            'Số phiếu bảo hành',
                            'Nội dung thiếu',
                            'Diễn giải của phòng bảo hành',
                            'Thời hạn',
                            'Phản hồi'
                        ],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property3', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property4', type: 'numeric', className: 'htLeft', readOnly: true },
                        { data: 'Property5', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Time1', type: 'date', className: 'htLeft', readOnly: !permisstion.isSender },
                        { data: "button", renderer: actionRenderer },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 1, null, 'not');
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 0, null, 'not');
                                }
                                return true;
                            }
                            if (col === 'Time1') {
                                var value = changes[i][3];
                                var oldValue = hot.getDataAtRowProp(row, 'TimeDefault');
                                if (value < oldValue) {
                                    XFunction.RenderMessage("error", "Ngày gia hạn phải lớn hơn ngày hiện tại");
                                    return false;
                                }
                            }
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        hot.setDataAtRowProp(row, 'HaveConvertation1', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }

                if (permisstion.isAssiner || permisstion.isGroupAssiner) {
                    var dataGiaiTrinhValid = []
                    $.each(myData, function (index, item) {
                        if (item.HaveConvertation == 0) {
                            dataGiaiTrinhValid.push(item);
                        }
                    });
                    if (dataGiaiTrinhValid.length > 0) {
                        XFunction.RenderMessage("error", "Phải nhập phản hồi tất cả các line"); return;
                    }
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Time: item.Time1
                    });
                });
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }
                var dataGiaiTrinhValid = []
                $.each(myData, function (index, item) {
                    if (item.HaveConvertation == 0) {
                        dataGiaiTrinhValid.push(item);
                    }
                });
                if (dataGiaiTrinhValid.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập phản hồi tất cả các line"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                    });
                });
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Time: item.Time1
                    });
                });
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };
    function contruct_122() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            //   console.log(dataHandsontable);
            var container2 = $$('handsontableGanTruyThu'), hot2;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender == true
                ? true : false;
            //▼  LuanNT44-16/10/2019-150-DC assigner money
            var AssignerMoney = true;
            if ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 2) {
                AssignerMoney = false;
            }
            //▲ LuanNT44-16/10/2019-150-DC assigner money
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {

                var data = $.grep(respone, function (item, index) {
                    return index == row;
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                if (permisstion.isAssiner || permisstion.isGroupAssiner || permisstion.isSender) {
                    $button.click(function () {
                        $('#MessageGiaiTrinh').val('');
                        $('#modalBodyGiaitrinh').empty();
                        var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                        $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                        if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                            $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                if (respone !== undefined && respone !== '' && respone !== null) {
                                    var inner = '';
                                    $.each(respone, function (index, item) {
                                        inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                            '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                            ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                    });
                                    $('#modalBodyGiaitrinh').html(inner);
                                    $('#modalBodyGiaitrinh').show();
                                } else {
                                    $('#modalBodyGiaitrinh').hide();
                                }
                                $('#modalGiaiTrinh').modal('show');
                            });
                        }
                    });
                } else {
                    $button.click(function () {
                        XFunction.RenderMessage('error', 'Bạn không phải người xử lý của callog này');
                    });
                }

                $(td).empty().append($button);

            };

            var RequestDetailId;
            var dataLoadAfter = [], dataLoadAfter1 = [], MoneyGrid1 = 0;

            var actionRendererEmployeesHtml = function (instance, td, row, col, prop, value, cellProperties) {

                var valid = instance.getDataAtRowProp(row, 'Id');
                var Images_1 = instance.getDataAtRowProp(row, 'NhanVienTruyThu');
                var $button = ''
                if (valid === null || valid === '' || valid === undefined ||
                    Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                    $button = '';
                } else {
                    $button = Images_1;
                }
                $(td).empty().append($button);

                td.style.textAlign = 'left';
                td.style.fontWeight = 'bold';
            };

            var actionRendererMoneyHtml = function (instance, td, row, col, prop, value, cellProperties) {

                var valid = instance.getDataAtRowProp(row, 'Id');
                var Images_1 = instance.getDataAtRowProp(row, 'SoTienTruyThu');
                var $button = ''
                if (valid === null || valid === '' || valid === undefined ||
                    Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                    $button = '';
                } else {
                    $button = Images_1;
                }
                $(td).empty().append($button);

                td.style.textAlign = 'right';
                td.style.fontWeight = 'bold';
            };

            var rowTest;
            var actionRenderer1 = function (instance, td, row, col, prop, value, cellProperties) {

                var data = $.grep(respone, function (item, index) {
                    return index == row;
                });
                var $button = ''
                var valid = instance.getDataAtRowProp(row, 'Id');

                $button = $('<i id="r' + valid + '" data-value="' + valid + '" class="fa fa-comments" style="color:green"></i>');
                if (permisstion.isAssiner || permisstion.isGroupAssiner) {
                    $button.click(function () {
                        var ID = $(this).attr('data-value');
                        RequestDetailId = ID;
                        rowTest = row;
                        var MM = $.grep(dataHandsontable, function (value, number) {
                            return value.Id == RequestDetailId;
                        });

                        if (MM.length > 0) {
                            MoneyGrid1 = MM[0].SoTienTruyThuDieuChinh == '' || MM[0].SoTienTruyThuDieuChinh == null || MM[0].SoTienTruyThuDieuChinh == undefined ? MM[0].Money1 : MM[0].SoTienTruyThuDieuChinh;
                            $('#MoneyGrid1').val(MoneyGrid1);
                        }
                        $.get('/Requests/LoadDanhSachTruyThu', { MaCL: CL.Id, MaChiTietCL: RequestDetailId }, function (dataGrid) {
                            if (dataGrid.length == 0) {
                                dataLoadAfter = [];
                                hot2.loadData(dataLoadAfter);
                            }
                            else {
                                dataLoadAfter = dataGrid;
                                hot2.loadData(dataLoadAfter);
                            }
                        });
                        if (MM[0].SoTienTruyThuDieuChinh == '' || MM[0].SoTienTruyThuDieuChinh == null || MM[0].SoTienTruyThuDieuChinh == undefined || MM[0].SoTienTruyThuDieuChinh == 0) {
                            XFunction.RenderMessage('error', 'Số tiền truy thu là 0. Không cần nhập truy thu'); return;
                        }
                        else {
                            $('#modalGanTruyThu').modal('show');
                        }
                    });
                }
                $(td).empty().append($button);
            };

            var dataPopupDanhSachTruyThu = [], dataPopupDanhSachTruyThuFull = [];

            $.get('/Requests/GetEmpByAssigner', { MaNXL: CL.Id }, function (dataPopup) {
                if (dataPopup.length > 0) {
                    dataPopupDanhSachTruyThuFull = dataPopup;
                    $.each(dataPopup, function (index, item) {

                        dataPopupDanhSachTruyThu.push(item.EmployeeCode + '--' + item.EmployeeName)
                    });
                }
            });

            var TongPhiPhuKien = 0;
            var TongTienTruyThuLine = 0;

            if (CL.StepNo == 3) {
                var dataAfterChange1 = dataHandsontable === undefined ? [] : $.grep(dataHandsontable, function (item3, index3) {
                    return item3.Id !== undefined && item3.Id !== '' && item3.Id !== null
                        && item3.Approved2 !== undefined && item3.Approved2 !== '' && item3.Approved2 !== null && item3.Approved2 == 1;
                });
                $.each(dataAfterChange1, function (index12, item12) {
                    TongPhiPhuKien += item12.SoTienTruyThuDieuChinh;
                });
            }
            else {
                $.each(dataHandsontable, function (index2, item2) {
                    TongPhiPhuKien += item2.Money1;
                });
            }
            var setSum = function (sum) {
                Money = Math.ceil(sum);
                var stringSum = Money.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                $('#captionHot1').html('Tổng phí phụ kiện:  ' + stringSum).css('font-weight', 'bold').css('color', 'green');
            }
            setSum(TongPhiPhuKien);

            var setShow = function (str) {
                Money = Math.ceil(str);
                var stringSum = Money.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                return stringSum;
            }

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    hiddenColumns: {
                        //   columns: [8],
                        indicators: true
                    },
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Duyệt',
                            'Không duyệt',
                            'Lệnh luân chuyển thiếu',
                            'Tên phòng bảo hành nhận',
                            'Số phiếu bảo hành',
                            'Số Imei',
                            'Nội dung thiếu',
                            'Phí phụ kiện',
                            'Số tiền truy thu điều chỉnh',
                            'Diễn giải của phòng bảo hành',
                            'Thời hạn',
                            'Phản hồi',
                            'Chọn thông tin truy thu',
                            'Tên nhân viên truy thu',
                            'Số tiền truy thu từng nhân viên'
                        ],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property3', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Imei', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property4', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Money1', type: 'numeric', className: 'htRight', readOnly: true, format: '0,0' },
                        { data: 'SoTienTruyThuDieuChinh', type: 'numeric', className: 'htRight', format: '0,0', readOnly: AssignerMoney }, // LuanNT44-16/10/2019-150-DC assigner money
                        { data: 'Property5', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Time1', type: 'date', className: 'htLeft', readOnly: !permisstion.isSender },
                        { data: "button", renderer: actionRenderer },
                        { data: "button1", renderer: actionRenderer1, editor: false },
                        { data: 'NhanVienTruyThu', type: 'text', renderer: actionRendererEmployeesHtml, className: 'htLeft', readOnly: true, width: 230 },
                        { data: 'SoTienTruyThu', type: 'text', renderer: actionRendererMoneyHtml, className: 'htLeft', readOnly: true, format: '0,0' },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (permisstion.isSender && CL.StepNo !== 2) {
                                    XFunction.RenderMessage("error", "Bạn không có quyền thực hiện thao tác này");
                                    hot.setDataAtCell(row, 0, null, 'not');
                                    return false;
                                }
                                else {
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, null, 'not');
                                    }
                                    return true;
                                }
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (permisstion.isSender && CL.StepNo !== 2) {
                                    XFunction.RenderMessage("error", "Bạn không có quyền thực hiện thao tác này");
                                    hot.setDataAtCell(row, 1, null, 'not');
                                    return false;
                                }
                                else {
                                    if (value == true) {
                                        hot.setDataAtCell(row, 0, null, 'not');
                                    }
                                    return true;
                                }
                            }
                            if (col === 'Time1') {
                                var value = changes[i][3];
                                var oldValue = hot.getDataAtRowProp(row, 'TimeDefault');
                                if (value < oldValue) {
                                    XFunction.RenderMessage("error", "Ngày gia hạn phải lớn hơn ngày hiện tại");
                                    return false;
                                }
                            }
                        }
                    },
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        var instance = this;
                        changes.forEach(function (change) {
                            var row = change[0], colunm = change[1], newVal = change[3];
                            var cellProperties, options;
                            for (i = 0; i < dataHandsontable.length; i++) {
                                if (colunm == 'Time1') {
                                    hot.setDataAtRowProp(i, 'Time1', newVal, 'not');
                                }
                            }
                        });
                    },
                    afterLoadData: function (event) {
                        $("#modalGanTruyThu").on("show.bs.modal", function (r) {
                            setTimeout(function () {
                                hot2.render();
                            }, 200);
                        });
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            //========= plugin ẩn ccột
            var plugin = hot.getPlugin('hiddenColumns');
            if (CL.StepNo == 1) {
                plugin.hideColumn(8);
                plugin.hideColumn(12);
                plugin.hideColumn(13);
                plugin.hideColumn(14);
                if (CL.Status == 4) {
                    hot.updateSettings({
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if (col == 0) {
                                cellProperties.readOnly = true;
                            }
                            if (col == 1) {
                                cellProperties.readOnly = true;
                            }
                            return cellProperties;
                        }
                    });
                    plugin.hideColumn(8);
                    plugin.hideColumn(12);
                    plugin.showColumn(13);
                    plugin.showColumn(14);

                }
            }
            else if (CL.StepNo == 2) {
                plugin.showColumn(8);
                plugin.hideColumn(12);
                plugin.hideColumn(13);
                plugin.hideColumn(14);
                if (permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender == true) {
                    hot.updateSettings({
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if (col == 10) {
                                cellProperties.readOnly = true;
                            }
                            return cellProperties;
                        }
                    });
                    plugin.hideColumn(12);
                    plugin.hideColumn(13);
                    plugin.hideColumn(14);
                }

                if (CL.Status == 4) {
                    hot.updateSettings({
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if (col == 0) {
                                cellProperties.readOnly = true;
                            }
                            if (col == 1) {
                                cellProperties.readOnly = true;
                            }
                            if (col == 8) {
                                cellProperties.readOnly = true;
                            }
                            if (col == 10) {
                                cellProperties.readOnly = true;
                            }
                            return cellProperties;
                        }
                    });
                    plugin.hideColumn(12);
                    plugin.hideColumn(13);
                    plugin.hideColumn(14);
                }
            }
            else if (CL.StepNo == 3) {
                plugin.showColumn(8);
                plugin.showColumn(12);
                plugin.showColumn(13);
                plugin.showColumn(14);
                dataAfterChange = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null
                        && item.Approved2 !== undefined && item.Approved2 !== '' && item.Approved2 !== null && item.Approved2 == 1;
                });
                // dataHandsontable = dataAfterChange;
                hot.updateSettings({
                    data: dataHandsontable = dataAfterChange,
                    cells: function (row, col, prop) {
                        var cellProperties = {};
                        if (col == 0) {
                            cellProperties.readOnly = true;
                        }
                        if (col == 1) {
                            cellProperties.readOnly = true;
                        }
                        if (col == 8) {
                            cellProperties.readOnly = true;
                        }
                        if (col == 10) {
                            cellProperties.readOnly = true;
                        }

                        return cellProperties;
                    }
                });
                if (CL.Status == 4) {
                    plugin.hideColumn(12);
                    plugin.showColumn(13);
                    plugin.showColumn(14);
                }
            }
            hot.render();
            //========= plugin ẩn ccột

            //---------------------
            var setting2 = function () {
                return {
                    data: dataLoadAfter,
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    minSpareRows: 6,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Tên nhân viên bị truy thu',
                            'Số tiền bị truy thu'
                        ],
                    columns: [
                        { data: 'NhanVienTruyThu', source: dataPopupDanhSachTruyThu, type: 'autocomplete', className: 'htCenter', width: 250 },
                        { data: 'SoTienTruyThu', type: 'numeric', className: 'htCenter', format: '0,0' },
                    ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        var instance = this;
                        changes.forEach(function (change) {
                            var row = change[0], colunm = change[1], newVal = change[3];
                            var cellProperties, options;
                            if (colunm == 'NhanVienTruyThu' && row == 0) {
                                hot2.setDataAtRowProp(row, 'SoTienTruyThu', MoneyGrid1, 'not');
                            }
                            //if (colunm == 'NhanVienTruyThu' && row > 0) {
                            //     hot2.setDataAtRowProp(row, 'SoTienTruyThu', '', 'not');
                            //}
                        });
                    },
                    beforeChange: function (change, source) {
                        if (source == 'not') return;
                        var cout = 0;
                        for (i = 0; i < change.length; i++) {
                            var row = change[i][0], colunm = change[i][1], newVal = change[i][3];
                            var cellProperties, options;
                            if (colunm == 'NhanVienTruyThu' && newVal != '' && newVal != undefined && newVal != null) {
                                var datas = $.grep(hot2.getSourceData(), function (value, posi) {
                                    return (value.NhanVienTruyThu != undefined && value.NhanVienTruyThu != null && value.NhanVienTruyThu != '')
                                        && value.NhanVienTruyThu == newVal;
                                });
                                if (datas.length > 0) {
                                    XFunction.RenderMessage('error', 'Nhân viên [' + newVal + '] đã được chọn trước đó');
                                    hot2.setDataAtRowProp(row, 'NhanVienTruyThu', '', 'not');
                                    return false;
                                }
                            }

                            if (colunm == 'SoTienTruyThu' && newVal != '' && newVal != undefined && newVal != null) {
                                var TenNV = hot2.getDataAtRowProp(row, 'NhanVienTruyThu');
                                if (TenNV == '' || TenNV == null || TenNV == undefined) {
                                    XFunction.RenderMessage('error', 'Vui lòng nhập tên nhân viên trước khi nhập số tiền');
                                    hot2.setDataAtRowProp(row, 'NhanVienTruyThu', '', 'not');
                                    return false;
                                }
                                //var Sumhot = $.grep(hot2.getSourceData(), function (value, number) {
                                //    return value.SoTienTruyThu != '' && value.SoTienTruyThu != null && value.SoTienTruyThu != undefined && $.isNumeric(value.SoTienTruyThu) == true;
                                //});
                                //if (Sumhot.length > 0) {
                                //    var MoneySum = 0 ;
                                //    $.each(Sumhot, function (index, item) {
                                //        MoneySum += item.SoTienTruyThu;
                                //    });
                                //    console.log(MoneyGrid1);

                                //    if ((MoneySum + newVal) > MoneyGrid1) {
                                //        XFunction.RenderMessage('error', 'Số tiền truy thu vượt quá quy định');
                                //        hot2.setDataAtRowProp(row, 'SoTienTruyThu', '', 'not');
                                //        return false;
                                //    }
                                //}
                            }
                        }
                    },
                };
            };
            hot2 = new Handsontable(container2, setting2());
            //---------------------
            var TongTruyThuGrid = 0;
            $('#btnGanTruyThuLuong').on('click', function () {
                var data = $.grep(hot2.getSourceData(), function (value, number) {
                    return (value.NhanVienTruyThu != '' && value.NhanVienTruyThu != null && value.NhanVienTruyThu != undefined
                        && $.isNumeric(value.SoTienTruyThu) == true && value.SoTienTruyThu >= 0)
                });
                if (data.length == 0) {
                    XFunction.RenderMessage('error', 'Không có thông tin nhân viên');
                    return false;
                }
                else {
                    var Tong = '', ThongTinSoTien = '';
                    $.each(data, function (index, item) {
                        Tong += item.NhanVienTruyThu + '\n';
                        ThongTinSoTien += setShow(item.SoTienTruyThu) + '\n';
                    });

                    var EmployeeList = '', MoneyList = 0, EmployeeListFull = '', TongTruyThuLuongGrid = 0;
                    $.each(data, function (index, item) {
                        TongTruyThuLuongGrid += item.SoTienTruyThu;
                    });
                    if (TongTruyThuLuongGrid != MoneyGrid1) {
                        XFunction.RenderMessage('error', 'Tổng tiền truy thu chưa bằng tổng tiền phí phụ kiện!');
                        return false;
                    }
                    var DA = [];
                    $.each(data, function (index, item) {
                        var EM = $.grep(dataPopupDanhSachTruyThuFull, function (value, number) {
                            return (value.EmployeeCode + '--' + value.EmployeeName) == (item.NhanVienTruyThu);
                        });
                        if (EM.length == 0) {
                            XFunction.RenderMessage('error', 'Nhân viên đã chọn không hợp lệ');
                            return false;
                        }
                        EmployeeList = item.NhanVienTruyThu.split('-')[0].toString();
                        MoneyList = item.SoTienTruyThu;

                        DA.push({ RequestID: CL.Id, EmployeeList: EmployeeList, MoneyList: MoneyList, RequestDetailId: RequestDetailId });

                    });

                    dataFull2 = $.grep(hot2.getSourceData(), function (value, number) {
                        return (value.NhanVienTruyThu != '' && value.NhanVienTruyThu != null && value.NhanVienTruyThu != undefined)
                    });
                    var datacheckNull = [];
                    $.each(dataFull2, function (index1, item1) {
                        if ((item1.SoTienTruyThu === '' || item1.SoTienTruyThu === null || item1.SoTienTruyThu === undefined) && (item1.NhanVienTruyThu !== '' || item1.NhanVienTruyThu !== null || item1.NhanVienTruyThu !== undefined)) {
                            datacheckNull.push(index1);
                        }
                    });
                    if (datacheckNull.length > 0) {
                        XFunction.RenderMessage('error', 'Chưa nhập đầy đủ thông tin truy thu'); return;
                    }
                    // console.log(DA); return;
                    if (DA.length > 0) {
                        $.ajax({
                            type: "POST",
                            url: "/Requests/UploadListTruyThu",
                            data: {
                                UploadListTruyThu: DA
                            },
                            success: function (result) {
                                hot.setDataAtRowProp(rowTest, 'NhanVienTruyThu', Tong, 'not');
                                hot.setDataAtRowProp(rowTest, 'SoTienTruyThu', ThongTinSoTien, 'not');
                            },
                            error: function () {
                                XFunction.RenderMessage('error', 'Có lỗi khi gán truy thu');
                                return false;

                            }
                        });
                    }
                }
                $('#modalGanTruyThu').modal('hide');

            });

            $('#btnSendGiaiTrinh').on('click', function () {

                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        hot.setDataAtRowProp(row, 'HaveConvertation1', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công');
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                ///
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0 && CL.StepNo > 1) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }

                if ((permisstion.isAssiner || permisstion.isGroupAssiner) && CL.StepNo == 1) {
                    var dataGiaiTrinhValid = []
                    $.each(myData, function (index, item) {
                        if (item.HaveConvertation == 0) {
                            dataGiaiTrinhValid.push(item);
                        }
                    });
                    if (dataGiaiTrinhValid.length > 0) {
                        XFunction.RenderMessage("error", "Phải nhập phản hồi tất cả các line"); return;
                    }
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Time: item.Time1,
                        SoTienTruyThuDieuChinh: item.SoTienTruyThuDieuChinh,
                    });
                });
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();
                var dataInvalid = [];
                var dataInvalidEmp = [];
                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }
                //var dataGiaiTrinhValid = []
                //$.each(myData, function (index, item) {
                //    if (item.HaveConvertation == 0) {
                //        dataGiaiTrinhValid.push(item);
                //    }
                //});
                //if (dataGiaiTrinhValid.length > 0) {
                //    XFunction.RenderMessage("error", "Phải nhập phản hồi tất cả các line"); return;
                //}
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        SoTienTruyThuDieuChinh: item.SoTienTruyThuDieuChinh == null || item.SoTienTruyThuDieuChinh == undefined || item.SoTienTruyThuDieuChinh == '' ? null : item.SoTienTruyThuDieuChinh,
                    });
                });
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {
                //kiểm tra tại bước 1 của callLog nếu shop không giải trình đầy đủ thì không cho chuyển bước
                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });

                var dataGiaiTrinhValid = [], dataInvalid2 = [], dataHideButton = [], dataCheckDuyet = [], dataCheckNhapTruyThu = [];

                $.each(myData, function (index, item) {
                    if (item.HaveConvertation == 0) {
                        dataGiaiTrinhValid.push(item);
                    }
                    if ((item.Approved1 === null || item.Approved1 === '' || item.Approved1 === undefined || item.Approved1 === 0)
                        && (item.Approved2 === null || item.Approved2 === '' || item.Approved2 === undefined || item.Approved2 === 0)) {
                        dataInvalid2.push(index + 1);
                    }
                    if (item.Approved1 === null || item.Approved1 === '' || item.Approved1 === undefined || item.Approved1 === 0) {
                        dataHideButton.push(index + 1);
                    }
                    if (item.Approved2 != '' && item.Approved2 != null && item.Approved2 != undefined && item.Approved2 == 1) {
                        dataCheckDuyet.push(index);
                    }
                    if ((item.Approved2 != '' && item.Approved2 != null && item.Approved2 != undefined && item.Approved2 == 1)
                        && (item.SoTienTruyThuDieuChinh == '' || item.SoTienTruyThuDieuChinh == null || item.SoTienTruyThuDieuChinh == undefined) && $.isNumeric(item.SoTienTruyThuDieuChinh) == false) {
                        dataCheckNhapTruyThu.push(index);
                    }
                });
                if (CL.StepNo === 1) {
                    if (dataGiaiTrinhValid.length > 0) {
                        XFunction.RenderMessage("error", "Phải nhập phản hồi tất cả các line mới chuyển bước"); return;
                    }
                }

                else if (CL.StepNo === 2) {
                    if (dataInvalid2.length > 0) {
                        XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt");
                        return;
                    }
                    if (dataCheckNhapTruyThu.length > 0) {
                        XFunction.RenderMessage("error", "Phải nhập số tiền truy thu điều chỉnh tất cả các line không duyệt");
                        return;
                    }
                }
                else if (CL.StepNo === 3) {

                }
                if (dataCheckDuyet.length === 0) {
                    $('#DuyetAll').val("0");
                }
                else {
                    $('#DuyetAll').val("1");
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Time: item.Time1,
                        SoTienTruyThuDieuChinh: item.SoTienTruyThuDieuChinh,
                    });
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                var dataHideButton = [];
                $.each(myData, function (index, item) {
                    if (item.SoTienTruyThuDieuChinh !== 0 && (item.SoTienTruyThuDieuChinh !== null || item.SoTienTruyThuDieuChinh !== '' || item.SoTienTruyThuDieuChinh !== undefined)) {
                        if (item.SoTienTruyThu === null || item.SoTienTruyThu === '' || item.SoTienTruyThu === undefined) {
                            dataHideButton.push(item);
                        }
                    }
                });
                if (dataHideButton.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập truy thu tất cả các line"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Time: item.Time1,
                        SoTienTruyThuDieuChinh: item.SoTienTruyThuDieuChinh,
                    });
                });
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // Gom hàng thiếu phòng bảo hành rule mới*/
    function contruct_121() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApproved = false;
            $.each(respone, function (number, values) {
                if ((permisstion.isAssiner == true) || (permisstion.isGroupAssiner == true)) {
                    checkApproved = true;
                }
                else {
                    checkApproved = false;
                }
            });
            var DataNguyenNhanHuy =
                ['',
                    'Khách hàng offline/KH trả góp offline mới được duyệt muốn mua sản phẩm. Shop cam kết xin sản phẩm khác về trả KH ecom (không áp dụng máy cũ, xả hàng)',
                    'KH ecom đặt cọc muốn đổi sản phẩm khác.',
                    'KH ecom đổi trả thẳng/trả góp',
                    'KH Ecom không có nhu cầu mua hàng'
                ];
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    minSpareRows: 6,
                    hiddenColumns: {
                        //   columns: [8],
                        indicators: true
                    }
                    ,
                    //====================================Oder ==============================================
                    colHeaders: ['Huỷ', 'Nhả book', 'Nguyên nhân hủy', 'Loại đơn hàng', 'Tên khách hàng', 'Số điện thoại', 'Số đơn hàng Ecom', 'Nhân viên phụ trách đơn hàng', 'Shop được đẩy đơn hàng', 'Ngày tạo đơn hàng', 'Lý do hủy'],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'currentRow',
                            readOnly: !checkApproved,
                            checkedTemplate: '1', uncheckedTemplate: '0',
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id !== '' && id !== null && id !== undefined) {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = !checkApproved;
                                } else {
                                    cellProperties.readOnly = true;
                                }
                            }
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'currentRow',
                            readOnly: !checkApproved,
                            checkedTemplate: '1', uncheckedTemplate: '0',
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id !== '' && id !== null && id !== undefined) {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = !checkApproved;
                                } else {
                                    cellProperties.readOnly = true;
                                }
                            }
                        },
                        {
                            data: "Property5", type: 'text', readOnly: true, className: 'htLeft',
                            //renderer: function (instance, td, row, col, prop, value, cellProperties) {
                            //    var id = instance.getDataAtRowProp(row, 'Id');
                            //    if (id !== '' && id !== null && id !== undefined) {
                            //        Handsontable.DropdownCell.renderer.apply(this, arguments);
                            //        cellProperties.readOnly = !checkApproved;
                            //    } else {
                            //        cellProperties.readOnly = true;
                            //    }
                            //}
                        },
                        { data: 'Name', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'CustomerName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'EmployeeName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ShopName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TimeShop', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property6', type: 'text', className: 'htLeft', readOnly: true }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        var cout = 0;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 1;
                                            item.Approved2 = 0;
                                            cout += 1;
                                        }
                                    });
                                    hot.render();
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 0;
                                            item.Approved2 = 1;
                                            cout += 1;
                                        }
                                    });
                                    hot.render();
                                }
                                return true;
                            }
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            //========= Ẩn cột Nhả book nếu ReferenceCode = 1
            var plugin = hot.getPlugin('hiddenColumns');

            if (dataHandsontable[0].ReferenceCode == 1) {
                plugin.hideColumn(1);
            }
            else {
                plugin.showColumn(1);
            }
            hot.render();

            //===========================
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng cập nhật đầy đủ trạng thái huỷ hoặc nhả book!"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved2 == null || item.Approved2 == undefined || item.Approved2 == '' || item.Approved2 == '0' ? false : true
                        //Property5: item.Property5 == null || item.Property5 == undefined ? '' : item.Property5
                    });
                });
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // Duyệt Hủy/Nhả book ĐH Ecom
    function contruct_123() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isoldStepAssigner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isoldStepAssigner = true;
            });
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 4,
                    minCols: 4,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 21,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 4,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Duyệt', 'Không duyệt', 'Shop', 'Số lượng miếng dán màn hình'],
                    columns: [
                        { data: 'Duyet', type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: false, className: 'htLeft' },
                        { data: 'KoDuyet', type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: false, className: 'htLeft' },
                        { data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htLeft' },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Duyet') {
                                var value = changes[i][3];
                                if (value == true || value == 1) {
                                    hot.setDataAtCell(row, 1, 0, 'not');
                                } else {
                                    hot.setDataAtCell(row, 1, 1, 'not');
                                }
                                return true;
                            }
                            if (col === 'KoDuyet') {
                                var value = changes[i][3];
                                if (value == true || value == 1) {
                                    hot.setDataAtCell(row, 0, 0, 'not');
                                } else {
                                    hot.setDataAtCell(row, 0, 1, 'not');
                                }
                                return true;
                            }
                        }


                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataInvalid = [];
                $.each(myData, function (index, item) {
                    if ((item.Duyet === null || item.Duyet === '' || item.Duyet === null || item.Duyet === 0)
                        && (item.KoDuyet === null || item.KoDuyet === '' || item.KoDuyet === null || item.KoDuyet === 0)) {
                        dataInvalid.push(index + 1);
                    }
                });
                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại dòng : " + dataInvalid.join(','));
                    return;
                }
                $.each(myData, function (index, item) {
                    if (item.Duyet === null || item.Duyet === '' || item.Duyet === null || item.Duyet === 0) {
                        item.Approved = 0;
                    } else {
                        item.Approved = 1;
                    }
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }

            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataInvalid = [];
                $.each(myData, function (index, item) {
                    if ((item.Duyet === null || item.Duyet === '' || item.Duyet === null || item.Duyet === 0)
                        && (item.KoDuyet === null || item.KoDuyet === '' || item.KoDuyet === null || item.KoDuyet === 0)) {
                        dataInvalid.push(index + 1);
                    }
                });
                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại dòng : " + dataInvalid.join(','));
                    return;
                }
                $.each(myData, function (index, item) {
                    if (item.Duyet === null || item.Duyet === '' || item.Duyet === null || item.Duyet === 0) {
                        item.Approved = 0;
                    } else {
                        item.Approved = 1;
                    }
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataInvalid = [];
                $.each(myData, function (index, item) {
                    if ((item.Duyet === null || item.Duyet === '' || item.Duyet === null || item.Duyet === 0)
                        && (item.KoDuyet === null || item.KoDuyet === '' || item.KoDuyet === null || item.KoDuyet === 0)) {
                        dataInvalid.push(index + 1);
                    }
                });
                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại dòng : " + dataInvalid.join(','));
                    return;
                }
                $.each(myData, function (index, item) {
                    if (item.Duyet === null || item.Duyet === '' || item.Duyet === null || item.Duyet === 0) {
                        item.Approved = 0;
                    } else {
                        item.Approved = 1;
                    }
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();


            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataInvalid = [];
                $.each(myData, function (index, item) {
                    if ((item.Duyet === null || item.Duyet === '' || item.Duyet === null || item.Duyet === 0)
                        && (item.KoDuyet === null || item.KoDuyet === '' || item.KoDuyet === null || item.KoDuyet === 0)) {
                        dataInvalid.push(index + 1);
                    }
                });
                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại dòng : " + dataInvalid.join(','));
                    return;
                }
                $.each(myData, function (index, item) {
                    if (item.Duyet === null || item.Duyet === '' || item.Duyet === null || item.Duyet === 0) {
                        item.Approved = 0;
                    } else {
                        item.Approved = 1;
                    }
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // Duyệt miếng dán màn hình
    function contruct_114() {
        //▼	Edit - TuanNA89 - 28/12/2018 - Fix Trao đổi CL 114: Nhập Hàng demo
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isoldStepAssigner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isoldStepAssigner = true;
            });
            var check = permisstion.isAssiner == true ||
                permisstion.isGroupAssiner == true ||
                permisstion.isoldStepAssigner == true
                ? true : false;
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Shop',
                        'Mã hàng',
                        'Tên hàng',
                        'Serial/Imei',
                        'Xác nhận',
                        'Kho xuất',
                        'Số lượng',
                        'Lý do',
                        'Mã hàng mới',
                        'Tên hàng mới',
                        'Imei mới',
                        'Ngành hàng',
                        'Loại hàng',
                        'Hãng',
                        'Thời hạn bảo hành',
                        'Giá bán'],
                    columns: [
                        { data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: "button", renderer: actionRenderer },
                        { data: 'Property3', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0', className: 'htLeft' },
                        { data: 'Property4', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property5', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property6', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ImeiNew', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property7', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property8', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property9', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Time1', type: 'date', dateFormat: 'DD/MM/YYYY', allowEmpty: true, className: 'htLeft', readOnly: true },
                        { data: 'Money1', type: 'numeric', readOnly: true, format: '0,0', className: 'htLeft' },
                    ],

                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                if (!check) {
                    XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này');
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                    return;
                }
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });
            $btnComment.on('click', function () {
                if (CL.Status == 4) {
                    XFunction.RenderMessage("error", "Yêu cầu đã được hoàn tất. Không thể thao tác");
                    return false;
                }

                if (CL.Status == 5) {
                    XFunction.RenderMessage("error", "Yêu cầu đã bị hủy. Không thể thao tác");
                    return false;
                }
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }

            });
            $btnReply.on('click', function () {
                if (CL.Status == 4) {
                    XFunction.RenderMessage("error", "Yêu cầu đã được hoàn tất. Không thể thao tác");
                    return false;
                }

                if (CL.Status == 5) {
                    XFunction.RenderMessage("error", "Yêu cầu đã bị hủy. Không thể thao tác");
                    return false;
                }
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();


            });
            $btnComplete.on('click', function () {
                if (CL.Status == 4) {
                    XFunction.RenderMessage("error", "Yêu cầu đã được hoàn tất. Không thể thao tác");
                    return false;
                }

                if (CL.Status == 5) {
                    XFunction.RenderMessage("error", "Yêu cầu đã bị hủy. Không thể thao tác");
                    return false;
                }
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
        //▲	Edit - TuanNA89 - 28/12/2018 - Fix Trao đổi CL 114: Nhập Hàng demo
    };
    function contruct_124() {

        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && status !== 4 && status !== 3 ? true : false;
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            actionPaging();
            var setting = function () {
                return {
                    //=================================Data=======
                    data: $.grep(dataHandsontable, function (item, index) {
                        return index < pageSize;
                    }),
                    //================================Cols=======
                    maxCols: 10,
                    minCols: 10,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 10,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 10,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    //maxRows: dataHandsontable.length,
                    //minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Mã sản phẩm', 'Tên sản phẩm', 'Serial / Imei',
                        'Shop',
                        'Kho xuất', 'Số lượng', 'Giải trình', 'Ngành hàng', 'Nhãn hàng', 'Lý do'],
                    columns: [
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Imei', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'WarehouseName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'numeric', format: '0,00', readOnly: !checkApp, className: 'htRight' },
                        { data: "button", renderer: actionRenderer },
                        { data: 'Property5View', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property6View', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property2', readOnly: true, className: 'htLeft', renderer: "html" },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Quantity') {
                                var value = changes[i][3], newthanhtien = value * hot.getDataAtCell(row, 4);
                                var imei = hot.getDataAtRowProp(row, 'Imei');
                                if (imei !== '' && imei !== null && imei !== undefined && imei.toString().trim().length != 0) {
                                    XFunction.RenderMessage("error", "Không được thay đổi số lượng khi có imei");
                                    return false;
                                }
                                return true;
                            }
                        }


                    },
                };

            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                if (!check) {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                    XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này'); return;
                }
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });

            function contructDataFurtureFinish() {
                if (TimeFutureFinish !== null && TimeFutureFinish !== '' && TimeFutureFinish !== undefined) {
                    var dataStr = '';
                    var TimeFutureFinishGlobal = TimeFutureFinish;
                    var TimeGoliveTimeGolive = TimeGolive;
                    if (TimeGoliveTimeGolive == '' || TimeGoliveTimeGolive == undefined || TimeGoliveTimeGolive == null) {
                        TimeGoliveTimeGolive = TimeFutureFinishGlobal;
                    }
                    var timeconvertFutureFinish = new Date(TimeFutureFinishGlobal).toDateInputValue();
                    var TimeGoliveTimeGolive = new Date(TimeGoliveTimeGolive).toDateInputValue();

                    if (permisstion.isSender == true) {
                        dataStr += '<p><table>';
                        dataStr += '<tr>';
                        dataStr += '<td>Ngày dự kiến hoàn thành :</td>';
                        dataStr += '<td><input type="date" class="form-control"  name="TimeFinishData" id="TimeFinishData"  /></td>';
                        dataStr += '<td><button type="button" class="btn btn-success" data-toggle="modal" id="btnUpdateTimeFutureFinish"><i class="fa fa-paper-plane-o"></i></button></td>';
                        dataStr += '</tr>';
                        dataStr += '</table></p>';
                        $('#captionHot1').html(dataStr);
                        $('#TimeFinishData').val(timeconvertFutureFinish);
                        $('#btnUpdateTimeFutureFinish').on('click', function () {
                            var dataUpdateNew = $('#TimeFinishData').val();
                            if (dataUpdateNew === '' || dataUpdateNew === undefined || dataUpdateNew === null || dataUpdateNew < TimeGoliveTimeGolive) {
                                XFunction.RenderMessage('error', 'Ngày cập nhật mới phải lớn hơn hoặc bằng ngày cập nhật lúc tạo callLog : ' + TimeGoliveTimeGolive);
                                return;
                            }
                            $.get('/Requests/UpdateTimeFutureFinish', { Data: dataUpdateNew, RequestId: CL.Id }, function (respone) {
                                if (respone == 1) {
                                    XFunction.RenderMessage('success', 'Cập nhật thành công');
                                } else {
                                    XFunction.RenderMessage('error', 'Cập nhật không thành công vui long xem lai dữ liệu');
                                }
                            });
                        });
                    } else {
                        var currentTime = new Date(TimeFutureFinishGlobal);
                        var month = currentTime.getMonth() + 1;
                        var day = currentTime.getDate();
                        var year = currentTime.getFullYear();
                        var date = day + "/" + month + "/" + year;
                        dataStr += '<p style="width:400px">';
                        dataStr += 'Ngày dự kiến hoàn thành ' + date;
                        dataStr += '</p>';
                        $('#captionHot1').html(dataStr);
                    }
                }

            };
            contructDataFurtureFinish();

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                if (status == 4 || status == 3) {
                    mydata = [];
                }
                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }


                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                if (status == 4 || status == 3) {
                    mydata = [];
                }

                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }

                var message = $("#Message").val();
                if (status == 4 || status == 3) {
                    mydata = [];
                }

                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                if (status == 4 || status == 3) {
                    mydata = [];
                }

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };  //Xuất khác của kiểm soát nội bộ
    function contruct_temp() {
        $('#sum-money').hide();
        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            dataHc = data;
            var checkSender = false, checkAssiner;
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    checkSender = true;
                if (item == 'assigner' || item == 'groupAssigner')
                    checkAssiner = true;
            });
            var checkEdit = checkAssiner == true && (CL.StepNo == 1 || CL.StepNo == 2) ? true : false;
            var setting = function () {
                return {
                    data: dataHc,
                    colHeaders: true,
                    rowHeaders: true,
                    stretchH: 'all',
                    startCols: 8,
                    maxCols: 8,
                    minCols: 8,
                    fillHandle: false,
                    allowInvalid: false,
                    currentRowClassName: 'currentRow',
                    fixedColumnsLeft: 1,
                    manualColumnResize: true,
                    manualRowResize: true,
                    outsideClickDeselects: true,
                    minSpareRows: 0,
                    maxRows: dataHc.length + 1,
                    minRows: dataHc.length + 1,
                    colHeaders: ["Mặt hàng", "Số lượng đặt", 'Số lương đặt Confirm', "Số lượng xác nhận của Shop/BO", "Đơn giá", "Thành tiền", "Đơn vị tính", "Ghi chú"],
                    columns: [
                        { data: "Item", readOnly: true, className: 'htLeft', width: 300 },
                        { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0' },

                        { data: 'Quantity1', readOnly: true, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                        { data: 'QuantityAvaiable', readOnly: true, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                        {
                            data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 80,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 4 && row === dataHc.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Sum', readOnly: true, type: 'numeric', format: '0,0', width: 150,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 5 && row === dataHc.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataHc, function (index, item) {
                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        { data: 'Unit', readOnly: true, className: 'htLeft', width: 100 },
                        { data: 'Note', readOnly: true, className: 'htLeft' }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'QuantityAvaiable') {
                                var value = changes[i][3], newthanhtien = value * hot.getDataAtCell(row, 4);
                                hot.setDataAtCell(row, 5, newthanhtien, 'not');
                                return true;
                            }
                            if (col === 'Quantity1') {
                                var value = changes[i][3];
                                hot.setDataAtCell(row, 3, value, 'edit');
                                return true;
                            }
                        }


                    },
                    cells: function (row, col, prop) {
                        cellProperties = {};
                        if (row === dataHc.length - 1)
                            cellProperties.readOnly = true;
                        return cellProperties;
                    }
                };
            };
            var hot = new Handsontable(container, setting());
        });
    };
    function contruct_130() {
        $('#sum-money').hide();
        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            dataHc = data;
            var checkSender = false, checkAssiner;
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    checkSender = true;
                if (item == 'assigner' || item == 'groupAssigner')
                    checkAssiner = true;
            });
            //var checkEdit = checkAssiner == true && (CL.StepNo == 1 || CL.StepNo == 5) ? true : false;
            var checkEditSoLuongConfim = false;
            var checkEditSoLuongDat = false;
            if (checkAssiner == true && (CL.StepNo == 1 || CL.StepNo == 2) && status != 4 && status != 5) {
                checkEditSoLuongConfim = true;
            }
            if (checkAssiner == true && CL.StepNo == 3 && status != 4 && status != 5) {
                checkEditSoLuongDat = true;
            }
            var sourceHinhThuc = ['Xuất từ NCC', 'Xuất từ kho HC'];//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
            var setting = function () {
                return {
                    data: dataHc,
                    colHeaders: true,
                    rowHeaders: true,
                    stretchH: 'all',
                    //startCols: 10,
                    //maxCols: 10,
                    //minCols: 10,
                    //fillHandle: false,
                    //allowInvalid: false,
                    //currentRowClassName: 'currentRow',
                    fixedColumnsLeft: 1,
                    manualColumnResize: true,
                    manualRowResize: true,
                    // outsideClickDeselects: true,
                    // minSpareRows: 0,
                    maxRows: dataHc.length + 1,
                    minRows: dataHc.length + 1,
                    colHeaders: ["Nhóm sản phẩm", "Mặt hàng", "Hình thức xuất", "Chi tiết thay đổi kho xuất sp", "Số lượng tồn kho", "Số lượng đặt", 'Số lương đặt Confirm', "Số lượng xác nhận của Shop/BO", "Đơn giá", "Thành tiền", "Đơn vị tính", "Ghi chú", "Số giao dịch"],//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                    columns: [
                        { data: "ProductGroup", readOnly: true, className: 'htLeft' },//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        { data: "Item", readOnly: true, className: 'htLeft' },
                        { data: "HinhThucXuat", className: 'htLeft', type: 'autocomplete', source: sourceHinhThuc, width: 200, readOnly: true },//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        { data: "Property2", readOnly: true, className: 'htLeft', type: 'text' },//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        { data: 'Quantity3', type: 'numeric', readOnly: true, format: '0,0' },
                        { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0' },

                        { data: 'Quantity1', readOnly: true /*!checkEditSoLuongConfim */, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                        { data: 'QuantityAvaiable', readOnly: !checkEditSoLuongDat, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                        {
                            data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 80,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 8 && row === dataHc.length - 1) {//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Sum', readOnly: true, type: 'numeric', format: '0,0', width: 150,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 9 && row === dataHc.length - 1) {//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataHc, function (index, item) {
                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        { data: 'Unit', readOnly: true, className: 'htLeft', width: 100 },
                        { data: 'Note', readOnly: true, className: 'htLeft' },
                        { data: 'Property10', readOnly: true, className: 'htLeft' }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'QuantityAvaiable') {
                                var value = changes[i][3], newthanhtien = value * hot.getDataAtCell(row, 6);//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                hot.setDataAtCell(row, 8, newthanhtien, 'not');//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                return true;
                            }
                            if (col === 'Quantity1') {
                                var value = changes[i][3];
                                hot.setDataAtCell(row, 6, value, 'edit');//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                return true;
                            }
                        }


                    },
                    cells: function (row, col, prop) {
                        cellProperties = {};
                        if (row === dataHc.length - 1)
                            cellProperties.readOnly = true;
                        return cellProperties;
                    }
                };
            };
            var hot = new Handsontable(container, setting());
            $("#comment").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {

                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }
                }
            });
            $("#reply").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }

                }
            });
            $("#complete").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                }

            });
            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    if (CL.StepNo === 2) {
                        $.ajax({
                            url: '/Requests/CheckWarehouseConfig',
                            type: 'GET',
                            data: {
                                WarehouseCode: CL.FromShop,
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                console.log("ERROR!");
                            },
                            success: function (datasCF) {
                                if (datasCF[0].ShopConfig === 0) {
                                    $('#Approved_HuongXL_45').val('0');
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/ChangeStep");
                                    form.submit();

                                }
                                else if (datasCF[0].ShopConfig === 1) {
                                    $('#Approved_HuongXL_45').val('1');
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/ChangeStep");
                                    form.submit();
                                }
                                else if (datasCF[0].ShopConfig === -1) {
                                    if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                        $('#Approved_HuongXL_45').val('0');
                                        $('#Details').val(JSON.stringify(myData));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    }
                                    else {
                                        $('#Approved_HuongXL_45').val('1');
                                        $('#Details').val(JSON.stringify(myData));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    };
                                };
                            }
                        });
                    }
                    else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/ChangeStep");
                        form.submit();
                    };
                };
            });
        });
    };

    //▼ Edit - ChuongNT3 - 18/05/2018 -- thêm popup up hình
    function contruct_134() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $.get('/Requests/GetCcForDetail', { requestId: CL.Id }, function (data) {
                var checkUserCC = false;
                $.each(data, function (index, item) {
                    if (item.Type == 'Cc' && Ass == item.EmployeeCode)
                        checkUserCC = true;
                });
                var dataHandsontable = [];
                dataHandsontable = respone;
                var dataSourceServiceName = [''];
                var dataSourceService = [];
                $.get('/Requests/GetTranderService', function (respone) {
                    if (respone !== '' && respone !== null && respone !== undefined && respone.length > 0) {
                        dataSourceService = respone;
                        $.each(respone, function (index, item) {
                            dataSourceServiceName.push(item.Name);
                        });
                    }
                });
                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isOldAssiner: false };
                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                    if (item == 'oldStepAssigner')
                        permisstion.isOldAssiner = true;
                });
                var checkPerss = permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender ? true : false;
                var CheckAssinger = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) ? true : false;
                var CheckStatus = CL.Status == 4 ? true : false;
                var CheckStep1 = CL.StepNo == 2 ? true : false;
                var CheckStep2 = CL.StepNo == 3 ? true : false;
                var OldAssiner = permisstion.isOldAssiner == true ? true : false;
                var CheckSender = permisstion.isSender == true ? true : false;
                var checkEdit = false;
                if (checkPerss == true && dataHandsontable[0].SoLanGoiOut == 0) {
                    checkEdit = true;
                }
                var checkStep3_4 = ((CL.StepNo == 3 || CL.StepNo == 4) && CheckAssinger == true && CL.Status != 4) || (CheckAssinger == false && CL.Status != 4) ? true : false;
                var checkStep3 = (CL.StepNo == 3 && checkPerss == true && CL.Status != 4) ? true : false;
                var checkStep2_3_4 = (CL.StepNo > 1 && checkPerss == true && CL.Status != 4) ? true : false;
                var checkStep1_2 = (CL.StepNo != 1 && CL.StepNo < 3 && checkPerss == true && CL.Status != 4) ? true : false;
                var Readonl = (checkPerss == true && (CL.Status != 4 && CL.Status != 5)) ? true : false;
                var ReadHXL = ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.Status == 2 && CL.StepNo == 2 ? true : false);
                var renderLineTable = function (uri) {
                    var strRe = '';
                    strRe += '<tr>'

                    strRe += '<td>';
                    var stringImage = '';
                    var duoi = uri.split('.')[1].toString().toLowerCase();
                    var tenfile = uri.split('/')[3].toString();
                    if (duoi === '' || duoi === undefined || duoi === null) {
                        duoi = '';
                    } else {
                        //var duoi = item1.split('.')[1].toString().toLowerCase();
                        if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                            stringImage = '<a href="' + uri + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a> ';
                        } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                            stringImage = '<a href="' + uri + '" download><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>';
                        } else {
                            stringImage = '<a href="' + uri + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a> ';
                        }
                    }
                    strRe += stringImage;
                    strRe += '</td>';

                    strRe += '<td>';
                    strRe += ' <input type="checkbox" class="clDeleteImage" name="chkDeleteImage" value="' + uri + '">';
                    strRe += '</td>';

                    strRe += '</tr>'
                    return strRe;
                }
                var trangThaiCL = '';
                if (CL.Status == 1) { trangThaiCL += 'Chờ xử lý'; }
                if (CL.Status == 2) { trangThaiCL += 'Đang xử lý'; }
                if (CL.Status == 3) { trangThaiCL += 'Đã trả lời'; }
                if (CL.Status == 4) { trangThaiCL += 'Hoàn tất'; }
                if (CL.Status == 5) { trangThaiCL += 'Đã hủy'; }
                if ((CL.StepNo == 2) && CL.Status != 4 && checkPerss == true) {
                    var actionRendererUpload_1 = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_1' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="1" class="fa fa-upload" style="color:green"></i>');
                                $button.click(function () {
                                    $('#RowLine134').val('-1');
                                    var idtemp = $(this).attr('id').toString();
                                    $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                    var id = $(this).attr('data-id');
                                    var col = $(this).attr('data-value');
                                    $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                    $('#uploadDetails').val('');
                                    $('#myModalUpload').modal('show');
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_1_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_1_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-1';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                                $button.click(function () {
                                    var listId = $(this).attr("data-value");
                                    var listspt = listId.split('-');
                                    var requestId = listspt[0];
                                    var requestDetailId = listspt[1];
                                    var domain = listspt[2];
                                    $('#btnDeleteImages').attr('data-value', listId);
                                    $('#modalDeleteImagesBody').html('');
                                    $.get('/Requests/GetFileUpload', {
                                        requestId: requestId,
                                        requestDetailId: requestDetailId,
                                        Domain: domain
                                    }, function (respone) {
                                        if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                            var stringImage = '';
                                            $.each(respone, function (index1, item1) {
                                                stringImage += renderLineTable(item1.Uri);
                                            });
                                            $('#modalDeleteImagesBody').html(stringImage);
                                            $('#modalDeleteImages').modal('show');
                                        } else {
                                            XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                        }
                                    }).error(function () {
                                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                    });

                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };

                    var actionRendererUpload_2 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_2' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="2" class="fa fa-upload" style="color:green"></i>');
                                $button.click(function () {
                                    $('#RowLine134').val('-1');
                                    var idtemp = $(this).attr('id').toString();
                                    $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                    var id = $(this).attr('data-id');
                                    var col = $(this).attr('data-value');
                                    $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                    $('#uploadDetails').val('');
                                    $('#myModalUpload').modal('show');
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_2_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_2_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-2';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                                $button.click(function () {
                                    var listId = $(this).attr("data-value");
                                    var listspt = listId.split('-');
                                    var requestId = listspt[0];
                                    var requestDetailId = listspt[1];
                                    var domain = listspt[2];
                                    $('#btnDeleteImages').attr('data-value', listId);
                                    $('#modalDeleteImagesBody').html('');
                                    $.get('/Requests/GetFileUpload', {
                                        requestId: requestId,
                                        requestDetailId: requestDetailId,
                                        Domain: domain
                                    }, function (respone) {
                                        if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                            var stringImage = '';
                                            $.each(respone, function (index1, item1) {
                                                stringImage += renderLineTable(item1.Uri);
                                            });
                                            $('#modalDeleteImagesBody').html(stringImage);
                                            $('#modalDeleteImages').modal('show');
                                        } else {
                                            XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                        }
                                    }).error(function () {
                                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                    });

                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };

                    var actionRendererUpload_3 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_3' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="3" class="fa fa-upload" style="color:green"></i>');
                                $button.click(function () {
                                    $('#RowLine134').val('-1');
                                    var idtemp = $(this).attr('id').toString();
                                    $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                    var id = $(this).attr('data-id');
                                    var col = $(this).attr('data-value');
                                    $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                    $('#uploadDetails').val('');
                                    $('#myModalUpload').modal('show');
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_3_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_3_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-3';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                                $button.click(function () {
                                    var listId = $(this).attr("data-value");
                                    var listspt = listId.split('-');
                                    var requestId = listspt[0];
                                    var requestDetailId = listspt[1];
                                    var domain = listspt[2];
                                    $('#btnDeleteImages').attr('data-value', listId);
                                    $('#modalDeleteImagesBody').html('');
                                    $.get('/Requests/GetFileUpload', {
                                        requestId: requestId,
                                        requestDetailId: requestDetailId,
                                        Domain: domain
                                    }, function (respone) {
                                        if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                            var stringImage = '';
                                            $.each(respone, function (index1, item1) {
                                                stringImage += renderLineTable(item1.Uri);
                                            });
                                            $('#modalDeleteImagesBody').html(stringImage);
                                            $('#modalDeleteImages').modal('show');
                                        } else {
                                            XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                        }
                                    }).error(function () {
                                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                    });

                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };

                    var actionRendererUpload_4 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_4' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="4" class="fa fa-upload" style="color:green"></i>');
                                $button.click(function () {
                                    $('#RowLine134').val('-1');
                                    var idtemp = $(this).attr('id').toString();
                                    $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                    var id = $(this).attr('data-id');
                                    var col = $(this).attr('data-value');
                                    $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                    $('#uploadDetails').val('');
                                    $('#myModalUpload').modal('show');
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_4_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_4_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-4';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                                $button.click(function () {
                                    var listId = $(this).attr("data-value");
                                    var listspt = listId.split('-');
                                    var requestId = listspt[0];
                                    var requestDetailId = listspt[1];
                                    var domain = listspt[2];
                                    $('#btnDeleteImages').attr('data-value', listId);
                                    $('#modalDeleteImagesBody').html('');
                                    $.get('/Requests/GetFileUpload', {
                                        requestId: requestId,
                                        requestDetailId: requestDetailId,
                                        Domain: domain
                                    }, function (respone) {
                                        if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                            var stringImage = '';
                                            $.each(respone, function (index1, item1) {
                                                stringImage += renderLineTable(item1.Uri);
                                            });
                                            $('#modalDeleteImagesBody').html(stringImage);
                                            $('#modalDeleteImages').modal('show');
                                        } else {
                                            XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                        }
                                    }).error(function () {
                                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                    });

                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };

                    var actionRendererUpload_5 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_5' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="5" class="fa fa-upload" style="color:green"></i>');
                                $button.click(function () {
                                    $('#RowLine134').val('-1');
                                    var idtemp = $(this).attr('id').toString();
                                    $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                    var id = $(this).attr('data-id');
                                    var col = $(this).attr('data-value');
                                    $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                    $('#uploadDetails').val('');
                                    $('#myModalUpload').modal('show');
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_5_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_5_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-5';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                                $button.click(function () {
                                    var listId = $(this).attr("data-value");
                                    var listspt = listId.split('-');
                                    var requestId = listspt[0];
                                    var requestDetailId = listspt[1];
                                    var domain = listspt[2];
                                    $('#btnDeleteImages').attr('data-value', listId);
                                    $('#modalDeleteImagesBody').html('');
                                    $.get('/Requests/GetFileUpload', {
                                        requestId: requestId,
                                        requestDetailId: requestDetailId,
                                        Domain: domain
                                    }, function (respone) {
                                        if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                            var stringImage = '';
                                            $.each(respone, function (index1, item1) {
                                                stringImage += renderLineTable(item1.Uri);
                                            });
                                            $('#modalDeleteImagesBody').html(stringImage);
                                            $('#modalDeleteImages').modal('show');
                                        } else {
                                            XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                        }
                                    }).error(function () {
                                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                    });

                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };

                    var actionRendererUpload_6 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_6' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="6" class="fa fa-upload" style="color:green"></i>');
                                $button.click(function () {
                                    $('#RowLine134').val('-1');
                                    var idtemp = $(this).attr('id').toString();
                                    $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                    var id = $(this).attr('data-id');
                                    var col = $(this).attr('data-value');
                                    $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                    $('#uploadDetails').val('');
                                    $('#myModalUpload').modal('show');
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_6_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_6_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-6';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                                $button.click(function () {
                                    var listId = $(this).attr("data-value");
                                    var listspt = listId.split('-');
                                    var requestId = listspt[0];
                                    var requestDetailId = listspt[1];
                                    var domain = listspt[2];
                                    $('#btnDeleteImages').attr('data-value', listId);
                                    $('#modalDeleteImagesBody').html('');
                                    $.get('/Requests/GetFileUpload', {
                                        requestId: requestId,
                                        requestDetailId: requestDetailId,
                                        Domain: domain
                                    }, function (respone) {
                                        if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                            var stringImage = '';
                                            $.each(respone, function (index1, item1) {
                                                stringImage += renderLineTable(item1.Uri);
                                            });
                                            $('#modalDeleteImagesBody').html(stringImage);
                                            $('#modalDeleteImages').modal('show');
                                        } else {
                                            XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                        }
                                    }).error(function () {
                                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                    });

                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };

                    var actionRendererUpload_7 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_7' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="7" class="fa fa-upload" style="color:green"></i>');
                                $button.click(function () {
                                    $('#RowLine134').val('-1');
                                    var idtemp = $(this).attr('id').toString();
                                    $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                    var id = $(this).attr('data-id');
                                    var col = $(this).attr('data-value');
                                    $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                    $('#uploadDetails').val('');
                                    $('#myModalUpload').modal('show');
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_7_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_7_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-7';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                                $button.click(function () {
                                    var listId = $(this).attr("data-value");
                                    var listspt = listId.split('-');
                                    var requestId = listspt[0];
                                    var requestDetailId = listspt[1];
                                    var domain = listspt[2];
                                    $('#btnDeleteImages').attr('data-value', listId);
                                    $('#modalDeleteImagesBody').html('');
                                    $.get('/Requests/GetFileUpload', {
                                        requestId: requestId,
                                        requestDetailId: requestDetailId,
                                        Domain: domain
                                    }, function (respone) {
                                        if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                            var stringImage = '';
                                            $.each(respone, function (index1, item1) {
                                                stringImage += renderLineTable(item1.Uri);
                                            });
                                            $('#modalDeleteImagesBody').html(stringImage);
                                            $('#modalDeleteImages').modal('show');
                                        } else {
                                            XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                        }
                                    }).error(function () {
                                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                    });

                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                }
                else {

                    var actionRendererUpload_1 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_1' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể up hình [Hình vận đơn đã đồng kiểm]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_1_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_1_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-1';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '"></i>'); //ChuongNT3 - 19/05/2018 - Sửa người xử lý 
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể xóa hình [Hình vận đơn đã đồng kiểm]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_2 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_2' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể up hình [File biên bản làm việc]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_2_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_2_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-2';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể xóa hình [File biên bản làm việc]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_3 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_3' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể up hình [Hình chụp hiện trạng]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_3_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_3_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-3';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể xóa hình [Hình chụp hiện trạng]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_4 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_4' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể up hình [Hình hóa đơn nhập hàng]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_4_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_4_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-4';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể xóa hình [Hình hóa đơn nhập hàng]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_5 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_5' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="5"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể up hình [Hình Jodcard]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_5_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_5_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-5';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" ></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể xóa hình [Hình Jobcard]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_6 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_6' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="6"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể up hình [Hình thùng hàng nhận]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_6_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_6_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-6';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể xóa hình [Hình thùng hàng nhận]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_7 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_7' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="7"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể up hình [Lệnh điều động nội bộ]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_7_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_7_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-7';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể xóa hình [Lệnh điều động nội bộ]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                }
                var actionRendererUpload_1_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_1_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_1 = instance.getDataAtRowProp(row, 'Images_1');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_1.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {

                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });

                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_2_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_2_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_2 = instance.getDataAtRowProp(row, 'Images_2');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_2 == '' || Images_2 == null || Images_2 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_2.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {

                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });

                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_3_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_3_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_3 = instance.getDataAtRowProp(row, 'Images_3');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_3 == '' || Images_3 == null || Images_3 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_3.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {

                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });

                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_4_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_4_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_4 = instance.getDataAtRowProp(row, 'Images_4');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_4 == '' || Images_4 == null || Images_4 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_4.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {

                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });

                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_5_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_5_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_5 = instance.getDataAtRowProp(row, 'Images_5');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_5 == '' || Images_5 == null || Images_5 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_5.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {

                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });

                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_6_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_6_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_6 = instance.getDataAtRowProp(row, 'Images_6');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_6 == '' || Images_6 == null || Images_6 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_6.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {

                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });

                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_7_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_7_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_7 = instance.getDataAtRowProp(row, 'Images_7');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_7 == '' || Images_7 == null || Images_7 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_7.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {

                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });

                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                if (CL.Status != 4 && CheckAssinger == true) {
                    var actionRendererUpload_9 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_9' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="9" class="fa fa-upload" style="color:green"></i>');
                                $button.click(function () {
                                    $('#RowLine134').val('-1');
                                    var idtemp = $(this).attr('id').toString();
                                    $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                    var id = $(this).attr('data-id');
                                    var col = $(this).attr('data-value');
                                    $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                    $('#uploadDetails').val('');
                                    $('#myModalUpload').modal('show');
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_9_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_9_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-9';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                                $button.click(function () {
                                    var listId = $(this).attr("data-value");
                                    var listspt = listId.split('-');
                                    var requestId = listspt[0];
                                    var requestDetailId = listspt[1];
                                    var domain = listspt[2];
                                    $('#btnDeleteImages').attr('data-value', listId);
                                    $('#modalDeleteImagesBody').html('');
                                    $.get('/Requests/GetFileUpload', {
                                        requestId: requestId,
                                        requestDetailId: requestDetailId,
                                        Domain: domain
                                    }, function (respone) {
                                        if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                            var stringImage = '';
                                            $.each(respone, function (index1, item1) {
                                                stringImage += renderLineTable(item1.Uri);
                                            });
                                            $('#modalDeleteImagesBody').html(stringImage);
                                            $('#modalDeleteImages').modal('show');
                                        } else {
                                            XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                        }
                                    }).error(function () {
                                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                    });
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                }
                else {
                    var actionRendererUpload_9 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'button_9' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="9"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể up hình [Hình hóa đơn]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                    var actionRendererUpload_9_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                        if (prop == 'button_9_Delete' && checkPerss == true) {
                            var valid = instance.getDataAtRowProp(row, 'Id');
                            var requestId = instance.getDataAtRowProp(row, 'RequestId');
                            var $button = ''
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            } else {
                                var datavalue_line = requestId + '-' + valid + '-9';
                                $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '"></i>');
                                $button.click(function () {
                                    XFunction.RenderMessage("error", "CallLog hiện tại ở bước " + CL.StepNo + ", trạng thái: " + trangThaiCL + "</br>Bạn không thể xóa hình [Hình hóa đơn]"); return;
                                });
                            }
                            $(td).empty().append($button);
                        } else {
                            $(td).empty().append('');
                        }
                    };
                }
                var actionRendererUpload_9_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_9_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_9 = instance.getDataAtRowProp(row, 'Images_9');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_9 == '' || Images_9 == null || Images_9 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_9.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {

                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });

                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererCalllog = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'CalllogBill') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var CalllogBill = instance.getDataAtRowProp(row, 'CalllogBill');
                        var $button = '';
                        if (valid === null || valid === '' || valid === undefined || CalllogBill == '' || CalllogBill == null || CalllogBill == undefined) {
                            $button = '';
                        } else {
                            var Href = CalllogBill.toString().split(',');
                            var stringHref = '';
                            $.each(Href, function (index1, item1) {
                                stringHref += '<a href="/Requests/Details/' + item1 + '" target="_blank">' + item1 + '</a>' + ', ';
                            });
                            $button = stringHref;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                $.each(dataHandsontable, function (index, item) {
                });

                function strip_tags(input, allowed) {
                    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                        commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                    // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                    allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                    return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                        return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                    });
                }
                function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                    var escaped = Handsontable.helper.stringify(value);
                    escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                    td.innerHTML = escaped;
                    td.style.textAlign = 'Left';
                    return td;
                }
                var dataShopFull = [], dataShopName = [];

                $.get('/Requests/GetShopByRegion', { regionId: 0 }, function (data) {
                    dataShopFull = data;
                    $.each(data, function (index, item) {
                        dataShopName.push(item.WarehouseCode + '--' + item.WarehouseName);
                    });
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: dataHandsontable,
                            //================================Cols=======
                            autoColumnSize: true,
                            autoRowSize: true,
                            rowHeaders: true,
                            minSpareRows: 4,
                            stretchH: 'all',
                            formulas: true,
                            hiddenColumns: {
                                indicators: true
                            },
                            //wordWrap: false,
                            //====================================Oder ==============================================
                            colHeaders: [
                                'Loại khiếu nại',
                                'Nhà vận chuyển',
                                'Nội dung tình huống cụ thể claim', 'Shop đề xuất hướng đền bù',
                                'File ->', 'Xóa', 'Lệnh điều động nội bộ',
                                'Mã vận đơn shop/ Kho nhận hàng',
                                'Mã vận đơn/ hóa đơn xuất cho NVC',
                                'Số hóa đơn',
                                'File ->', 'Xóa', 'Hình hóa đơn',
                                'Hướng xử lý',
                                'Chi tiết kết quả xử lý của HC',
                                'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                'File ->', 'Xóa', 'File Biên bản làm việc',
                                'File ->', 'Xóa', 'File thùng hàng nhận',
                                'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                'Thời gian chuyển hàng/nhận hàng',
                                'Paste Links ->', 'Links Camera',
                                'Lý do không nhập link camera',
                                'Tên shop gửi hàng',
                                'Ghi chú'
                            ],
                            columns: [
                                { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                {
                                    data: "Property4", type: 'dropdown', source: dataSourceServiceName, readOnly: !(checkEdit && (CL.Status != 4 && CL.Status != 5) && (CheckStep1 == true)),
                                    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                        var id = instance.getDataAtRowProp(row, 'Property4');
                                        if (id !== '' && id !== null && id !== undefined) {
                                            Handsontable.DropdownCell.renderer.apply(this, arguments);
                                        } else {
                                            cellProperties.readOnly = true;
                                        }
                                    }
                                },
                                { data: "NoiDungCuTheClaim", type: 'text', className: 'htLeft', readOnly: !(CheckStep1 == true && checkPerss == true && CheckStatus == false) },
                                { data: "HuongDenBu", type: 'text', className: 'htLeft', readOnly: !(CheckStep1 == true && checkPerss == true && CheckStatus == false) },
                                { data: "button_7", renderer: actionRendererUpload_7, editor: false },
                                { data: "button_7_Delete", renderer: actionRendererUpload_7_Delete, editor: false },
                                { data: "button_7_Html", renderer: actionRendererUpload_7_Html, editor: false },
                                { data: "MaBillNhanHang", type: 'text', className: 'htLeft', readOnly: !checkStep1_2 },
                                { data: "CalllogBill", className: 'htLeft', readOnly: !checkStep2_3_4 /*!Readonl*/ },
                                { data: "SoHoaDon", type: "text", className: 'htLeft', readOnly: !(CheckStep2 == true && CheckAssinger == true && CheckStatus == false) },
                                { data: "button_9", renderer: actionRendererUpload_9, editor: false },
                                { data: "button_9_Delete", renderer: actionRendererUpload_9_Delete, editor: false },
                                { data: "button_9_Html", renderer: actionRendererUpload_9_Html, editor: false },
                                {
                                    data: "HuongXuLy", width: 400, strict: false, className: 'htLeft', type: 'autocomplete', readOnly: !ReadHXL,
                                    source: [
                                        'NVC mua lại: Bằng giá hóa đơn',
                                        'NVC mua lại: bằng 80% giá bán ra (đối với máy cũ)',
                                        'NVC mua lại: sửa chữa: Đợi báo giá',
                                        'Truy thu shop: Bằng giá hóa đơn',
                                        'Truy thu shop: sửa chữa: Đợi báo giá',
                                        'Shop tự giải quyết với NVC: đẩy bán được...',
                                        'Đầu gửi chuyển bù hàng: do chuyển thiếu...',
                                        'Shop liên hệ ngành hàng hỗ trợ: Lỗi NCC - hàng chuyển từ NCC',
                                        'Khác...'
                                    ]
                                },
                                { data: "GhiChuHuongXuLy", type: 'text', readOnly: !ReadHXL },
                                { data: "button_1", renderer: actionRendererUpload_1, editor: false },
                                { data: "button_1_Delete", renderer: actionRendererUpload_1_Delete, editor: false },
                                { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },

                                { data: "button_2", renderer: actionRendererUpload_2, editor: false },
                                { data: "button_2_Delete", renderer: actionRendererUpload_2_Delete, editor: false },
                                { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },

                                { data: "button_6", renderer: actionRendererUpload_6, editor: false },
                                { data: "button_6_Delete", renderer: actionRendererUpload_6_Delete, editor: false },
                                { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },

                                { data: "button_3", renderer: actionRendererUpload_3, editor: false },
                                { data: "button_3_Delete", renderer: actionRendererUpload_3_Delete, editor: false },
                                { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },

                                { data: "button_4", renderer: actionRendererUpload_4, editor: false },
                                { data: "button_4_Delete", renderer: actionRendererUpload_4_Delete, editor: false },
                                { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },

                                { data: "button_5", renderer: actionRendererUpload_5, editor: false },
                                { data: "button_5_Delete", renderer: actionRendererUpload_5_Delete, editor: false },
                                { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: (checkUserCC == true || (CL.StepNo == 1 && CheckSender == true)) && dataHandsontable[0].SoLanGoiOut == 0 ? false : true },
                                { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: ((CL.StepNo == 1 || CL.StepNo == 2) && CheckAssinger == true && CheckStatus == false) ? false : true },
                                {
                                    data: 'LinkView', type: 'text', className: 'htLeft', readOnly: !(CheckStep1 == true && checkPerss == true && CheckStatus == false),
                                    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                        var links = instance.getDataAtRowProp(row, 'Links');
                                        var escaped = Handsontable.helper.stringify(value);
                                        if (links == '' || links == null || links == undefined) {
                                            escaped = '';
                                        } else {
                                            var listLink = links.split(',');
                                            var listLinkView = [];
                                            $.each(listLink, function (index, item) {
                                                listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                            });
                                            escaped = listLinkView.join('<br>')
                                        }
                                        escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                        td.innerHTML = escaped;
                                        td.style.textAlign = 'left';
                                        return td;
                                    }
                                },
                                { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: CL.StepNo == 1 && CheckAssinger == true && dataHandsontable[0].SoLanGoiOut == 0 ? false : true },
                                { data: "Shop", type: 'autocomplete', source: dataShopName, className: 'htLeft', width: 350, readOnly: !checkStep1_2 },
                                { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                            ],
                            beforeChange: function (changes, source) {
                                if (source == 'not') return;
                                for (i = 0; i < changes.length; i++) {
                                    var row = changes[i][0], col = changes[i][1], value = changes[i][3];
                                    if (col === 'HuongXuLy') {
                                        var instance = this;
                                        var DataS = [
                                            'NVC mua lại: Bằng giá hóa đơn',
                                            'NVC mua lại: bằng 80% giá bán ra (đối với máy cũ)',
                                            'NVC mua lại: sửa chữa: Đợi báo giá',
                                            'Truy thu shop: Bằng giá hóa đơn',
                                            'Truy thu shop: sửa chữa: Đợi báo giá',
                                            'Shop tự giải quyết với NVC: đẩy bán được...',
                                            'Đầu gửi chuyển bù hàng: do chuyển thiếu...',
                                            'Shop liên hệ ngành hàng hỗ trợ: Lỗi NCC - hàng chuyển từ NCC',
                                            'Khác...'
                                        ];
                                        if (DataS == '') {
                                            return false;
                                        } else {
                                            var listArr = DataS.toString().split(',');
                                            if ($.inArray(value, listArr) == '-1') {
                                                return false;
                                            }
                                        }
                                    }
                                }
                            },
                            afterChange: function (changes, source) {
                                if (!changes || source == 'not') {
                                    return;
                                }
                                var instance = this;
                                changes.forEach(function (change) {
                                    var row = change[0];
                                    var col = change[1];
                                    var newValue = change[3];
                                    var cellProperties, options;
                                    if (col == 'PastLink') {
                                        if (newValue == '' || newValue == null || newValue == undefined) {
                                            hot.setDataAtRowProp(row, 'Links', '', 'not');
                                        } else {
                                            hot.setDataAtRowProp(row, 'Links', newValue, 'not');
                                        }
                                    }
                                    if (col == 'HuongXuLy') {
                                        var plugin = hot.getPlugin('hiddenColumns');
                                        //ChuongNT3 -15/05/2018 - thay đổi bước
                                        var checkMyData = $.grep(hot.getSourceData(), function (item, index) {
                                            return item.Id !== null && item.Id !== '' && item.Id !== undefined && item.HuongXuLy == 'Khác...';
                                        });
                                        if (checkMyData != null && checkMyData != '' && checkMyData != undefined) {
                                            // ChuongNT3 -15/05/2018 - thay đổi bước
                                            plugin.showColumn(14);//Add - ChuongNT3 - 02/05/2018 -- Thêm up hình đơn hàng
                                        }
                                        else {
                                            plugin.hideColumn(14);//Add - ChuongNT3 - 02/05/2018 -- Thêm up hình đơn hàng
                                        }
                                        hot.render();
                                    }
                                    //▼ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                                    if (col == 'Shop') {
                                        var flagShop = newValue;
                                        var tmp = 0;
                                        $.each(dataShopFull, function (index, item) {
                                            var Fshop = item.WarehouseCode + '--' + item.WarehouseName;
                                            if (flagShop == Fshop) {
                                                tmp = 1;
                                            }
                                        });
                                        //console.log(flagShop)
                                        if (tmp == 0) {
                                            hot.setDataAtRowProp(row, 'Shop', '', 'not');
                                            XFunction.RenderMessage('error', 'Nhập shop không đúng !'); return;
                                        }
                                    }
                                    //▲ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                                });
                                instance.render();
                            },
                        };
                    };
                    hot = new Handsontable(container, setting());
                    hot.selectCell(0, 0, 0, 0);
                    var plugin = hot.getPlugin('hiddenColumns');
                    plugin.hideColumn(8, 9, 10, 11, 12, 13, 34, 35, 36);
                    if (CL.StepNo == 1) {
                        plugin.showColumn(34, 35, 36);
                    }
                    if (CL.StepNo == 2) {
                        plugin.showColumn(8, 13, 34, 35, 36);
                    }
                    if (CL.StepNo == 3) {
                        plugin.showColumn(8, 9, 13, 34, 35, 36);
                    }
                    if (CL.StepNo == 4) {
                        plugin.showColumn(8, 9, 10, 11, 12, 13, 34, 35, 36);
                    }
                    var tempHXL = $.grep(dataHandsontable, function (item, index) {
                        return item.HuongXuLy == 'Khác...'
                    });
                    if (tempHXL != null && tempHXL != '' && tempHXL != undefined) {
                        plugin.showColumn(14);
                    }
                    else {
                        plugin.hideColumn(14);
                    }
                    hot.render();
                });

                $("#UploadForm").submit(function (e) {
                    var data = new FormData();
                    var selectedFiles = $("#uploadDetails")[0].files;
                    if (selectedFiles.length == 0) {
                        e.preventDefault();
                        $('#myModalUpload').modal('hide');
                        XFunction.RenderMessage('error', 'Không có file để lưu');
                        return;
                    }
                    $.each(selectedFiles, function (index, item) {
                        data.append(selectedFiles[index].name, selectedFiles[index]);
                    });
                    var requestdetailId = $('#btnuploadDetails').attr('data-id');
                    var col = $('#btnuploadDetails').attr('data-value');
                    var rowline = $('#RowLine134').val();
                    //console.log(requestdetailId, col, $('#RowLine134').val());
                    $.ajax({
                        type: "POST",
                        url: "/Requests/SaveUploadedFileDetailCol?RequsetDetailId=" + requestdetailId + "&&Col=" + col,
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            $('#myModalUpload').modal('hide');
                            if (result.error == 0) {
                                var fileNames = $.parseJSON(result.Message);
                                var stringImage = fileNames.join(',');
                                $.each(dataHandsontable, function (index, item) {
                                    if (item.Id == requestdetailId) {
                                        if (col == 1) {
                                            var dataRow = item.Images_1;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_1 = dataRow + stringImage;
                                        } else if (col == 2) {
                                            var dataRow = item.Images_2;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_2 = dataRow + stringImage;
                                        } else if (col == 3) {
                                            var dataRow = item.Images_3;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_3 = dataRow + stringImage;
                                        } else if (col == 4) {
                                            var dataRow = item.Images_4;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_4 = dataRow + stringImage;
                                        } else if (col == 5) {
                                            var dataRow = item.Images_5;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_5 = dataRow + stringImage;
                                        } else if (col == 6) {
                                            var dataRow = item.Images_6;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_6 = dataRow + stringImage;
                                        } else if (col == 7) {
                                            var dataRow = item.Images_7;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_7 = dataRow + stringImage;
                                        }
                                        //▼Add - ChuongNT3 - 02/05/2018 -- Thêm up hình đơn hàng
                                        else if (col == 9) {
                                            var dataRow = item.Images_9;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_9 = dataRow + stringImage;
                                        }
                                        //▲Add - ChuongNT3 - 02/05/2018 -- Thêm up hình đơn hàng
                                    }
                                });
                                hot.render();
                                XFunction.RenderMessage('success', 'Lưu ' + fileNames.length + ' file thành công');
                            } else {
                                XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                            }
                        },
                        error: function () {
                            $('#myModalUpload').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }
                    });
                    e.preventDefault();
                });
                $('#btnDeleteImages').on('click', function () {
                    var dataHidd = $(this).attr('data-value');
                    var checklis = [];
                    var countImagesNoDelete = $("input:checkbox[name=chkDeleteImage]");
                    var countImagesDelete = $("input:checkbox[name=chkDeleteImage]:checked");

                    if (countImagesNoDelete.length == countImagesDelete.length) {
                        XFunction.RenderMessage("error", "Không được xóa toàn bộ hình ảnh đã đính kèm"); return;
                    }

                    $("input:checkbox[name=chkDeleteImage]:checked").each(function () {
                        checklis.push($(this).val());
                    });
                    if (dataHidd == '' || dataHidd == null || dataHidd == undefined || checklis.length == 0) {
                        XFunction.RenderMessage("error", "Không lấy được dữ liệu"); return;
                    }
                    var dataspl = dataHidd.split('-');
                    var requestId = dataspl[0];
                    var requestDetailId = dataspl[1];
                    var domain = dataspl[2];
                    var uris = checklis.join(',');
                    $.get('/Requests/DeleteFileUpload', {
                        requestId: requestId,
                        requestDetailId: requestDetailId,
                        Domain: domain,
                        Uris: uris
                    }, function (respone) {
                        if (respone !== '' && respone !== null && respone !== undefined) {
                            $.each(dataHandsontable, function (index, item) {
                                if (item.Id == requestDetailId && item.RequestId == requestId) {
                                    //▼ ChuongNT3 - 07/05/2018 - Chỉnh sữa Calim NVC 
                                    if (domain == '1' || domain == '1Reup') {
                                        item.Images_1 = respone[0].Uris;
                                    }
                                    if (domain == '2' || domain == '2Reup') {
                                        item.Images_2 = respone[0].Uris;
                                    }
                                    if (domain == '3' || domain == '3Reup') {
                                        item.Images_3 = respone[0].Uris;
                                    }
                                    if (domain == '4' || domain == '4Reup') {
                                        item.Images_4 = respone[0].Uris;
                                    }
                                    if (domain == '5' || domain == '5Reup') {
                                        item.Images_5 = respone[0].Uris;
                                    }
                                    if (domain == '6' || domain == '6Reup') {
                                        item.Images_6 = respone[0].Uris;
                                    }
                                    if (domain == '7' || domain == '7Reup') {
                                        item.Images_7 = respone[0].Uris;
                                    }
                                    //▼Add - ChuongNT3 - 02/05/2018 -- Thêm up hình đơn hàng
                                    if (domain == '9' || domain == '9Reup') {
                                        item.Images_9 = respone[0].Uris;
                                    }
                                    //▲Add - ChuongNT3 - 02/05/2018 -- Thêm up hình đơn hàng
                                }
                            });
                            hot.render();
                            $('#modalDeleteImages').modal('hide');
                            XFunction.RenderMessage("success", "Xóa thành công"); return;
                        } else {
                            $.each(dataHandsontable, function (index, item) {
                                if (item.Id == requestDetailId && item.RequestId == requestId) {
                                    if (domain == '1' || domain == '1Reup') {
                                        item.Images_1 = respone[0].Uris;
                                    }
                                    if (domain == '2' || domain == '2Reup') {
                                        item.Images_2 = respone[0].Uris;
                                    }
                                    if (domain == '3' || domain == '3Reup') {
                                        item.Images_3 = respone[0].Uris;
                                    }
                                    if (domain == '4' || domain == '4Reup') {
                                        item.Images_4 = respone[0].Uris;
                                    }
                                    if (domain == '5' || domain == '5Reup') {
                                        item.Images_5 = respone[0].Uris;
                                    }
                                    if (domain == '6' || domain == '6Reup') {
                                        item.Images_6 = respone[0].Uris;
                                    }
                                    if (domain == '7' || domain == '7Reup') {
                                        item.Images_7 = respone[0].Uris;
                                    }
                                    //▼Add - ChuongNT3 - 02/05/2018 -- Thêm up hình đơn hàng
                                    if (domain == '9' || domain == '9Reup') {
                                        item.Images_9 = respone[0].Uris;
                                    }
                                    //▲Add - ChuongNT3 - 02/05/2018 -- Thêm up hình đơn hàng
                                    //▲ ChuongNT3 - 07/05/2018 - Chỉnh sữa Calim NVC 
                                }
                            });
                            hot.render();
                            $('#modalDeleteImages').modal('hide');
                            XFunction.RenderMessage("success", "Xóa thành công"); return;
                        }
                    }).error(function () {
                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                    });
                });

                $btnComment.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                    }

                    var dataReturn = [];
                    var myData = $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }
                    //==================
                    var InvalidNoiDungCuTheClaim = [], InvalidHuongDenBu = [], InvalidMaBillNhanHang = [];
                    var InvalidHuongXuLyEmpty = [], InvalidHuongXuLy = [], InvalidGhiChuXuLy = [];
                    var dataShop = [];

                    //▼ LuanNT44 - 21/06/2019 - loại 134 - Thêm điều kiện shop gửi
                    var flagShopGui = 0;
                    $.each(myData, function (index, item) {
                        var shops = item.Shop;
                        if (shops !== '' && shops !== null && shops !== undefined) {
                            var timshop = $.grep(dataShopFull, function (element, cout) {
                                return element.WarehouseCode + '--' + element.WarehouseName == shops;
                            });
                            if (timshop.length == 0) {
                                flagShopGui += 1;
                            }
                        }

                    });

                    if (flagShopGui > 0) {
                        XFunction.RenderMessage('error', 'Shop gửi không hợp lệ ! vui lòng chọn lại !!'); return;
                    }
                    //▲ LuanNT44 - 21/06/2019 - loại 134 - Thêm điều kiện shop gửi

                    var InvalidThoiGianChuyenHangEmpty = [];
                    $.each(myData, function (index, item) {
                        if (item.Shop == '' || item.Shop == null || item.Shop == undefined) {
                            dataShop.push(index + 1);
                        }
                        if (item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined) {
                            InvalidThoiGianChuyenHangEmpty.push(index + 1);
                        }
                        if (item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined) {
                            InvalidNoiDungCuTheClaim.push(index + 1);
                        }
                        if (item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined) {
                            InvalidHuongDenBu.push(index + 1);
                        }
                        if (item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined) {
                            InvalidMaBillNhanHang.push(index + 1);
                        }
                        if (item.HuongXuLy == 'Khác...' && (item.GhiChuHuongXuLy == '' || item.GhiChuHuongXuLy == null || item.HuongXuLy == undefined)) {
                            InvalidGhiChuXuLy.push(index + 1);
                        }
                        if (item.HuongXuLy == '' || item.HuongXuLy == null || item.HuongXuLy == undefined) {
                            InvalidHuongXuLyEmpty.push(index + 1);
                        }
                        else {
                            var DataS = [
                                'NVC mua lại: Bằng giá hóa đơn',
                                'NVC mua lại: bằng 80% giá bán ra (đối với máy cũ)',
                                'NVC mua lại: sửa chữa: Đợi báo giá',
                                'Truy thu shop: Bằng giá hóa đơn',
                                'Truy thu shop: sửa chữa: Đợi báo giá',
                                'Shop tự giải quyết với NVC: đẩy bán được...',
                                'Đầu gửi chuyển bù hàng: do chuyển thiếu...',
                                'Shop liên hệ ngành hàng hỗ trợ: Lỗi NCC - hàng chuyển từ NCC',
                                'Khác...'
                            ];

                            var listArr = DataS.toString().split(',');
                            if ($.inArray(item.HuongXuLy, listArr) == '-1') {
                                InvalidHuongXuLy.push(index + 1);
                            }
                        }
                    });
                    if (InvalidNoiDungCuTheClaim.length > 0) {
                        XFunction.RenderMessage("error", "Nội dung tình huống cụ thể claim rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidNoiDungCuTheClaim).join(','));
                        return false;
                    }
                    if (InvalidHuongDenBu.length > 0) {
                        XFunction.RenderMessage("error", "Shop đề xuất đền bù đang rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidHuongDenBu).join(','));
                        return false;
                    }
                    if (InvalidMaBillNhanHang.length > 0) {
                        XFunction.RenderMessage("error", "Mã vận đơn shop / kho nhận hàng rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidMaBillNhanHang).join(','));
                        return false;
                    }
                    if (InvalidGhiChuXuLy.length > 0) {
                        XFunction.RenderMessage("error", "Vui lòng nhập ghi chú khi chọn hướng xử lý khác...! Xem lại dòng " + $.unique(InvalidGhiChuXuLy).join(','));
                        return false;
                    }
                    if (dataShop.length > 0) {
                        XFunction.RenderMessage("error", "Chưa chọn shop. Xem lại dòng " + $.unique(dataShop).join(','));
                        return false;
                    }
                    if (InvalidThoiGianChuyenHangEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Chưa nhập thời gian! Xem lại dòng " + $.unique(InvalidThoiGianChuyenHangEmpty).join(','));
                        return false;
                    }
                    //==================
                    $.each(myData, function (index, item) {
                        //▼ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                        var fshop = item.Shop; //console.log(fshop);
                        var shops = '';
                        if (fshop == '' || fshop == null || fshop == undefined) {
                            shops = '';
                        }
                        else {
                            shops = fshop.split('--')[0];
                        }
                        //var shops = item.Shop;
                        //if (shops == '' || shops == null || shops == undefined) {
                        //    shops = '';
                        //}
                        //else {
                        //    var timshop = $.grep(dataShopFull, function (element, cout) {
                        //        return element.WarehouseCode + '--' + element.WarehouseName == shops;
                        //    });
                        //    if (timshop.length > 0) {
                        //        shops = timshop[0].WarehouseCode;
                        //    } else {
                        //        shops = '';
                        //    }
                        //}
                        //▲ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi

                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Property5: item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined ? null : item.NoiDungCuTheClaim,
                            Property6: item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined ? null : item.HuongDenBu,
                            Property8: item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined ? null : item.MaBillNhanHang,
                            Property9: item.HuongXuLy,
                            Note: item.HuongXuLy == 'Khác...' ? item.GhiChuHuongXuLy : null,
                            CalllogBill: item.CalllogBill == '' || item.CalllogBill == null || item.CalllogBill == undefined ? null : item.CalllogBill,
                            //▼ Add - ChuongNT3 - 08/05/2018 -- Thêm up hình đơn hàng
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            //▲ Add - ChuongNT3 - 08/05/2018 -- Thêm up hình đơn hàng
                            Shops: shops,
                            ThoiGianChuyenHang: item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined ? null : item.ThoiGianChuyenHang,
                            LyDoKhongNhap: item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined ? null : item.LyDoKhongNhap,
                        });
                    });

                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                });
                $btnReply.on('click', function () {
                    $('#MessageNoiDungOutSide').html('');
                    $('#modalNoiDungOutSide').modal('show');
                });
                $btnChangeStep.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    var dataReturn = [], checkHXL = [];
                    var dataShop = [];
                    var dataShopSent = []; //Add LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                    var myData = $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }
                    if (CL.StepNo == 2 || CL.StepNo == 3) {
                        $.grep(myData, function (item, index) {
                            if (item.Shop == null && item.Shop == '' && item.Shop == undefined) {
                                dataShop.push(index);
                            }
                        });
                    }
                    if (dataShop.length > 0) {
                        XFunction.RenderMessage('error', 'Chưa chọn shop gửi'); return;
                    }
                    //==================
                    var InvalidNoiDungCuTheClaim = [], InvalidHuongDenBu = [], InvalidMaBillNhanHang = [];
                    var InvalidHuongXuLyEmpty = [], InvalidHuongXuLy = [], InvalidGhiChuXuLy = [];
                    var InvalidSoHoaDonEmpty = [];
                    var InvalidLinkCameraEmpty = [];
                    var InvalidThoiGianChuyenHangEmpty = [];

                    //▼ LuanNT44 - 21/06/2019 - loại 134 - Thêm điều kiện shop gửi
                    var flagShopGui = 0;
                    $.each(myData, function (index, item) {
                        var shops = item.Shop;
                        if (shops !== '' && shops !== null && shops !== undefined) {
                            var timshop = $.grep(dataShopFull, function (element, cout) {
                                return element.WarehouseCode + '--' + element.WarehouseName == shops;
                            });
                            if (timshop.length == 0) {
                                flagShopGui += 1;
                            }
                        }

                    });

                    if (flagShopGui > 0) {
                        XFunction.RenderMessage('error', 'Shop gửi không hợp lệ ! vui lòng chọn lại !!'); return;
                    }
                    //▲ LuanNT44 - 21/06/2019 - loại 134 - Thêm điều kiện shop gửi

                    $.each(myData, function (index, item) {
                        if (CL.StepNo == 3) {
                            if (item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined) {
                                InvalidSoHoaDonEmpty.push(index + 1);
                            }
                        }
                        if ((item.Links == '' || item.Links == null || item.Links == undefined) && CL.StepNo > 0) {
                            if (item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined) {
                                InvalidLinkCameraEmpty.push(index + 1);
                            }
                        }
                        if (item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined) {
                            InvalidThoiGianChuyenHangEmpty.push(index + 1);
                        }
                        if (item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined) {
                            InvalidNoiDungCuTheClaim.push(index + 1);
                        }
                        if (item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined) {
                            InvalidHuongDenBu.push(index + 1);
                        }
                        if (item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined) {
                            InvalidMaBillNhanHang.push(index + 1);
                        }
                        if (item.HuongXuLy == 'Khác...' && (item.GhiChuHuongXuLy == '' || item.GhiChuHuongXuLy == null || item.GhiChuHuongXuLy == undefined)) {
                            InvalidGhiChuXuLy.push(index + 1);
                        }
                        //▼ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                        if (item.Shop == '' || item.Shop == null || item.Shop == undefined) {
                            dataShopSent.push(index + 1);
                        }
                        //▲ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                        if (item.HuongXuLy == '' || item.HuongXuLy == null || item.HuongXuLy == undefined) {
                            InvalidHuongXuLyEmpty.push(index + 1);
                        }
                        else {
                            var DataS = [
                                'NVC mua lại: Bằng giá hóa đơn',
                                'NVC mua lại: bằng 80% giá bán ra (đối với máy cũ)',
                                'NVC mua lại: sửa chữa: Đợi báo giá',
                                'Truy thu shop: Bằng giá hóa đơn',
                                'Truy thu shop: sửa chữa: Đợi báo giá',
                                'Shop tự giải quyết với NVC: đẩy bán được...',
                                'Đầu gửi chuyển bù hàng: do chuyển thiếu...',
                                'Shop liên hệ ngành hàng hỗ trợ: Lỗi NCC - hàng chuyển từ NCC',
                                'Khác...'
                            ];

                            var listArr = DataS.toString().split(',');
                            if ($.inArray(item.HuongXuLy, listArr) == '-1') {
                                InvalidHuongXuLy.push(index + 1);
                            }
                        }
                    });
                    if (InvalidSoHoaDonEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Số hóa đơn không được phép trống! Xem lại dòng " + $.unique(InvalidSoHoaDonEmpty).join(','));
                        return false;
                    }
                    if (InvalidNoiDungCuTheClaim.length > 0) {
                        XFunction.RenderMessage("error", "Nội dung tình huống cụ thể claim rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidNoiDungCuTheClaim).join(','));
                        return false;
                    }
                    if (InvalidHuongDenBu.length > 0) {
                        XFunction.RenderMessage("error", "Shop đề xuất đền bù đang rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidHuongDenBu).join(','));
                        return false;
                    }
                    if (InvalidMaBillNhanHang.length > 0) {
                        XFunction.RenderMessage("error", "Mã vân đơn shop / kho nhận hàng rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidMaBillNhanHang).join(','));
                        return false;
                    }
                    if (InvalidGhiChuXuLy.length > 0) {
                        XFunction.RenderMessage("error", "Vui lòng nhập ghi chú khi chọn hướng xử lý khác...! Xem lại dòng " + $.unique(InvalidGhiChuXuLy).join(','));
                        return false;
                    }
                    if (InvalidLinkCameraEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Chưa nhập lý do không nhập link camera " + $.unique(InvalidLinkCameraEmpty).join(','));
                        return false;
                    }
                    //▼ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                    if (dataShopSent.length > 0) {
                        XFunction.RenderMessage('error', 'Chưa chọn shop gửi. Xem lại dòng ' + $.unique(dataShopSent).join(',')); return;
                    }
                    //▲ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                    if (InvalidThoiGianChuyenHangEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Chưa nhập thời gian! Xem lại dòng " + $.unique(InvalidThoiGianChuyenHangEmpty).join(','));
                        return false;
                    }
                    if (CL.StepNo == 2) {
                        if (InvalidHuongXuLyEmpty.length > 0) {
                            XFunction.RenderMessage("error", "Hướng xử lý rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidHuongXuLyEmpty).join(','));
                            return false;
                        }
                        if (InvalidHuongXuLy.length > 0) {
                            XFunction.RenderMessage("error", "Hướng xử lý không hợp lệ! Xem lại dòng " + $.unique(InvalidHuongXuLy).join(','));
                            return false;
                        }
                    }
                    $.each(myData, function (index, item) {
                        //▼ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                        var fshop = item.Shop; //console.log(fshop);
                        var shops = '';
                        if (fshop == '' || fshop == null || fshop == undefined) {
                            shops = '';
                        }
                        else {
                            shops = fshop.split('--')[0];
                        }
                        //var shops = item.Shop;
                        //if (shops == '' || shops == null || shops == undefined) {
                        //    shops = '';
                        //}
                        //else {
                        //    var timshop = $.grep(dataShopFull, function (element, cout) {
                        //        return element.WarehouseCode + '--' + element.WarehouseName == shops;
                        //    });
                        //    if (timshop.length > 0) {
                        //        shops = timshop[0].WarehouseCode;
                        //    } else {
                        //        shops = '';
                        //    }
                        //}
                        //▲ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi

                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Property5: item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined ? null : item.NoiDungCuTheClaim,
                            Property6: item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined ? null : item.HuongDenBu,
                            Property8: item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined ? null : item.MaBillNhanHang,
                            Property9: item.HuongXuLy,
                            Note: item.HuongXuLy == 'Khác...' ? item.GhiChuHuongXuLy : null,
                            CalllogBill: item.CalllogBill == '' || item.CalllogBill == null || item.CalllogBill == undefined ? null : item.CalllogBill,
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            Shops: shops,
                            ThoiGianChuyenHang: item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined ? null : item.ThoiGianChuyenHang,
                            LyDoKhongNhap: item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined ? null : item.LyDoKhongNhap,
                        });
                    });

                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                });
                $btnComplete.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();

                    var dataReturn = [];
                    var myData = $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }
                    //==================
                    var InvalidNoiDungCuTheClaim = [], InvalidHuongDenBu = [], InvalidMaBillNhanHang = [];
                    var InvalidHuongXuLyEmpty = [], InvalidHuongXuLy = [], InvalidGhiChuXuLy = [], InvalidCalllogBill = [];
                    var InvalidHinhAnhSoHoaDonEmpty = [];
                    var InvalidSoHoaDonEmpty = [];

                    //▼ LuanNT44 - 21/06/2019 - loại 134 - Thêm điều kiện shop gửi
                    var flagShopGui = 0;
                    $.each(myData, function (index, item) {
                        var shops = item.Shop;
                        if (shops !== '' && shops !== null && shops !== undefined) {
                            var timshop = $.grep(dataShopFull, function (element, cout) {
                                return element.WarehouseCode + '--' + element.WarehouseName == shops;
                            });
                            if (timshop.length == 0) {
                                flagShopGui += 1;
                            }
                        }

                    });

                    if (flagShopGui > 0) {
                        XFunction.RenderMessage('error', 'Shop gửi không hợp lệ ! vui lòng chọn lại !!'); return;
                    }
                    //▲ LuanNT44 - 21/06/2019 - loại 134 - Thêm điều kiện shop gửi

                    $.each(myData, function (index, item) {
                        if (CL.StepNo == 4) {
                            if (item.Images_9 == '' || item.Images_9 == null || item.Images_9 == undefined) {
                                InvalidHinhAnhSoHoaDonEmpty.push(index + 1);
                            }
                            if (item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined) {
                                InvalidSoHoaDonEmpty.push(index + 1);
                            }
                        }
                        if (item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined) {
                            InvalidNoiDungCuTheClaim.push(index + 1);
                        }
                        if (item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined) {
                            InvalidHuongDenBu.push(index + 1);
                        }
                        if (item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined) {
                            InvalidMaBillNhanHang.push(index + 1);
                        }
                        if (item.HuongXuLy == 'Khác...' && (item.GhiChuHuongXuLy == '' || item.GhiChuHuongXuLy == null || item.HuongXuLy == undefined)) {
                            InvalidGhiChuXuLy.push(index + 1);
                        }
                        if (item.CalllogBill == '' || item.CalllogBill == null || item.CalllogBill == undefined) {
                            InvalidCalllogBill.push(index + 1);
                        }
                        if (item.HuongXuLy == '' || item.HuongXuLy == null || item.HuongXuLy == undefined) {
                            InvalidHuongXuLyEmpty.push(index + 1);
                        }
                        else {
                            var DataS = [
                                'NVC mua lại: Bằng giá hóa đơn',
                                'NVC mua lại: bằng 80% giá bán ra (đối với máy cũ)',
                                'NVC mua lại: sửa chữa: Đợi báo giá',
                                'Truy thu shop: Bằng giá hóa đơn',
                                'Truy thu shop: sửa chữa: Đợi báo giá',
                                'Shop tự giải quyết với NVC: đẩy bán được...',
                                'Đầu gửi chuyển bù hàng: do chuyển thiếu...',
                                'Shop liên hệ ngành hàng hỗ trợ: Lỗi NCC - hàng chuyển từ NCC',
                                'Khác...'
                            ];

                            var listArr = DataS.toString().split(',');
                            if ($.inArray(item.HuongXuLy, listArr) == '-1') {
                                InvalidHuongXuLy.push(index + 1);
                            }
                        }
                    });
                    if (InvalidSoHoaDonEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Số hóa đơn không được phép trống! Xem lại dòng " + $.unique(InvalidSoHoaDonEmpty).join(','));
                        return false;
                    }
                    if (InvalidHinhAnhSoHoaDonEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Hình hóa đơn không được phép trống! Xem lại dòng " + $.unique(InvalidHinhAnhSoHoaDonEmpty).join(',')); //ChuongNT3 -10/05/2018 - kiểm tra bc
                        return false;
                    }
                    if (InvalidNoiDungCuTheClaim.length > 0) {
                        XFunction.RenderMessage("error", "Nội dung tình huống cụ thể claim rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidNoiDungCuTheClaim).join(','));
                        return false;
                    }
                    if (InvalidHuongDenBu.length > 0) {
                        XFunction.RenderMessage("error", "Shop đề xuất đền bù đang rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidHuongDenBu).join(','));
                        return false;
                    }
                    if (InvalidMaBillNhanHang.length > 0) {
                        XFunction.RenderMessage("error", "Mã vận đơn shop / kho nhận hàng rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidMaBillNhanHang).join(','));
                        return false;
                    }
                    var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isOldAssiner: false };
                    $.each(permissons, function (index, item) {
                        if (item == 'sender')
                            permisstion.isSender = true;
                        if (item == 'assigner')
                            permisstion.isAssiner = true;
                        if (item == 'groupAssigner')
                            permisstion.isGroupAssiner = true;
                        if (item == 'oldStepAssigner')
                            permisstion.isOldAssiner = true;
                    });
                    if ((CL.StepNo == 2 || CL.StepNo == 4) && permisstion.isAssiner === true) {
                        if (InvalidHuongXuLyEmpty.length > 0) {
                            XFunction.RenderMessage("error", "Hướng xử lý rỗng hoặc chưa hợp lệ! Xem lại dòng " + $.unique(InvalidHuongXuLyEmpty).join(','));
                            return false;
                        }
                        if (InvalidHuongXuLy.length > 0) {
                            XFunction.RenderMessage("error", "Hướng xử lý không hợp lệ! Xem lại dòng " + $.unique(InvalidHuongXuLy).join(','));
                            return false;
                        }
                    }
                    if (InvalidGhiChuXuLy.length > 0) {
                        XFunction.RenderMessage("error", "Vui lòng nhập ghi chú khi chọn hướng xử lý khác...! Xem lại dòng " + $.unique(InvalidGhiChuXuLy).join(','));
                        return false;
                    }
                    $.each(myData, function (index, item) {
                        //▼ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi
                        var fshop = item.Shop; //console.log(fshop);
                        var shops = '';
                        if (fshop == '' || fshop == null || fshop == undefined) {
                            shops = '';
                        }
                        else {
                            shops = fshop.split('--')[0];
                        }
                        //var shops = item.Shop;
                        //if (shops == '' || shops == null || shops == undefined) {
                        //    shops = '';
                        //}
                        //else {
                        //    var timshop = $.grep(dataShopFull, function (element, cout) {
                        //        return element.WarehouseCode + '--' + element.WarehouseName == shops;
                        //    });
                        //    if (timshop.length > 0) {
                        //        shops = timshop[0].WarehouseCode;
                        //    } else {
                        //        shops = '';
                        //    }
                        //}
                        //▲ LuanNT44 - 14/06/2019 - loại 134 - Thêm điều kiện shop gửi

                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Property5: item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined ? null : item.NoiDungCuTheClaim,
                            Property6: item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined ? null : item.HuongDenBu,
                            Property8: item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined ? null : item.MaBillNhanHang,
                            Property9: item.HuongXuLy,
                            Note: item.HuongXuLy == 'Khác...' ? item.GhiChuHuongXuLy : null,
                            CalllogBill: item.CalllogBill == '' || item.CalllogBill == null || item.CalllogBill == undefined ? null : item.CalllogBill,
                            //▼ Add - ChuongNT3 - 08/05/2018 -- Thêm up hình đơn hàng
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            //▲ Add - ChuongNT3 - 08/05/2018 -- Thêm up hình đơn hàng
                            Shops: shops
                        });
                    });

                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                });
                $btnSenPartner.on('click', function () {
                    $('#MessageNoiDungOutSide').html('');
                    $('#modalNoiDungOutSide').modal('show');
                });
                function SendOutside_134() {
                    var sendFile134 = '';
                    for (var i = 1; i <= 7; i++) {
                        var j = i + 3
                        if ($('#sendFile134_' + i).is(':checked') == false) {
                            sendFile134 = sendFile134 + j + ',';
                        }
                    }
                    var messageOutSide = $('#MessageNoiDungOutSide').val();
                    if (messageOutSide === null || messageOutSide === '' || messageOutSide === undefined || messageOutSide.trim().length == 0) {
                        XFunction.RenderMessage("error", "Gửi sang outside phải nhập tin nhắn "); return;
                    }
                    if ($('#sendFile134_10').is(':checked') == false) {
                        sendFile134 = sendFile134 + 'link';
                    }
                    if (sendFile134 == '4,5,6,7,8,9,10,link') {
                        XFunction.RenderMessage("error", "Gửi sang Outside phải chọn mục gửi"); return;
                    }
                    var checkedVals = $('.file1:checkbox:checked').map(function () {
                        return this.value;
                    }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var dataReturn = [];
                    var myData = $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }
                    //==================
                    var InvalidNoiDungCuTheClaim = [], InvalidHuongDenBu = [], InvalidMaBillNhanHang = [];
                    var InvalidHuongXuLyEmpty = [], InvalidHuongXuLy = [], InvalidGhiChuXuLy = [], InvalidCalllogBill = [];
                    $.each(myData, function (index, item) {
                        if (item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined) {
                            InvalidNoiDungCuTheClaim.push(index + 1);
                        }
                        if (item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined) {
                            InvalidHuongDenBu.push(index + 1);
                        }
                        if (item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined) {
                            InvalidMaBillNhanHang.push(index + 1);
                        }
                        if (item.HuongXuLy == 'Khác...' && (item.GhiChuHuongXuLy == '' || item.GhiChuHuongXuLy == null || item.HuongXuLy == undefined)) {
                            InvalidGhiChuXuLy.push(index + 1);
                        }
                        if (item.CalllogBill == '' || item.CalllogBill == null || item.CalllogBill == undefined) {
                            InvalidCalllogBill.push(index + 1);
                        }
                        if (item.HuongXuLy == '' || item.HuongXuLy == null || item.HuongXuLy == undefined) {
                            InvalidHuongXuLyEmpty.push(index + 1);
                        }
                        else {
                            var DataS = [
                                'NVC mua lại: Bằng giá hóa đơn',
                                'NVC mua lại: bằng 80% giá bán ra (đối với máy cũ)',
                                'NVC mua lại: sửa chữa: Đợi báo giá',
                                'Truy thu shop: Bằng giá hóa đơn',
                                'Truy thu shop: sửa chữa: Đợi báo giá',
                                'Shop tự giải quyết với NVC: đẩy bán được...',
                                'Đầu gửi chuyển bù hàng: do chuyển thiếu...',
                                'Shop liên hệ ngành hàng hỗ trợ: Lỗi NCC - hàng chuyển từ NCC',
                                'Khác...'
                            ];

                            var listArr = DataS.toString().split(',');
                            if ($.inArray(item.HuongXuLy, listArr) == '-1') {
                                InvalidHuongXuLy.push(index + 1);
                            }
                        }
                    });
                    $.each(myData, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            SaleCode: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].VendCodeOutside,
                            Property10: item.Links,
                            Property5: item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined ? null : item.NoiDungCuTheClaim,
                            Property6: item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined ? null : item.HuongDenBu,
                            Property8: item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined ? null : item.MaBillNhanHang,
                            Property9: item.HuongXuLy,
                            Property12: sendFile134,
                            Note: item.HuongXuLy == 'Khác...' ? item.GhiChuHuongXuLy : null,
                            CalllogBill: item.CalllogBill == '' || item.CalllogBill == null || item.CalllogBill == undefined ? null : item.CalllogBill
                        });
                    });

                    $('#MessageNoiDungOutSideHidden').val(messageOutSide);
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/SendPartner");
                    form.submit();
                }
                $('#btnSendOutSide').on('click', function () {
                    $.when(SendOutside_134()).then(setTimeout(function ActionDropzone() { document.getElementById("ActionDropzone134").click(); }, 3000));
                });
            });
        });
    };// Claim nhà vận chuyển
    //▲ Edit - ChuongNT3 - 18/05/2018 -- thêm popup up hình

    function contruct_135() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && (CL.StepNo == 1 && CL.Status != 4) ? true : false;

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 6,
                    minCols: 6,
                    startCols: 6,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 6,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Duyệt', 'Không Duyệt', 'Số đơn hàng', 'Mã sản phẩm', 'Tên sản phẩm', 'Số lượng', 'Imei', 'Lý do đổi trả (Tiêu chí tính phí)', 'Giá bán sản phẩm', 'Phí trả hàng hệ thống', 'Phí trả hàng thực tế', 'Ngày hoàn tất đơn hàng', 'Ngày trả hàng'],
                    columns: [{
                        data: 'Approved1', type: 'checkbox', className: 'htLeft',
                        readOnly: !checkApp,
                        checkedTemplate: 1, uncheckedTemplate: 0, width: 50
                    },
                    {
                        data: 'Approved2', type: 'checkbox', className: 'htLeft',
                        readOnly: !checkApp,
                        checkedTemplate: 1, uncheckedTemplate: 0, width: 100
                    },
                    { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                    { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                    { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                    { data: 'Quantity', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                    { data: 'Imei', type: 'text', className: 'htLeft', readOnly: true },
                    { data: 'Note', type: 'text', className: 'htLeft', readOnly: true },
                    { data: 'Price', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                    { data: 'Money1', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                    { data: 'Money2', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                    { data: 'Time1', type: 'text', className: 'htLeft', readOnly: true },
                    { data: 'Time2', type: 'text', className: 'htLeft', readOnly: true }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true || value == 1) {
                                    hot.setDataAtCell(row, 1, null, 'not');
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true || value == 1) {
                                    hot.setDataAtCell(row, 0, null, 'not');
                                }
                                return true;
                            }
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });

                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }

                var datainvalid = []
                $.each(mydata, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải cập nhật đầy đủ trạng thái duyệt hoặc không duyệt!"); return;
                }
                $.each(mydata, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : false
                    });
                });
                if (CL.StepNo !== 1) {
                    dataReturn = [];
                }

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });

                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }

                var datainvalid = []
                $.each(mydata, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải cập nhật đầy đủ trạng thái duyệt hoặc không duyệt!"); return;
                }

                $.each(mydata, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : false
                    });
                });
                if (CL.StepNo !== 1) {
                    dataReturn = [];
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(mydata, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải cập nhật đầy đủ trạng thái duyệt hoặc không duyệt!"); return;
                }

                $.each(mydata, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : false
                    });
                });
                if (CL.StepNo !== 1) {
                    dataReturn = [];
                }

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var mydata = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                });
                if (mydata.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(mydata, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải cập nhật đầy đủ trạng thái duyệt hoặc không duyệt!"); return;
                }

                $.each(mydata, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : false
                    });
                });
                if (CL.StepNo !== 1) {
                    dataReturn = [];
                }

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // Thay đổi tiêu chí tính phí
    function contruct_136() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1 ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 14,
                    minCols: 14,
                    startCols: 14,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 14,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 14,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Mã shop', 'Mã sản phẩm xuất', 'Tên sản phẩm xuất', 'Imei xuất', 'Số lượng xuất', 'Đơn giá xuất', 'Mã kho xuất',
                        'Mã sản phẩm nhập', 'Tên sản phẩm nhập', 'Imei nhập', 'Số lượng nhập', 'Đơn giá nhập', 'Mã kho nhập', 'Chênh lệch xuất'],
                    columns: [
                        { data: 'ShopCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property7', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Money1', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Property8', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property9', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity1', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Money2', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Property10', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Money3', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },

                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // xuất đổi cấu hình của kiểm soát nội bộ

    function contruct_137() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            if (respone != null && respone != '')
                dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender == true ? true : false;

            //▼	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                if (!!prop && prop == 'button') {
                    var data = $.grep(instance.getData(), function (item, index) {
                        return index == row;
                    });
                    var readOnlyLine = data[0].Quantity2;
                    var $button = ''
                    if (data[0].HaveConvertation == 1) {
                        $button = $('<i id="r__' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                    } else {
                        $button = $('<i id="r__' + row + '" data-value="' + row + '" class="fa fa-comments-o" style="color:green"></i>');
                    }
                    $button.click(function () {
                        if (check == false) {
                            XFunction.RenderMessage('error', 'Bạn không có quyền nhập giải trình trên callog này!');
                            return;
                        }
                        if (readOnlyLine == 1) {
                            $('#btnSendGiaiTrinh').hide();
                        } else {
                            $('#btnSendGiaiTrinh').show();
                        }
                        $('#MessageGiaiTrinh').val('');
                        $('#modalBodyGiaitrinh').empty();
                        var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                        var l__MessageGiaiTrinh = hot.getDataAtRowProp($(this).attr('data-value'), 'MessageGiaiTrinh');
                        $('#MessageGiaiTrinh').val(l__MessageGiaiTrinh);
                        $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                        if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                            $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                if (respone !== undefined && respone !== '' && respone !== null) {
                                    var inner = '';
                                    $.each(respone, function (index, item) {
                                        inner +=
                                            '<div class="timeline-comment">' +
                                            '   <div class="timeline-comment-header">' +
                                            '       <img src="/assets/images/people.png" />' +
                                            '       <p>' + item.Column1 + '</p>' +
                                            '   </div>' +
                                            '   <p class="timeline-comment-text">' + item.Message + '</p>' +
                                            '</div>';
                                    });
                                    $('#modalBodyGiaitrinh').html(inner);
                                    $('#modalBodyGiaitrinh').show();
                                } else {
                                    $('#modalBodyGiaitrinh').hide();
                                }
                                $('#modalGiaiTrinh').modal('show');
                            });
                        }
                    });
                    $(td).empty().append($button);
                }
            };
            //▲	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================

            var actionRendererType = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'Type';
                });
                var $type = ''
                if (data[0].Quantity == 1) { // tinh trang   
                    $type = 'Tình trạng máy';
                } else if (data[0].Quantity == 2) { // phu kien
                    $type = 'Phụ kiện thiếu';
                }
                else if (data[0].Quantity == 3) { // báo mất
                    $type = 'Báo mất';
                }
                else if (data[0].Quantity == 4) { // imei
                    $type = 'Sai Imei';
                }
                else if (data[0].Quantity == 5) { // sai màu săc
                    $type = 'Sai màu sắc';
                }
                $(td).empty().append($type);
            };
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 12,
                    minCols: 12,
                    startCols: 12,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 12,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 3,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 12,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Duyệt', 'Không duyệt', 'Loại', 'Mã BBBG', 'Tên phòng BH nhận', 'Số phiếu BH', 'Imei máy', 'Tình trạng phát sinh', 'Diễn giải chi tiết', 'Imei đúng', 'Cửa hàng tạo phiếu BH', 'Thời hạn xử lý', 'Giải trình'],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Quantity2');
                                if (id !== '' && id !== null && id !== undefined && id !== 0) {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = true;
                                } else {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = !check;
                                }
                            },
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Quantity2');
                                if (id !== '' && id !== null && id !== undefined && id !== 0) {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = true;
                                } else {
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = !check;
                                }
                            },
                            checkedTemplate: 1, uncheckedTemplate: 0
                        },
                        { data: "Type", readOnly: true, renderer: actionRendererType },
                        { data: 'Property1', type: 'text', readOnly: true, className: "htLeft" },
                        { data: 'Property2', type: 'text', readOnly: true, className: "htLeft" },
                        { data: 'Property3', type: 'text', readOnly: true, className: "htLeft" },
                        { data: 'Imei', type: 'text', readOnly: true, className: "htLeft" },
                        { data: 'Property4', type: 'text', readOnly: true, className: "htLeft" },
                        { data: 'Note', type: 'text', readOnly: true, className: "htLeft" },
                        { data: 'Property6', type: 'text', readOnly: true, className: "htLeft" },
                        { data: 'Property5', type: 'text', readOnly: true, className: "htLeft" },
                        {
                            data: 'TimeLast', type: 'date', className: "htLeft",
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Quantity2');
                                if (id !== '' && id !== null && id !== undefined && id !== 0) {
                                    Handsontable.DateCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = true;
                                } else {
                                    Handsontable.DateCell.renderer.apply(this, arguments);
                                    cellProperties.readOnly = !permisstion.isSender;
                                }
                            }
                        },
                        { data: "button", renderer: actionRenderer },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 1, null, 'not');
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 0, null, 'not');
                                }
                                return true;
                            }
                            if (col === 'TimeLast') {
                                var value = changes[i][3];
                                var valueArr1 = value.split('/');
                                var valueCon1 = new Date(valueArr1[2], valueArr1[1] - 1, valueArr1[0]);
                                var oldValue = hot.getDataAtRowProp(row, 'TimeDefault');
                                var valueArr2 = oldValue.split('/');
                                var valueCon2 = new Date(valueArr2[2], valueArr2[1] - 1, valueArr2[0]);
                                if (valueCon1 < valueCon2) {
                                    XFunction.RenderMessage("error", "Ngày gia hạn phải lớn hơn ngày hiện tại");
                                    return false;
                                }
                            }
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());

            //▼	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================
            $('#btnSendGiaiTrinh').on('click', function () {
                var l__MessageGiaiTrinh = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');
                if (!l__MessageGiaiTrinh || l__MessageGiaiTrinh.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung!');
                    return false;
                }
                var l__Date_New = new Date();
                var l__TimeGiaiTrinh = l__Date_New.getFullYear() + "-" + (l__Date_New.getMonth() + 1) + "-" + l__Date_New.getDate() + " " + l__Date_New.getHours() + ":" + l__Date_New.getMinutes() + ":" + l__Date_New.getSeconds() + "." + l__Date_New.getMilliseconds();
                console.log('l__TimeGiaiTrinh', l__TimeGiaiTrinh);
                hot.setDataAtRowProp(row, 'MessageGiaiTrinh', l__MessageGiaiTrinh, 'edit');
                hot.setDataAtRowProp(row, 'TimeGiaiTrinh', l__TimeGiaiTrinh, 'edit');
                hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                $('#r__' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                $('#MessageGiaiTrinh').val('');
                $('#modalGiaiTrinh').modal('hide');
                XFunction.RenderMessage('error', 'Nhấn Trao đổi/Trả lời để lưu giải trình!');
            });
            //▲	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData
                var datainvalid = [], dataInvalidGiaiTrinh = [];

                myData = hot == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { dataInvalid.push(item); }
                    if (item.HaveConvertation != 1 && check == true)
                        dataInvalidGiaiTrinh.push(item);
                });

                var message = $('#Message').val();

                //▼	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt!"); return;
                }
                if (dataInvalidGiaiTrinh.length > 0 && permisstion.isSender != true) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình!"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Approved: (!!item.Approved1 && item.Approved1 == 1) ? true : false,
                        Time: item.TimeLast,
                        MessageGiaiTrinh: (!!item.MessageGiaiTrinh && item.MessageGiaiTrinh != '') ? item.MessageGiaiTrinh : '',
                        TimeGiaiTrinh: item.TimeGiaiTrinh
                    });
                });
                //▲	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData
                var datainvalid = [], dataInvalidGiaiTrinh = [];

                myData = hot == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { dataInvalid.push(item); }
                    if (item.HaveConvertation != 1 && check == true)
                        dataInvalidGiaiTrinh.push(item);
                });

                var message = $('#Message').val();

                //▼	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt!"); return;
                }
                if (dataInvalidGiaiTrinh.length > 0 && permisstion.isSender != true) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình!"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Approved: (!item.Approved1 || item.Approved1 == '' || item.Approved1 == 0) ? false : true,
                        Time: item.TimeLast,
                        MessageGiaiTrinh: item.MessageGiaiTrinh,
                        TimeGiaiTrinh: item.TimeGiaiTrinh
                    });
                });
                //▲	Edit - VietMXH - 02/10/2018 - Bắt Giải trình==================================================

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return;
                }
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
            });
            $btnChangeStep.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData
                var datainvalid = [], dataInvalidGiaiTrinh = [];

                myData = hot == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { dataInvalid.push(item); }
                    if (item.HaveConvertation != 1 && check == true)
                        dataInvalidGiaiTrinh.push(item);
                });

                var message = $('#Message').val();

                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                if (dataInvalidGiaiTrinh.length > 0 && permisstion.isSender != true) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Time: item.TimeLast
                    });
                });

                $('#Details').val(JSON.stringify(mydata));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData
                var datainvalid = [], dataInvalidGiaiTrinh = [];

                myData = hot == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { dataInvalid.push(item); }
                    if (item.HaveConvertation != 1 && check == true)
                        dataInvalidGiaiTrinh.push(item);
                });

                var message = $('#Message').val();

                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                if (dataInvalidGiaiTrinh.length > 0 && permisstion.isSender != true) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                        Time: item.TimeLast
                    });
                });

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    };

    function contruct_64() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            if (respone != '' && respone != null && respone != undefined) { dataHandsontable = respone; }
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && status != 3 && status != 4 && status != 5 ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Duyệt', 'Không duyệt', 'Số YCDC', 'Shop xuất', 'Tên Shop Xuất', 'Shop nhận', 'Tên Shop Nhận', 'Mã sản phẩm', 'Tên Sản phẩm',
                        'Số lượng yêu cầu', 'Số lượng duyệt', 'Số lượng xuất', 'Mã kho xuất', 'Mã kho nhận', 'Loại YCDC', 'Ly do hủy'],
                    columns: [
                        { data: 'Approved1', type: 'checkbox', className: 'htLeft', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: !checkApp },
                        { data: 'Approved2', type: 'checkbox', className: 'htLeft', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: !checkApp },
                        { data: 'SoYCDC', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ShopXuat', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TenShopXuat', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ShopNhan', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TenShopNhan', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'MaSanPham', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TenSanPham', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'SoLuongYeuCau', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'SoLuongDuyet', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'SoLuongXuat', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'MaKhoXuat', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'MaKhoNhan', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'LoaiYCDC', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'LyDoHuy', type: 'text', className: 'htLeft', readOnly: true },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    //hot.setDataAtCell(row, 1, 0, 'not');
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 1;
                                            item.Approved2 = 0;
                                        }
                                    });
                                    hot.render();
                                } else {
                                    //hot.setDataAtCell(row, 1, 1, 'not');
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 0;
                                            item.Approved2 = 1;
                                        }
                                    });
                                    hot.render();
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    //hot.setDataAtCell(row, 0, 0, 'not');
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 0;
                                            item.Approved2 = 1;
                                        }
                                    });
                                    hot.render();
                                } else {
                                    //hot.setDataAtCell(row, 0, 1, 'not');
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 1;
                                            item.Approved2 = 0;
                                        }
                                    });
                                    hot.render();
                                }
                                return true;
                            }
                        }


                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                var dataRet = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved1 == 1 ? 1 : 0
                    });
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataRet = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved1 == 1 ? 1 : 0
                    });
                });


                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataRet = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved1 == 1 ? 1 : 0
                    });
                });


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataRet = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved1 == 1 ? 1 : 0
                    });
                });


                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // duyệt hủy yêu cầu điều chuyển
    function contruct_139() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            if (respone != '' && respone != null && respone != undefined) { dataHandsontable = respone; }
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && status != 3 && status != 4 && status != 5 ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 12,
                    minCols: 12,
                    startCols: 12,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 12,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 12,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Số SO', 'Mã shop', 'Tên shop', 'Mã khách hàng', 'Tên khách hàng', 'Mã sản phẩm', 'Tên sản phẩm',
                        'Số lượng', 'Imei', 'Kho', 'Đơn giá', 'Thành tiền'],
                    columns: [
                        { data: 'SoSO', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'MaShop', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TenShop', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'MaKhachHang', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TenKhachHang', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'MaSanPham', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TenSanPham', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'SoLuong', type: 'numeric', format: '0,0', className: 'htLeft', readOnly: true },
                        { data: 'Imei', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Kho', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'DonGia', type: 'numeric', format: '0,0', className: 'htLeft', readOnly: true },
                        { data: 'ThanhTien', type: 'numeric', format: '0,0', className: 'htLeft', readOnly: true },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    //hot.setDataAtCell(row, 1, 0, 'not');
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 1;
                                            item.Approved2 = 0;
                                        }
                                    });
                                    hot.render();
                                } else {
                                    //hot.setDataAtCell(row, 1, 1, 'not');
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 0;
                                            item.Approved2 = 1;
                                        }
                                    });
                                    hot.render();
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    //hot.setDataAtCell(row, 0, 0, 'not');
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 0;
                                            item.Approved2 = 1;
                                        }
                                    });
                                    hot.render();
                                } else {
                                    //hot.setDataAtCell(row, 0, 1, 'not');
                                    $.each(dataHandsontable, function (index, item) {
                                        if (item.Id != '' && item.Id != null && item.Id != undefined) {
                                            item.Approved1 = 1;
                                            item.Approved2 = 0;
                                        }
                                    });
                                    hot.render();
                                }
                                return true;
                            }
                        }


                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });



                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });




                var message = $("#Message").val();

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });



                var message = $("#Message").val();
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };

    function contruct_143() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $.get('/Requests/GetCcForDetail', { requestId: CL.Id }, function (data) {
                var checkUserCC = false;
                console.log(Ass)
                $.each(data, function (index, item) {
                    if (item.Type == 'Cc' && Ass == item.EmployeeCode)
                        checkUserCC = true;
                });
                var dataHandsontable = [];
                dataHandsontable = respone;
                var dataSourceServiceName = [''];
                var dataSourceService = [];
                var dataShopFull = [];
                var dataShopName = [];
                $.get('/Requests/GetTranderService', function (respone) {
                    if (respone !== '' && respone !== null && respone !== undefined && respone.length > 0) {
                        dataSourceService = respone;
                        $.each(respone, function (index, item) {
                            dataSourceServiceName.push(item.Name);
                        });
                    }
                });
                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                });
                var CheckSender = permisstion.isSender == true ? true : false;
                var checkPerss = permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender ? true : false;
                var checkEdit = false;
                if (checkPerss == true && (CL.RequestIdRefer == null || CL.RequestIdRefer == "" || CL.RequestIdRefer == undefined)) {
                    checkEdit = true;
                }
                var checkAssigner = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.Status < 4 ? true : false;
                var renderLineTable = function (uri) {
                    var strRe = '';
                    strRe += '<tr>'

                    strRe += '<td>';
                    var stringImage = '';
                    var duoi = uri.split('.')[1].toString().toLowerCase();
                    var tenfile = uri.split('/')[3].toString();
                    if (duoi === '' || duoi === undefined || duoi === null) {
                        duoi = '';
                    } else {
                        //var duoi = item1.split('.')[1].toString().toLowerCase();
                        if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                            stringImage = '<a href="' + uri + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a> ';
                        } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                            stringImage = '<a href="' + uri + '" download><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>';
                        } else {
                            stringImage = '<a href="' + uri + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a> ';
                        }
                    }
                    strRe += stringImage;
                    strRe += '</td>';

                    strRe += '<td>';
                    strRe += ' <input type="checkbox" class="clDeleteImage" name="chkDeleteImage" value="' + uri + '">';
                    strRe += '</td>';

                    strRe += '</tr>'
                    return strRe;
                }

                var actionRendererUpload_1 = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_1' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="1" class="fa fa-upload" style="color:green"></i>');
                            $button.click(function () {
                                $('#RowLine134').val('-1');
                                var idtemp = $(this).attr('id').toString();
                                $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                var id = $(this).attr('data-id');
                                var col = $(this).attr('data-value');
                                $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                $('#uploadDetails').val('');
                                $('#myModalUpload').modal('show');
                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };
                var actionRendererUpload_1_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_1_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_1 = instance.getDataAtRowProp(row, 'Images_1');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_1.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {
                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });
                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_1_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_1_Delete' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var requestId = instance.getDataAtRowProp(row, 'RequestId');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            var datavalue_line = requestId + '-' + valid + '-1';
                            $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                            $button.click(function () {
                                var listId = $(this).attr("data-value");
                                var listspt = listId.split('-');
                                var requestId = listspt[0];
                                var requestDetailId = listspt[1];
                                var domain = listspt[2];
                                $('#btnDeleteImages').attr('data-value', listId);
                                $('#modalDeleteImagesBody').html('');
                                $.get('/Requests/GetFileUpload', {
                                    requestId: requestId,
                                    requestDetailId: requestDetailId,
                                    Domain: domain
                                }, function (respone) {
                                    if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                        var stringImage = '';
                                        $.each(respone, function (index1, item1) {
                                            stringImage += renderLineTable(item1.Uri);
                                        });
                                        $('#modalDeleteImagesBody').html(stringImage);
                                        $('#modalDeleteImages').modal('show');
                                    } else {
                                        XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                    }
                                }).error(function () {
                                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                });

                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };

                var actionRendererUpload_2 = function (instance, td, row, col, prop, value, cellProperties) {

                    if (prop == 'button_2' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="2" class="fa fa-upload" style="color:green"></i>');
                            $button.click(function () {
                                $('#RowLine134').val('-1');
                                var idtemp = $(this).attr('id').toString();
                                $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                var id = $(this).attr('data-id');
                                var col = $(this).attr('data-value');
                                $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                $('#uploadDetails').val('');
                                $('#myModalUpload').modal('show');
                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };
                var actionRendererUpload_2_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_2_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_2 = instance.getDataAtRowProp(row, 'Images_2');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_2 == '' || Images_2 == null || Images_2 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_2.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {
                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });
                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_2_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_2_Delete' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var requestId = instance.getDataAtRowProp(row, 'RequestId');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            var datavalue_line = requestId + '-' + valid + '-2';
                            $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                            $button.click(function () {
                                var listId = $(this).attr("data-value");
                                var listspt = listId.split('-');
                                var requestId = listspt[0];
                                var requestDetailId = listspt[1];
                                var domain = listspt[2];
                                $('#btnDeleteImages').attr('data-value', listId);
                                $('#modalDeleteImagesBody').html('');
                                $.get('/Requests/GetFileUpload', {
                                    requestId: requestId,
                                    requestDetailId: requestDetailId,
                                    Domain: domain
                                }, function (respone) {
                                    if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                        var stringImage = '';
                                        $.each(respone, function (index1, item1) {
                                            stringImage += renderLineTable(item1.Uri);
                                        });
                                        $('#modalDeleteImagesBody').html(stringImage);
                                        $('#modalDeleteImages').modal('show');
                                    } else {
                                        XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                    }
                                }).error(function () {
                                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                });

                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };

                var actionRendererUpload_3 = function (instance, td, row, col, prop, value, cellProperties) {

                    if (prop == 'button_3' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="3" class="fa fa-upload" style="color:green"></i>');
                            $button.click(function () {
                                $('#RowLine134').val('-1');
                                var idtemp = $(this).attr('id').toString();
                                $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                var id = $(this).attr('data-id');
                                var col = $(this).attr('data-value');
                                $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                $('#uploadDetails').val('');
                                $('#myModalUpload').modal('show');
                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };
                var actionRendererUpload_3_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_3_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_3 = instance.getDataAtRowProp(row, 'Images_3');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_3 == '' || Images_3 == null || Images_3 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_3.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {
                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });
                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_3_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_3_Delete' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var requestId = instance.getDataAtRowProp(row, 'RequestId');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            var datavalue_line = requestId + '-' + valid + '-3';
                            $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                            $button.click(function () {
                                var listId = $(this).attr("data-value");
                                var listspt = listId.split('-');
                                var requestId = listspt[0];
                                var requestDetailId = listspt[1];
                                var domain = listspt[2];
                                $('#btnDeleteImages').attr('data-value', listId);
                                $('#modalDeleteImagesBody').html('');
                                $.get('/Requests/GetFileUpload', {
                                    requestId: requestId,
                                    requestDetailId: requestDetailId,
                                    Domain: domain
                                }, function (respone) {
                                    if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                        var stringImage = '';
                                        $.each(respone, function (index1, item1) {
                                            stringImage += renderLineTable(item1.Uri);
                                        });
                                        $('#modalDeleteImagesBody').html(stringImage);
                                        $('#modalDeleteImages').modal('show');
                                    } else {
                                        XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                    }
                                }).error(function () {
                                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                });

                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };

                var actionRendererUpload_4 = function (instance, td, row, col, prop, value, cellProperties) {

                    if (prop == 'button_4' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="4" class="fa fa-upload" style="color:green"></i>');
                            $button.click(function () {
                                $('#RowLine134').val('-1');
                                var idtemp = $(this).attr('id').toString();
                                $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                var id = $(this).attr('data-id');
                                var col = $(this).attr('data-value');
                                $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                $('#uploadDetails').val('');
                                $('#myModalUpload').modal('show');
                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };
                var actionRendererUpload_4_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_4_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_4 = instance.getDataAtRowProp(row, 'Images_4');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_4 == '' || Images_4 == null || Images_4 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_4.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {
                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });
                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_4_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_4_Delete' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var requestId = instance.getDataAtRowProp(row, 'RequestId');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            var datavalue_line = requestId + '-' + valid + '-4';
                            $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                            $button.click(function () {
                                var listId = $(this).attr("data-value");
                                var listspt = listId.split('-');
                                var requestId = listspt[0];
                                var requestDetailId = listspt[1];
                                var domain = listspt[2];
                                $('#btnDeleteImages').attr('data-value', listId);
                                $('#modalDeleteImagesBody').html('');
                                $.get('/Requests/GetFileUpload', {
                                    requestId: requestId,
                                    requestDetailId: requestDetailId,
                                    Domain: domain
                                }, function (respone) {
                                    if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                        var stringImage = '';
                                        $.each(respone, function (index1, item1) {
                                            stringImage += renderLineTable(item1.Uri);
                                        });
                                        $('#modalDeleteImagesBody').html(stringImage);
                                        $('#modalDeleteImages').modal('show');
                                    } else {
                                        XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                    }
                                }).error(function () {
                                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                });

                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };

                var actionRendererUpload_5 = function (instance, td, row, col, prop, value, cellProperties) {

                    if (prop == 'button_5' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="5" class="fa fa-upload" style="color:green"></i>');
                            $button.click(function () {
                                $('#RowLine134').val('-1');
                                var idtemp = $(this).attr('id').toString();
                                $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                var id = $(this).attr('data-id');
                                var col = $(this).attr('data-value');
                                $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                $('#uploadDetails').val('');
                                $('#myModalUpload').modal('show');
                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };
                var actionRendererUpload_5_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_5_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_5 = instance.getDataAtRowProp(row, 'Images_5');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_5 == '' || Images_5 == null || Images_5 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_5.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {
                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });
                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_5_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_5_Delete' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var requestId = instance.getDataAtRowProp(row, 'RequestId');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            var datavalue_line = requestId + '-' + valid + '-5';
                            $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                            $button.click(function () {
                                var listId = $(this).attr("data-value");
                                var listspt = listId.split('-');
                                var requestId = listspt[0];
                                var requestDetailId = listspt[1];
                                var domain = listspt[2];
                                $('#btnDeleteImages').attr('data-value', listId);
                                $('#modalDeleteImagesBody').html('');
                                $.get('/Requests/GetFileUpload', {
                                    requestId: requestId,
                                    requestDetailId: requestDetailId,
                                    Domain: domain
                                }, function (respone) {
                                    if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                        var stringImage = '';
                                        $.each(respone, function (index1, item1) {
                                            stringImage += renderLineTable(item1.Uri);
                                        });
                                        $('#modalDeleteImagesBody').html(stringImage);
                                        $('#modalDeleteImages').modal('show');
                                    } else {
                                        XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                    }
                                }).error(function () {
                                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                });

                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };

                var actionRendererUpload_6 = function (instance, td, row, col, prop, value, cellProperties) {

                    if (prop == 'button_6' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="6" class="fa fa-upload" style="color:green"></i>');
                            $button.click(function () {
                                $('#RowLine134').val('-1');
                                var idtemp = $(this).attr('id').toString();
                                $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                var id = $(this).attr('data-id');
                                var col = $(this).attr('data-value');
                                $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                $('#uploadDetails').val('');
                                $('#myModalUpload').modal('show');
                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };
                var actionRendererUpload_6_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_6_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_6 = instance.getDataAtRowProp(row, 'Images_6');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_6 == '' || Images_6 == null || Images_6 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_6.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {
                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });
                                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_6_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_6_Delete' && checkPerss == true && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var requestId = instance.getDataAtRowProp(row, 'RequestId');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            var datavalue_line = requestId + '-' + valid + '-6';
                            $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                            $button.click(function () {
                                var listId = $(this).attr("data-value");
                                var listspt = listId.split('-');
                                var requestId = listspt[0];
                                var requestDetailId = listspt[1];
                                var domain = listspt[2];
                                $('#btnDeleteImages').attr('data-value', listId);
                                $('#modalDeleteImagesBody').html('');
                                $.get('/Requests/GetFileUpload', {
                                    requestId: requestId,
                                    requestDetailId: requestDetailId,
                                    Domain: domain
                                }, function (respone) {
                                    if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                        var stringImage = '';
                                        $.each(respone, function (index1, item1) {
                                            stringImage += renderLineTable(item1.Uri);
                                        });
                                        $('#modalDeleteImagesBody').html(stringImage);
                                        $('#modalDeleteImages').modal('show');
                                    } else {
                                        XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                    }
                                }).error(function () {
                                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                });

                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };

                var actionRendererUpload_7 = function (instance, td, row, col, prop, value, cellProperties) {

                    if (prop == 'button_7' && checkPerss == true && CL.Status < 4 && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="7" class="fa fa-upload" style="color:green"></i>');
                            $button.click(function () {
                                $('#RowLine134').val('-1');
                                var idtemp = $(this).attr('id').toString();
                                $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                                var id = $(this).attr('data-id');
                                var col = $(this).attr('data-value');
                                $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                                $('#uploadDetails').val('');
                                $('#myModalUpload').modal('show');
                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };
                var actionRendererUpload_7_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_7_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_7 = instance.getDataAtRowProp(row, 'Images_7');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined ||
                            Images_7 == '' || Images_7 == null || Images_7 == undefined) {
                            $button = '';
                        } else {
                            var images = Images_7.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                var duoi = item1.split('.')[1].toString().toLowerCase();
                                var tenfile = item1.split('/')[3].toString();
                                if (duoi === '' || duoi === undefined || duoi === null) {
                                    duoi = '';
                                } else {
                                    var l_Url = '';
                                    $.ajax({
                                        async: false,
                                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                        type: "GET",
                                        data: { Url: item1 },
                                        success: function (p_ActionResult) {
                                            l_Url = p_ActionResult;
                                        }
                                    });
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l_Url + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l_Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_7_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_7_Delete' && checkPerss == true && CL.Status < 4 && CL.StepNo > 1) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var requestId = instance.getDataAtRowProp(row, 'RequestId');
                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            var datavalue_line = requestId + '-' + valid + '-7';
                            $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                            $button.click(function () {
                                var listId = $(this).attr("data-value");
                                var listspt = listId.split('-');
                                var requestId = listspt[0];
                                var requestDetailId = listspt[1];
                                var domain = listspt[2];
                                $('#btnDeleteImages').attr('data-value', listId);
                                $('#modalDeleteImagesBody').html('');
                                $.get('/Requests/GetFileUpload', {
                                    requestId: requestId,
                                    requestDetailId: requestDetailId,
                                    Domain: domain
                                }, function (respone) {
                                    if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                        var stringImage = '';
                                        $.each(respone, function (index1, item1) {
                                            stringImage += renderLineTable(item1.Uri);
                                        });
                                        $('#modalDeleteImagesBody').html(stringImage);
                                        $('#modalDeleteImages').modal('show');
                                    } else {
                                        XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                    }
                                }).error(function () {
                                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                });

                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };

                function strip_tags(input, allowed) {
                    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                        commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                    // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                    allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                    return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                        return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                    });
                }
                function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                    var escaped = Handsontable.helper.stringify(value);
                    escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                    td.innerHTML = escaped;
                    td.style.textAlign = 'Left';
                    return td;
                }
                $.get('/Requests/GetShopByRegion', { regionId: 0 }, function (data) {
                    dataShopFull = data;
                    $.each(dataShopFull, function (index, item) {
                        dataShopName.push(item.WarehouseCode + '--' + item.WarehouseName);
                    });
                    var setting_b1 = function () {
                        return {
                            //=================================Data=======
                            data: dataHandsontable,
                            //================================Cols=======
                            //maxCols: 23,
                            //minCols: 23,
                            //startCols: 23,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: false,
                            columnSorting: false,
                            colWidths: 'undefined',
                            //copyColsLimit: 23,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            //viewportColumnRenderingOffset: 23,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: false,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 4,
                            //startRows: 10,
                            //viewportRowRenderingOffset : 'auto',
                            //maxRows: dataHandsontable.length,
                            //minRows: dataHandsontable.length,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: false,
                            hiddenColumns: {
                                indicators: true
                            },
                            //====================================Oder ==============================================
                            colHeaders: [
                                'Loại khiếu nại',
                                'Nhà vận chuyển',
                                'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                'File ->', 'Xóa', 'File Biên bản làm việc',
                                'File ->', 'Xóa', 'File thùng hàng nhận',
                                'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                'Thời gian chuyển hàng/nhận hàng',
                                'Paste Links ->', 'Links Camera',
                                'Lý do không nhập link camera',
                                'Tên Shop gửi hàng',
                                'Ghi chú'
                            ],
                            columns: [
                                { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                {
                                    data: "Property4", type: 'dropdown', source: dataSourceServiceName, readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                        var id = instance.getDataAtRowProp(row, 'Property4');
                                        if (id !== '' && id !== null && id !== undefined) {
                                            Handsontable.DropdownCell.renderer.apply(this, arguments);
                                        } else {
                                            cellProperties.readOnly = true;
                                        }

                                    }
                                },
                                { data: "button_1", renderer: actionRendererUpload_1, editor: false },
                                { data: "button_1_Delete", renderer: actionRendererUpload_1_Delete, editor: false },
                                { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                                { data: "button_2", renderer: actionRendererUpload_2, editor: false },
                                { data: "button_2_Delete", renderer: actionRendererUpload_2_Delete, editor: false },
                                { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },
                                { data: "button_6", renderer: actionRendererUpload_6, editor: false },
                                { data: "button_6_Delete", renderer: actionRendererUpload_6_Delete, editor: false },
                                { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },
                                { data: "button_3", renderer: actionRendererUpload_3, editor: false },
                                { data: "button_3_Delete", renderer: actionRendererUpload_3_Delete, editor: false },
                                { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },
                                { data: "button_4", renderer: actionRendererUpload_4, editor: false },
                                { data: "button_4_Delete", renderer: actionRendererUpload_4_Delete, editor: false },
                                { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },
                                { data: "button_5", renderer: actionRendererUpload_5, editor: false },
                                { data: "button_5_Delete", renderer: actionRendererUpload_5_Delete, editor: false },
                                { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: (checkUserCC == true || CheckSender == true) && CL.Status < 4 && dataHandsontable[0].SoLanGoiOut == 0 ? false : true },
                                { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: checkAssigner == true && CL.Status < 4 && dataHandsontable[0].SoLanGoiOut == 0 ? false : true },
                                {
                                    data: 'LinkView', type: 'text', className: 'htLeft', readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                        var links = instance.getDataAtRowProp(row, 'Links');
                                        var escaped = Handsontable.helper.stringify(value);
                                        if (links == '' || links == null || links == undefined) {
                                            escaped = '';
                                        } else {
                                            var listLink = links.split(',');
                                            var listLinkView = [];
                                            $.each(listLink, function (index, item) {
                                                listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                            });
                                            escaped = listLinkView.join('<br>')
                                        }
                                        escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                        td.innerHTML = escaped;
                                        td.style.textAlign = 'left';
                                        return td;
                                    }
                                },
                                { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: checkAssigner == true && CL.Status < 4 && dataHandsontable[0].SoLanGoiOut == 0 ? false : true },
                                { data: "Shops", type: 'autocomplete', source: dataShopName, strict: false, className: 'htLeft', width: 350, readOnly: true },
                                { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                            ],
                            afterChange: function (changes, source) {
                                if (!changes || source == 'not') {
                                    return;
                                }
                                var instance = this;
                                changes.forEach(function (change) {
                                    var row = change[0];
                                    var col = change[1];
                                    var newValue = change[3];
                                    var cellProperties, options;
                                    if (col == 'PastLink') {
                                        if (newValue == '' || newValue == null || newValue == undefined) {
                                            hot.setDataAtRowProp(row, 'Links', '', 'not');
                                        } else {
                                            hot.setDataAtRowProp(row, 'Links', newValue, 'not');
                                        }
                                    }
                                });
                                instance.render();
                            },
                        };
                    };
                    var setting_b2 = function () {
                        return {
                            //=================================Data=======
                            data: dataHandsontable,
                            //================================Cols=======
                            autoColumnSize: true,
                            autoRowSize: true,
                            rowHeaders: true,
                            minSpareRows: 4,
                            stretchH: 'all',
                            formulas: true,
                            hiddenColumns: {
                                columns: [1, 2],
                                indicators: true
                            },
                            //====================================Oder ==============================================
                            colHeaders: [
                                'Loại khiếu nại',
                                'Nhà vận chuyển',
                                'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                'File ->', 'Xóa', 'File Biên bản làm việc',
                                'File ->', 'Xóa', 'File thùng hàng nhận',
                                'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                'Thời gian chuyển hàng/nhận hàng',
                                'Paste Links ->', 'Links Camera',
                                'Lý do không nhập link camera',
                                'Hướng xử lý',
                                'Tên Shop gửi hàng',
                                'Ghi chú'
                            ],
                            columns: [
                                { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                {
                                    data: "Property4", type: 'dropdown', source: dataSourceServiceName, readOnly: !checkEdit,
                                    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                        var id = instance.getDataAtRowProp(row, 'Property4');
                                        if (id !== '' && id !== null && id !== undefined) {
                                            Handsontable.DropdownCell.renderer.apply(this, arguments);
                                        } else {
                                            cellProperties.readOnly = true;
                                        }

                                    }
                                },
                                { data: "button_1", renderer: actionRendererUpload_1, editor: false },
                                { data: "button_1_Delete", renderer: actionRendererUpload_1_Delete, editor: false },
                                { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                                { data: "button_2", renderer: actionRendererUpload_2, editor: false },
                                { data: "button_2_Delete", renderer: actionRendererUpload_2_Delete, editor: false },
                                { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },
                                { data: "button_6", renderer: actionRendererUpload_6, editor: false },
                                { data: "button_6_Delete", renderer: actionRendererUpload_6_Delete, editor: false },
                                { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },
                                { data: "button_3", renderer: actionRendererUpload_3, editor: false },
                                { data: "button_3_Delete", renderer: actionRendererUpload_3_Delete, editor: false },
                                { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },
                                { data: "button_4", renderer: actionRendererUpload_4, editor: false },
                                { data: "button_4_Delete", renderer: actionRendererUpload_4_Delete, editor: false },
                                { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },
                                { data: "button_5", renderer: actionRendererUpload_5, editor: false },
                                { data: "button_5_Delete", renderer: actionRendererUpload_5_Delete, editor: false },
                                { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: true },
                                { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                {
                                    data: 'LinkView', type: 'text', className: 'htLeft', readOnly: true,
                                    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                        var links = instance.getDataAtRowProp(row, 'Links');
                                        var escaped = Handsontable.helper.stringify(value);
                                        if (links == '' || links == null || links == undefined) {
                                            escaped = '';
                                        } else {
                                            var listLink = links.split(',');
                                            var listLinkView = [];
                                            $.each(listLink, function (index, item) {
                                                listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                            });
                                            escaped = listLinkView.join('<br>')
                                        }
                                        escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                        td.innerHTML = escaped;
                                        td.style.textAlign = 'left';
                                        return td;
                                    }
                                },
                                { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: true },
                                {
                                    data: 'HuongXLNB', strict: false, className: 'htLeft', type: 'autocomplete', width: 300, readOnly: checkAssigner == true && CL.Status < 4 ? false : true, source: [
                                        'NVC đền bù',
                                        'Truy thu shop',
                                        'Khác...'
                                    ]
                                },
                                { data: "Shops", type: 'autocomplete', source: dataShopName, strict: false, className: 'htLeft', width: 350, readOnly: (CheckSender == true || checkAssigner == true) && CL.Status < 4 && dataHandsontable[0].SoLanGoiOut == 0 ? false : true },
                                { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                            ],
                            beforeChange: function (changes, source) {
                                if (source == 'not') return;
                                for (i = 0; i < changes.length; i++) {
                                    var row = changes[i][0], col = changes[i][1], value = changes[i][3];
                                    if (col === 'HuongXLNB') {
                                        var instance = this;
                                        var DataS = [
                                            'NVC đền bù',
                                            'Truy thu shop',
                                            'Khác...'
                                        ];
                                        if (DataS == '') {
                                            return false;
                                        } else {
                                            var listArr = DataS.toString().split(',');
                                            if ($.inArray(value, listArr) == '-1') {
                                                return false;
                                            }
                                        }
                                    }
                                }
                            },
                            afterChange: function (changes, source) {
                                if (!changes || source == 'not') {
                                    return;
                                }
                                var instance = this;
                                changes.forEach(function (change) {
                                    var row = change[0];
                                    var col = change[1];
                                    var newValue = change[3];
                                    var cellProperties, options;
                                    if (col == 'PastLink') {
                                        if (newValue == '' || newValue == null || newValue == undefined) {
                                            hot.setDataAtRowProp(row, 'Links', '', 'not');
                                        } else {
                                            hot.setDataAtRowProp(row, 'Links', newValue, 'not');
                                        }
                                    }
                                    if (col == 'HuongXLNB') {
                                        var checkMyData = $.grep(hot.getData(), function (item, index) {
                                            return item.Id !== null && item.Id !== '' && item.Id !== undefined && item.HuongXLNB == 'Khác...';
                                        });
                                        if (checkMyData != null && checkMyData != '' && checkMyData != undefined) {
                                            hot.updateSettings({
                                                colHeaders: [
                                                    'Loại khiếu nại',
                                                    'Nhà vận chuyển',
                                                    'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                                    'File ->', 'Xóa', 'File Biên bản làm việc',
                                                    'File ->', 'Xóa', 'File thùng hàng nhận',
                                                    'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                                    'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                                    'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                                    'Thời gian chuyển hàng/nhận hàng',
                                                    'Paste Links ->', 'Links Camera',
                                                    'Lý do không nhập link camera',
                                                    'Hướng xử lý',
                                                    'Nội dung khác',
                                                    'Tên Shop gửi hàng',
                                                    'Ghi chú'
                                                ],
                                                columns: [
                                                    { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                                    {
                                                        data: "Property4", type: 'dropdown', source: dataSourceServiceName, readOnly: !checkEdit,
                                                        renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                                            var id = instance.getDataAtRowProp(row, 'Property4');
                                                            if (id !== '' && id !== null && id !== undefined) {
                                                                Handsontable.DropdownCell.renderer.apply(this, arguments);
                                                            } else {
                                                                cellProperties.readOnly = true;
                                                            }
                                                        }
                                                    },
                                                    { data: "button_1", renderer: actionRendererUpload_1, editor: false },
                                                    { data: "button_1_Delete", renderer: actionRendererUpload_1_Delete, editor: false },
                                                    { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                                                    { data: "button_2", renderer: actionRendererUpload_2, editor: false },
                                                    { data: "button_2_Delete", renderer: actionRendererUpload_2_Delete, editor: false },
                                                    { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },
                                                    { data: "button_6", renderer: actionRendererUpload_6, editor: false },
                                                    { data: "button_6_Delete", renderer: actionRendererUpload_6_Delete, editor: false },
                                                    { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },
                                                    { data: "button_3", renderer: actionRendererUpload_3, editor: false },
                                                    { data: "button_3_Delete", renderer: actionRendererUpload_3_Delete, editor: false },
                                                    { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },
                                                    { data: "button_4", renderer: actionRendererUpload_4, editor: false },
                                                    { data: "button_4_Delete", renderer: actionRendererUpload_4_Delete, editor: false },
                                                    { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },
                                                    { data: "button_5", renderer: actionRendererUpload_5, editor: false },
                                                    { data: "button_5_Delete", renderer: actionRendererUpload_5_Delete, editor: false },
                                                    { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                                    { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: true },
                                                    { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                                    {
                                                        data: 'LinkView', type: 'text', className: 'htLeft', readOnly: true,
                                                        renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                                            var links = instance.getDataAtRowProp(row, 'Links');
                                                            var escaped = Handsontable.helper.stringify(value);
                                                            if (links == '' || links == null || links == undefined) {
                                                                escaped = '';
                                                            } else {
                                                                var listLink = links.split(',');
                                                                var listLinkView = [];
                                                                $.each(listLink, function (index, item) {
                                                                    listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                                                });
                                                                escaped = listLinkView.join('<br>')
                                                            }
                                                            escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                                            td.innerHTML = escaped;
                                                            td.style.textAlign = 'left';
                                                            return td;
                                                        }
                                                    },
                                                    { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: true },
                                                    {
                                                        data: 'HuongXLNB', strict: false, className: 'htLeft', type: 'autocomplete', width: 300, readOnly: checkAssigner == true && CL.Status < 4 ? false : true, source: [
                                                            'NVC đền bù',
                                                            'Truy thu shop',
                                                            'Khác...'
                                                        ]
                                                    },
                                                    { data: "NoiDungKhac", type: "text", className: 'htLeft' },
                                                    { data: "Shops", type: 'autocomplete', source: dataShopName, strict: false, className: 'htLeft', width: 350, readOnly: (CheckSender == true || checkAssigner == true) && CL.Status < 4 && dataHandsontable[0].SoLanGoiOut == 0 ? false : true },
                                                    { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                                                ],
                                            });
                                        }
                                        else {
                                            hot.updateSettings({
                                                colHeaders: [
                                                    'Loại khiếu nại',
                                                    'Nhà vận chuyển',
                                                    'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                                    'File ->', 'Xóa', 'File Biên bản làm việc',
                                                    'File ->', 'Xóa', 'File thùng hàng nhận',
                                                    'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                                    'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                                    'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                                    'Thời gian chuyển hàng/nhận hàng',
                                                    'Paste Links ->', 'Links Camera',
                                                    'Lý do không nhập link camera',
                                                    'Hướng xử lý',
                                                    'Tên Shop gửi hàng',
                                                    'Ghi chú'
                                                ],
                                                columns: [
                                                    { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                                    {
                                                        data: "Property4", type: 'dropdown', source: dataSourceServiceName, readOnly: !checkEdit,
                                                        renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                                            var id = instance.getDataAtRowProp(row, 'Property4');
                                                            if (id !== '' && id !== null && id !== undefined) {
                                                                Handsontable.DropdownCell.renderer.apply(this, arguments);
                                                            } else {
                                                                cellProperties.readOnly = true;
                                                            }
                                                        }
                                                    },
                                                    { data: "button_1", renderer: actionRendererUpload_1, editor: false },
                                                    { data: "button_1_Delete", renderer: actionRendererUpload_1_Delete, editor: false },
                                                    { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                                                    { data: "button_2", renderer: actionRendererUpload_2, editor: false },
                                                    { data: "button_2_Delete", renderer: actionRendererUpload_2_Delete, editor: false },
                                                    { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },
                                                    { data: "button_6", renderer: actionRendererUpload_6, editor: false },
                                                    { data: "button_6_Delete", renderer: actionRendererUpload_6_Delete, editor: false },
                                                    { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },
                                                    { data: "button_3", renderer: actionRendererUpload_3, editor: false },
                                                    { data: "button_3_Delete", renderer: actionRendererUpload_3_Delete, editor: false },
                                                    { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },
                                                    { data: "button_4", renderer: actionRendererUpload_4, editor: false },
                                                    { data: "button_4_Delete", renderer: actionRendererUpload_4_Delete, editor: false },
                                                    { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },
                                                    { data: "button_5", renderer: actionRendererUpload_5, editor: false },
                                                    { data: "button_5_Delete", renderer: actionRendererUpload_5_Delete, editor: false },
                                                    { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                                    { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: true },
                                                    { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                                    {
                                                        data: 'LinkView', type: 'text', className: 'htLeft', readOnly: true,
                                                        renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                                            var links = instance.getDataAtRowProp(row, 'Links');
                                                            var escaped = Handsontable.helper.stringify(value);
                                                            if (links == '' || links == null || links == undefined) {
                                                                escaped = '';
                                                            } else {
                                                                var listLink = links.split(',');
                                                                var listLinkView = [];
                                                                $.each(listLink, function (index, item) {
                                                                    listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                                                });
                                                                escaped = listLinkView.join('<br>')
                                                            }
                                                            escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                                            td.innerHTML = escaped;
                                                            td.style.textAlign = 'left';
                                                            return td;
                                                        }
                                                    },
                                                    { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: true },

                                                    {
                                                        data: 'HuongXLNB', strict: false, className: 'htLeft', type: 'autocomplete', readOnly: checkAssigner == true && CL.Status < 4 ? false : true, source: [
                                                            'NVC đền bù',
                                                            'Truy thu shop',
                                                            'Khác...'
                                                        ]
                                                    },
                                                    { data: "Shops", type: 'autocomplete', source: dataShopName, strict: false, className: 'htLeft', width: 350, readOnly: (CheckSender == true || checkAssigner == true) && CL.Status < 4 && dataHandsontable[0].SoLanGoiOut == 0 ? false : true },
                                                    { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                                                ],
                                            });
                                        }
                                        hot.render();
                                    }
                                });
                                instance.render();
                            },
                        };
                    };

                    var setting_b3 = function () {
                        return {
                            //=================================Data=======
                            data: dataHandsontable,
                            //================================Cols=======
                            //maxCols: 23,
                            //minCols: 23,
                            //startCols: 23,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: false,
                            columnSorting: false,
                            colWidths: 'undefined',
                            //copyColsLimit: 23,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            //viewportColumnRenderingOffset: 23,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: false,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 4,
                            //startRows: 10,
                            //viewportRowRenderingOffset : 'auto',
                            //maxRows: dataHandsontable.length,
                            //minRows: dataHandsontable.length,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: false,
                            hiddenColumns: {
                                indicators: true
                            },
                            //====================================Oder ==============================================
                            colHeaders: [
                                'Loại khiếu nại',
                                'Nhà vận chuyển',
                                'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                'File ->', 'Xóa', 'File Biên bản làm việc',
                                'File ->', 'Xóa', 'File thùng hàng nhận',
                                'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                'Số hóa đơn',          //20
                                'Thời gian chuyển hàng/nhận hàng',
                                'Paste Links ->', 'Links Camera',
                                'Lý do không nhập link camera',
                                'Hướng xử lý',
                                'Tên Shop gửi hàng',
                                'Ghi chú'
                            ],
                            columns: [
                                { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                { data: "Property4", type: 'dropdown', readOnly: true },
                                { data: "button_1", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_1_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                                { data: "button_2", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_2_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },
                                { data: "button_6", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_6_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },
                                { data: "button_3", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_3_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },
                                { data: "button_4", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_4_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },
                                { data: "button_5", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_5_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                { data: "SoHoaDon", type: "text", className: 'htLeft', readOnly: checkAssigner == true && CL.Status < 4 ? false : true },
                                { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: true },
                                { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                {
                                    data: 'LinkView', readOnly: true, data: 'LinkView', type: 'text', className: 'htLeft',
                                    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                        var links = instance.getDataAtRowProp(row, 'Links');
                                        var escaped = Handsontable.helper.stringify(value);
                                        if (links == '' || links == null || links == undefined) {
                                            escaped = '';
                                        } else {
                                            var listLink = links.split(',');
                                            var listLinkView = [];
                                            $.each(listLink, function (index, item) {
                                                listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                            });
                                            escaped = listLinkView.join('<br>')
                                        }
                                        escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                        td.innerHTML = escaped;
                                        td.style.textAlign = 'left';
                                        return td;
                                    }
                                },
                                { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: true },
                                { data: 'HuongXLNB', type: 'text', width: 300, className: 'htLeft', readOnly: true },
                                { data: "Shops", type: "text", className: 'htLeft', readOnly: true, width: 350 },
                                { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                            ],
                            afterChange: function (changes, source) {
                                if (!changes || source == 'not') {
                                    return;
                                }
                                var instance = this;
                                changes.forEach(function (change) {
                                    var row = change[0];
                                    var col = change[1];
                                    var newValue = change[3];
                                    var cellProperties, options;
                                    if (col == 'PastLink') {
                                        if (newValue == '' || newValue == null || newValue == undefined) {
                                            hot.setDataAtRowProp(row, 'Links', '', 'not');
                                        } else {
                                            hot.setDataAtRowProp(row, 'Links', newValue, 'not');
                                        }
                                    }
                                });
                                instance.render();
                            },
                        };
                    };
                    var setting_b4 = function () {
                        return {
                            //=================================Data=======
                            data: dataHandsontable,
                            //================================Cols=======
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: false,
                            columnSorting: false,
                            colWidths: 'undefined',
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: false,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 4,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: false,
                            hiddenColumns: {
                                indicators: true
                            },
                            //====================================Oder ==============================================
                            colHeaders: [
                                'Loại khiếu nại',
                                'Nhà vận chuyển',
                                'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                'File ->', 'Xóa', 'File Biên bản làm việc',
                                'File ->', 'Xóa', 'File thùng hàng nhận',
                                'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                'Số hóa đơn',          //20
                                'File ->', 'Xóa', 'Hình hóa đơn',          // 21, 22,23
                                'Số vận đơn',          //20
                                'Thời gian chuyển hàng/nhận hàng',
                                'Paste Links ->', 'Links Camera',
                                'Lý do không nhập link camera',
                                'Hướng xử lý',
                                'Tên Shop gửi hàng',
                                'Ghi chú'
                            ],
                            columns: [
                                { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                { data: "Property4", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_1", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_1_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                                { data: "button_2", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_2_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },
                                { data: "button_6", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_6_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },
                                { data: "button_3", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_3_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },
                                { data: "button_4", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_4_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },
                                { data: "button_5", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_5_Delete", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                { data: "SoHoaDon", type: "text", className: 'htLeft', readOnly: true },
                                { data: "button_7", renderer: actionRendererUpload_7, editor: false },
                                { data: "button_7_Delete", renderer: actionRendererUpload_7_Delete, editor: false },
                                { data: "button_7_Html", renderer: actionRendererUpload_7_Html, editor: false },
                                { data: "SoVanDon", type: "text", className: 'htLeft', readOnly: checkAssigner == true && CL.Status < 4 ? false : true },
                                { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: true },
                                { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                {
                                    data: 'LinkView', readOnly: true, data: 'LinkView', type: 'text', className: 'htLeft',
                                    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                        var links = instance.getDataAtRowProp(row, 'Links');
                                        var escaped = Handsontable.helper.stringify(value);
                                        if (links == '' || links == null || links == undefined) {
                                            escaped = '';
                                        } else {
                                            var listLink = links.split(',');
                                            var listLinkView = [];
                                            $.each(listLink, function (index, item) {
                                                listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                            });
                                            escaped = listLinkView.join('<br>')
                                        }
                                        escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                        td.innerHTML = escaped;
                                        td.style.textAlign = 'left';
                                        return td;
                                    }
                                },
                                { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: true },
                                { data: 'HuongXLNB', type: 'text', width: 300, className: 'htLeft', readOnly: true },
                                { data: "Shops", type: "text", className: 'htLeft', readOnly: true, width: 350 },
                                { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                            ],
                            afterChange: function (changes, source) {
                                if (!changes || source == 'not') {
                                    return;
                                }
                                var instance = this;
                                changes.forEach(function (change) {
                                    var row = change[0];
                                    var col = change[1];
                                    var newValue = change[3];
                                    var cellProperties, options;
                                    if (col == 'PastLink') {
                                        if (newValue == '' || newValue == null || newValue == undefined) {
                                            hot.setDataAtRowProp(row, 'Links', '', 'not');
                                        } else {
                                            hot.setDataAtRowProp(row, 'Links', newValue, 'not');
                                        }
                                    }
                                });
                                instance.render();
                            },
                        };
                    };

                    if (CL.StepNo == 1) {
                        hot = new Handsontable(container, setting_b1());
                        hot.selectCell(0, 0, 0, 0);
                    }
                    else if (CL.StepNo == 2) {
                        hot = new Handsontable(container, setting_b2());
                        hot.selectCell(0, 0, 0, 0);
                    }
                    else if (CL.StepNo == 3) {
                        hot = new Handsontable(container, setting_b3());
                        hot.selectCell(0, 0, 0, 0);
                        var checkMyData = $.grep(hot.getData(), function (item, index) {
                            return item.Id !== null && item.Id !== '' && item.Id !== undefined && item.HuongXLNB == 'Khác...';
                        });
                        if (checkMyData != null && checkMyData != '' && checkMyData != undefined) {
                            hot.updateSettings({
                                colHeaders: [
                                    'Loại khiếu nại',
                                    'Nhà vận chuyển',
                                    'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                    'File ->', 'Xóa', 'File Biên bản làm việc',
                                    'File ->', 'Xóa', 'File thùng hàng nhận',
                                    'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                    'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                    'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                    'Số hóa đơn',          //20
                                    'Thời gian chuyển hàng/nhận hàng',
                                    'Paste Links ->', 'Links Camera',
                                    'Lý do không nhập link camera',
                                    'Hướng xử lý',
                                    'Nội dung khác',
                                    'Tên Shop gửi hàng',
                                    'Ghi chú'
                                ],
                                columns: [
                                    { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "Property4", type: 'dropdown', readOnly: true },
                                    { data: "button_1", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_1_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                                    { data: "button_2", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_2_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },
                                    { data: "button_6", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_6_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },
                                    { data: "button_3", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_3_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },
                                    { data: "button_4", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_4_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },
                                    { data: "button_5", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_5_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                    { data: "SoHoaDon", type: "text", className: 'htLeft', readOnly: checkAssigner == true && CL.Status < 4 ? false : true },
                                    { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: true },
                                    { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                    {
                                        data: 'LinkView', readOnly: true, data: 'LinkView', type: 'text', className: 'htLeft',
                                        renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                            var links = instance.getDataAtRowProp(row, 'Links');
                                            var escaped = Handsontable.helper.stringify(value);
                                            if (links == '' || links == null || links == undefined) {
                                                escaped = '';
                                            } else {
                                                var listLink = links.split(',');
                                                var listLinkView = [];
                                                $.each(listLink, function (index, item) {
                                                    listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                                });
                                                escaped = listLinkView.join('<br>')
                                            }
                                            escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                            td.innerHTML = escaped;
                                            td.style.textAlign = 'left';
                                            return td;
                                        }
                                    },
                                    { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: true },
                                    { data: 'HuongXLNB', type: 'text', width: 300, className: 'htLeft', readOnly: true },
                                    { data: "NoiDungKhac", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "Shops", type: "text", className: 'htLeft', readOnly: true, width: 350 },
                                    { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                                ],
                            });
                        }
                        hot.render();
                    }
                    else if (CL.StepNo == 4) {
                        hot = new Handsontable(container, setting_b4());
                        hot.selectCell(0, 0, 0, 0);
                        var checkMyData = $.grep(hot.getData(), function (item, index) {
                            return item.Id !== null && item.Id !== '' && item.Id !== undefined && item.HuongXLNB == 'Khác...';
                        });
                        if (checkMyData != null && checkMyData != '' && checkMyData != undefined) {
                            hot.updateSettings({
                                colHeaders: [
                                    'Loại khiếu nại',
                                    'Nhà vận chuyển',
                                    'File ->', 'Xóa', 'Hình vận đơn Đã đồng kiểm',
                                    'File ->', 'Xóa', 'File Biên bản làm việc',
                                    'File ->', 'Xóa', 'File thùng hàng nhận',
                                    'File ->', 'Xóa', 'Hình chụp hiện trạng',
                                    'File ->', 'Xóa', 'Hình hóa đơn nhập hàng',
                                    'File ->', 'Xóa', 'Hình Jobcard (Phiếu biên nhận Bảo hành/Dịch vụ)',
                                    'Số hóa đơn',          //20
                                    'File ->', 'Xóa', 'Hình hóa đơn',          // 21, 22,23
                                    'Số vận đơn',          //20
                                    'Thời gian chuyển hàng/nhận hàng',
                                    'Paste Links ->', 'Links Camera',
                                    'Lý do không nhập link camera',
                                    'Hướng xử lý',
                                    'Nội dung khác',
                                    'Tên Shop gửi hàng',
                                    'Ghi chú'
                                ],
                                columns: [
                                    { data: "Property2", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "Property4", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_1", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_1_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                                    { data: "button_2", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_2_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_2_Html", renderer: actionRendererUpload_2_Html, editor: false },
                                    { data: "button_6", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_6_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_6_Html", renderer: actionRendererUpload_6_Html, editor: false },
                                    { data: "button_3", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_3_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_3_Html", renderer: actionRendererUpload_3_Html, editor: false },
                                    { data: "button_4", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_4_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_4_Html", renderer: actionRendererUpload_4_Html, editor: false },
                                    { data: "button_5", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_5_Delete", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_5_Html", renderer: actionRendererUpload_5_Html, editor: false },
                                    { data: "SoHoaDon", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "button_7", renderer: actionRendererUpload_7, editor: false },
                                    { data: "button_7_Delete", renderer: actionRendererUpload_7_Delete, editor: false },
                                    { data: "button_7_Html", renderer: actionRendererUpload_7_Html, editor: false },
                                    { data: "SoVanDon", type: "text", className: 'htLeft', readOnly: checkAssigner == true && CL.Status < 4 ? false : true },
                                    { data: "ThoiGianChuyenHang", type: "text", className: 'htLeft', readOnly: true },
                                    { data: 'PastLink', type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                    {
                                        data: 'LinkView', readOnly: true, data: 'LinkView', type: 'text', className: 'htLeft',
                                        renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                            var links = instance.getDataAtRowProp(row, 'Links');
                                            var escaped = Handsontable.helper.stringify(value);
                                            if (links == '' || links == null || links == undefined) {
                                                escaped = '';
                                            } else {
                                                var listLink = links.split(',');
                                                var listLinkView = [];
                                                $.each(listLink, function (index, item) {
                                                    listLinkView.push('<a target="_blank" href="' + item + '">' + item + '</a>');
                                                });
                                                escaped = listLinkView.join('<br>')
                                            }
                                            escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                                            td.innerHTML = escaped;
                                            td.style.textAlign = 'left';
                                            return td;
                                        }
                                    },
                                    { data: "LyDoKhongNhap", type: "text", className: 'htLeft', readOnly: true },
                                    { data: 'HuongXLNB', type: 'text', width: 300, className: 'htLeft', readOnly: true },
                                    { data: "NoiDungKhac", type: "text", className: 'htLeft', readOnly: true },
                                    { data: "Shops", type: "text", className: 'htLeft', readOnly: true, width: 350 },
                                    { data: "Property1", type: "text", className: 'htLeft', readOnly: true },
                                ],
                            });
                        }
                        hot.render();
                    }
                });

                $("#UploadForm").submit(function (e) {
                    var data = new FormData();
                    var selectedFiles = $("#uploadDetails")[0].files;
                    if (selectedFiles.length == 0) {
                        e.preventDefault();
                        $('#myModalUpload').modal('hide');
                        XFunction.RenderMessage('error', 'Không có file để lưu');
                        return;
                    }
                    $.each(selectedFiles, function (index, item) {
                        data.append(selectedFiles[index].name, selectedFiles[index]);
                    });
                    var requestdetailId = $('#btnuploadDetails').attr('data-id');
                    var col = $('#btnuploadDetails').attr('data-value');
                    var rowline = $('#RowLine134').val();
                    //console.log(requestdetailId, col, $('#RowLine134').val());
                    $.ajax({
                        type: "POST",
                        url: "/Requests/SaveUploadedFileDetailCol?RequsetDetailId=" + requestdetailId + "&&Col=" + col,
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            $('#myModalUpload').modal('hide');
                            if (result.error == 0) {
                                var fileNames = $.parseJSON(result.Message);
                                var stringImage = fileNames.join(',');
                                $.each(dataHandsontable, function (index, item) {
                                    if (item.Id == requestdetailId) {
                                        if (col == 1) {
                                            var dataRow = item.Images_1;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_1 = dataRow + stringImage;
                                        } else if (col == 2) {
                                            var dataRow = item.Images_2;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_2 = dataRow + stringImage;
                                        } else if (col == 3) {
                                            var dataRow = item.Images_3;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_3 = dataRow + stringImage;
                                        } else if (col == 4) {
                                            var dataRow = item.Images_4;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_4 = dataRow + stringImage;
                                        } else if (col == 5) {
                                            var dataRow = item.Images_5;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_5 = dataRow + stringImage;
                                        } else if (col == 6) {
                                            var dataRow = item.Images_6;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_6 = dataRow + stringImage;
                                        }
                                        else if (col == 7) {
                                            var dataRow = item.Images_7;
                                            if (dataRow != '' && dataRow != null && dataRow != undefined)
                                                dataRow += ',';
                                            item.Images_7 = dataRow + stringImage;
                                        }
                                    }
                                });
                                hot.render();
                                XFunction.RenderMessage('success', 'Lưu ' + fileNames.length + ' file thành công');
                            } else {
                                XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                            }

                        },
                        error: function () {
                            $('#myModalUpload').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }
                    });
                    e.preventDefault();
                });
                $('#btnDeleteImages').on('click', function () {
                    var dataHidd = $(this).attr('data-value');
                    var checklis = [];
                    var countImagesNoDelete = $("input:checkbox[name=chkDeleteImage]");
                    var countImagesDelete = $("input:checkbox[name=chkDeleteImage]:checked");

                    if (countImagesNoDelete.length == countImagesDelete.length) {
                        XFunction.RenderMessage("error", "Không được xóa toàn bộ hình ảnh đã đính kèm"); return;
                    }

                    $("input:checkbox[name=chkDeleteImage]:checked").each(function () {
                        checklis.push($(this).val());
                    });
                    if (dataHidd == '' || dataHidd == null || dataHidd == undefined || checklis.length == 0) {
                        XFunction.RenderMessage("error", "Không lấy được dữ liệu"); return;
                    }
                    var dataspl = dataHidd.split('-');
                    var requestId = dataspl[0];
                    var requestDetailId = dataspl[1];
                    var domain = dataspl[2];
                    var uris = checklis.join(',');
                    $.get('/Requests/DeleteFileUpload', {
                        requestId: requestId,
                        requestDetailId: requestDetailId,
                        Domain: domain,
                        Uris: uris
                    }, function (respone) {
                        if (respone !== '' && respone !== null && respone !== undefined) {
                            $.each(dataHandsontable, function (index, item) {
                                if (item.Id == requestDetailId && item.RequestId == requestId) {
                                    if (domain == '1' || domain == '1Reup') {
                                        item.Images_1 = respone[0].Uris;
                                    }
                                    if (domain == '2' || domain == '2Reup') {
                                        item.Images_2 = respone[0].Uris;
                                    }
                                    if (domain == '3' || domain == '3Reup') {
                                        item.Images_3 = respone[0].Uris;
                                    }
                                    if (domain == '4' || domain == '4Reup') {
                                        item.Images_4 = respone[0].Uris;
                                    }
                                    if (domain == '5' || domain == '5Reup') {
                                        item.Images_5 = respone[0].Uris;
                                    }
                                    if (domain == '6' || domain == '6Reup') {
                                        item.Images_6 = respone[0].Uris;
                                    }
                                    if (domain == '7' || domain == '7Reup') {
                                        item.Images_7 = respone[0].Uris;
                                    }
                                }
                            });
                            hot.render();
                            $('#modalDeleteImages').modal('hide');
                            XFunction.RenderMessage("success", "Xóa thành công"); return;
                        } else {
                            $.each(dataHandsontable, function (index, item) {
                                if (item.Id == requestDetailId && item.RequestId == requestId) {
                                    if (domain == '1' || domain == '1Reup') {
                                        item.Images_1 = '';
                                    }
                                    if (domain == '2' || domain == '2Reup') {
                                        item.Images_2 = '';
                                    }
                                    if (domain == '3' || domain == '3Reup') {
                                        item.Images_3 = '';
                                    }
                                    if (domain == '4' || domain == '4Reup') {
                                        item.Images_4 = '';
                                    }
                                    if (domain == '5' || domain == '5Reup') {
                                        item.Images_5 = '';
                                    }
                                    if (domain == '6' || domain == '6Reup') {
                                        item.Images_6 = '';
                                    }
                                    if (domain == '7' || domain == '7Reup') {
                                        item.Images_7 = '';
                                    }
                                }
                            });
                            hot.render();
                            $('#modalDeleteImages').modal('hide');
                            XFunction.RenderMessage("success", "Xóa thành công"); return;
                        }
                    }).error(function () {
                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                    });
                });

                $btnComment.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                    }
                    var InvalidLinkCameraEmpty = [];
                    var InvalidThoiGianChuyenHangEmpty = [];
                    var dataReturn = [];
                    var myData = $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    $.each(myData, function (index, item) {
                        if ((item.Links == '' || item.Links == null || item.Links == undefined) && CL.StepNo > 1) {
                            if (item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined) {
                                InvalidLinkCameraEmpty.push(index + 1);
                            }
                        }
                        if (item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined) {
                            InvalidThoiGianChuyenHangEmpty.push(index + 1);
                        }
                    });
                    if (InvalidLinkCameraEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Chưa nhập lý do không nhập link camera " + $.unique(InvalidLinkCameraEmpty).join(','));
                        return false;
                    }
                    if (InvalidThoiGianChuyenHangEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Chưa nhập thời gian! Xem lại dòng " + $.unique(InvalidThoiGianChuyenHangEmpty).join(','));
                        return false;
                    }
                    $.each(myData, function (index, item) {
                        var shops = item.Shops;
                        if (shops == '' || shops == null || shops == undefined) {
                            shops = '';
                        }
                        else {
                            var timshop = $.grep(dataShopFull, function (element, cout) {
                                return element.WarehouseCode + '--' + element.WarehouseName == shops;
                            });
                            if (timshop.length > 0) {
                                shops = timshop[0].WarehouseCode;
                            } else {
                                shops = '';
                            }
                        }
                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Shops: shops,
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            SoVanDon: item.SoVanDon == '' || item.SoVanDon == null || item.SoVanDon == undefined ? null : item.SoVanDon,
                            HuongXLNB: item.HuongXLNB == '' || item.HuongXLNB == null || item.HuongXLNB == undefined ? null : item.HuongXLNB,
                            ThoiGianChuyenHang: item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined ? null : item.ThoiGianChuyenHang,
                            LyDoKhongNhap: item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined ? null : item.LyDoKhongNhap,
                            Note: item.HuongXLNB == 'Khác...' ? item.NoiDungKhac : null,
                        });
                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Shops: shops,
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            SoVanDon: item.SoVanDon == '' || item.SoVanDon == null || item.SoVanDon == undefined ? null : item.SoVanDon,
                            HuongXLNB: item.HuongXLNB == '' || item.HuongXLNB == null || item.HuongXLNB == undefined ? null : item.HuongXLNB,
                            ThoiGianChuyenHang: item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined ? null : item.ThoiGianChuyenHang,
                            LyDoKhongNhap: item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined ? null : item.LyDoKhongNhap,
                            Note: item.HuongXLNB == 'Khác...' ? item.NoiDungKhac : null,
                        });
                    });

                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                });
                $btnReply.on('click', function () {
                    $('#MessageNoiDungOutSide').html('');
                    $('#modalNoiDungOutSide').modal('show');
                });
                $btnChangeStep.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();

                    var dataReturn = [];
                    var checkSHD = [], checkHXLNB = [];
                    var InvalidLinkCameraEmpty = [], InvalidHuongXuLy = [], InvalidGhiChuXuLy = [];
                    var InvalidThoiGianChuyenHangEmpty = [];
                    var myData = $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }
                    $.each(myData, function (index, item) {
                        if (item.Links == '' || item.Links == null || item.Links == undefined) {
                            if (item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined) {
                                InvalidLinkCameraEmpty.push(index + 1);
                            }
                        }
                        if (item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined) {
                            InvalidThoiGianChuyenHangEmpty.push(index + 1);
                        }
                    });
                    if (InvalidLinkCameraEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Chưa nhập lý do không nhập link camera " + $.unique(InvalidLinkCameraEmpty).join(','));
                        return false;
                    }
                    if (InvalidThoiGianChuyenHangEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Chưa nhập thời gian! Xem lại dòng " + $.unique(InvalidThoiGianChuyenHangEmpty).join(','));
                        return false;
                    }

                    $.each(myData, function (index, item) {
                        if (item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined) {
                            checkSHD.push(index);
                        }
                        if (item.HuongXLNB == '' || item.HuongXLNB == null || item.HuongXLNB == undefined) {
                            checkHXLNB.push(index);
                        } else {
                            var DataS = [
                                'NVC đền bù',
                                'Truy thu shop',
                                'Khác...'
                            ];
                            var listArr = DataS.toString().split(',');
                            if ($.inArray(item.HuongXLNB, listArr) == '-1') {
                                InvalidHuongXuLy.push(index + 1);
                            }
                        }
                        if (item.HuongXLNB == 'Khác...' && (item.NoiDungKhac == '' || item.NoiDungKhac == null || item.NoiDungKhac == undefined)) {
                            InvalidGhiChuXuLy.push(index + 1);
                        }
                        var shops = item.Shops;
                        if (shops == '' || shops == null || shops == undefined) {
                            shops = '';
                        }
                        else {
                            var timshop = $.grep(dataShopFull, function (element, cout) {
                                return element.WarehouseCode + '--' + element.WarehouseName == shops;
                            });
                            if (timshop.length > 0) {
                                shops = timshop[0].WarehouseCode;
                            } else {
                                shops = '';
                            }
                        }
                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Shops: shops,
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            HuongXLNB: item.HuongXLNB == '' || item.HuongXLNB == null || item.HuongXLNB == undefined ? null : item.HuongXLNB,
                            ThoiGianChuyenHang: item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined ? null : item.ThoiGianChuyenHang,
                            LyDoKhongNhap: item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined ? null : item.LyDoKhongNhap,
                            Note: item.HuongXLNB == 'Khác...' ? item.NoiDungKhac : null,
                        });
                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Shops: shops,
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            HuongXLNB: item.HuongXLNB == '' || item.HuongXLNB == null || item.HuongXLNB == undefined ? null : item.HuongXLNB,
                            ThoiGianChuyenHang: item.ThoiGianChuyenHang == '' || item.ThoiGianChuyenHang == null || item.ThoiGianChuyenHang == undefined ? null : item.ThoiGianChuyenHang,
                            LyDoKhongNhap: item.LyDoKhongNhap == '' || item.LyDoKhongNhap == null || item.LyDoKhongNhap == undefined ? null : item.LyDoKhongNhap,
                            Note: item.HuongXLNB == 'Khác...' ? item.NoiDungKhac : null,
                        });
                    });
                    if (checkSHD.length > 0 && CL.StepNo == 3) {
                        XFunction.RenderMessage("error", "Phải nhập số hóa đơn mới được chuyển bước"); return;
                    }
                    else if (checkHXLNB.length > 0 && CL.StepNo == 2) {
                        XFunction.RenderMessage("error", "Phải nhập hướng xử lý  mới được chuyển bước"); return;
                    }
                    else if (InvalidHuongXuLy.length > 0 && CL.StepNo == 2) {
                        XFunction.RenderMessage("error", "Hướng xử lý không hợp lệ"); return;
                    }
                    else if (InvalidGhiChuXuLy.length > 0) {
                        XFunction.RenderMessage("error", "Vui lòng nhập nội dung hướng xử lý khác...! Xem lại dòng " + $.unique(InvalidGhiChuXuLy).join(','));
                        return false;
                    }
                    else {
                        if (CL.Status == 4) {
                            XFunction.RenderMessage("error", "CallLog đã hoàn tất không thể chuyển bước"); return;
                        }
                        else {
                            $('#Details').val(JSON.stringify(dataReturn));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/ChangeStep");
                            form.submit();
                        }
                    }
                });
                $btnComplete.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();

                    var dataReturn = [];
                    var checkHinhHoaDon = [], checkHXLNB = [];
                    var myData = $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }
                    $.each(myData, function (index, item) {
                        if (item.Images_7 == '' || item.Images_7 == null || item.Images_7 == undefined) {
                            checkHinhHoaDon.push(index);
                        }
                        if (item.HuongXLNB == '' || item.HuongXLNB == null || item.HuongXLNB == undefined) {
                            checkHXLNB.push(index);
                        }
                        var shops = item.Shops;
                        if (shops == '' || shops == null || shops == undefined) {
                            shops = '';
                        }
                        else {
                            var timshop = $.grep(dataShopFull, function (element, cout) {
                                return element.WarehouseCode + '--' + element.WarehouseName == shops;
                            });
                            if (timshop.length > 0) {
                                shops = timshop[0].WarehouseCode;
                            } else {
                                shops = '';
                            }
                        }
                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Shops: shops,
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            SoVanDon: item.SoVanDon == '' || item.SoVanDon == null || item.SoVanDon == undefined ? null : item.SoVanDon,
                            HuongXLNB: item.HuongXLNB == '' || item.HuongXLNB == null || item.HuongXLNB == undefined ? null : item.HuongXLNB
                        });
                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            Property10: item.Links,
                            Shops: shops,
                            SoHoaDon: item.SoHoaDon == '' || item.SoHoaDon == null || item.SoHoaDon == undefined ? null : item.SoHoaDon,
                            SoVanDon: item.SoVanDon == '' || item.SoVanDon == null || item.SoVanDon == undefined ? null : item.SoVanDon,
                            HuongXLNB: item.HuongXLNB == '' || item.HuongXLNB == null || item.HuongXLNB == undefined ? null : item.HuongXLNB
                        });
                    });
                    if (checkHinhHoaDon.length > 0 && CL.StepNo == 4) {
                        XFunction.RenderMessage("error", "Phải tải hình ảnh hóa đơn mới được hoàn tất"); return;
                    }
                    else if (checkHXLNB.length > 0) {
                        XFunction.RenderMessage("error", "Phải nhập hướng xử lý mới được chuyển bước"); return;
                    }
                    else {
                        if (CL.Status == 4) {
                            XFunction.RenderMessage("error", "CallLog đã hoàn tất"); return;
                        }
                        else {
                            $('#Details').val(JSON.stringify(dataReturn));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Complete");
                            form.submit();
                        }
                    }
                });
                $btnSenPartner.on('click', function () {
                    $('#MessageNoiDungOutSide').html('');
                    $('#modalNoiDungOutSide').modal('show');
                });
                $('#btnSendOutSide').on('click', function () {
                    var sendFile143 = '';
                    for (var i = 1; i <= 7; i++) {
                        var j = i + 3
                        if ($('#sendFile134_' + i).is(':checked') == false) {
                            sendFile143 = sendFile143 + j + ',';
                        }
                    }
                    var messageOutSide = $('#MessageNoiDungOutSide').val();
                    if (messageOutSide === null || messageOutSide === '' || messageOutSide === undefined || messageOutSide.trim().length == 0) {
                        XFunction.RenderMessage("error", "Gửi sang outside phải nhập tin nhắn "); return;
                    }
                    if ($('#sendFile134_10').is(':checked') == false) {
                        sendFile143 = sendFile143 + 'link';
                    }
                    if (sendFile143 == '4,5,6,7,8,9,10,link') {
                        XFunction.RenderMessage("error", "Gửi sang Outside phải chọn mục gửi"); return;
                    }
                    var checkedVals = $('.file1:checkbox:checked').map(function () {
                        return this.value;
                    }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var dataReturn = [];
                    var myData = $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== '' && item.Id !== undefined;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    //==================
                    var InvalidNoiDungCuTheClaim = [], InvalidHuongDenBu = [], InvalidMaBillNhanHang = [];
                    var InvalidHuongXuLyEmpty = [], InvalidHuongXuLy = [], InvalidGhiChuXuLy = [], InvalidCalllogBill = [];
                    $.each(myData, function (index, item) {
                        if (item.NoiDungCuTheClaim == '' || item.NoiDungCuTheClaim == null || item.NoiDungCuTheClaim == undefined) {
                            InvalidNoiDungCuTheClaim.push(index + 1);
                        }
                        if (item.HuongDenBu == '' || item.HuongDenBu == null || item.HuongDenBu == undefined) {
                            InvalidHuongDenBu.push(index + 1);
                        }
                        if (item.MaBillNhanHang == '' || item.MaBillNhanHang == null || item.MaBillNhanHang == undefined) {
                            InvalidMaBillNhanHang.push(index + 1);
                        }
                        if (item.HuongXuLy == 'Khác...' && (item.GhiChuHuongXuLy == '' || item.GhiChuHuongXuLy == null || item.HuongXuLy == undefined)) {
                            InvalidGhiChuXuLy.push(index + 1);
                        }
                        if (item.CalllogBill == '' || item.CalllogBill == null || item.CalllogBill == undefined) {
                            InvalidCalllogBill.push(index + 1);
                        }
                        if (item.HuongXuLy == '' || item.HuongXuLy == null || item.HuongXuLy == undefined) {
                            InvalidHuongXuLyEmpty.push(index + 1);
                        }
                        else {
                            var DataS = [
                                'NVC đền bù',
                                'Truy thu shop',
                                'Khác...'
                            ];

                            var listArr = DataS.toString().split(',');
                            if ($.inArray(item.HuongXuLy, listArr) == '-1') {
                                InvalidHuongXuLy.push(index + 1);
                            }
                        }
                    });

                    $.each(myData, function (index, item) {
                        var shops = item.Shops;
                        if (shops == '' || shops == null || shops == undefined) {
                            shops = '';
                        }
                        else {
                            var timshop = $.grep(dataShopFull, function (element, cout) {
                                return element.WarehouseCode + '--' + element.WarehouseName == shops;
                            });
                            if (timshop.length > 0) {
                                shops = timshop[0].WarehouseCode;
                            } else {
                                shops = '';
                            }
                        }
                        dataReturn.push({
                            Id: item.Id,
                            Property4: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].Code,
                            //ChuongNT3 - 18/07/2018 - thêm id DN
                            SaleCode: $.grep(dataSourceService, function (element, cout) {
                                return item.Property4 == element.Name;
                            })[0].VendCodeOutside,
                            //ChuongNT3 - 18/07/2018 - thêm id DN
                            Property10: item.Links,
                            Shops: shops,
                            Property12: sendFile143
                        });
                    });

                    $('#MessageNoiDungOutSideHidden').val(messageOutSide);
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/SendPartner");
                    form.submit();
                });
            });
        });
    }; //ChuongNT3 - 22/10/2018 - thêm hình up thêm

    function contruct_145() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            var TypeCRM = [], TypeCRMName = [''];
            var TypeKeyCRM = [], TypeKeyCRMName = [''], TypeKeyCRMName_2B1 = [''];
            var TypeHXLCRM = [], TypeHXLCRMName = [''];

            var dataDoiKey = [];
            var dataDoiKeyName = [''];
            var dataTraHang = [];
            var dataTraHangName = [''];

            $.get('/Requests/AjaxGetTypeCRM', function (respone) {

                if (respone != '' && respone != null && respone != undefined) {
                    TypeCRM = respone;
                    $.each(TypeCRM, function (index, item) {
                        TypeCRMName.push(item.Name);
                    });
                    //console.log(TypeCRMName);
                }
            });
            $.get('/Requests/AjaxGetTypeKeyCRM', function (respone) {

                if (respone != '' && respone != null && respone != undefined) {
                    TypeKeyCRM = respone;
                    $.each(TypeKeyCRM, function (index, item) {
                        TypeKeyCRMName.push(item.Name);
                    });
                    $.each(TypeKeyCRM, function (index, item) {
                        if (item.Code == 'D' || item.Code == 'P' || item.Code == 'C' || item.Code == 'E')
                            TypeKeyCRMName_2B1.push(item.Name);
                    });
                    //console.log(TypeKeyCRMName);
                }
            });
            $.get('/Requests/AjaxGetTypeHXLCRM', function (respone) {
                if (respone != '' && respone != null && respone != undefined) {
                    TypeHXLCRM = respone;
                    $.each(TypeHXLCRM, function (index, item) {
                        TypeHXLCRMName.push(item.Name);
                        if (item.Code == 'Đổi Key' || item.Code == null) {
                            dataDoiKey.push(item);
                            dataDoiKeyName.push(item.Name);
                        }
                        if (item.Code == "Trả hàng" || item.Code == null) {
                            dataTraHang.push(item);
                            dataTraHangName.push(item.Name);
                        }
                    });
                }
            });


            if (respone != '' && respone != null && respone != undefined) { dataHandsontable = respone; }
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && status != 3 && status != 4 && status != 5 ? true : false;

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 12,
                    minCols: 12,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 12,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 3,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 12,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 5,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: [
                        'Phân loại',
                        'Duyệt',
                        'Không duyệt',
                        'Số SO',
                        'Mã sản phẩm',
                        'Tên sản phẩm',
                        'Số Phiếu trả hàng hoặc đổi key',
                        'Tên cửa hàng',
                        'Lí do trả hàng/ Đổi key',
                        'Hướng xử lí  trạng thái phiếu',
                        'Nội dung hướng xử lí khác',
                        'Hướng xử lí Key trong kho',
                        'Trạng thái CRM'
                    ],
                    columns: [
                        {
                            data: "PhanLoai", type: 'dropdown', source: TypeCRMName, readOnly: !checkApp, width: 100,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id !== '' && id !== null && id !== undefined) {
                                    Handsontable.DropdownCell.renderer.apply(this, arguments);
                                } else {
                                    cellProperties.readOnly = true;
                                }

                            }
                        },
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: !checkApp,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var Id = instance.getDataAtRowProp(row, 'Id');
                                if (Id != '' && Id != null && Id != undefined) {
                                    cellProperties.readOnly = !checkApp;
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                } else {
                                    cellProperties.readOnly = true;
                                    Handsontable.TextCell.renderer.apply(this, arguments);
                                }
                            }
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: !checkApp,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var Approved = instance.getDataAtRowProp(row, 'Approved');
                                var Id = instance.getDataAtRowProp(row, 'Id');
                                if (Id != '' && Id != null && Id != undefined) {
                                    if (Approved == 1 || Approved == true) {
                                        value = '';
                                        cellProperties.readOnly = !checkApp;
                                        Handsontable.TextCell.renderer.apply(this, arguments);
                                    } else {
                                        cellProperties.readOnly = false;
                                        Handsontable.CheckboxCell.renderer.apply(this, arguments);

                                    }
                                } else {
                                    cellProperties.readOnly = true;
                                    Handsontable.TextCell.renderer.apply(this, arguments);
                                }


                            }
                        },

                        { data: 'SO', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Key', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ShopName', type: 'text', className: 'htLeft', readOnly: true },

                        { data: 'LyDo', type: 'text', className: 'htLeft', readOnly: true },
                        {
                            data: "HXLTrangThaiPhieu", type: 'dropdown', source: [''], readOnly: !checkApp,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                var phanloai = instance.getDataAtRowProp(row, 'PhanLoai');
                                var HXLTrangThaiPhieu = instance.getDataAtRowProp(row, 'HXLTrangThaiPhieu');
                                if (id !== '' && id !== null && id !== undefined) {

                                    var dataSource = [];
                                    if (phanloai == 'Đổi Key') {
                                        dataSource = dataDoiKeyName;
                                    } else if (phanloai == 'Trả hàng') {
                                        dataSource = dataTraHangName;
                                    } else {
                                        dataSource = [''];
                                    }
                                    cellProperties.source = dataSource;
                                    Handsontable.DropdownCell.renderer.apply(this, arguments);
                                } else {
                                    cellProperties.readOnly = true;
                                    cellProperties.source = [''];
                                }

                            }
                        },
                        { data: 'NoiDungHXLKhac', type: 'text', className: 'htLeft', readOnly: !checkApp },

                        {
                            data: "HXLKeyTrongKho", type: 'dropdown', source: TypeKeyCRMName, readOnly: !checkApp,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                var maDayVe = instance.getDataAtRowProp(row, 'Quantity');
                                //console.log(maDayVe,CL.StepNo);
                                if (id !== '' && id !== null && id !== undefined && (maDayVe == 1 || CL.StepNo == 2)) {
                                    //cellProperties.source = dataSource;
                                    Handsontable.DropdownCell.renderer.apply(this, arguments);
                                } else if (id !== '' && id !== null && id !== undefined && maDayVe == 2 && CL.StepNo == 1) {
                                    cellProperties.source = TypeKeyCRMName_2B1;
                                    Handsontable.AutocompleteCell.renderer.apply(this, arguments);
                                } else {
                                    cellProperties.readOnly = true;
                                }

                            }
                        },
                        { data: 'TrangThaiKey', type: 'text', className: 'htLeft', readOnly: true },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 2, 0, 'not');
                                } else {
                                    hot.setDataAtCell(row, 1, 1, 'not');
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                var Approved = hot.getDataAtRowProp(row, 'Approved');
                                if (Approved == 1 || Approved == true) {
                                    XFunction.RenderMessage("error", "Đã chọn duyệt rồi không được cập nhật lại trạng thái không duyệt");
                                    return false;
                                } else {
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, 0, 'not');
                                    } else {
                                        hot.setDataAtCell(row, 1, 1, 'not');
                                    }
                                    return true;
                                }

                            }
                            if (col === 'PhanLoai') {
                                hot.setDataAtRowProp(row, 'HXLTrangThaiPhieu', '');
                                hot.render();
                                return true;
                            }
                        }


                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                //if (message.length == 0) {
                //    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                //}
                var dataRet = [];
                var dataInvalidCheck = [];
                var dataInvalidCheckKey = [];
                var dataInvalidDiff = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    var checkA = item.Approved1 == 1 ? 1 : 0;

                    if ((item.Approved1 == 1 && item.Approved2 == 1) || (item.Approved1 == 0 && item.Approved2 == 0) && checkA != 0) {
                        dataInvalidCheck.push(index);
                    }
                    var HXLTrangThaiPhieu = item.HXLTrangThaiPhieu,
                        NoiDungHXLKhac = item.NoiDungHXLKhac,
                        HXLKeyTrongKho = $.grep(TypeKeyCRM, function (elemnt, count) {
                            return elemnt.Name == item.HXLKeyTrongKho;
                        });
                    var key = "";

                    if (HXLTrangThaiPhieu == "" || HXLTrangThaiPhieu == null || HXLTrangThaiPhieu == undefined) {
                        HXLTrangThaiPhieu = "";
                    }
                    if (NoiDungHXLKhac == "" || NoiDungHXLKhac == null || NoiDungHXLKhac == undefined) {
                        NoiDungHXLKhac = "";
                    }
                    if (HXLTrangThaiPhieu == "Khác" && NoiDungHXLKhac == "" && checkA != 0) {
                        dataInvalidDiff.push(index);
                    }
                    if (HXLTrangThaiPhieu == "" && checkA != 0) {
                        dataInvalidDiff.push(index);
                    }
                    if ((HXLKeyTrongKho == "" || HXLKeyTrongKho == null || HXLKeyTrongKho == undefined || HXLKeyTrongKho.length == 0)) {
                        HXLKeyTrongKho = "";
                        if (checkA != 0) {
                            dataInvalidCheckKey.push(index);
                        }
                    } else {
                        key = HXLKeyTrongKho[0].Code;
                    }

                    var phanLoai = item.PhanLoai;
                    if (phanLoai == '' || phanLoai == null || phanLoai == undefined) {
                        phanLoai = 1;
                    } else {
                        if (phanLoai == 'Đổi Key')
                            phanLoai = 1;
                        else
                            phanLoai = 2;
                    }

                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved1 == 1 ? 1 : 0,
                        'HXLTrangThaiPhieu': HXLTrangThaiPhieu,
                        'NoiDungHXLKhac': NoiDungHXLKhac,
                        'HXLKeyTrongKho': key,
                        'PhanLoai': phanLoai
                    });
                });
                if (dataInvalidCheck.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                //if (dataInvalidCheckKey.length > 0) {
                //    XFunction.RenderMessage("error", "Phải chọn đúng Hướng xử lí Key trong kho"); return;
                //}
                if (dataInvalidDiff.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập hướng xử lý trạng thái phiếu  và Phải nhập Nội dung hướng xử lí khác khi Hướng xử lí  trạng thái phiếu là Khác"); return;
                }
                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataRet = [];
                var dataInvalidCheck = [];
                var dataInvalidCheckKey = [];
                var dataInvalidDiff = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    var checkA = item.Approved1 == 1 ? 1 : 0;

                    if ((item.Approved1 == 1 && item.Approved2 == 1) || (item.Approved1 == 0 && item.Approved2 == 0) && checkA != 0) {
                        dataInvalidCheck.push(index);
                    }
                    var HXLTrangThaiPhieu = item.HXLTrangThaiPhieu,
                        NoiDungHXLKhac = item.NoiDungHXLKhac,
                        HXLKeyTrongKho = $.grep(TypeKeyCRM, function (elemnt, count) {
                            return elemnt.Name == item.HXLKeyTrongKho;
                        });
                    var key = "";

                    if (HXLTrangThaiPhieu == "" || HXLTrangThaiPhieu == null || HXLTrangThaiPhieu == undefined) {
                        HXLTrangThaiPhieu = "";
                    }
                    if (NoiDungHXLKhac == "" || NoiDungHXLKhac == null || NoiDungHXLKhac == undefined) {
                        NoiDungHXLKhac = "";
                    }
                    if (HXLTrangThaiPhieu == "Khác" && NoiDungHXLKhac == "" && checkA != 0) {
                        dataInvalidDiff.push(index);
                    }

                    if (HXLTrangThaiPhieu == "" && checkA != 0) {
                        dataInvalidDiff.push(index);
                    }

                    if ((HXLKeyTrongKho == "" || HXLKeyTrongKho == null || HXLKeyTrongKho == undefined || HXLKeyTrongKho.length == 0)) {
                        HXLKeyTrongKho = "";
                        if (checkA != 0) {
                            dataInvalidCheckKey.push(index);
                        }
                    } else {
                        key = HXLKeyTrongKho[0].Code;
                    }

                    var phanLoai = item.PhanLoai;
                    if (phanLoai == '' || phanLoai == null || phanLoai == undefined) {
                        phanLoai = 1;
                    } else {
                        if (phanLoai == 'Đổi Key')
                            phanLoai = 1;
                        else
                            phanLoai = 2;
                    }

                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved1 == 1 ? 1 : 0,
                        'HXLTrangThaiPhieu': HXLTrangThaiPhieu,
                        'NoiDungHXLKhac': NoiDungHXLKhac,
                        'HXLKeyTrongKho': key,
                        'PhanLoai': phanLoai
                    });
                });
                if (dataInvalidCheck.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                //if (dataInvalidCheckKey.length > 0) {
                //    XFunction.RenderMessage("error", "Phải chọn đúng Hướng xử lí Key trong kho"); return;
                //}
                if (dataInvalidDiff.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập hướng xử lý trạng thái phiếu  và Phải nhập Nội dung hướng xử lí khác khi Hướng xử lí  trạng thái phiếu là Khác"); return;
                }


                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataRet = [];
                var dataInvalidCheck = [];
                var dataInvalidCheckKey = [];
                var dataInvalidDiff = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    var checkA = item.Approved1 == 1 ? 1 : 0;

                    if ((item.Approved1 == 1 && item.Approved2 == 1) || (item.Approved1 == 0 && item.Approved2 == 0) && checkA != 0) {
                        dataInvalidCheck.push(index);
                    }
                    var HXLTrangThaiPhieu = item.HXLTrangThaiPhieu,
                        NoiDungHXLKhac = item.NoiDungHXLKhac,
                        HXLKeyTrongKho = $.grep(TypeKeyCRM, function (elemnt, count) {
                            return elemnt.Name == item.HXLKeyTrongKho;
                        });
                    var key = "";

                    if (HXLTrangThaiPhieu == "" || HXLTrangThaiPhieu == null || HXLTrangThaiPhieu == undefined) {
                        HXLTrangThaiPhieu = "";
                    }
                    if (NoiDungHXLKhac == "" || NoiDungHXLKhac == null || NoiDungHXLKhac == undefined) {
                        NoiDungHXLKhac = "";
                    }
                    if (HXLTrangThaiPhieu == "Khác" && NoiDungHXLKhac == "" && checkA != 0) {
                        dataInvalidDiff.push(index);
                    }
                    if (HXLTrangThaiPhieu == "" && checkA != 0) {
                        dataInvalidDiff.push(index);
                    }

                    if ((HXLKeyTrongKho == "" || HXLKeyTrongKho == null || HXLKeyTrongKho == undefined || HXLKeyTrongKho.length == 0)) {
                        HXLKeyTrongKho = "";
                        if (checkA != 0 && item.Quantity != 0) {
                            dataInvalidCheckKey.push(index);
                        }
                    } else {
                        key = HXLKeyTrongKho[0].Code;
                    }

                    var phanLoai = item.PhanLoai;
                    if (phanLoai == '' || phanLoai == null || phanLoai == undefined) {
                        phanLoai = 1;
                    } else {
                        if (phanLoai == 'Đổi Key')
                            phanLoai = 1;
                        else
                            phanLoai = 2;
                    }

                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved1 == 1 ? 1 : 0,
                        'HXLTrangThaiPhieu': HXLTrangThaiPhieu,
                        'NoiDungHXLKhac': NoiDungHXLKhac,
                        'HXLKeyTrongKho': key,
                        'PhanLoai': phanLoai
                    });
                });
                if (dataInvalidCheck.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                if (dataInvalidCheckKey.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn đúng Hướng xử lí Key trong kho"); return;
                }
                if (dataInvalidDiff.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập hướng xử lý trạng thái phiếu  và Phải nhập Nội dung hướng xử lí khác khi Hướng xử lí  trạng thái phiếu là Khác"); return;
                }


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataRet = [];
                var dataInvalidCheck = [];
                var dataInvalidCheckKey = [];
                var dataInvalidDiff = [];
                dataRet = $.grep(dataHandsontable, function (item, index) {
                    return item.Id !== null && item.Id !== '' && item.Id !== '';
                });
                var dataReturn = [];
                $.each(dataRet, function (index, item) {
                    var checkA = item.Approved1 == 1 ? 1 : 0;

                    if ((item.Approved1 == 1 && item.Approved2 == 1) || (item.Approved1 == 0 && item.Approved2 == 0) && checkA != 0) {
                        dataInvalidCheck.push(index);
                    }
                    var HXLTrangThaiPhieu = item.HXLTrangThaiPhieu,
                        NoiDungHXLKhac = item.NoiDungHXLKhac,
                        HXLKeyTrongKho = $.grep(TypeKeyCRM, function (elemnt, count) {
                            return elemnt.Name == item.HXLKeyTrongKho;
                        });
                    var key = "";

                    if (HXLTrangThaiPhieu == "" || HXLTrangThaiPhieu == null || HXLTrangThaiPhieu == undefined) {
                        HXLTrangThaiPhieu = "";
                    }
                    if (NoiDungHXLKhac == "" || NoiDungHXLKhac == null || NoiDungHXLKhac == undefined) {
                        NoiDungHXLKhac = "";
                    }
                    if (HXLTrangThaiPhieu == "Khác" && NoiDungHXLKhac == "" && checkA != 0) {
                        dataInvalidDiff.push(index);
                    }
                    if (HXLTrangThaiPhieu == "" && checkA != 0) {
                        dataInvalidDiff.push(index);
                    }

                    if ((HXLKeyTrongKho == "" || HXLKeyTrongKho == null || HXLKeyTrongKho == undefined || HXLKeyTrongKho.length == 0)) {
                        HXLKeyTrongKho = "";
                        if (checkA != 0) {
                            dataInvalidCheckKey.push(index);
                        }
                    } else {
                        key = HXLKeyTrongKho[0].Code;
                    }

                    var phanLoai = item.PhanLoai;
                    if (phanLoai == '' || phanLoai == null || phanLoai == undefined) {
                        phanLoai = 1;
                    } else {
                        if (phanLoai == 'Đổi Key')
                            phanLoai = 1;
                        else
                            phanLoai = 2;
                    }

                    dataReturn.push({
                        'Id': item.Id,
                        'Approved': item.Approved1 == 1 ? 1 : 0,
                        'HXLTrangThaiPhieu': HXLTrangThaiPhieu,
                        'NoiDungHXLKhac': NoiDungHXLKhac,
                        'HXLKeyTrongKho': key,
                        'PhanLoai': phanLoai
                    });
                });
                if (dataInvalidCheck.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }
                if (dataInvalidCheckKey.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn đúng Hướng xử lí Key trong kho"); return;
                }
                if (dataInvalidDiff.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập hướng xử lý trạng thái phiếu  và Phải nhập Nội dung hướng xử lí khác khi Hướng xử lí  trạng thái phiếu là Khác"); return;
                }


                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };
    function contruct_146() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1 ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 14,
                    minCols: 14,
                    startCols: 14,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 14,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 14,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Mã shop', 'Mã sản phẩm xuất', 'Tên sản phẩm xuất', 'Imei xuất', 'Số lượng xuất', 'Đơn giá xuất', 'Mã kho xuất',
                        'Mã sản phẩm nhập', 'Tên sản phẩm nhập', 'Imei nhập', 'Số lượng nhập', 'Đơn giá nhập', 'Mã kho nhập', 'Chênh lệch xuất'],
                    columns: [
                        { data: 'ShopCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property7', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Money1', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Property8', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property9', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity1', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Money2', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Property10', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Money3', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },

                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // xuất đổi cấu hình của bảo hành
    function contruct_147() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1 ? true : false;
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }

                $button.click(function () {
                    if (!check) {
                        XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này'); return;
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            actionPaging();
            var setting = function () {
                return {
                    //=================================Data=======
                    data: $.grep(dataHandsontable, function (item, index) {
                        return index < pageSize;
                    }),
                    //================================Cols=======
                    maxCols: 7,
                    minCols: 7,
                    startCols: 7,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 7,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 7,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    //maxRows: dataHandsontable.length,
                    //minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Mã sản phẩm', 'Tên sản phẩm', 'Serial / Imei', 'Kho xuất', 'Số lượng', 'Giải trình', 'Lý do'],
                    columns: [
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Imei', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htRight' },
                        { data: "button", renderer: actionRenderer },
                        { data: 'Property2', readOnly: true, className: 'htLeft', renderer: "html" },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 1, 0, 'not');
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    hot.setDataAtCell(row, 0, 0, 'not');
                                }
                                return true;
                            }
                        }


                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });

            function contructDataFurtureFinish() {
                if (TimeFutureFinish !== null && TimeFutureFinish !== '' && TimeFutureFinish !== undefined) {
                    var dataStr = '';
                    var TimeFutureFinishGlobal = TimeFutureFinish;
                    var TimeGoliveTimeGolive = TimeGolive;
                    if (TimeGoliveTimeGolive == '' || TimeGoliveTimeGolive == undefined || TimeGoliveTimeGolive == null) {
                        TimeGoliveTimeGolive = TimeFutureFinishGlobal;
                    }
                    var timeconvertFutureFinish = new Date(TimeFutureFinishGlobal).toDateInputValue();
                    var TimeGoliveTimeGolive = new Date(TimeGoliveTimeGolive).toDateInputValue();

                    if (permisstion.isSender == true) {
                        dataStr += '<p><table>';
                        dataStr += '<tr>';
                        dataStr += '<td>Ngày dự kiến hoàn thành :</td>';
                        dataStr += '<td><input type="date" class="form-control"  name="TimeFinishData" id="TimeFinishData"  /></td>';
                        dataStr += '<td><button type="button" class="btn btn-success" data-toggle="modal" id="btnUpdateTimeFutureFinish"><i class="fa fa-paper-plane-o"></i></button></td>';
                        dataStr += '</tr>';
                        dataStr += '</table></p>';
                        $('#captionHot1').html(dataStr);
                        $('#TimeFinishData').val(timeconvertFutureFinish);
                        $('#btnUpdateTimeFutureFinish').on('click', function () {
                            var dataUpdateNew = $('#TimeFinishData').val();
                            if (dataUpdateNew === '' || dataUpdateNew === undefined || dataUpdateNew === null || dataUpdateNew < TimeGoliveTimeGolive) {
                                XFunction.RenderMessage('error', 'Ngày cập nhật mới phải lớn hơn hoặc bằng ngày cập nhật lúc tạo callLog : ' + TimeGoliveTimeGolive);
                                return;
                            }
                            $.get('/Requests/UpdateTimeFutureFinish', { Data: dataUpdateNew, RequestId: CL.Id }, function (respone) {
                                if (respone == 1) {
                                    XFunction.RenderMessage('success', 'Cập nhật thành công');
                                } else {
                                    XFunction.RenderMessage('error', 'Cập nhật không thành công vui long xem lai dữ liệu');
                                }
                            });
                        });
                    } else {
                        var currentTime = new Date(TimeFutureFinishGlobal);
                        var month = currentTime.getMonth() + 1;
                        var day = currentTime.getDate();
                        var year = currentTime.getFullYear();
                        var date = day + "/" + month + "/" + year;
                        dataStr += '<p style="width:400px">';
                        dataStr += 'Ngày dự kiến hoàn thành ' + date;
                        dataStr += '</p>';
                        $('#captionHot1').html(dataStr);
                    }
                }

            };
            contructDataFurtureFinish();

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };  //Xuất khác
    function contruct_148() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            actionPaging();
            var setting = function () {
                return {
                    //=================================Data=======
                    data: $.grep(dataHandsontable, function (item, index) {
                        return index < pageSize;
                    }),
                    //================================Cols=======
                    maxCols: 9,
                    minCols: 9,
                    startCols: 9,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 9,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 9,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    //maxRows: dataHandsontable.length,
                    //minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Số phiếu nhập khác', 'Mã sản phẩm', 'Số lượng', 'Giá', 'Kho', 'Người thao tác', 'Ngày bảo hành', 'Số đơn hàng', 'Số đơn hàng mới'],
                    columns: [
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Money1', type: 'numeric', format: '0,0', readOnly: true, className: 'htLeft' },
                        { data: 'Property2', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: "Employee", type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Time1', readOnly: true, className: 'htLeft', type: 'text' },
                        { data: "Property3", type: 'text', readOnly: true, className: 'htLeft' },
                        { data: "Property4", type: 'text', format: '0,0', readOnly: true, className: 'htLeft' },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };
    function contruct_150() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $.get('/Requests/CheckJobTitleByUserCode_150', null, function (data150) {  // LuanNT44-12/09/2019-Loại 150-Thêm cột LuanNT44-19/09/2019-150
                var dataHandsontable = [];
                dataHandsontable = respone;
                var dataSourceErorName = [''];
                var dataSourceEror = [];
                var dataShopFull = [];
                var dataShopName = [];
                var dataEmployName = [], dataEmployFull = [];
                //======== Lấy danh sách nhân viên theo shop
                $.get('/Requests/GetEmployees_GetByWarehouse', { shop: respone[0].ShopCode }, function (respone) {
                    if (respone !== '' && respone !== null && respone !== undefined && respone.length > 0) {
                        dataEmployFull = respone;
                        $.each(respone, function (index, item) {
                            dataEmployName.push(item.EmployeeCode + '--' + item.EmployeeName);
                        });
                    }
                    dataEmployName.push('Khác...');
                });
                //======== Lấy danh sách lỗi
                $.get('/Requests/GetCameraErrorList', function (respone) {
                    if (respone !== '' && respone !== null && respone !== undefined && respone.length > 0) {
                        dataSourceEror = respone;
                        $.each(respone, function (index, item) {
                            dataSourceErorName.push(item.Name);
                        });
                    }
                });
                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                });
                var CheckApprovedSL = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && (CL.StepNo == 1 || (CL.StepNo == 2 && data150[0].Resutl == 1)) && CL.Status != 4 && CL.Status != 5 ? true : false; // LuanNT44-12/09/2019-Loại 150-Thêm cột LuanNT44-19/09/2019-150
                var CheckApproved = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1 && CL.Status != 4 && CL.Status != 5 ? true : false;
                var checkEmployees = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && ((CL.StepNo == 2 || CL.StepNo == 3) && CL.Status != 4 && CL.Status != 5) ? true : false; // LuanNT44-16/10/2019

                var ReadOnlyNote = ((Jobs == '00479' || Jobs == '00540' || Jobs == '00761') && ((CL.StepNo == 2 || CL.StepNo == 3) && CL.Status != 4 && CL.Status != 5)) ? ReadOnlyNote = true : false; // LuanNT44-26/09/2019  --LuanNT44-21/10/2019

                var renderLineTable = function (uri) {
                    var strRe = '';
                    strRe += '<tr>'

                    strRe += '<td>';
                    var stringImage = '';
                    var duoi = uri.split('.')[1].toString().toLowerCase();
                    var tenfile = uri.split('/')[3].toString();
                    if (duoi === '' || duoi === undefined || duoi === null) {
                        duoi = '';
                    } else {
                        if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                            stringImage = '<img src="' + uri + '" height="42" width="42" style="padding:1px;">';
                        } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                            stringImage = '<a href="' + uri + '" download><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>';
                        } else {
                            stringImage = '<img src="' + uri + '" height="42" width="42" style="padding:1px;">';
                        }
                    }
                    strRe += stringImage;
                    strRe += '</td>';

                    strRe += '<td>';
                    strRe += ' <input type="checkbox" class="clDeleteImage" name="chkDeleteImage" value="' + uri + '">';
                    strRe += '</td>';

                    strRe += '</tr>'
                    return strRe;
                }

                var actionRendererUpload_1_Html = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_1_Html') {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var Images_1 = instance.getDataAtRowProp(row, 'Images_1');
                        var $button = ''
                        if (!!valid && !!Images_1) {
                            var images = Images_1.toString().split(',');
                            var stringImage = '';
                            $.each(images, function (index1, item1) {
                                if (!!item1) {
                                    var l__Url = '', l__TenFile = '', l__Duoi = '';

                                    var l__Split__TenFile = item1.split('/');
                                    //  Tên file nằm cuối cùng
                                    if (!!l__Split__TenFile && l__Split__TenFile.length > 0) {
                                        l__TenFile = l__Split__TenFile[l__Split__TenFile.length - 1].toString();
                                    }
                                    else {
                                        l__TenFile = 'NoName'
                                    }
                                    var l__Split__DuoiFile = l__TenFile.split('.');
                                    //  Đuôi file nằm vị trí thứ 2 trong Tên file
                                    if (!!l__Split__DuoiFile && l__Split__DuoiFile.length > 1) {
                                        l__Duoi = l__Split__DuoiFile[l__Split__DuoiFile.length - 1].toString().toLowerCase();
                                    }

                                    if (item1.indexOf('http') == 0) {
                                        l__Url = item1;
                                    }
                                    else {
                                        $.ajax({
                                            async: false,
                                            url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                            type: "GET",
                                            data: { Url: item1 },
                                            success: function (p_ActionResult) {
                                                l__Url = p_ActionResult;
                                            }
                                        });
                                    }

                                    if ($.inArray(l__Duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + l__Url + '"><img width="30" height="30" src="' + l__Url + '"></a> ';
                                    } else if ($.inArray(l__Duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                        stringImage += '<a href="' + l__Url + '" download ><i class="fa fa-file-archive-o"></i> ' + l__TenFile + '</a>  <br>';
                                    } else {
                                        stringImage += '<a href="' + l__Url + '" dowload><i class="fa fa-file-excel-o"></i> ' + l__TenFile + '</a>   <br>';
                                    }
                                }
                            });
                            $button = stringImage;
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'left';
                };
                var actionRendererUpload_1_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                    if (prop == 'button_1_Delete' && CheckApproved == true) {
                        var valid = instance.getDataAtRowProp(row, 'Id');
                        var requestId = instance.getDataAtRowProp(row, 'RequestId');

                        var $button = ''
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        } else {
                            var datavalue_line = requestId + '-' + valid + '-1';
                            $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                            $button.click(function () {
                                var listId = $(this).attr("data-value");
                                var listspt = listId.split('-');
                                var requestId = listspt[0];
                                var requestDetailId = listspt[1];
                                var domain = listspt[2];
                                $('#btnDeleteImages').attr('data-value', listId);
                                $('#modalDeleteImagesBody').html('');
                                $.get('/Requests/GetFileUpload', {
                                    requestId: requestId,
                                    requestDetailId: requestDetailId,
                                    Domain: domain
                                }, function (respone) {
                                    if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                        var stringImage = '';
                                        $.each(respone, function (index1, item1) {
                                            stringImage += renderLineTable(item1.Uri);
                                        });
                                        $('#modalDeleteImagesBody').html(stringImage);
                                        $('#modalDeleteImages').modal('show');
                                    } else {
                                        XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                    }
                                }).error(function () {
                                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                                });

                            });
                        }
                        $(td).empty().append($button);
                    } else {
                        $(td).empty().append('');
                    }
                };
                function strip_tags(input, allowed) {
                    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                        commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                    // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                    allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                    return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                        return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                    });
                }
                function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                    var escaped = Handsontable.helper.stringify(value);
                    escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br>'); //be sure you only allow certain HTML tags to avoid XSS threats (you should also remove unwanted HTML attributes)
                    td.innerHTML = escaped;
                    td.style.textAlign = 'Left';
                    return td;
                }

                //---------------- Check kiểm tra
                var Get = $.grep(dataHandsontable, function (value, number) {
                    return (value.Employees == '' || value.Employees == null || value.Employees == undefined || value.Employees == 'Khác...') && (value.GhiChu != '' || value.GhiChu != null || value.GhiChu != undefined);
                });

                if (Get.length > 0) {
                    $btnComplete.hide();
                }
                else {
                    $btnComplete.show();
                }
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: dataHandsontable,
                        //================================Cols=======
                        maxCols: 23,
                        minCols: 23,
                        startCols: 23,
                        minSpareCols: 0,
                        columnSorting: false,
                        currentColClassName: 'currentCol',
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        currentRowClassName: 'currentRow',
                        manualRowResize: true,
                        //  rowHeaders: true,
                        minSpareRows: 4,
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: false,
                        copyable: true,
                        customBorders: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: false,
                        hiddenColumns: {
                            indicators: true
                        }
                        ,
                        //====================================Oder ==============================================
                        colHeaders: [
                            'Duyệt',
                            'Không duyệt',
                            'Shop',
                            'Số camera',
                            'Số lượng', // LuanNT44-12/09/2019-Loại 150-Thêm cột
                            'Xoá',
                            'Hình đã upload',
                            'Loại',
                            'Mô tả',
                            'Thời hạn xử lý',
                            'Nhân viên vi phạm',
                            'Hãng/Nhà trả góp',
                            'Ghi chú'
                        ],
                        columns: [
                            {
                                data: 'Approved1', type: 'checkbox', className: 'htLeft',
                                readOnly: !CheckApproved,
                                checkedTemplate: 1, uncheckedTemplate: 0, width: 50,
                                renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                    var Id = instance.getDataAtRowProp(row, 'Id');
                                    if (Id !== "" && Id !== undefined && Id !== null) {
                                        cellProperties.readOnly = false;
                                    } else {
                                        cellProperties.readOnly = true;
                                    }
                                    Handsontable.CheckboxRenderer.apply(this, arguments);
                                }
                            },
                            {
                                data: 'Approved2', type: 'checkbox', className: 'htLeft',
                                readOnly: !CheckApproved,
                                checkedTemplate: 1, uncheckedTemplate: 0, width: 100,
                                renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                    var Id = instance.getDataAtRowProp(row, 'Id');
                                    if (Id !== "" && Id !== undefined && Id !== null) {
                                        cellProperties.readOnly = false;
                                    } else {
                                        cellProperties.readOnly = true;
                                    }
                                    Handsontable.CheckboxRenderer.apply(this, arguments);
                                }
                            },
                            { data: "Shops", type: 'text', readOnly: true, className: 'htLeft', width: 350 },
                            { data: "Property4", type: 'text', readOnly: true, className: 'htLeft' },
                            { data: "SL", type: 'numeric', readOnly: !CheckApprovedSL, format: '0,0', validator: Validater.number, allowInvalid: false }, // LuanNT44-12/09/2019-Loại 150-Thêm cột LuanNT44-13/09/2019 LuanNT44-19/09/2019-150
                            { data: "button_1_Delete", renderer: actionRendererUpload_1_Delete, editor: false },
                            { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false, width: 500 },

                            { data: "Name", type: 'text', readOnly: true, className: 'htLeft' },
                            { data: "Property1", type: 'text', readOnly: true, className: 'htLeft' },
                            { data: "ThoiHanXuLy", type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true, allowInvalid: true, readOnly: true, className: 'htLeft' },
                            {
                                data: 'Employees', readOnly: !checkEmployees, type: 'autocomplete', source: dataEmployName, className: 'htLeft', width: 300,
                                renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                    var Id = instance.getDataAtRowProp(row, 'Id');
                                    if ((Id !== "" && Id !== undefined && Id !== null) && checkEmployees == true) { // LuanNT44-16/10/2019  --LuanNT44-17/10/2019-150
                                        cellProperties.readOnly = false;

                                    } else {
                                        cellProperties.readOnly = true;
                                    }
                                    Handsontable.AutocompleteCell.renderer.apply(this, arguments);
                                }
                            },
                            {
                                data: 'HangNhaTraGop', readOnly: true, type: 'text', source: dataEmployName, className: 'htLeft'
                            },
                            { data: "GhiChu", type: 'text', readOnly: !ReadOnlyNote, className: 'htLeft' },
                        ],
                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];
                                if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, 0, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 0, 0, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Employees') {
                                    var instance = this;
                                    var Employees = dataEmployName;
                                    var value = changes[i][3];
                                    if (value == '') {
                                        return false;
                                    } else {
                                        var listArr = [];
                                        listArr = $.grep(Employees, function (values, number) {
                                            return value == values;
                                        });
                                        if (listArr.length == 0) {
                                            return false;
                                        }
                                    }
                                }
                            }


                        },
                        afterChange: function (changes, source) {
                            if (!changes || source == 'not') {
                                return;
                            }
                            var instance = this;
                            changes.forEach(function (change) {
                                var row = change[0];
                                var col = change[1];
                                var newValue = change[3];
                                var cellProperties = {}, options;
                                if (col == 'Employees') {
                                    if (Jobs == '00479' || Jobs == '00540' || Jobs == '00761') { // Add-LuanNT440-20/11/2019-150-ThanhNDB thay đổi chức danh mới (YC 22451)
                                        if (newValue !== null && newValue !== '' && newValue !== undefined) {
                                            var Oject_1 = $.grep(hot.getSourceData(), function (value, number) {
                                                return value.Employees == 'Khác...' && (value.GhiChu == '' || value.GhiChu == null || value.GhiChu == undefined);
                                            });
                                            if (Oject_1.length > 0) {
                                                $btnComplete.hide();
                                            }
                                            else {
                                                $btnComplete.show();
                                            }

                                            //----- Ẩn hiện cột nhà trả góp
                                            let NTG = $.grep(dataEmployFull, function (pig, lion) {
                                                return (pig.EmployeeCode + '--' + pig.EmployeeName) == newValue;
                                            });
                                            if (NTG.length > 0) {
                                                instance.setDataAtRowProp(row, 'HangNhaTraGop', NTG[0].Hang, 'edit');
                                            }
                                            else {
                                                instance.setDataAtRowProp(row, 'HangNhaTraGop', '', 'edit');
                                            }
                                        }
                                        else {
                                            $btnComplete.hide();
                                        }
                                    }
                                    else {
                                        if (newValue !== null && newValue !== '' && newValue !== undefined) {
                                            var Oject = $.grep(hot.getSourceData(), function (value, number) {
                                                return value.Employees == 'Khác...';
                                            });
                                            if (Oject.length > 0) {
                                                $btnComplete.hide();
                                            }
                                            else {
                                                $btnComplete.show();
                                            }
                                            //----- Ẩn hiện cột nhà trả góp
                                            let NTG = $.grep(dataEmployFull, function (pig, lion) {
                                                return (pig.EmployeeCode + '--' + pig.EmployeeName) == newValue;
                                            });
                                            if (NTG.length > 0) {
                                                instance.setDataAtRowProp(row, 'HangNhaTraGop', NTG[0].Hang, 'edit');
                                            }
                                            else {
                                                instance.setDataAtRowProp(row, 'HangNhaTraGop', '', 'edit');
                                            }
                                        }
                                        else {
                                            $btnComplete.hide();
                                        }
                                    }

                                }
                                if (col == 'GhiChu') {
                                    if (Jobs == '00479' || Jobs == '00540' || Jobs == '00761') { // Add-LuanNT440-20/11/2019-150-ThanhNDB thay đổi chức danh mới (YC 22451)
                                        if (newValue == null || newValue == '' || newValue == undefined) {
                                            var Oject = $.grep(hot.getSourceData(), function (value, number) {
                                                return value.Employees == 'Khác...' && (value.GhiChu == '' || value.GhiChu == null || value.GhiChu == undefined);
                                            });
                                            if (Oject.length > 0) {
                                                $btnComplete.hide();
                                            }
                                            else {
                                                $btnComplete.show();
                                            }
                                        }
                                        else {
                                            var Oject_2 = $.grep(hot.getSourceData(), function (value, number) {
                                                return (value.Employees != '' && value.Employees != null && value.Employees != undefined) && (value.GhiChu != '' && value.GhiChu != null && value.GhiChu != undefined);
                                            });
                                            if (Oject_2.length > 0) {
                                                $btnComplete.show();
                                            }
                                            else {
                                                $btnComplete.hide();
                                            }
                                        }

                                    }
                                }
                            });
                        },
                    };
                };
                hot = new Handsontable(container, setting());
                hot.selectCell(0, 0, 0, 0);

                if (CL.StepNo === 2 || CL.StepNo === 3) { // LuanNT44-23/10/2019-150
                    hot.updateSettings({
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if (col == 0) {
                                cellProperties.readOnly = true;
                            };
                            if (col == 1) {
                                cellProperties.readOnly = true;
                            };
                            return cellProperties;
                        }
                    });
                }

                //========= Ẩn cột thời gian xử lý
                var plugin = hot.getPlugin('hiddenColumns');
                if (CL.StepNo == 1) {
                    //plugin.hideColumn(8, 9, 10, 11);
                    plugin.hideColumn(9, 10, 11, 12); // LuanNT44-12/09/2019-Loại 150-Thêm cột
                }
                else {
                    //plugin.showColumn(8, 9, 10, 11);
                    plugin.showColumn(9, 10, 11, 12); // LuanNT44-12/09/2019-Loại 150-Thêm cột
                }
                hot.render();

                //----------------
                $('#btnDeleteImages').on('click', function () {
                    var dataHidd = $(this).attr('data-value');
                    var checklis = [];
                    var countImagesNoDelete = $("input:checkbox[name=chkDeleteImage]");
                    var countImagesDelete = $("input:checkbox[name=chkDeleteImage]:checked");

                    if (countImagesNoDelete.length == countImagesDelete.length) {
                        XFunction.RenderMessage("error", "Không được xóa toàn bộ hình ảnh đã đính kèm"); return;
                    }

                    $("input:checkbox[name=chkDeleteImage]:checked").each(function () {
                        checklis.push($(this).val());
                    });
                    if (dataHidd == '' || dataHidd == null || dataHidd == undefined || checklis.length == 0) {
                        XFunction.RenderMessage("error", "Không lấy được dữ liệu"); return;
                    }
                    var dataspl = dataHidd.split('-');
                    var requestId = dataspl[0];
                    var requestDetailId = dataspl[1];
                    var domain = dataspl[2];
                    var uris = checklis.join(',');
                    $.get('/Requests/DeleteFileUpload', {
                        requestId: requestId,
                        requestDetailId: requestDetailId,
                        Domain: domain,
                        Uris: uris
                    }, function (respone) {
                        if (respone !== '' && respone !== null && respone !== undefined) {
                            $.each(dataHandsontable, function (index, item) {
                                if (item.Id == requestDetailId && item.RequestId == requestId) {
                                    if (domain == '1') {
                                        item.Images_1 = respone[0].Uris;
                                    }
                                }
                            });
                            hot.render();
                            $('#modalDeleteImages').modal('hide');
                            XFunction.RenderMessage("success", "Xóa thành công"); return;
                        } else {
                            $.each(dataHandsontable, function (index, item) {
                                if (item.Id == requestDetailId && item.RequestId == requestId) {
                                    if (domain == '1') {
                                        item.Images_1 = '';
                                    }
                                }
                            });
                            hot.render();
                            $('#modalDeleteImages').modal('hide');
                            XFunction.RenderMessage("success", "Xóa thành công"); return;
                        }
                    }).error(function () {
                        XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                    });
                });
                $btnComment.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () {
                        return this.value;
                    }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $('#Message').val();

                    var dataReturn = [];


                    var dataInvalid = [];
                    var dataInvalidEmp = [];
                    var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu cập nhật chưa hợp lệ"); return;
                    }
                    $.each(myData, function (index, item) {
                        if ((item.Approved1 === null || item.Approved1 === '' || item.Approved1 === null || item.Approved1 === 0)
                            && (item.Approved2 === null || item.Approved2 === '' || item.Approved2 === null || item.Approved2 === 0)) {
                            dataInvalid.push(index + 1);
                        }
                    });
                    if (dataInvalid.length > 0) {
                        XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại dòng : " + dataInvalid.join(','));
                        return;
                    }
                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                    }

                    $.each(myData, function (index, item) {
                        var Khac = '';
                        var Emp = item.Employees;
                        if (Emp == '' || Emp == null || Emp == undefined) {
                            Emp = null;
                        }
                        else if (Emp == 'Khác...') {
                            Emp = 'Khác...';
                        }
                        else {
                            var Employ = $.grep(dataEmployFull, function (element, cout) {
                                return (element.EmployeeCode + '--' + element.EmployeeName) == Emp;
                            });
                            if (Employ.length > 0) {
                                Emp = Employ[0].EmployeeCode;
                            } else {
                                Emp = null;
                            }
                        }
                        dataReturn.push({
                            Id: item.Id,
                            Approved: item.Approved1 == 1 ? true : false,
                            EmpCode: Emp,
                            GhiChu: item.GhiChu,
                            ThoiHanXuLy: item.ThoiHanXuLy == '' || item.ThoiHanXuLy == null || item.ThoiHanXuLy == undefined ? null : item.ThoiHanXuLy,
                            HangNhaTraGop: item.HangNhaTraGop,
                            SoLuong: item.SL == '' || item.SL == null || item.SL == undefined ? 0 : item.SL    // LuanNT44-12/09/2019-Loại 150-Thêm cột
                        });
                    });

                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                });
                $btnReply.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                    }
                    var dataInvalid = [];
                    var dataInvalidEmp = [];
                    var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                    });
                    $.each(myData, function (index, item) {
                        if ((item.Approved1 === null || item.Approved1 === '' || item.Approved1 === null || item.Approved1 === 0)
                            && (item.Approved2 === null || item.Approved2 === '' || item.Approved2 === null || item.Approved2 === 0)) {
                            dataInvalid.push(index + 1);
                        }
                    });
                    if (dataInvalid.length > 0) {
                        XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại dòng : " + dataInvalid.join(','));
                        return;
                    }
                    var dataReturn = [];
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ!"); return;
                    }

                    $.each(myData, function (index, item) {
                        var Emp = item.Employees;
                        if (Emp == '' || Emp == null || Emp == undefined) {
                            Emp = '';
                        }
                        else {
                            var Employ = $.grep(dataEmployFull, function (element, cout) {
                                return (element.EmployeeCode + '--' + element.EmployeeName) == Emp;
                            });
                            if (Employ.length > 0) {
                                Emp = Employ[0].EmployeeCode;
                            } else {
                                Emp = '';
                            }
                        }
                        dataReturn.push({
                            Id: item.Id,
                            Approved: item.Approved1 == 1 ? true : false,
                            EmpCode: Emp,
                            GhiChu: item.GhiChu,
                            ThoiHanXuLy: item.ThoiHanXuLy == '' || item.ThoiHanXuLy == null || item.ThoiHanXuLy == undefined ? null : item.ThoiHanXuLy,
                            HangNhaTraGop: item.HangNhaTraGop
                        });
                    });

                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();

                });
                $btnChangeStep.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var dataInvalid = [];
                    var dataInvalidEmp = [];
                    var dataCheckDuyet = [];
                    var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                    });
                    $.each(myData, function (index, item) {
                        if ((item.Approved1 === null || item.Approved1 === '' || item.Approved1 === null || item.Approved1 === 0)
                            && (item.Approved2 === null || item.Approved2 === '' || item.Approved2 === null || item.Approved2 === 0)) {
                            dataInvalid.push(index + 1);
                        }
                    });
                    if (dataInvalid.length > 0) {
                        XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại dòng : " + dataInvalid.join(','));
                        return;
                    }
                    //====== Kiểm tra toàn bộ là duyệt hay không duyệt
                    $.each(myData, function (index, item) {
                        if (item.Approved1 != '' && item.Approved1 != null && item.Approved1 != undefined && item.Approved1 == 1) {
                            dataCheckDuyet.push(index);
                        }
                    });
                    if (dataCheckDuyet.length == 0) {
                        $('#CheckDuyet').val("1");
                    }
                    else {
                        $('#CheckDuyet').val("0");
                    }
                    var message = $("#Message").val();

                    var dataReturn = [];
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ!"); return;
                    }
                    $.each(myData, function (index, item) {
                        var Emp = item.Employees;
                        if (Emp == '' || Emp == null || Emp == undefined) {
                            Emp = null;
                        }
                        else {
                            var Employ = $.grep(dataEmployFull, function (element, cout) {
                                return (element.EmployeeCode + '--' + element.EmployeeName) == Emp;
                            });
                            if (Employ.length > 0) {
                                Emp = Employ[0].EmployeeCode;
                            } else {
                                Emp = null;
                            }
                        }
                        dataReturn.push({
                            Id: item.Id,
                            Approved: item.Approved1 == 1 ? true : false,
                            EmpCode: Emp,
                            GhiChu: item.GhiChu,
                            ThoiHanXuLy: item.ThoiHanXuLy == '' || item.ThoiHanXuLy == null || item.ThoiHanXuLy == undefined ? null : item.ThoiHanXuLy,
                            HangNhaTraGop: item.HangNhaTraGop,
                            SoLuong: item.SL == '' || item.SL == null || item.SL == undefined ? 0 : item.SL // LuanNT44-12/09/2019-Loại 150-Thêm cột
                        });
                    });

                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();

                });
                $btnComplete.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var dataInvalid = [];
                    var dataInvalidEmp = [], dataGhiChu = [];
                    var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                    });
                    $.each(myData, function (index, item) {
                        if ((item.Approved1 === null || item.Approved1 === '' || item.Approved1 === null || item.Approved1 === 0)
                            && (item.Approved2 === null || item.Approved2 === '' || item.Approved2 === null || item.Approved2 === 0)) {
                            dataInvalid.push(index + 1);
                        }
                    });
                    if (dataInvalid.length > 0) {
                        XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại dòng : " + dataInvalid.join(','));
                        return;
                    }
                    //------ Kiểm tra chọn nhân viên
                    $.each(myData, function (index, item) {
                        if (item.Employees === null || item.Employees === '' || item.Employees === undefined) {
                            dataInvalidEmp.push(index + 1);
                        }
                    });
                    if (dataInvalidEmp.length > 0) {
                        XFunction.RenderMessage("error", "Phải chọn nhân viên vi phạm trước khi hoàn tất! xem lại dòng : " + dataInvalidEmp.join(','));
                        return false;
                    }
                    else {
                        //------ Kiểm tra Nhập ghi chú nếu line đó là nhân viên là [Khác]
                        $.each(myData, function (index, item) {
                            if (item.Employees == 'Khác...' && (item.GhiChu == null || item.GhiChu == '' || item.GhiChu == undefined)) {
                                dataGhiChu.push(index + 1);
                            }
                        });
                        if (dataGhiChu.length > 0) {
                            XFunction.RenderMessage("error", "Phải nhập nội dung ghi chú khi chọn nhân viên vi phạm là Khác..! xem lại dòng : " + dataGhiChu.join(','));
                            return false;
                        }
                        else {
                            //-----
                            var DataEmployeeNot = [];
                            $.each(myData, function (index, item) {
                                var Emp = item.Employees;
                                if (item.Employees == 'Khác...') {
                                    Emp = 'Khác...';
                                }
                                else {
                                    var Employ = $.grep(dataEmployFull, function (element, cout) {
                                        return (element.EmployeeCode + '--' + element.EmployeeName) == Emp;
                                    });
                                    if (Employ.length == 0) {
                                        DataEmployeeNot.push(index + 1);
                                    }
                                }

                            });
                            if (DataEmployeeNot.length > 0) {
                                XFunction.RenderMessage("error", "Nhân viên không hợp lệ! xem lại dòng : " + DataEmployeeNot.join(','));
                                return false;
                            }
                            else {
                                var message = $("#Message").val();
                                var dataReturn = [];

                                if (myData.length == 0) {
                                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;;
                                }
                                else {
                                    $.each(myData, function (index, item) {
                                        var Emp = item.Employees;
                                        if (Emp == '' || Emp == null || Emp == undefined) {
                                            XFunction.RenderMessage("error", "Vui lòng chọn nhân viên vi phạm!"); return false;
                                        }
                                        else if (Emp == 'Khác...') {
                                            Emp = 'Khác...';
                                        }
                                        else {
                                            var Employ = $.grep(dataEmployFull, function (element, cout) {
                                                return (element.EmployeeCode + '--' + element.EmployeeName) == Emp;
                                            });
                                            if (Employ.length > 0) {
                                                Emp = Employ[0].EmployeeCode;
                                            } else {
                                                XFunction.RenderMessage("error", "Nhân viên vi phạm không hợp lệ!"); return false;
                                            }
                                        }
                                        dataReturn.push({
                                            Id: item.Id,
                                            Approved: item.Approved1 == 1 ? true : false,
                                            EmpCode: Emp,
                                            GhiChu: item.GhiChu,
                                            ThoiHanXuLy: item.ThoiHanXuLy == '' || item.ThoiHanXuLy == null || item.ThoiHanXuLy == undefined ? null : item.ThoiHanXuLy,
                                            HangNhaTraGop: item.HangNhaTraGop,
                                            SoLuong: item.SL == '' || item.SL == null || item.SL == undefined ? 0 : item.SL // LuanNT44-12/09/2019-Loại 150-Thêm cột  // LuanNT44-26/09/2019-150
                                        });
                                    });
                                    $('#Details').val(JSON.stringify(dataReturn));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/Complete");
                                    form.submit();
                                }
                            }
                        }
                    }
                });
            }); // LuanNT44-12/09/2019-Loại 150-Thêm cột LuanNT44-19/09/2019-150
        });
    }; // Camera
    function contruct_152() {
        $('#sum-money').hide();
        //var dataProduct_HcCreate, dataDept_HcCreate, dataLimitedHcCreate;
        //$.get('/Requests/GetDevices', { type: 23 }, function (data) {
        //    dataProduct_HcCreate = data;
        //});

        //$.get('/Requests/GetShopByRegion', { regionId: 0 }, function (data) {
        //    dataDept_HcCreate = data;
        //});

        //$.get('/Requests/GetLimitedValue', { type: 23 }, function (data) {
        //    dataLimitedHcCreate = data;
        //});

        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            dataHc = data;
            var checkSender = false, checkAssiner;
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    checkSender = true;
                if (item == 'assigner' || item == 'groupAssigner')
                    checkAssiner = true;
            });
            var checkEditSoLuongConfim = false;
            var checkEditSoLuongDat = false;
            if (checkAssiner == true && CL.StepNo == 1 && status != 5 && status != 4) {
                checkEditSoLuongConfim = true;
            }
            if (checkAssiner == true && CL.StepNo == 4 && status != 5 && status != 4) {
                checkEditSoLuongDat = true;
            }
            var setting = function () {
                return {
                    data: dataHc,
                    colHeaders: true,
                    rowHeaders: true,
                    stretchH: 'all',
                    //  startCols: 9,
                    //  maxCols: 13,
                    //   minCols: 13,
                    fillHandle: false,
                    allowInvalid: false,
                    currentRowClassName: 'currentRow',
                    fixedColumnsLeft: 1,
                    manualColumnResize: true,
                    manualRowResize: true,
                    outsideClickDeselects: true,
                    minSpareRows: 0,
                    maxRows: dataHc.length + 1,
                    minRows: dataHc.length + 1,
                    hiddenColumns: {
                        //   columns: [8],
                        indicators: true
                    },
                    colHeaders: ["Tên mặt hàng", "Nhóm hàng", "Số lượng tồn kho", "SL áo size S", 'SL áo size M', "SL áo size L", "SL áo size XL", "SL áo size XXL", "Số lượng đặt", "Số lượng đặt confirm",
                        "Đơn giá", "Đơn vị tính", "Thành tiền", "Ghi chú", "Số giao dịch", "Số lượng xuất hóa đơn", "Số hóa đơn"],
                    columns: [
                        { data: "ItemName", readOnly: true, className: 'htLeft', width: 400, type: 'text' },
                        { data: 'GroupId', type: 'text', readOnly: true },
                        { data: 'Quantity3', type: 'numeric', format: '0,0', readOnly: true },
                        { data: 'Property1', type: 'numeric', format: '0,0', readOnly: !checkEditSoLuongConfim, validator: Validater.number, allowInvalid: false },
                        { data: 'Property2', type: 'numeric', format: '0,0', readOnly: !checkEditSoLuongConfim, validator: Validater.number, allowInvalid: false },
                        { data: 'Property3', type: 'numeric', format: '0,0', readOnly: !checkEditSoLuongConfim, validator: Validater.number, allowInvalid: false },
                        { data: 'Property4', type: 'numeric', format: '0,0', readOnly: !checkEditSoLuongConfim, validator: Validater.number, allowInvalid: false },
                        { data: 'Property5', type: 'numeric', format: '0,0', readOnly: !checkEditSoLuongConfim, validator: Validater.number, allowInvalid: false },
                        { data: 'Quantity', type: 'numeric', format: '0,0', readOnly: true },
                        { data: 'Quantity1', type: 'numeric', format: '0,0', readOnly: true },
                        { data: 'Price', type: 'numeric', format: '0,0', readOnly: true },
                        {
                            data: 'Unit', type: 'text', readOnly: true, readOnly: true,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 11 && row === dataHc.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Sum', type: 'numeric', readOnly: true, format: '0,0',
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 12 && row === dataHc.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataHc, function (index, item) {
                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        { data: 'Note', type: 'text', readOnly: true },
                        { data: 'Property10', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity2', readOnly: true, className: 'htLeft' },
                        { data: 'Property9', readOnly: true, className: 'htLeft' }
                    ],

                    cells: function (row, col, prop) {
                        var cellProperties = {};

                        if (col > 0 && dataHc[0].StepNo == 3) {
                            cellProperties.readOnly = true;
                        }

                        return cellProperties;
                    },

                    afterChange: function (changes, source) {
                        if (!changes)
                            return;
                        changes.forEach(function (change) {
                            var row = change[0], colunm = change[1], newVal = change[3];
                            if (colunm == 'Property1' || colunm == 'Property2' || colunm == 'Property3' || colunm == 'Property4' || colunm == 'Property5') {
                                var a_S = Number(hot.getDataAtCell(row, 3)),
                                    a_M = Number(hot.getDataAtCell(row, 4)),
                                    a_L = Number(hot.getDataAtCell(row, 5)),
                                    a_XL = Number(hot.getDataAtCell(row, 6)),
                                    a_XXL = Number(hot.getDataAtCell(row, 7)),
                                    price = Number(hot.getDataAtCell(row, 10)),
                                    sum_price, sum_Quantity;
                                sum_price = (a_S + a_M + a_L + a_XL + a_XXL) * price;
                                sum_Quantity = a_S + a_M + a_L + a_XL + a_XXL;
                                hot.setDataAtCell(row, 12, sum_price, 'not');
                                hot.setDataAtCell(row, 9, sum_Quantity, 'not');
                            };
                        });
                    },
                };
            };

            var setting_step04 = function () {
                return {
                    data: dataHc,
                    colHeaders: true,
                    rowHeaders: true,
                    stretchH: 'all',
                    // startCols: 9,
                    // maxCols: 14,
                    // minCols: 14,
                    fillHandle: false,
                    allowInvalid: false,
                    currentRowClassName: 'currentRow',
                    fixedColumnsLeft: 1,
                    manualColumnResize: true,
                    manualRowResize: true,
                    outsideClickDeselects: true,
                    minSpareRows: 0,
                    maxRows: dataHc.length + 1,
                    minRows: dataHc.length + 1,
                    hiddenColumns: {
                        //   columns: [8],
                        indicators: true
                    },
                    colHeaders: ["Tên mặt hàng", "Nhóm hàng", "Số lượng tồn kho", "SL áo size S", 'SL áo size M', "SL áo size L", "SL áo size XL", "SL áo size XXL", "Số lượng đặt", "Số lượng đặt confirm",
                        "Số lượng Shop xác nhận", "Đơn giá", "Đơn vị tính", "Thành tiền", "Ghi chú", "Số giao dịch", "Số lượng xuất hóa đơn", "Số hóa đơn"],
                    columns: [
                        { data: "ItemName", readOnly: true, className: 'htLeft', width: 400, type: 'text' },
                        { data: 'GroupId', type: 'text', readOnly: true },
                        { data: 'Quantity3', type: 'numeric', format: '0,0', readOnly: true },
                        { data: 'Property1', type: 'numeric', format: '0,0', readOnly: true, validator: Validater.number, allowInvalid: false },
                        { data: 'Property2', type: 'numeric', format: '0,0', readOnly: true, validator: Validater.number, allowInvalid: false },
                        { data: 'Property3', type: 'numeric', format: '0,0', readOnly: true, validator: Validater.number, allowInvalid: false },
                        { data: 'Property4', type: 'numeric', format: '0,0', readOnly: true, validator: Validater.number, allowInvalid: false },
                        { data: 'Property5', type: 'numeric', format: '0,0', readOnly: true, validator: Validater.number, allowInvalid: false },
                        { data: 'Quantity', type: 'numeric', format: '0,0', readOnly: true, validator: Validater.number, allowInvalid: false },
                        { data: 'Quantity1', type: 'numeric', format: '0,0', readOnly: true, validator: Validater.number, allowInvalid: false },
                        { data: 'QuantityAvaiable', type: 'numeric', format: '0,0', readOnly: !checkEditSoLuongDat, validator: Validater.number, allowInvalid: false },
                        { data: 'Price', type: 'numeric', format: '0,0', readOnly: true },
                        {
                            data: 'Unit', type: 'text', readOnly: true, readOnly: true,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 12 && row === dataHc.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Sum', type: 'numeric', readOnly: true, format: '0,0',
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 13 && row === dataHc.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataHc, function (index, item) {
                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        { data: 'Note', type: 'text', readOnly: true },
                        { data: 'Property10', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity2', readOnly: true, className: 'htLeft' },
                        { data: 'Property9', readOnly: true, className: 'htLeft' }
                    ],
                };
            };

            //==== Load lưới theo bước
            var hot = new Handsontable(container, dataHc[0].StepNo == 4 ? setting_step04() : setting());
            //dataHc[0].StepNo == 4 ? console.log('được') : console.log('không được');
            //if (dataHc[0].StepNo == 4)
            //    var hot = new Handsontable(container, setting_step04());
            //else
            //    var hot = new Handsontable(container, setting());
            var plugin = hot.getPlugin('hiddenColumns');

            if (dataHc[0].StepNo < 3) {
                plugin.hideColumn(14);
                plugin.hideColumn(15);
                plugin.hideColumn(16);
            }
            else {
                plugin.showColumn(14);
                plugin.showColumn(15);
                plugin.showColumn(16);
            }
            hot.render();
            $("#comment").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {

                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }
                }
            });

            $("#complete").click(function () {

                //var myData = hot.getData(0, 0, hot.getData().length, 12), datas = [], dataCheckLimitedHcCreate = [];
                //$.each(myData, function (index, item) {
                //    if (item[0] != null && item[0] != undefined && item[0] != "") {
                //        var timkiemthietbi = $.grep(dataProduct_HcCreate, function (element, index) {
                //            return element.ItemName === item[0] &&
                //                (item[2] > 0 || item[3] > 0 || item[4] > 0 || item[5] > 0 || item[6] > 0);
                //        });
                //        var timkiemShop = $.grep(dataDept_HcCreate, function (element, index) {
                //            return (element.WarehouseCode + '--' + element.WarehouseCodeB1 + '--' + element.WarehouseName) === item[0];
                //        });
                //        if (timkiemthietbi != null && timkiemthietbi != undefined && timkiemthietbi.length > 0
                //            && timkiemShop != null && timkiemShop != undefined && timkiemShop.length > 0) {
                //            var myData_new = {
                //                'ShopCode': timkiemShop[0].WarehouseCode.split("--")[0],
                //                'ItemId': timkiemthietbi[0].ItemId,
                //                'ItemName': timkiemthietbi[0].ItemName,
                //                'GroupId': timkiemthietbi[0].GroupId,
                //                'GroupName': timkiemthietbi[0].ItemName,
                //                'Quantity_S': item[5],
                //                'Quantity_M': item[6],
                //                'Quantity_L': item[7],
                //                'Quantity_XL': item[8],
                //                'Quantity_XXL': item[9],
                //                'Price': timkiemthietbi[0].Price,
                //                'Sum': item[10],
                //                'Unit': timkiemthietbi[0].Unit,
                //                'Note': item[11],
                //            };
                //            datas.push(myData_new);
                //        }
                //    }
                //});

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                }

            });

            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                }

            });
        });
    };
    function contruct_42() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataTable1_All = [], dataTable2_All = [], dataTable1Name = [], dataTable2Name = [];
            $.get('/Requests/Get_AssessmentType', { Group: '' }, function (respone1) {
                dataTable1_All = $.grep(respone1, function (item, index) {
                    return item.Group === 'AssessmentType';
                });
                dataTable2_All = $.grep(respone1, function (item, index) {
                    return item.Group === 'TVAssessmentType';
                });

                $.each(dataTable1_All, function (index, item) {
                    dataTable1Name.push(item.Name);
                });
                $.each(dataTable2_All, function (index, item) {
                    dataTable2Name.push(item.Name);
                });

                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                });

                if (permisstion.isSender == true || permisstion.isAssiner == true || permisstion.isGroupAssiner == true) {
                    $('#txtSecurity-Company').prop('readonly', false);
                    $('#txthousekeeper').prop('readonly', false);
                    $('#txtsecuriter').prop('readonly', false);
                }
                var now = new Date();
                var monthNow = now.getMonth() + 1;
                var yearNow = now.getFullYear();
                $('#sum-total1').show();

                var container1 = $$('handsontableEx'), hot1,
                    container2 = $$('handsontableEx2'), hot2,
                    container3 = $$('handsontableEx3'), hot3,
                    container4 = $$('handsontableEx4'), hot4;
                var dataTable1 = [], dataTable2 = [], dataTable3 = [], dataTable4 = [], dataDateWoking = [], dataDateWoking1 = [];

                dataDefault = function () {
                    dataTrangThaiDuyet = [{ Code: '1', Name: 'Đánh giá Tạp vụ khoán gọn hoặc shop tự vệ sinh' }, { Code: '2', Name: 'Đánh giá bảo vệ (sử dụng cho bảo vệ dịch vụ)' }];
                }; dataDefault();

                function getStatus() {
                    $('#status').multiselect({
                        includeSelectAllOption: true,
                        buttonWidth: '100%',
                        allSelectedText: 'Chọn tất cả',
                        selectAllText: 'Chọn tất cả',
                        maxHeight: 100
                    });
                    var data = [];
                    $.each(dataTrangThaiDuyet, function (index, item) {
                        data.push({
                            label: item.Name,
                            value: item.Code
                        });
                    });
                    $('#status').multiselect('dataprovider', data);
                }
                getStatus();
                hiddenForm = function () {
                    $('#sum-total').hide();
                    $('#sum-total1').show();
                    $('#sum-total2').show();
                    $('#form-BaoVe').hide();
                    $('#captionHot3').hide();
                    $('#captionHot4').hide();
                    $('#handsontableEx3').hide();
                    $('#handsontableEx4').hide();
                    $('#Security-Company').hide();
                }; hiddenForm();

                function nam_nhuan(year) {
                    if (year % 100 == 0) {
                        if (year % 400 == 0) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    }
                    else if (year % 4 == 0) {
                        return 1;
                    }
                    else {
                        return 0;
                    }
                }

                $('#status').change(function () {
                    if ($('#status').val() == 1) {
                        $('#form-TapVu').show();
                        $('#form-BaoVe').hide();
                        $('#Security-Company').hide();
                        $('#captionHot1').show();
                        $('#captionHot2').show();
                        $('#handsontableEx').show();
                        $('#handsontableEx2').show();
                        $('#captionHot3').hide();
                        $('#captionHot4').hide();
                        $('#handsontableEx3').hide();
                        $('#handsontableEx4').hide();
                    }
                    if ($('#status').val() == 2) {
                        $('#form-TapVu').hide();
                        $('#form-BaoVe').show();
                        $('#Security-Company').show();
                        $('#captionHot1').hide();
                        $('#captionHot2').hide();
                        $('#handsontableEx').hide();
                        $('#handsontableEx2').hide();
                        $('#captionHot3').show();
                        $('#captionHot4').show();
                        $('#handsontableEx3').show();
                        hot3.render();
                        $('#handsontableEx4').show();
                        hot4.render();
                    }
                });

                dataTable1 = $.grep(respone, function (item, index) {
                    return item.Quantity == 1 && item.Quantity1 == 1;
                });
                dataTable2 = $.grep(respone, function (item, index) {
                    return item.Quantity == 1 && item.Quantity1 == 2;
                });
                dataTable3 = $.grep(respone, function (item, index) {
                    return item.Quantity == 2 && item.Quantity1 == 1;
                });
                dataTable4 = $.grep(respone, function (item, index) {
                    return item.Quantity == 2 && item.Quantity1 == 2;
                });
                if (dataTable1.length > 0) {
                    if (dataTable1[0].Quantity == 1 && dataTable1[0].Quantity1 == 1) {
                        $('#txthousekeeper').val(dataTable1[0].Property2);
                    }
                }
                if (dataTable3.length > 0) {
                    if (dataTable3[0].Quantity == 2 && dataTable3[0].Quantity1 == 1) {
                        $('#txtevaluator').val(dataTable3[0].Evaluator);
                        $('#txtaddress').val(dataTable3[0].ShopAddress);
                        $('#txtSecurity-Company').val(dataTable3[0].Property1);
                        $('#txtsecuriter').val(dataTable3[0].Property3);
                    }
                }

                var Column = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                    , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                    , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                    , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                    , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                    , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];

                if (dataTable1.length > 0) {
                    $.each(dataTable1, function (count, element) {
                        var dataFilter = element.Property4.split(',');
                        dataDateWoking.push({
                            Name: dataTable1[0].Property9, CheckAll: null,
                            Ngay1: dataFilter[0], Ngay2: dataFilter[1], Ngay3: dataFilter[2], Ngay4: dataFilter[3], Ngay5: dataFilter[4]
                            , Ngay6: dataFilter[5], Ngay7: dataFilter[6], Ngay8: dataFilter[7], Ngay9: dataFilter[8], Ngay10: dataFilter[9]
                            , Ngay11: dataFilter[10], Ngay12: dataFilter[11], Ngay13: dataFilter[12], Ngay14: dataFilter[13], Ngay15: dataFilter[14]
                            , Ngay16: dataFilter[15], Ngay17: dataFilter[16], Ngay18: dataFilter[17], Ngay19: dataFilter[18], Ngay20: dataFilter[19]
                            , Ngay21: dataFilter[20], Ngay22: dataFilter[21], Ngay23: dataFilter[22], Ngay24: dataFilter[23], Ngay25: dataFilter[24]
                            , Ngay26: dataFilter[25], Ngay27: dataFilter[26], Ngay28: dataFilter[27], Ngay29: dataFilter[28], Ngay30: dataFilter[29], Ngay31: dataFilter[30]
                        });
                        var dataFilter1 = element.Property5.split(',');
                        dataDateWoking.push({
                            Name: "Quản lý xác nhận", CheckAll: null,
                            Ngay1: dataFilter1[0], Ngay2: dataFilter1[1], Ngay3: dataFilter1[2], Ngay4: dataFilter1[3], Ngay5: dataFilter1[4]
                            , Ngay6: dataFilter1[5], Ngay7: dataFilter1[6], Ngay8: dataFilter1[7], Ngay9: dataFilter1[8], Ngay10: dataFilter1[9]
                            , Ngay11: dataFilter1[10], Ngay12: dataFilter1[11], Ngay13: dataFilter1[12], Ngay14: dataFilter1[13], Ngay15: dataFilter1[14]
                            , Ngay16: dataFilter1[15], Ngay17: dataFilter1[16], Ngay18: dataFilter1[17], Ngay19: dataFilter1[18], Ngay20: dataFilter1[19]
                            , Ngay21: dataFilter1[20], Ngay22: dataFilter1[21], Ngay23: dataFilter1[22], Ngay24: dataFilter1[23], Ngay25: dataFilter1[24]
                            , Ngay26: dataFilter1[25], Ngay27: dataFilter1[26], Ngay28: dataFilter1[27], Ngay29: dataFilter1[28], Ngay30: dataFilter1[29], Ngay31: dataFilter1[30]
                        });
                    });
                    var dateFix = dataTable1[0].Property9.split('/')[0].toString() + '/01/' + dataTable1[0].Property9.split('/')[1].toString();
                    var dateChange = new Date(dateFix);
                    var monthChange = dateChange.getMonth() + 1;
                    var yearChange = dateChange.getFullYear();
                    var dateChange = dateChange.getDate();

                    var setting1 = function () {
                        return {
                            data: dataDateWoking,
                            //================================Colunms=======
                            maxCols: 32,
                            minCols: 32,
                            colWidths: 'undefined',
                            currentColClassName: 'currentCol', //currentCol
                            //================================Rows=======
                            currentRowClassName: 'currentRow',
                            rowHeaders: true,
                            //startRows: 4,
                            //viewportRowRenderingOffset : 'auto',
                            //================================Oder=======
                            stretchH: 'all',
                            undo: true,
                            minRows: 3,
                            maxRows: 3,
                            mergeCells: [{ row: 2, col: 1, rowspan: 1, colspan: 32 },],
                            colHeaders:
                                ['Ngày/Tháng', 'Chọn tất cả', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
                                    '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
                                    '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'],
                            columns: [
                                {
                                    data: 'Name', readOnly: true, width: 200,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        var $textDefault = '';
                                        if (row == 2) {
                                            value = 'Tổng ngày công:';
                                            td.style.verticalAlign = 'middle';
                                            td.style.fontWeight = 'bold';
                                            td.style.color = 'green';
                                        }
                                        Handsontable.TextRenderer.apply(this, arguments);
                                    }
                                },
                                {
                                    data: 'CheckAll', type: 'checkbox', width: 80, checkedTemplate: 1, uncheckedTemplate: 0,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (row === 2) {
                                            td.style.fontWeight = 'bold';
                                            td.style.color = 'green';
                                            td.style.textAlign = 'left';

                                            var Column = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                                                , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                                                , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                                                , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                                                , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                                                , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];
                                            var DataTab1 = [];
                                            var ii = '';
                                            var sum = 0;

                                            $.each(dataDateWoking, function (index, item) {
                                                $.each(Column, function (count, element) {
                                                    if (item[element] == 1 && index == 1 && element != "CheckAll") {
                                                        DataTab1.push({ vitricot: count, ngay: element });
                                                    }
                                                });
                                            });
                                            if (DataTab1.length > 0) {
                                                sum = DataTab1.length;
                                            }
                                            value = sum;
                                            Handsontable.NumericRenderer.apply(this, arguments);
                                        } else {
                                            Handsontable.CheckboxRenderer.apply(this, arguments);
                                        }
                                    }
                                },
                                { data: 'Ngay1', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay2', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay3', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay4', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay5', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay6', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay7', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay8', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay9', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay10', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay11', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay12', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay13', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay14', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay15', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay16', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay17', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay18', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay19', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay20', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay21', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay22', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay23', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay24', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay25', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay26', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay27', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay28', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay29', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay30', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay31', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                            ],//Tạo view bảng

                            afterChange: function (changes, source) {
                                if (!changes || source == 'not') {
                                    return;
                                }
                                var instance = this;
                                changes.forEach(function (change) {
                                    var row = change[0], col = change[1], newValue = change[3];
                                    if (col === 'CheckAll') {
                                        var checkNgay = instance.getDataAtCell(0, 0);
                                        var dateFix1 = checkNgay.split('/')[0].toString() + '/01/' + checkNgay.split('/')[1].toString();
                                        var dateChange1 = new Date(dateFix1);
                                        var monthChange1 = dateChange1.getMonth() + 1;
                                        var yearChange1 = dateChange1.getFullYear();
                                        var dateChange1 = dateChange1.getDate();
                                        var checkNhuanAfter1 = nam_nhuan(yearChange1);
                                        if (newValue === 1) {
                                            instance.setDataAtRowProp(row, 'Ngay1', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay2', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay3', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay4', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay5', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay6', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay7', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay8', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay9', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay10', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay11', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay12', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay13', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay14', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay15', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay16', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay17', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay18', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay19', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay20', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay21', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay22', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay23', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay24', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay25', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay26', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay27', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay28', 1, 'edit');
                                            if (monthChange1 === 2 && checkNhuanAfter === 1) {
                                                instance.setDataAtRowProp(row, 'Ngay29', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay30', 0, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay31', 0, 'edit');
                                            } else if (monthChange1 === 2 && checkNhuanAfter === 0) {
                                                instance.setDataAtRowProp(row, 'Ngay29', 0, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay30', 0, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay31', 0, 'edit');
                                            } else if (monthChange1 === 4 || monthChange1 === 6 || monthChange1 === 9 || monthChange1 === 11) {
                                                instance.setDataAtRowProp(row, 'Ngay29', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay30', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay31', 0, 'edit');
                                            } else {
                                                instance.setDataAtRowProp(row, 'Ngay29', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay30', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay31', 1, 'edit');
                                            };
                                        }
                                        else {
                                            instance.setDataAtRowProp(row, 'Ngay1', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay2', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay3', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay4', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay5', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay6', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay7', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay8', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay9', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay10', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay11', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay12', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay13', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay14', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay15', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay16', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay17', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay18', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay19', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay20', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay21', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay22', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay23', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay24', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay25', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay26', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay27', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay28', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay29', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay30', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay31', 0, 'edit');
                                        }
                                    }
                                });
                            },
                            cells: function (row, col, prop) {
                                var cellProperties = {};
                                if (row > 0 && col == 0) {
                                    cellProperties.readOnly = true;
                                }
                                var checkNhuan = nam_nhuan(yearChange);
                                if (checkNhuan == 1) {
                                    if (monthChange === 2 && (col === 31 || col === 32)) {
                                        cellProperties.readOnly = true;
                                    }
                                }
                                else if (checkNhuan == 0) {
                                    if (monthChange === 2 && (col === 30 || col === 31 || col === 32)) {
                                        cellProperties.readOnly = true;
                                    }
                                }
                                else if ((monthChange === 4 || monthChange === 6 || monthChange === 9 || monthChange === 11) && col === 32) {
                                    cellProperties.readOnly = true;
                                }
                                return cellProperties;
                            }
                        }
                    };
                    hot1 = new Handsontable(container1, setting1());
                }

                var setting2 = function () {
                    return {
                        data: dataTable2,
                        //================================Colunms=======
                        maxCols: 7,
                        minCols: 6,
                        columnSorting: false,
                        colWidths: 'undefined',
                        currentColClassName: 'currentCol', //currentCol
                        //================================Rows=======
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: false,
                        customBorders: false,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        undo: true,
                        formulas: true,
                        wordWrap: true,
                        minRows: 32,
                        maxRows: 32,
                        colHeaders: ['Nội dung công việc', 'Tốt', 'Khá', 'Hoàn thành', 'Trung bình', 'Không hoàn thành', 'Ghi chú'],
                        columns: [
                            {
                                data: 'Name', readOnly: true, width: 275,
                                renderer: function (instance, td, row, col, prop, value) {
                                    var $textDefault = '';
                                    $.each(dataTable1Name, function (index, item) {
                                        if (row == index) {
                                            $textDefault = item;
                                        };
                                    });
                                    if (row === 0) {
                                        td.style.fontWeight = 'bold';
                                        td.style.color = 'green';
                                        td.style.backgroundColor = '#DDDDDD'
                                    }
                                    if (row === 5) {
                                        td.style.fontWeight = 'bold';
                                        td.style.color = 'green';
                                        td.style.backgroundColor = '#DDDDDD'
                                    }
                                    if (row === 19) {
                                        td.style.fontWeight = 'bold';
                                        td.style.color = 'green';
                                        td.style.backgroundColor = '#DDDDDD'
                                    }
                                    if (row === 25) {
                                        td.style.fontWeight = 'bold';
                                        td.style.color = 'green';
                                        td.style.backgroundColor = '#DDDDDD'
                                    }
                                    td.style.textAlign = 'left';
                                    $(td).empty().append($textDefault);
                                }
                            },
                            {
                                data: 'Property1', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, width: 100//,
                                //renderer: function (instance, td, row, col, prop, value) {
                                //    if (row === 0 || row === 5 || row === 19 || row === 25) {
                                //        Handsontable.TextRenderer.apply(this, arguments);
                                //    }
                                //    else {
                                //        Handsontable.CheckboxRenderer.apply(this, arguments);
                                //    }
                                //}
                            },
                            {
                                data: 'Property2', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, width: 100//,
                                //renderer: function (instance, td, row, col, prop, value) {
                                //    if (row === 0 || row === 5 || row === 19 || row === 25) {
                                //        Handsontable.TextRenderer.apply(this, arguments);
                                //    }
                                //    else {
                                //        Handsontable.CheckboxRenderer.apply(this, arguments);
                                //    }
                                //}
                            },
                            {
                                data: 'Property3', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, width: 100//,
                                //renderer: function (instance, td, row, col, prop, value) {
                                //    if (row === 0 || row === 5 || row === 19 || row === 25) {
                                //        Handsontable.TextRenderer.apply(this, arguments);
                                //    }
                                //    else {
                                //        Handsontable.CheckboxRenderer.apply(this, arguments);
                                //    }
                                //}
                            },
                            {
                                data: 'Property4', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, width: 100//,
                                //renderer: function (instance, td, row, col, prop, value) {
                                //    if (row === 0 || row === 5 || row === 19 || row === 25) {
                                //        Handsontable.TextRenderer.apply(this, arguments);
                                //    }
                                //    else {
                                //        Handsontable.CheckboxRenderer.apply(this, arguments);
                                //    }
                                //}
                            },
                            {
                                data: 'Property5', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, width: 150//,
                                //renderer: function (instance, td, row, col, prop, value) {
                                //    if (row === 0 || row === 5 || row === 19 || row === 25) {
                                //        Handsontable.TextRenderer.apply(this, arguments);
                                //    }
                                //    else {
                                //        Handsontable.CheckboxRenderer.apply(this, arguments);
                                //    }
                                //}
                            },
                            { data: 'Note', width: 30, type: 'text', width: 250 },
                        ],//Tạo view bảng

                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];
                                if (col === 'Property1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot2.setDataAtCell(row, 2, null, 'not');
                                        hot2.setDataAtCell(row, 3, null, 'not');
                                        hot2.setDataAtCell(row, 4, null, 'not');
                                        hot2.setDataAtCell(row, 5, null, 'not');
                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 1, 1, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(5, 1, 5, 1);
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 1, 1, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(19, 1, 19, 1);
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 1, 1, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(25, 1, 25, 1);
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 1, 1, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                        }
                                    }
                                    else if (value == false) {
                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 1, 0, 'not');
                                            }
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 1, 0, 'not');
                                            }
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 1, 0, 'not');
                                            }
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 1, 0, 'not');
                                            }
                                        }
                                    }
                                    return true;
                                }
                                if (col === 'Property2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot2.setDataAtCell(row, 1, null, 'not');
                                        hot2.setDataAtCell(row, 3, null, 'not');
                                        hot2.setDataAtCell(row, 4, null, 'not');
                                        hot2.setDataAtCell(row, 5, null, 'not');

                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, 1, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(5, 2, 5, 2);
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, 1, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(19, 2, 19, 2);
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, 1, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(25, 2, 25, 2);
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, 1, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                        }
                                    }
                                    else if (value == false) {
                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 2, 0, 'not');
                                            }
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 2, 0, 'not');
                                            }
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 2, 0, 'not');
                                            }
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 2, 0, 'not');
                                            }
                                        }
                                    }
                                    return true;
                                }
                                if (col === 'Property3') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot2.setDataAtCell(row, 1, null, 'not');
                                        hot2.setDataAtCell(row, 2, null, 'not');
                                        hot2.setDataAtCell(row, 4, null, 'not');
                                        hot2.setDataAtCell(row, 5, null, 'not');

                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, 1, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(5, 3, 5, 3);
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, 1, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(19, 3, 19, 3);
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, 1, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(25, 3, 25, 3);
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, 1, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                        }
                                    }
                                    else if (value == false) {
                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 3, 0, 'not');
                                            }
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 3, 0, 'not');
                                            }
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 3, 0, 'not');
                                            }
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 3, 0, 'not');
                                            }
                                        }
                                    }
                                    return true;
                                }
                                if (col === 'Property4') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot2.setDataAtCell(row, 1, null, 'not');
                                        hot2.setDataAtCell(row, 2, null, 'not');
                                        hot2.setDataAtCell(row, 3, null, 'not');
                                        hot2.setDataAtCell(row, 5, null, 'not');

                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, 1, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(5, 4, 5, 4);
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, 1, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(19, 4, 19, 4);
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, 1, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                            hot2.selectCell(25, 4, 25, 4);
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, 1, 'not');
                                                hot2.setDataAtCell(i, 5, null, 'not');
                                            }
                                        }
                                    }
                                    else if (value == false) {
                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 4, 0, 'not');
                                            }
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 4, 0, 'not');
                                            }
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 4, 0, 'not');
                                            }
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 4, 0, 'not');
                                            }
                                        }
                                    }
                                    return true;
                                }
                                if (col === 'Property5') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot2.setDataAtCell(row, 1, null, 'not');
                                        hot2.setDataAtCell(row, 2, null, 'not');
                                        hot2.setDataAtCell(row, 3, null, 'not');
                                        hot2.setDataAtCell(row, 4, null, 'not');

                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, 1, 'not');
                                            }
                                            hot2.selectCell(5, 5, 5, 5);
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, 1, 'not');
                                            }
                                            hot2.selectCell(19, 5, 19, 5);
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, 1, 'not');
                                            }
                                            hot2.selectCell(25, 5, 25, 5);
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 1, null, 'not');
                                                hot2.setDataAtCell(i, 2, null, 'not');
                                                hot2.setDataAtCell(i, 3, null, 'not');
                                                hot2.setDataAtCell(i, 4, null, 'not');
                                                hot2.setDataAtCell(i, 5, 1, 'not');
                                            }
                                        }
                                    }
                                    else if (value == false) {
                                        if (row === 0) {
                                            for (i = 1; i < 5; i++) {
                                                hot2.setDataAtCell(i, 5, 0, 'not');
                                            }
                                        }
                                        if (row === 5) {
                                            for (i = 6; i < 19; i++) {
                                                hot2.setDataAtCell(i, 5, 0, 'not');
                                            }
                                        }
                                        if (row === 19) {
                                            for (i = 20; i < 25; i++) {
                                                hot2.setDataAtCell(i, 5, 0, 'not');
                                            }
                                        }
                                        if (row === 25) {
                                            for (i = 26; i < 32; i++) {
                                                hot2.setDataAtCell(i, 5, 0, 'not');
                                            }
                                        }
                                    }
                                    return true;
                                }
                            }
                        },

                        afterChange: function (changes, source) {
                            if (!changes || source == 'not') {
                                return;
                            }
                            var instance = this;
                            var SumDayWorking = 0;
                            changes.forEach(function (change) {
                                var row = change[0], col = change[1], newValue = change[3];
                            });

                        },
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if ((permisstion.isSender == false && permisstion.isAssiner == false && permisstion.isGroupAssiner == false) || CL.Status >= 4) {
                                cellProperties.readOnly = true;
                            }
                            return cellProperties;
                        }
                    }
                };
                hot2 = new Handsontable(container2, setting2());

                if (dataTable3.length > 0) {
                    $.each(dataTable3, function (count, element) {
                        var dataFilter = element.Property4.split(',');
                        dataDateWoking1.push({
                            Name: "", CheckAll: null,
                            Ngay1: dataFilter[0], Ngay2: dataFilter[1], Ngay3: dataFilter[2], Ngay4: dataFilter[3], Ngay5: dataFilter[4]
                            , Ngay6: dataFilter[5], Ngay7: dataFilter[6], Ngay8: dataFilter[7], Ngay9: dataFilter[8], Ngay10: dataFilter[9]
                            , Ngay11: dataFilter[10], Ngay12: dataFilter[11], Ngay13: dataFilter[12], Ngay14: dataFilter[13], Ngay15: dataFilter[14]
                            , Ngay16: dataFilter[15], Ngay17: dataFilter[16], Ngay18: dataFilter[17], Ngay19: dataFilter[18], Ngay20: dataFilter[19]
                            , Ngay21: dataFilter[20], Ngay22: dataFilter[21], Ngay23: dataFilter[22], Ngay24: dataFilter[23], Ngay25: dataFilter[24]
                            , Ngay26: dataFilter[25], Ngay27: dataFilter[26], Ngay28: dataFilter[27], Ngay29: dataFilter[28], Ngay30: dataFilter[29], Ngay31: dataFilter[30]
                        });
                        var dataFilter1 = element.Property5.split(',');
                        dataDateWoking1.push({
                            Name: "", CheckAll: null,
                            Ngay1: dataFilter1[0], Ngay2: dataFilter1[1], Ngay3: dataFilter1[2], Ngay4: dataFilter1[3], Ngay5: dataFilter1[4]
                            , Ngay6: dataFilter1[5], Ngay7: dataFilter1[6], Ngay8: dataFilter1[7], Ngay9: dataFilter1[8], Ngay10: dataFilter1[9]
                            , Ngay11: dataFilter1[10], Ngay12: dataFilter1[11], Ngay13: dataFilter1[12], Ngay14: dataFilter1[13], Ngay15: dataFilter1[14]
                            , Ngay16: dataFilter1[15], Ngay17: dataFilter1[16], Ngay18: dataFilter1[17], Ngay19: dataFilter1[18], Ngay20: dataFilter1[19]
                            , Ngay21: dataFilter1[20], Ngay22: dataFilter1[21], Ngay23: dataFilter1[22], Ngay24: dataFilter1[23], Ngay25: dataFilter1[24]
                            , Ngay26: dataFilter1[25], Ngay27: dataFilter1[26], Ngay28: dataFilter1[27], Ngay29: dataFilter1[28], Ngay30: dataFilter1[29], Ngay31: dataFilter1[30]
                        });
                        var dataFilter2 = element.Property6.split(',');
                        dataDateWoking1.push({
                            Name: "", CheckAll: null,
                            Ngay1: dataFilter2[0], Ngay2: dataFilter2[1], Ngay3: dataFilter2[2], Ngay4: dataFilter2[3], Ngay5: dataFilter2[4]
                            , Ngay6: dataFilter2[5], Ngay7: dataFilter2[6], Ngay8: dataFilter2[7], Ngay9: dataFilter2[8], Ngay10: dataFilter2[9]
                            , Ngay11: dataFilter2[10], Ngay12: dataFilter2[11], Ngay13: dataFilter2[12], Ngay14: dataFilter2[13], Ngay15: dataFilter2[14]
                            , Ngay16: dataFilter2[15], Ngay17: dataFilter2[16], Ngay18: dataFilter2[17], Ngay19: dataFilter2[18], Ngay20: dataFilter2[19]
                            , Ngay21: dataFilter2[20], Ngay22: dataFilter2[21], Ngay23: dataFilter2[22], Ngay24: dataFilter2[23], Ngay25: dataFilter2[24]
                            , Ngay26: dataFilter2[25], Ngay27: dataFilter2[26], Ngay28: dataFilter2[27], Ngay29: dataFilter2[28], Ngay30: dataFilter2[29], Ngay31: dataFilter2[30]
                        });
                        var dataFilte3 = element.Property7.split(',');
                        dataDateWoking1.push({
                            Name: "", CheckAll: null,
                            Ngay1: dataFilte3[0], Ngay2: dataFilte3[1], Ngay3: dataFilte3[2], Ngay4: dataFilte3[3], Ngay5: dataFilte3[4]
                            , Ngay6: dataFilte3[5], Ngay7: dataFilte3[6], Ngay8: dataFilte3[7], Ngay9: dataFilte3[8], Ngay10: dataFilte3[9]
                            , Ngay11: dataFilte3[10], Ngay12: dataFilte3[11], Ngay13: dataFilte3[12], Ngay14: dataFilte3[13], Ngay15: dataFilte3[14]
                            , Ngay16: dataFilte3[15], Ngay17: dataFilte3[16], Ngay18: dataFilte3[17], Ngay19: dataFilte3[18], Ngay20: dataFilte3[19]
                            , Ngay21: dataFilte3[20], Ngay22: dataFilte3[21], Ngay23: dataFilte3[22], Ngay24: dataFilte3[23], Ngay25: dataFilte3[24]
                            , Ngay26: dataFilte3[25], Ngay27: dataFilte3[26], Ngay28: dataFilte3[27], Ngay29: dataFilte3[28], Ngay30: dataFilte3[29], Ngay31: dataFilte3[30]
                        });
                    });
                    var dateFix = dataTable3[0].Property9.split('-')[2].toString()
                        + '/' + dataTable3[0].Property9.split('-')[1].toString()
                        + '/' + dataTable3[0].Property9.split('-')[0].toString();
                    var dateChange3 = new Date(dateFix);
                    var monthChange3 = dateChange3.getMonth() + 1;
                    var yearChange3 = dateChange3.getFullYear();
                    var dateChange3 = dateChange3.getDate();
                    var setting3 = function () {
                        return {
                            data: dataDateWoking1,
                            //================================Colunms=======
                            maxCols: 32,
                            minCols: 32,
                            colWidths: 'undefined',
                            currentColClassName: 'currentCol', //currentCol
                            sortIndicator: true,
                            //================================Rows=======
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            rowHeaders: true,
                            //================================Oder=======
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            undo: true,
                            formulas: true,
                            wordWrap: false,
                            minRows: 5,
                            maxRows: 5,
                            mergeCells: [{ row: 4, col: 1, rowspan: 1, colspan: 31 },],
                            colHeaders:
                                ['Ca', 'Chọn tất cả', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
                                    '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
                                    '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'],
                            columns: [
                                {
                                    data: 'Name', readOnly: true, width: 200,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        var $textDefault = '';
                                        if (row == 0) {
                                            $textDefault = 'Ca 1';
                                            td.style.verticalAlign = 'middle';
                                        }
                                        if (row == 1) {
                                            $textDefault = 'Ca 2';
                                            td.style.verticalAlign = 'middle';
                                        }
                                        if (row == 2) {
                                            $textDefault = 'Tăng cường';
                                            td.style.verticalAlign = 'middle';
                                        }
                                        if (row == 3) {
                                            $textDefault = 'Quản lý xác nhận';
                                            td.style.verticalAlign = 'middle';
                                        }
                                        if (row == 4) {
                                            $textDefault = 'Tổng ngày công:';
                                            td.style.verticalAlign = 'middle';
                                            td.style.fontWeight = 'bold';
                                            td.style.color = 'green';
                                        }
                                        $(td).empty().append($textDefault);
                                    }
                                },
                                {
                                    data: 'CheckAll', type: 'checkbox', width: 80, checkedTemplate: 1, uncheckedTemplate: 0,
                                    renderer: function (instance, td, row, col, prop, value) {
                                        if (row === 4) {
                                            td.style.fontWeight = 'bold';
                                            td.style.color = 'green';
                                            td.style.textAlign = 'left';

                                            var Column1 = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                                                , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                                                , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                                                , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                                                , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                                                , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];
                                            var DataTab2 = [];
                                            var ii = '';
                                            var sum = 0;
                                            $.each(dataDateWoking1, function (index, item) {
                                                $.each(Column1, function (count, element) {
                                                    if (item[element] == 1 && index == 3 && element != "CheckAll") {
                                                        DataTab2.push({ vitricot: count, ngay: element });
                                                    }
                                                });
                                            });
                                            if (DataTab2.length > 0) {
                                                sum = DataTab2.length - 1;
                                            }
                                            value = sum;
                                            Handsontable.NumericRenderer.apply(this, arguments);
                                        }
                                        else {
                                            Handsontable.CheckboxRenderer.apply(this, arguments);
                                        }
                                    }
                                },
                                { data: 'Ngay1', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay2', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay3', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay4', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay5', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay6', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay7', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay8', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay9', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay10', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay11', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay12', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay13', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay14', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay15', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay16', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay17', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay18', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay19', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay20', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay21', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay22', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay23', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay24', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay25', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay26', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay27', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay28', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay29', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay30', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                                { data: 'Ngay31', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0 },
                            ],//Tạo view bảng

                            afterChange: function (changes, source) {
                                if (!changes || source == 'not') {
                                    return;
                                }
                                var instance = this;
                                changes.forEach(function (change) {
                                    var row = change[0], col = change[1], newValue = change[3];
                                    if (col === 'CheckAll') {
                                        var checkNhuanAfter3 = nam_nhuan(yearChange3);
                                        if (newValue === 1) {
                                            instance.setDataAtRowProp(row, 'Ngay1', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay2', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay3', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay4', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay5', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay6', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay7', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay8', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay9', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay10', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay11', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay12', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay13', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay14', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay15', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay16', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay17', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay18', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay19', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay20', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay21', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay22', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay23', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay24', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay25', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay26', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay27', 1, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay28', 1, 'edit');
                                            if (monthChange3 === 2 && checkNhuanAfter3 === 1) {
                                                instance.setDataAtRowProp(row, 'Ngay29', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay30', 0, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay31', 0, 'edit');
                                            } else if (monthChange3 === 2 && checkNhuanAfter3 === 0) {
                                                instance.setDataAtRowProp(row, 'Ngay29', 0, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay30', 0, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay31', 0, 'edit');
                                            } else if (monthChange3 === 4 || monthChange3 === 6 || monthChange3 === 9 || monthChange3 === 11) {
                                                instance.setDataAtRowProp(row, 'Ngay29', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay30', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay31', 0, 'edit');
                                            } else {
                                                instance.setDataAtRowProp(row, 'Ngay29', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay30', 1, 'edit');
                                                instance.setDataAtRowProp(row, 'Ngay31', 1, 'edit');
                                            };
                                        }
                                        else {
                                            instance.setDataAtRowProp(row, 'Ngay1', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay2', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay3', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay4', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay5', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay6', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay7', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay8', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay9', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay10', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay11', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay12', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay13', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay14', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay15', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay16', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay17', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay18', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay19', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay20', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay21', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay22', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay23', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay24', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay25', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay26', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay27', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay28', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay29', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay30', 0, 'edit');
                                            instance.setDataAtRowProp(row, 'Ngay31', 0, 'edit');
                                        }
                                    }
                                });
                            },
                            cells: function (row, col, prop) {
                                var cellProperties = {};
                                if (row > 0 && col == 0) {
                                    cellProperties.readOnly = true;
                                }
                                var checkNhuan = nam_nhuan(yearChange3);

                                if (checkNhuan == 1) {
                                    if (monthChange3 === 2 && (col === 31 || col === 32)) {
                                        cellProperties.readOnly = true;
                                    }
                                }
                                else if (checkNhuan == 0) {
                                    if (monthChange3 === 2 && (col === 30 || col === 31 || col === 32)) {
                                        cellProperties.readOnly = true;
                                    }
                                }
                                else if ((monthChange3 === 4 || monthChange3 === 6 || monthChange3 === 9 || monthChange3 === 11) && col === 32) {
                                    cellProperties.readOnly = true;
                                }
                                return cellProperties;
                            }
                        }
                    };
                    hot3 = new Handsontable(container3, setting3());
                }

                var setting4 = function () {
                    return {
                        data: dataTable4,
                        //================================Colunms=======
                        maxCols: 6,
                        minCols: 6,
                        colWidths: 'undefined',
                        currentColClassName: 'currentCol', //currentCol
                        sortIndicator: true,
                        //================================Rows=======
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        //================================Oder=======
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        readOnlyCellClassName: 'htDimmed',
                        undo: true,
                        formulas: true,
                        wordWrap: true,
                        minRows: 18,
                        maxRows: 18,
                        colHeaders: ['Nội dung công việc', 'Làm tốt', 'Làm không tốt', 'Ghi chú'],
                        columns: [
                            {
                                data: 'Name', readOnly: true, width: 200,
                                renderer: function (instance, td, row, col, prop, value) {
                                    var $textDefault = '';
                                    $.each(dataTable2Name, function (index, item) {
                                        if (row == index) {
                                            $textDefault = item;
                                        }
                                    });
                                    td.style.textAlign = 'left';
                                    if (row === 10) {
                                        td.style.fontWeight = 'bold';
                                        td.style.color = 'green';
                                        td.style.backgroundColor = '#DDDDDD'
                                    }
                                    if (row === 14) {
                                        td.style.fontWeight = 'bold';
                                        td.style.color = 'green';
                                        td.style.backgroundColor = '#DDDDDD'
                                    }
                                    $(td).empty().append($textDefault);
                                }
                            },
                            {
                                data: 'Property1', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, width: 100//,
                                //renderer: function (instance, td, row, col, prop, value) {
                                //    if (row === 10 || row === 14) {
                                //        Handsontable.TextRenderer.apply(this, arguments);
                                //    }
                                //    else {
                                //        Handsontable.CheckboxRenderer.apply(this, arguments);
                                //    }
                                //}
                            },
                            {
                                data: 'Property2', width: 30, type: 'checkbox', checkedTemplate: 1, uncheckedTemplate: 0, width: 100//,
                                //renderer: function (instance, td, row, col, prop, value) {
                                //    if (row === 10 || row === 14) {
                                //        Handsontable.TextRenderer.apply(this, arguments);
                                //    }
                                //    else {
                                //        Handsontable.CheckboxRenderer.apply(this, arguments);
                                //    }
                                //}
                            },
                            { data: 'Note', width: 30, type: 'text', width: 250 },
                        ],//Tạo view bảng

                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];
                                if (col === 'Property1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot4.setDataAtCell(row, 2, null, 'not');
                                        if (row === 0) {
                                            for (i = 0; i < 10; i++) {
                                                hot4.setDataAtCell(i, 1, 1, 'not');
                                                hot4.setDataAtCell(i, 2, null, 'not');
                                            }
                                        }
                                        if (row === 10) {
                                            for (i = 11; i < 14; i++) {
                                                hot4.setDataAtCell(i, 1, 1, 'not');
                                                hot4.setDataAtCell(i, 2, null, 'not');
                                            }
                                        }
                                        if (row === 14) {
                                            for (i = 15; i < 18; i++) {
                                                hot4.setDataAtCell(i, 1, 1, 'not');
                                                hot4.setDataAtCell(i, 2, null, 'not');
                                            }
                                        }
                                    }
                                    else if (value == false) {
                                        if (row === 0) {
                                            for (i = 0; i < 10; i++) {
                                                hot4.setDataAtCell(i, 1, 0, 'not');
                                            }
                                        }
                                        if (row === 10) {
                                            for (i = 11; i < 14; i++) {
                                                hot4.setDataAtCell(i, 1, 0, 'not');
                                            }
                                        }
                                        if (row === 14) {
                                            for (i = 15; i < 18; i++) {
                                                hot4.setDataAtCell(i, 1, 0, 'not');
                                            }
                                        }

                                    }
                                    return true;
                                }
                                if (col === 'Property2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot4.setDataAtCell(row, 1, null, 'not');
                                        if (row === 0) {
                                            for (i = 0; i < 10; i++) {
                                                hot4.setDataAtCell(i, 1, null, 'not');
                                                hot4.setDataAtCell(i, 2, 1, 'not');
                                            }
                                        }
                                        if (row === 10) {
                                            for (i = 11; i < 14; i++) {
                                                hot4.setDataAtCell(i, 1, null, 'not');
                                                hot4.setDataAtCell(i, 2, 1, 'not');
                                            }
                                        }
                                        if (row === 14) {
                                            for (i = 15; i < 18; i++) {
                                                hot4.setDataAtCell(i, 1, null, 'not');
                                                hot4.setDataAtCell(i, 2, 1, 'not');
                                            }
                                        }
                                    }
                                    else if (value == false) {
                                        if (row === 0) {
                                            for (i = 0; i < 10; i++) {
                                                hot4.setDataAtCell(i, 2, 0, 'not');
                                            }
                                        }
                                        if (row === 10) {
                                            for (i = 11; i < 14; i++) {
                                                hot4.setDataAtCell(i, 2, 0, 'not');
                                            }
                                        }
                                        if (row === 14) {
                                            for (i = 15; i < 18; i++) {
                                                hot4.setDataAtCell(i, 2, 0, 'not');
                                            }
                                        }

                                    }
                                    return true;
                                }
                            }
                        },

                        afterChange: function (changes, source) {
                            if (!changes || source == 'not') {
                                return;
                            }
                            var instance = this;
                            var SumDayWorking = 0;
                            changes.forEach(function (change) {
                                var row = change[0], col = change[1], newValue = change[3];
                            });

                        },
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if ((permisstion.isSender == false && permisstion.isAssiner == false && permisstion.isGroupAssiner == false) || CL.Status >= 4) {
                                cellProperties.readOnly = true;
                            }
                            return cellProperties;
                        }
                    }
                };
                hot4 = new Handsontable(container4, setting4());

                $btnComment.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                    };

                    var dataTable11 = hot1.getData();
                    var dataTable21 = hot2.getData();
                    var dataTable31 = hot3.getData();
                    var dataTable41 = hot4.getData();
                    var dataReturn = [];

                    //==============================================
                    var Column = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                        , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                        , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                        , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                        , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                        , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];
                    var DataTab1 = [];
                    var chuoiRow1 = '', chuoiRow2 = '', Sum1 = 0, Thang = '';
                    $.each(dataTable11, function (index, item) {
                        $.each(Column, function (count, element) {
                            if (item[element] == 1 && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow1 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow1 += '0,';
                            }

                            if (item[element] == 1 && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow2 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow2 += '0,';
                            }
                        });
                        if (index === 0) {
                            Thang = item.Name;
                        }
                    });
                    $.each(dataTable1, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: Thang,
                            Property1: "",
                            Property2: $('#txthousekeeper').val(),
                            Property3: "",
                            Property4: chuoiRow1,
                            Property5: chuoiRow2,
                            Property6: null,
                            Property7: null,
                            Quantity: 1,
                            Quantity1: 1,
                            Sum: Sum1,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: null
                        });
                    });
                    //console.log(dataReturn); return false;
                    //==============================================
                    var dataCheckTale2 = $.grep(dataTable2, function (item, index) {
                        return (item.Property1 === null || item.Property1 === '' || item.Property1 === undefined || item.Property1 == 0)
                            && (item.Property2 === null || item.Property2 === '' || item.Property2 === undefined || item.Property2 == 0)
                            && (item.Property3 === null || item.Property3 === '' || item.Property3 === undefined || item.Property3 == 0)
                            && (item.Property4 === null || item.Property4 === '' || item.Property4 === undefined || item.Property4 == 0)
                            && (item.Property5 === null || item.Property5 === '' || item.Property5 === undefined || item.Property5 == 0)
                            && index !== 0 && index !== 5 && index !== 19 && index !== 25;
                    });
                    if (dataCheckTale2.length === 0) {
                        if ($('#txthousekeeper').val() == null || $('#txthousekeeper').val() == '' || $('#txthousekeeper').val() == undefined) {
                            XFunction.RenderMessage('error', 'Tên nhân viên tạp vụ không được bỏ trống!');
                            return false;
                        }
                    };
                    $.each(dataTable21, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: item.Property1,
                            Property2: item.Property2,
                            Property3: item.Property3,
                            Property4: item.Property4,
                            Property5: item.Property5,
                            Property6: null,
                            Property7: null,
                            Quantity: 1,
                            Quantity1: 2,
                            Sum: null,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: item.Note
                        });
                    });

                    //==============================================
                    var Column1 = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                        , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                        , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                        , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                        , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                        , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];
                    var DataTab2 = [];
                    var chuoiRow3 = '', chuoiRow4 = '', chuoiRow5 = '', chuoiRow6 = '', Sum2 = 0;
                    $.each(dataTable31, function (index, item) {
                        $.each(Column1, function (count, element) {
                            if (item[element] == 1 && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow3 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow3 += '0,';
                            };

                            if (item[element] == 1 && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow4 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow4 += '0,';
                            };

                            if (item[element] == 1 && index == 2 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow5 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 2 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow5 += '0,';
                            };

                            if (item[element] == 1 && index == 3 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow6 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 3 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow6 += '0,';
                            };
                        });
                    });
                    $.each(dataTable3, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: $('#txtSecurity-Company').val(),
                            Property2: "",
                            Property3: $('#txtsecuriter').val(),
                            Property4: chuoiRow3,
                            Property5: chuoiRow4,
                            Property6: chuoiRow5,
                            Property7: chuoiRow6,
                            Quantity: 2,
                            Quantity1: 1,
                            Sum: Sum1,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: null
                        });
                    });

                    //==============================================
                    var dataCheckTale4 = $.grep(dataTable4, function (item, index) {
                        return (item.Property1 === null || item.Property1 === '' || item.Property1 === undefined || item.Property1 == 0)
                            && (item.Property2 === null || item.Property2 === '' || item.Property2 === undefined || item.Property2 == 0)
                            && (index !== 10 && index !== 14);
                    });
                    if (dataCheckTale4.length == 0) {
                        if (($('#txtSecurity-Company').val() == null || $('#txtSecurity-Company').val() == '' || $('#txtSecurity-Company').val() == undefined)
                            && ($('#txtsecuriter').val() == null || $('#txtsecuriter').val() == '' || $('#txtsecuriter').val() == undefined)) {
                            XFunction.RenderMessage('error', 'Tên công ty bảo vệ hoặc nhân viên bảo vệ không được bỏ trống!');
                            return false;
                        }
                    }

                    $.each(dataTable41, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: item.Property1,
                            Property2: item.Property2,
                            Property3: null,
                            Property4: null,
                            Property5: null,
                            Property6: null,
                            Property7: null,
                            Quantity: 2,
                            Quantity1: 2,
                            Sum: null,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: item.Note
                        });
                    });
                    if (dataCheckTale2.length > 0 && dataCheckTale4.length > 0) {
                        XFunction.RenderMessage('error', 'Vui lòng điền dầy đủ thông tin một trong hai mục đánh giá!');
                        return false;
                    }
                    //return false;   
                    //console.log(dataReturn); return false;
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                });
                $btnReply.on('click', function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                    };

                    var dataTable11 = hot1.getData();
                    var dataTable21 = hot2.getData();
                    var dataTable31 = hot3.getData();
                    var dataTable41 = hot4.getData();
                    var dataReturn = [];

                    //==============================================
                    var Column = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                        , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                        , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                        , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                        , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                        , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];
                    var DataTab1 = [];
                    var chuoiRow1 = '', chuoiRow2 = '', Sum1 = 0, Thang = '';
                    $.each(dataTable11, function (index, item) {
                        $.each(Column, function (count, element) {
                            if (item[element] == 1 && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow1 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow1 += '0,';
                            }

                            if (item[element] == 1 && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow2 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow2 += '0,';
                            }
                        });
                        if (index === 0) {
                            Thang = item.Name;
                        }
                    });
                    $.each(dataTable1, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: Thang,
                            Property1: "",
                            Property2: $('#txthousekeeper').val(),
                            Property3: "",
                            Property4: chuoiRow1,
                            Property5: chuoiRow2,
                            Property6: null,
                            Property7: null,
                            Quantity: 1,
                            Quantity1: 1,
                            Sum: Sum1,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: null
                        });
                    });
                    //console.log(dataReturn); return false;
                    //==============================================
                    var dataCheckTale2 = $.grep(dataTable2, function (item, index) {
                        return (item.Property1 === null || item.Property1 === '' || item.Property1 === undefined || item.Property1 == 0)
                            && (item.Property2 === null || item.Property2 === '' || item.Property2 === undefined || item.Property2 == 0)
                            && (item.Property3 === null || item.Property3 === '' || item.Property3 === undefined || item.Property3 == 0)
                            && (item.Property4 === null || item.Property4 === '' || item.Property4 === undefined || item.Property4 == 0)
                            && (item.Property5 === null || item.Property5 === '' || item.Property5 === undefined || item.Property5 == 0)
                            && index !== 0 && index !== 5 && index !== 19 && index !== 25;
                    });
                    if (dataCheckTale2.length === 0) {
                        if ($('#txthousekeeper').val() == null || $('#txthousekeeper').val() == '' || $('#txthousekeeper').val() == undefined) {
                            XFunction.RenderMessage('error', 'Tên nhân viên tạp vụ không được bỏ trống!');
                            return false;
                        }
                    };
                    $.each(dataTable21, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: item.Property1,
                            Property2: item.Property2,
                            Property3: item.Property3,
                            Property4: item.Property4,
                            Property5: item.Property5,
                            Property6: null,
                            Property7: null,
                            Quantity: 1,
                            Quantity1: 2,
                            Sum: null,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: item.Note
                        });
                    });

                    //==============================================
                    var Column1 = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                        , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                        , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                        , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                        , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                        , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];
                    var DataTab2 = [];
                    var chuoiRow3 = '', chuoiRow4 = '', chuoiRow5 = '', chuoiRow6 = '', Sum2 = 0;
                    $.each(dataTable31, function (index, item) {
                        $.each(Column1, function (count, element) {
                            if (item[element] == 1 && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow3 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow3 += '0,';
                            };

                            if (item[element] == 1 && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow4 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow4 += '0,';
                            };

                            if (item[element] == 1 && index == 2 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow5 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 2 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow5 += '0,';
                            };

                            if (item[element] == 1 && index == 3 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow6 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 3 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow6 += '0,';
                            };
                        });
                    });
                    $.each(dataTable3, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: $('#txtSecurity-Company').val(),
                            Property2: "",
                            Property3: $('#txtsecuriter').val(),
                            Property4: chuoiRow3,
                            Property5: chuoiRow4,
                            Property6: chuoiRow5,
                            Property7: chuoiRow6,
                            Quantity: 2,
                            Quantity1: 1,
                            Sum: Sum1,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: null
                        });
                    });

                    //==============================================
                    var dataCheckTale4 = $.grep(dataTable4, function (item, index) {
                        return (item.Property1 === null || item.Property1 === '' || item.Property1 === undefined || item.Property1 == 0)
                            && (item.Property2 === null || item.Property2 === '' || item.Property2 === undefined || item.Property2 == 0)
                            && (index !== 10 && index !== 14);
                    });
                    if (dataCheckTale4.length == 0) {
                        if (($('#txtSecurity-Company').val() == null || $('#txtSecurity-Company').val() == '' || $('#txtSecurity-Company').val() == undefined)
                            && ($('#txtsecuriter').val() == null || $('#txtsecuriter').val() == '' || $('#txtsecuriter').val() == undefined)) {
                            XFunction.RenderMessage('error', 'Tên công ty bảo vệ hoặc nhân viên bảo vệ không được bỏ trống!');
                            return false;
                        }
                    }

                    $.each(dataTable41, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: item.Property1,
                            Property2: item.Property2,
                            Property3: null,
                            Property4: null,
                            Property5: null,
                            Property6: null,
                            Property7: null,
                            Quantity: 2,
                            Quantity1: 2,
                            Sum: null,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: item.Note
                        });
                    });
                    if (dataCheckTale2.length > 0 && dataCheckTale4.length > 0) {
                        XFunction.RenderMessage('error', 'Vui lòng điền dầy đủ thông tin một trong hai mục đánh giá!');
                        return false;
                    }

                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();

                });
                $btnComplete.on('click', function () {

                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var dataTable11 = hot1.getData();
                    var dataTable21 = hot2.getData();
                    var dataTable31 = hot3.getData();
                    var dataTable41 = hot4.getData();
                    var dataReturn = [];

                    //==============================================
                    var Column = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                        , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                        , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                        , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                        , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                        , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];
                    var DataTab1 = [];
                    var chuoiRow1 = '', chuoiRow2 = '', Sum1 = 0, Thang = '';
                    $.each(dataTable11, function (index, item) {
                        $.each(Column, function (count, element) {
                            if (item[element] == 1 && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow1 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow1 += '0,';
                            }

                            if (item[element] == 1 && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow2 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow2 += '0,';
                            }
                        });
                        if (index === 0) {
                            Thang = item.Name;
                        }
                    });
                    $.each(dataTable1, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: Thang,
                            Property1: "",
                            Property2: $('#txthousekeeper').val(),
                            Property3: "",
                            Property4: chuoiRow1,
                            Property5: chuoiRow2,
                            Property6: null,
                            Property7: null,
                            Quantity: 1,
                            Quantity1: 1,
                            Sum: Sum1,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: null
                        });
                    });
                    //console.log(dataReturn); return false;
                    //==============================================
                    var dataCheckTale2 = $.grep(dataTable2, function (item, index) {
                        return (item.Property1 === null || item.Property1 === '' || item.Property1 === undefined || item.Property1 == 0)
                            && (item.Property2 === null || item.Property2 === '' || item.Property2 === undefined || item.Property2 == 0)
                            && (item.Property3 === null || item.Property3 === '' || item.Property3 === undefined || item.Property3 == 0)
                            && (item.Property4 === null || item.Property4 === '' || item.Property4 === undefined || item.Property4 == 0)
                            && (item.Property5 === null || item.Property5 === '' || item.Property5 === undefined || item.Property5 == 0)
                            && index !== 0 && index !== 5 && index !== 19 && index !== 25;
                    });
                    if (dataCheckTale2.length === 0) {
                        if ($('#txthousekeeper').val() == null || $('#txthousekeeper').val() == '' || $('#txthousekeeper').val() == undefined) {
                            XFunction.RenderMessage('error', 'Tên nhân viên tạp vụ không được bỏ trống!');
                            return false;
                        }
                    };
                    $.each(dataTable21, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: item.Property1,
                            Property2: item.Property2,
                            Property3: item.Property3,
                            Property4: item.Property4,
                            Property5: item.Property5,
                            Property6: null,
                            Property7: null,
                            Quantity: 1,
                            Quantity1: 2,
                            Sum: null,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: item.Note
                        });
                    });

                    //==============================================
                    var Column1 = ["Name", "CheckAll", "Ngay1", "Ngay2", "Ngay3", "Ngay4", "Ngay5"
                        , "Ngay6", "Ngay7", "Ngay8", "Ngay9", "Ngay10"
                        , "Ngay11", "Ngay12", "Ngay13", "Ngay14", "Ngay15"
                        , "Ngay16", "Ngay17", "Ngay18", "Ngay19", "Ngay20"
                        , "Ngay21", "Ngay22", "Ngay23", "Ngay24", "Ngay25"
                        , "Ngay26", "Ngay27", "Ngay28", "Ngay29", "Ngay30", "Ngay31"];
                    var DataTab2 = [];
                    var chuoiRow3 = '', chuoiRow4 = '', chuoiRow5 = '', chuoiRow6 = '', Sum2 = 0;
                    $.each(dataTable31, function (index, item) {
                        $.each(Column1, function (count, element) {
                            if (item[element] == 1 && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow3 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 0 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow3 += '0,';
                            };

                            if (item[element] == 1 && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow4 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 1 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow4 += '0,';
                            };

                            if (item[element] == 1 && index == 2 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow5 += '1,';
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 2 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow5 += '0,';
                            };

                            if (item[element] == 1 && index == 3 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow6 += '1,';
                                Sum1 += 1
                            }
                            else if ((item[element] == 0 || item[element] == null) && index == 3 && element !== 'Name' && element != "CheckAll") {
                                chuoiRow6 += '0,';
                            };
                        });
                    });
                    $.each(dataTable3, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: $('#txtSecurity-Company').val(),
                            Property2: "",
                            Property3: $('#txtsecuriter').val(),
                            Property4: chuoiRow3,
                            Property5: chuoiRow4,
                            Property6: chuoiRow5,
                            Property7: chuoiRow6,
                            Quantity: 2,
                            Quantity1: 1,
                            Sum: Sum1,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: null
                        });
                    });

                    //==============================================
                    var dataCheckTale4 = $.grep(dataTable4, function (item, index) {
                        return (item.Property1 === null || item.Property1 === '' || item.Property1 === undefined || item.Property1 == 0)
                            && (item.Property2 === null || item.Property2 === '' || item.Property2 === undefined || item.Property2 == 0)
                            && (index !== 10 && index !== 14);
                    });
                    if (dataCheckTale4.length == 0) {
                        if (($('#txtSecurity-Company').val() == null || $('#txtSecurity-Company').val() == '' || $('#txtSecurity-Company').val() == undefined)
                            && ($('#txtsecuriter').val() == null || $('#txtsecuriter').val() == '' || $('#txtsecuriter').val() == undefined)) {
                            XFunction.RenderMessage('error', 'Tên công ty bảo vệ hoặc nhân viên bảo vệ không được bỏ trống!');
                            return false;
                        }
                    }

                    $.each(dataTable41, function (index, item) {
                        dataReturn.push({
                            Id: item.Id,
                            Name: null,
                            Property1: item.Property1,
                            Property2: item.Property2,
                            Property3: null,
                            Property4: null,
                            Property5: null,
                            Property6: null,
                            Property7: null,
                            Quantity: 2,
                            Quantity1: 2,
                            Sum: null,
                            ShopCode: null,
                            EmployeeCode: null,
                            Note: item.Note
                        });
                    });
                    if (dataCheckTale2.length > 0 && dataCheckTale4.length > 0) {
                        XFunction.RenderMessage('error', 'Vui lòng điền dầy đủ thông tin một trong hai mục đánh giá!');
                        return false;
                    }
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();

                });
            });
        });
        //  });
    };  // đánh giá vệ sinh shop, Bảo vệ - Tạp vụ
    function contruct_151() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            if (CL.StepNo == 2) {
                $('#btnSendGiaiTrinh').hide();
            }
            var renderLineTable = function (uri) {
                var strRe = '';
                strRe += '<tr>'

                strRe += '<td style="padding:2px">';
                var stringImage = '';
                var duoi = uri.split('.')[1].toString().toLowerCase();
                var tenfile = uri.split('/')[3].toString();
                if (duoi === '' || duoi === undefined || duoi === null) {
                    duoi = '';
                } else {
                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                        stringImage = '<img width="30" height="30" src="' + uri + '"> ' + tenfile;
                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                        stringImage = '<a href="' + uri + '" download> ' + tenfile + '</a>';
                    } else {
                        stringImage = '<a href="' + uri + '" dowload> ' + tenfile + '</a> ';
                    }
                }
                strRe += stringImage;
                strRe += '</td>';

                strRe += '<td>';
                strRe += ' <input type="checkbox" class="clDeleteImage" name="chkDeleteImage" value="' + uri + '">';
                strRe += '</td>';

                strRe += '</tr>'
                return strRe;
            }
            var checkApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1 ? true : false;
            var checkPerss = permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender ? true : false;
            var actionRendererGiaiTrinh = function (instance, td, row, col, prop, value, cellProperties) {

                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                if (checkPerss) {
                    $button.click(function () {
                        $('#MessageGiaiTrinh').val('');
                        $('#modalBodyGiaitrinh').empty();
                        var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                        $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                        if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                            $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                                if (respone !== undefined && respone !== '' && respone !== null) {
                                    var inner = '';
                                    $.each(respone, function (index, item) {
                                        inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                            '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                            ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                    });
                                    $('#modalBodyGiaitrinh').html(inner);
                                    $('#modalBodyGiaitrinh').show();
                                } else {
                                    $('#modalBodyGiaitrinh').hide();
                                }
                                $('#modalGiaiTrinh').modal('show');
                            });
                        }
                    });
                } else {
                    $button.click(function () {
                        XFunction.RenderMessage('error', 'Bạn không phải người xử lý của callog này');
                    });
                }

                $(td).empty().append($button);

            };
            var actionRendererUpload_1 = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'button_1' && checkApp == true) {
                    var valid = instance.getDataAtRowProp(row, 'Id');
                    var requestId = instance.getDataAtRowProp(row, 'RequestId');
                    var $button = '';
                    var $buttonX = '';
                    if (valid === null || valid === '' || valid === undefined) {
                        $button = '';
                    } else {
                        $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="1" class="fa fa-upload" style="color:green"></i>');
                        $button.click(function () {
                            var idtemp = $(this).attr('id').toString();
                            var id = $(this).attr('data-id');
                            var col = $(this).attr('data-value');
                            $('#btnuploadDetails').attr('data-id', id).attr('data-value', col);
                            $('#uploadDetails').val('');
                            $('#myModalUpload').modal('show');
                        });

                        var datavalue_line = requestId + '-' + valid + '-1';
                        $buttonX = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa fa-times" style="color:red"></i>');
                        $buttonX.click(function () {
                            var listId = $(this).attr("data-value");
                            var listspt = listId.split('-');
                            var requestId = listspt[0];
                            var requestDetailId = listspt[1];
                            var domain = listspt[2];
                            $('#btnDeleteImages').attr('data-value', listId);
                            $('#modalDeleteImagesBody').html('');
                            $.get('/Requests/GetFileUpload', {
                                requestId: requestId,
                                requestDetailId: requestDetailId,
                                Domain: domain
                            }, function (respone) {
                                if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                    var stringImage = '';
                                    $.each(respone, function (index1, item1) {
                                        stringImage += renderLineTable(item1.Uri);
                                    });
                                    $('#modalDeleteImagesBody').html(stringImage);
                                    $('#modalDeleteImages').modal('show');
                                } else {
                                    XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                }
                            }).error(function () {
                                XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                            });

                        });
                    }
                    //$(td).empty().append($button);
                    $(td).empty().append($button).append(' ').append($buttonX)
                } else {
                    $(td).empty().append('');
                }

            };
            function endFile(name) {
                var extension = name.split('.').pop().toLowerCase();
                if ($.inArray(extension, ['jpg', 'png', 'gif', 'jpeg']) == -1) {
                    return false;
                }
                else {
                    return true;
                }
            }

            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'ColHtml_1') {
                    var valid = instance.getDataAtRowProp(row, 'Id');
                    var Images_1 = instance.getDataAtRowProp(row, 'Images_1');
                    var $button = ''
                    if (valid === null || valid === '' || valid === undefined ||
                        Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                        $button = '';
                    } else {
                        var images = Images_1.toString().split(',');
                        var stringImage = '';
                        $.each(images, function (index1, item1) {
                            var duoi = item1.split('.')[1].toString().toLowerCase();
                            var tenfile = item1.split('/')[3].toString();
                            if (duoi === '' || duoi === undefined || duoi === null) {
                                duoi = '';
                            } else {
                                var l_Url = '';
                                $.ajax({
                                    async: false,
                                    url: "/Uploads/Get_Url_Uploads_FileAttachs",
                                    type: "GET",
                                    data: { Url: item1 },
                                    success: function (p_ActionResult) {
                                        l_Url = p_ActionResult;
                                    }
                                });
                                //var duoi = item1.split('.')[1].toString().toLowerCase();
                                if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                    //stringImage += '<a href="' +item1 + '" target="_blank"><i class="fa fa-picture-o"></i> ' +tenfile + '</a>  <br>';
                                    stringImage += '<a href="' + l_Url + '"><img width="30" height="30" src="' + l_Url + '"></a> ';
                                } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                    //stringImage += '<a href="' + item1 + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                    stringImage += '<a href="' + l_Url + '"><img width="30" height="30" src="' + l_Url + '"></a> ';
                                } else {
                                    //stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                    stringImage += '<a href="' + l_Url + '"><img width="30" height="30" src="' + l_Url + '"></a> ';
                                }
                            }
                        });
                        $button = stringImage;
                    }
                    $(td).empty().append($button);
                } else {
                    $(td).empty().append('');
                }
                td.style.textAlign = 'left';
            };
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 17,
                    minCols: 17,
                    startCols: 17,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 14,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 17,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders: ['Mã shop', 'Mã sản phẩm xuất', 'Tên sản phẩm xuất', 'Imei xuất', 'Số lượng xuất', 'Đơn giá xuất', 'Mã kho xuất',
                        'Mã sản phẩm nhập', 'Tên sản phẩm nhập', 'Imei nhập', 'Số lượng nhập', 'Đơn giá nhập', 'Mã kho nhập', 'Chênh lệch xuất',
                        'Upload hình lỗi', 'Hình lỗi đã Upload', 'Giải trình'
                    ],
                    columns: [
                        { data: 'ShopCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property7', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Money1', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Property8', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property9', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity1', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Money2', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Property10', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Money3', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: "button_1", renderer: actionRendererUpload_1, readOnly: true },
                        { data: 'ColHtml_1', renderer: safeHtmlRenderer, readOnly: true, className: 'htLeft' },
                        { data: "button", renderer: actionRendererGiaiTrinh },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $("#UploadForm").submit(function (e) {
                var data = new FormData();
                var selectedFiles = $("#uploadDetails")[0].files;
                if (selectedFiles.length == 0) {
                    e.preventDefault();
                    $('#myModalUpload').modal('hide');
                    XFunction.RenderMessage('error', 'Không có file để lưu');
                    return;
                }
                $.each(selectedFiles, function (index, item) {
                    data.append(selectedFiles[index].name, selectedFiles[index]);
                });
                var requestdetailId = $('#btnuploadDetails').attr('data-id');
                var col = $('#btnuploadDetails').attr('data-value');
                //var rowline = $('#RowLine134').val();
                //console.log(requestdetailId, col, $('#RowLine134').val());
                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetailCol?RequsetDetailId=" + requestdetailId + "&&Col=" + col,
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        $('#myModalUpload').modal('hide');
                        if (result.error == 0) {
                            var fileNames = $.parseJSON(result.Message);
                            var stringImage = fileNames.join(',');
                            $.each(dataHandsontable, function (index, item) {
                                if (item.Id == requestdetailId) {
                                    if (col == 1) {
                                        var dataRow = item.Images_1;
                                        if (dataRow != '' && dataRow != null && dataRow != undefined)
                                            dataRow += ',';
                                        item.Images_1 = dataRow + stringImage;
                                    }
                                }
                            });
                            hot.render();
                            XFunction.RenderMessage('success', 'Lưu ' + fileNames.length + ' file thành công');
                        } else {
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }

                    },
                    error: function () {
                        $('#myModalUpload').modal('hide');
                        XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                    }
                });
                e.preventDefault();
            });
            $('#btnDeleteImages').on('click', function () {
                var dataHidd = $(this).attr('data-value');
                var checklis = [];
                var countImagesNoDelete = $("input:checkbox[name=chkDeleteImage]");
                var countImagesDelete = $("input:checkbox[name=chkDeleteImage]:checked");

                if (countImagesNoDelete.length == countImagesDelete.length) {
                    XFunction.RenderMessage("error", "Không được xóa toàn bộ hình ảnh đã đính kèm"); return;
                }

                $("input:checkbox[name=chkDeleteImage]:checked").each(function () {
                    checklis.push($(this).val());
                });
                if (dataHidd == '' || dataHidd == null || dataHidd == undefined || checklis.length == 0) {
                    XFunction.RenderMessage("error", "Không lấy được dữ liệu"); return;
                }
                var dataspl = dataHidd.split('-');
                var requestId = dataspl[0];
                var requestDetailId = dataspl[1];
                var domain = dataspl[2];
                var uris = checklis.join(',');
                $.get('/Requests/DeleteFileUpload', {
                    requestId: requestId,
                    requestDetailId: requestDetailId,
                    Domain: domain,
                    Uris: uris
                }, function (respone) {
                    if (respone !== '' && respone !== null && respone !== undefined) {
                        $.each(dataHandsontable, function (index, item) {
                            if (item.Id == requestDetailId && item.RequestId == requestId) {
                                if (domain == '1') {
                                    item.Images_1 = respone[0].Uris;
                                }
                            }
                        });
                        hot.render();
                        $('#modalDeleteImages').modal('hide');
                        XFunction.RenderMessage("success", "Xóa thành công"); return;
                    } else {
                        $.each(dataHandsontable, function (index, item) {
                            if (item.Id == requestDetailId && item.RequestId == requestId) {
                                if (domain == '1') {
                                    item.Images_1 = '';
                                }
                            }
                        });
                        hot.render();
                        $('#modalDeleteImages').modal('hide');
                        XFunction.RenderMessage("success", "Xóa thành công"); return;
                    }
                }).error(function () {
                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                });
            });
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        hot.setDataAtRowProp(row, 'HaveConvertation1', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });
            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData
                var dataInvalidGiaiTrinh = [], dataInvalid = [];

                myData = hot == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(myData, function (index, item) {
                    if (item.HaveConvertation != 1 && checkPerss == true)
                        dataInvalidGiaiTrinh.push(item);
                    if (item.Images_1 == '' || item.Images_1 == null || item.Images_1 == undefined)
                        dataInvalid.push(item);
                });

                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải upload hình lỗi"); return;
                }

                if (dataInvalidGiaiTrinh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình"); return;
                }
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData
                var dataInvalidGiaiTrinh = [], dataInvalid = [];

                myData = hot == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(myData, function (index, item) {
                    if (item.HaveConvertation != 1 && checkPerss == true)
                        dataInvalidGiaiTrinh.push(item);
                    if (item.Images_1 == '' || item.Images_1 == null || item.Images_1 == undefined)
                        dataInvalid.push(item);
                });

                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải upload hình lỗi"); return;
                }

                if (dataInvalidGiaiTrinh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình"); return;
                }
                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData
                var dataInvalidGiaiTrinh = [], dataInvalid = [];

                myData = hot == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(myData, function (index, item) {
                    if (item.HaveConvertation != 1 && checkPerss == true)
                        dataInvalidGiaiTrinh.push(item);
                    if (item.Images_1 == '' || item.Images_1 == null || item.Images_1 == undefined)
                        dataInvalid.push(item);
                });

                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải upload hình lỗi"); return;
                }

                if (dataInvalidGiaiTrinh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình"); return;
                }
                var message = $("#Message").val();

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () {
                    return this.value;
                }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData
                var dataInvalidGiaiTrinh = [], dataInvalid = [];

                myData = hot == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                $.each(myData, function (index, item) {
                    if (item.HaveConvertation != 1 && checkPerss == true)
                        dataInvalidGiaiTrinh.push(item);
                    if (item.Images_1 == '' || item.Images_1 == null || item.Images_1 == undefined)
                        dataInvalid.push(item);
                });

                if (dataInvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải upload hình lỗi"); return;
                }

                if (dataInvalidGiaiTrinh.length > 0) {
                    XFunction.RenderMessage("error", "Phải nhập giải trình"); return;
                }
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // xuất đổi cấu hình imei ko ton kho

    //  ===154:Bill Vận chuyển===
    function contruct_154() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;

            var dataSourceServiceName = [''];
            var dataSourceService = [];
            $.get('/Requests/GetTranderService', function (respone) {
                if (respone !== '' && respone !== null && respone !== undefined && respone.length > 0) {
                    dataSourceService = respone;
                    $.each(respone, function (index, item) {
                        dataSourceServiceName.push(item.Name);
                    });
                }
            });
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkPerss = permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isSender ? true : false;
            var checkEdit = false;
            if (checkPerss == true && (CL.RequestIdRefer == null || CL.RequestIdRefer == "" || CL.RequestIdRefer == undefined)) {
                checkEdit = true;
            }
            var renderLineTable = function (uri) {
                var strRe = '';
                strRe += '<tr>'

                strRe += '<td>';
                var stringImage = '';
                var duoi = (uri != '' && uri != null && uri != undefined) ? uri.split('.')[1].toString().toLowerCase() : '';
                var tenfile = (uri != '' && uri != null && uri != undefined) ? uri.split('/')[3].toString() : '';
                if (duoi === '' || duoi === undefined || duoi === null) {
                    duoi = '';
                } else {
                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                        stringImage = '<a href="' + uri + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a> ';
                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                        stringImage = '<a href="' + uri + '" download><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>';
                    } else {
                        stringImage = '<a href="' + uri + '" dowload><i class="fa fa-file-word-o"></i> ' + tenfile + '</a> ';
                    }
                }
                strRe += stringImage;
                strRe += '</td>';

                strRe += '<td>';
                strRe += ' <input type="checkbox" class="clDeleteImage" name="chkDeleteImage" value="' + uri + '">';
                strRe += '</td>';

                strRe += '</tr>'
                return strRe;
            }


            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            var l_ColHeader_Array = [
                'ShopSend', 'Property1', 'QuanHuyenGui', 'TinhThanhGui', 'EmpCode',
                'ShopPhongBanNhan', 'Property5', 'QuanHuyenNhan', 'TinhThanhNhan', 'Property4', 'CustomerCode',
                'MaLoaiHangHoa', 'ProductName', 'ProductCode', 'Quantity3', 'Quantity1', 'Property10', 'TenNhaVanChuyen', 'DichVuVanChuyen', 'HinhThucThanhToan', 'CuocPhiMin', 'Note',
                'Time1', 'Money1', 'Quantity2', 'Price', 'XinHuyBill', 'CustomerName'
            ];
            var setting = function () {
                return {
                    data: dataHandsontable,
                    minCols: 12,
                    startCols: 9,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    copyColsLimit: 9,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 9,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 2,
                    startRows: 2,

                    //viewportRowRenderingOffset : 'auto',
                    //maxRows: dataMkoMkoHandsontable+1,
                    //minRows: dataMkoMkoHandsontable+1,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: true,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    colHeaders: [
                        'Phòng ban gởi', 'Địa chỉ phòng ban gửi', 'Quận huyện của Phòng ban gửi', 'Tỉnh thành phòng ban gửi', 'Số điện thoại người gửi',
                        'Shop/PB nhận', 'Địa chỉ Shop/PB nhận', 'Quận/huyện của Shop/PB nhận', 'Tỉnh/TP Shop/PB nhận', 'Họ tên người nhận', 'Số điện thoại người nhận',
                        'Loại hàng', 'Tên hàng hóa chuyển', 'Số chứng từ vận chuyển', 'Số lượng', 'Số kiện', 'Trọng lượng(Kg)', 'Nhà vận chuyển', 'Dịch vụ', 'Hình thức thanh toán', 'Cước phí (Min)', 'Ghi chú',
                        'Ngày giao dự kiến', 'Trọng lượng của NVC(Kg)', 'Số kiện NVC', 'Các loại phí (VND)', 'Xin hủy', 'Ghi chú NVC'],//, 'Xin hủy', 'Ghi chú NVC'
                    columns: [
                        { data: 'ShopSend', type: 'text', readOnly: true, className: 'htCenter' }, //1. Phòng ban gửi
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htCenter' },//2. Địa chỉ phòng ban gửi
                        { data: 'QuanHuyenGui', type: 'text', readOnly: true, className: 'htCenter', },//3. Quận huyện gửi
                        { data: 'TinhThanhGui', type: 'text', readOnly: true, className: 'htCenter' },//4. Tỉnh thành phố gửi
                        { data: 'EmpCode', type: 'text', readOnly: true, className: 'htCenter' },//4. Tỉnh thành phố gửi

                        { data: 'ShopPhongBanNhan', type: 'text', readOnly: true, className: 'htCenter', },//5. Shop/Phòng ban nhận
                        { data: 'Property5', type: 'text', readOnly: true, className: 'htCenter' },//6. Địa chỉ shop phòng ban nhận
                        { data: 'QuanHuyenNhan', type: 'text', readOnly: true, className: 'htCenter' },//7. quận huyện shop phòng ban nahn65
                        { data: 'TinhThanhNhan', type: 'text', readOnly: true, className: 'htCenter' },//8. Tỉnh thành shop phòng ban nhận
                        { data: 'Property4', type: 'text', readOnly: true, className: 'htCenter' },
                        { data: 'CustomerCode', type: 'text', readOnly: true, className: 'htCenter' },//9.Số diện thoại

                        { data: 'MaLoaiHangHoa', type: 'text', readOnly: true, className: 'htCenter' },//9. Loại hàng hóa
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htCenter' },//10. Nội dung đơn hàng
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htCenter', },//11. Số chứng từ vận chuyển
                        { data: 'Quantity3', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0' },//12. Số kiện
                        { data: 'Quantity1', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0' },//12. Số kiện
                        { data: 'Property10', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0.00' },//13. Trong lượng
                        { data: 'TenNhaVanChuyen', type: 'text', readOnly: true, width: 150 },//14. Nhà vận chuyển
                        { data: 'DichVuVanChuyen', type: 'text', readOnly: true, width: 170, className: 'htCenter' },//15. Dịch vụ
                        { data: 'HinhThucThanhToan', type: 'text', readOnly: true, width: 150, className: 'htCenter' },//16. Hình thức thanh toán
                        { data: 'CuocPhiMin', type: 'text', readOnly: true, className: 'htCenter' }, // Cước phí (Min)
                        { data: 'Note', type: 'text', readOnly: true, className: 'htCenter' },//17. Ghi chú

                        { data: 'Time1', type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true, defaultDate: '01/01/1900', readOnly: true, className: 'htCenter' },//18. Ngày giao dự kiến
                        { data: 'Money1', type: 'numeric', format: '0,0.00', readOnly: true, className: 'htCenter' },//19. Trọng lượng NVC
                        { data: 'Quantity2', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0' },//20. Số kiện NVC
                        { data: 'Price', type: 'numeric', format: '0,0', readOnly: true, className: 'htCenter' },//21. Các loại phí
                        { data: 'XinHuyBill', editor: false, className: 'htCenter' },//Xin hủy bill
                        { data: 'CustomerName', readOnly: true, type: 'text', className: 'htCenter' },//Ghi chú nhà vận chuyển
                    ],
                    cells: function (row, col, prop) {
                        var cellProperties = {};
                        cellProperties.renderer = function (instance, td, row, col, prop, value) {
                            if (col >= l_ColHeader_Array.indexOf('ShopSend') && col <= l_ColHeader_Array.indexOf('EmpCode')) {
                                td.style.background = '#e6ffb3';
                            }
                            if (col >= l_ColHeader_Array.indexOf('ShopPhongBanNhan') && col <= l_ColHeader_Array.indexOf('CustomerCode')) {
                                td.style.background = '#ffccb3';
                            }
                            if (col >= l_ColHeader_Array.indexOf('MaLoaiHangHoa') && col <= l_ColHeader_Array.indexOf('Note')) {
                                td.style.background = '#ffcce6';
                            }
                            if (col >= l_ColHeader_Array.indexOf('Time1')) {
                                td.style.background = '#ccf2ff';
                            }
                            if ([
                                l_ColHeader_Array.indexOf('Quantity3'),
                                l_ColHeader_Array.indexOf('Quantity1'),
                                l_ColHeader_Array.indexOf('Money1'),
                                l_ColHeader_Array.indexOf('Quantity2'),
                                l_ColHeader_Array.indexOf('Price')
                            ].indexOf(col) >= 0) {
                                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                            }
                            else {
                                Handsontable.renderers.TextRenderer.apply(this, arguments);
                            }
                            if (col === l_ColHeader_Array.indexOf('XinHuyBill')) {
                                if (row === 0) {
                                    var $button = '';
                                    $button = $('<a class="renderlink"><i class="fa fa-times fa-hover-hidden fa-fw" style="color:red" ></i><i class="fa fa-keyboard-o fa-hover-show fa-fw" title="Hủy vận đơn"></i> </a>');
                                    $(td).empty().append($button);
                                    $button.click(function () {
                                        if (permisstion.isSender == true) {
                                            $("#MaNhaVanChuyen").val(respone[0].MaTenNhaVanChuyen);
                                            $("#MaBillVanChuyen").val(respone[0].ProductCode);
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/Details__BillVanChuyen__HuyBill");
                                            form.submit();
                                        }
                                        else {
                                            XFunction.RenderMessage("error", "Bạn không phải người tạo CallLog. Không thể hủy bill"); return;
                                        }
                                    });
                                }
                            }
                        };
                        return cellProperties;
                    }
                }
            }
            hot = new Handsontable(container, setting());

            $btnComment.on('click', function () {
                XFunction.RenderMessage("error", "CL cũ, không được phép thao tác!"); return;
            });
            $btnChangeStep.on('click', function () {
                XFunction.RenderMessage("error", "CL cũ, không được phép thao tác!"); return;
            });
        });
    };// bill vận chuyển khối BO
    function contruct_154__Ver2() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = respone;
            if (!!dataHandsontable && dataHandsontable.length > 0) {
                g_BillVanChuyen_ParentTypeId = dataHandsontable[0].Quantity4; // Mã Loại CL Cha
                g_BillVanChuyen_ParentRequestId = dataHandsontable[0].Quantity6; // Mã CL Cha
            }
            var dataSourceServiceName = [''];
            var dataSourceService = [];
            $.get('/Requests/GetTranderService', function (respone) {
                if (respone !== '' && respone !== null && respone !== undefined && respone.length > 0) {
                    dataSourceService = respone;
                    $.each(respone, function (index, item) {
                        dataSourceServiceName.push(item.Name);
                    });
                }
            });
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkPerss = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) ? true : false;
            var checkEdit = false;
            if (checkPerss == true && CL.Status < 4 && (!CL.RequestIdRefer)) {
                checkEdit = true;
            }
            var renderLineTable = function (uri) {
                var strRe = '';
                strRe += '<tr>'

                strRe += '<td>';
                var stringImage = '';
                var duoi = (uri != '' && uri != null && uri != undefined) ? uri.split('.')[1].toString().toLowerCase() : '';
                var tenfile = (uri != '' && uri != null && uri != undefined) ? uri.split('/')[3].toString() : '';
                if (duoi === '' || duoi === undefined || duoi === null) {
                    duoi = '';
                } else {
                    //var duoi = item1.split('.')[1].toString().toLowerCase();
                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                        stringImage = '<a href="' + uri + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a> ';
                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                        stringImage = '<a href="' + uri + '" download><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>';
                    } else {
                        stringImage = '<a href="' + uri + '" dowload><i class="fa fa-file-word-o"></i> ' + tenfile + '</a> ';
                    }
                }
                strRe += stringImage;
                strRe += '</td>';

                strRe += '<td>';
                strRe += ' <input type="checkbox" class="clDeleteImage" name="chkDeleteImage" value="' + uri + '">';
                strRe += '</td>';

                strRe += '</tr>'
                return strRe;
            }


            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            var l_ColHeader_Array = [
                'DuyetNVC', 'TuChoiNVC',
                'ShopSend', 'Property1', 'QuanHuyenGui', 'TinhThanhGui', 'EmpCode',
                'ShopPhongBanNhan', 'Property5', 'QuanHuyenNhan', 'TinhThanhNhan', 'Property4', 'CustomerCode',

                //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                'MaLoaiHangHoa', 'ProductName', 'ProductCode', 'Quantity3', 'Quantity1', 'Property12', 'Property10', 'TenNhaVanChuyen', 'DichVuVanChuyen', 'HinhThucThanhToan', 'CuocPhiMin', 'Note',
                //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

                'Time1', 'Money1', 'Quantity2', 'Price', 'XinHuyBill', 'CustomerName'
            ];
            var setting = function () {
                return {
                    data: dataHandsontable,
                    minCols: 12,
                    startCols: 9,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    copyColsLimit: 9,
                    currentColClassName: 'currentCol',
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 9,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: true,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    colHeaders: [
                        'Duyệt NVC', 'Từ chối NVC',
                        'Phòng ban gởi', 'Địa chỉ phòng ban gửi', 'Quận huyện của Phòng ban gửi', 'Tỉnh thành phòng ban gửi', 'Số điện thoại người gửi',
                        'Shop/PB nhận', 'Địa chỉ Shop/PB nhận', 'Quận/huyện của Shop/PB nhận', 'Tỉnh/TP Shop/PB nhận', 'Họ tên người nhận', 'Số điện thoại người nhận',

                        //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                        'Loại hàng', 'Tên hàng hóa chuyển', 'Số chứng từ vận chuyển', 'Số lượng', 'Số kiện', 'Trọng lượng ước tính (Kg)', 'Trọng lượng(Kg)', 'Nhà vận chuyển', 'Dịch vụ', 'Hình thức thanh toán', 'Cước phí (Min)', 'Ghi chú',
                        //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================

                        'Ngày giao dự kiến', 'Trọng lượng của NVC(Kg)', 'Số kiện NVC', 'Các loại phí (VND)', 'Xin hủy', 'Ghi chú NVC'],//, 'Xin hủy', 'Ghi chú NVC'
                    columns: [
                        { data: 'DuyetNVC', type: 'checkbox', readOnly: !checkEdit, checkedTemplate: 1, uncheckedTemplate: 0 }, //  Duyệt NVC
                        { data: 'TuChoiNVC', type: 'checkbox', readOnly: !checkEdit, checkedTemplate: 1, uncheckedTemplate: 0 }, //  Từ chối NVC
                        { data: 'ShopSend', type: 'text', readOnly: true, className: 'htCenter' }, //1. Phòng ban gửi
                        { data: 'Property1', type: 'text', readOnly: true, className: 'htCenter' },//2. Địa chỉ phòng ban gửi
                        { data: 'QuanHuyenGui', type: 'text', readOnly: true, className: 'htCenter', },//3. Quận huyện gửi
                        { data: 'TinhThanhGui', type: 'text', readOnly: true, className: 'htCenter' },//4. Tỉnh thành phố gửi
                        { data: 'EmpCode', type: 'text', readOnly: true, className: 'htCenter' },//4. Tỉnh thành phố gửi

                        { data: 'ShopPhongBanNhan', type: 'text', readOnly: true, className: 'htCenter', },//5. Shop/Phòng ban nhận
                        { data: 'Property5', type: 'text', readOnly: true, className: 'htCenter' },//6. Địa chỉ shop phòng ban nhận
                        { data: 'QuanHuyenNhan', type: 'text', readOnly: true, className: 'htCenter' },//7. quận huyện shop phòng ban nahn65
                        { data: 'TinhThanhNhan', type: 'text', readOnly: true, className: 'htCenter' },//8. Tỉnh thành shop phòng ban nhận
                        { data: 'Property4', type: 'text', readOnly: true, className: 'htCenter' },
                        { data: 'CustomerCode', type: 'text', readOnly: true, className: 'htCenter' },//9.Số diện thoại


                        //▼	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================
                        { data: 'MaLoaiHangHoa', type: 'text', readOnly: true, className: 'htCenter' },//9. Loại hàng hóa
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htCenter' },//10. Nội dung đơn hàng
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htCenter', },//11. Số chứng từ vận chuyển
                        { data: 'Quantity3', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0' },//12. Số kiện
                        { data: 'Quantity1', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0' },//12. Số kiện
                        { data: 'Property12', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0.00' },   //  Trọng lượng ước tính
                        { data: 'Property10', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0.00' },//13. Trọng lượng
                        { data: 'TenNhaVanChuyen', type: 'text', readOnly: true, width: 150 },//14. Nhà vận chuyển
                        { data: 'DichVuVanChuyen', type: 'text', readOnly: true, width: 170, className: 'htCenter' },//15. Dịch vụ
                        { data: 'HinhThucThanhToan', type: 'text', readOnly: true, width: 150, className: 'htCenter' },//16. Hình thức thanh toán
                        { data: 'CuocPhiMin', type: 'text', readOnly: true, className: 'htCenter' }, // Cước phí (Min)
                        { data: 'Note', type: 'text', readOnly: true, className: 'htCenter' },//17. Ghi chú
                        //▲	Edit - VietMXH - 21/10/2019 - Tạo Bill VC từ CL Đồ dùng HC==================================================


                        { data: 'Time1', type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true, defaultDate: '01/01/1900', readOnly: true, className: 'htCenter' },//18. Ngày giao dự kiến
                        { data: 'Money1', type: 'numeric', format: '0,0.00', readOnly: true, className: 'htCenter' },//19. Trọng lượng NVC
                        { data: 'Quantity2', type: 'numeric', readOnly: true, className: 'htCenter', format: '0,0' },//20. Số kiện NVC
                        { data: 'Price', type: 'numeric', format: '0,0', readOnly: true, className: 'htCenter' },//21. Các loại phí
                        { data: 'XinHuyBill', editor: false, readOnly: !checkEdit, className: 'htCenter' },//Xin hủy bill
                        { data: 'CustomerName', readOnly: true, type: 'text', className: 'htCenter' },//Ghi chú nhà vận chuyển
                    ],
                    beforeChange: function (changes, source) {
                        if (!changes || source == 'not')
                            return;
                        var instance = this;
                        changes.forEach(function (change) {
                            var row = change[0], col = change[1], oldValue = change[2], newValue = change[3];
                            switch (col) {
                                case 'DuyetNVC':
                                    if (newValue == true) {
                                        instance.setDataAtRowProp(row, 'TuChoiNVC', 0, 'not');
                                    }
                                    break;
                                case 'TuChoiNVC':
                                    if (newValue == true) {
                                        instance.setDataAtRowProp(row, 'DuyetNVC', 0, 'not');
                                    }
                                    break;
                                default:
                            }
                        });
                    },
                    cells: function (row, col, prop) {
                        var cellProperties = {};
                        cellProperties.renderer = function (instance, td, row, col, prop, value) {
                            if (col >= l_ColHeader_Array.indexOf('DuyetNVC') && col <= l_ColHeader_Array.indexOf('TuChoiNVC')) {
                                if (checkEdit) {
                                    td.style.background = 'lightyellow';
                                }
                            }
                            if (col >= l_ColHeader_Array.indexOf('ShopSend') && col <= l_ColHeader_Array.indexOf('EmpCode')) {
                                td.style.background = '#e6ffb3';
                            }
                            if (col >= l_ColHeader_Array.indexOf('ShopPhongBanNhan') && col <= l_ColHeader_Array.indexOf('CustomerCode')) {
                                td.style.background = '#ffccb3';
                            }
                            if (col >= l_ColHeader_Array.indexOf('MaLoaiHangHoa') && col <= l_ColHeader_Array.indexOf('Note')) {
                                td.style.background = '#ffcce6';
                            }
                            if (col >= l_ColHeader_Array.indexOf('Time1')) {
                                td.style.background = '#ccf2ff';
                            }
                            if ([
                                l_ColHeader_Array.indexOf('DuyetNVC'),
                                l_ColHeader_Array.indexOf('TuChoiNVC')
                            ].indexOf(col) >= 0) {
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                            else if ([
                                l_ColHeader_Array.indexOf('Quantity3'),
                                l_ColHeader_Array.indexOf('Quantity1'),
                                l_ColHeader_Array.indexOf('Money1'),
                                l_ColHeader_Array.indexOf('Quantity2'),
                                l_ColHeader_Array.indexOf('Price')
                            ].indexOf(col) >= 0) {
                                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                            }
                            else {
                                Handsontable.renderers.TextRenderer.apply(this, arguments);
                            }
                            if (col === l_ColHeader_Array.indexOf('XinHuyBill')) {
                                if (row === 0) {
                                    var $button = '';
                                    $button = $('<a class="renderlink"><i class="fa fa-times fa-hover-hidden fa-fw" style="color:red" ></i><i class="fa fa-keyboard-o fa-hover-show fa-fw" title="Hủy vận đơn"></i> </a>');
                                    $(td).empty().append($button);
                                    $button.click(function () {
                                        if (CL.Status < 4) {
                                            if (permisstion.isSender == true) {
                                                $("#MaNhaVanChuyen").val(respone[0].MaTenNhaVanChuyen);
                                                $("#MaBillVanChuyen").val(respone[0].ProductCode);
                                                var form = $("form#form-detail");
                                                form.attr("action", "/Requests/Details__BillVanChuyen__HuyBill");
                                                form.submit();
                                            }
                                            else {
                                                XFunction.RenderMessage("error", "Bạn Không phải Người tạo CallLog! Không thể hủy Bill!"); return;
                                            }
                                        }
                                        else {
                                            XFunction.RenderMessage("error", "CallLog Không được Hủy!"); return;
                                        }
                                    });
                                }
                            }
                        };
                        return cellProperties;
                    }
                }
            }
            hot = new Handsontable(container, setting());

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var dataReturn = [];
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                $.each(myData, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        DuyetNVC: (!!item.DuyetNVC && item.DuyetNVC == 1) ? (1) : ((!!item.TuChoiNVC && item.TuChoiNVC == 1) ? 0 : null),
                    });
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnChangeStep.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [], l_Data_ChuaDuyet = [];
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                $.each(myData, function (index, item) {
                    var l_DuyetNVC = (!!item.DuyetNVC && item.DuyetNVC == 1) ? (1) : ((!!item.TuChoiNVC && item.TuChoiNVC == 1) ? 0 : null);
                    if (l_DuyetNVC == 1 || l_DuyetNVC == 0) { }
                    else {
                        l_Data_ChuaDuyet.push(index + 1);
                    }
                    dataReturn.push({
                        Id: item.Id,
                        DuyetNVC: l_DuyetNVC,
                    });
                });
                if (!!l_Data_ChuaDuyet && l_Data_ChuaDuyet.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn \"Duyệt/Từ chối\" NVC!"); return;
                }

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
        });
    };// bill vận chuyển khối BO
    function contruct_155() {
        $('#sum-money').hide();
        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            var dataShopAll = [], dataShopAllName = [];
            $.get('/Requests/GetShopByRegion', { regionId: 0 }, function (data) {
                dataShopAll = data;
                $.each(data, function (index, item) {
                    dataShopAllName.push(item.WarehouseCode + '--' + item.WarehouseCodeB1 + '--' + item.WarehouseName);
                });
            });
            dataHc = data;
            var checkSender = false, checkAssiner;
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    checkSender = true;
                if (item == 'assigner' || item == 'groupAssigner')
                    checkAssiner = true;
            });
            //var checkEdit = checkAssiner == true && (CL.StepNo == 1 || CL.StepNo == 5) ? true : false;
            var checkEditSoLuongConfim = false;
            var checkEditSoLuongDat = false;
            if (checkAssiner == true && (CL.StepNo == 1 || CL.StepNo == 2) && status != 4 && status != 5) {
                checkEditSoLuongConfim = true;
            }
            if (checkAssiner == true && CL.StepNo == 5 && status != 4 && status != 5) {
                checkEditSoLuongDat = true;
            }
            //▼ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
            var HTXApp = false;

            if (CL.TypeId == 155 && CL.StepNo == 2 && checkAssiner == true) {
                HTXApp = true;
            }
            var sourceHinhThuc = ['Xuất từ NCC', 'Xuất từ kho HC'];
            //▲ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
            var setting = function () {
                return {
                    data: dataHc,
                    colHeaders: true,
                    rowHeaders: true,
                    stretchH: 'all',
                    startCols: 9,
                    maxCols: 9,
                    minCols: 9,
                    fillHandle: false,
                    allowInvalid: false,
                    currentRowClassName: 'currentRow',
                    fixedColumnsLeft: 1,
                    manualColumnResize: true,
                    manualRowResize: true,
                    outsideClickDeselects: true,
                    minSpareRows: 0,
                    maxRows: dataHc.length + 1,
                    minRows: dataHc.length + 1,
                    hiddenColumns: {
                        //   columns: [8],
                        indicators: true
                    },
                    colHeaders: ["Nhóm sản phẩm", "Mặt hàng", "Hình thức xuất", "Chi tiết thay đổi kho xuất sp", "Số lượng đặt", 'Số lương đặt Confirm', "Số lượng xác nhận của Shop/BO", 'Số lượng tồn kho', "Đơn giá", "Thành tiền", "Đơn vị tính", "Ghi chú", "Số giao dịch", "Số lượng xuất POS", "Số hóa đơn"], // Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                    columns: [
                        { data: "ProductGroup", readOnly: true, className: 'htLeft' }, //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        { data: "Item", readOnly: true, className: 'htLeft', width: 300 },
                        //▼ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                        { data: "HinhThucXuat", className: 'htLeft', type: 'autocomplete', source: sourceHinhThuc, width: 200, readOnly: !HTXApp },
                        { data: "Property2", readOnly: true, className: 'htLeft', type: 'text' },
                        //▲ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                        { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0' },
                        { data: 'Quantity1', readOnly: !checkEditSoLuongConfim, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                        { data: 'QuantityAvaiable', readOnly: !checkEditSoLuongDat, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                        { data: 'Quantity3', type: 'numeric', readOnly: true, format: '0,0' },
                        {
                            data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 80,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 8 && row === dataHc.length - 1) {// Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Sum', readOnly: true, type: 'numeric', format: '0,0', width: 150,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 9 && row === dataHc.length - 1) {//▲ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'center';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataHc, function (index, item) {
                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        { data: 'Unit', readOnly: true, className: 'htLeft', width: 100 },
                        { data: 'Note', readOnly: true, className: 'htLeft' },
                        { data: 'Property10', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity2', readOnly: true, className: 'htLeft' },
                        { data: 'Property9', readOnly: true, className: 'htLeft' }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'QuantityAvaiable') {
                                //▼ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                var value = changes[i][3], newthanhtien = value * hot.getDataAtCell(row, 8);
                                hot.setDataAtCell(row, 9, newthanhtien, 'not');
                                //▲ Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                return true;
                            }
                            if (col === 'Quantity1') {
                                var value = changes[i][3];
                                if (value > data[i].Quantity3 && requestInfo.StepNo == 2) {
                                    XFunction.RenderMessage("error", "Số lượng đặt confirm lớn hơn số lượng tồn kho");
                                    hot.setDataAtCell(row, 6, value, 'edit');// Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                    //return false;
                                }
                                else {
                                    hot.setDataAtCell(row, 6, value, 'edit');// Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
                                }
                                return true;
                            }
                        }
                    },
                    cells: function (row, col, prop) {
                        cellProperties = {};
                        if (row === dataHc.length - 1)
                            cellProperties.readOnly = true;
                        return cellProperties;
                    }
                };
            };
            var hot = new Handsontable(container, setting());
            var plugin = hot.getPlugin('hiddenColumns');
            if (requestInfo.StepNo == 1) {
                plugin.hideColumn(7);// Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất

            }
            else {
                plugin.showColumn(7);// Add - TrungNC3 - 13/11/2017 - Thêm Nhóm SP & Hình thức xuất
            }
            hot.render();
            $("#comment").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {

                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }
                }
            });
            $("#reply").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }

                }
            });
            $("#complete").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                }

            });
            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    if (CL.StepNo === 4) {
                        $.ajax({
                            url: '/Requests/CheckWarehouseConfig',
                            type: 'GET',
                            data: {
                                WarehouseCode: CL.FromShop,
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                console.log("ERROR!");
                            },
                            success: function (datasCF) {
                                if (datasCF[0].ShopConfig === 0) {
                                    $('#Approved_HuongXL_45').val('0');
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/ChangeStep");
                                    form.submit();

                                }
                                else if (datasCF[0].ShopConfig === 1) {
                                    $('#Approved_HuongXL_45').val('1');
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/ChangeStep");
                                    form.submit();
                                }
                                else if (datasCF[0].ShopConfig === -1) {
                                    if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                        $('#Approved_HuongXL_45').val('0');
                                        $('#Details').val(JSON.stringify(myData));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    }
                                    else {
                                        $('#Approved_HuongXL_45').val('1');
                                        $('#Details').val(JSON.stringify(myData));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    };
                                };
                            }
                        });
                    }
                    else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/ChangeStep");
                        form.submit();
                    };
                };
            });
        });
    };//Đồ dùng hành chính hành chính tạo cho shop mới
    function contruct_156() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApproved = false;
            $.each(respone, function (number, values) {
                if ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && (CL.Status != 4 && CL.Status != 5)) {
                    checkApproved = true;
                }
                else {
                    checkApproved = false;
                }
            });
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    hiddenColumns: {
                        //    columns: [9],
                        indicators: true
                    }
                    ,
                    //====================================Oder ==============================================
                    colHeaders: ['Duyệt', 'Không duyệt', 'Mã nhân viên', 'Họ tên nhân viên', 'Chức danh', 'Lý do'],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !checkApproved,
                            checkedTemplate: 1, uncheckedTemplate: 0,
                            width: 50
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !checkApproved,
                            checkedTemplate: 1, uncheckedTemplate: 0,
                            width: 80
                        },
                        { data: 'EmployeeCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'EmployeeName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'JobTitleName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        var cout = 0;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'Approved1') {
                                var value = changes[i][3];
                                if (value == true) {
                                    $.each(dataHandsontable, function (index, item) {
                                        item.Approved1 = 1;
                                        item.Approved2 = 0;
                                        cout += 1;
                                    });
                                    hot.render();
                                }
                                return true;
                            }
                            if (col === 'Approved2') {
                                var value = changes[i][3];
                                if (value == true) {
                                    $.each(dataHandsontable, function (index, item) {
                                        item.Approved1 = 0;
                                        item.Approved2 = 1;
                                        cout += 1;
                                    });
                                    hot.render();
                                }
                                return true;
                            }
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            //===========================
            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng cập nhật đầy đủ trạng thái duyệt hoặc không duyệt!"); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id, Approved: item.Approved2 == null || item.Approved2 == undefined || item.Approved2 == '' || item.Approved2 == 0 ? true : false,
                    });
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }; // Duyệt reset password Inside
    function contruct_158() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.Status < 4) ? true : false;
            var dataNganhNhan = [], dataNhanHang = [];
            var NganhHangPos = [], NganhhangPosName = [''];
            var NhanHangPos = [], NhanHangPosName = [''];
            $.get('/Requests/GetNganhNhanHangTheoUser', { user: CL.Assigner }, function (dataResult) {
                var data = $.parseJSON(dataResult);
                NganhHangPos = data.danhsachnganhhang;
                dataNganhNhan = data.allnhanhang;
                if (NganhHangPos != '' && NganhHangPos != null && NganhHangPos != undefined) {
                    $.each(NganhHangPos, function (index, item) {
                        NganhhangPosName.push(item.TenNganhHang);
                    });
                    if (respone[0].NganhHang != '' && respone[0].NganhHang != null && respone[0].NganhHang != undefined) {
                        dataNhanHang = $.grep(dataNganhNhan, function (item, index) {
                            return item.TenNganhHang == respone[0].NganhHang;
                        });

                        $.each(dataNhanHang, function (index, item) {
                            NhanHangPosName.push(item.TenNhanHang);
                        });
                    }
                }
            });



            //$.get('/Requests/GetAllNhanHangTheoPos', function (respone) {
            //    if (respone != '' && respone != null && respone != undefined) {
            //        NhanHangPos = respone;
            //        $.each(NhanHangPos, function (index, item) {
            //            NhanHangPosName.push(item.Name);
            //        });
            //        //console.log(NganhhangPosName);
            //    }
            //});            
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 4,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 5,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Duyệt',
                            'Từ chối duyệt',
                            'Mã sản phẩm',
                            'Tên sản phẩm',
                            'Ngành hàng chịu phí',
                            'Nhãn hàng chịu phí',
                            'Đơn hàng truy thu (sau VAT)',
                            'Số SO',
                            'IMEI',
                            'Số lượng',
                            'Mã CTKM',
                        ],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id != '' && id != null && id != undefined)
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                else
                                    Handsontable.TextCell.renderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: 'htLeft',
                            readOnly: !check,
                            checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id != '' && id != null && id != undefined)
                                    Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                else
                                    Handsontable.TextCell.renderer.apply(this, arguments);
                            }
                        },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        {
                            data: 'NganhHang', type: 'dropdown', className: 'htLeft', source: NganhhangPosName, width: 200, readOnly: !check,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id != '' && id != null && id != undefined) {
                                    cellProperties.source = NganhhangPosName;
                                    Handsontable.DropdownCell.renderer.apply(this, arguments);
                                } else {
                                    cellProperties.readOnly = true;
                                    cellProperties.source = [''];
                                }
                            }
                        },
                        {
                            data: 'NhanHang', type: 'dropdown', className: 'htLeft', source: NhanHangPosName, width: 200, readOnly: !check,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var id = instance.getDataAtRowProp(row, 'Id');
                                if (id != '' && id != null && id != undefined) {
                                    //cellProperties.source = NhanHangPosName;
                                    Handsontable.DropdownCell.renderer.apply(this, arguments);
                                } else {
                                    cellProperties.readOnly = true;
                                    cellProperties.source = [''];
                                }
                            }
                        },
                        { data: 'Money1', type: 'numeric', className: 'htLeft', readOnly: !check, format: '0,0' },
                        { data: 'Property3', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Imei', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity', type: 'numeric', format: '0,0', className: 'htLeft', readOnly: true },
                        { data: 'Property5', type: 'text', className: 'htLeft', readOnly: true },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (statusRequest != 4) {
                                if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, null, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 0, null, 'not');
                                    }
                                    return true;
                                }
                            }
                            else {
                                if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, null, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, null, 'not');
                                        XFunction.RenderMessage("error", "Không được chuyển sang trạng thái không duyệt khi CallLog đã hoàn tất");
                                    }
                                    return false;

                                }
                            }

                        }


                    },
                    afterChange: function (changes, source) {
                        if (source == 'not') return;
                        if (changes == null) return;
                        var instance = this;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1], value = changes[i][3];
                            var cellProperties, options;
                            if (col == 'NganhHang') {
                                if (value != '' && value != null && value != undefined) {
                                    var getNhanHang = $.grep(dataNganhNhan, function (item, index) {
                                        return item.TenNganhHang == value;
                                    });

                                    var dataNhanHangName = [];
                                    if (getNhanHang != '' && getNhanHang != null && getNhanHang != undefined) {
                                        $.each(getNhanHang, function (index, item) {
                                            dataNhanHangName.push(item.TenNhanHang);
                                        });
                                        dataNhanHang = getNhanHang;
                                        cellProperties = instance.getCellMeta(row, 5);
                                        cellProperties.source = dataNhanHangName;
                                        instance.setDataAtRowProp(row, 'NhanHang', '', 'not');
                                    }
                                    else {
                                        dataNhanHangName = [''];
                                    }
                                }
                            }

                        }
                    }
                    //cells: function (row, col, prop) {
                    //    var cellProperties = {};
                    //    if (Id == '' || Id == null || Id == undefined) {
                    //        cellProperties.readOnly = true;
                    //    }
                    //    return cellProperties;
                    //},
                };
            };

            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                //$.each(myData, function (index, item) {
                //    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                //    else { datainvalid.push(item); }
                //});
                //if (datainvalid.length > 0) {
                //    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                //}
                var datareturn = [];
                $.each(myData, function (index, item) {
                    var maNganhHang = $.grep(NganhHangPos, function (item2, index2) {
                        return item.NganhHang == item2.TenNganhHang;
                    });
                    var maNhanHang = $.grep(dataNhanHang, function (item3, index3) {
                        return item.NhanHang == item3.TenNhanHang;
                    });

                    datareturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : item.Approved2 == 1 ? false : null,
                        NganhHang: maNganhHang.length == 0 ? '' : maNganhHang[0].NganhHang,
                        NhanHang: maNhanHang.length == 0 ? '' : maNhanHang[0].NhanHang,
                        DonGiaTruyTHu: item.Money1
                    });
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });

            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = []
                $.each(myData, function (index, item) {
                    if (item.Approved1 == 1 || item.Approved2 == 1) { }
                    else { datainvalid.push(item); }
                });
                if (datainvalid.length > 0) {
                    XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                }

                var dataInvalidNganhHang = [];
                var dataInvalidNhanHang = [];
                var dataInvalidDonGiaTruyThu = [];
                $.each(myData, function (index, item) {
                    if ((item.NganhHang == '' || item.NganhHang == null || item.NganhHang == undefined) && item.Approved1 == 1) {
                        dataInvalidNganhHang.push(item);
                    }
                    if ((item.NhanHang == '' || item.NhanHang == null || item.NhanHang == undefined) && item.Approved1 == 1) {
                        dataInvalidNhanHang.push(item);
                    }
                    if ((item.Money1 == '' || item.Money1 == null || item.Money1 == undefined) && item.Approved1 !== 1) {
                        dataInvalidDonGiaTruyThu.push(item);
                    }
                });
                if (dataInvalidNganhHang.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn ngành hàng khi duyệt"); return;
                }

                if (dataInvalidNhanHang.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn nhãn hàng khi duyệt"); return;
                }

                if (dataInvalidDonGiaTruyThu.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập đơn giá truy thu (sau VAT) khi không duyệt"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    var maNganhHang = $.grep(NganhHangPos, function (item2, index2) {
                        return item.NganhHang == item2.TenNganhHang;
                    });
                    var maNhanHang = $.grep(dataNhanHang, function (item3, index3) {
                        return item.NhanHang == item3.TenNhanHang;
                    });

                    datareturn.push({
                        Id: item.Id,
                        Approved: item.Approved1 == 1 ? true : item.Approved2 == 1 ? false : null,
                        NganhHang: maNganhHang.length == 0 ? '' : maNganhHang[0].NganhHang,
                        NhanHang: maNhanHang.length == 0 ? '' : maNhanHang[0].NhanHang,
                        DonGiaTruyTHu: item.Money1
                    });
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    }
    function contruct_161() {
        $('#sum-money').hide();
        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            dataMko = data;
            var checkSender = false, checkAssigner = false;
            var DataFormsProcessing = ['Cấp mới', 'Bảo hành'];
            $.each(permissons, function (index, item) {

                if ((item == 'assigner' || item == 'groupAssigner') && (status != 3 && status != 4 && status != 5) && (CL.StepNo != 4 && CL.StepNo != 3)) { checkAssigner = true }
                if (item == 'sender' && (status == 3 || status == 4)) { checkSender = true }

            });

            var Setting_Mko = function () {
                return {
                    data: dataMko,
                    colHeaders: true,
                    rowHeaders: true,
                    //stretchH: 'all',
                    startCols: 9,
                    maxCols: 9,
                    minCols: 9,
                    fillHandle: false,
                    allowInvalid: false,
                    currentRowClassName: 'currentRow',
                    manualColumnResize: true,
                    manualRowResize: true,
                    outsideClickDeselects: true,
                    minSpareRows: 1,
                    maxRows: dataMko.length + 1,
                    colHeaders: ["Hình thức xử lý", "Mặt hàng", "Số lượng đặt", "Số lượng bảo hành", "Số lượng cấp mới", "Đơn giá", "Thành tiền", "Đơn vị tính", "Ghi chú"],
                    columns: [
                        { data: "Property1", type: 'dropdown', readOnly: !checkAssigner, source: DataFormsProcessing, className: 'htLeft' },
                        { data: "Item", readOnly: true, className: 'htLeft', width: 300 },
                        { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0', width: 100, validator: Validater.number, allowInvalid: false, },
                        { data: 'Quantity1', type: 'numeric', readOnly: !checkAssigner, format: '0,0', width: 150, validator: Validater.number, allowInvalid: false, },
                        { data: 'Quantity2', type: 'numeric', readOnly: !checkAssigner, format: '0,0', width: 150, validator: Validater.number, allowInvalid: false, },
                        {
                            data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 80,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 5 && row === dataMko.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Sum', readOnly: true, type: 'numeric', format: '0,00', width: 150,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 6 && row === dataMko.length - 1) {
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataMko, function (index, item) {
                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        { data: 'Unit', readOnly: true, className: 'htLeft', width: 100 },
                        { data: 'Note', readOnly: true, className: 'htLeft' }
                    ],

                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];

                            if (col === 'Quantity2') {
                                var value = changes[i][3];
                                var quantity = hot.getDataAtRowProp(row, 'Quantity');
                                var quantity1 = hot.getDataAtRowProp(row, 'Quantity1');
                                if (value > quantity) {
                                    XFunction.RenderMessage("error", "số cấp mới không được lớn hơn số đặt!");
                                    return false;
                                }
                                else if ((value + quantity1) > quantity) {
                                    XFunction.RenderMessage("error", "Tổng số lượng bảo hành và cấp mới phải nhỏ hơn hoặc bằng số lượng đặt!");
                                    return false;
                                }
                                else {
                                    var newthanhtien = (value * hot.getDataAtCell(row, 5)) + (quantity1 * hot.getDataAtCell(row, 5));
                                    hot.setDataAtCell(row, 6, newthanhtien, 'not');
                                    hot.setDataAtCell(row, 4, value, 'not');
                                    return true;
                                }
                            }
                            if (col === 'Quantity1') {
                                var value = changes[i][3];
                                var quantity = hot.getDataAtRowProp(row, 'Quantity');
                                var quantity2 = hot.getDataAtRowProp(row, 'Quantity2');
                                if (value > quantity) {
                                    XFunction.RenderMessage("error", "số bảo hành không được lớn hơn số đặt!");
                                    return false;
                                }
                                else if ((value + quantity2) > quantity) {
                                    XFunction.RenderMessage("error", "Tổng số lượng bảo hành và cấp mới phải nhỏ hơn hoặc bằng số lượng đặt!");
                                    hot.setDataAtCell(row, 3, 0, 'not');
                                }

                                else {
                                    var newthanhtien = (value * hot.getDataAtCell(row, 5)) + (quantity2 * hot.getDataAtCell(row, 5));
                                    hot.setDataAtCell(row, 6, newthanhtien, 'not');
                                    hot.setDataAtCell(row, 3, value, 'not');
                                    return true;
                                }
                            }

                        }
                    },
                    cells: function (row, col, prop) {
                        var cellProperties = {};
                        if (row == dataMko.length - 1) {
                            cellProperties.readOnly = true;
                        }
                        return cellProperties;
                    },
                };
            };
            var hot = new Handsontable(container, Setting_Mko());
            $("#comment").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }
                }
            });
            $("#reply").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }
                }
            });
            $("#complete").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                }
            });
            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                }
            });
            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });
        });
    };
    function contruct_162() {
        $('#sum-money').hide();
        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            dataHc = data;
            var checkSender = false, checkAssiner;
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    checkSender = true;
                if (item == 'assigner' || item == 'groupAssigner')
                    checkAssiner = true;
            });
            var checkEdit = checkAssiner == false;
            var EditSoluongConfirm = false;
            var EditSoluongDat = false;
            //______________
            if (CL.TypeId == 162 && (CL.StepNo == 1 || CL.StepNo == 2) && (status != 4 && status != 5) && checkAssiner == true) {
                EditSoluongConfirm = true;
            }
            if (CL.TypeId == 162 && (CL.StepNo == 5) && (status != 4 && status != 5)) {
                EditSoluongDat = true;
            }
            //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
            var HTXApp = false;
            if (CL.TypeId == 162 && CL.StepNo == 2) {
                HTXApp = true;
            }
            var sourceHinhThuc = ['Xuất từ NCC', 'Xuất từ kho HC'];
            //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
            //______________
            var setting = function () {
                return {
                    data: dataHc,
                    colHeaders: true,
                    rowHeaders: true,
                    stretchH: 'all',
                    // startCols: 9,
                    // maxCols: 9,
                    // minCols: 9,
                    fillHandle: false,
                    allowInvalid: false,
                    currentRowClassName: 'currentRow',
                    fixedColumnsLeft: 1,
                    manualColumnResize: true,
                    manualRowResize: true,
                    outsideClickDeselects: true,
                    minSpareRows: 0,
                    maxRows: dataHc.length + 1,
                    minRows: dataHc.length + 1,
                    colHeaders: ["Nhóm sản phẩm", "Mặt hàng", "Hình thức xuất", "Lịch sử hình thức xuất", "Số lượng tồn kho", "Số lượng đặt", 'Số lương đặt Confirm', "Số lượng xác nhận của Shop/BO", "Đơn giá", "Thành tiền", "Đơn vị tính", "Ghi chú", "Số giao dịch", "Số lượng xuất hoá đơn", "Số hoá đơn"],//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                    columns: [
                        { data: "ProductGroup", readOnly: true, className: 'htLeft' },//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        { data: "Item", readOnly: true, className: 'htLeft' },
                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        { data: "HinhThucXuat", className: 'htLeft', type: 'autocomplete', source: sourceHinhThuc, width: 200, readOnly: !HTXApp },
                        { data: "Property2", readOnly: true, className: 'htLeft', type: 'text' },
                        //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        { data: 'Quantity3', type: 'numeric', readOnly: true, format: '0,0' },
                        { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0' },

                        { data: 'Quantity1', readOnly: !EditSoluongConfirm, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                        { data: 'QuantityAvaiable', readOnly: !EditSoluongDat, type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, },
                        {
                            data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 80,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 8 && row === dataHc.length - 1) {//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    value = 'Tổng tiền:';
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Sum', readOnly: true, type: 'numeric', format: '0,0', width: 150,
                            renderer: function (instance, td, row, col, prop, value) {
                                if (col === 9 && row === dataHc.length - 1) {//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                    td.style.fontWeight = 'bold';
                                    td.style.textAlign = 'right';
                                    td.style.color = 'green';
                                    var total = 0;
                                    $.each(dataHc, function (index, item) {
                                        (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                    });
                                    value = total;
                                }
                                Handsontable.NumericRenderer.apply(this, arguments);
                            }
                        },
                        { data: 'Unit', readOnly: true, className: 'htLeft', width: 100 },
                        { data: 'Note', readOnly: true, className: 'htLeft' },
                        { data: 'Property10', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity2', readOnly: true, className: 'htLeft', type: 'numeric', format: '0,0' },
                        { data: 'Property9', readOnly: true, className: 'htLeft', type: 'text' }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'QuantityAvaiable') {
                                var value = changes[i][3], newthanhtien = value * hot.getDataAtCell(row, 8);//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                hot.setDataAtCell(row, 9, newthanhtien, 'not');//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                return true;
                            }
                            if (col === 'Quantity1') {
                                var value = changes[i][3];
                                hot.setDataAtCell(row, 7, value, 'edit');//▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                                return true;
                            }
                            //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                            if (col === 'HinhThucXuat') {
                                var value = changes[i][3];
                                if (value == '' || value == null || value == undefined) {
                                    return false;
                                }
                                else {
                                    var listArr = [];
                                    $.each(sourceHinhThuc, function (index, item) {
                                        listArr.push(item);
                                    });
                                    if ($.inArray(value, listArr) == -1) {
                                        return false;
                                    }
                                }
                            }
                            //▲ Add - TrungNC3 - 11/10/2017 - Thêm Cột mã nhóm sản phẩm vào nhóm yêu cầu Hành chính
                        }
                    },
                    cells: function (row, col, prop) {
                        cellProperties = {};
                        if (row === dataHc.length - 1)
                            cellProperties.readOnly = true;
                        return cellProperties;
                    }
                };
            };
            var hot = new Handsontable(container, setting());
            $("#comment").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }
                }
            });
            $("#reply").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                    } else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }

                }
            });
            $("#complete").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                }

            });
            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại");
                } else {
                    if (CL.StepNo === 4) {
                        $.ajax({
                            url: '/Requests/CheckWarehouseConfig',
                            type: 'GET',
                            data: {
                                WarehouseCode: CL.FromShop,
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                console.log("ERROR!");
                            },
                            success: function (datasCF) {
                                if (datasCF[0].ShopConfig === 0) {
                                    $('#Approved_HuongXL_45').val('0');
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/ChangeStep");
                                    form.submit();

                                }
                                else if (datasCF[0].ShopConfig === 1) {
                                    $('#Approved_HuongXL_45').val('1');
                                    $('#Details').val(JSON.stringify(myData));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/ChangeStep");
                                    form.submit();
                                }
                                else if (datasCF[0].ShopConfig === -1) {
                                    if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                        $('#Approved_HuongXL_45').val('0');
                                        $('#Details').val(JSON.stringify(myData));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    }
                                    else {
                                        $('#Approved_HuongXL_45').val('1');
                                        $('#Details').val(JSON.stringify(myData));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    };
                                };
                            }
                        });
                    }
                    else {
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/ChangeStep");
                        form.submit();
                    };
                };
            });
        });
    }; // ĐỒ DÙNG KỸ THUẬT HC TẠO

    /*▼ Add - TrungNC3 - 2017.09.27 - Up thực CR - Cấp bóng đèn bảo hành bóng đèn*/
    function contruct_164() {
        $('#sum-money').hide();
        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            var container2 = $$('handsontableGanTruyThu'), hot2;
            var rowLine = '';
            var dataShopAll = [], dataShopAllName = [], dataEmpShop = [], dataEmpShopName = [''];
            $.get('/Requests/GetEmpsShopOfRequest', { requestId: CL.Id }, function (data) {
                if (data !== null && data !== '' && data !== undefined && data.length > 0) {
                    dataEmpShop = data;
                    $.each(data, function (index, item) {
                        dataEmpShopName.push(item.EmployeeCode + '--' + item.EmployeeName);
                    });
                }
            });
            $.get('/Requests/GetShopByRegion', { regionId: 0 }, function (data) {
                dataShopAll = data;
                $.each(data, function (index, item) {
                    dataShopAllName.push(item.WarehouseCode + '--' + item.WarehouseCodeB1 + '--' + item.WarehouseName);
                });
            });

            dataHc = data;
            var checkSender = false, checkAssiner = false, checkOldStepAssigner = false;
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    checkSender = true;
                if (item == 'assigner' || item == 'groupAssigner')
                    checkAssiner = true;
                if (item == 'oldStepAssigner')
                    checkOldStepAssigner = true;
            });
            //var checkEdit = checkAssiner == true && (CL.StepNo == 1 || CL.StepNo == 5) ? true : false;
            var checkEditSoLuongConfim = false;
            if (checkAssiner == true) {
                checkEditSoLuongConfim = true;
            }
            var rowTest;
            var RequestDetailId;
            var dataLoadAfter = [], dataLoadAfter1 = [], MoneyGrid1 = 0;

            var setShow = function (str) {
                Money = Math.ceil(str);
                var stringSum = Money.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                return stringSum;
            }

            var actionRendererEmployeesHtml = function (instance, td, row, col, prop, value, cellProperties) {
                var valid = instance.getDataAtRowProp(row, 'Id');
                var Images_1 = instance.getDataAtRowProp(row, 'EmployeeCode');
                var $button = ''
                if (valid === null || valid === '' || valid === undefined ||
                    Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                    $button = '';
                } else {
                    $button = Images_1;
                }
                $(td).empty().append($button);

                td.style.textAlign = 'left';
                td.style.fontWeight = 'bold';
            };

            var actionRendererMoneyHtml = function (instance, td, row, col, prop, value, cellProperties) {
                var valid = instance.getDataAtRowProp(row, 'Id');
                var Images_1 = instance.getDataAtRowProp(row, 'MoneyCollection');
                var $button = ''
                if (valid === null || valid === '' || valid === undefined ||
                    Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                    $button = '';
                } else {
                    $button = Images_1;
                }
                $(td).empty().append($button);

                td.style.textAlign = 'right';
                td.style.fontWeight = 'bold';
            };

            var actionRendererMonthHtml = function (instance, td, row, col, prop, value, cellProperties) {
                var valid = instance.getDataAtRowProp(row, 'Id');
                var Images_1 = instance.getDataAtRowProp(row, 'MonthOfCollection');
                var $button = ''
                if (valid === null || valid === '' || valid === undefined ||
                    Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                    $button = '';
                } else {
                    $button = Images_1;
                }
                $(td).empty().append($button);

                td.style.textAlign = 'right';
                td.style.fontWeight = 'bold';
            };
            var checkTrue = false;

            var setting = function () {
                return {
                    data: dataHc,
                    colHeaders: true,
                    rowHeaders: true,
                    stretchH: 'all',
                    startCols: 16,
                    maxCols: 16,
                    minCols: 16,
                    fillHandle: false,
                    allowInvalid: false,
                    currentRowClassName: 'currentRow',
                    fixedColumnsLeft: 2,
                    manualColumnResize: true,
                    manualRowResize: true,
                    minSpareRows: 5,
                    comments: true,
                    wordWrap: true,
                    //▼ Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                    hiddenColumns: {
                        //   columns: [8],
                        indicators: true
                    },
                    //▲ Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                    nestedHeaders: [
                        //▼ Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                        ["", "", { label: "SL shop gửi lên HC", colspan: 5 }, "", "", "", "", "", "", ""],
                        ["Tên mặt hàng", "Số lượng", { label: "SL không được BH", colspan: 3 }, "SL được BH", "SL bóng BH được tới hiện tại", "SL truy thu", "Tên NV truy thu", "Số tiền truy thu", "Số tháng truy thu", "Nguyên nhân truy thu", "Lý do khác", "Ghi chú"],
                        ["", "", "Vỡ", "Hết hạn BH", "Khác", "", "", "", "", "", "", "", "", ""]
                        //▲ Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                    ],
                    columns: [
                        { data: "ItemName", readOnly: true, className: 'htLeft', width: 300 },
                        { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0', width: 100 },
                        { data: 'Quantity1', allowEmpty: true, correctFormat: true, allowInvalid: true, type: 'numeric', format: '0,0', validator: Validater.number, width: 135 },
                        { data: 'Quantity2', allowEmpty: true, correctFormat: true, allowInvalid: true, type: 'numeric', format: '0,0', validator: Validater.number, width: 120 },
                        { data: 'Quantity3', allowEmpty: true, correctFormat: true, allowInvalid: true, type: 'numeric', format: '0,0', validator: Validater.number, width: 120 },
                        { data: 'Quantity4', allowEmpty: true, correctFormat: true, allowInvalid: true, type: 'numeric', format: '0,0', validator: Validater.number, width: 120 },
                        { data: 'Has_Warranty', allowEmpty: true, correctFormat: true, allowInvalid: true, type: 'numeric', format: '0,0', validator: Validater.number, width: 180, readOnly: true },// Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                        { data: 'Quantity5', allowEmpty: true, correctFormat: true, allowInvalid: true, type: 'numeric', format: '0,0', validator: Validater.number, width: 120 },
                        { data: 'EmployeeCode', readOnly: true, type: 'text', width: 250, renderer: actionRendererEmployeesHtml },
                        { data: 'MoneyCollection', readOnly: true, type: 'text', width: 120, renderer: actionRendererMoneyHtml },
                        { data: 'MonthOfCollection', readOnly: true, type: 'text', width: 120, renderer: actionRendererMonthHtml },
                        { data: 'Property5', className: 'htLeft', allowEmpty: true, correctFormat: true, allowInvalid: true, width: 250 },
                        { data: 'Property6', className: 'htLeft', allowEmpty: true, correctFormat: true, allowInvalid: true, width: 250 },
                        { data: 'Note', className: 'htLeft', allowEmpty: true, correctFormat: true, allowInvalid: true, width: 250 }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row_tb = changes[i][0], col_tb = changes[i][1];
                            var oldValue = changes[i][2]; newValue = changes[i][3];
                            var instance = this;
                            if (col_tb == "Quantity1") {
                                var totalLamp = parseInt(hot.getDataAtCell(row_tb, 1));
                                var totalLamp_Break = (newValue !== null && newValue !== '' && newValue !== undefined && $.isNumeric(newValue)) ? parseInt(newValue) : 0;
                                var totalLamp_Expires = (hot.getDataAtCell(row_tb, 3) !== null && hot.getDataAtCell(row_tb, 3) !== '' && hot.getDataAtCell(row_tb, 3) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 3))) ? parseInt(hot.getDataAtCell(row_tb, 3)) : 0;
                                var totalLamp_Difference = (hot.getDataAtCell(row_tb, 4) !== null && hot.getDataAtCell(row_tb, 4) !== '' && hot.getDataAtCell(row_tb, 4) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 4))) ? parseInt(hot.getDataAtCell(row_tb, 4)) : 0;
                                var totalLamp_IsWarranty = (hot.getDataAtCell(row_tb, 5) !== null && hot.getDataAtCell(row_tb, 5) !== '' && hot.getDataAtCell(row_tb, 5) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 5))) ? parseInt(hot.getDataAtCell(row_tb, 5)) : 0;
                                //if ((totalLamp_Break + totalLamp_Expires + totalLamp_Difference + totalLamp_IsWarranty) > totalLamp) {
                                //    XFunction.RenderMessage("error", "Tổng SL bóng shop gửi lên HC <br/>không được lớn hơn SL ban đầu");
                                //    return false;
                                //};
                            };
                            if (col_tb == "Quantity2") {
                                var totalLamp = parseInt(hot.getDataAtCell(row_tb, 1));
                                var totalLamp_Break = (hot.getDataAtCell(row_tb, 2) !== null && hot.getDataAtCell(row_tb, 2) !== '' && hot.getDataAtCell(row_tb, 2) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 2))) ? parseInt(hot.getDataAtCell(row_tb, 2)) : 0;
                                var totalLamp_Expires = (newValue !== null && newValue !== '' && newValue !== undefined && $.isNumeric(newValue)) ? parseInt(newValue) : 0;
                                var totalLamp_Difference = (hot.getDataAtCell(row_tb, 4) !== null && hot.getDataAtCell(row_tb, 4) !== '' && hot.getDataAtCell(row_tb, 4) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 4))) ? parseInt(hot.getDataAtCell(row_tb, 4)) : 0;
                                var totalLamp_IsWarranty = (hot.getDataAtCell(row_tb, 5) !== null && hot.getDataAtCell(row_tb, 5) !== '' && hot.getDataAtCell(row_tb, 5) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 5))) ? parseInt(hot.getDataAtCell(row_tb, 5)) : 0;
                                //if ((totalLamp_Break + totalLamp_Expires + totalLamp_Difference + totalLamp_IsWarranty) > totalLamp) {
                                //    XFunction.RenderMessage("error", "Tổng SL bóng shop gửi lên HC <br/>không được lớn hơn SL ban đầu");
                                //    return false;
                                //};
                            };
                            if (col_tb == "Quantity3") {
                                var totalLamp = parseInt(hot.getDataAtCell(row_tb, 1));
                                var totalLamp_Break = (hot.getDataAtCell(row_tb, 2) !== null && hot.getDataAtCell(row_tb, 2) !== '' && hot.getDataAtCell(row_tb, 2) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 2))) ? parseInt(hot.getDataAtCell(row_tb, 2)) : 0;
                                var totalLamp_Expires = (hot.getDataAtCell(row_tb, 3) !== null && hot.getDataAtCell(row_tb, 3) !== '' && hot.getDataAtCell(row_tb, 3) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 3))) ? parseInt(hot.getDataAtCell(row_tb, 3)) : 0;
                                var totalLamp_Difference = (newValue !== null && newValue !== '' && newValue !== undefined && $.isNumeric(newValue)) ? parseInt(newValue) : 0;
                                var totalLamp_IsWarranty = (hot.getDataAtCell(row_tb, 5) !== null && hot.getDataAtCell(row_tb, 5) !== '' && hot.getDataAtCell(row_tb, 5) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 5))) ? parseInt(hot.getDataAtCell(row_tb, 5)) : 0;
                                //if ((totalLamp_Break + totalLamp_Expires + totalLamp_Difference + totalLamp_IsWarranty) > totalLamp) {
                                //    XFunction.RenderMessage("error", "Tổng SL bóng shop gửi lên HC <br/>không được lớn hơn SL ban đầu");
                                //    return false;
                                //};
                            };
                            if (col_tb == "Quantity4") {
                                var totalLamp = parseInt(hot.getDataAtCell(row_tb, 1));
                                var totalLamp_Break = (hot.getDataAtCell(row_tb, 2) !== null && hot.getDataAtCell(row_tb, 2) !== '' && hot.getDataAtCell(row_tb, 2) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 2))) ? parseInt(hot.getDataAtCell(row_tb, 2)) : 0;
                                var totalLamp_Expires = (hot.getDataAtCell(row_tb, 3) !== null && hot.getDataAtCell(row_tb, 3) !== '' && hot.getDataAtCell(row_tb, 3) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 3))) ? parseInt(hot.getDataAtCell(row_tb, 3)) : 0;
                                var totalLamp_Difference = (hot.getDataAtCell(row_tb, 4) !== null && hot.getDataAtCell(row_tb, 4) !== '' && hot.getDataAtCell(row_tb, 4) !== undefined && $.isNumeric(hot.getDataAtCell(row_tb, 4))) ? parseInt(hot.getDataAtCell(row_tb, 4)) : 0;
                                var totalLamp_IsWarranty = (newValue !== null && newValue !== '' && newValue !== undefined && $.isNumeric(newValue)) ? parseInt(newValue) : 0;

                                //if ((totalLamp_Break + totalLamp_Expires + totalLamp_Difference + totalLamp_IsWarranty) > totalLamp) {
                                //    XFunction.RenderMessage("error", "Tổng SL bóng shop gửi lên HC <br/>không được lớn hơn SL ban đầu");
                                //    return false;
                                //};
                                var SLBongCapMoi_Check = (hot.getDataAtRowProp(row_tb, 'TongBongCapMoi') !== null && hot.getDataAtRowProp(row_tb, 'TongBongCapMoi') !== '' && hot.getDataAtRowProp(row_tb, 'TongBongCapMoi') !== undefined && $.isNumeric(hot.getDataAtRowProp(row_tb, 'TongBongCapMoi'))) ? parseInt(hot.getDataAtRowProp(row_tb, 'TongBongCapMoi')) : 0;
                                //if (totalLamp_IsWarranty>=SLBongCapMoi_Check) {
                                //    instance.updateSettings({
                                //        cells: function (row, col, prop) {
                                //            var cellProperties = {};
                                //            if (col === 6 && row  === row_tb) {
                                //                cellProperties.readOnly = true;
                                //            };
                                //            if (col === 7&& row  === row_tb) {
                                //                cellProperties.readOnly = true;
                                //            };
                                //            if (col === 8&& row  === row_tb) {
                                //                cellProperties.readOnly = true;
                                //            };
                                //            if (col === 9&& row  === row_tb) {
                                //                cellProperties.readOnly = true;
                                //            };
                                //            if (col === 10&& row  === row_tb) {
                                //                cellProperties.readOnly = true;
                                //            };
                                //            return cellProperties;
                                //        }
                                //    });
                                //}
                            };

                            if (col_tb == "Quantity5") {
                                var Id = hot.getDataAtRowProp(row_tb, 'Id');
                                var SLBongCapMoi = hot.getDataAtRowProp(row_tb, 'TongBongCapMoi');
                                var SLTruyThuCu = hot.getDataAtRowProp(row_tb, 'Quantity5');
                                var SLBaoHanhDuoc_Grid = hot.getDataAtCell(row_tb, 5);
                                var SLTruyThu_Grid = hot.getDataAtCell(row_tb, 7);//Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                                //if (SLBaoHanhDuoc_Grid >= SLBongCapMoi)
                                //{
                                //    return false;
                                //}
                                if ((newValue !== '' && newValue !== null && newValue !== undefined && newValue < 0 && $.isNumeric(newValue)))//(SLBaoHanhDuoc_Grid < SLBongCapMoi) && 
                                {
                                    XFunction.RenderMessage("error", "Không được nhập số lượng truy thu âm.");
                                    return false;
                                }
                                //if ((SLBaoHanhDuoc_Grid === '' || SLBaoHanhDuoc_Grid === null || SLBaoHanhDuoc_Grid === undefined) && !$.isNumeric(SLBaoHanhDuoc_Grid) && SLBaoHanhDuoc_Grid <= 0) {
                                //    XFunction.RenderMessage("error", "Vui lòng nhập số lượng bóng BH được trước khi nhập số lượng truy thu");
                                //    return false;
                                //}

                                if (newValue !== '' && newValue !== null && newValue !== undefined && newValue >= 0 && $.isNumeric(newValue)) {
                                    //    if (SLTruyThu_Grid > SLBongCapMoi) {
                                    //        XFunction.RenderMessage("error", "Tổng SL truy thu<br/>không được lớn hơn tổng SL bóng cấp mới");
                                    //        return false;
                                    //    }
                                    //    else {
                                    $('#myModal').modal({ backdrop: 'static', keyboard: false, show: true });

                                    $.get('/Requests/ClearDanhSachTruyThu_BHBongDen', { MaCL: requestInfo.Id, MaChiTietCL: Id, soLuongTruyThuMoi: newValue }, function (data_Grid) {
                                        if (data_Grid !== null && data_Grid !== '' && data_Grid !== undefined) {
                                            hot.setDataAtRowProp(row_tb, 'HaveMoneyRefurn', 0, 'not');
                                            hot.setDataAtRowProp(row_tb, 'EmployeeCode', '', 'not');
                                            hot.setDataAtRowProp(row_tb, 'MoneyCollection', '', 'not');
                                            hot.setDataAtRowProp(row_tb, 'MonthOfCollection', '', 'not');
                                            $('#myModal').modal('hide');
                                            if (status !== '4' && row_tb >= 0 && row_tb < dataHc.length - 1 && (checkOldStepAssigner === true) && requestInfo.StepNo === 2 && newValue > 0) {
                                                rowLine = row_tb;
                                                var dataGrid = $.grep(dataHc, function (item, index) {
                                                    return index == row_tb;
                                                });
                                                var $button = '';
                                                var valid = hot.getDataAtRowProp(row_tb, 'Id');
                                                if (valid !== '' && valid !== null && valid !== undefined) {
                                                    if ((newValue === '' || newValue === null || newValue === undefined) && !$.isNumeric(newValue) && newValue < 0) {
                                                        XFunction.RenderMessage("error", "Không được nhập số lượng truy thu âm.");
                                                        return false;
                                                    }
                                                    else {
                                                        RequestDetailId = valid;
                                                        rowTest = row_tb;
                                                        MoneyGrid1 = 0;
                                                        var MM = $.grep(dataHc, function (value, number) {
                                                            return value.Id == RequestDetailId;
                                                        });
                                                        if (MM.length > 0) {
                                                            MoneyGrid1 = newValue * MM[0].Price;
                                                        }
                                                        $.get('/Requests/LoadDanhSachTruyThu_BHBongDen', { MaCL: requestInfo.Id, MaChiTietCL: Id }, function (dataGrid) {
                                                            if (dataGrid.length == 0) {
                                                                dataLoadAfter = [];
                                                                hot2.loadData(dataLoadAfter);
                                                            }
                                                            else {
                                                                dataLoadAfter = dataGrid;
                                                                hot2.loadData(dataLoadAfter);
                                                            };
                                                        });
                                                        if (newValue > 0) {
                                                            $('#modalGanTruyThu').modal({ backdrop: 'static', keyboard: false, show: true });
                                                            $('#btnCloseModal').hide();
                                                        };
                                                    };
                                                };
                                            };
                                        }
                                        else {
                                            $('#myModal').modal('hide');
                                        };
                                    });
                                    // };
                                }
                                hot.render();
                            }

                            if (col_tb == "EmployeeCode") {
                                var SLTruyThu = hot.getDataAtCell(row_tb, 7);//Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                                if ((SLTruyThu == '' || SLTruyThu == null || SLTruyThu == undefined) || !$.isNumeric(SLTruyThu) || SLTruyThu < 0) {
                                    XFunction.RenderMessage("error", "Vui lòng nhập số lượng truy thu trước khi chọn nhận viên cần truy thu");
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            }
                        };
                    },
                    cells: function (row, col, prop) {
                        cellProperties = {};
                        if (row > dataHc.length - 1)
                            cellProperties.readOnly = true;
                        return cellProperties;
                    },
                    afterLoadData: function (event) {
                        $("#modalGanTruyThu").on("show.bs.modal", function (r) {
                            setTimeout(function () {
                                hot2.render();
                            }, 200);
                        });
                    },
                    afterOnCellMouseDown: function (event, coords, TD) {
                        if (status !== '4' && coords.col === 8 && coords.row >= 0 && coords.row < dataHc.length - 1 && (checkAssiner === true || checkOldStepAssigner === true)) {//Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                            var SLBaoHanhDuoc = hot.getDataAtCell(coords.row, 5);
                            var SLTruyThu_Gr = hot.getDataAtCell(coords.row, 7);//Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                            var SLBongCapMoi = hot.getDataAtRowProp(coords.row, 'TongBongCapMoi');
                            if (SLTruyThu_Gr === 0) {
                                //XFunction.RenderMessage("error", "Số lượng cấp mới không có chênh lệch số lượng bảo hành được, không cần nhập số lượng truy thu!!!");
                                XFunction.RenderMessage("error", "Số lượng truy thu bằng 0, không cần nhập thông tin truy thu!!!");
                                return false;
                            }
                            else {
                                var SLTruyThu_Grid = hot.getDataAtCell(coords.row, 7);//Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                                if ((SLTruyThu_Grid !== '' || SLTruyThu_Grid !== null || SLTruyThu_Grid !== undefined) && $.isNumeric(SLTruyThu_Grid) && SLTruyThu_Grid >= 0) {
                                    rowLine = coords.row;
                                    MoneyGrid1 = 0;
                                    var dataGrid = $.grep(dataHc, function (item, index) {
                                        return index == coords.row;
                                    });
                                    var $button = '';
                                    var valid = hot.getDataAtRowProp(coords.row, 'Id');
                                    if (valid !== '' && valid !== null && valid !== undefined) {
                                        if ((SLTruyThu_Grid === '' || SLTruyThu_Grid === null || SLTruyThu_Grid === undefined) && !$.isNumeric(SLTruyThu_Grid) && SLTruyThu_Grid < 0) {
                                            XFunction.RenderMessage("error", "Vui lòng nhập số lượng truy thu trước chọn thông tin truy thu");
                                            return false;
                                        }
                                        else {
                                            RequestDetailId = valid;
                                            rowTest = coords.row;
                                            var MM = $.grep(dataHc, function (value, number) {
                                                return value.Id == RequestDetailId;
                                            });
                                            if (MM.length > 0) {
                                                MoneyGrid1 = SLTruyThu_Grid * MM[0].Price;
                                            }
                                            $.get('/Requests/LoadDanhSachTruyThu_BHBongDen', {
                                                MaCL: CL.Id, MaChiTietCL: RequestDetailId
                                            }, function (dataGrid_New) {
                                                if (dataGrid_New.length == 0) {
                                                    dataLoadAfter = [];
                                                    hot2.loadData(dataLoadAfter);
                                                }
                                                else {
                                                    dataLoadAfter = dataGrid_New;
                                                    hot2.loadData(dataLoadAfter);
                                                };
                                            });
                                            if (SLTruyThu_Grid > 0) {
                                                $('#modalGanTruyThu').modal({ backdrop: 'static', keyboard: false, show: true });
                                                $('#btnCloseModal').hide();
                                            }
                                            else {
                                                XFunction.RenderMessage("error", "Số lượng truy thu bằng 0, không cần nhập thông tin truy thu.");
                                                return false;
                                            }
                                        };
                                    }
                                }
                                else {
                                    XFunction.RenderMessage("error", "Vui lòng nhập số lượng truy thu trước chọn thông tin truy thu");
                                    return false;
                                }
                            }
                        }
                    },
                };
            };
            var hot = new Handsontable(container, setting());

            //▼ Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
            ////var plugin = hot.getPlugin('hiddenColumns');
            ////plugin.hideColumn(6);
            //▲ Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule

            if (requestInfo.StepNo === 2) {
                if (checkAssiner === true) {
                    hot.updateSettings({
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if (col === 2) {
                                cellProperties.readOnly = true;
                            };
                            if (col === 3) {
                                cellProperties.readOnly = true;
                            };
                            if (col === 4) {
                                cellProperties.readOnly = true;
                            };
                            if (col === 5) {
                                cellProperties.readOnly = true;
                            };
                            if (col === 6) {
                                cellProperties.readOnly = true;
                            };
                            return cellProperties;
                        }
                    });
                };
            };

            if (status === '4') {
                hot.updateSettings({
                    cells: function (row, col, prop) {
                        var cellProperties = {};
                        if (col === 2) {
                            cellProperties.readOnly = true;
                        };
                        if (col === 3) {
                            cellProperties.readOnly = true;
                        };
                        if (col === 4) {
                            cellProperties.readOnly = true;
                        };
                        if (col === 5) {
                            cellProperties.readOnly = true;
                        };
                        if (col === 7) {
                            cellProperties.readOnly = true;
                        };
                        if (col === 8) {//Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                            cellProperties.readOnly = true;
                        };
                        if (col === 11) {
                            cellProperties.readOnly = true;
                        };
                        if (col === 12) {
                            cellProperties.readOnly = true;
                        };
                        //▼ Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                        if (col === 13) {
                            cellProperties.readOnly = true;
                        };
                        //▲ Add - TrungNC3 - 11/12/2017 - Bảo hanh bóng đèn - Update Rule
                        return cellProperties;
                    }
                });
            };
            hot.render();
            //---------------------
            var setting2 = function () {
                return {
                    data: dataLoadAfter,
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    minSpareRows: 6,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Tên nhân viên bị truy thu',
                            'Số tiền bị truy thu',
                            'Số tháng bị truy thu'
                        ],
                    columns: [
                        { data: 'EmployeeCode_m', source: dataEmpShopName, type: 'autocomplete', className: 'htCenter', width: 250 },
                        { data: 'MoneyCollection_m', type: 'numeric', allowEmpty: true, correctFormat: true, allowInvalid: true, className: 'htCenter', format: '0,0' },
                        { data: 'MonthOfCollection_m', type: 'numeric', allowEmpty: true, correctFormat: true, allowInvalid: true, className: 'htCenter', format: '0,0' },
                    ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        var instance = this;
                        changes.forEach(function (change) {
                            var row = change[0], colunm = change[1], newVal = change[3], oldVal = change[2];
                            var cellProperties, options;
                            var Price = hot.getDataAtRowProp(row, 'MoneyCollection_m');
                            if (colunm == 'EmployeeCode_m' && row == 0 && newVal !== oldVal) {
                                hot2.setDataAtRowProp(row, 'MoneyCollection_m', MoneyGrid1, 'not');
                            }
                        });
                    },
                    beforeChange: function (change, source) {
                        if (source == 'not') return;
                        var cout = 0;
                        for (i = 0; i < change.length; i++) {
                            var row = change[i][0], colunm = change[i][1], newVal = change[i][3], oldVal = change[i][2];
                            var cellProperties, options;
                            if (colunm == 'EmployeeCode_m' && newVal != '' && newVal != undefined && newVal != null) {

                                var checkDataValueNV = $.grep(dataEmpShop, function (item, index) {
                                    return newVal === (item.EmployeeCode + '--' + item.EmployeeName);
                                });

                                if (checkDataValueNV.length === 0) {
                                    XFunction.RenderMessage('error', 'Nhân viên được truy thu không hợp lệ!');
                                    return false;
                                }
                                var datas = $.grep(hot2.getSourceData(), function (value, posi) {
                                    return (value.EmployeeCode_m != undefined && value.EmployeeCode_m != null && value.EmployeeCode_m != '')
                                        && value.EmployeeCode_m == newVal;
                                });
                                if (datas.length > 0) {
                                    XFunction.RenderMessage('error', 'Nhân viên [' + newVal + '] đã được chọn trước đó');
                                    return false;
                                };
                            };

                            if (colunm == 'MoneyCollection_m' && newVal != '' && newVal != undefined && newVal != null) {
                                var TenNV = hot2.getDataAtRowProp(row, 'EmployeeCode_m');
                                if (TenNV == '' || TenNV == null || TenNV == undefined) {
                                    XFunction.RenderMessage('error', 'Vui lòng nhập tên nhân viên trước khi nhập số tiền');
                                    return false;
                                };
                                hot2.setDataAtRowProp(row, 'MonthOfCollection_m', '', 'not');
                            };

                            if (colunm == "MonthOfCollection_m") {
                                var SotienTruyThu = hot2.getDataAtCell(row, 1);

                                if (SotienTruyThu <= 1000000 && newVal > 1) {
                                    XFunction.RenderMessage("error", " Số tiền truy thu lương từ 1 triệu đồng trở xuống: số tháng truy thu là 1 tháng.");
                                    return false;
                                }
                                else if ((SotienTruyThu > 1000000 && SotienTruyThu <= 3000000) && newVal > 3) {
                                    XFunction.RenderMessage("error", "Số tiền truy thu lương trên 1 triệu đồng đến 3 triệu đồng: truy thu tối đa 3 tháng.");
                                    return false;
                                }
                                else if (SotienTruyThu > 3000000 && newVal > 6) {
                                    XFunction.RenderMessage("error", "Số tiền truy thu lương trên 3 triệu đồng: truy thu tối đa 6 tháng.");
                                    return false;
                                }
                                else {
                                    return true;
                                };
                            };
                        };
                    },
                };
            };
            hot2 = new Handsontable(container2, setting2());
            hot2.render();

            var TongTruyThuGrid = 0;
            $('#btnGanTruyThuLuong').on('click', function () {
                var data = $.grep(hot2.getSourceData(), function (value, number) {
                    return (value.EmployeeCode_m != '' && value.EmployeeCode_m != null && value.EmployeeCode_m != undefined
                        && $.isNumeric(value.MoneyCollection_m) == true && value.MoneyCollection_m >= 0)
                });
                if (data.length == 0) {
                    XFunction.RenderMessage('error', 'Không có thông tin nhân viên');
                    return false;
                }
                else {
                    var ThongTinNhanVien = '', ThongTinSoTien = '', ThongTinSoThang = '';
                    $.each(data, function (index, item) {
                        ThongTinNhanVien += item.EmployeeCode_m + '\n';
                        ThongTinSoTien += setShow(item.MoneyCollection_m) + '\n';
                        ThongTinSoThang += item.MonthOfCollection_m + '\n';
                    });
                    var EmployeeList = '', MoneyList = 0, MonthList = 0, TongTruyThuLuongGrid = 0;
                    $.each(data, function (index, item) {
                        TongTruyThuLuongGrid += item.MoneyCollection_m;
                    });

                    if (TongTruyThuLuongGrid != MoneyGrid1) {
                        XFunction.RenderMessage('error', ' Tổng số tiền truy thu của nhân viên shop không được chênh lệch số tiền truy thu!');
                        return false;
                    }
                    var DA = [];
                    $.each(data, function (index, item) {
                        var EM = $.grep(dataEmpShop, function (value, number) {
                            return (value.EmployeeCode + '--' + value.EmployeeName) == (item.EmployeeCode_m);
                        });
                        if (EM.length == 0) {
                            XFunction.RenderMessage('error', 'Nhân viên đã chọn không hợp lệ');
                            return false;
                        }
                        else {
                            EmployeeList = item.EmployeeCode_m.split('-')[0].toString();
                            MoneyList = item.MoneyCollection_m;
                            MonthList = item.MonthOfCollection_m;
                            DA.push({ RequestID: CL.Id, EmployeeList: EmployeeList, MoneyList: MoneyList, MonthList: MonthList, RequestDetailId: RequestDetailId });
                        };
                    });

                    dataFull2 = $.grep(hot2.getSourceData(), function (value, number) {
                        return (value.EmployeeCode_m != '' && value.EmployeeCode_m != null && value.EmployeeCode_m != undefined)
                    });
                    var datacheckNull = [], dataCheckNullMonth = [], dataCheckNullMoney = [];

                    $.each(dataFull2, function (index1, item1) {
                        if ((item1.MoneyCollection_m === '' || item1.MoneyCollection_m === null || item1.MoneyCollection_m === undefined) ||
                            (item1.EmployeeCode_m === '' || item1.EmployeeCode_m === null || item1.EmployeeCode_m === undefined) ||
                            (item1.MonthOfCollection_m === '' || item1.MonthOfCollection_m === null || item1.MonthOfCollection_m === undefined)) {
                            datacheckNull.push(index1);
                        }
                        if ((item1.MonthOfCollection_m !== '' || item1.MonthOfCollection_m !== null || item1.MonthOfCollection_m != undefined) && item1.MonthOfCollection_m === 0) {
                            dataCheckNullMonth.push(index1 + 1);
                        };
                        if ((item1.MoneyCollection_m !== '' || item1.MoneyCollection_m !== null || item1.MoneyCollection_m != undefined) && item1.MoneyCollection_m === 0) {
                            dataCheckNullMoney.push(index1 + 1);
                        };
                    });
                    if (datacheckNull.length > 0) {
                        XFunction.RenderMessage('error', 'Chưa nhập đầy đủ thông tin truy thu'); return false;
                    };
                    if (dataCheckNullMonth.length > 0) {
                        XFunction.RenderMessage('error', 'Số tháng truy thu phải lớn hơn 0. Vui lòng xem lại dòng ' + $.unique(dataCheckNullMonth).join(',')); return false;
                    };
                    if (dataCheckNullMoney.length > 0) {
                        XFunction.RenderMessage('error', 'Số tiền truy thu phải lớn hơn 0. Vui lòng xem lại dòng ' + $.unique(dataCheckNullMoney).join(',')); return false;
                    };
                    if (DA.length > 0) {
                        $.ajax({
                            type: "POST",
                            url: "/Requests/UploadListTruyThu_BHBongDen",
                            data: {
                                UploadListTruyThu_bhBongDen: DA
                            },
                            success: function (result) {
                                hot.setDataAtRowProp(rowTest, 'EmployeeCode', ThongTinNhanVien, 'not');
                                hot.setDataAtRowProp(rowTest, 'MoneyCollection', ThongTinSoTien, 'not');
                                hot.setDataAtRowProp(rowTest, 'MonthOfCollection', ThongTinSoThang, 'not');
                                hot.setDataAtRowProp(rowTest, 'HaveMoneyRefurn', 1, 'not');
                                hot.render();
                            },
                            error: function () {
                                XFunction.RenderMessage('error', 'Có lỗi khi gán truy thu');
                                return false;
                            }
                        });
                    }
                };
                $('#modalGanTruyThu').modal('hide');
            });

            $("#comment").click(function () {
                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataHideButton = [], dataCheckQuantityDiff = [], dataKeepWages = [], dateKeepSalary = [];
                $.each(myData, function (index, item) {
                    if (item.Quantity < (item.Quantity1 + item.Quantity2 + item.Quantity3 + item.Quantity4)) {
                        dataHideButton.push(item);
                    };

                    if ((item.Quantity3 !== null && item.Quantity3 !== '' && item.Quantity3 !== undefined && item.Quantity3 > 0) && (item.Property6 === null || item.Property6 === '' || item.Property6 === undefined)) {
                        dataCheckQuantityDiff.push(item);
                    };

                    if ((item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined) && (item.Property5 === null || item.Property5 === '' || item.Property5 === undefined)) {
                        dataKeepWages.push(item);
                    };
                });
                if (dataHideButton.length > 0) {
                    XFunction.RenderMessage("error", "Tổng SL bóng hỏng và bóng BH được <br/>không được lớn hơn SL bóng shop gửi!"); return false;
                };

                if (dataCheckQuantityDiff.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập ghi chú khi số lượng bóng bảo hành không được do lý do khác!"); return false;
                };
                //▼ Delete - TrungNC3 - 2017-08-30 - Xóa ràng buộc CallLog bóng Cấp mới
                //if (dataKeepWages.length > 0) {
                //    XFunction.RenderMessage("error", "Vui lòng nhập nguyên nhân truy thu!"); return false;
                //};
                //▲ Type - =======================================
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại!");
                    } else {
                        var dataReturn = [], dataTruyThu = [];
                        $.each(myData, function (index, item) {
                            dataReturn.push({
                                Quantity1: item.Quantity1,
                                Quantity2: item.Quantity2,
                                Quantity3: item.Quantity3,
                                Quantity4: item.Quantity4,
                                Quantity5: item.Quantity5,
                                Property5: item.Property5,
                                Property6: item.Property6,
                                Note: item.Note,
                                Id: item.Id
                            });
                        });
                        $('#Details').val(JSON.stringify(dataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    };
                };
            });

            $("#reply").click(function () {
                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataHideButton = [], dataCheckQuantityDiff = [], dataKeepWages = [], dateKeepSalary = [];

                $.each(myData, function (index, item) {
                    if (item.Quantity < (item.Quantity1 + item.Quantity2 + item.Quantity3 + item.Quantity4)) {
                        dataHideButton.push(item);
                    };

                    if ((item.Quantity3 !== null && item.Quantity3 !== '' && item.Quantity3 !== undefined && item.Quantity3 > 0) && (item.Property6 === null || item.Property6 === '' || item.Property6 === undefined)) {
                        dataCheckQuantityDiff.push(item);
                    };

                    if ((item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined) && (item.Property5 === null || item.Property5 === '' || item.Property5 === undefined)) {
                        dataKeepWages.push(item);
                    };
                });

                if (dataHideButton.length > 0) {
                    XFunction.RenderMessage("error", "Tổng SL bóng hỏng và bóng BH được <br/>không được lớn hơn SL bóng shop gửi!"); return false;
                };

                if (dataCheckQuantityDiff.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập ghi chú khi số lượng bóng bảo hành không được do lý do khác!"); return false;
                };
                //▼ Delete - TrungNC3 - 2017-08-30 - Xóa ràng buộc CallLog bóng Cấp mới
                //if (dataKeepWages.length > 0) {
                //    XFunction.RenderMessage("error", "Vui lòng nhập nguyên nhân truy thu!"); return false;
                //};
                //▲ Type - =======================================
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                } else {
                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trả lời lại!");
                    } else {
                        var dataReturn = [], dataTruyThu = [];
                        $.each(myData, function (index, item) {
                            dataReturn.push({
                                Quantity1: item.Quantity1,
                                Quantity2: item.Quantity2,
                                Quantity3: item.Quantity3,
                                Quantity4: item.Quantity4,
                                Quantity5: item.Quantity5,
                                Property5: item.Property5,
                                Property6: item.Property6,
                                Note: item.Note,
                                Id: item.Id
                            });
                        });
                        $('#Details').val(JSON.stringify(dataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    };
                };
            });

            $("#changeStep").click(function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                //var dataHideButton = [], dataCheckDuyet = [], dataCheckQuantityDiff = [], dataKeepWages = [], checkDataChangeStep = [], dataCheckPendingCL = [], dataCheckComplete = [], checkValidSLTruyThu = [];
                var checkDifferenceQuantity = [], checkNullQuantityCol = [], dataCheckQuantityDiffNullNote = [],
                    dataKeepWagesNullNote = [], dataCheckPendingCL = [], checkNullColQuantityWarrantied = [];
                var checkCompleteStep1 = [], checkAutoCompleteStep1 = [],
                    checkNotExistsTruyThu = [], checkNotExistsQuantityTruyThu = [], dataHoanTatStep1 = [];
                $.each(myData, function (index, item) {
                    //Chia Rule ra check
                    //Rule kiểm tra số lượng shop đạt và số lượng cf
                    if (item.Quantity < (item.Quantity1 + item.Quantity2 + item.Quantity3 + item.Quantity4)) {
                        checkDifferenceQuantity.push(index + 1);
                    };

                    if (item.Quantity4 === null || item.Quantity4 === '' || item.Quantity4 === undefined) {
                        checkNullColQuantityWarrantied.push(index + 1);
                    }
                    //Rule kiểm tra rỗng các cột số lượng
                    if ((item.Quantity1 === null || item.Quantity1 === '' || item.Quantity1 === undefined) &&
                        (item.Quantity2 === null || item.Quantity2 === '' || item.Quantity2 === undefined) &&
                        (item.Quantity3 === null || item.Quantity3 === '' || item.Quantity3 === undefined) &&
                        (item.Quantity4 === null || item.Quantity4 === '' || item.Quantity4 === undefined)) {
                        checkNullQuantityCol.push(index + 1);
                    };
                    //Rule check số lượng khác hỏng không có lí do
                    if ((item.Quantity3 !== null && item.Quantity3 !== '' && item.Quantity3 !== undefined && item.Quantity3 > 0) && (item.Property6 === null || item.Property6 === '' || item.Property6 === undefined)) {
                        dataCheckQuantityDiffNullNote.push(index + 1);
                    };
                    //Rule check so luong truy thu nhung khong co nguyen nhan truy thu
                    if ((item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined) && item.Quantity5 > 0 && (item.Property5 === null || item.Property5 === '' || item.Property5 === undefined)) {
                        dataKeepWagesNullNote.push(index + 1);
                    };
                    //Rule check calllog cấp mới pending
                    if (data[0].BuocCallLogCapMoi < 2) {
                        dataCheckPendingCL.push(index + 1);
                    }

                    //Rule sửa đổi
                    if (((item.HaveMoneyRefurn == null && item.HaveMoneyRefurn == '' && item.HaveMoneyRefurn == undefined) || item.HaveMoneyRefurn == 0)
                        && (item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined && $.isNumeric(item.Quantity5) && item.Quantity5 > 0)) {
                        checkNotExistsTruyThu.push(index + 1);
                    };
                    if ((item.Quantity5 === null || item.Quantity5 === '' || item.Quantity5 === undefined || !$.isNumeric(item.Quantity5)) || item.Quantity5 < 0) {
                        checkNotExistsQuantityTruyThu.push(index + 1);
                    }
                    if (item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined && $.isNumeric(item.Quantity5) && item.Quantity5 === 0) {
                        dataHoanTatStep1.push(index + 1)
                    }

                    ////Rule nếu tổng số lượng hành chính cf  == số lượng shop đặt => auto hoàn tất Calllog
                    //if (item.Quantity4 >= item.TongBongCapMoi ) {
                    //    checkAutoCompleteStep1.push(item);
                    //}
                    //else if (item.Quantity4 < item.TongBongCapMoi) {
                    //    if (((item.HaveMoneyRefurn == null && item.HaveMoneyRefurn == '' && item.HaveMoneyRefurn == undefined) || item.HaveMoneyRefurn == 0)
                    //        && (item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined && $.isNumeric(item.Quantity5) && item.Quantity5 >0)) {
                    //        checkNotExistsTruyThu.push(item);
                    //    };
                    //    if ((item.Quantity5 === null || item.Quantity5 === '' || item.Quantity5 === undefined || !$.isNumeric(item.Quantity5)) && item.Quantity5 <0) {
                    //        checkNotExistsQuantityTruyThu.push(item);
                    //    }
                    //}
                    //
                    //
                    //else if (item.TongBongCapMoi < item.Quantity4) {
                    //    if (item.Quantity === (item.Quantity1 + item.Quantity2 + item.Quantity3 + item.Quantity4)) {
                    //        if (item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined && item.Quantity5 === 0) {
                    //            checkAutoCompleteStep1.push(item);
                    //        }
                    //        else {
                    //            if ((item.HaveMoneyRefurn == null || item.HaveMoneyRefurn == '' || item.HaveMoneyRefurn == undefined || item.HaveMoneyRefurn == 0)
                    //                   && (item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined)) {
                    //                checkNotExistsTruyThu.push(item);
                    //            };
                    //            if (item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined && item.Quantity5 <= 0) {
                    //                checkNotExistsQuantityTruyThu.push(item);
                    //            };
                    //        }
                    //    }
                    //    else {
                    //    }
                    //};
                    //if ((item.Quantity4 !== null && item.Quantity4 !== '' && item.Quantity4 !== undefined)
                    //     && (item.TongBongCapMoi > item.Quantity4)
                    //     && (item.TongBongCapMoi !== item.Quantity4)
                    //     && (item.Quantity5 === '' || item.Quantity5 === null || item.Quantity5 === undefined)) {
                    //    checkValidSLTruyThu.push(item);
                    //}
                });
                if (checkNullQuantityCol.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập số lượng shop gửi lên hành chính! <br/>Vui lòng xem lại dòng: " + checkNullQuantityCol.join(", ")); return false;
                };
                //▼ Delete - TrungNC3 - 2017-08-30 - Xóa ràng buộc CallLog bóng Cấp mới
                //if (checkDifferenceQuantity.length > 0) {
                //    XFunction.RenderMessage("error", "Tổng SL bóng hỏng và bóng BH được <br/>không được lớn hơn SL bóng shop gửi! <br/>Vui lòng xem lại dòng: " + checkDifferenceQuantity.join(", ")); return false;
                //};
                //▲ Type - =======================================
                if (dataCheckQuantityDiffNullNote.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập ghi chú khi số lượng bóng bảo hành không được do lý do khác! <br/>Vui long xem lại dòng: " + dataCheckQuantityDiffNullNote.join(", ")); return false;
                };

                if (dataKeepWagesNullNote.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập nguyên nhân truy thu! <br/>Vui lòng xem lại dòng: " + dataKeepWagesNullNote.join(", ")); return false;
                };

                if (dataCheckPendingCL.length > 0) {
                    XFunction.RenderMessage("error", "Hành chính bắt buộc xử lí calllog Cấp bóng đèn cho shop trước khi chuyển bước calllog BH bóng đèn!"); return false;
                };

                //if (checkNullColQuantityWarrantied.length > 0) {
                //    XFunction.RenderMessage("error", "Vui lòng nhập số lượng bảo hành được trước khi thao tác!"); return false;
                //}

                if (checkNotExistsQuantityTruyThu.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập số lượng truy thu trước khi chuyển bước! <br/>Vui lòng xem lại dòng: " + checkNotExistsQuantityTruyThu.join(", ")); return false;
                }
                if (checkNotExistsTruyThu.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập thông tin truy thu trước khi chuyển bước! <br/>Vui lòng xem lại dòng: " + checkNotExistsTruyThu.join(", ")); return false;
                }
                if (dataHoanTatStep1.length === myData.length) {
                    $('#DuyetAll').val("0");
                }
                else {
                    $('#DuyetAll').val("1");
                };
                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn chuyển bước lại");
                } else {
                    var dataReturn = [];
                    $.each(myData, function (index, item) {
                        dataReturn.push({
                            Quantity1: item.Quantity1,
                            Quantity2: item.Quantity2,
                            Quantity3: item.Quantity3,
                            Quantity4: item.Quantity4,
                            Quantity5: item.Quantity5,
                            Property5: item.Property5,
                            Property6: item.Property6,
                            Note: item.Note,
                            Id: item.Id
                        });
                    });
                    $('#Approved_HuongXL_164').val('1');
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                };
            });

            $("#complete").click(function () {
                var message = $("#Message").val();
                var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataHideButton = [], dataCheckQuantityDiff = [], dataKeepWages = [], dateKeepSalary = [], dataCheckComplete = [];

                $.each(myData, function (index, item) {
                    if (item.Quantity < (item.Quantity1 + item.Quantity2 + item.Quantity3 + item.Quantity4)) {
                        dataHideButton.push(item);
                    };

                    if ((item.Quantity3 !== null && item.Quantity3 !== '' && item.Quantity3 !== undefined && item.Quantity3 > 0) && (item.Property6 === null || item.Property6 === '' || item.Property6 === undefined)) {
                        dataCheckQuantityDiff.push(item);
                    };

                    if ((item.Quantity5 !== null && item.Quantity5 !== '' && item.Quantity5 !== undefined) && item.Quantity5 > 0 && (item.Property5 === null || item.Property5 === '' || item.Property5 === undefined)) {
                        dataKeepWages.push(item);
                    };

                    if ((item.Quantity4 !== null && item.Quantity4 !== '' && item.Quantity4 !== undefined)
                        && item.TongBongCapMoi > item.Quantity4
                        && item.TongBongCapMoi !== item.Quantity4
                        && (item.Quantity5 === null && item.Quantity5 === '' && item.Quantity5 === undefined && item.Quantity5 < 0)
                        && ((item.HaveMoneyRefurn === null || item.HaveMoneyRefurn === '' || item.HaveMoneyRefurn === undefined || item.HaveMoneyRefurn === 0))) {
                        dataCheckComplete.push(item);
                    };
                });

                //if (dataHideButton.length > 0) {
                //    XFunction.RenderMessage("error", "Tổng SL bóng hỏng và bóng BH được <br/>không được lớn hơn SL bóng shop gửi!"); return false;
                //};

                if (dataCheckQuantityDiff.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập ghi chú khi số lượng bóng bảo hành không được do lý do khác!"); return false;
                };

                if (dataKeepWages.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập nguyên nhân truy thu!"); return false;
                };
                if (dataCheckComplete.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập thông tin truy thu trước khi hoàn tất!"); return false;
                }
                if (myData.length < 0) {
                    XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn hoàn tất lại!");
                } else {
                    var dataReturn = [], dataTruyThu = [];
                    $.each(myData, function (index, item) {
                        dataReturn.push({
                            Quantity1: item.Quantity1,
                            Quantity2: item.Quantity2,
                            Quantity3: item.Quantity3,
                            Quantity4: item.Quantity4,
                            Quantity5: item.Quantity5,
                            Property5: item.Property5,
                            Property6: item.Property6,
                            Note: item.Note,
                            Id: item.Id
                        });
                    });

                    // console.log(dataReturn); console.log(dataTruyThu); return false;
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                };
            });
        });
    };
    function contruct_163() {
        $('#sum-money').hide();
        $.get('/Requests/getRequestDetails', { id: requestInfo.Id }, function (data) {
            var rowLine = '';
            var dataShopAll = [], dataShopAllName = [];
            $.get('/Requests/GetShopByRegion', { regionId: 0 }, function (data) {
                dataShopAll = data;
                $.each(data, function (index, item) {
                    dataShopAllName.push(item.WarehouseCode + '--' + item.WarehouseCodeB1 + '--' + item.WarehouseName);
                });
            });
            dataHc = data;
            var checkSender = false, checkAssiner;
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    checkSender = true;
                if (item == 'assigner' || item == 'groupAssigner')
                    checkAssiner = true;
            });
            var checkEditSoLuongConfim = false;
            if (checkAssiner == true) {
                checkEditSoLuongConfim = true;
            }
            $.get('/Requests/Get_ThongTinBaoHanhBongDen', { RequestId: requestInfo.Id }, function (dataBongden) {
                var setting = function () {
                    return {
                        data: dataHc,
                        colHeaders: true,
                        rowHeaders: true,
                        stretchH: 'all',
                        startCols: 9,
                        maxCols: 9,
                        minCols: 9,
                        fillHandle: false,
                        allowInvalid: false,
                        currentRowClassName: 'currentRow',
                        fixedColumnsLeft: 1,
                        manualColumnResize: true,
                        manualRowResize: true,
                        outsideClickDeselects: true,
                        minSpareRows: 0,
                        maxRows: dataHc.length + 1,
                        minRows: dataHc.length + 1,
                        comments: true,
                        hiddenColumns: {
                            //   columns: [8],
                            indicators: true
                        },
                        nestedHeaders: [
                            ['Tên mặt hàng', 'Nhóm hàng', 'Số lượng', { label: 'Số lượng HC gửi cho shop', colspan: 2 }, { label: 'Shop confirm SL bóng thực', colspan: 2 }, 'Đơn giá', 'Thành tiền', 'Đơn vị tính', 'Ghi chú'],
                            ["", "", "", "SL từ kho Bảo hành HC", "SL từ NCC", "SL từ kho Bảo hành HC", "SL từ NCC", "", "", "", ""]
                        ],
                        columns: [
                            { data: "ItemName", readOnly: true, className: 'htLeft', width: 300 },
                            { data: "GroupName", readOnly: true, className: 'htLeft', width: 150 },
                            { data: 'Quantity', type: 'numeric', readOnly: true, format: '0,0', width: 100 },
                            { data: 'Quantity1', type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, width: 160, readOnly: true },
                            { data: 'Quantity2', type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, width: 120 },
                            { data: 'Property1', type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, width: 200 },
                            { data: 'Property2', type: 'numeric', format: '0,0', validator: Validater.number, allowInvalid: false, width: 155 },
                            {
                                data: 'Price', readOnly: true, type: 'numeric', format: '0,0', width: 80,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === 7 && row === dataHc.length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        value = 'Tổng tiền:';
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            {
                                data: 'Sum', readOnly: true, type: 'numeric', format: '0,0', width: 100,
                                renderer: function (instance, td, row, col, prop, value) {
                                    if (col === 8 && row === dataHc.length - 1) {
                                        td.style.fontWeight = 'bold';
                                        td.style.textAlign = 'right';
                                        td.style.color = 'green';
                                        var total = 0;
                                        $.each(dataHc, function (index, item) {
                                            (item.Sum !== null && item.Sum !== undefined && item.Sum !== "" && !isNaN(item.Sum)) ? total += item.Sum : total += 0;
                                        });
                                        value = total;
                                    }
                                    Handsontable.NumericRenderer.apply(this, arguments);
                                }
                            },
                            { data: 'Unit', readOnly: true, className: 'htLeft', width: 100 },
                            { data: 'Note', readOnly: true, className: 'htLeft', width: 100 }
                        ],
                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];
                                var oldValue = changes[i][2]; newValue = changes[i][3];
                                //if (col === "Quantity1") {
                                //    var totalLamp_Create1 = hot.getDataAtCell(row, 2);
                                //    if (newValue > totalLamp_Create1) {
                                //        hot.setDataAtCell(row, 3, null);
                                //        XFunction.RenderMessage("error", "Tổng SL bóng hỏng và bóng BH được <br/>không được lớn hơn SL bóng shop gửi");
                                //    };
                                //}
                                if (col === 'Quantity2') {
                                    var totalLamp_Create2 = hot.getDataAtCell(row, 2);
                                    //if (newValue > totalLamp_Create2) {
                                    //    hot.setDataAtCell(row, 4, null);
                                    //    XFunction.RenderMessage("error", "SL bóng cấp mới không được lớn hơn<br/>SL bóng shop gửi");
                                    //}
                                    //else {
                                    var value = changes[i][3], newthanhtien = value * hot.getDataAtCell(row, 7);
                                    hot.setDataAtCell(row, 8, newthanhtien, 'not');
                                    return true;
                                    // };
                                };
                            };
                        },
                        cells: function (row, col, prop) {
                            cellProperties = {};
                            if (row === dataHc.length - 1)
                                cellProperties.readOnly = true;
                            return cellProperties;
                        },
                        afterOnCellMouseDown: function (event, coords, TD) {
                            if (coords.col == 3 && coords.row >= 0 && coords.row < dataHc.length - 1 && checkAssiner === true && requestInfo.StepNo === 1) {
                                rowLine = coords.row;
                                $('#modalThongTinBongDenBaoHanh').modal('show');
                                var ItemId = hot.getDataAtRowProp(coords.row, 'ItemId');
                                var dataTonKhoSanPham = $.grep(dataBongden, function (element, count) {
                                    return ItemId === element.ItemId;
                                });
                                $.each(dataTonKhoSanPham, function (index, item) {
                                    $('#handsontableLightInfo').html('<tr><td>' + item.TongBongBaoHanh + '</td></tr>')
                                });
                                $("#edit-lamp").val('');
                            };
                        },
                    };
                };
                var hot = new Handsontable(container, setting());
                hot.render();
                if (requestInfo.StepNo > 1) {
                    hot.updateSettings({
                        cells: function (row, col, prop) {
                            var cellProperties = {};
                            if (col == 3) {
                                cellProperties.readOnly = true;
                            };
                            if (col == 4) {
                                cellProperties.readOnly = true;
                            };
                            return cellProperties;
                        }
                    });
                };
                var plugin = hot.getPlugin('hiddenColumns');
                if (requestInfo.StepNo < 3) {
                    plugin.hideColumn(1, 5, 6, 7, 8, 9);
                }
                else {
                    plugin.hideColumn(1, 7, 8, 9);
                    plugin.showColumn(5, 6);
                }

                hot.render();
                $("#btnLightInfo").click(function () {
                    var sumLamp = hot.getDataAtCell(rowLine, 2)
                    var ItemId = hot.getDataAtRowProp(rowLine, 'ItemId')  // Edit - ThuongNM2 - 2018/09/17 - Change Type Input
                    var dataTonKhoSanPham = $.grep(dataBongden, function (element, count) {
                        return ItemId === element.ItemId;
                    });
                    var bongBaoHanhKyTruoc = $("#edit-lamp").val();
                    if (bongBaoHanhKyTruoc == null || bongBaoHanhKyTruoc == '' || bongBaoHanhKyTruoc == undefined || isNaN(bongBaoHanhKyTruoc)) {
                        XFunction.RenderMessage("error", "Vui lòng nhập số bóng đèn bảo hành kỳ trước!!!");
                        return false;
                    }
                    else {
                        if (parseInt(bongBaoHanhKyTruoc) > dataTonKhoSanPham[0].TongBongBaoHanh || parseInt(bongBaoHanhKyTruoc) < 0) { // Edit - ThuongNM2 - 2018/09/17 - Change Type Input
                            XFunction.RenderMessage("error", "Số lượng bóng bảo hành nhập phải lớn hơn 0 hoặc nhỏ hơn tổng bóng bảo hành kỳ trước");
                            return false;
                        }
                        else {
                            $('#modalThongTinBongDenBaoHanh').modal('hide');
                            hot.setDataAtCell(rowLine, 3, bongBaoHanhKyTruoc, 'not');
                            hot.render();
                        };
                    };
                });

                $("#comment").click(function () {
                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var dataHideButton = [], dataEmpty = [];
                    $.each(myData, function (index, item) {
                        if (item.Quantity < item.Quantity2 && requestInfo.StepNo === 1) {
                            dataHideButton.push(item);
                        };
                        if (item.Quantity1 === '' || item.Quantity1 === undefined || item.Quantity1 === null) {
                            dataEmpty.push(item);
                        };
                    });
                    if (dataEmpty.length > 0) {
                        XFunction.RenderMessage("error", "SL từ kho Bảo hành HC không được rỗng."); return false;
                    }
                    if (dataHideButton.length > 0) {
                        XFunction.RenderMessage("error", "SL bóng cấp mới không được lớn hơn<br/>SL bóng shop gửi"); return false;
                    };
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trao đổi lại!");
                        } else {
                            var dataReturn = [];
                            $.each(myData, function (index, item) {
                                dataReturn.push({
                                    Quantity1: item.Quantity1,
                                    Quantity2: item.Quantity2,
                                    Property1: item.Property1,
                                    Property2: item.Property2,
                                    Note: item.Note,
                                    Id: item.Id
                                });
                            });
                            $('#Details').val(JSON.stringify(dataReturn));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        };
                    };
                });
                $("#reply").click(function () {
                    var message = $("#Message").val();
                    var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var dataHideButton = [], dataEmpty = [];
                    $.each(myData, function (index, item) {
                        if (item.Quantity < item.Quantity2 && requestInfo.StepNo === 1) {
                            dataHideButton.push(item);
                        };
                        if (item.Quantity1 === '' || item.Quantity1 === undefined || item.Quantity1 === null) {
                            dataEmpty.push(item);
                        };
                    });
                    if (dataEmpty.length > 0) {
                        XFunction.RenderMessage("error", "Số lượng bóng bảo hành kỳ trước không được rỗng."); return false;
                    }
                    if (dataHideButton.length > 0) {
                        XFunction.RenderMessage("error", "SL bóng cấp mới không được lớn hơn<br/>SL bóng shop gửi"); return false;
                    };
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                    } else {
                        if (myData.length < 0) {
                            XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn trả lời lại!");
                        } else {
                            var dataReturn = [];
                            $.each(myData, function (index, item) {
                                dataReturn.push({
                                    Quantity1: item.Quantity1,
                                    Quantity2: item.Quantity2,
                                    Property1: item.Property1,
                                    Property2: item.Property2,
                                    Note: item.Note,
                                    Id: item.Id
                                });
                            });
                            $('#Details').val(JSON.stringify(dataReturn));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Reply");
                            form.submit();
                        };
                    };
                });
                $("#complete").click(function () {
                    var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var dataHideButton = [], dataEmpty = [];
                    $.each(myData, function (index, item) {
                        if (item.Quantity < item.Quantity2 && requestInfo.StepNo === 1) {
                            dataHideButton.push(item);
                        };
                        if (item.Quantity1 === '' || item.Quantity1 === undefined || item.Quantity1 === null) {
                            dataEmpty.push(item);
                        };
                    });
                    if (dataEmpty.length > 0) {
                        XFunction.RenderMessage("error", "SL từ kho Bảo hành HC không được rỗng."); return false;
                    }
                    if (dataHideButton.length > 0) {
                        XFunction.RenderMessage("error", "SL bóng cấp mới không được lớn hơn<br/>SL bóng shop gửi"); return false;
                    };

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn hoàn tất lại");
                    } else {
                        var dataReturn = [];
                        $.each(myData, function (index, item) {
                            dataReturn.push({
                                Quantity1: item.Quantity1,
                                Quantity2: item.Quantity2,
                                Property1: item.Property1,
                                Property2: item.Property2,
                                Note: item.Note,
                                Id: item.Id
                            });
                        });
                        $('#Details').val(JSON.stringify(dataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    };
                });
                $("#changeStep").click(function () {
                    var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                    $('#ImageValidate').val(checkedVals.join(","));

                    var myData = hot == undefined ? "" : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var dataHideButton = [], dataEmpty = [];

                    $.each(myData, function (index, item) {
                        if (item.Quantity < item.Quantity2 && requestInfo.StepNo === 1) {
                            dataHideButton.push(item);
                        };
                        if (item.Quantity1 === '' || item.Quantity1 === undefined || item.Quantity1 === null) {
                            dataEmpty.push(item);
                        };
                    });
                    if (dataEmpty.length > 0) {
                        XFunction.RenderMessage("error", "SL từ kho Bảo hành HC không được rỗng."); return false;
                    };

                    if (dataHideButton.length > 0) {
                        XFunction.RenderMessage("error", "SL bóng cấp mới không được lớn hơn<br/>SL bóng shop gửi"); return false;
                    };

                    if (myData.length < 0) {
                        XFunction.RenderMessage("error", "Không có dữ liệu chi tiết vui lòng nhấn chuyển bước lại");
                    } else {
                        var dataReturn = [];
                        $.each(myData, function (index, item) {
                            dataReturn.push({
                                Quantity1: item.Quantity1,
                                Quantity2: item.Quantity2,
                                Property1: item.Property1,
                                Property2: item.Property2,
                                Note: item.Note,
                                Id: item.Id
                            });
                        });
                        if (requestInfo.StepNo == 2) {
                            $.ajax({
                                url: '/Requests/CheckWarehouseConfig',
                                type: 'GET',
                                data: {
                                    WarehouseCode: CL.FromShop,
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    console.log("ERROR!");
                                },
                                success: function (datasCF) {
                                    if (datasCF[0].ShopConfig === 0) {
                                        $('#Approved_HuongXL_164').val('0');
                                        $('#Details').val(JSON.stringify(dataReturn));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    }
                                    else if (datasCF[0].ShopConfig === 1) {
                                        $('#Approved_HuongXL_164').val('1');
                                        $('#Details').val(JSON.stringify(dataReturn));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    }
                                    else if (datasCF[0].ShopConfig === -1) {
                                        if (confirm("Shop này chưa được định nghĩa nội/ngoại thành." + "\n" + "Bạn có chắc chắn muốn tạo calllog Bill vận chuyển?!") == true) {
                                            $('#Approved_HuongXL_164').val('0');
                                            $('#Details').val(JSON.stringify(dataReturn));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/ChangeStep");
                                            form.submit();
                                        }
                                        else {
                                            $('#Approved_HuongXL_164').val('1');
                                            $('#Details').val(JSON.stringify(dataReturn));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/ChangeStep");
                                            form.submit();
                                        };
                                    };
                                }
                            });
                        }
                        else {
                            $('#Approved_HuongXL_164').val('1');
                            $('#Details').val(JSON.stringify(dataReturn));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/ChangeStep");
                            form.submit();
                        };
                    };
                });
            });
        });
    };
    //▲ Add - TrungNC3 - 2017.09.27 - =======================================
    function contruct_165() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            if (respone[0].CfReplaceProduct == 'Đã nhận')
                jQuery.uniform.update(jQuery("#received_45").prop('checked', true));
            else if (respone[0].CfReplaceProduct == 'Chưa nhận')
                jQuery.uniform.update(jQuery("#notReceived_45").prop('checked', true));

            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            $('#hd45_SPMoi').show();
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        [

                            'Chọn loại cấp ',// Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1
                            'Tên Shop',
                            'Hệ thống',
                            'Mã sản phẩm cấp mới',
                            'Tên sản phẩm cấp mới',
                            'Số lượng',
                        ],
                    columns: [
                        //▼ Edit - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v2
                        { data: "LoaiCap", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "ShopName", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "SystemName", type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Quantity", type: 'text', className: 'htLeft', readOnly: true, },
                        //▲ Edit - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v2
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            if (!check)
                $('input[name=ConfirmReplaceProduct_45]').attr("disabled", true);

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_45]:checked").val();
                //▼ Add- NghiaTV5 - 8/12/2017 - 165 - Xác Nhận
                if (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined) {
                    XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop nhận sản phẩm đổi mới/thay thế của IT."); return;
                }
                //▲ Add- NghiaTV5 - 8/12/2017 - 165 - Xác Nhận
                var datareturn = [];
                if (cfReceiveSPMoi != null || cfReceiveSPMoi != undefined || cfReceiveSPMoi != '') {
                    datareturn.push({
                        cfReceiveSPMoi: cfReceiveSPMoi// Edit - NghiaTV5 - 8/12/2017 - 165 – Xác Nhận 
                    });
                }
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                //▼ Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1
                //▼ Add - NghiaTV5 - 30/11/2017 - 165 - Check Rỗng 
                var Rong = [];
                $.grep(hot.getData(), function (item, index) {
                    if (item.ProductCode == null || item.ShopCode == null || item.SystemCode == null || item.LoaiCap == null) {
                        Rong.push((index + 1));
                    }
                });
                if (Rong.length > 0) {
                    XFunction.RenderMessage("error", 'Vui lòng chọn đầy đủ dữ liệu trên lưới chi tiết vui lòng xem lại dòng ' + Rong.join(',') + ' !'); return;
                    return false;
                }
                //▲ Add - NghiaTV5 - 30/11/2017 - 165 - Check Rỗng
                $.each(hot.getData(), function (index, item) {
                    item.LoaiCap == "Cấp mới" ? item.LoaiCap = 1 : item.LoaiCap = 2
                    if (item.ProductCode !== null && item.ShopCode !== null && item.SystemCode !== null) {
                        datareturn.push(item);
                    }
                })
                //▲ Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });

            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_45]:checked").val();
                if (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined) {
                    XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của shop nhận sản phẩm cấp mới/thay thế của IT."); return;
                }
                if (cfReceiveSPMoi == 'Chưa nhận' && message.length == 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập lý do chưa nhận sản phẩm cấp mới/thay thế của IT!"); return;
                }
                if (cfReceiveSPMoi == 'Chưa nhận') {
                    XFunction.RenderMessage("error", "Không thể chuyển bước khi xác nhận là chưa nhận!"); return;
                }
                var datareturn = [];
                if (cfReceiveSPMoi != null || cfReceiveSPMoi != undefined || cfReceiveSPMoi != '') {
                    datareturn.push({
                        cfReceiveSPMoi: cfReceiveSPMoi// Edit - NghiaTV5 - 8/12/2017 - 165 – Xác Nhận 
                    });
                }
                //▼ Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1
                //▼ Add - NghiaTV5 - 30/11/2017 - 165 - Check Rỗng 
                var Rong = [];
                $.grep(hot.getData(), function (item, index) {
                    if (item.ProductCode == null || item.ShopCode == null || item.SystemCode == null || item.LoaiCap == null) {
                        Rong.push((index + 1));
                    }
                });
                if (Rong.length > 0) {
                    XFunction.RenderMessage("error", 'Vui lòng chọn đầy đủ dữ liệu trên lưới chi tiết vui lòng xem lại dòng ' + Rong.join(',') + ' !'); return;
                    return false;
                }
                //▲ Add - NghiaTV5 - 30/11/2017 - 165 - Check Rỗng
                $.each(hot.getData(), function (index, item) {
                    item.LoaiCap == "Cấp mới" ? item.LoaiCap = 1 : item.LoaiCap = 2
                    if (item.ProductCode !== null && item.ShopCode !== null && item.SystemCode !== null) {
                        datareturn.push(item);
                    }
                })
                //▲ Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
        });
    };
    function contruct_171() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    autoColumnSize: true,
                    autoRowSize: true,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    stretchH: 'all',
                    //====================================Oder ==============================================
                    colHeaders: ['Tên shop', 'Mã sản phẩm', 'Tên sản phẩm', 'SL/Imei', 'Nội dung xử lý', 'Ghi chú'],
                    columns: [
                        { data: "WarehouseName", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "ProductsCode", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "ProductsName", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "SLIM", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "NoiDung", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Notes", type: 'text', className: 'htLeft', readOnly: true },
                    ]
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            //===========================
            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id
                    });
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
            $btnReply.on('click', function () {
                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                } else {

                    $('#Details').val(JSON.stringify([]));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }

            });
            $btnChangeStep.on('click', function () {
                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                $('#Details').val(JSON.stringify([]));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
        });
    };
    function contruct_166() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            console.log(respone);
            var dataHandsontable = [], Ngayhethan = '', EMEICheck = 0, ThuNhapBT = '';
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };

            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;

            var NXL = permisstion.isAssiner == true ? true : false;
            var Assi_Step_1 = false;
            if (Ass == dataHandsontable[0].Assigner && CL.StepNo == '2' && CL.Status != 4 && CL.Status != 5) {
                Assi_Step_1 = true;
            }
            if (dataHandsontable.length > 0) {
                $('#pro-name-166').text(dataHandsontable[0].PromotionsName);
                $('#cus-name-166').text(dataHandsontable[0].CustomerName);
                $('#phone-166').text(dataHandsontable[0].Phone);
                $('#so-166').text(dataHandsontable[0].So);
                //▼ 166 - Add - TrungNC3 - 18/09/2017 - Thêm cột mã kho vào loại callLog hình ảnh khuyến mãi
                $('#kho-166').text(dataHandsontable[0].MaKho);
                //▲ 166 - Add - =======================================
                $('#text-thue-166').val(dataHandsontable[0].Money1);
                $('#girt-166').html('<pre>' + dataHandsontable[0].Gift + '</pre>');
                Ngayhethan = dataHandsontable[0].NgayHetHan;

                EMEICheck = dataHandsontable[0].EMEI;
                ThuNhapBT = dataHandsontable[0].AbnormalIncome;

                $('#text-imei-166').val(dataHandsontable[0].Property8);

                if (dataHandsontable[0].AbnormalIncome != 0) {
                    //-- Hiện
                }
                else {
                    //--Ẩn
                    $('#th-phieu-1').remove();
                    $('#td-talble-166-1').remove();
                    $('#td-talble-166-2').remove();
                }
                if (dataHandsontable[0].EMEI == 1) {
                    $('#tr-imei-166').show();
                }
                else {
                    $('#tr-imei-166').remove();
                }
                $('#tinh-trang-trao-thuong').multiselect({
                    nonSelectedText: 'Không có thông tin',
                    maxHeight: 250,
                    buttonWidth: '100%',
                    enableFiltering: true,
                    enableFullValueFiltering: true,
                    enableCaseInsensitiveFiltering: true
                });
                $('#tinh-trang-trao-thuong').multiselect('select', dataHandsontable[0].Property5);
                $('#tinh-trang-trao-thuong').multiselect("refresh");

                if (CL.Status != 4 || CL.Status != 5) {
                    $('#tinh-trang-trao-thuong').attr("disabled", true);
                }
                //--------------------------------------
                if (CL.StepNo == 1) {
                    if (!NXL) {
                        $('#c_' + CL.Id).attr("disabled", true);
                        $('#c2_' + CL.Id).attr("disabled", true);
                        $('#c3_' + CL.Id).attr("disabled", true);
                        $('#c4_' + CL.Id).attr("disabled", true);
                        $('#c5_' + CL.Id).attr("disabled", true);

                        $('#upload-file-cmnd-mat-truoc').remove();
                        $('#upload-file-cmnd-mat-sau').remove();
                        $('#upload-file-xac-nhan-chu-ky').remove();
                        $('#file-giai-thuong').remove();
                        $('#upload-file-nop-tien').remove();
                    }
                    else {
                        //--- Do notthings
                    }

                    //Xet ẩn hiện textbox so tien thue
                    if (ThuNhapBT === '0') {
                        $('#tr-thue-166').hide();
                    }
                    else {
                        $('#tr-thue-166').show();
                    }
                    //--------------------------------------
                    if (dataHandsontable[0].Uri_Col_1 == null || dataHandsontable[0].Uri_Col_1 == '' || dataHandsontable[0].Uri_Col_1 == undefined) {
                        $("#a_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_1);
                        $("#img_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_1);
                    }
                    //--------
                    if (dataHandsontable[0].Uri_Col_2 == null || dataHandsontable[0].Uri_Col_2 == '' || dataHandsontable[0].Uri_Col_2 == undefined) {
                        $("#a2_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img2_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c2_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a2_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_2);
                        $("#img2_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_2);
                    }
                    //--------
                    if (dataHandsontable[0].Uri_Col_3 == null || dataHandsontable[0].Uri_Col_3 == '' || dataHandsontable[0].Uri_Col_3 == undefined) {

                        $("#a3_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img3_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c3_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a3_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_3);
                        $("#img3_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_3);
                    }
                    //--------
                    if (dataHandsontable[0].Uri_Col_4 == null || dataHandsontable[0].Uri_Col_4 == '' || dataHandsontable[0].Uri_Col_4 == undefined) {
                        $("#a4_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img4_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c4_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a4_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_4);
                        $("#img4_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_4);
                    }
                    //--------
                    if (dataHandsontable[0].Uri_Col_5 == null || dataHandsontable[0].Uri_Col_5 == '' || dataHandsontable[0].Uri_Col_5 == undefined) {
                        $("#a5_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img5_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c5_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a5_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_5);
                        $("#img5_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_5);
                    }


                    if (dataHandsontable[0].Approved == 0 || dataHandsontable[0].Uri_Col_1 == null || dataHandsontable[0].Uri_Col_1 == '' || dataHandsontable[0].Uri_Col_1 == undefined) {

                        $('#uniform-c_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {
                        $('#upload-file-cmnd-mat-truoc').remove();
                        if (dataHandsontable[0].Approved == 1) {
                            $('#uniform-c_' + CL.Id).find('span').addClass('checked');
                        }
                    }
                    if (dataHandsontable[0].Approved2 == 0 || dataHandsontable[0].Uri_Col_2 == null || dataHandsontable[0].Uri_Col_2 == '' || dataHandsontable[0].Uri_Col_2 == undefined) {

                        $('#uniform-c2_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {
                        $('#upload-file-cmnd-mat-sau').remove();
                        if (dataHandsontable[0].Approved2 == 1) {
                            $('#uniform-c2_' + CL.Id).find('span').addClass('checked');
                        }

                    }
                    if (dataHandsontable[0].Approved3 == 0 || dataHandsontable[0].Uri_Col_3 == null || dataHandsontable[0].Uri_Col_3 == '' || dataHandsontable[0].Uri_Col_3 == undefined) {

                        $('#uniform-c3_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {

                        $('#upload-file-xac-nhan-chu-ky').remove();
                        if (dataHandsontable[0].Approved3 == 1) {
                            $('#uniform-c3_' + CL.Id).find('span').addClass('checked');
                        }
                    }
                    if (dataHandsontable[0].Approved4 == 0 || dataHandsontable[0].Uri_Col_4 == null || dataHandsontable[0].Uri_Col_4 == '' || dataHandsontable[0].Uri_Col_4 == undefined) {
                        $('#uniform-c4_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {
                        $('#file-giai-thuong').remove();
                        if (dataHandsontable[0].Approved4 == 1) {
                            $('#uniform-c4_' + CL.Id).find('span').addClass('checked');
                        }
                    }

                    if (dataHandsontable[0].Approved5 == 0 || dataHandsontable[0].Uri_Col_5 == null || dataHandsontable[0].Uri_Col_5 == '' || dataHandsontable[0].Uri_Col_5 == undefined) {
                        $('#uniform-c5_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {
                        $('#upload-file-nop-tien').remove();
                        if (dataHandsontable[0].Approved5 == 1) {
                            $('#uniform-c5_' + CL.Id).find('span').addClass('checked');
                        }
                    }
                }
                else { //-------------------- Nếu Bước 2
                    if (!NXL) {
                        if (Assi_Step_1 == true) { //--- là NXL bước 1
                            //--- Do notthings
                        }
                        else {

                            $('#upload-file-cmnd-mat-truoc').remove();
                            $('#upload-file-cmnd-mat-sau').remove();
                            $('#upload-file-xac-nhan-chu-ky').remove();
                            $('#file-giai-thuong').remove();
                            $('#upload-file-nop-tien').remove();
                        }
                        $('#c_' + CL.Id).attr("disabled", true);
                        $('#c2_' + CL.Id).attr("disabled", true);
                        $('#c3_' + CL.Id).attr("disabled", true);
                        $('#c4_' + CL.Id).attr("disabled", true);
                        $('#c5_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        //--- Do notthings
                    }
                    //--------------------------------------
                    if (dataHandsontable[0].Uri_Col_1 == null || dataHandsontable[0].Uri_Col_1 == '' || dataHandsontable[0].Uri_Col_1 == undefined) {
                        $("#a_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_1);
                        $("#img_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_1);
                    }
                    //--------
                    if (dataHandsontable[0].Uri_Col_2 == null || dataHandsontable[0].Uri_Col_2 == '' || dataHandsontable[0].Uri_Col_2 == undefined) {
                        $("#a2_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img2_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c2_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a2_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_2);
                        $("#img2_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_2);
                    }
                    //--------
                    if (dataHandsontable[0].Uri_Col_3 == null || dataHandsontable[0].Uri_Col_3 == '' || dataHandsontable[0].Uri_Col_3 == undefined) {

                        $("#a3_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img3_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c3_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a3_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_3);
                        $("#img3_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_3);
                    }
                    //--------
                    if (dataHandsontable[0].Uri_Col_4 == null || dataHandsontable[0].Uri_Col_4 == '' || dataHandsontable[0].Uri_Col_4 == undefined) {
                        $("#a4_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img4_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c4_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a4_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_4);
                        $("#img4_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_4);
                    }
                    //--------
                    if (dataHandsontable[0].Uri_Col_5 == null || dataHandsontable[0].Uri_Col_5 == '' || dataHandsontable[0].Uri_Col_5 == undefined) {
                        $("#a5_" + CL.Id + "").attr('href', '/assets/images/noimage.jpg');
                        $("#img5_" + CL.Id + "").attr('src', '/assets/images/noimage.jpg');
                        $('#c5_' + CL.Id).attr("disabled", true);
                    }
                    else {
                        $("#a5_" + CL.Id + "").attr('href', dataHandsontable[0].Uri_Col_5);
                        $("#img5_" + CL.Id + "").attr('src', dataHandsontable[0].Uri_Col_5);
                    }

                    if (dataHandsontable[0].Approved == 0 || dataHandsontable[0].Uri_Col_1 == null || dataHandsontable[0].Uri_Col_1 == '' || dataHandsontable[0].Uri_Col_1 == undefined) {

                        $('#uniform-c_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {
                        $('#upload-file-cmnd-mat-truoc').remove();
                        if (dataHandsontable[0].Approved == 1) {
                            $('#uniform-c_' + CL.Id).find('span').addClass('checked');
                            $('#c_' + CL.Id).attr("disabled", true);
                            $('#txt-hinh-up-cmnd-truoc').text('[Đã duyệt]');
                        }

                    }
                    if (dataHandsontable[0].Approved2 == 0 || dataHandsontable[0].Uri_Col_2 == null || dataHandsontable[0].Uri_Col_2 == '' || dataHandsontable[0].Uri_Col_2 == undefined) {

                        $('#uniform-c2_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {
                        $('#upload-file-cmnd-mat-sau').remove();
                        if (dataHandsontable[0].Approved2 == 1) {
                            $('#uniform-c2_' + CL.Id).find('span').addClass('checked');
                            $('#c2_' + CL.Id).attr("disabled", true);
                            $('#txt-hinh-up-cmnd-sau').text('[Đã duyệt]');
                        }

                    }
                    if (dataHandsontable[0].Approved3 == 0 || dataHandsontable[0].Uri_Col_3 == null || dataHandsontable[0].Uri_Col_3 == '' || dataHandsontable[0].Uri_Col_3 == undefined) {

                        $('#uniform-c3_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {

                        $('#upload-file-xac-nhan-chu-ky').remove();
                        if (dataHandsontable[0].Approved3 == 1) {
                            $('#uniform-c3_' + CL.Id).find('span').addClass('checked');
                            $('#c3_' + CL.Id).attr("disabled", true);
                            $('#xac-nhan-chu-ky').text('[Đã duyệt]');
                        }

                    }
                    if (dataHandsontable[0].Approved4 == 0 || dataHandsontable[0].Uri_Col_4 == null || dataHandsontable[0].Uri_Col_4 == '' || dataHandsontable[0].Uri_Col_4 == undefined) {
                        $('#uniform-c4_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {
                        $('#file-giai-thuong').remove();
                        if (dataHandsontable[0].Approved4 == 1) {
                            $('#uniform-c4_' + CL.Id).find('span').addClass('checked');
                            $('#c4_' + CL.Id).attr("disabled", true);
                        }

                    }
                    if (dataHandsontable[0].Approved5 == 0 || dataHandsontable[0].Uri_Col_5 == null || dataHandsontable[0].Uri_Col_5 == '' || dataHandsontable[0].Uri_Col_5 == undefined) {
                        $('#uniform-c5_' + CL.Id).find('span').removeClass('checked');
                    }
                    else {
                        $('#upload-file-nop-tien').remove();
                        if (dataHandsontable[0].Approved5 == 1) {
                            $('#uniform-c5_' + CL.Id).find('span').addClass('checked');
                            $('#c5_' + CL.Id).attr("disabled", true);
                            $('#thu-nhap-bat-thuong').text('[Đã duyệt]');
                        }

                    }

                    if (CL.StepNo == 2) {
                        if (ThuNhapBT === '0') {
                            $('#tr-thue-166').hide();
                        }
                        else {
                            $('#tr-thue-166').show();
                        }
                        if (dataHandsontable[0].Approved == 0) {
                            $('#txt-hinh-up-cmnd-truoc').text('[Hình bị từ chối]');
                        }
                        if (dataHandsontable[0].Approved2 == 0) {
                            $('#txt-hinh-up-cmnd-sau').text('[Hình bị từ chối]');
                        }
                        if (dataHandsontable[0].Approved3 == 0) {
                            $('#xac-nhan-chu-ky').text('[Hình bị từ chối]');
                        }

                        if (dataHandsontable[0].Approved5 == 0) {
                            $('#thu-nhap-bat-thuong').text('[Hình bị từ chối]');
                        }

                        if (dataHandsontable[0].Approved == 2) {
                            $('#txt-hinh-up-cmnd-truoc').text('[Hình up lại]');
                        }
                        if (dataHandsontable[0].Approved2 == 2) {
                            $('#txt-hinh-up-cmnd-sau').text('[Hình up lại]');
                        }
                        if (dataHandsontable[0].Approved3 == 2) {
                            $('#xac-nhan-chu-ky').text('[Hình up lại]');
                        }

                        if (dataHandsontable[0].Approved5 == 2) {
                            $('#thu-nhap-bat-thuong').text('[Hình up lại]');
                        }
                    }

                }
            }
            else {
                $('#pro-name-166').empty();
                $('#cus-name-166').empty();
                $('#phone-166').empty();
                $('#so-166').empty();
                //▼ 166 - Add - TrungNC3 - 18/09/2017 - Thêm cột mã kho vào loại callLog hình ảnh khuyến mãi
                $('#kho-166').empty();
                //▲ 166 - Add - =======================================
                $('#girt-166').empty();
                $('#text-imei-166').val('');
                $('#text-thue-166').val('');
            }
            $("#comment").click(function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var checkedVals = $('div#uniform-c_' + CL.Id).find('span').hasClass('checked');
                var checkedVals2 = $('div#uniform-c2_' + CL.Id).find('span').hasClass('checked');
                var checkedVals3 = $('div#uniform-c3_' + CL.Id).find('span').hasClass('checked');
                var checkedVals4 = $('div#uniform-c4_' + CL.Id).find('span').hasClass('checked');
                var checkedVals5 = $('div#uniform-c5_' + CL.Id).find('span').hasClass('checked');

                var col = checkedVals == true ? 1 : 0,
                    col2 = checkedVals2 == true ? 2 : 0,
                    col3 = checkedVals3 == true ? 3 : 0,
                    col4 = checkedVals4 == true ? 4 : 0,
                    col5 = checkedVals5 == true ? 5 : 0;

                var aa = [];
                aa.push(col, col2, col3, col4, col5);
                $('#CheckApprovedImages_166').val(aa);

                let TextIEMI = $('#text-imei-166').val();
                let TextSoTienThue = $('#text-thue-166').val();
                if (EMEICheck == 1 && (TextIEMI == '' || TextIEMI == null || TextIEMI == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập imei!");
                    $('#error-imei-166').html('Vui lòng nhập imei!');
                    return false;
                }
                else {
                    $('#error-imei-166').html('');
                }

                if (CL.StepNo === 1 && ThuNhapBT !== '0' && (TextSoTienThue == '' || TextSoTienThue == null || TextSoTienThue == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập số tiền thuế!");
                    $('#error-thue-166').html('Vui lòng nhập số tiền thuế!');
                    return false;
                }
                else {
                    $('#error-thue-166').html('');
                }
                var TraoThuong = $('#tinh-trang-trao-thuong').val();
                if (TraoThuong == '' || TraoThuong == null || TraoThuong == undefined) {
                    XFunction.RenderMessage("error", "Vui lòng chọn tình trạng thao thưởng!");
                    return false;
                }
                else {
                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn");
                        return false;
                    } else {
                        if (TraoThuong == 1) {
                            $.get('/PromotionsPictures/Products_Pictures_Couts', { RequestId: CL.Id }, function (data) {

                                if (data.length > 0) {
                                    if (data[0].Result == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng đính kèm tất cả hình còn thiếu khi khách hàng nhận giải!");
                                        return false;
                                    }
                                    else {
                                        if (CL.StepNo == 2 && Assi_Step_1 == true) {
                                            $.get('/PromotionsPictures/Promotions_Pictures_Cout_HinhUpLai', { stepNo: CL.StepNo, RequestId: CL.Id }, function (data) {
                                                if (data.length > 0) {
                                                    if (data[0].Result == 1) {
                                                        XFunction.RenderMessage("error", "Vui lòng đính lại hình chưa được duyệt trước khi trao đổi!");
                                                        return false;
                                                    }
                                                    else {
                                                        $('#TraoThuongId').val(TraoThuong);
                                                        $('#Emei166').val(TextIEMI);
                                                        $('#Thue166').val(TextSoTienThue);
                                                        $('#Details').val(JSON.stringify(''));
                                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/Conversation");
                                                        form.submit();
                                                    }
                                                }
                                                else {
                                                    XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra!");
                                                    return false;
                                                }
                                            });
                                        }
                                        else {
                                            $('#TraoThuongId').val(TraoThuong);
                                            $('#Emei166').val(TextIEMI);
                                            $('#Thue166').val(TextSoTienThue);
                                            $('#Details').val(JSON.stringify(''));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/Conversation");
                                            form.submit();
                                        }

                                    }
                                }
                            });
                        }
                        else {
                            //Date.prototype.yyyymmdd = function () {
                            //    var yyyy = this.getFullYear().toString();
                            //    var mm = (this.getMonth() + 1).toString(); // getMonth() is zero-based
                            //    var dd = this.getDate().toString();
                            //    return yyyy + "/" + (mm[1] ? mm : "0" + mm[0]) + "/" + (dd[1] ? dd : "0" + dd[0]); // padding
                            //};

                            //var date = new Date();
                            //if (Ngayhethan != date.yyyymmdd()) {
                            //    XFunction.RenderMessage("error", "Chỉ được chọn huỷ không nhận giải vào ngày hết hạn của chương trình! Ngày huỷ dự kiến: " + Ngayhethan);
                            //    return false;
                            //}
                            //else {
                            if (CL.StepNo == 2 && Assi_Step_1 == true) {
                                $.get('/PromotionsPictures/Promotions_Pictures_Cout_HinhUpLai', { stepNo: CL.StepNo, RequestId: CL.Id }, function (data) {
                                    if (data.length > 0) {
                                        if (data[0].Result == 1) {
                                            XFunction.RenderMessage("error", "Vui lòng đính lại hình chưa được duyệt trước khi trao đổi!");
                                            return false;
                                        }
                                        else {
                                            $('#TraoThuongId').val(TraoThuong);
                                            $('#Emei166').val(TextIEMI);
                                            $('#Thue166').val(TextSoTienThue);
                                            $('#Details').val(JSON.stringify(''));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/Conversation");
                                            form.submit();
                                        }
                                    }
                                    else {
                                        XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra!");
                                        return false;
                                    }
                                });
                            }
                            else {
                                $('#TraoThuongId').val(TraoThuong);
                                $('#Emei166').val(TextIEMI);
                                $('#Thue166').val(TextSoTienThue);
                                console.log($('#Thue166').val()); return false;
                                $('#Details').val(JSON.stringify(''));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Conversation");
                                form.submit();
                            }
                            // }
                        }


                    };
                }
            });
            $("#reply").click(function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var checkedVals = $('div#uniform-c_' + CL.Id).find('span').hasClass('checked');
                var checkedVals2 = $('div#uniform-c2_' + CL.Id).find('span').hasClass('checked');
                var checkedVals3 = $('div#uniform-c3_' + CL.Id).find('span').hasClass('checked');
                var checkedVals4 = $('div#uniform-c4_' + CL.Id).find('span').hasClass('checked');
                var checkedVals5 = $('div#uniform-c5_' + CL.Id).find('span').hasClass('checked');

                var col = checkedVals == true ? 1 : 0,
                    col2 = checkedVals2 == true ? 2 : 0,
                    col3 = checkedVals3 == true ? 3 : 0,
                    col4 = checkedVals4 == true ? 4 : 0,
                    col5 = checkedVals5 == true ? 5 : 0;

                var aa = [];
                aa.push(col, col2, col3, col4, col5);

                $('#CheckApprovedImages_166').val(aa);

                let TextIEMI = $('#text-imei-166').val();
                let TextSoTienThue = $('#text-thue-166').val();
                if (EMEICheck == 1 && (TextIEMI == '' || TextIEMI == null || TextIEMI == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập imei!");
                    $('#error-imei-166').html('Vui lòng nhập imei!');
                    return false;
                }
                else {
                    $('#error-imei-166').html('');
                }
                if (CL.StepNo === 1 && ThuNhapBT !== '0' && (TextSoTienThue == '' || TextSoTienThue == null || TextSoTienThue == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập số tiền thuế!");
                    $('#error-thue-166').html('Vui lòng nhập số tiền thuế!');
                    return false;
                }
                else {
                    $('#error-thue-166').html('');
                }
                var TraoThuong = $('#tinh-trang-trao-thuong').val();
                if (TraoThuong == '' || TraoThuong == null || TraoThuong == undefined) {
                    XFunction.RenderMessage("error", "Vui lòng chọn tình trạng thao thưởng!");
                    return false;
                }
                else {
                    var message = $("#Message").val();

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn");
                    } else {
                        if (TraoThuong == 1) {
                            $.get('/PromotionsPictures/Products_Pictures_Couts', { RequestId: CL.Id }, function (data) {
                                if (data.length > 0) {
                                    if (data[0].Result == 0) {
                                        XFunction.RenderMessage("error", "Vui lòng đính kèm tất cả hình còn thiếu khi khách hàng nhận giải!");
                                        return false
                                    }
                                    else {
                                        if (CL.StepNo == 2 && Assi_Step_1 == true) {

                                            $.get('/PromotionsPictures/Promotions_Pictures_Cout_HinhUpLai', { stepNo: CL.StepNo, RequestId: CL.Id }, function (data) {

                                                if (data.length > 0) {
                                                    if (data[0].Result == 1) {
                                                        XFunction.RenderMessage("error", "Vui lòng đính lại hình chưa được duyệt trước khi trả lời!");
                                                        return false;
                                                    }
                                                    else {
                                                        $('#TraoThuongId').val(TraoThuong);
                                                        $('#Emei166').val(TextIEMI);
                                                        $('#Details').val(JSON.stringify(''));
                                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/Reply");
                                                        form.submit();
                                                    }
                                                }
                                                else {
                                                    XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra!");
                                                    return false;
                                                }
                                            });
                                        }
                                        else {
                                            if (parseInt(ThuNhapBT) != 0) {
                                                if (col == 0 || col2 == 0 || col3 == 0 || col5 == 0) {
                                                    XFunction.RenderMessage("error", "Phải chọn duyệt những hình bắt buộc trước khi trả lời!");
                                                    return false;
                                                }
                                                else {
                                                    $('#TraoThuongId').val(TraoThuong);
                                                    $('#Emei166').val(TextIEMI);
                                                    $('#Thue166').val(TextSoTienThue);
                                                    $('#Details').val(JSON.stringify(''));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/Reply");
                                                    form.submit();
                                                }

                                            }
                                            else {
                                                if (col == 0 || col2 == 0 || col3 == 0) {
                                                    XFunction.RenderMessage("error", "Phải chọn duyệt những hình bắt buộc trước khi trả lời!");
                                                    return false;
                                                }
                                                else {
                                                    $('#TraoThuongId').val(TraoThuong);
                                                    $('#Emei166').val(TextIEMI);
                                                    $('#Thue166').val(TextSoTienThue);
                                                    $('#Details').val(JSON.stringify(''));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/Reply");
                                                    form.submit();
                                                }
                                            }
                                        }

                                    }
                                }
                                else {
                                    XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra cout ảnh!");
                                    return false;
                                }
                            });
                        }
                        else {
                            //Date.prototype.yyyymmdd = function () {
                            //    var yyyy = this.getFullYear().toString();
                            //    var mm = (this.getMonth() + 1).toString(); // getMonth() is zero-based
                            //    var dd = this.getDate().toString();
                            //    return yyyy + "/" + (mm[1] ? mm : "0" + mm[0]) + "/" + (dd[1] ? dd : "0" + dd[0]); // padding
                            //};

                            //var date = new Date();
                            //if (Ngayhethan != date.yyyymmdd()) {
                            //    XFunction.RenderMessage("error", "Chỉ được chọn huỷ không nhận giải vào ngày hết hạn của chương trình! Ngày huỷ dự kiến: " + Ngayhethan);
                            //    return false;
                            //}
                            //else {
                            if (CL.StepNo == 2 && Assi_Step_1 == true) {
                                $.get('/PromotionsPictures/Promotions_Pictures_Cout_HinhUpLai', { stepNo: CL.StepNo, RequestId: CL.Id }, function (data) {
                                    if (data.length > 0) {
                                        if (data[0].Result == 1) {
                                            XFunction.RenderMessage("error", "Vui lòng đính lại hình chưa được duyệt trước khi trả lời!");
                                            return false;
                                        }
                                        else {
                                            $('#TraoThuongId').val(TraoThuong);
                                            $('#Emei166').val(TextIEMI);
                                            $('#Details').val(JSON.stringify(''));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/Reply");
                                            form.submit();
                                        }
                                    }
                                    else {
                                        XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra!");
                                        return false;
                                    }
                                });
                            }
                            else {
                                /*▼ Edit - TrungNC3 - 2017.09.27 - Chỉnh sửa không bắt buộc up hình khi chọn trang thái huy nhận giải */
                                //if (parseInt(ThuNhapBT) != 0) {
                                //    if (col == 0 || col2 == 0 || col3 == 0 || col5 == 0) {
                                //        XFunction.RenderMessage("error", "Phải chọn duyệt những hình bắt buộc trước khi trả lời!");
                                //        return false;
                                //    }
                                //    else {
                                //        $('#TraoThuongId').val(TraoThuong);
                                //        $('#Emei166').val(TextIEMI);
                                //        $('#Thue166').val(TextSoTienThue);
                                //        $('#Details').val(JSON.stringify(''));
                                //        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                //        var form = $("form#form-detail");
                                //        form.attr("action", "/Requests/Reply");
                                //        form.submit();
                                //    }
                                //}
                                //else {
                                //if (col == 0 || col2 == 0 || col3 == 0) {
                                //    XFunction.RenderMessage("error", "Phải chọn duyệt những hình bắt buộc trước khi trả lời!");
                                //    return false;
                                //}
                                // else {
                                $('#TraoThuongId').val(TraoThuong);
                                $('#Emei166').val(TextIEMI);
                                $('#Thue166').val(TextSoTienThue);
                                $('#Details').val(JSON.stringify(''));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Reply");
                                form.submit();
                                //  }
                            }
                            ////}

                            //}
                        }
                    };
                }

            });
            $("#complete").click(function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var checkedVals = $('div#uniform-c_' + CL.Id).find('span').hasClass('checked');
                var checkedVals2 = $('div#uniform-c2_' + CL.Id).find('span').hasClass('checked');
                var checkedVals3 = $('div#uniform-c3_' + CL.Id).find('span').hasClass('checked');
                var checkedVals4 = $('div#uniform-c4_' + CL.Id).find('span').hasClass('checked');
                var checkedVals5 = $('div#uniform-c5_' + CL.Id).find('span').hasClass('checked');

                var col = checkedVals == true ? 1 : 0,
                    col2 = checkedVals2 == true ? 2 : 0,
                    col3 = checkedVals3 == true ? 3 : 0,
                    col4 = checkedVals4 == true ? 4 : 0,
                    col5 = checkedVals5 == true ? 5 : 0;

                var aa = [];
                aa.push(col, col2, col3, col4, col5);
                $('#CheckApprovedImages_166').val(aa);

                let TextIEMI = $('#text-imei-166').val();
                let TextSoTienThue = $('#text-thue-166').val();
                if (EMEICheck == 1 && (TextIEMI == '' || TextIEMI == null || TextIEMI == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập imei!");
                    $('#error-imei-166').html('Vui lòng nhập imei!');
                    return false;
                }
                else {
                    $('#error-imei-166').html('');
                }
                if (CL.StepNo === 1 && ThuNhapBT !== '0' && (TextSoTienThue == '' || TextSoTienThue == null || TextSoTienThue == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập số tiền thuế!");
                    $('#error-thue-166').html('Vui lòng nhập số tiền thuế!');
                    return false;
                }
                else {
                    $('#error-thue-166').html('');
                }
                var TraoThuong = $('#tinh-trang-trao-thuong').val();
                if (TraoThuong == '' || TraoThuong == null || TraoThuong == undefined) {
                    XFunction.RenderMessage("error", "Vui lòng chọn tình trạng thao thưởng!");
                    return false;
                }
                else {
                    if (TraoThuong == 1) {
                        $.get('/PromotionsPictures/Products_Pictures_Couts', { RequestId: CL.Id }, function (data) {
                            if (data.length > 0) {
                                if (data[0].Result == 0) {
                                    XFunction.RenderMessage("error", "Vui lòng đính kèm tất cả hình còn thiếu khi khách hàng nhận giải!");
                                    return false
                                }
                                else {
                                    if (CL.StepNo == 2 && Assi_Step_1 == true) {
                                        $.get('/PromotionsPictures/Promotions_Pictures_Cout_HinhUpLai', { stepNo: CL.StepNo, RequestId: CL.Id }, function (data) {
                                            if (data.length > 0) {
                                                if (data[0].Result == 1) {
                                                    XFunction.RenderMessage("error", "Vui lòng đính lại hình chưa được duyệt trước khi hoàn tất!");
                                                    return false;
                                                }
                                                else {
                                                    $('#TraoThuongId').val(TraoThuong);
                                                    $('#Emei166').val(TextIEMI);
                                                    $('#Thue166').val(TextSoTienThue);
                                                    $('#Details').val(JSON.stringify(''));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/Complete");
                                                    form.submit();
                                                }
                                            }
                                            else {
                                                XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra!");
                                                return false;
                                            }
                                        });
                                    }
                                    else {
                                        $('#TraoThuongId').val(TraoThuong);
                                        $('#Emei166').val(TextIEMI);
                                        $('#Thue166').val(TextSoTienThue);
                                        $('#Details').val(JSON.stringify(''));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/Complete");
                                        form.submit();
                                    }

                                }
                            }
                        });
                    }
                    else {
                        //Date.prototype.yyyymmdd = function () {
                        //    var yyyy = this.getFullYear().toString();
                        //    var mm = (this.getMonth() + 1).toString(); // getMonth() is zero-based
                        //    var dd = this.getDate().toString();
                        //    return yyyy + "/" + (mm[1] ? mm : "0" + mm[0]) + "/" + (dd[1] ? dd : "0" + dd[0]); // padding
                        //};

                        //var date = new Date();
                        //if (Ngayhethan != date.yyyymmdd()) {
                        //    XFunction.RenderMessage("error", "Chỉ được chọn huỷ không nhận giải vào ngày hết hạn của chương trình! Ngày huỷ dự kiến: " + Ngayhethan);
                        //    return false;
                        //}
                        //else {
                        if (CL.StepNo == 2 && Assi_Step_1 == true) {
                            $.get('/PromotionsPictures/Promotions_Pictures_Cout_HinhUpLai', { stepNo: CL.StepNo, RequestId: CL.Id }, function (data) {
                                if (data.length > 0) {
                                    if (data[0].Result == 1) {
                                        XFunction.RenderMessage("error", "Vui lòng đính lại hình chưa được duyệt trước khi hoàn tất!");
                                        return false;
                                    }
                                    else {
                                        $('#TraoThuongId').val(TraoThuong);
                                        $('#Emei166').val(TextIEMI);
                                        $('#Thue166').val(TextSoTienThue);
                                        $('#Details').val(JSON.stringify(''));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/Complete");
                                        form.submit();
                                    }
                                }
                                else {
                                    XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra!");
                                    return false;
                                }
                            });
                        }
                        else {
                            $('#TraoThuongId').val(TraoThuong);
                            $('#Emei166').val(TextIEMI);
                            $('#Thue166').val(TextSoTienThue);
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Complete");
                            form.submit();
                        }

                        //}
                    }

                }

            });
            $("#changeStep").click(function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var checkedVals = $('div#uniform-c_' + CL.Id).find('span').hasClass('checked');
                var checkedVals2 = $('div#uniform-c2_' + CL.Id).find('span').hasClass('checked');
                var checkedVals3 = $('div#uniform-c3_' + CL.Id).find('span').hasClass('checked');
                var checkedVals4 = $('div#uniform-c4_' + CL.Id).find('span').hasClass('checked');

                var col = checkedVals == true ? 1 : 0,
                    col2 = checkedVals2 == true ? 2 : 0,
                    col3 = checkedVals3 == true ? 3 : 0,
                    col4 = checkedVals4 == true ? 4 : 0;

                var aa = [];
                aa.push(col, col2, col3, col4);
                $('#CheckApprovedImages_166').val(aa);

                let TextIEMI = $('#text-imei-166').val();
                let TextSoTienThue = $('#text-thue-166').val();
                if (EMEICheck == 1 && (TextIEMI == '' || TextIEMI == null || TextIEMI == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập imei!");
                    $('#error-imei-166').html('Vui lòng nhập imei!');
                    return false;
                }
                else {
                    $('#error-imei-166').html('');
                }
                if (CL.StepNo === 1 && ThuNhapBT !== '0' && (TextSoTienThue == '' || TextSoTienThue == null || TextSoTienThue == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng nhập số tiền thuế!");
                    $('#error-thue-166').html('Vui lòng nhập số tiền thuế!');
                    return false;
                }
                else {
                    $('#error-thue-166').html('');
                }
                var TraoThuong = $('#tinh-trang-trao-thuong').val();
                if (TraoThuong == '' || TraoThuong == null || TraoThuong == undefined) {
                    XFunction.RenderMessage("error", "Vui lòng chọn tình trạng thao thưởng!");
                    return false;
                }
                else {
                    if (TraoThuong == 1) {
                        $.get('/PromotionsPictures/Products_Pictures_Couts', { RequestId: CL.Id }, function (data) {
                            if (data.length > 0) {
                                if (data[0].Result == 0) {
                                    XFunction.RenderMessage("error", "Vui lòng đính kèm tất cả hình còn thiếu khi khách hàng nhận giải!");
                                    return false
                                }
                                else {
                                    if (CL.StepNo == 2 && Assi_Step_1 == true) {
                                        $.get('/PromotionsPictures/Promotions_Pictures_Cout_HinhUpLai', { stepNo: CL.StepNo, RequestId: CL.Id }, function (data) {
                                            if (data.length > 0) {
                                                if (data[0].Result == 1) {
                                                    XFunction.RenderMessage("error", "Vui lòng đính lại hình chưa được duyệt trước khi chuyển bước!");
                                                    return false;
                                                }
                                                else {
                                                    $('#TraoThuongId').val(TraoThuong);
                                                    $('#Emei166').val(TextIEMI);
                                                    $('#Thue166').val(TextSoTienThue);
                                                    $('#Details').val(JSON.stringify(''));
                                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                                    var form = $("form#form-detail");
                                                    form.attr("action", "/Requests/ChangeStep");
                                                    form.submit();
                                                }
                                            }
                                            else {
                                                XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra!");
                                                return false;
                                            }
                                        });
                                    }
                                    else {
                                        $('#TraoThuongId').val(TraoThuong);
                                        $('#Emei166').val(TextIEMI);
                                        $('#Thue166').val(TextSoTienThue);
                                        $('#Details').val(JSON.stringify(''));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    }

                                }
                            }
                        });
                    }
                    else {
                        //Date.prototype.yyyymmdd = function () {
                        //    var yyyy = this.getFullYear().toString();
                        //    var mm = (this.getMonth() + 1).toString(); // getMonth() is zero-based
                        //    var dd = this.getDate().toString();
                        //    return yyyy + "/" + (mm[1] ? mm : "0" + mm[0]) + "/" + (dd[1] ? dd : "0" + dd[0]); // padding
                        //};

                        //var date = new Date();
                        //if (Ngayhethan != date.yyyymmdd()) {
                        //    XFunction.RenderMessage("error", "Chỉ được chọn huỷ không nhận giải vào ngày hết hạn của chương trình! Ngày huỷ dự kiến: " + Ngayhethan);
                        //    return false;
                        //}
                        //else {
                        if (CL.StepNo == 2 && Assi_Step_1 == true) {
                            $.get('/PromotionsPictures/Promotions_Pictures_Cout_HinhUpLai', { stepNo: CL.StepNo, RequestId: CL.Id }, function (data) {
                                if (data.length > 0) {
                                    if (data[0].Result == 1) {
                                        XFunction.RenderMessage("error", "Vui lòng đính lại hình chưa được duyệt trước khi chuyển bước!");
                                        return false;
                                    }
                                    else {
                                        $('#TraoThuongId').val(TraoThuong);
                                        $('#Emei166').val(TextIEMI);
                                        $('#Thue166').val(TextSoTienThue);
                                        $('#Details').val(JSON.stringify(''));
                                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/ChangeStep");
                                        form.submit();
                                    }
                                }
                                else {
                                    XFunction.RenderMessage("error", "Có lỗi trong quá trình kiểm tra!");
                                    return false;
                                }
                            });
                        }
                        else {
                            $('#TraoThuongId').val(TraoThuong);
                            $('#Emei166').val(TextIEMI);
                            $('#Thue166').val(TextSoTienThue);
                            $('#Details').val(JSON.stringify(''));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/ChangeStep");
                            form.submit();
                        }

                        // }
                    }
                }
            });


            //==================== Upload ảnh Loại 166
            $('#upload-file-cmnd-mat-truoc').click(function () {
                var FileId = $(this).attr('data-value');
                var Column = $(this).attr('data-id');
                $('#btnuploadDetailsDuyetAnh_166').attr('data-value', FileId).attr('data-id', Column);
                $('#uploadDetailsDuyetAnh_166').val('');
                $('#myModalUploadDuyetAnh_166').modal('show');
            });
            //==================== Upload ảnh Loại 166
            $('#upload-file-cmnd-mat-sau').click(function () {
                var FileId = $(this).attr('data-value');
                var Column = $(this).attr('data-id');
                $('#btnuploadDetailsDuyetAnh_166').attr('data-value', FileId).attr('data-id', Column);
                $('#uploadDetailsDuyetAnh_166').val('');
                $('#myModalUploadDuyetAnh_166').modal('show');
            });
            //==================== Upload ảnh Loại 166
            $('#upload-file-xac-nhan-chu-ky').click(function () {
                var FileId = $(this).attr('data-value');
                var Column = $(this).attr('data-id');
                $('#btnuploadDetailsDuyetAnh_166').attr('data-value', FileId).attr('data-id', Column);
                $('#uploadDetailsDuyetAnh_166').val('');
                $('#myModalUploadDuyetAnh_166').modal('show');
            });
            //==================== Upload ảnh Loại 166
            $('#upload-file-nop-tien').click(function () {
                var FileId = $(this).attr('data-value');
                var Column = $(this).attr('data-id');
                $('#btnuploadDetailsDuyetAnh_166').attr('data-value', FileId).attr('data-id', Column);
                $('#uploadDetailsDuyetAnh_166').val('');
                $('#myModalUploadDuyetAnh_166').modal('show');
            });
            //==================== Upload ảnh Loại 166
            $('#file-giai-thuong').click(function () {
                var FileId = $(this).attr('data-value');
                var Column = $(this).attr('data-id');
                $('#btnuploadDetailsDuyetAnh_166').attr('data-value', FileId).attr('data-id', Column);
                $('#uploadDetailsDuyetAnh_166').val('');
                $('#myModalUploadDuyetAnh_166').modal('show');
            });
            $("#UploadFormDuyetAnh_166").submit(function (e) {
                var data = new FormData();
                var selectedFiles = $("#uploadDetailsDuyetAnh_166")[0].files;
                if (selectedFiles.length == 0) {
                    e.preventDefault();
                    XFunction.RenderMessage('error', 'Không có file để lưu');
                    return;
                }
                var fileExtension = ['jpeg', 'jpg', 'png', 'gif', 'bmp'];
                var Error = [];
                $.each(selectedFiles, function (index, item) {
                    var fileNameExt = selectedFiles[index].name.substr(selectedFiles[index].name.lastIndexOf('.') + 1);
                    if ($.inArray(fileNameExt.toLowerCase(), fileExtension) == -1) {
                        Error.push(index + 1);
                    }
                });
                if (Error.length > 0) {
                    alert("File hình ảnh phải có định dạng đuôi ['jpeg', 'jpg', 'png', 'gif', 'bmp']!");
                    return false;
                }
                else {
                    var UriNew = '';
                    $.each(selectedFiles, function (index, item) {
                        UriNew = selectedFiles[index].name;
                        data.append(selectedFiles[index].name, selectedFiles[index]);
                    });

                    var FileId = $('#btnuploadDetailsDuyetAnh_166').attr('data-value');
                    var Column = $('#btnuploadDetailsDuyetAnh_166').attr('data-id');

                    $.ajax({
                        type: "POST",
                        url: "/Uploads/UpLoadLaiHinhDuyet_PromotionsPictures?FileId=" + FileId + "&Column=" + Column + "&UriNew=" + UriNew + "&StepNo=" + CL.StepNo,
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            if (result.length > 0) {
                                var FileUri = '', Id, ColumnCode = 0;
                                $.each(result, function (index, item) {
                                    FileUri = item.Uri;
                                    Id = item.Id;
                                    ColumnCode = item.ColumnCode;
                                });

                                if (ColumnCode == 1) {
                                    $("#a_" + CL.Id + "").attr('href', FileUri);
                                    $("#img_" + CL.Id + "").attr('src', FileUri);
                                    if (CL.StepNo == 2) {
                                        $('#txt-hinh-up-cmnd-truoc').text('[Hình up lại]');
                                    }
                                }
                                if (ColumnCode == 2) {
                                    if (CL.StepNo == 2) {
                                        $('#txt-hinh-up-cmnd-sau').text('[Hình up lại]');
                                    }
                                    $("#a2_" + CL.Id + "").attr('href', FileUri);
                                    $("#img2_" + CL.Id + "").attr('src', FileUri);
                                }
                                if (ColumnCode == 3) {
                                    if (CL.StepNo == 2) {
                                        $('#xac-nhan-chu-ky').text('[Hình up lại]');
                                    }
                                    $("#a3_" + CL.Id + "").attr('href', FileUri);
                                    $("#img3_" + CL.Id + "").attr('src', FileUri);
                                }
                                if (ColumnCode == 4) {
                                    $("#a4_" + CL.Id + "").attr('href', FileUri);
                                    $("#img4_" + CL.Id + "").attr('src', FileUri);
                                }
                                if (ColumnCode == 5) {
                                    $("#a5_" + CL.Id + "").attr('href', FileUri);
                                    $("#img5_" + CL.Id + "").attr('src', FileUri);
                                }


                                $('#myModalUploadDuyetAnh_166').modal('hide');
                                XFunction.RenderMessage('success', 'Up hình thành công!');
                            } else {
                                $('#myModalUploadDuyetAnh_166').modal('hide');
                                XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                            }
                        },
                        error: function () {
                            $('#myModalUploadDuyetAnh_166').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }
                    });
                    e.preventDefault();
                }
            });
        });
    };
    function contruct_168() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [], SourceDuyet = ['', 'Duyệt', 'Không Duyệt'];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var checkApproved = false, checkUpFile = false, Assi = false;
            $.each(respone, function (number, values) {
                if ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 2 && (CL.Status != 4 && CL.Status != 5)) {
                    checkApproved = true;
                }
                else {
                    checkApproved = false;
                }
                if ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && CL.StepNo == 1 && (CL.Status != 4 && CL.Status != 5)) {
                    checkUpFile = true;
                }
                else {
                    checkUpFile = false;
                }
                if ((permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && (CL.Status != 4 && CL.Status != 5)) {
                    Assi = true;
                }
                else {
                    Assi = false;
                }
            });
            var renderLineTable = function (uri) {
                var strRe = '';
                strRe += '<tr>'

                strRe += '<td>';
                var stringImage = '';
                var duoi = uri.split('.')[1].toString().toLowerCase();
                var tenfile = uri.split('/')[3].toString();
                if (duoi === '' || duoi === undefined || duoi === null) {
                    duoi = '';
                } else {
                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                        stringImage = '<a href="' + uri + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a> ';
                    } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                        stringImage = '<a href="' + uri + '" download><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>';
                    } else {
                        stringImage = '<a href="' + uri + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a> ';
                    }
                }
                strRe += stringImage;
                strRe += '</td>';

                strRe += '<td>';
                strRe += ' <input type="checkbox" class="clDeleteImage" name="chkDeleteImage" value="' + uri + '">';
                strRe += '</td>';

                strRe += '</tr>'
                return strRe;
            }
            var actionRendererUpload_1 = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'button_1' && checkUpFile == true) {
                    var valid = instance.getDataAtRowProp(row, 'Id');
                    var $button = '';
                    if (valid === null || valid === '' || valid === undefined) {
                        $button = '';
                    } else {
                        $button = $('<i id="r' + row + '" data-id="' + valid + '" data-value="1" class="fa fa-cloud-upload" style="color:green"></i>');
                        $button.click(function () {
                            $('#RowLine134').val('-1');
                            var idtemp = $(this).attr('id').toString();
                            $('#RowLine134').val(idtemp.substring(1, idtemp.length));
                            var id = $(this).attr('data-id');
                            var col = $(this).attr('data-value');
                            $('#btnuploadDetails').attr('data-id', id).attr('data-value', 1);
                            $('#uploadDetails').val('');
                            $('#myModalUpload').modal('show');
                        });
                    }
                    td.style.verticalAlign = 'middle';
                    $(td).empty().append($button);
                } else {
                    $(td).empty().append('');
                }
            };
            var actionRendererUpload_1_Html = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'button_1_Html') {
                    var valid = instance.getDataAtRowProp(row, 'Id');
                    var Images_1 = instance.getDataAtRowProp(row, 'Images_1');
                    var $button = ''
                    if (valid === null || valid === '' || valid === undefined ||
                        Images_1 == '' || Images_1 == null || Images_1 == undefined) {
                        $button = '';
                    } else {
                        var images = Images_1.toString().split(',');
                        var stringImage = '';
                        $.each(images, function (index1, item1) {
                            var duoi = item1.split('.')[1].toString().toLowerCase();
                            var tenfile = item1.split('/')[3].toString();
                            if (duoi === '' || duoi === undefined || duoi === null) {
                                duoi = '';
                            } else {
                                //var duoi = item1.split('.')[1].toString().toLowerCase();
                                if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                    stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-picture-o"></i> ' + tenfile + '</a>  <br>';
                                } else if ($.inArray(duoi, ['tar', 'zip', 'rar', '7z', 'iso']) !== -1) {
                                    stringImage += '<a href="' + item1 + '" download ><i class="fa fa-file-archive-o"></i> ' + tenfile + '</a>  <br>';
                                } else {
                                    stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i> ' + tenfile + '</a>   <br>';
                                }
                            }
                        });
                        $button = stringImage;
                    }
                    $(td).empty().append($button);
                } else {
                    $(td).empty().append('');
                }
                td.style.textAlign = 'left';
                td.style.verticalAlign = 'middle';
            };
            var actionRendererUpload_1_Delete = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'button_1_Delete' && checkUpFile == true) {
                    var valid = instance.getDataAtRowProp(row, 'Id');
                    var requestId = instance.getDataAtRowProp(row, 'RequestId');
                    var $button = ''
                    if (valid === null || valid === '' || valid === undefined) {
                        $button = '';
                    } else {
                        var datavalue_line = requestId + '-' + valid + '-1';
                        $button = $('<i id="rd' + row + '"  data-value="' + datavalue_line + '" class="fa fa-trash" style="color:red"></i>');
                        $button.click(function () {
                            var listId = $(this).attr("data-value");
                            var listspt = listId.split('-');
                            var requestId = listspt[0];
                            var requestDetailId = listspt[1];
                            var domain = listspt[2];
                            $('#btnDeleteImages').attr('data-value', listId);
                            $('#modalDeleteImagesBody').html('');
                            $.get('/Requests/GetFileUpload', {
                                requestId: requestId,
                                requestDetailId: requestDetailId,
                                Domain: domain
                            }, function (respone) {
                                if (respone != '' && respone != null && respone != undefined && respone.length > 0) {
                                    var stringImage = '';
                                    $.each(respone, function (index1, item1) {
                                        stringImage += renderLineTable(item1.Uri);
                                    });
                                    $('#modalDeleteImagesBody').html(stringImage);
                                    $('#modalDeleteImages').modal('show');
                                } else {
                                    XFunction.RenderMessage("error", "Không tìm thấy hình ảnh"); return;
                                }
                            }).error(function () {
                                XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                            });

                        });
                    }
                    td.style.verticalAlign = 'middle';
                    $(td).empty().append($button);
                } else {
                    $(td).empty().append('');
                }
            };


            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    colHeaders: true,
                    rowHeaders: true,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    minSpareRows: 3,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //hiddenColumns: {
                    //    //columns: [0],
                    //    indicators: true
                    //}
                    //,
                    //====================================Oder ==============================================
                    colHeaders: [
                        //'Trạng thái duyệt',
                        'Nhà trả góp', 'Số đơn hàng', 'Số hợp đồng', 'Đính kèm file', 'Xoá file', 'File BB huỷ HĐ UpLoad', 'Ghi chú'],
                    columns: [
                        //{
                        //    data: 'Approved', source: SourceDuyet, type: 'autocomplete', className: 'htLeft htMiddle', readOnly: !checkApproved,
                        //    renderer: function (instance, td, row, col, prop, value, cellProperties) {
                        //        var Id = instance.getDataAtRowProp(row, 'Id');
                        //        if (Id != '' && Id != null && Id != undefined) {
                        //            cellProperties.readOnly = false;
                        //        }
                        //        else {
                        //            cellProperties.readOnly = true;
                        //        }

                        //        Handsontable.AutocompleteCell.renderer.apply(this, arguments);
                        //    }
                        //},
                        { data: 'NhaTraGop', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: 'SoDonHang', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: 'SoHopDong', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: "button_1", renderer: actionRendererUpload_1, editor: false },
                        { data: "button_1_Delete", renderer: actionRendererUpload_1_Delete, editor: false },
                        { data: "button_1_Html", renderer: actionRendererUpload_1_Html, editor: false },
                        {
                            data: 'Note', type: 'text', className: 'htLeft', readOnly: !Assi,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var Id = instance.getDataAtRowProp(row, 'Id');
                                if (Id != '' && Id != null && Id != undefined) {
                                    cellProperties.readOnly = false;
                                }
                                else {
                                    cellProperties.readOnly = true;
                                }

                                Handsontable.TextCell.renderer.apply(this, arguments);
                            }
                        }
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        var cout = 0;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            //if (col === 'Approved') {
                            //    var value = changes[i][3];
                            //    var Chk = $.grep(SourceDuyet, function (values, number) {
                            //        return values == value;
                            //    });
                            //    if (Chk.length == 0) {
                            //        return false;
                            //    }
                            //}
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);


            ////========= Ẩn cột thời gian xử lý
            var plugin = hot.getPlugin('hiddenColumns');
            console.log(CL.StepNo == 1)
            if (CL.StepNo == 1) {
                plugin.hideColumn(0);
            }
            else {
                plugin.showColumn(0);
            }

            $("#UploadForm").submit(function (e) {
                var data = new FormData();
                var selectedFiles = $("#uploadDetails")[0].files;
                if (selectedFiles.length == 0) {
                    e.preventDefault();
                    $('#myModalUpload').modal('hide');
                    XFunction.RenderMessage('error', 'Không có file để lưu');
                    return;
                }
                $.each(selectedFiles, function (index, item) {
                    data.append(selectedFiles[index].name, selectedFiles[index]);
                });
                var requestdetailId = $('#btnuploadDetails').attr('data-id');
                var col = $('#btnuploadDetails').attr('data-value');
                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetailCol?RequsetDetailId=" + requestdetailId + "&&Col=" + col,
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        $('#myModalUpload').modal('hide');
                        if (result.error == 0) {
                            var fileNames = $.parseJSON(result.Message);
                            var stringImage = fileNames.join(',');
                            $.each(dataHandsontable, function (index, item) {
                                if (item.Id == requestdetailId) {
                                    if (col == 1) {
                                        var dataRow = item.Images_1;
                                        if (dataRow != '' && dataRow != null && dataRow != undefined) {
                                            dataRow += ',';
                                        }
                                        else {
                                            dataRow = '';
                                        }
                                        item.Images_1 = dataRow + stringImage;
                                    }
                                }
                            });
                            hot.render();
                            XFunction.RenderMessage('success', 'Lưu ' + fileNames.length + ' file thành công');
                        } else {
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }

                    },
                    error: function () {
                        $('#myModalUpload').modal('hide');
                        XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                    }
                });
                e.preventDefault();
            });
            $('#btnDeleteImages').on('click', function () {
                var dataHidd = $(this).attr('data-value');
                var checklis = [];
                var countImagesNoDelete = $("input:checkbox[name=chkDeleteImage]");
                var countImagesDelete = $("input:checkbox[name=chkDeleteImage]:checked");

                if (countImagesNoDelete.length == countImagesDelete.length) {
                    XFunction.RenderMessage("error", "Không được xóa toàn bộ hình ảnh đã đính kèm"); return;
                }

                $("input:checkbox[name=chkDeleteImage]:checked").each(function () {
                    checklis.push($(this).val());
                });
                if (dataHidd == '' || dataHidd == null || dataHidd == undefined || checklis.length == 0) {
                    XFunction.RenderMessage("error", "Không lấy được dữ liệu"); return;
                }
                var dataspl = dataHidd.split('-');
                var requestId = dataspl[0];
                var requestDetailId = dataspl[1];
                var domain = dataspl[2];
                var uris = checklis.join(',');
                $.get('/Requests/DeleteFileUpload', {
                    requestId: requestId,
                    requestDetailId: requestDetailId,
                    Domain: domain,
                    Uris: uris
                }, function (respone) {
                    if (respone !== '' && respone !== null && respone !== undefined) {
                        $.each(dataHandsontable, function (index, item) {
                            if (item.Id == requestDetailId && item.RequestId == requestId) {
                                if (domain == '1') {
                                    item.Images_1 = respone[0].Uris;
                                }
                            }
                        });
                        hot.render();
                        $('#modalDeleteImages').modal('hide');
                        XFunction.RenderMessage("success", "Xóa thành công"); return;
                    } else {
                        $.each(dataHandsontable, function (index, item) {
                            if (item.Id == requestDetailId && item.RequestId == requestId) {
                                if (domain == '1') {
                                    item.Images_1 = '';
                                }
                            }
                        });
                        hot.render();
                        $('#modalDeleteImages').modal('hide');
                        XFunction.RenderMessage("success", "Xóa thành công"); return;
                    }
                }).error(function () {
                    XFunction.RenderMessage("error", "Có lỗi xảy ra vui lòng thử lại"); return;
                });
            });
            //===========================
            $btnComment.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Approved: item.Approved == 'Duyệt' ? 1 : (item.Approved == 'Không Duyệt' ? 0 : null),
                        Note: item.Note
                    });
                });
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var datainvalid = [], InvalidNot = [];
                //$.each(myData, function (index, item) {
                //    if (item.Approved == 'Duyệt' || item.Approved == 'Không Duyệt') {
                //        //--- Do notthing
                //    }
                //    else {
                //        datainvalid.push(item);
                //    }
                //    if (item.Approved == 'Không Duyệt' && (item.Note == '' || item.Note == null || item.Note == undefined)) {
                //        InvalidNot.push(item);
                //    }
                //});
                //if (datainvalid.length > 0) {
                //    XFunction.RenderMessage("error", "Vui lòng chọn trạng thái duyệt hoặc không duyệt!");
                //    return false;
                //}
                //if (InvalidNot.length > 0) {
                //    XFunction.RenderMessage("error", "Vui lòng nhập lý do khi chọn không duyệt!");
                //    return false;
                //}
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Approved: item.Approved == 'Duyệt' ? 1 : (item.Approved == 'Không Duyệt' ? 0 : null),
                        Note: item.Note
                    });
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                } else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        datareturn.push({
                            Id: item.Id,
                            Approved: item.Approved == 'Duyệt' ? 1 : (item.Approved == 'Không Duyệt' ? 0 : null),
                            Note: item.Note
                        });
                    });
                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                var CheckFile = [];
                $.each(myData, function (index, item) {
                    if (item.Images_1 == '' || item.Images_1 == null || item.Images_1 == undefined) {
                        CheckFile.push(item);
                    }
                });
                if (CheckFile.length > 0) {
                    XFunction.RenderMessage("error", "Phải đính kèm file biên bản trước khi chuyển bước");
                    return false;
                }
                else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        datareturn.push({
                            Id: item.Id,
                            Approved: item.Approved == 'Duyệt' ? 1 : (item.Approved == 'Không Duyệt' ? 0 : null),
                            Note: item.Note
                        });
                    });

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                }

            });
        });
    };
    function contruct_169() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    hiddenColumns: {
                        //   columns: [8],
                        indicators: true
                    },
                    //====================================Oder ==============================================
                    colHeaders: ['Tên Shop', 'Tên nhân viên', 'Tên sản phẩm', 'Đơn giá', 'Thành tiền', 'Số tiền còn nợ', 'Số SO'],
                    columns: [
                        { data: 'ShopCode', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: 'Employee', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: 'Product', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: "Price", type: 'numeric', className: 'htRight htMiddle', readOnly: true, format: '0,0', validator: Validater.quantity, allowInvalid: false },
                        { data: 'Sum', type: 'numeric', className: 'htRight htMiddle', readOnly: true, format: '0,0', validator: Validater.quantity, allowInvalid: false },
                        { data: 'SoTienConNo', type: 'numeric', className: 'htRight htMiddle', readOnly: true, format: '0,0', validator: Validater.quantity, allowInvalid: false },
                        { data: "SONumber", type: 'text', className: 'htLeft htMiddle', readOnly: true },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        var cout = 0;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            var plugin = hot.getPlugin('hiddenColumns');
            if (CL.StepNo < 3) {
                plugin.hideColumn(4, 5, 6);
            }
            else {
                plugin.showColumn(4, 5, 6);
            }
            hot.render();
            //===========================
            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                //console.log(myData); return false;
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id
                    });
                });
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id
                    });
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
            $btnReply.on('click', function () {
                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                } else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        datareturn.push({
                            Id: item.Id,
                        });
                    });
                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }

            });
            $btnChangeStep.on('click', function () {
                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id
                    });
                });

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
        });
    };
    function contruct_170() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    hiddenColumns: {
                        //   columns: [8],
                        indicators: true
                    },
                    //====================================Oder ==============================================
                    colHeaders: ['Tên Shop', 'Tên nhân viên', 'Phòng ban nhân viên', 'Tên sản phẩm', 'Đơn giá', 'Thành tiền', 'Số SO'],
                    columns: [
                        { data: 'ShopCode', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: 'Employee', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: 'OrganizationHierachies', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: 'Product', type: 'text', className: 'htLeft htMiddle', readOnly: true },
                        { data: "Price", type: 'numeric', className: 'htRight htMiddle', readOnly: true, format: '0,0', validator: Validater.quantity, allowInvalid: false },
                        { data: 'Sum', type: 'numeric', className: 'htRight htMiddle', readOnly: true, format: '0,0', validator: Validater.quantity, allowInvalid: false },
                        { data: "SONumber", type: 'text', className: 'htLeft htMiddle', readOnly: true },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        var cout = 0;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                        }
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            var plugin = hot.getPlugin('hiddenColumns');
            if (CL.StepNo < 3) {
                plugin.hideColumn(5, 6);
            }
            else {
                plugin.showColumn(5, 6);
            }
            hot.render();
            //===========================
            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                //console.log(myData); return false;
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id
                    });
                });
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id
                    });
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
            $btnReply.on('click', function () {
                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                } else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        datareturn.push({
                            Id: item.Id,
                        });
                    });
                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }

            });
            $btnChangeStep.on('click', function () {
                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();

                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id
                    });
                });

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
        });
    };

    function contruct_172() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            if (respone.length > 0) {
                var dataHandsontable = [];
                dataHandsontable = respone;
                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                });

                let CheckApp = (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) && (CL.Status != 4 && CL.Status != 5) ? true : false;
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: dataHandsontable,
                        autoColumnSize: true,
                        autoRowSize: true,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        stretchH: 'all',
                        minSpareRows: 2,
                        fixedColumnsLeft: 2,
                        //====================================Oder ==============================================
                        colHeaders: ['Duyệt', 'Không duyệt', 'Shop chuyển đi', 'Shop chuyển đến', 'Mã sản phẩm', 'Tên sản phẩm', 'Số Imei', 'Số lượng', 'Số điều chuyển', 'Số line điều chuyển'],
                        columns: [
                            {
                                data: 'Approved1', type: 'checkbox', className: 'htLeft',
                                readOnly: !CheckApp,
                                checkedTemplate: 1, uncheckedTemplate: 0, width: 50,
                                renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                    var Id = instance.getDataAtRowProp(row, 'Id');
                                    if (Id != '' && Id != null && Id != undefined) {
                                        if (value == '' || value == 0) {
                                            value = 0;
                                        }
                                        else {
                                            value = 1;
                                        }
                                        Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    }
                                }
                            },
                            {
                                data: 'Approved2', type: 'checkbox', className: 'htLeft',
                                readOnly: !CheckApp,
                                checkedTemplate: 1, uncheckedTemplate: 0, width: 100,
                                renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                    var Id = instance.getDataAtRowProp(row, 'Id');
                                    if (Id != '' && Id != null && Id != undefined) {
                                        if (value == '' || value == 0) {
                                            value = 0;
                                        }
                                        else {
                                            value = 1;
                                        }
                                        Handsontable.CheckboxCell.renderer.apply(this, arguments);
                                    }
                                }
                            },
                            { data: "ShopChuyenDi", type: 'text', className: 'htLeft', readOnly: true },
                            { data: "ShopChuyenDen", type: 'text', className: 'htLeft', readOnly: true },
                            { data: "ProductCode", type: 'text', className: 'htLeft', readOnly: true },
                            { data: "ProductName", type: 'text', className: 'htLeft', readOnly: true },
                            { data: "Imei", type: 'text', className: 'htLeft', readOnly: true },
                            { data: "Quantity", type: 'numeric', format: '0,00', className: 'htLeft', readOnly: true },
                            { data: "SoDieuChuyen", type: 'text', className: 'htLeft', readOnly: true },
                            { data: "Soline", type: 'text', className: 'htLeft', readOnly: true }
                        ],
                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];
                                if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, 0, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 0, 0, 'not');
                                    }
                                    return true;
                                }
                            }


                        },
                    };
                };
                hot = new Handsontable(container, setting());
                hot.selectCell(0, 0, 0, 0);

                //===========================
                $btnComment.on('click', function () {
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== '';
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    var message = $('#Message').val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                    }
                    $.each(myData, function (index, item) {
                        item.Approved = item.Approved1 == 1 ? true : false;
                    });

                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                });
                $btnComplete.on('click', function () {
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== '';
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }
                    var datainvalid = []
                    $.each(myData, function (index, item) {
                        if (item.Approved1 == 1 || item.Approved2 == 1) {
                        }
                        else { datainvalid.push(item); }
                    });
                    if (datainvalid.length > 0) {
                        XFunction.RenderMessage("error", "Phải chọn duyệt hoặc không duyệt"); return;
                    }

                    $.each(myData, function (index, item) {
                        item.Approved = item.Approved1 == 1 ? true : false
                    });

                    var message = $("#Message").val();
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();

                });
                $btnReply.on('click', function () {
                    var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== '';
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                        return false;
                    } else {
                        $.each(myData, function (index, item) {
                            item.Approved = item.Approved1 == 1 ? true : false
                        });
                        $('#Details').val(JSON.stringify(myData));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Reply");
                        form.submit();
                    }

                });
                $btnChangeStep.on('click', function () {
                    var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== '';
                    });
                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var message = $("#Message").val();

                    $.each(myData, function (index, item) {
                        item.Approved = item.Approved1 == 1 ? true : false
                    });

                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                });
            }
        });
    }; //--- Duyệt Luân chuyển Nội bộ

    //▼ Add - TrungNC3 - 2017.09.06 - Up thực loại chuyển shop khác vùng
    function contruct_173() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isOldAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isOldAssiner = true;
            });
            var dataJobtitleAll = [], dataJobtitleAllName = [];
            $.get('/Requests/GetJobTitleShop', null, function (respone) {
                if (respone !== null && respone !== '' && respone !== undefined && respone.length > 0) {
                    dataJobtitleAll = respone;
                    $.each(respone, function (index, item) {
                        dataJobtitleAllName.push(item.JobTitleCode + '--' + item.JobTitleName);
                    });
                };
            });
            var dataShopAll = [], dataShopAllName = [];
            if (CL.StepNo === 1) {
                var EmployeeCode_U = (dataHandsontable[0].Property10 !== '' && dataHandsontable[0].Property10 !== null && dataHandsontable[0].Property10 !== undefined) ? dataHandsontable[0].Property10 : "";
                //   console.log(EmployeeCode);
                $.get('/Requests/Inside_LayDSShopTheoASM', { EmployeeCode: (EmployeeCode_U !== '' && EmployeeCode_U !== null && EmployeeCode_U !== undefined) ? EmployeeCode_U : "" }, function (respone) {
                    if (respone !== null && respone !== '' && respone !== undefined && respone.length > 0) {
                        dataShopAll = respone;
                        $.each(respone, function (index, item) {
                            dataShopAllName.push(item.WarehouseCode + '--' + item.WarehouseName);
                        });
                    };
                });
            }
            else if (CL.StepNo === 2) {
                $.get('/Requests/Get_AllShop', null, function (respone) {
                    console.log(respone);
                    if (respone !== null && respone !== '' && respone !== undefined && respone.length > 0) {
                        dataShopAll = respone;
                        $.each(respone, function (index, item) {
                            dataShopAllName.push(item.WarehouseCode + '--' + item.WarehouseName);
                        });
                    };
                });
            };

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    columnSorting: false,
                    currentColClassName: 'currentCol', //currentCol
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    currentRowClassName: 'currentRow',
                    manualRowResize: true,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    minSpareRows: 4,
                    hiddenColumns: {
                        indicators: true
                    },
                    //====================================Oder ==============================================
                    colHeaders: ['Tên nhân viên', 'Tên chức danh', 'Mã shop cũ', 'Ngay kết thúc chức danh cũ', 'Mã shop mới', 'Ngày bắt đầu làm việc'],
                    columns: [
                        { data: "EmpCode", type: 'text', className: 'htLeft', readOnly: true, width: 200 },
                        { data: "JobtitleOld", type: 'text', className: 'htLeft', readOnly: true, width: 200 },
                        { data: "WarehouseCodeOld", type: 'text', className: 'htLeft', readOnly: true, width: 200 },
                        { data: "JobtitleDateEndOld", type: 'date', className: 'htLeft', readOnly: true, width: 200 },
                        { data: "WarehouseCodeNew", type: 'autocomplete', source: dataShopAllName, className: 'htLeft', width: 200 },
                        //{ data: "JobtitleNew", type: 'autocomplete', source: dataJobtitleAllName, className: 'htCenter' },
                        { data: "JobtitleDateStart", type: 'date', className: 'htLeft', width: 200 },
                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (col === 'JobtitleDateStart') {
                                var value = changes[i][3];
                                var oldValue = hot.getDataAtRowProp(row, 'TimeDefault');
                                if (value <= oldValue && CL.StepNo === 1) {
                                    XFunction.RenderMessage("error", "Ngày bắt đầu làm việc phải lớn hơn ngày hiện tại");
                                    return false;
                                }
                            }
                        }
                    },
                    cells: function (row, col, prop) {
                        var cellProperties = {};
                        if (row > data.length - 1) {
                            cellProperties.readOnly = true;
                        }
                        return cellProperties;
                    }
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            if (CL.Status === '4' && CL.StepNo === 2) {
                hot.updateSettings({
                    cells: function (row, col, prop) {
                        var cellProperties = {};

                        if (col === 4) {
                            cellProperties.readOnly = true;
                        }
                        if (col === 5) {
                            cellProperties.readOnly = true;
                        }
                        return cellProperties;
                    }
                })
            }
            if (permisstion.isOldAssiner === true && CL.StepNo === 2) {
                hot.updateSettings({
                    cells: function (row, col, prop) {
                        var cellProperties = {};

                        if (col === 4) {
                            cellProperties.readOnly = true;
                        }
                        if (col === 5) {
                            cellProperties.readOnly = true;
                        }
                        return cellProperties;
                    }
                })
            }
            hot.render();
            //===========================
            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                var message = $('#Message').val();
                var dataValid = [], checkDataNgay = [];
                $.each(myData, function (index, item) {
                    if (((item.JobtitleDateStart === null || item.JobtitleDateStart === '' || item.JobtitleDateStart === undefined))
                        && CL.StepNo === 1) {
                        dataValid.push(item);
                    };
                });

                //if (dataValid.length > 0) {
                //    XFunction.RenderMessage("error", "Vui lòng nhập chức danh mới trước khi trao đổi"); return false;
                //};
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        var dataJobNew = [];
                        if (item.WarehouseCodeNew !== null && item.WarehouseCodeNew !== '' && item.WarehouseCodeNew !== undefined) {
                            dataJobNew = $.grep(dataShopAll, function (item1, index1) {
                                return (item1.WarehouseCode + '--' + item1.WarehouseName) === item.WarehouseCodeNew;
                            });
                        };

                        var JobtitleMoi = '';
                        if (dataJobNew.length > 0) {
                            JobtitleMoi = dataJobNew[0].WarehouseCode;
                        } else {
                            JobtitleMoi = null;
                        };
                        datareturn.push({
                            Id: item.Id,
                            JobtitleNew: JobtitleMoi,
                            JobtitleDateStart: item.JobtitleDateStart !== null || item.JobtitleDateStart !== '' || item.JobtitleDateStart !== undefined ? item.JobtitleDateStart : null,
                        });
                    });

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                };
            });

            $btnReply.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                var message = $('#Message').val();
                var dataValid = [];
                $.each(myData, function (index, item) {
                    if (((item.JobtitleDateStart === null || item.JobtitleDateStart === '' || item.JobtitleDateStart === undefined))
                        && CL.StepNo === 1) {
                        dataValid.push(item);
                    };
                });

                //if (dataValid.length > 0) {
                //    XFunction.RenderMessage("error", "Vui lòng nhập chức danh mới trước khi trao đổi"); return false;
                //};
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        var dataJobNew = [];
                        if (item.WarehouseCodeNew !== null && item.WarehouseCodeNew !== '' && item.WarehouseCodeNew !== undefined) {
                            dataJobNew = $.grep(dataShopAll, function (item1, index1) {
                                return (item1.WarehouseCode + '--' + item1.WarehouseName) === item.WarehouseCodeNew;
                            });
                        };

                        var JobtitleMoi = '';
                        if (dataJobNew.length > 0) {
                            JobtitleMoi = dataJobNew[0].WarehouseCode;
                        } else {
                            JobtitleMoi = null;
                        };
                        datareturn.push({
                            Id: item.Id,
                            JobtitleNew: JobtitleMoi,
                            JobtitleDateStart: item.JobtitleDateStart !== null || item.JobtitleDateStart !== '' || item.JobtitleDateStart !== undefined ? item.JobtitleDateStart : null,
                        });
                    });

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                };
            });

            $btnChangeStep.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                var message = $('#Message').val();
                var checkDateWorkingValid = [], checkWarehouseValid = [], checkDataNgay = [];
                $.each(myData, function (index, item) {
                    if ((item.JobtitleDateStart === null || item.JobtitleDateStart === '' || item.JobtitleDateStart === undefined)
                        && CL.StepNo === 1) {
                        checkDateWorkingValid.push(item);
                    };

                    if ((item.WarehouseCodeNew === null || item.WarehouseCodeNew === '' || item.WarehouseCodeNew === undefined)
                        && CL.StepNo === 1) {
                        checkWarehouseValid.push(item);
                    };

                    if (item.JobtitleDateStart <= item.TimeDefault && CL.StepNo === 1) {
                        checkDataNgay.push(item);
                    }
                });
                if (checkDataNgay.length > 0) {
                    XFunction.RenderMessage("error", "Ngày bắt đầu làm việc mới phải lớn hơn ngày hiện tại");
                    return false;
                };

                if (checkDateWorkingValid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn ngày bắt đầu làm việc trước khi chuyển bước"); return false;
                };
                if (checkWarehouseValid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn mã shop mới trước khi chuyển bước"); return false;
                };
                if (message.length == 0 && CL.StepNo === 1) {
                    XFunction.RenderMessage("error", "Vui lòng nhập trao đổi trước khi chuyển bước :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        var dataJobNew = [];
                        if (item.WarehouseCodeNew !== null && item.WarehouseCodeNew !== '' && item.WarehouseCodeNew !== undefined) {
                            dataJobNew = $.grep(dataShopAll, function (item1, index1) {
                                return (item1.WarehouseCode + '--' + item1.WarehouseName) === item.WarehouseCodeNew;
                            });
                        };

                        var JobtitleMoi = '';
                        if (dataJobNew.length > 0) {
                            JobtitleMoi = dataJobNew[0].WarehouseCode;
                        } else {
                            JobtitleMoi = null;
                        };
                        datareturn.push({
                            Id: item.Id,
                            JobtitleNew: JobtitleMoi,
                            JobtitleDateStart: item.JobtitleDateStart !== null || item.JobtitleDateStart !== '' || item.JobtitleDateStart !== undefined ? item.JobtitleDateStart : null,
                        });
                    });

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                };
            });

            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getSourceData() == undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                var message = $('#Message').val();

                var checkDateWorkingValid = [], checkWarehouseValid = [], checkDataNgay = [], checkNullShop = [];
                $.each(myData, function (index, item) {
                    if ((item.JobtitleDateStart === null || item.JobtitleDateStart === '' || item.JobtitleDateStart === undefined)
                        && CL.StepNo === 2) {
                        checkDateWorkingValid.push(item);
                    };

                    if ((item.WarehouseCodeNew === null || item.WarehouseCodeNew === '' || item.WarehouseCodeNew === undefined)
                        && CL.StepNo === 2) {
                        checkWarehouseValid.push(item);
                    };

                    if (item.JobtitleDateStart <= item.TimeDefault && CL.StepNo === 2) {
                        checkDataNgay.push(item);
                    };

                    var checkShopNull = $.grep(dataShopAllName, function (index1, item1) {
                        return (item1.WarehouseCode + '--' + item1.WarehouseName) === item.WarehouseCodeNew;
                    });
                    if (checkShopNull.length === 0) {
                        checkNullShop.push(item);
                    }
                });

                if (checkDateWorkingValid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn ngày bắt đầu làm việc trước khi chuyển bước"); return false;
                };
                if (checkWarehouseValid.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn mã shop mới trước khi chuyển bước"); return false;
                };
                //if (checkNullShop.length > 0)
                //{
                //    XFunction.RenderMessage("error", "Vui lòng chọn mã shop mới trước khi hoàn tất"); return false;
                //}
                //if (checkDataNgay.length > 0) {
                //    XFunction.RenderMessage("error", "Ngày bắt đầu làm việc mới phải lớn hơn ngày hiện tại");
                //    return false;
                //};
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        var dataJobNew = [];
                        if (item.WarehouseCodeNew !== null && item.WarehouseCodeNew !== '' && item.WarehouseCodeNew !== undefined) {
                            dataJobNew = $.grep(dataShopAll, function (item1, index1) {
                                return (item1.WarehouseCode + '--' + item1.WarehouseName) === item.WarehouseCodeNew;
                            });
                        };
                        var JobtitleMoi = '';
                        if (dataJobNew.length > 0) {
                            JobtitleMoi = dataJobNew[0].WarehouseCode;
                        } else {
                            JobtitleMoi = null;
                        };
                        datareturn.push({
                            Id: item.Id,
                            JobtitleNew: JobtitleMoi,
                            JobtitleDateStart: item.JobtitleDateStart !== null || item.JobtitleDateStart !== '' || item.JobtitleDateStart !== undefined ? item.JobtitleDateStart : null,
                        });
                    });

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                };
            });
        });
    }; //--- chuyen vung shop khác

    //▼ Add - VietMXH - 08/09/2017 - Thêm loại 174 - Đổi trả bảo hành
    function contruct_174() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 11,
                    minCols: 11,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 11,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 11,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        ['Số đơn hàng',
                            'Số chứng từ nhập khác',
                            'Số tiền nhập khác',
                            'Số tiền áp công nợ',
                        ],
                    columns: [
                        { data: 'SaleCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Property1', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Money1', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                        { data: 'Money2', type: 'numeric', className: 'htLeft', format: '0,0', readOnly: true },
                    ],
                    //beforeChange: function (changes, source) {
                    //    if (source == 'not') return;
                    //    for (i = 0; i < changes.length; i++) {
                    //        var row = changes[i][0], col = changes[i][1];
                    //        if (statusRequest != 4) {
                    //            if (col === 'Approved1') {
                    //                var value = changes[i][3];
                    //                if (value == true) {
                    //                    hot.setDataAtCell(row, 1, null, 'not');
                    //                }
                    //                return true;
                    //            }
                    //            if (col === 'Approved2') {
                    //                var value = changes[i][3];
                    //                if (value == true) {
                    //                    hot.setDataAtCell(row, 0, null, 'not');
                    //                }
                    //                return true;
                    //            }
                    //        }
                    //        else {
                    //            if (col === 'Approved1') {
                    //                var value = changes[i][3];
                    //                if (value == true) {
                    //                    hot.setDataAtCell(row, 1, null, 'not');
                    //                }
                    //                return true;
                    //            }
                    //            if (col === 'Approved2') {
                    //                var value = changes[i][3];
                    //                if (value == true) {
                    //                    hot.setDataAtCell(row, 1, null, 'not');
                    //                    XFunction.RenderMessage("error", "Không được chuyển sang trạng thái không duyệt khi CallLog đã hoàn tất");
                    //                }
                    //                return false;
                    //            }
                    //        }

                    //        if (col === 'QuantityNew') {
                    //            var value = changes[i][3];
                    //            var oldValue = hot.getDataAtRowProp(row, 'Quantity');
                    //            if (value > oldValue || value <= 0) {
                    //                XFunction.RenderMessage('error', 'Số lượng yêu cầu không được lớn hơn số lượng yêu cầu cũ hoặc <= 0');
                    //                return false;
                    //            }
                    //            return true;
                    //        }
                    //    }
                    //},
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var datareturn = $.grep(hot.getData(), function (p_Item, p_Index) {
                    return p_Item.Id != undefined && p_Item.Id != '' && p_Item.Id != null && p_Item.Id != 0;
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnReply.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }


                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();

            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });


                var message = $("#Message").val();

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var datareturn = $.grep(hot.getData(), function (p_Item, p_Index) {
                    return p_Item.Id != undefined && p_Item.Id != '' && p_Item.Id != null && p_Item.Id != 0;
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    };
    //▼ Add - VietMXH - 08/09/2017 - Thêm loại 174 - Đổi trả bảo hành

    //▼ Edit - TrungNC3-NgoanHT - 2017.09.14 - Thêm loại 175 - Hành chính hỗ trợ shop
    function contruct_175() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {

            var dataHandsontable = [];
            dataHandsontable = respone;

            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isOldAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isOldAssiner = true;
            });

            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    colHeaders: true,
                    rowHeaders: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Nội dung shop yêu cầu hỗ trợ', 'Phân loại yêu cầu', 'Hướng Xử lý shop đề xuất', 'Ghi chú'], //NgoanHT - 23/09/2017 - Loại: 175 - sửa Xử lý shop đề xuất => Hướng Xử lý shop đề xuất
                    columns:
                        [
                            { data: "NoiDung", type: 'text', className: 'htLeft', width: 200 },
                            {
                                data: "LoaiYeuCau",
                                type: 'dropdown',
                                source: ['Claim Bảo hiểm', 'Claim NCC (VPP, đồ dùng HC giao thiếu...)', 'Claim bảo vệ, tạp vụ (thay bảo vệ, tạp vụ...)', 'Khác'],//NgoanHT - 03/10/2017 - Loại: 175 - Claim Nhà Bảo hiểm ==> Claim Bảo hiểm
                                width: 300,
                                className: 'htLeft'
                            },
                            { data: "XuLy", type: 'text', className: 'htLeft', width: 200 },
                            { data: "GhiChu", type: 'text', className: 'htLeft', width: 200 }
                        ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        var instance = this;
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var oldValue = change[2]
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            if (col === 'LoaiYeuCau') {
                                if (newValue !== '' && newValue !== null && newValue !== undefined) {
                                    if (newValue !== oldValue) {
                                        if (hot.getDataAtCell(row + 1, 0) != null && hot.getDataAtCell(row + 1, 0) != undefined && hot.getDataAtCell(row + 1, 0) != '') {
                                            hot.setDataAtRowProp(row + 1, 'LoaiYeuCau', newValue, 'not');
                                        }
                                        if (hot.getDataAtCell(row + 2, 0) != null && hot.getDataAtCell(row + 2, 0) != undefined && hot.getDataAtCell(row + 2, 0) != '') {
                                            hot.setDataAtRowProp(row + 2, 'LoaiYeuCau', newValue, 'not');
                                        }
                                    };
                                };
                            };
                        });
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.updateSettings({
                cells: function (row, col, prop) {
                    var cellProperties = {};
                    if ((prop === 'NoiDung' || prop === 'XuLy' || prop === 'GhiChu' || (row > 0 && prop === 'LoaiYeuCau')) && permisstion.isAssiner == true) {
                        cellProperties.readOnly = true;
                    }
                    else if (row > 0 && prop === 'LoaiYeuCau') {
                        cellProperties.readOnly = true;
                    }

                    return cellProperties;
                }
            })
            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        datareturn.push({
                            Id: item.Id,
                            NoiDung: item.NoiDung,
                            LoaiYeuCau: item.LoaiYeuCau,
                            XuLy: item.XuLy,
                            GhiChu: item.GhiChu
                        });
                    });

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                };
            });

            $btnReply.on('click', function () {
                XFunction.RenderMessage("error", "Loại này không định nghĩa nút trả lời"); return false;
            });

            $btnChangeStep.on('click', function () {
                XFunction.RenderMessage("error", "Loại này không định nghĩa nút chuyển bước"); return false;
            });

            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                if ($("#MessageNVHC").val().length == 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập nội dung hướng xử lý"); return;
                    return;
                }
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    }; //--- Hanh Chinh Ho Tro
    //▲ Add - =======================================

    //▼ Add - VietMXH - 25/09/2017 - Thêm loại 176-Yêu cầu gửi OTP SMS Loyalty F-Studio
    function contruct_176() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            var l_Data_Handsontable = p_Response;

            var l_Setting = function () {
                return {
                    data: l_Data_Handsontable,
                    stretchH: 'all',    //  Dãn cột
                    disableVisualSelection: true,   //  Ẩn Scroll dọc

                    colHeaders:
                        ['Mã Shop',
                            'SDT',
                            'Mã KH',
                            'Tên KH',
                            'OTP',
                        ],
                    columns: [
                        { data: 'ShopCode', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'Property1', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'Property2', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'Property3', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'Property4', type: 'text', className: 'htCenter', readOnly: true },
                    ],
                };
            };
            hot = new Handsontable(container, l_Setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComplete.on('click', function () {
                var l_Data_Details = $.grep(hot.getData(), function (p_Item, p_Index) {
                    return p_Item.Id != undefined && p_Item.Id != '' && p_Item.Id != null && p_Item.Id != 0;
                });

                var l_Data_DetailsCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                $('#Details').val(JSON.stringify(l_Data_Details));
                $('#DetailsCc').val(JSON.stringify(l_Data_DetailsCc));

                var l_Form = $("form#form-detail");
                l_Form.attr("action", "/Requests/Complete");
                l_Form.submit();
            });
        });
    };
    //▼ Add - VietMXH - 25/09/2017 - Thêm loại 176-Yêu cầu gửi OTP SMS Loyalty F-Studio

    //▼ Add - NghiaTV5 - 20/10/2017 - thêm loại 179
    function contruct_179() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            $('#form-Approved').show();
            var dataCheckDuyet_true = false, data_false = false, dataCheckDuyet_false = false;
            $.each(p_Response, function (index, item) {
                if (item.Approved == 1) {
                    dataCheckDuyet_true = true; // duyệt
                }
                else if (item.Approved == 0) {
                    dataCheckDuyet_false = true; //không duyệt
                }
            });
            if (dataCheckDuyet_true === true) {
                $("#btn-Approved-All").prop('checked', true).uniform('refresh');
                if (CL.StepNo > 1 || CL.StepStatus > 3) {// Edit - NghiaTV5 - 25/10/2017 – Check CL.StepStatus > 3 
                    $("#btn-Approved-All").prop('disabled', true);
                    $("#btn-Approved-Remove").prop('disabled', true);
                }
            }
            else if (dataCheckDuyet_false === true) {
                $("#btn-Approved-Remove").prop('checked', true).uniform('refresh');
                if (CL.StepNo > 1 || CL.Status > 3) {// Edit - NghiaTV5 - 25/10/2017 – Check CL.StepStatus > 3
                    $("#btn-Approved-All").prop('disabled', true);
                    $("#btn-Approved-Remove").prop('disabled', true);
                }
            }
            else {
                $("#btn-Approved-All").prop('checked', false);
                $("#btn-Approved-Remove").prop('checked', false);
            };
            $('#btn-Approved-All').on('change', function () {
                $("#btn-Approved-Remove").prop('checked', false).uniform('refresh');
            });
            $('#btn-Approved-Remove').on('change', function () {
                $("#btn-Approved-All").prop('checked', false).uniform('refresh');
            });

            var l_Data_Handsontable = p_Response;
            var Title = ''
            $.each(p_Response, function (index, item) {
                Title = item.TieuDe
            })
            $('#titleX').text(Title)
            var l_Setting = function () {
                return {
                    data: l_Data_Handsontable,
                    stretchH: 'all',    //  Dãn cột
                    disableVisualSelection: true,   //  Ẩn Scroll dọc

                    colHeaders:
                        [
                            'Tên shop ',
                            'Mã shop ',
                            'Tên sản phẩm',
                            'Số lượng',
                            'kho xuất',
                            'Vùng',
                        ],
                    columns: [
                        { data: 'WarehouseCodeName', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'WarehouseCode', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'Quantity', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'Property10', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'RegionHierachyCodeName', type: 'text', className: 'htCenter', readOnly: true },

                    ],
                    afterChange: function (changes, source) {
                        //if (!changes || source == 'not') {
                        //    return;
                        //}
                        //changes.forEach(function (change) {
                        //    var row = change[0];
                        //    var col = change[1];
                        //    var newValue = change[3];
                        //    var cout = 0;
                        //    var cellProperties = {}, options;
                        //    if (col === 'Duyet' && newValue === 1) {
                        //        hot.setDataAtRowProp(row, 'KhongDuyet', 0, 'not');
                        //        var Choose = hot.getSettings().data;
                        //        $.each(Choose, function (index, item) {
                        //                if ((item.Duyet !== null && item.Duyet !== '' && item.Duyet !== null && item.Duyet !== 0)) {
                        //                    cout++;
                        //                    item.Duyet = 1
                        //                    item.Approved = 1;
                        //                }
                        //        })
                        //        hot.render();
                        //        alert(cout + "Duyet")
                        //    }
                        //    if (col === 'KhongDuyet' && newValue === 1) {
                        //        hot.setDataAtRowProp(row, 'Duyet', 0, 'not');
                        //        var Choose = hot.getSettings().data;
                        //        $.each(Choose, function (index, item) {
                        //            if ((item.KhongDuyet !== null && item.KhongDuyet !== '' && item.KhongDuyet !== null && item.KhongDuyet !== 0)) {
                        //                cout++;
                        //                item.KhongDuyet = 1;
                        //                item.Approved = 0;
                        //            }
                        //        })
                        //        hot.render();
                        //        alert(cout + "KhongDuyet")
                        //    }
                        //});
                    },
                };
            };
            hot = new Handsontable(container, l_Setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                console.log(hot.getData());
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';// Edit - NghiaTV5 - 20/10/2017 - Chỉnh Id 179
                });
                var message = $('#Message').val();
                //▼ Add - NghiaTV5 - 23/10/2017 - thêm Approved
                var btnDuyet = $('#btn-Approved-All').is(":checked");// duyệt
                var btnkhongduyet = $('#btn-Approved-Remove').is(":checked");// không duyệt
                //▲ Add - NghiaTV5 - 23/10/2017 - thêm Approved
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    //▼ Edit - NghiaTV5 - 24/10/2017 - update trạng thái duyệt 1
                    $.each(myData, function (index, item) {
                        if (btnDuyet === true) {
                            item.Approved = 1
                        }
                        else if (btnkhongduyet === true) {
                            item.Approved = 0
                        }
                        else {
                            item.Approved = null
                        }
                    });
                    //▲ Edit - NghiaTV5 - 24/10/2017 - update trạng thái duyệt 1

                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                };
            });
            //▼ Delete - NghiaTV5 - 20/10/2017 - Bỏ $btnComplete 179
            $btnComplete.on('click', function () {
                //var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                //    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                //});

                //var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                //    return item.ID !== null && item.ID !== undefined && item.ID !== '';
                //});
                //if (myData.length == 0) {
                //    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                //}
                //var dem = 0;
                //$.each(myData, function (index, item) {
                //    if(item.Duyet !== 1 && item.KhongDuyet !== 1)
                //    {
                //        dem++;
                //    }
                //});
                //if (dem > 0)
                //{
                //    XFunction.RenderMessage('error', 'Vui lòng chọn <b>"Duyệt"</b> hoặc <b>"Không Duyệt"</b> để hoàn tất !'); return;
                //}
                //var datareturn = [];
                //var Duyet = 0
                //$.each(myData, function (index, item) {
                //    if (item.Duyet === 1)
                //    {
                //        Duyet = 1
                //    }
                //    datareturn.push({
                //        Id: item.ID,
                //        Duyet: Duyet,
                //    });
                //});
                //$('#Details').val(JSON.stringify(myData));
                //$('#DetailsCc').val(JSON.stringify(myDataCc));
                //var form = $("form#form-detail");
                //form.attr("action", "/Requests/Complete");
                //form.submit();
            });
            //▲ Delete - NghiaTV5 - 20/10/2017 - Bỏ $btnComplete 179
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                //▼ Add - NghiaTV5 - 20/10/2017 - thêm checkbox loại 179
                var btnDuyet = $('#btn-Approved-All').is(":checked");// duyệt
                var btnkhongduyet = $('#btn-Approved-Remove').is(":checked");// không duyệt
                if ((btnDuyet === false) && (btnkhongduyet === false)) {
                    XFunction.RenderMessage("error", "Phải chọn trạng thái duyệt hoặc không duyệt xem lại chi tiết !");
                    return false;
                }
                else {
                    if (btnDuyet === true) {
                        $.each(myData, function (index, item) {
                            item.Approved = 1;
                        });
                    }
                    else if (btnkhongduyet === true) {
                        $.each(myData, function (index, item) {
                            item.Approved = 0;
                        });
                    }
                }
                //▼ Add - NghiaTV5 - 20/10/2017 - chuyển sang pos
                var dataValid = [];
                $.each(myData, function (index, item) {
                    if (item.Approved === 0) {
                        dataValid.push(index + 1);
                    }
                });
                if (dataValid.length > 0) {
                    $('#DuyetAll').val('0');
                } else {
                    $('#DuyetAll').val('1');
                }
                //▲ Add - NghiaTV5 - 20/10/2017 - chuyển sang pos
                //▲ Add - NghiaTV5 - 20/10/2017 - thêm checkbox loại 179
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });

            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });
        });
    };
    //▲ Add - NghiaTV5 - 20/10/2017 - thêm loại 179

    //▼NgoanHT - 16/10/2017 - Loại: 180 - Thêm
    function contruct_180() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            var l_Data_Handsontable = p_Response;
            var l_Setting = function () {
                return {
                    data: l_Data_Handsontable,
                    stretchH: 'all',    //  Dãn cột
                    disableVisualSelection: true,   //  Ẩn Scroll dọc

                    colHeaders:
                        ['Duyệt',
                            'Không duyệt',
                            'Số vận đơn',
                            'Lý do Gửi hỏa tốc', //NgoanHT - 25/10/2017 - 180: Bill hỏa tốc - sửa
                            'Tên nơi Gửi',//NgoanHT - 25/10/2017 - 180: Bill hỏa tốc - sửa
                            'Tên nơi nhận',
                            'Tên hàng hóa',
                            'Trọng lượng',
                            'Cước vận chuyển',
                            'Hệ thống',
                            'Số giao dịch',
                        ],
                    columns: [
                        {
                            data: 'Duyet', type: 'checkbox', width: 100, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (g_FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'KhongDuyet', type: 'checkbox', width: 100, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (g_FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                        },
                        { data: 'SoVanDon', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'LyDoGui', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'GuiTu', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'GuiDen', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'TenHangHoa', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'TrongLuong', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'CuocVanChuyen', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'HeThong', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'SoGiaoDich', type: 'text', className: 'htCenter', readOnly: true },
                    ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            if (col === 'Duyet' && newValue === 1) {
                                hot.setDataAtRowProp(row, 'KhongDuyet', 0, 'not');
                            }
                            if (col === 'KhongDuyet' && newValue === 1) {
                                hot.setDataAtRowProp(row, 'Duyet', 0, 'not');
                            }
                        });
                    },
                };
            };
            hot = new Handsontable(container, l_Setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                console.log(hot.getData());
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.ID !== null && item.ID !== undefined && item.ID !== '';
                });
                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    //▼ Edit - NgoanHT - 14/11/2017 - Sửa trao đổi
                    var datareturn = [];
                    var Duyet = null;
                    $.each(myData, function (index, item) {
                        datareturn.push({
                            ID: item.ID,
                            Duyet: (!!item.Duyet && item.Duyet == 1) ? true : false,
                        });
                    });
                    //▲ Edit - NgoanHT - 14/11/2017 - Sửa trao đổi
                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                };
            });

            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.ID !== null && item.ID !== undefined && item.ID !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var dem = 0;
                $.each(myData, function (index, item) {
                    if (item.Duyet !== 1 && item.KhongDuyet !== 1) {
                        dem++;
                    }
                });
                if (dem > 0) {
                    XFunction.RenderMessage('error', 'Vui lòng chọn <b>"Duyệt"</b> hoặc <b>"Không Duyệt"</b> để hoàn tất !'); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        ID: item.ID,
                        Duyet: (!!item.Duyet && item.Duyet == 1) ? true : false,
                    });
                });
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });
        });
    };
    //▲NgoanHT - 16/10/2017 - Loại: 180 - Thêm

    //▼ Add - NgoanHT - 01/11/2017 - Thêm loại 181
    function contruct_181() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            $.get('/Requests/Get_RepairItem', null, function (data) {
                $.get('/Requests/Get_HangDemo', { Shop: p_Response[0].FromShop }, function (dataHangDemo) {//Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                    var stringBanDemo = [], stringHangTheoYeuCau = [], CKTenYeuCau;
                    $.each(data, function (index, item) {
                        stringBanDemo.push({ value: item.Id, label: item.Name, parent: item.ParentId })
                    })

                    if (p_Response[0].TenYeuCau == 2586 // 2586:Hộp đèn hãng (lightbox)
                    ) {
                        $("#CKHopDenHang").prop("checked", true);
                        $("#CKHopDenHang").parent().addClass('checked');
                    }
                    else {
                        $("#CKBanDemo").prop("checked", true);
                        $("#CKBanDemo").parent().addClass('checked');
                    };

                    //ChuongNT3 - 04/07/2018 - loại 181 
                    //console.log(p_Response[0].Hang )
                    if (p_Response[0].Hang == '2829' // 2829:Samsung
                        || p_Response[0].Hang == '2830' // 2830:Samsung Galaxy
                    ) {
                        var url = '/assets/plugins/ConvertExcelToJson/ListShopCodeSamSung.xlsx';
                        var oReq = new XMLHttpRequest();
                        oReq.open("GET", url, true);
                        oReq.responseType = "arraybuffer";
                        oReq.onload = function (e) {
                            var arraybuffer = oReq.response;
                            /* convert data to binary string */
                            var data = new Uint8Array(arraybuffer);
                            var arr = new Array();
                            for (var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);
                            var bstr = arr.join("");
                            /* Call XLSX */
                            var workbook = XLSX.read(bstr, { type: "binary" });
                            /* DO SOMETHING WITH workbook HERE */
                            var first_sheet_name = workbook.SheetNames[0];
                            /* Get worksheet */
                            var worksheet = workbook.Sheets[first_sheet_name];
                            var data_list_shop_code_goc = [];
                            var data_list_shop_code = [];
                            data_list_shop_code_goc = XLSX.utils.sheet_to_json(worksheet, { raw: true });
                            $.each(data_list_shop_code_goc, function (index, item) {
                                data_list_shop_code.push({
                                    MaShop: item.MaShop,
                                    TenShop: item.TenShop,
                                    SITECODE: item.SITECODE,
                                    SOLDCODE: item.SOLDCODE,
                                    SITENAME: item.SITENAME,
                                })
                            });
                            console.log(data_list_shop_code_goc)
                            var listShop = [] = $.grep(data_list_shop_code, function (item, index) {
                                return item.MaShop == p_Response[0].FromShop;
                            });
                            $.each(listShop, function (index, item) {
                                $$('shopCode').innerHTML = item.MaShop;
                                $$('shopName').innerHTML = item.TenShop;
                                $$('siteCode').innerHTML = item.SITECODE;
                                $$('soldCode').innerHTML = item.SOLDCODE;
                                $$('siteName').innerHTML = item.SITENAME;
                            });
                        }
                        oReq.send();
                    }
                    else {
                        $('#listShopCodeSamSung').addClass("hidden");
                    }
                    //ChuongNT3 - 04/07/2018 - loại 181 
                    document.getElementById("CKBanDemo").disabled = true;
                    document.getElementById("CKHopDenHang").disabled = true;

                    //▼ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu
                    var XacNhan = 0;
                    if (p_Response[0].XacNhanYeuCau == 1) {
                        $("#CKXacNhan").prop("checked", true);
                        $("#CKXacNhan").parent().addClass('checked');
                        document.getElementById("CKXacNhan").disabled = true;
                        XacNhan = 1;
                    }

                    $('#CKXacNhan').click(function () {
                        if (document.getElementById("CKXacNhan").checked == true) {
                            XacNhan = '1';
                        }
                        else {
                            XacNhan = '0';
                        }
                    })
                    //▲ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu

                    $('#HangMuc').multiselect({
                        includeSelectAllOption: true,
                        buttonWidth: '100%',
                        nonSelectedText: 'Hạng mục sửa chửa',//Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                        allSelectedText: 'Tất cả',
                        selectAllText: 'Tất cả',
                        maxHeight: 300
                    });
                    $('#Hang').multiselect({
                        includeSelectAllOption: false,
                        buttonWidth: '100%',
                        nonSelectedText: 'Hãng',
                        maxHeight: 300
                    });
                    stringHangTheoYeuCau = $.grep(stringBanDemo, function (item, index) {
                        return item.parent == p_Response[0].TenYeuCau
                    })
                    var HangMucArr = p_Response[0].HangMuc_CoSoVatChat.split(',');
                    //▼ Add - NgoanHT - 14/04/2018 - Loại: 181 - thêm box chứa
                    var stringHangMucSelect = [];
                    $.each(HangMucArr, function (index, item) {
                        $.each(stringBanDemo, function (indexBD, itemBD) {
                            if (item == itemBD.value) {
                                stringHangMucSelect.push(itemBD.label)
                            }
                        })
                    })
                    $('#HangMuc').multiselect('dataprovider', stringHangTheoYeuCau);
                    $('#HangMuc').multiselect('select', HangMucArr);
                    $('#HangMuc').multiselect('disable');
                    $.each(stringHangMucSelect, function (index, item) {
                        $("#ulHangDemo").append('<li>' + item + '</li>');
                    })
                    //▲ Add - NgoanHT - 14/04/2018 - Loại: 181 - thêm box chứa

                    $('#Hang').multiselect('dataprovider', dataHangDemo);
                    $('#Hang').multiselect('select', [p_Response[0].Hang]);
                    $('#Hang').multiselect('disable');

                    $('#LyGiaiChiTiet').val(p_Response[0].LyGiaiChiTiet);
                    $('#LyGiaiChiTiet').prop('disabled', true);


                    var dataFiles = [], lisDataFilesName = [], ListNameFile, dataFiles1 = [], lisDataFilesName1 = [], ListNameFile1;
                    //Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                    if (p_Response[0].Uri_String !== null && p_Response[0].Uri_String !== '' && p_Response[0].Uri_String !== undefined) {
                        var HangMucArr = p_Response[0].Uri_String.split(',');
                        $.each(HangMucArr, function (index, item) {
                            //var filename = item.split('/')[3]
                            var listURI = item.split('/');
                            var ViTri = listURI.length - 1;
                            var filename = listURI[ViTri]
                            lisDataFilesName.push(item);
                            ListNameFile = lisDataFilesName.join(',');
                            if (listURI[0] == 'http:') {
                                $('.HinhHangMucSuaChua').append('<div class="ULH1"><a href="http://calllogoutside.fptshop.com.vn/Requests/DownloadHangDemo?filename=' + filename + '" target="_blank" class="renderlink" ><img class="IMG1" src="' + item + '"height="84" width="84"></a></div>')
                            }
                            else {
                                $('.HinhHangMucSuaChua').append('<div class="ULH1"><a href="/ServiceData/DownloadHangDemo?filename=' + filename + '" target="_blank" class="renderlink" ><img class="IMG1" src="' + item + '"height="84" width="84"></a></div>')
                            }
                        });
                    }
                    if (p_Response[0].Uri_String1 !== null && p_Response[0].Uri_String1 !== '' && p_Response[0].Uri_String1 !== undefined) {
                        var HangMucArr = p_Response[0].Uri_String1.split(',');
                        $.each(HangMucArr, function (index, item) {
                            var listURI = item.split('/');
                            var ViTri = listURI.length - 1;
                            var filename = listURI[ViTri]
                            lisDataFilesName1.push(item);
                            ListNameFile1 = lisDataFilesName1.join(',');
                            if (listURI[0] == 'http:') {
                                $('.HinhSauSuaChuaXong').append('<div class="ULH1"><a href="http://calllogoutside.fptshop.com.vn/Requests/DownloadHangDemo?filename=' + filename + '" target="_blank" class="renderlink" ><img class="IMG1" src="' + item + '"height="84" width="84"></a></div>') //Edit - NgoanHT - 05/04/2017 - Loại: 181 - sửa link
                            }
                            else {
                                $('.HinhSauSuaChuaXong').append('<div class="ULH1"><a href="/ServiceData/DownloadHangDemo?filename=' + filename + '" target="_blank" class="renderlink" ><img class="IMG1" src="' + item + '"height="84" width="84"></a></div>')
                            }
                        })
                    }
                    //Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa

                    function endFile(name) {
                        var extension = name.split('.').pop().toLowerCase();
                        if ($.inArray(extension, ['jpg', 'png', 'gif', 'jpeg']) == -1) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }

                    var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
                    $.each(permissons, function (index, item) {
                        if (item == 'sender')
                            permisstion.isSender = true;
                        if (item == 'assigner')
                            permisstion.isAssiner = true;
                        if (item == 'groupAssigner')
                            permisstion.isGroupAssiner = true;
                    });
                    if (permisstion.isSender == false || CL.Status == 4) {
                        document.getElementById("UploadHinhHangMucSuaChua").disabled = true;
                        $('#UploadHinhHangMucSuaChua').css('cursor', 'not-allowed')
                    }
                    //Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                    var Emp = p_Response[0].EmployeeCode.split(',');
                    var CheckAss = 0;
                    $.each(Emp, function (index, item) {
                        if (Ass == item) {
                            CheckAss++;
                        }
                    })
                    if (CheckAss == 0 || CL.Status == 4) {
                        document.getElementById("UploadHinhSauSuaChuaXong").disabled = true;
                        $('#UploadHinhSauSuaChuaXong').css('cursor', 'not-allowed')
                    }

                    $('#UploadHinhHangMucSuaChua').change(function () {
                        var selectedFiles = $(this)[0].files;
                        $.each(selectedFiles, function (index, item) {
                            var d = new Date();
                            var n = d.getTime();
                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                            dataFiles.push(selectedFiles[index]);
                            lisDataFilesName.push('/Uploads/FileAttachs/' + selectedFiles[index].nameNew);
                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                            if (endFile(selectedFiles[index].nameNew)) {
                                $('.HinhHangMucSuaChua').append('<div class="ULH2"><a href="' + tmppath + '" target="_blank" class="renderlink" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG1" src="' + tmppath + '"height="84" width="84"></a><button class="BTN1" type="button" class="btn btn-success" data-lisDataFilesName="/Uploads/FileAttachs/' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>')//Edit - NgoanHT - 06/04/2018 - Loại: 181 - sửa class
                            };
                            ListNameFile = lisDataFilesName.join(',');
                        });
                        $('#UploadHinhHangMucSuaChua').val('');
                    })
                    //Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                    DeleteIMG = function (data) {
                        var NameIMG = $(data).context.dataset.lisdatafilesname;
                        var indexDelete = [];
                        $.each(lisDataFilesName, function (index, item) {
                            if (item == NameIMG) {
                                indexDelete.push(index);
                            }

                        });
                        $.each(indexDelete, function (index, item) {
                            dataFiles.splice(item.toString(), 1);
                            lisDataFilesName.splice(item.toString(), 1);
                        })
                        ListNameFile = lisDataFilesName.join(',');
                        $(data).parent().remove();
                    }
                    //Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                    $('#UploadHinhSauSuaChuaXong').change(function () {
                        var selectedFiles = $(this)[0].files;
                        $.each(selectedFiles, function (index, item) {
                            var d = new Date();
                            var n = d.getTime();
                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                            dataFiles1.push(selectedFiles[index]);
                            lisDataFilesName1.push('/Uploads/FileAttachs/' + selectedFiles[index].nameNew);
                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                            if (endFile(selectedFiles[index].nameNew)) {
                                $('.HinhSauSuaChuaXong').append('<div class="ULH2"><a href="' + tmppath + '" target="_blank" class="renderlink" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG1" src="' + tmppath + '"height="84" width="84"></a><button class="BTN1" type="button" class="btn btn-success" data-lisDataFilesName="/Uploads/FileAttachs/' + selectedFiles[index].nameNew + '" onclick="DeleteIMG1(this)">X</button></div>')//Edit - NgoanHT - 06/04/2018 - Loại: 181 - sửa class
                            };
                            ListNameFile1 = lisDataFilesName1.join(',');
                        });
                        $('#UploadHinhSauSuaChuaXong').val('');
                    })
                    DeleteIMG1 = function (data) {
                        var NameIMG = $(data).context.dataset.lisdatafilesname;
                        var indexDelete = [];
                        $.each(lisDataFilesName1, function (index, item) {
                            if (item == NameIMG) {
                                indexDelete.push(index);
                            }

                        });
                        $.each(indexDelete, function (index, item) {
                            dataFiles1.splice(item.toString(), 1);
                            lisDataFilesName1.splice(item.toString(), 1);
                        })
                        ListNameFile1 = lisDataFilesName1.join(',');
                        $(data).parent().remove();
                    }
                    //Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                    var DanhGiaCuaShop;
                    //▼ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm lý do không đạt
                    if (CL.StepNo == 2 && permisstion.isAssiner == true && CL.Status < 4) {
                        $('.ShopDanhGiaChatLuong').css('display', 'block')
                        $('#CKDat').click(function () {
                            if (document.getElementById("CKDat").checked == true) {
                                $("#CKKhongDat").prop("checked", false)
                                $("#CKKhongDat").parent().removeClass('checked');

                                $("#CKKhongToiSuaChua").prop("checked", false)
                                $("#CKKhongToiSuaChua").parent().removeClass('checked');

                                DanhGiaCuaShop = 1;
                            }
                            else {
                                $("#CKDat").prop("checked", true);
                                $("#CKDat").parent().addClass('checked');
                            }
                            $('.LyDoKhongDat').css('display', 'none')
                            $('#LyDoKhongDat').val('')
                        })
                        $('#CKKhongDat').click(function () {
                            if (document.getElementById("CKKhongDat").checked == true) {
                                $("#CKDat").prop("checked", false)
                                $("#CKDat").parent().removeClass('checked');

                                $("#CKKhongToiSuaChua").prop("checked", false)
                                $("#CKKhongToiSuaChua").parent().removeClass('checked');

                                DanhGiaCuaShop = 2;
                            }
                            else {
                                $("#CKKhongDat").prop("checked", true);
                                $("#CKKhongDat").parent().addClass('checked');
                            }
                            $('.LyDoKhongDat').css('display', 'block')
                        })
                        $('#CKKhongToiSuaChua').click(function () {
                            if (document.getElementById("CKKhongToiSuaChua").checked == true) {
                                $("#CKDat").prop("checked", false)
                                $("#CKDat").parent().removeClass('checked');

                                $("#CKKhongDat").prop("checked", false)
                                $("#CKKhongDat").parent().removeClass('checked');

                                DanhGiaCuaShop = 3;
                            }
                            else {
                                $("#CKKhongToiSuaChua").prop("checked", true);
                                $("#CKKhongToiSuaChua").parent().addClass('checked');
                            }
                            $('.LyDoKhongDat').css('display', 'none')
                            $('#LyDoKhongDat').val('')
                        })
                    }
                    else if (CL.StepNo == 2 && CL.Status == 4) {
                        $('.ShopDanhGiaChatLuong').css('display', 'block')

                        if (p_Response[0].DanhGiaCuaShop == 2) {
                            $('#LyDoKhongDat').val(p_Response[0].LyDoKhongDat);
                            $('#LyDoKhongDat').prop('disabled', true);
                            $('.LyDoKhongDat').css('display', 'block')
                        }

                        DanhGiaCuaShop = p_Response[0].DanhGiaCuaShop
                        if (DanhGiaCuaShop == 1) {
                            $("#CKDat").prop("checked", true);
                            $("#CKDat").parent().addClass('checked');
                        }
                        else if (DanhGiaCuaShop == 2) {
                            $("#CKKhongDat").prop("checked", true);
                            $("#CKKhongDat").parent().addClass('checked');
                        }
                        else if (DanhGiaCuaShop == 3) {
                            $("#CKKhongToiSuaChua").prop("checked", true);
                            $("#CKKhongToiSuaChua").parent().addClass('checked');
                        };
                        document.getElementById("CKDat").disabled = true;
                        document.getElementById("CKKhongDat").disabled = true;
                        document.getElementById("CKKhongToiSuaChua").disabled = true;
                    }
                    //▲ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm lý do không đạt

                    //▼ Add - NgoanHT - 27/04/2018 - Loại: 181 – Thêm điều kiện
                    if (permisstion.isAssiner == false && CL.Status < 4) {
                        document.getElementById("CKXacNhan").disabled = true;
                    }
                    //▲ Add - NgoanHT - 27/04/2018 - Loại: 181 – Thêm điều kiện
                    $btnChangeStep.on('click', function () {
                        var data = new FormData();
                        var dataReturn = [];

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });
                        //▼ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu
                        if (XacNhan == 0 && permisstion.isAssiner == true) {//Edit - NgoanHT - 27/04/2018 - Loại: 181 - sửa
                            XFunction.RenderMessage('error', 'Vui xác nhận yêu cầu trước khi chuyển bước'); return;
                        }
                        dataReturn.push({
                            Id: 0,
                            RequestDId: p_Response[0].IDRD,
                            XacNhan: XacNhan,
                            ListNameFile: ListNameFile,
                            ListNameFile_2: ListNameFile1,
                        });
                        //▲ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu
                        if (dataFiles !== '' && dataFiles !== null && dataFiles !== undefined && dataFiles.length > 0) {
                            $.each(dataFiles, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        }
                        if (dataFiles1 !== '' && dataFiles1 !== null && dataFiles1 !== undefined && dataFiles1.length > 0) {
                            $.each(dataFiles1, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        }
                        //Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                        if (lisDataFilesName1 === '' || lisDataFilesName1 === null || lisDataFilesName1 === undefined || lisDataFilesName1.length == 0) {
                            XFunction.RenderMessage('error', 'Vui lòng Upload hình ảnh sau sửa chữa xong !'); return;
                        }
                        //Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                        $('#myModal').modal('show');
                        $('#Details').val(JSON.stringify(dataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        data.append("Details", $('#Details').val());
                        data.append("DetailsCc", $('#DetailsCc').val());
                        data.append("RequestId", $('#RequestId').val());
                        data.append("Message", $('#Message').val());
                        data.append("ImageValidate", $('#ImageValidate').val());
                        $.ajax({
                            type: "POST",
                            url: "/Requests/SaveUploadedFileDetailMultipleColInOut",//Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                            contentType: false,
                            processData: false,
                            data: data,
                            success: function (result) {
                                if (result.error === 0) {
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/ChangeStep");
                                    form.submit();
                                }
                                else {
                                    $('#myModalWatting').modal('hide');
                                    XFunction.RenderMessage('error', 'Lưu file không thành công');
                                    return;
                                }
                            },
                            error: function () {
                                $('#myModalWatting').modal('hide');
                                XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                return;
                            }
                        });
                    });
                    $btnComment.on('click', function () {
                        var data = new FormData();
                        var dataReturn = [];

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });
                        var message = $('#Message').val();
                        if (message.length == 0) {
                            XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                        }
                        //▼ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu
                        if (XacNhan == 0 && permisstion.isAssiner == true) {//Edit - NgoanHT - 27/04/2018 - Loại: 181 - sửa
                            XFunction.RenderMessage('error', 'Vui xác nhận yêu cầu trước khi trao đổi'); return;//Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                        }
                        $('#myModal').modal('show');

                        dataReturn.push({
                            Id: 0,
                            RequestDId: p_Response[0].IDRD,
                            XacNhan: XacNhan,
                            ListNameFile: ListNameFile,
                            ListNameFile_2: ListNameFile1,
                        });
                        //▲ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm xác nhận yêu cầu
                        if (dataFiles !== '' && dataFiles !== null && dataFiles !== undefined && dataFiles.length > 0) {
                            $.each(dataFiles, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        }
                        if (dataFiles1 !== '' && dataFiles1 !== null && dataFiles1 !== undefined && dataFiles1.length > 0) {
                            $.each(dataFiles1, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        }
                        $('#Details').val(JSON.stringify(dataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        data.append("Details", $('#Details').val());
                        data.append("DetailsCc", $('#DetailsCc').val());
                        data.append("RequestId", $('#RequestId').val());
                        data.append("Message", $('#Message').val());
                        data.append("ImageValidate", $('#ImageValidate').val());
                        if ((dataFiles1 == '' || dataFiles1 == null || dataFiles1 == undefined || dataFiles1.length == 0) && (dataFiles == '' || dataFiles == null || dataFiles == undefined || dataFiles.length == 0)) {
                            $('#StatusSentOUT').val(0);//Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                        else {
                            $.ajax({
                                type: "POST",
                                url: "/Requests/SaveUploadedFileDetailMultipleColInOut",//Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                                contentType: false,
                                processData: false,
                                data: data,
                                success: function (result) {
                                    if (result.error === 0) {
                                        $('#StatusSentOUT').val(1);//Edit - NgoanHT - 18/04/2018 - Loại: 181 - sửa
                                        var form = $("form#form-detail");
                                        form.attr("action", "/Requests/Conversation");
                                        form.submit();
                                    }
                                    else {
                                        $('#myModalWatting').modal('hide');
                                        XFunction.RenderMessage('error', 'Lưu file không thành công');
                                        return;
                                    }
                                },
                                error: function () {
                                    $('#myModalWatting').modal('hide');
                                    XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                    return;
                                }
                            });
                        }
                    });
                    $btnComplete.on('click', function () {
                        var dataReturn = [];

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });
                        if (DanhGiaCuaShop == null || DanhGiaCuaShop == '' || DanhGiaCuaShop == undefined) {
                            XFunction.RenderMessage("error", "Vui lòng đánh giá trước khi hoàn tất"); return;
                        }
                        //▼ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm lý do không đạt
                        var LyDoKhongDat = $('#LyDoKhongDat').val();
                        if (DanhGiaCuaShop == 2 && (LyDoKhongDat == '' || LyDoKhongDat == null || LyDoKhongDat == undefined)) {
                            XFunction.RenderMessage("error", "Vui lòng nhập lý do không đạt"); return;
                        }
                        $('#myModal').modal('show');
                        dataReturn.push({
                            Id: p_Response[0].Id,
                            RequestDId: p_Response[0].IDRD,
                            DanhGiaCuaShop: DanhGiaCuaShop,
                            LyDoKhongDat: LyDoKhongDat
                        });
                        //▲ Add - NgoanHT - 09/04/2018 - Loại: 181 – Thêm lý do không đạt
                        $('#Details').val(JSON.stringify(dataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));

                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    });
                });
            });
        });
    };
    //▲ Add================================================================================

    //▼ Add - NgoanHT - 09/11/2017 - Thêm loại 182
    function contruct_182() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            var l_Data_Handsontable = p_Response;
            var l_Setting = function () {
                return {
                    data: l_Data_Handsontable,
                    stretchH: 'all',    //  Dãn cột
                    disableVisualSelection: true,   //  Ẩn Scroll dọc

                    colHeaders:
                        ['Duyệt',
                            'Không duyệt',
                            'Số SO',
                            'Số Calllog KNKH',
                            'Mã sản phẩm',
                            'Tên sản phẩm',
                            'Số lượng ',
                            'Giá',
                            'Ngày trả hàng',
                        ],
                    columns: [
                        {
                            data: 'Duyet', type: 'checkbox', width: 100, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (g_FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'KhongDuyet', type: 'checkbox', width: 100, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (g_FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                        },
                        { data: 'SO', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'SoCalllogKNKH', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'MaSanPham', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'TenSanPham', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'SoLuong', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'Gia', type: 'text', className: 'htCenter', readOnly: true },
                        { data: 'NgayTraHang', type: 'text', className: 'htCenter', readOnly: true },
                    ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            if (col === 'Duyet' && newValue === 1) {
                                hot.setDataAtRowProp(row, 'KhongDuyet', 0, 'not');
                            }
                            if (col === 'KhongDuyet' && newValue === 1) {
                                hot.setDataAtRowProp(row, 'Duyet', 0, 'not');
                            }
                        });
                    },
                };
            };
            hot = new Handsontable(container, l_Setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                console.log(hot.getData());
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.ID !== null && item.ID !== undefined && item.ID !== '';
                });
                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    //▼ Edit - NgoanHT - Loại: 182 - 17/11/2017 - Sửa trao đổi
                    var Duyet = null
                    var datareturn = [];
                    $.each(myData, function (index, item) {
                        if (item.Duyet === 1) {
                            Duyet = 1
                        }
                        else if (item.KhongDuyet === 1) {
                            Duyet = 0
                        }
                        datareturn.push({
                            ID: item.RDID,
                            Duyet: Duyet
                        });
                        //▲ Edit - NgoanHT - Loại: 182 - 17/11/2017 - Sửa trao đổi
                    });

                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                };
            });

            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.ID !== null && item.ID !== undefined && item.ID !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var dem = 0;
                $.each(myData, function (index, item) {
                    if (item.Duyet !== 1 && item.KhongDuyet !== 1) {
                        dem++;
                    }
                });
                if (dem > 0) {
                    XFunction.RenderMessage('error', 'Vui lòng chọn <b>"Duyệt"</b> hoặc <b>"Không Duyệt"</b> để hoàn tất !'); return;
                }
                var datareturn = [];
                var Duyet = 0
                $.each(myData, function (index, item) {
                    if (item.Duyet === 1) {
                        Duyet = 1
                    }
                    datareturn.push({
                        Id: item.ID,
                        Duyet: Duyet,
                    });
                });
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });
        });
    };
    //▲ Add================================================================================

    //▼ Add - NghiaTV5 - 11/11/2017 - Duyệt lỗi thẩm mỹ 183 úp v1
    function contruct_183() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            var DataFiles = [];
            var dataCheckDuyet_true = false, data_false = false, dataCheckDuyet_false = false;
            var l_Data_Handsontable = p_Response;
            $.each(l_Data_Handsontable, function (index, item) {
                if (item.Images_1 !== '' && item.Images_2 !== '') {
                    var l_Url_1 = '';
                    $.ajax({
                        async: false,
                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                        type: "GET",
                        data: { Url: item.Images_1 },
                        success: function (p_ActionResult) {
                            l_Url_1 = p_ActionResult;
                        }
                    });
                    item.Images_1 = '<a href="' + l_Url_1 + '" target="_blank"><img width="30" height="30" src="' + l_Url_1 + '"></a> ';
                    var l_Url_2 = '';
                    $.ajax({
                        async: false,
                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                        type: "GET",
                        data: { Url: item.Images_2 },
                        success: function (p_ActionResult) {
                            l_Url_2 = p_ActionResult;
                        }
                    });
                    item.Images_2 = '<a href="' + l_Url_2 + '" target="_blank"><img width="30" height="30" src="' + l_Url_2 + '"></a> '
                }
            });
            var Title = ''
            var dataimg = [];
            var dataReturn = [];
            var actionRendererUploadPicture = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop === 'Picture') {
                    var Status1 = instance.getDataAtRowProp(row, 'Approved');
                    var $btnupload = '';
                    $btnupload = $('<div class="fileUpload btn"><span class="color fa fa-upload"></span><input type="file" id="FileName" class="upload" /></div>');
                    $btnupload.click(function () {
                        //▼ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                        if (CL.Status == 4) {
                            XFunction.RenderMessage("error", "Lỗi Calllog này đã hoàn tất !:("); return false;
                        }
                        //▲ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                        //▼ Add - NghiaTV5 - 06/11/2017 - Bạn không có quyền úp hình ảnh
                        if (CL.StepNo == 2 && Assign.split('-')[0] == Ass) {
                            XFunction.RenderMessage("error", "Bạn không có quyền úp hình ảnh "); return false;
                        }
                        if (CL.StepNo == 2 && Status1 == true) {
                            XFunction.RenderMessage("error", "Hình ảnh đã được duyệt không úp ảnh "); return false;
                        }
                        //▲ Add - NghiaTV5 - 06/11/2017 - Bạn không có quyền úp hình ảnh
                        $('#FileName').on('change', function () {
                            var IdRequestDetail = instance.getDataAtRowProp(row, 'IdRequestDetail');
                            var selectedFiles = $('#FileName')[0].files;
                            var inValid = /\s/;
                            var d = new Date();
                            var n = d.getTime();
                            selectedFiles[0].nameNew = n.toString() + '_' + selectedFiles[0].name;
                            var tmppath = URL.createObjectURL(selectedFiles[0]);
                            var str = $('#FileName')[0].files[0].name.replace('.', '');
                            if (/^[\w ]*$/.test(str) === false) {
                                alert('Cảnh báo : Tên file phải không dấu, không khoảng trắng và không có kí tự đặc biệt!');
                                $('#FileName').val('')
                                return false;
                            }
                            else if (endFile(selectedFiles[0].nameNew) === false) {
                                $('#FileName').val('')
                                XFunction.RenderMessage("error", "File hình ảnh phải có định dạng đuôi ['jpeg', 'jpg', 'png', 'gif', 'bmp']!");
                                $('#FileName').val('')
                                return false;
                            }
                            else if (inValid.test(selectedFiles[0].nameNew)) {
                                alert('Cảnh báo : Tên file hình không chứa khoảng trắng');
                                $('#FileName').val('')
                                return false;
                            }
                            else {

                                $.each(hot.getData(), function (index, item) {
                                    if (index == row) {
                                        item.DataFiles1 = selectedFiles[0].nameNew;
                                        dataimg.push(selectedFiles[0]);
                                    }
                                })
                                if (selectedFiles[0].nameNew) {
                                    hot.setDataAtCell(row, 10, '<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink center" data-id="' + row + '" data-value="' + selectedFiles[0].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a></div>');// Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                                }
                                var flagImage = 0;
                                $.each(hot.getData(), function (index, item) {
                                    if (item.Images_1 !== null && item.Images_1 !== '' && item.Images_1 !== undefined && item.Images_2 !== null && item.Images_2 !== '' && item.Images_2 !== undefined) {
                                        flagImage = 1;
                                    }
                                });
                                if (flagImage == 1) {
                                    XFunction.RenderMessage("success", "Anh/chị vui lòng bấm Hoàn tất sau khi upload hình ảnh !");
                                }
                            }
                        })

                    })
                    $(td).empty().append($btnupload);
                }
                if (prop === 'Picture1') {

                    var IdRequestDetail = instance.getDataAtRowProp(row, 'IdRequestDetail');
                    var Status1 = instance.getDataAtRowProp(row, 'Approved');
                    var $btnupload = '';
                    $btnupload = $('<div class="fileUpload btn"><span class="color fa fa-upload"></span><input type="file" id="FileNamePicture1" class="upload" /></div>');
                    $btnupload.click(function () {
                        //▼ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                        if (CL.Status == 4) {
                            XFunction.RenderMessage("error", "Lỗi Calllog này đã hoàn tất !:("); return false;
                        }
                        //▲ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                        //▼ Add - NghiaTV5 - 06/11/2017 - Bạn không có quyền úp hình ảnh
                        if (CL.StepNo == 2 && Assign.split('-')[0] == Ass) {
                            XFunction.RenderMessage("error", "Bạn không có quyền úp hình ảnh "); return false;
                        }
                        if (CL.StepNo == 2 && Status1 == true) {
                            XFunction.RenderMessage("error", "Hình ảnh đã được duyệt không úp ảnh "); return false;
                        }
                        //▲ Add - NghiaTV5 - 06/11/2017 - Bạn không có quyền úp hình ảnh
                        $('#FileNamePicture1').on('change', function () {
                            var selectedFiles = $('#FileNamePicture1')[0].files;

                            var inValid = /\s/;
                            var d = new Date();
                            var n = d.getTime();
                            selectedFiles[0].nameNew = n.toString() + '_' + selectedFiles[0].name;
                            var tmppath = URL.createObjectURL(selectedFiles[0]);
                            var str = $('#FileNamePicture1')[0].files[0].name.replace('.', '');

                            if (/^[\w ]*$/.test(str) === false) {
                                alert('Cảnh báo : Tên file phải không dấu, không khoảng trắng và không có kí tự đặc biệt!');
                                $('#FileNamePicture1').val('')
                                return false;
                            }
                            else if (endFile(selectedFiles[0].nameNew) === false) {
                                $('#FileNamePicture1').val('')
                                XFunction.RenderMessage("error", "File hình ảnh phải có định dạng đuôi ['jpeg', 'jpg', 'png', 'gif', 'bmp']!");
                                $('#FileNamePicture1').val('')
                                return false;
                            }
                            else if (inValid.test(selectedFiles[0].nameNew)) {
                                alert('Cảnh báo : Tên file hình không chứa khoảng trắng');
                                $('#FileNamePicture1').val('')
                                return false;
                            }
                            else {

                                $.each(hot.getData(), function (index, item) {
                                    if (index == row) {
                                        item.DataFiles2 = selectedFiles[0].nameNew;
                                        dataimg.push(selectedFiles[0]);
                                    }
                                })
                                if (selectedFiles[0].nameNew) {
                                    hot.setDataAtCell(row, 12, '<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink center1" data-id="' + row + '" data-value="' + selectedFiles[0].nameNew + '" ><img class="IMG"  src="' + tmppath + '"height="42" width="42"></a></div>');// Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                                }
                                var flagImage2 = 0;
                                $.each(hot.getData(), function (index, item) {
                                    if (item.Images_1 !== null && item.Images_1 !== '' && item.Images_1 !== undefined && item.Images_2 !== null && item.Images_2 !== '' && item.Images_2 !== undefined) {
                                        flagImage2 = 1;
                                    }
                                });
                                if (flagImage2 == 1) {
                                    XFunction.RenderMessage("success", "Anh/chị vui lòng bấm Hoàn tất sau khi upload hình ảnh !");
                                }
                            }
                        })

                    })
                    $(td).empty().append($btnupload);
                }

            };
            function endFile(name) {
                var extension = name.split('.').pop().toLowerCase();
                if (extension === 'jpg' || extension === 'png' || extension === 'gif' || extension === 'jpeg') {
                    return true;
                }
                else {
                    return false
                }

            }
            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                td.innerHTML = escaped;
                td.style.textAlign = 'left';
                return td;
            }
            var l_Setting = function () {
                return {
                    data: l_Data_Handsontable,
                    stretchH: 'all',    //  Dãn cột
                    disableVisualSelection: true,   //  Ẩn Scroll dọc
                    colHeaders:
                        [
                            //▼ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                            //'Duyệt',
                            //'Không duyệt',
                            //▲ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                            'Số đơn hàng ',
                            'Số hóa đơn ',
                            'Ngày xuất',
                            'Mã sản phẩm ',
                            'Tên sản phẩm',
                            'Giá trị sản phẩm', //Add-LuanNT44-20052019-loại 183-Thêm giá sản phẩm
                            'Imei',
                            'Số lượng',
                            'Tiêu chí tính phí',
                            'Up hình máy lỗi',
                            'Hình ảnh chứng minh máy lỗi ',
                            'Up hình vỏ hộp',
                            'Hình ảnh vỏ hộp',
                        ],
                    columns: [
                        //▼ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                        //{
                        //    data: 'Duyet', readOnly: false, type: 'checkbox', width: 100, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0,
                        //    renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                        //        if (g_FunctionDefaultValueEmty(p_Value) == '' || p_Value == 0) {
                        //            p_Value = 0;
                        //        }
                        //        else {

                        //            p_Value = 1;
                        //        }
                        //        var status = p_Instance.getDataAtRowProp(p_Row, 'Status');
                        //        var Duyet = p_Instance.getDataAtRowProp(p_Row, 'Approved');
                        //        if (status == 4 && Duyet == true) {
                        //            p_CellProperties.readOnly = true;
                        //        }
                        //        Handsontable.CheckboxCell.renderer.apply(this, arguments);

                        //    }
                        //},
                        //{
                        //    data: 'KhongDuyet', readOnly: false, type: 'checkbox', width: 100, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0,
                        //    renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {

                        //        if (g_FunctionDefaultValueEmty(p_Value) == '' || p_Value == 0) {
                        //            p_Value = 0;
                        //        }
                        //        else {
                        //            p_Value = 1;
                        //        }
                        //        var status = p_Instance.getDataAtRowProp(p_Row, 'Status');
                        //        var KhongDuyet = p_Instance.getDataAtRowProp(p_Row, 'Approved');
                        //        if (status == 4 && KhongDuyet == true) {
                        //            p_CellProperties.readOnly = true;
                        //        }
                        //        Handsontable.CheckboxCell.renderer.apply(this, arguments);
                        //    }
                        //},
                        //▲ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                        { data: 'Quantity2', type: 'text', className: 'htCenter', readOnly: true },//số đơn hàng
                        { data: 'Quantity3', type: 'text', className: 'htCenter', readOnly: true },// số hóa đơn 
                        { data: "Time3", className: 'htLeft', readOnly: true, type: 'text' },//ngày xuất
                        { data: 'ProductCode', type: 'text', className: 'htCenter', readOnly: true },//mã sản phẩm 
                        { data: 'ProductName', type: 'text', className: 'htCenter', readOnly: true },//tên sản phẩm 
                        { data: 'Money1', type: 'numeric', format: '0,0.00', className: 'htCenter', readOnly: true },//giá sản phẩm //Add-LuanNT44-20052019-loại 183-Thêm giá sản phẩm
                        { data: 'Imei', type: 'text', className: 'htCenter', readOnly: true },// cột Imei
                        { data: 'Quantity', type: 'text', className: 'htCenter', readOnly: true },//số lượng
                        { data: 'Property1', type: 'text', className: 'htCenter', readOnly: true },//tiêu chí tính phí

                        {
                            data: 'Picture', type: 'text', className: 'htCenter', readOnly: true, renderer: actionRendererUploadPicture
                        },
                        //Up hình vỏ hộp
                        { data: 'Images_1', type: 'text', className: 'htCenter', readOnly: true, renderer: safeHtmlRenderer },//hình ảnh chứng minh máy lỗi 
                        {
                            data: 'Picture1', type: 'text', className: 'htCenter', readOnly: true, renderer: actionRendererUploadPicture
                        },
                        { data: 'Images_2', type: 'text', className: 'htCenter', readOnly: true, renderer: safeHtmlRenderer },//hình ảnh vỏ hộp 
                    ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            //▼ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                            //if (col === 'Duyet' && newValue === 1) {
                            //    //cellProperties.readOnly = true;
                            //    hot.setDataAtRowProp(row, 'KhongDuyet', 0, 'not');
                            //    //return cellProperties;
                            //}
                            //if (col === 'KhongDuyet' && newValue === 1) {
                            //    //cellProperties.readOnly = true;
                            //    hot.setDataAtRowProp(row, 'Duyet', 0, 'not');
                            //    //return cellProperties;
                            //}
                            //▲ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                        });
                    },
                };
            };
            hot = new Handsontable(container, l_Setting());
            hot.selectCell(0, 0, 0, 0);
            $.each(hot.getSettings().data, function (index, item) {
                if (item.Status == 4) {
                    hot.getSettings().columns[0].readOnly = true
                    hot.getSettings().columns[1].readOnly = true
                    //Handsontable.CheckboxCell.renderer.apply(this, arguments);
                }
            })
            hot.render();
            $btnComment.on('click', function () {
                var data = new FormData();
                var dataReturn = [];// Add - NghiaTV5 - 16/11/2017 - Loại: 183 - Thêm dataReturn
                var check = true;
                $.each(hot.getData(), function (index, item) {
                    console.log(item)
                    if (item.Images_1 == null || item.Images_1 == '' || item.Images_1 == undefined || item.Images_2 == null || item.Images_2 == '' || item.Images_2 == undefined) {
                        check = false;
                    }
                })
                if (check == false) {
                    XFunction.RenderMessage("error", "Yêu cầu úp hình Chứng minh máy lỗi !"); return false;
                }
                //▼ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                if (CL.Status == 4) {
                    XFunction.RenderMessage("error", " Lỗi Calllog này đã hoàn tất !:("); return false;
                }
                //▲ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.IdRequestDetail != undefined && item.IdRequestDetail != '' && item.IdRequestDetail != null && item.IdRequestDetail != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.IdRequestDetail !== null && item.IdRequestDetail !== undefined && item.IdRequestDetail !== '';
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {

                    $.each(myData, function (index, item) {
                        dataReturn.push({
                            Images_1: item.Images_1
                            , Images_2: item.Images_2
                            , IdRequestDetail: item.IdRequestDetail
                            //▼ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                            //, Approved: item.Approved
                            //, Duyet: item.Duyet
                            //, KhongDuyet: item.KhongDuyet
                            //▲ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                            , DataFiles1: item.DataFiles1
                            , DataFiles2: item.DataFiles2
                        });
                    })
                    if (dataimg != '' && dataimg != null && dataimg != undefined && dataimg.length > 0) {
                        $.each(dataimg, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    console.log(myData)
                    console.log(dataimg)
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    data.append("Details", $('#Details').val());
                    data.append("DetailsCc", $('#DetailsCc').val());
                    data.append("RequestId", $('#RequestId').val());
                    data.append("Message", $('#Message').val());
                    data.append("ImageValidate", $('#ImageValidate').val());
                    //▼ Add - NghiaTV5 - 16/11/2017 - Loại: 183 - Gọi ajax
                    $.ajax({
                        type: "POST",
                        url: "/Requests/UploadedFileDetailByCol",
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            if (result.error === 0) {
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Conversation");
                                form.submit();
                            }
                            else {
                                $('#myModalWatting').modal('hide');
                                XFunction.RenderMessage('error', 'Lưu file không thành công');
                                return;
                            }
                        },
                        error: function () {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                            return;
                        }
                    });
                    //▲ Add - NghiaTV5 - 16/11/2017 - Loại: 183 - Gọi ajax
                };
            });// trao đổi
            // ▼ Delete - NghiaTV5 - 29/01/2018 - Loại: 183 - Gọi ajax
            $btnChangeStep.on('click', function () {
                //var data = new FormData();
                //var check = true;
                //var datareturn1 = [];
                //$.each(hot.getData(), function (index, item) {
                //    if (item.Images_1 == null || item.Images_1 == '' || item.Images_1 == undefined || item.Images_2 == null || item.Images_2 == '' || item.Images_2 == undefined) {
                //        check = false;
                //    }
                //})
                ////▼ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                //if (CL.Status == 4) {
                //    XFunction.RenderMessage("error", "Lỗi Calllog này đã hoàn tất !:("); return false;
                //}
                ////▲ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                //if (check == false) {
                //    XFunction.RenderMessage("error", "Yêu cầu úp hình Chứng minh máy lỗi !"); return false;
                //}
                //else {
                //    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                //        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                //    });
                //    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                //        return item.IdRequestDetail !== null && item.IdRequestDetail !== undefined && item.IdRequestDetail !== '';
                //    });

                //    $.each(myData, function (index, item) {
                //        datareturn1.push({
                //            Images_1: item.Images_1
                //              , Images_2: item.Images_2
                //              , IdRequestDetail: item.IdRequestDetail
                //            //▼ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt
                //              //, Approved: item.Approved
                //              //, Duyet: item.Duyet
                //            //, KhongDuyet: item.KhongDuyet
                //            //▲ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                //              , DataFiles1: item.DataFiles1
                //              , DataFiles2: item.DataFiles2
                //        });
                //    })

                //    if (dataimg != '' && dataimg != null && dataimg != undefined && dataimg.length > 0) {
                //        $.each(dataimg, function (cout, element) {
                //            data.append(element.name, element);
                //        });
                //    }
                //    console.log(datareturn1);
                //    console.log(dataimg)

                //    $('#Details').val(JSON.stringify(datareturn1));
                //    $('#DetailsCc').val(JSON.stringify(myDataCc));
                //    data.append("Details", $('#Details').val());
                //    data.append("DetailsCc", $('#DetailsCc').val());
                //    data.append("RequestId", $('#RequestId').val());
                //    data.append("Message", $('#Message').val());
                //    data.append("ImageValidate", $('#ImageValidate').val());
                //    //▼ Add - NghiaTV5 - 16/11/2017 - Loại: 183 - Gọi ajax
                //    $.ajax({
                //        type: "POST",
                //        url: "/Requests/UploadedFileDetailByCol",
                //        contentType: false,
                //        processData: false,
                //        data: data,
                //        success: function (result) {
                //            if (result.error === 0) {
                //                var form = $("form#form-detail");
                //                form.attr("action", "/Requests/ChangeStep");
                //                form.submit();
                //            }
                //            else {
                //                $('#myModalWatting').modal('hide');
                //                XFunction.RenderMessage('error', 'Lưu file không thành công');
                //                return;
                //            }
                //        },
                //        error: function () {
                //            $('#myModalWatting').modal('hide');
                //            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                //            return;

                //        }
                //    });
                //    //▲ Add - NghiaTV5 - 16/11/2017 - Loại: 183 - Gọi ajax
                //}

            });
            // ▲ Delete - NghiaTV5 - 29/01/2018 - Loại: 183 - Gọi ajax
            $btnComplete.on('click', function () {
                var data = new FormData();
                var dataReturn2 = [];

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.IdRequestDetail !== null && item.IdRequestDetail !== undefined && item.IdRequestDetail !== '';
                });

                //▼ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                if (CL.Status == 4) {
                    XFunction.RenderMessage("error", "Lỗi Calllog này đã hoàn tất !:("); return false;
                }
                //▲ Add - NghiaTV5 - 14/12/2017 - CL.Status == 4
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }

                else {
                    //▼ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                    //var dem = 0;
                    //$.each(myData, function (index, item) {
                    //    if (item.Duyet != 1 && item.KhongDuyet != 1) {
                    //        dem++;
                    //    }
                    //    else {
                    //        //alert(item.Duyet)
                    //        if (item.Duyet === 1) {
                    //            item.Approved = 1;
                    //        }
                    //        else {
                    //            item.Approved = 0;
                    //        }
                    //    }
                    //});
                    //if (dem > 0) {
                    //    XFunction.RenderMessage('error', 'Vui lòng chọn <b>"Duyệt"</b> hoặc <b>"Không Duyệt"</b> để hoàn tất !'); return;
                    //}

                    //$.each(myData, function (index, item) {
                    //    if (item.Duyet === 1) {
                    //        item.Approved = 1

                    //    }
                    //    else {
                    //        item.Approved = 0
                    //    }
                    //});
                    //▲ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt
                    var flagCheckImage = 0;
                    $.each(myData, function (index, item) {
                        if (item.Images_1 == '' || item.Images_1 == undefined || item.Images_1 == null || item.Images_2 == '' || item.Images_2 == undefined || item.Images_2 == null) {
                            flagCheckImage++;
                        }
                    })
                    if (flagCheckImage > 0) {
                        XFunction.RenderMessage('error', 'Vui lòng up hình trước khi hoàn tất !'); return;
                    }
                    $.each(myData, function (index, item) {

                        dataReturn2.push({
                            Images_1: item.Images_1
                            , Images_2: item.Images_2
                            , IdRequestDetail: item.IdRequestDetail
                            //▼ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt
                            //, Approved: item.Approved
                            //, Duyet: item.Duyet
                            //, KhongDuyet: item.KhongDuyet
                            //▲ Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                            , DataFiles1: item.DataFiles1
                            , DataFiles2: item.DataFiles2
                        });
                    })
                    if (dataimg != '' && dataimg != null && dataimg != undefined && dataimg.length > 0) {
                        $.each(dataimg, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    //▼ Edit - NghiaTV5 - 17/11/2017 - Chỉnh sửa submit 183
                    $('#Details').val(JSON.stringify(dataReturn2));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));

                    //▼ Add - NghiaTV5 - 29/01/2018 - Loại: 183 - Gọi ajax
                    data.append("Details", $('#Details').val());
                    data.append("DetailsCc", $('#DetailsCc').val());
                    data.append("RequestId", $('#RequestId').val());
                    data.append("Message", $('#Message').val());
                    data.append("ImageValidate", $('#ImageValidate').val());
                    console.log(dataimg)
                    $.ajax({
                        type: "POST",
                        url: "/Requests/UploadedFileDetailByCol",
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            if (result.error === 0) {
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Complete");
                                form.submit();
                            }
                            else {
                                $('#myModalWatting').modal('hide');
                                XFunction.RenderMessage('error', 'Lưu file không thành công');
                                return;
                            }
                        },
                        error: function () {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                            return;
                        }
                    });
                    //▲ Add - NghiaTV5 - 29/01/2018 - Loại: 183 - Gọi ajax
                    //▲ Edit - NghiaTV5 - 17/11/2017 - Chỉnh sửa submit 183
                };
            });//hoàn tất 
            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });
        });
    };
    //▲ Add - NghiaTV5 - 11/11/2017 - Duyệt lỗi thẩm mỹ 183 úp v1

    //▼ Add - TrungNC3 - 28/12/2017 -  Xác nhận truy thu từ calllog hành chinh
    function contruct_185() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            console.log(respone);
            var dataHandsontable = [];
            dataHandsontable = respone;
            $.each(dataHandsontable, function (index, item) {
                if (item.Money1 === '' || item.Money1 === null || item.Money1 === undefined) {
                    item.Money1 = 'Toàn bộ lương';
                }
            });
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var shopOrOffice = '';
            dataHandsontable[0]['WarehouseName'] != null ? shopOrOffice = 'WarehouseName' : shopOrOffice = 'OrganizationHierachyName';
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            //Add - NgoanHT - 30/05/2018 - Loại: 185 - Thêm trạng thái            
            var checkStatus = false;
            if (CL.Status == 4) {
                checkStatus = true;
            }
            else {
                checkStatus = !permisstion.isSender;
            }
            //Add - NgoanHT - 30/05/2018 - Loại: 185 - Thêm trạng thái          //▼ Add - NgoanHT - 22/05/2018 - Loại: 185 - sửa vị trí cột
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    startCols: 9,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 5,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Shop', 'Nhân viên', 'Tháng giữ lương', 'Năm giữ lương', 'Xác nhận truy thu của BO', 'Số tiền cần giữ', 'Tổng tiền shop order', 'Số tiền shop vượt', 'Nhóm hàng', 'Hạn mức', 'Hạn mức còn lại'//Add - NgoanHT - 22/05/2018 - Loại: 185 - Xóa cột
                        //'Lý do giữ lương', 'Giải trình'
                    ],
                    columns: [
                        { data: 'WarehouseName', type: 'text', width: 300, readOnly: true },
                        { data: 'EmployeeName', type: 'text', width: 250, readOnly: true },
                        { data: 'Quantity', type: 'text', width: 150, readOnly: true, },
                        { data: 'Quantity1', type: 'text', width: 150, readOnly: true, },
                        { data: 'XacNhanTruyThuBO', className: "htRight", type: 'numeric', format: '0,00', readOnly: checkStatus },//Add - NgoanHT - 30/05/2018 - Loại: 185 - Thêm trạng thái
                        { data: 'SoTienCanGiu', className: "htRight", type: 'numeric', format: '0,00', readOnly: true },
                        { data: 'Money4', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'Money3', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'TenNhom', className: "htLeft", type: 'text', width: 150, readOnly: true },
                        { data: 'Property11', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'Property12', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        //{ data: 'Note', type: 'text', width: 500, readOnly: true },
                        //{ data: "button", renderer: actionRenderer }
                    ],
                };
            };
            var setting1 = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    startCols: 10,
                    minSpareCols: 10,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 5,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ['Shop', 'Nhân viên', 'Tháng giữ lương', 'Năm giữ lương', 'Xác nhận truy thu của BO', 'Số tiền cần giữ', 'Số tiền thực thu', 'Tổng tiền shop order', 'Số tiền shop vượt', 'Nhóm hàng', 'Hạn mức', 'Hạn mức còn lại'//Add - NgoanHT - 21/05/2018 - Loại: 185 - Thêm cột //Edit - NgoanHT - 21/05/2018 - Loại: 185 - sửa tên cột
                        //'Lý do giữ lương', 'Giải trình'
                    ],
                    columns: [
                        { data: 'WarehouseName', type: 'text', width: 300, readOnly: true },
                        { data: 'EmployeeName', type: 'text', width: 250, readOnly: true },
                        { data: 'Quantity', type: 'text', width: 150, readOnly: true, },
                        { data: 'Quantity1', type: 'text', width: 150, readOnly: true, },
                        { data: 'XacNhanTruyThuBO', className: "htRight", type: 'numeric', format: '0,00', readOnly: true },
                        { data: 'SoTienCanGiu', className: "htRight", type: 'numeric', format: '0,00', readOnly: true },
                        { data: 'Money2', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'Money4', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'Money3', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'TenNhom', className: "htLeft", type: 'text', width: 150, readOnly: true },
                        { data: 'Property11', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        { data: 'Property12', className: "htRight", type: 'numeric', width: 150, format: '0,00', readOnly: true },
                        //{ data: 'Note', type: 'text', width: 500, readOnly: true },
                        //{ data: "button", renderer: actionRenderer }
                    ],
                };
            };
            //▲ Add - NgoanHT - 22/05/2018 - Loại: 185 - sửa vị trí cột

            if (respone[0].Quantity2 !== '' && respone[0].Quantity2 !== null && respone[0].Quantity2 != undefined && respone[0].Quantity2 === 2) {
                hot = new Handsontable(container, setting1());
            }
            else {
                hot = new Handsontable(container, setting());
            }

            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');

                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }

                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });

            });
            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                }
                else {

                    if (myData.length == 0) {
                        XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                    }

                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                };
            });
            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    }; // giữ lương
    //▲ Add - TrungNC3 - 28/12/2017 -  Xác nhận truy thu từ calllog hành chinh

    //▼ Edit - PhiN - 2017.12.08 - Thêm loại 186 - claim subsidy
    function contruct_186() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {

            var dataHandsontable = [];
            dataHandsontable = respone;
            console.log(dataHandsontable);
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isOldAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isOldAssiner = true;
            });
            //▲ Edit  - PhiN - 27 / 12 / 2017 - edit hien thi==================================================
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    maxCols: 11,
                    minCols: 11,
                    startCols: 10,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 5,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 6,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 10,
                    //viewportRowRenderingOffset : 'auto',
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders:
                        [
                            "Chọn nhà mạng",
                            "Phân loại vấn đề",
                            "Lý do",
                            "Loại lí do khác",
                            "Thông tin KH",
                            "SĐT liên hệ",
                            "SĐT đăng kí SSD",
                            "Địa chỉ KH",
                            "Tỉnh",
                            "Nội dung chi tiết"
                        ],
                    columns:
                        [
                            { data: "Provider", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "Problem", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "Reason", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "orderReasons", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "CustInfo", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "PhoneContact", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "PhoneSubsidy", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            //{ data: "PhoneRegister", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "CustAddress", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "City", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                            { data: "Content", type: 'text', className: 'htLeft', width: 200, readOnly: true }
                        ]
                };

            };

            hot = new Handsontable(container, setting());
            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var dataReturn = [];
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                $.each(myData, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Property1: item.Provider,
                        Property2: item.Problem,
                        Property3: item.Reason,
                        Property11: item.orderReasons,
                        Property4: item.CustInfo,
                        Property5: item.PhoneContact,
                        Property6: item.PhoneSubsidy,
                        //Property7: item.PhoneRegister,
                        Property7: item.CustAddress,
                        Property8: item.City,
                        Property9: item.Content,

                    });
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();

            });

            //$btnReply.on('click', function () {
            //    XFunction.RenderMessage("error", "Loại này không định nghĩa nút trả lời"); return false;
            //});

            //$btnChangeStep.on('click', function () {

            //    var myDataCc = hotCc === undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
            //        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
            //    });
            //    $('#Details').val(JSON.stringify(''));
            //    $('#DetailsCc').val(JSON.stringify(myDataCc));
            //    var form = $("form#form-detail");
            //    form.attr("action", "/Requests/ChangeStep");
            //    form.submit();

            //});

            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                var dataReturn = [];
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                $.each(myData, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Property1: item.Provider,
                        Property2: item.Problem,
                        Property3: item.Reason,
                        Property11: item.orderReasons,
                        Property4: item.CustInfo,
                        Property5: item.PhoneContact,
                        Property6: item.PhoneSubsidy,
                        //Property7: item.PhoneRegister,
                        Property7: item.CustAddress,
                        Property8: item.City,
                        Property9: item.Content,
                    });
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
            $btnReply.on('click', function () {
                $('#MessageNoiDungOutSide').html('');
                $("#MessageNoiDungOutSide").attr("placeholder", "Nhập nội dung gửi cho đối tác Subsidy trên Calllog Outside");
                $('#modalNoiDungOutSide').modal('show');

            });
            $('#btnSendOutSide').on('click', function () {

                var messageOutSide = $('#MessageNoiDungOutSide').val();
                if (messageOutSide === null || messageOutSide === '' || messageOutSide === undefined || messageOutSide.trim().length == 0) {
                    XFunction.RenderMessage("error", "Gui sang outside phải nhập tin nhắn "); return;
                }
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();

                var dataReturn = [];
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                $.each(myData, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        Property1: item.Provider,
                        Property2: item.Problem,
                        Property3: item.Reason,
                        Property11: item.orderReasons,
                        Property4: item.CustInfo,
                        Property5: item.PhoneContact,
                        Property6: item.PhoneSubsidy,
                        //Property7: item.PhoneRegister,
                        Property7: item.CustAddress,
                        Property8: item.City,
                        Property9: item.Content,
                    });
                });
                $('#MessageNoiDungOutSideHidden').val(messageOutSide);
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/SendPartner");
                form.submit();
            });
        });
        //▲ Edit  - PhiN - 27 / 12 / 2017 - edit hien thi==================================================
    };
    //▲ Add - =======================================
    //▼ Add - NghiaTV5 - 08/01/2018 - 188 - bổ sung
    function contruct_188() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            //▼ Edit - NghiaTV5 - 6/12/2017 - 165 - RSM xác nhận bước 2
            if (CL.StepNo == 1) {
                $('#hd188_RSMSPMoi').show();
            }
            if (CL.StepNo == 2) {
                $('#hd45_SPMoi').show();
            }
            if (CL.StepNo == 3) {
                $('#hd45_SPMoi').show();
                $('#hd188_RSMSPMoi').show();
                $('input[name=ConfirmReplaceProduct_45]').attr("disabled", true);
                $('input[name=ConfirmReplaceProduct_188]').attr("disabled", true);
            }
            if (respone[0].CfReplaceProduct188 == 'Duyệt')
                jQuery.uniform.update(jQuery("#received_188").prop('checked', true));
            else if (respone[0].CfReplaceProduct188 == 'Không duyệt')
                jQuery.uniform.update(jQuery("#notReceived_188").prop('checked', true));

            if (respone[0].CfReplaceProduct == 'Đã nhận')
                jQuery.uniform.update(jQuery("#received_45").prop('checked', true));
            else if (respone[0].CfReplaceProduct == 'Chưa nhận')
                jQuery.uniform.update(jQuery("#notReceived_45").prop('checked', true));

            //▲ Edit - NghiaTV5 - 6/12/2017 - 165 - RSM xác nhận bước 2
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        [


                            'Chọn loại cấp ',// Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1
                            'Tên Shop',
                            'Hệ thống',
                            'Mã sản phẩm cấp mới',
                            'Tên sản phẩm cấp mới',
                            'Số lượng',
                        ],
                    columns: [
                        //▼ Edit - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v2
                        { data: "LoaiCap", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "ShopName", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "SystemName", type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductCode', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Quantity", type: 'text', className: 'htLeft', readOnly: true, },
                        //▲ Edit - NghiaTV5 - 1/12/2017 - 165 - Thêm mới v2
                    ],

                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            if (!check)
                $('input[name=ConfirmReplaceProduct_45]').attr("disabled", true);

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var datareturn = [];
                if (CL.StepNo == 1) {
                    var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_188]:checked").val();// Edit - NghiaTV5 - 4/01/2018 - 165 - RSM CL.StepNo == 1
                    if (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined) {
                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của RSM nhận sản phẩm đổi mới/thay thế của IT."); return;
                    }
                    if (cfReceiveSPMoi != null || cfReceiveSPMoi != undefined || cfReceiveSPMoi != '') {
                        datareturn.push({
                            CfReplaceProduct: cfReceiveSPMoi
                        });
                    }
                }
                else if (CL.StepNo == 2) {
                    var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_45]:checked").val();// Edit - NghiaTV5 - 4/01/2018 - 165 - SM/PSM CL.StepNo == 2
                    if (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined) {
                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của RSM nhận sản phẩm đổi mới/thay thế của IT."); return;
                    }
                    if (cfReceiveSPMoi != null || cfReceiveSPMoi != undefined || cfReceiveSPMoi != '') {
                        datareturn.push({
                            cfReceiveSPMoi188: cfReceiveSPMoi
                        });
                    }
                }
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                //▼ Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1
                //▼ Add - NghiaTV5 - 30/11/2017 - 165 - Check Rỗng 
                var Rong = [];
                $.grep(hot.getData(), function (item, index) {
                    if (item.ProductCode == null || item.ShopCode == null || item.SystemCode == null || item.LoaiCap == null) {
                        Rong.push((index + 1));
                    }
                });
                if (Rong.length > 0) {
                    XFunction.RenderMessage("error", 'Vui lòng chọn đầy đủ dữ liệu trên lưới chi tiết vui lòng xem lại dòng ' + Rong.join(',') + ' !'); return;
                    return false;
                }
                //▲ Add - NghiaTV5 - 30/11/2017 - 165 - Check Rỗng
                $.each(hot.getData(), function (index, item) {
                    item.LoaiCap == "Cấp mới" ? item.LoaiCap = 1 : item.LoaiCap = 2
                    if (item.ProductCode !== null && item.ShopCode !== null && item.SystemCode !== null) {
                        datareturn.push(item);
                    }
                })
                //▲ Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnChangeStep.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var datareturn = [];
                if (CL.StepNo == 1) {
                    var cfReceiveSPMoi = jQuery("input:radio[name=ConfirmReplaceProduct_188]:checked").val();

                    if (cfReceiveSPMoi == '' || cfReceiveSPMoi == null || cfReceiveSPMoi == undefined) {
                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận RSM sản phẩm đổi mới/thay thế của IT."); return;
                    }
                    if (cfReceiveSPMoi != null || cfReceiveSPMoi != undefined || cfReceiveSPMoi != '') {
                        datareturn.push({
                            cfReceiveSPMoi: cfReceiveSPMoi
                        });
                    }
                }
                else if (CL.StepNo == 2) {
                    var cfReceiveSPMoi45 = jQuery("input:radio[name=ConfirmReplaceProduct_45]:checked").val();// Edit - NghiaTV5 - 4/01/2018 - 165 - SM/PSM CL.StepNo == 2
                    if (cfReceiveSPMoi45 == '' || cfReceiveSPMoi45 == null || cfReceiveSPMoi45 == undefined) {
                        XFunction.RenderMessage("error", "Vui lòng chọn Xác nhận của SM/PSM nhận sản phẩm đổi mới/thay thế của IT."); return;// Edit - NghiaTV5 - 4/01/2018 - 165 - SM/PSM CL.StepNo == 2
                    }
                    if (cfReceiveSPMoi45 == 'Chưa nhận') {
                        XFunction.RenderMessage("error", "Không thể chuyển bước khi xác nhận là chưa nhận!"); return;
                    }
                    if (cfReceiveSPMoi45 != null || cfReceiveSPMoi45 != undefined || cfReceiveSPMoi45 != '') {
                        datareturn.push({
                            cfReceiveSPMoi45: cfReceiveSPMoi45
                        });
                    }
                }
                //▼ Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1
                //▼ Add - NghiaTV5 - 30/11/2017 - 165 - Check Rỗng 
                var Rong = [];
                $.grep(hot.getData(), function (item, index) {
                    if (item.ProductCode == null || item.ShopCode == null || item.SystemCode == null || item.LoaiCap == null) {
                        Rong.push((index + 1));
                    }
                });
                if (Rong.length > 0) {
                    XFunction.RenderMessage("error", 'Vui lòng chọn đầy đủ dữ liệu trên lưới chi tiết vui lòng xem lại dòng ' + Rong.join(',') + ' !'); return;
                    return false;
                }
                //▲ Add - NghiaTV5 - 30/11/2017 - 165 - Check Rỗng
                $.each(hot.getData(), function (index, item) {
                    item.LoaiCap == "Cấp mới" ? item.LoaiCap = 1 : item.LoaiCap = 2
                    if (item.ProductCode !== null && item.ShopCode !== null && item.SystemCode !== null) {
                        datareturn.push(item);
                    }
                })
                //▲ Add - NghiaTV5 - 30/11/2017 - 165 - Thêm mới v1

                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();


            });

        });
    };
    //▲ Add - NghiaTV5 - 08/01/2018 - 188 - bổ sung

    //▼ Add - NgoanHT - 20/03/2018 - Loại: 189 - Thêm loại 189
    function contruct_189() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            var l_Data_Handsontable = p_Response;
            var R_data_Handsontable = p_Response;

            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });

            $.each(R_data_Handsontable, function (index, item2) {
                var arrColHTML_2 = item2.Uri_String_matbang != null ? item2.Uri_String_matbang.split(',') : '';
                var ColHtmlArray_2 = [];
                var ListNameFileArray = [];
                $.each(arrColHTML_2, function (index, item1) {
                    ColHtmlArray_2.push('<div class="ULH"><a href="' + item1 + '" target="_blank" class="renderlink" data-id="' + item2.IDRD + '" data-value="' + item1.split('/')[3] + '"><img class="IMG" src="' + item1 + '" height="42" width="42"></a></div>')// Edit - NgoanHT - 21/11/2017 - Loại: 181 - Sửa
                    ListNameFileArray.push(item1.split('/')[3])
                });

                item2.ColHtmlArray_2 = ColHtmlArray_2;
                item2.ColHtml_2 = item2.ColHtmlArray_2.join(' ');
            })
            $.each(l_Data_Handsontable, function (index, item) {
                var arrColHTML = item.Uri_String_mattien != null ? item.Uri_String_mattien.split(',') : '';
                var ColHtmlArray = [];
                var ListNameFileArray = [];
                $.each(arrColHTML, function (index, item1) {
                    ColHtmlArray.push('<div class="ULH"><a href="' + item1 + '" target="_blank" class="renderlink" data-id="' + item.IDRD + '" data-value="' + item1.split('/')[3] + '"><img class="IMG" src="' + item1 + '" height="42" width="42"></a></div>')// Edit - NgoanHT - 21/11/2017 - Loại: 181 - Sửa
                    ListNameFileArray.push(item1.split('/')[3])
                });

                item.ColHtmlArray = ColHtmlArray;
                item.ColHtml = item.ColHtmlArray.join(' ');
            })
            var LoaiYeuCau = [];
            DeleteIMG = function (data) {
                var NameIMG = $(data).context.dataset.lisdatafilesname;
                var indexL = $(data).context.dataset.id;
                var Check = $(data).context.dataset.check;
                var indexDelete = [];
                var checkhl = true;
                if (Check == 'CTT') {

                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFiles !== null && item.DataFiles !== '' && item.DataFiles !== undefined && index == indexL)
                            $.each(item.DataFiles, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index);
                                }

                            });
                    })
                    $.each(hot.getSettings().data, function (index, item1) {
                        if (index == indexL) {
                            if (item1.DataFiles.length <= 1) {
                                checkhl = false
                            }
                            else {
                                $.each(indexDelete, function (index, item) {
                                    item1.DataFiles.splice(item.toString(), 1);
                                    item1.ColHtmlArray.splice(item.toString(), 1);
                                    item1.ListNameFileArray.splice(item.toString(), 1);
                                    item1.ColHtml = item1.ColHtmlArray.join(' ');
                                    item1.ListNameFile = item1.ListNameFileArray.join(',');
                                })
                            }
                        }
                    });
                }
                else {
                    $.each(l_Data_Handsontable, function (index, item) {
                        if (item.IDRD == indexL) {
                            if (item.ListNameFileArray.length <= 1) {
                                checkhl = false
                            }
                            else {
                                $.each(item.ListNameFileArray, function (index, item) {
                                    if (item == NameIMG) {
                                        indexDelete.push(index);
                                    }
                                })
                                $.each(indexDelete, function (index, item1) {
                                    item.ListNameFileArray.splice(item1.toString(), 1);
                                    item.ListNameFile = item.ListNameFileArray.join(',');
                                    item.ColHtmlArray.splice(item1.toString(), 1);
                                    item.ColHtml = item.ColHtmlArray.join(' ');
                                })
                            }
                        }
                    })
                }
                if (checkhl == false) {
                    XFunction.RenderMessage('error', '"Hình ảnh đính kèm" không thể trống !'); return;
                }
                else {
                    $(data).parent().remove();
                }
            }

            var actionRendererUpload = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'upHinhLayoutMattien') {
                    var valid = instance.getDataAtRowProp(row, 'LoaiYeuCau');
                    var $button = '';
                    if (valid === null || valid === '' || valid === undefined) {
                        $button = '';
                    } else {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:green"></i>');//Edit - NgoanHT - 23/11/2017 - Loại: 181 - Sửa lại icon
                        $button.click(function () {
                            if ((CL.StepNo == 2 || CL.StepNo == 4) && permisstion.isAssiner == true) {
                                var row = $(this).attr('data-value');
                                $('#uploadDetails').attr('data-value', row).attr('data-id', 'upHinhLayoutMattien');
                                $('#uploadDetails').val('');
                                $('#uploadDetails').trigger('click');
                            }
                            else {
                                XFunction.RenderMessage("error", "Bạn không có quyền thay đổi hình Layout mặt tiền"); //NgoanHT - 21/03/2018 - sửa câu thông báo
                            };
                        });
                    }
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                } else {
                    $(td).empty().append('');
                }
            };
            var actionRendererUpload_2 = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'upHinhLayoutMatBang') {
                    var valid = instance.getDataAtRowProp(row, 'LoaiYeuCau');
                    var $button = '';
                    if (valid === null || valid === '' || valid === undefined) {
                        $button = '';
                    } else {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:green"></i>');//Edit - NgoanHT - 23/11/2017 - Loại: 181 - Sửa lại icon
                        $button.click(function () {
                            if ((CL.StepNo == 2 || CL.StepNo == 4) && permisstion.isAssiner == true) {
                                var row = $(this).attr('data-value');
                                $('#uploadDetails').attr('data-value', row).attr('data-id', 'upHinhLayoutMatBang');
                                $('#uploadDetails').val('');
                                $('#uploadDetails').trigger('click');
                            }
                            else {
                                XFunction.RenderMessage("error", "Bạn không có quyền thay đổi hình Layout mặt bằng");//NgoanHT - 21/03/2018 - sửa câu thông báo
                            };
                        });
                    }
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                } else {
                    $(td).empty().append('');
                }
            };

            var actionRendererCheckMediaDanhGiaLayout = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'MediaDanhGiaLayout') { //Sim đã phát sinh tiêu dùng/ Sim chưa phát sinh tiêu dùng
                    var $CheckDY = '';
                    $CheckDY = $('<div class="rows" style="display: inline-block;width: 100%;"><div class="checkbox" style="width: 49%;float: left;"><label><input style="min-height: inherit;" name="Co" id="Co" type="checkbox" value="1">Đạt</label></div><div class="checkbox" style="width: 49%;float: right;margin-top: 10px;"><label><input style="min-height: inherit;" name="Khong" id="Khong" type="checkbox" value="0">Không Đạt</label></div></div>');
                    $(td).empty().append($CheckDY).append($CheckDY)
                    console.log(1, l_Data_Handsontable)
                    if (l_Data_Handsontable[0].MediaDanhGiaLayout == 1) {
                        $("#Co").prop("checked", true);
                        $("#Khong").prop("checked", false);
                    }
                    else if (l_Data_Handsontable[0].MediaDanhGiaLayout == 0) {
                        $("#Co").prop("checked", false);
                        $("#Khong").prop("checked", true);
                    }
                    $("#Co").click(function () {
                        if (l_Data_Handsontable[0].Status == 4) {
                            XFunction.RenderMessage("error", "Call Log đã hoàn tất, không được chọn lại"); return false
                        }
                        if (CL.StepNo != 2 || permisstion.isAssiner == false) {
                            XFunction.RenderMessage("error", "Bạn không có quyền thay đổi"); return false//NgoanHT - 21/03/2018 - sửa câu thông báo
                        }

                        if (document.getElementById("Co").checked == true) {
                            $("#Khong").prop("checked", false);
                            l_Data_Handsontable[0].MediaDanhGiaLayout = 1;
                        }
                        else {
                            $("#Khong").prop("checked", true);
                            l_Data_Handsontable[0].MediaDanhGiaLayout = 0;
                        }
                    });
                    $("#Khong").click(function () {
                        if (l_Data_Handsontable[0].Status == 4) {
                            XFunction.RenderMessage("error", "Call Log đã hoàn tất, không được chọn lại"); return false
                        }
                        if (CL.StepNo != 2 || permisstion.isAssiner == false) {
                            XFunction.RenderMessage("error", "Bạn không có quyền thay đổi"); return false//NgoanHT - 21/03/2018 - sửa câu thông báo
                        }

                        if (document.getElementById("Khong").checked == true) {
                            $("#Co").prop("checked", false);
                            l_Data_Handsontable[0].MediaDanhGiaLayout = 0;
                        }
                        else {
                            $("#Co").prop("checked", true);
                            l_Data_Handsontable[0].MediaDanhGiaLayout = 1;
                        }
                    });
                } else {
                    $(td).empty().append('');
                }
            };
            var actionRendererCheckShopXacNhanLayout = function (instance, td, row, col, prop, value, cellProperties) {

                if (prop == 'ShopXacNhanLayout') {
                    var $CheckDY = '';
                    $CheckDY = $('<div class="rows" style="display: inline-block;width: 100%;"><div class="checkbox" style="width: 49%;float: left;"><label><input style="min-height: inherit;" name="Chuan" id="Chuan" type="checkbox" value="1">Chuẩn</label></div><div class="checkbox" style="width: 49%;float: right;margin-top: 10px;"><label><input style="min-height: inherit;" name="KhongChuan" id="KhongChuan" type="checkbox" value="0">Không Chuẩn</label></div></div>');
                    $(td).empty().append($CheckDY).append($CheckDY)
                    if (l_Data_Handsontable[0].ShopXacNhanLayout == 1) {
                        $("#Chuan").prop("checked", true);
                        $("#KhongChuan").prop("checked", false);
                    }
                    else if (l_Data_Handsontable[0].ShopXacNhanLayout == 0) {
                        $("#Chuan").prop("checked", false);
                        $("#KhongChuan").prop("checked", true);
                    }
                    $("#Chuan").click(function () {
                        if (l_Data_Handsontable[0].Status == 4) {
                            XFunction.RenderMessage("error", "Call Log đã hoàn tất, không được chọn lại"); return false
                        }
                        if (CL.StepNo != 5 || permisstion.isAssiner == false) {
                            XFunction.RenderMessage("error", "Bạn không có quyền thay đổi"); return false//NgoanHT - 21/03/2018 - sửa câu thông báo
                        }

                        if (document.getElementById("Chuan").checked == true) {
                            $("#KhongChuan").prop("checked", false);
                            l_Data_Handsontable[0].ShopXacNhanLayout = 1;
                        }
                        else {
                            $("#KhongChuan").prop("checked", true);
                            l_Data_Handsontable[0].ShopXacNhanLayout = 0;
                        }
                    });
                    $("#KhongChuan").click(function () {
                        if (l_Data_Handsontable[0].Status == 4) {
                            XFunction.RenderMessage("error", "Call Log đã hoàn tất, không được chọn lại"); return false
                        }
                        if (CL.StepNo != 5 || permisstion.isAssiner == false) {
                            XFunction.RenderMessage("error", "Bạn không có quyền thay đổi"); return false//NgoanHT - 21/03/2018 - sửa câu thông báo
                        }

                        if (document.getElementById("KhongChuan").checked == true) {
                            $("#Chuan").prop("checked", false);
                            l_Data_Handsontable[0].ShopXacNhanLayout = 0;
                        }
                        else {
                            $("#Chuan").prop("checked", true);
                            l_Data_Handsontable[0].ShopXacNhanLayout = 1;
                        }
                    });
                } else {
                    $(td).empty().append('');
                }
            };

            function readURL(input) {
                var tmppath = URL.createObjectURL(input);
                var win = window.open(tmppath, '_blank');
                if (win) {
                    win.focus();
                } else {
                    alert('Please allow popups for this site');
                }
            }
            function endFile(name) {
                var extension = name.split('.').pop().toLowerCase();
                if ($.inArray(extension, ['jpg', 'png', 'gif', 'jpeg']) == -1) {
                    return false;
                }
                else {
                    return true;
                }
            }

            $('#uploadDetails').on('change', function () {
                var rowline = $(this).attr('data-value');
                var rowCol = $(this).attr('data-id');
                var selectedFiles = $(this)[0].files;
                $.each(l_Data_Handsontable, function (index, item) {
                    if (rowline == index) {
                        var dataFiles = [];
                        var listHtml = [];
                        var lisDataFilesName = [];
                        $.each(selectedFiles, function (index, item) {

                            var d = new Date();
                            var n = d.getTime();
                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;

                            dataFiles.push(selectedFiles[index]);
                            lisDataFilesName.push(selectedFiles[index].nameNew);
                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                            if (endFile(selectedFiles[index].nameNew)) {
                                listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a></div>');// Edit - NgoanHT - 21/11/2017 - Loại: 181 - Sửa
                            }
                        });
                        if (rowCol === 'upHinhLayoutMattien') {
                            item.DataFiles = dataFiles;
                            item.ColHtmlArray = listHtml;
                            item.ListNameFileArray = lisDataFilesName;
                            item.ColHtml = listHtml.join(' ');
                            item.ListNameFile = lisDataFilesName.join(',');
                        }
                        else if (rowCol === 'upHinhLayoutMatBang') {
                            item.DataFiles_2 = dataFiles;
                            item.ColHtmlArray_2 = listHtml;
                            item.ListNameFileArray_2 = lisDataFilesName;
                            item.ColHtml_2 = listHtml.join(' ');
                            item.ListNameFile_2 = lisDataFilesName.join(',');
                        }
                    }
                });
                hot.render();
                $(this).val('');
            });
            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                td.innerHTML = escaped;
                td.style.textAlign = 'left';
                return td;
            }
            var l_Setting = function () {
                return {
                    data: l_Data_Handsontable,
                    data: R_data_Handsontable,
                    colHeaders: true,
                    rowHeaders: true,
                    currentColClassName: 'currentCol',
                    currentRowClassName: 'currentRow',
                    disableVisualSelection: true,
                    hiddenColumns: {
                        columns: [7, 8]
                    },
                    colHeaders:
                        [
                            "Tên shop",
                            "Loại yêu cầu ",
                            "Thông tin thay đổi Layout",
                            "Upload hình Layout mặt tiền",
                            "Hình Layout mặt tiền",
                            "Upload hình Layout mặt bằng",
                            "Hình Layout mặt bằng",
                            "Media đánh giá Layout hoàn công đạt chuẩn",
                            "Shop xác nhận Layout chuẩn thực tế"
                        ],
                    columns: [
                        { data: "TenShop", type: 'text', className: 'htLeft', width: 150, readOnly: true },
                        { data: "LoaiYeuCau", type: 'text', className: 'htLeft', width: 150, readOnly: true },
                        { data: "ThongTinThayDoi", type: 'text', className: 'htLeft', width: 200, readOnly: false },
                        { data: "upHinhLayoutMattien", type: 'text', editor: false, renderer: actionRendererUpload, className: 'htLeft', width: 50 },
                        { data: "ColHtml", editor: false, type: 'text', className: 'htLeft', renderer: safeHtmlRenderer, width: 150 },
                        { data: "upHinhLayoutMatBang", type: 'text', editor: false, renderer: actionRendererUpload_2, className: 'htLeft', width: 50 },
                        { data: "ColHtml_2", editor: false, type: 'text', className: 'htLeft', renderer: safeHtmlRenderer, width: 150 },
                        { data: "MediaDanhGiaLayout", renderer: actionRendererCheckMediaDanhGiaLayout, type: 'text', className: 'htLeft', width: 280, readOnly: true },
                        { data: "ShopXacNhanLayout", renderer: actionRendererCheckShopXacNhanLayout, type: 'text', className: 'htLeft', width: 280, readOnly: true }
                    ],
                };
            };
            hot = new Handsontable(container, l_Setting());

            hot.selectCell(0, 0, 0, 0);
            var plugin = hot.getPlugin('hiddenColumns');
            if (CL.StepNo > 1) {
                plugin.showColumn(7);
            }
            if (CL.StepNo == 5) {
                plugin.showColumn(8);
            }
            hot.render();
            $btnComment.on('click', function () {

                var dataReturn = [];
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#myModal').modal('show');
                var myData = hot.getData() == undefined ? [] : hot.getData();

                $.each(myData, function (index, item) {
                    dataReturn.push({
                        Title: $('#titleX').text(),
                        Id: 0,
                        RequestDId: item.IDRD,
                        RequestId: item.Id,
                        MaShop: item.MaShop,
                        TenShop: item.TenShop,
                        TenYeuCau: item.TenYeuCau,
                        TenLoaiYeuCau: item.LoaiYeuCau,
                        ThongTinThayDoi: item.ThongTinThayDoi,
                        ThoiGianHienThi: item.ThoiGianHienThi,
                        ListNameFile: item.ListNameFile,
                        ListNameFile_2: item.ListNameFile_2,
                        CoVanDe: 0
                    });
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });

            $btnComplete.on('click', function () {
                var myData = hot.getSettings().data == undefined ? [] : hot.getSettings().data;
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }

                if (myData[0].ThongTinThayDoi == null || myData[0].ThongTinThayDoi == '' || myData[0].ThongTinThayDoi == undefined) {
                    XFunction.RenderMessage("error", "Vui lòng nhập thông tin thay đổi"); return false;
                }

                if (CL.StepNo == 5 && (myData[0].ShopXacNhanLayout === -1 || myData[0].ShopXacNhanLayout === null || myData[0].ShopXacNhanLayout === '' || myData[0].ShopXacNhanLayout === undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng xác nhận Layout chuẩn thực tế"); return false;
                }

                var data = new FormData();
                var dataReturn = [];
                $('#myModal').modal('show');
                $.each(myData, function (index, item) {
                    dataReturn.push({
                        RequestDId: item.IDRD,
                        Id: item.Id,
                        ListNameFile: item.ListNameFile,
                        ListNameFile_2: item.ListNameFile_2,
                        ThongTinThayDoi: item.ThongTinThayDoi,
                        MediaDanhGiaLayout: item.MediaDanhGiaLayout,
                        ShopXacNhanLayout: item.ShopXacNhanLayout
                    });
                    if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                        $.each(item.DataFiles, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    if (item.DataFiles_2 !== '' && item.DataFiles_2 !== null && item.DataFiles_2 !== undefined && item.DataFiles_2.length > 0) {
                        $.each(item.DataFiles_2, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                });
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                data.append("Details", $('#Details').val());
                data.append("DetailsCc", $('#DetailsCc').val());
                data.append("RequestId", $('#RequestId').val());
                data.append("Message", $('#Message').val());
                data.append("ImageValidate", $('#ImageValidate').val());

                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetailMultipleCol",
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        if (result.error === 0) {
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Complete");
                            form.submit();
                        }
                        else {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                            return;
                        }
                    },
                    error: function () {
                        $('#myModalWatting').modal('hide');
                        XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                        return;
                    }
                });
            });

            $btnChangeStep.on('click', function () {
                var myData = hot.getSettings().data == undefined ? [] : hot.getSettings().data;
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                var dem = 0;
                $.each(myData, function (index, item) {
                    if ((item.DataFiles == null || item.DataFiles == undefined || item.DataFiles == '' ||
                        item.DataFiles_2 == null || item.DataFiles_2 == undefined || item.DataFiles_2 == '') && (item.StepNo == 2 || item.StepNo == 4))
                        dem++;
                });
                if (dem > 0) {
                    XFunction.RenderMessage("error", "Vui lòng upload đầy đủ hình Layout mặt tiền và Layout mặt bằng!"); return false;//NgoanHT - 21/03/2018 - sửa câu thông báo
                }

                if (myData[0].ThongTinThayDoi == null || myData[0].ThongTinThayDoi == '' || myData[0].ThongTinThayDoi == undefined) {
                    XFunction.RenderMessage("error", "Vui lòng nhập thông tin thay đổi"); return false; // Edit - ThuongNM2 - 2018/10/02 Sai chính tả.
                }

                if (CL.StepNo == 2 && (myData[0].MediaDanhGiaLayout === -1 || myData[0].MediaDanhGiaLayout === null || myData[0].MediaDanhGiaLayout === '' || myData[0].MediaDanhGiaLayout === undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng đánh giá Layout hoàn công đạt chuẩn"); return false;
                }
                if (CL.StepNo == 1 && ($('#fileUpload').val() == '' || $('#fileUpload').val() == null || $('#fileUpload').val() == undefined)) {
                    XFunction.RenderMessage("error", "Vui lòng Upload file hoàn công và bộ ảnh hoàn công lên phần <b>tệp đính kèm<b>"); return false;
                }
                $('#myModal').modal('show');
                var data = new FormData();
                var dataReturn = [];
                $.each(myData, function (index, item) {
                    dataReturn.push({
                        RequestDId: item.IDRD,
                        Id: item.Id,
                        ListNameFile: item.ListNameFile,
                        ListNameFile_2: item.ListNameFile_2,
                        ThongTinThayDoi: item.ThongTinThayDoi,
                        MediaDanhGiaLayout: item.MediaDanhGiaLayout,
                        ShopXacNhanLayout: item.ShopXacNhanLayout
                    });
                    if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                        $.each(item.DataFiles, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    if (item.DataFiles_2 !== '' && item.DataFiles_2 !== null && item.DataFiles_2 !== undefined && item.DataFiles_2.length > 0) {
                        $.each(item.DataFiles_2, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                data.append("Details", $('#Details').val());
                data.append("DetailsCc", $('#DetailsCc').val());
                data.append("RequestId", $('#RequestId').val());
                data.append("Message", $('#Message').val());
                data.append("ImageValidate", $('#ImageValidate').val());

                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetailMultipleCol",
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        if (result.error === 0) {
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/ChangeStep");
                            form.submit();
                        }
                        else {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                            return;
                        }
                    },
                    error: function () {
                        $('#myModalWatting').modal('hide');
                        XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                        return;
                    }
                });
            });
            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });
        });
    };
    //▲ Add - NgoanHT - 20/03/2018 - Loại: 189 - Thêm loại 189

    //▼ Add - PhiN - 09/01/2018 - 191 - Cập nhật Layout shop thông thường
    //▼ Edit - NgoanHT - 29/01/2018 - Loại: 191 - Sửa Loại 191
    function contruct_191() {
        var FunctionDefaultValueEmty = function (p_Value) { // hàm set giá trị checkbox hansontable
            var l_ValueReturn = '';
            if (p_Value == '' || p_Value == null || p_Value == undefined) {
                l_ValueReturn = '';
            } else {
                l_ValueReturn = p_Value;
            }
            if (p_Value instanceof Array) {
                l_ValueReturn = p_Value.length == 0 ? "" : p_Value.join(",");
            }
            return l_ValueReturn;
        }
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            var checkSender = false, checkAssiner = false, checkEditor = true;
            $.each(permissons, function (index, item) {
                if (item == 'sender') {
                    checkSender = true;
                }
                if (item == 'assigner' || item == 'groupAssigner') {
                    checkAssiner = true;
                }

            });
            var CheckThayDoiThongTin = false
            if (CL.Status == 4) {
                CheckThayDoiThongTin = true;

            }
            if (CL.Status < 4 && checkAssiner == true && (CL.StepNo == 2 || CL.StepNo == 4)) // Ass được thay đổi thông tin layout khi CL chưa hoàn tất ở bước 2 4
            {
                checkEditor = false;
            }
            var ReadOnlyApproved = (CL.StepNo > 1 || CL.Status == 4) ? true : false; // CL HT or từ bước 2 không cho tick check box
            var l_Data_Handsontable = p_Response;
            var R_data_Handsontable = p_Response;
            var listimage_Uri_String_matbang = "", listimage_Uri_String_mattien = "", listimage_Uri_String_thucshop = "";
            $.each(R_data_Handsontable, function (index, item2) {
                var arrColHTML_2 = item2.Uri_String_matbang != null ? item2.Uri_String_matbang.split(',') : '';
                var ColHtmlArray_2 = [];
                $.each(arrColHTML_2, function (index, item1) {
                    var l_Url = '';
                    $.ajax({
                        async: false,
                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                        type: "GET",
                        data: { Url: item1 },
                        success: function (p_ActionResult) {
                            l_Url = p_ActionResult;
                        }
                    });
                    ColHtmlArray_2.push('<div class="ULH"><a href="' + l_Url + '" target="_blank" class="renderlink" data-id="' + item2.IDRD + '" data-value="' + l_Url.split('/')[3] + '"><img class="IMG" src="' + l_Url + '" height="42" width="42"></a></div>')// Edit - NgoanHT - 21/11/2017 - Loại: 181 - Sửa
                    listimage_Uri_String_matbang += item1 + ',';
                });

                item2.ColHtmlArray_2 = ColHtmlArray_2;
                item2.ColHtml_2 = item2.ColHtmlArray_2.join(' ');
            })
            $.each(l_Data_Handsontable, function (index, item) {
                //▼ Add - NgoanHT - 09/11/2017 - loại: 181 - Sửa link html
                var arrColHTML = item.Uri_String_mattien != null ? item.Uri_String_mattien.split(',') : '';
                var ColHtmlArray = [];
                $.each(arrColHTML, function (index, item1) {
                    var l_Url = '';
                    $.ajax({
                        async: false,
                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                        type: "GET",
                        data: { Url: item1 },
                        success: function (p_ActionResult) {
                            l_Url = p_ActionResult;
                        }
                    });
                    ColHtmlArray.push('<div class="ULH"><a href="' + l_Url + '" target="_blank" class="renderlink" data-id="' + item.IDRD + '" data-value="' + l_Url.split('/')[3] + '"><img class="IMG" src="' + l_Url + '" height="42" width="42"></a></div>')// Edit - NgoanHT - 21/11/2017 - Loại: 181 - Sửa
                    listimage_Uri_String_mattien += item1 + ',';
                });

                item.ColHtmlArray = ColHtmlArray;
                item.ColHtml = item.ColHtmlArray.join(' ');
            })
            $.each(R_data_Handsontable, function (index, item3) {
                var arrColHTML_3 = item3.Uri_String_thucshop != null ? item3.Uri_String_thucshop.split(',') : '';
                var ColHtmlArray_3 = [];
                $.each(arrColHTML_3, function (index, item1) {

                    var l_Url = '';
                    $.ajax({
                        async: false,
                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                        type: "GET",
                        data: { Url: item1 },
                        success: function (p_ActionResult) {
                            l_Url = p_ActionResult;
                        }
                    });

                    ColHtmlArray_3.push('<div class="ULH"><a href="' + l_Url + '" target="_blank" class="renderlink" data-id="' + item3.IDRD + '" data-value="' + l_Url.split('/')[3] + '"><img class="IMG" src="' + l_Url + '" height="42" width="42"></a></div>')// Edit - NgoanHT - 21/11/2017 - Loại: 181 - Sửa
                    listimage_Uri_String_thucshop += item1 + ',';
                });

                item3.ColHtmlArray_3 = ColHtmlArray_3;
                item3.ColHtml_3 = item3.ColHtmlArray_3.join(' ');
            })
            //$('#titleX').text(Title)
            //▲ =================================================
            var LoaiYeuCau = [];
            DeleteIMG = function (data) {
                var NameIMG = $(data).context.dataset.lisdatafilesname;
                var indexL = $(data).context.dataset.id;
                var Check = $(data).context.dataset.check;
                var indexDelete = [];
                var checkhl = true; //Add - NgoanHT - 03/11/2017 - Loại: 181 - Thêm biến checkhl 
                if (Check == 'CTT') {

                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFiles !== null && item.DataFiles !== '' && item.DataFiles !== undefined && index == indexL)
                            $.each(item.DataFiles, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index);
                                }

                            });
                    })
                    $.each(hot.getSettings().data, function (index, item1) {
                        if (index == indexL) {
                            //▼ Edit - NgoanHT - 03/11/2017 - Loại: 181 - Thêm điều kiện
                            if (item1.DataFiles.length <= 1) {
                                checkhl = false
                            }
                            else {
                                $.each(indexDelete, function (index, item) {
                                    item1.DataFiles.splice(item.toString(), 1);
                                    item1.ColHtmlArray.splice(item.toString(), 1);
                                    item1.ListNameFileArray.splice(item.toString(), 1);
                                    item1.ColHtml = item1.ColHtmlArray.join(' ');
                                    item1.ListNameFile = item1.ListNameFileArray.join(',');
                                })
                            }
                            //▲ Edit - NgoanHT - 03/11/2017 - Loại: 181 - Thêm điều kiện
                        }
                    });
                }
                else {
                    $.each(l_Data_Handsontable, function (index, item) {
                        if (item.IDRD == indexL) {
                            //▼ Edit - NgoanHT - 03/11/2017 - Loại: 181 - Thêm điều kiện
                            if (item.ListNameFileArray.length <= 1) { // Edit - NgoanHT - 06/11/2017 - Loại: 181 - Sửa điều kiện
                                checkhl = false
                            }
                            else {
                                $.each(item.ListNameFileArray, function (index, item) {
                                    if (item == NameIMG) {
                                        indexDelete.push(index);
                                    }
                                })
                                $.each(indexDelete, function (index, item1) {
                                    item.ListNameFileArray.splice(item1.toString(), 1);
                                    item.ListNameFile = item.ListNameFileArray.join(',');
                                    item.ColHtmlArray.splice(item1.toString(), 1);
                                    item.ColHtml = item.ColHtmlArray.join(' ');
                                })
                            }
                        }
                    })
                }
                if (checkhl == false) {
                    XFunction.RenderMessage('error', 'Vui lòng đính kèm hình ảnh mới nhất !'); return;
                }
                else {
                    $(data).parent().remove();
                }
                //▲ Edit - NgoanHT - 03/11/2017 - Loại: 181 - Thêm điều kiện
            }
            var actionRendererUpload = function (instance, td, row, col, prop, value, cellProperties) {

                if (prop == 'upHinhLayoutMattien') {
                    var valid = instance.getDataAtRowProp(row, 'LoaiYeuCau');
                    var $button = '';
                    if (valid === null || valid === '' || valid === undefined) {
                        $button = '';
                    } else {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:green"></i>');//Edit - NgoanHT - 23/11/2017 - Loại: 181 - Sửa lại icon
                        $button.click(function () {
                            var row = $(this).attr('data-value');
                            $('#uploadDetails').attr('data-value', row).attr('data-id', 'upHinhLayoutMattien');
                            $('#uploadDetails').val('');
                            $('#uploadDetails').trigger('click');
                        });
                    }
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                } else {
                    $(td).empty().append('');
                }
            };
            var actionRendererUpload_2 = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'upHinhLayoutMatBang') {
                    var valid = instance.getDataAtRowProp(row, 'LoaiYeuCau');
                    var $button = '';
                    if (valid === null || valid === '' || valid === undefined) {
                        $button = '';
                    } else {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:green"></i>');//Edit - NgoanHT - 23/11/2017 - Loại: 181 - Sửa lại icon
                        $button.click(function () {
                            var row = $(this).attr('data-value');
                            $('#uploadDetails').attr('data-value', row).attr('data-id', 'upHinhLayoutMatBang');
                            $('#uploadDetails').val('');
                            $('#uploadDetails').trigger('click');
                        });
                    }
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                } else {
                    $(td).empty().append('');
                }
            };
            var actionRendererUpload_3 = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'upHinhAnhThucTe') {
                    var valid = instance.getDataAtRowProp(row, 'LoaiYeuCau');
                    var $button = '';
                    if (valid === null || valid === '' || valid === undefined) {
                        $button = '';
                    } else {
                        $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:green"></i>');//Edit - NgoanHT - 23/11/2017 - Loại: 181 - Sửa lại icon
                        $button.click(function () {
                            var row = $(this).attr('data-value');
                            $('#uploadDetails').attr('data-value', row).attr('data-id', 'upHinhAnhThucTe');
                            $('#uploadDetails').val('');
                            $('#uploadDetails').trigger('click');
                        });
                    }
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                } else {
                    $(td).empty().append('');
                }
            };
            function readURL(input) {
                var tmppath = URL.createObjectURL(input);
                var win = window.open(tmppath, '_blank');
                if (win) {
                    win.focus();
                } else {
                    alert('Please allow popups for this site');
                }
            }
            function endFile(name) {
                var extension = name.split('.').pop().toLowerCase();
                if ($.inArray(extension, ['jpg', 'png', 'gif', 'jpeg']) == -1) {
                    return false;
                }
                else {
                    return true;
                }
            }

            $('#uploadDetails').on('change', function () {
                if (CheckThayDoiThongTin) {
                    XFunction.RenderMessage("error", "Calllog đã hoàn tất, không được cập nhật lại hình ảnh!"); return;
                }
                else {
                    if (checkAssiner == true || checkSender == true) {
                        var rowline = $(this).attr('data-value');
                        var rowCol = $(this).attr('data-id');
                        if (CL.StepNo == 1 && checkSender == false) { // Bước 1 Sender mới được thay đổi hình ảnh 
                            XFunction.RenderMessage("error", "Bạn không có quyền thay đổi hình ảnh trên CallLog!!!"); return false;
                        } else
                            if (CL.StepNo > 1 && checkAssiner == false) { // Bước 2 3 4 5 Assigner mới được thay đổi hình ảnh
                                XFunction.RenderMessage("error", "Bạn không có quyền thay đổi hình ảnh trên CallLog!!!"); return false;
                            } else {
                                if ((CL.StepNo == 2 || CL.StepNo == 4) && rowCol !== 'upHinhAnhThucTe') { // Bước 2 4 Assigner chỉ có qquyền thay đổi Hình ảnh thực tế shop
                                    XFunction.RenderMessage("error", "Bạn chỉ có quyền thay đổi Hình ảnh thực tế shop!"); return false;
                                }
                                else if ((CL.StepNo == 3 || CL.StepNo == 5) && rowCol === 'upHinhAnhThucTe') { // Bước 3 5 Assigner  chỉ có qquyền thay đổi Hình ảnh Mặt bằng và Mặt tiền của shop
                                    XFunction.RenderMessage("error", "Bạn chỉ có quyền thay đổi Hình ảnh Mặt bằng và Mặt tiền của shop!"); return false;
                                }
                                else {
                                    //▼ Edit - ThuongNM2 - 2018/12/04 - Chỉ cho upload img
                                    var checkfile = [];
                                    $.each($(this)[0].files, function (index, item) {
                                        if (endFile(item.name) == false) {
                                            checkfile.push(item);
                                        }
                                    })
                                    if (checkfile.length > 0) {
                                        XFunction.RenderMessage("error", "Bạn chỉ được upload file hình ảnh!"); return false;
                                    }
                                    else {
                                        var selectedFiles = $(this)[0].files;
                                        $.each(l_Data_Handsontable, function (index, item) {
                                            if (rowline == index) {
                                                var dataFiles = [];
                                                var listHtml = [];
                                                var lisDataFilesName = [];
                                                $.each(selectedFiles, function (index, item) {

                                                    var d = new Date();
                                                    var n = d.getTime();
                                                    selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                                    dataFiles.push(selectedFiles[index]);
                                                    lisDataFilesName.push(selectedFiles[index].nameNew);
                                                    var tmppath = URL.createObjectURL(selectedFiles[index]);
                                                    if (endFile(selectedFiles[index].nameNew)) {
                                                        listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a></div>');// Edit - NgoanHT - 21/11/2017 - Loại: 181 - Sửa
                                                    }
                                                });
                                                if (rowCol === 'upHinhLayoutMattien') {
                                                    item.DataFiles = dataFiles;
                                                    item.ColHtmlArray = listHtml;
                                                    item.ListNameFileArray = lisDataFilesName;
                                                    item.ColHtml = listHtml.join(' ');
                                                    item.ListNameFile = lisDataFilesName.join(',');
                                                }
                                                else if (rowCol === 'upHinhLayoutMatBang') {
                                                    item.DataFiles_2 = dataFiles;
                                                    item.ColHtmlArray_2 = listHtml;
                                                    item.ListNameFileArray_2 = lisDataFilesName;
                                                    item.ColHtml_2 = listHtml.join(' ');
                                                    item.ListNameFile_2 = lisDataFilesName.join(',');
                                                }
                                                else if (rowCol === 'upHinhAnhThucTe') {
                                                    item.DataFiles_3 = dataFiles;
                                                    item.ColHtmlArray_3 = listHtml;
                                                    item.ListNameFileArray_3 = lisDataFilesName;
                                                    item.ColHtml_3 = listHtml.join(' ');
                                                    item.ListNameFile_3 = lisDataFilesName.join(',');
                                                }
                                            }
                                        });
                                        hot.render();
                                        $(this).val('');
                                    }
                                    //▲ Edit - ThuongNM2 - 2018/12/04 - Chỉ cho upload img
                                }
                            }
                    }
                    else {
                        XFunction.RenderMessage("error", "Bạn không có quyền thay đổi hình ảnh trên CallLog!!!"); return;
                    }
                }
            });
            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                td.innerHTML = escaped;
                td.style.textAlign = 'left';
                return td;
            }
            var l_Setting = function () {
                return {
                    data: l_Data_Handsontable,
                    data: R_data_Handsontable,
                    maxCols: 20,
                    minCols: 20,
                    startCols: 20,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 20,
                    currentColClassName: 'currentCol',
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 8,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    //autoRowSize: true,
                    //autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    startRows: 10,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: true,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    hiddenColumns: {
                        indicators: true
                    },
                    colHeaders:
                        [
                            "Duyệt",
                            "Không duyệt",
                            "Tên shop",
                            //"Tên yêu cầu",
                            "Loại yêu cầu ",
                            "Thông tin thay đổi Layout",
                            "Upload hình Layout mặt tiền",
                            "Hình Layout mặt tiền",
                            "Upload hình Layout mặt bằng",
                            "Hình Layout mặt bằng",
                            "Upload hình ảnh thực tế shop",
                            "Hình ảnh thực tế shop",
                            "Thời gian hiển thị calllog"

                        ],
                    columns: [
                        {
                            data: 'Approved1', type: 'checkbox', className: "htCenter htMiddle",
                            readOnly: false, width: 50,
                            checkedTemplate: 1, uncheckedTemplate: 0, readOnly: ReadOnlyApproved,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'Approved2', type: 'checkbox', className: "htCenter htMiddle",
                            readOnly: false, width: 90,
                            checkedTemplate: 1, uncheckedTemplate: 0, readOnly: ReadOnlyApproved,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                        },
                        { data: "TenShop", type: 'text', className: 'htLeft', width: 150, readOnly: true },
                        //{ data: "TenYeuCau", type: 'text', className: 'htLeft', width: 150, readOnly: true },
                        { data: "LoaiYeuCau", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                        { data: "ThongTinThayDoi", type: 'text', className: 'htLeft', width: 200, readOnly: checkEditor },
                        { data: "upHinhLayoutMattien", type: 'text', editor: false, renderer: actionRendererUpload, className: 'htLeft', width: 50 },
                        { data: "ColHtml", editor: false, type: 'text', className: 'htLeft', renderer: safeHtmlRenderer, width: 150 },
                        { data: "upHinhLayoutMatBang", type: 'text', editor: false, renderer: actionRendererUpload_2, className: 'htLeft', width: 50 },
                        { data: "ColHtml_2", editor: false, type: 'text', className: 'htLeft', renderer: safeHtmlRenderer, width: 150 },
                        { data: "upHinhAnhThucTe", type: 'text', editor: false, renderer: actionRendererUpload_3, className: 'htLeft', width: 50, },
                        { data: "ColHtml_3", editor: false, type: 'text', className: 'htLeft', renderer: safeHtmlRenderer, width: 150 },
                        {
                            data: "ThoiGianHienThi", type: 'text', className: "htCenter htMiddle", width: 150, readOnly: true
                        }

                    ],
                    beforeChange: function (changes, source) {
                        if (source == 'not') return;
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1];
                            if (statusRequest != 4) {
                                if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, 0, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 0, 0, 'not');
                                    }
                                    return true;
                                }
                            }
                            else {
                                if (col === 'Approved1') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, 0, 'not');
                                    }
                                    return true;
                                }
                                if (col === 'Approved2') {
                                    var value = changes[i][3];
                                    if (value == true) {
                                        hot.setDataAtCell(row, 1, 0, 'not');
                                        XFunction.RenderMessage("error", "Không được chuyển sang trạng thái không duyệt khi CallLog đã hoàn tất");
                                    }
                                    return false;
                                }
                            }
                        }
                    },

                };
            };
            hot = new Handsontable(container, l_Setting());
            //if (CL.StepNo != 1) {
            //    var plugin = hot.getPlugin('hiddenColumns');
            //    plugin.hideColumn(0, 1);
            //    hot.render();
            //    //$('#tableDetails td:nth-child(3),th:nth-child(3)').hide();
            //}
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {
                var dataReturn = [];
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var myData = hot.getSourceData() == undefined ? [] : hot.getSourceData();
                var data = new FormData();
                var dem = 0
                $.each(myData, function (index, item) {
                    if (item.ThongTinThayDoi == null || item.ThongTinThayDoi == '') {
                        dem++;
                    }
                    var checkAppo = null;
                    if ((item.Approved1 == 1 || item.Approved1 == true) && (item.Approved2 == 0 || item.Approved2 == false)) {
                        checkAppo = true;
                    } else if ((item.Approved1 == 0 || item.Approved1 == false) && (item.Approved2 == 1 || item.Approved2 == true)) {
                        checkAppo = false;
                    }
                    dataReturn.push({
                        Title: $('#titleX').text(),
                        Id: 0,
                        RequestDId: item.IDRD,
                        RequestId: item.Id,
                        MaShop: item.MaShop,
                        TenShop: item.TenShop,
                        //TenYeuCau: item.TenYeuCau,
                        TenLoaiYeuCau: item.LoaiYeuCau,
                        ThongTinThayDoi: item.ThongTinThayDoi,
                        ThoiGianHienThi: item.ThoiGianHienThi,
                        ListNameFile: item.ListNameFile,
                        ListNameFile_2: item.ListNameFile_2,
                        ListNameFile_3: item.ListNameFile_3,
                        Approved: checkAppo
                    });
                    if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                        $.each(item.DataFiles, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    if (item.DataFiles_2 !== '' && item.DataFiles_2 !== null && item.DataFiles_2 !== undefined && item.DataFiles_2.length > 0) {
                        $.each(item.DataFiles_2, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    if (item.DataFiles_3 !== '' && item.DataFiles_3 !== null && item.DataFiles_3 !== undefined && item.DataFiles_3.length > 0) {
                        $.each(item.DataFiles_3, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                });
                if (dem > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập Thông tin thay đổi"); return;
                }
                $.each(dataReturn, function (index, item) {
                    if (item.ListNameFile_3 === null || item.ListNameFile_3 === "" || item.ListNameFile_3 === undefined) {

                        dataReturn[index].ListNameFile_3 = listimage_Uri_String_thucshop.substring(0, listimage_Uri_String_thucshop.length - 1)
                    }
                    if (item.ListNameFile === null || item.ListNameFile === "" || item.ListNameFile === undefined) {
                        dataReturn[index].ListNameFile = listimage_Uri_String_mattien.substring(0, listimage_Uri_String_mattien.length - 1)
                    }
                    if (item.ListNameFile_2 === null || item.ListNameFile_2 === "" || item.ListNameFile_2 === undefined) {
                        dataReturn[index].ListNameFile_2 = listimage_Uri_String_matbang.substring(0, listimage_Uri_String_matbang.length - 1)
                    }

                })

                $('#myModal').modal('show');
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                data.append("Details", $('#Details').val());
                data.append("DetailsCc", $('#DetailsCc').val());
                data.append("RequestId", $('#RequestId').val());
                data.append("Message", $('#Message').val());
                data.append("ImageValidate", $('#ImageValidate').val());
                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetailMultipleCol",
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        if (result.error === 0) {
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();
                        }
                        else {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                            return;
                        }
                    },
                    error: function () {
                        $('#myModalWatting').modal('hide');
                        XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                        return;
                        //var win = window.open('/Home', '_self');
                    }
                });
            });

            $btnComplete.on('click', function () {
                if (CL.StepNo == 5 && CL.Status == 4) {
                    XFunction.RenderMessage("error", "Calllog đã hoàn tất, không được cập nhật lại"); return false;
                }
                var myData = hot.getSourceData() == undefined ? [] : hot.getSourceData();
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                var dem = 0, checkApproved = 0;
                $.each(myData, function (index, item) {
                    if ((item.DataFiles == null || item.DataFiles == undefined || item.DataFiles == '' ||
                        item.DataFiles_2 == null || item.DataFiles_2 == undefined || item.DataFiles_2 == '') && item.StepNo != 1 && item.StepNo != 2 && item.StepNo != 4)
                        dem++;
                    if (item.StepNo == 1 && (item.Approved1 == null ||
                        item.Approved1 == undefined ||
                        item.Approved1 == '' ||
                        item.Approved1 == 0) &&
                        (item.Approved2 == null ||
                            item.Approved2 == undefined ||
                            item.Approved2 == '' ||
                            item.Approved2 == 0)) {
                        checkApproved++;
                    }
                });
                if (checkApproved > 0) {
                    XFunction.RenderMessage("error", "Vui lòng tick chọn Duyệt hoặc Không duyệt !"); return false;
                }
                if (dem > 0) {
                    XFunction.RenderMessage("error", "Vui lòng upload hình mặt bằng & mặt tiền trước khi hoàn tất!"); return false;
                }
                var data = new FormData();
                var dataReturn = [];

                var dem = 0;
                $.each(myData, function (index, item) {
                    if (item.ThongTinThayDoi == null || item.ThongTinThayDoi == '') {
                        dem++;
                    }
                    dataReturn.push({
                        Title: $('#titleX').text(),
                        Id: 0,
                        RequestDId: item.IDRD,
                        RequestId: item.Id,
                        MaShop: item.MaShop,
                        TenShop: item.TenShop,
                        //TenYeuCau: item.TenYeuCau,
                        TenLoaiYeuCau: item.LoaiYeuCau,
                        ThongTinThayDoi: item.ThongTinThayDoi,
                        ThoiGianHienThi: item.ThoiGianHienThi,
                        ListNameFile: item.ListNameFile,
                        ListNameFile_2: item.ListNameFile_2,
                        ListNameFile_3: item.ListNameFile_3,
                        Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,

                    });
                    if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                        $.each(item.DataFiles, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    if (item.DataFiles_2 !== '' && item.DataFiles_2 !== null && item.DataFiles_2 !== undefined && item.DataFiles_2.length > 0) {
                        $.each(item.DataFiles_2, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    if (item.DataFiles_3 !== '' && item.DataFiles_3 !== null && item.DataFiles_3 !== undefined && item.DataFiles_3.length > 0) {
                        $.each(item.DataFiles_3, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                });
                if (dem > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập Thông tin thay đổi"); return;
                }
                $.each(dataReturn, function (index, item) {
                    if (item.ListNameFile_3 === null || item.ListNameFile_3 === "" || item.ListNameFile_3 === undefined) {

                        dataReturn[index].ListNameFile_3 = listimage_Uri_String_thucshop.substring(0, listimage_Uri_String_thucshop.length - 1)
                    }
                    if (item.ListNameFile === null || item.ListNameFile === "" || item.ListNameFile === undefined) {
                        dataReturn[index].ListNameFile = listimage_Uri_String_mattien.substring(0, listimage_Uri_String_mattien.length - 1)
                    }
                    if (item.ListNameFile_2 === null || item.ListNameFile_2 === "" || item.ListNameFile_2 === undefined) {
                        dataReturn[index].ListNameFile_2 = listimage_Uri_String_matbang.substring(0, listimage_Uri_String_matbang.length - 1)
                    }

                })
                $('#myModal').modal('show');
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                data.append("Details", $('#Details').val());
                data.append("DetailsCc", $('#DetailsCc').val());
                data.append("RequestId", $('#RequestId').val());
                data.append("Message", $('#Message').val());
                data.append("ImageValidate", $('#ImageValidate').val());

                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetailMultipleCol",
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        if (result.error === 0) {
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Complete");
                            form.submit();
                        }
                        else {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                            return;
                        }
                    },
                    error: function () {
                        $('#myModalWatting').modal('hide');
                        XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                        return;
                        //var win = window.open('/Home', '_self');
                    }
                });
            });

            $btnChangeStep.on('click', function () {
                //console.log(listimage_Uri_String_thucshop)
                var myData = hot.getSourceData() == undefined ? [] : hot.getSourceData();
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                var dem = 0;
                $.each(myData, function (index, item) {
                    if ((item.DataFiles == null || item.DataFiles == undefined || item.DataFiles == '' ||
                        item.DataFiles_2 == null || item.DataFiles_2 == undefined || item.DataFiles_2 == '') && item.StepNo != 1 && item.StepNo != 2 && item.StepNo != 4)
                        dem++;
                });
                if (dem > 0) {
                    XFunction.RenderMessage("error", "Vui lòng upload hình layout mặt tiền & mặt bằng mới nhất trước khi chuyển bước"); return false;
                }

                var data = new FormData();
                var dataReturn = [];
                var dem1 = 0;
                $.each(myData, function (index, item) {
                    if (item.ThongTinThayDoi == null || item.ThongTinThayDoi == '') {
                        dem1++;
                    }
                    dataReturn.push({
                        RequestDId: item.IDRD,
                        Id: 0,
                        ListNameFile: item.ListNameFile,
                        ListNameFile_2: item.ListNameFile_2,
                        ListNameFile_3: item.ListNameFile_3,
                        ThongTinThayDoi: item.ThongTinThayDoi,
                    });
                    if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                        $.each(item.DataFiles, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    if (item.DataFiles_2 !== '' && item.DataFiles_2 !== null && item.DataFiles_2 !== undefined && item.DataFiles_2.length > 0) {
                        $.each(item.DataFiles_2, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                    if (item.DataFiles_3 !== '' && item.DataFiles_3 !== null && item.DataFiles_3 !== undefined && item.DataFiles_3.length > 0) {
                        $.each(item.DataFiles_3, function (cout, element) {
                            data.append(element.nameNew, element);
                        });
                    }
                });
                if (dem1 > 0) {
                    XFunction.RenderMessage("error", "Vui lòng nhập Thông tin thay đổi"); return;
                }
                $.each(dataReturn, function (index, item) {
                    if (item.ListNameFile_3 === null || item.ListNameFile_3 === "" || item.ListNameFile_3 === undefined) {

                        dataReturn[index].ListNameFile_3 = listimage_Uri_String_thucshop.substring(0, listimage_Uri_String_thucshop.length - 1)
                    }
                    if (item.ListNameFile === null || item.ListNameFile === "" || item.ListNameFile === undefined) {
                        dataReturn[index].ListNameFile = listimage_Uri_String_mattien.substring(0, listimage_Uri_String_mattien.length - 1)
                    }
                    if (item.ListNameFile_2 === null || item.ListNameFile_2 === "" || item.ListNameFile_2 === undefined) {
                        dataReturn[index].ListNameFile_2 = listimage_Uri_String_matbang.substring(0, listimage_Uri_String_matbang.length - 1)
                    }

                })

                $('#myModal').modal('show');
                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                data.append("Details", $('#Details').val());
                data.append("DetailsCc", $('#DetailsCc').val());
                data.append("RequestId", $('#RequestId').val());
                data.append("Message", $('#Message').val());
                data.append("ImageValidate", $('#ImageValidate').val());

                $.ajax({
                    type: "POST",
                    url: "/Requests/SaveUploadedFileDetailMultipleCol",
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        if (result.error === 0) {
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/ChangeStep");
                            form.submit();
                        }
                        else {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                            return;
                        }
                    },
                    error: function () {
                        $('#myModalWatting').modal('hide');
                        XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                        return;
                        //var win = window.open('/Home', '_self');
                    }
                });
            });
            $("#btnPrint").click(function (e) {
                window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
                e.preventDefault();
            });
        });
    };
    //▲ Edit - NgoanHT - 29/01/2018 - Loại: 191 - Sửa Loại 191
    //▲ Add - PhiN - 09/01/2018 - 191 - Cập nhật Layout shop thông thường

    //▼ Add - NghiaTV5 - 27/01/2018 - 192 - nợ khuyến mãi
    function contruct_192() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [], Note = [], Status = [];
            Note.push('Chưa liên hệ KH', 'Đã liên hệ KH'); Status.push('Chưa trễ hạn', 'Trễ hạn ')
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        [
                            'Tên KH',
                            'SĐT',
                            'SO gốc',
                            'SO nợ KM',
                            'Ngày hoàn tất SO gốc',
                            'Mã SP nợ',
                            'Tên SP nợ',
                            'SL nợ',
                            'SL tồn kho',
                            'Shop',
                            'Trạng thái nợ KM',
                            'Ghi chú'
                        ],
                    columns: [

                        { data: "CustomerName", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "Property1", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "Quantity1", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "Quantity2", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "Time1", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "ProductCode", type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'Quantity3', type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Quantity4", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "WarehouseCodeName", type: 'text', className: 'htLeft', readOnly: true, },
                        {
                            data: "TrangThaiKhuyenMai", type: 'text', width: 150,
                            className: 'htLeft', readOnly: true,
                        },
                        {
                            data: "GhiChu", type: 'dropdown', width: 170,
                            className: 'htLeft',
                            source: Note,
                            strict: true,
                            renderer: function firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {
                                Handsontable.renderers.TextRenderer.apply(this, arguments);
                                td.style.fontWeight = 'bold';
                                td.style.color = 'red';
                                td.style.background = '#CEC';
                            }
                        },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== ''
                });
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                if (CL.Status == "4") {
                    XFunction.RenderMessage("error", "Calllog hoàn tất không trao đổi được ! "); return false;
                }
                //console.log(hot.getData());
                //return false;
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });

        });
    };
    //▲ Add - NghiaTV5 - 27/01/2018 - 192 - nợ khuyến mãi
    //▼  Add - LuanNT44 - 09/04/2018 - Loại 201 - Kiểm hàng online
    function contruct_201() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var ma_shop = '0';

            if (respone.length > 0) {
                var ma_shop = respone[0].MaShop_sender; // lấy mã shop người gửi yêu cầu
            }

            $.get('/Requests/GetNameShop', { MaShop_sender: ma_shop }, function (data) { // lấy tên shop
                $.get('/Requests/GetEmps', { ShopCode: '' }, function (data1) {  // lấy danh sách người kiểm kê

                    var check_trehan_uphinh = 0;
                    var l_Data_Handsontable = [];
                    var l_Data_Handsontable_2 = [];
                    var arrNameEmp = [];
                    $.each(data1, function (index, item) {
                        arrNameEmp.push(item.text)
                    })

                    var WarehouseCodeData = data[0].WarehouseCodeB1;
                    var WarehouseNameData = data[0].WarehouseName;
                    l_Data_Handsontable = data;

                    var dt = new Date(); // lấy ngày hiện tại
                    var date = (dt.getDate() < 10 ? "0" + dt.getDate() : dt.getDate()) + '/' + ((dt.getMonth() + 1) ? "0" + (dt.getMonth() + 1) : (dt.getMonth() + 1)) + '/' + dt.getFullYear();
                    $.each(l_Data_Handsontable, function (index, item) {
                        item.NgayKiemKe = date
                    });

                    var datecreate = new Date(CL.TimeCreate);
                    var datecreate_day = datecreate.getDate();
                    var datecreate_month = datecreate.getMonth() + 1;
                    var datecreate_year = datecreate.getFullYear();
                    //alert(datecreate_day + '/' + datecreate_month+'/'+ datecreate_year)



                    l_Data_Handsontable = $.grep(respone, function (item) { // lấy chi tiết lưới 1
                        if (item.DetType == 1) {
                            return item;
                        }
                    });

                    l_Data_Handsontable_2 = $.grep(respone, function (item) {// lấy chi tiết lưới 2
                        if (item.DetType == 2) {
                            return item;
                        }
                    });

                    var time_kiemke = l_Data_Handsontable_2[0].time_end;
                    var hour_timekiemke = time_kiemke.Hours;
                    var minutes_timekiemke = time_kiemke.Minutes;

                    //l_Data_Handsontable = respone;
                    //▼ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                    var arrmodelkiem = [];   // danh sách model kiểm kê
                    if (l_Data_Handsontable_2.length > 0) {
                        $.each(l_Data_Handsontable_2, function (index, item) {
                            //arrmodelkiem.push(item.TenSP + '--' + item.ImeiSP);
                            arrmodelkiem.push(item.TenModel);
                        });
                    }

                    //▼  Add - LuanNT44 - 05/06/2018 - Loại 201 - xóa phần tử trùng nhau trong mảng
                    for (var i = 1; i < arrmodelkiem.length; i++) {
                        for (var j = 0; j < i; j++) {
                            if (arrmodelkiem[i] == arrmodelkiem[j]) {
                                for (var k = i; k < arrmodelkiem.length; k++) {
                                    arrmodelkiem[k] = arrmodelkiem[k + 1];

                                }
                                arrmodelkiem.length--;
                                i--;
                            }
                        }
                    }
                    //▲  Add - LuanNT44 - 05/06/2018 - Loại 201 - xóa phần tử trùng nhau trong mảng
                    //console.log(arrmodelkiem)
                    //▲ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online

                    function readURL(input) {
                        var tmppath = URL.createObjectURL(input);
                        var win = window.open(tmppath, '_blank');
                        if (win) {
                            win.focus();
                        } else {
                            alert('Please allow popups for this site');
                        }
                    }
                    function endFile(name) {
                        var extension = name.split('.').pop().toLowerCase();
                        if ($.inArray(extension, ['jpg', 'png', 'gif', 'jpeg']) == -1) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }

                    //Kiểm tra quyền
                    var permisstion = { isSender: false, isAssiner: false, isOldStepAssigner: false, isGroupAssiner: false };

                    $.each(permissons, function (index, item) {
                        if (item == 'sender')
                            permisstion.isSender = true;
                        if (item == 'assigner')
                            permisstion.isAssiner = true;
                        if (item == 'groupAssigner')
                            permisstion.isGroupAssiner = true;
                        if (item == 'oldStepAssigner')
                            permisstion.isOldStepAssigner = true;
                    });

                    var check_sender = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;

                    var check_OldStepAssigner = permisstion.isOldStepAssigner;

                    // alert(check_OldStepAssigner)

                    var check_step_1 = true; //Kiểm tra bước Calllog
                    if (CL.StepNo == 1) {
                        check_step_1 = false;
                    }

                    var check_step_2 = true; //Kiểm tra bước Calllog
                    if (CL.StepNo == 2) {
                        check_step_2 = false;
                    }

                    var check_quyen = true;
                    if (check_step_1 == false && check_sender == true) {
                        check_quyen = false;
                    }

                    var check_quyen_Old = true;    //người xử lý bước cũ
                    if (check_step_2 == false && check_OldStepAssigner == true) {
                        check_quyen_Old = false;
                    }
                    //alert(check_quyen_Old)
                    //console.log(l_Data_Handsontable)
                    $.each(l_Data_Handsontable, function (index1, item) {
                        if (item.Uri_String_IMG !== null && item.Uri_String_IMG !== '' && item.Uri_String_IMG !== undefined) {
                            var arrColHTML = item.Uri_String_IMG.split(',')
                            var ColHtmlArray = [];
                            var ListNameFileArray = [];
                            if (CL.Status == 4 || CL.StepNo == 2) {
                                $.each(arrColHTML, function (index, item1) {
                                    //ColHtmlArray.push('<div class="ULH"><a href="' + item1 + '" target="_blank" class="renderlink" data-id="' + item.RequestDID + '" data-value="' + item1.split('/')[3] + '"><img class="IMG" src="' + item1 + '" height="42" width="42"></a></div>')
                                    if (endFile(item1)) {
                                        ColHtmlArray.push('<div class="ULH"><img class="IMG" src="' + item1 + '" height="42" width="42" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '" onclick="myFunction_201(this)"></div>')
                                        ListNameFileArray.push(item1.split('/')[3])
                                    }
                                    //else
                                    //{
                                    //    ColHtmlArray.push('<div class="ULH" style ="vertical-align: middle; padding-left:3px;"><a href="' + item1 + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '" " ></a></div>')
                                    //    ListNameFileArray.push(item1.split('/')[3])
                                    //}

                                });
                            }
                            else {
                                $.each(arrColHTML, function (index, item1) {
                                    //ColHtmlArray.push('<div class="ULH"><a href="' + item1 + '" target="_blank" class="renderlink" data-id="' + item.RequestDID + '" data-value="' + item1.split('/')[3] + '"><img class="IMG" src="' + item1 + '" height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '" onclick="DeleteIMGDB(this)">X</button></div>')
                                    //ColHtmlArray.push('<div class="ULH"><button type="button" class="btn btn-primary" data-toggle="modal" data-target=".bd-example-modal-lg" data-id="' + item.RequestDID + '"><img class="IMG" src="' + item1 + '" height="42" width="42" name="UpHinh201"></button><button class="BTN" type="button" class="btn btn-success" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '" onclick="DeleteIMGDB(this)">X</button></div>')
                                    if (endFile(item1)) {
                                        ColHtmlArray.push('<div class="ULH"><img class="IMG" src="' + item1 + '" height="42" width="42" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '" onclick="myFunction_201(this)"><button class="BTN" type="button" class="btn btn-success" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '" onclick="DeleteIMGDB(this)">X</button></div>')
                                        ListNameFileArray.push(item1.split('/')[3])
                                    }
                                    //else
                                    //{
                                    //    ColHtmlArray.push('<div class="ULH" style ="vertical-align: middle; padding-left:3px;"><a href="' + item1 + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '" " ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '" onclick="DeleteIMGDB(this)">X</button></div>')
                                    //    ListNameFileArray.push(item1.split('/')[3])
                                    //}

                                });
                            }
                            item.ColHtmlArray = ColHtmlArray;
                            item.ColHtml = item.ColHtmlArray.join(' ');
                            item.ListNameFileArray = ListNameFileArray;
                            item.ListNameFile = item.ListNameFileArray.join(',');
                        }
                    })
                    //$('#titleX').text(Title)
                    //▲ =================================================


                    var LoaiYeuCau = [];
                    DeleteIMGDB = function (data) {
                        var NameIMG = $(data).context.dataset.lisdatafilesname; // lấy tên từ html (data-...)
                        var indexL = $(data).context.dataset.id;
                        var indexDelete = [];
                        var checkhl = true;

                        if (check_step_2 == false) {
                            XFunction.RenderMessage("error", "Không được xoá hình ảnh đã đính kèm lên calllog!("); return;
                        }
                        else {
                            $.each(hot.getSettings().data, function (index, item) {
                                if (item.ListNameFileArray !== null && item.ListNameFileArray !== '' && item.ListNameFileArray !== undefined && index == indexL)
                                    $.each(item.ListNameFileArray, function (index, item) {
                                        if (item == NameIMG) {
                                            indexDelete.push(index);
                                        }
                                    });
                            })
                            $.each(hot.getSettings().data, function (index, item1) {
                                if (index == indexL) {
                                    $.each(indexDelete, function (index, item) {
                                        item1.ColHtmlArray.splice(item.toString(), 1);
                                        item1.ListNameFileArray.splice(item.toString(), 1);
                                        item1.ColHtml = item1.ColHtmlArray.join(' ');
                                        item1.ListNameFile = item1.ListNameFileArray.join(',');
                                    })

                                }
                            });
                            $(data).parent().remove();
                        }
                    }

                    DeleteIMG = function (data) {
                        var NameIMG = $(data).context.dataset.lisdatafilesname;
                        var indexL = $(data).context.dataset.id;
                        var Check = $(data).context.dataset.check;
                        var indexDelete = [];
                        var checkhl = true;
                        $.each(hot.getSettings().data, function (index, item) {
                            // console.log(1, item, 2, indexL, 3, hot.getSettings().data)
                            if (item.DataFiles !== null && item.DataFiles !== '' && item.DataFiles !== undefined && index == indexL)
                                $.each(item.DataFiles, function (index, item) {
                                    if (item.nameNew == NameIMG) {
                                        indexDelete.push(index);
                                    }

                                });
                        })
                        $.each(hot.getSettings().data, function (index, item1) {
                            if (index == indexL) {
                                if (item1.DataFiles.length <= 1) {
                                    checkhl = false
                                }
                                else {
                                    $.each(indexDelete, function (index, item) {
                                        item1.DataFiles.splice(item.toString(), 1);
                                        item1.ColHtmlArray.splice(item.toString(), 1);
                                        item1.ListNameFileArray.splice(item.toString(), 1);
                                        item1.ColHtml = item1.ColHtmlArray.join(' ');
                                        item1.ListNameFile = item1.ListNameFileArray.join(',');
                                    })
                                }
                            }
                        });
                        //if (checkhl == false) {
                        //    XFunction.RenderMessage('error', '"Hình ảnh đính kèm" không thể trống !'); return;
                        //}
                        //else {
                        $(data).parent().remove();
                        //}
                    }
                    var actionRendererUpload_201 = function (instance, td, row, col, prop, value, cellProperties) {

                        if (prop == 'UploadHinh') {   // nút up load hình ảnh

                            var valid = instance.getDataAtRowProp(row, 'NguoiKiemKe');

                            var date_moc = new Date();
                            var date_now = date_moc.getDate();
                            var date_hours = date_moc.getHours();
                            var date_minutes = date_moc.getMinutes();
                            var date_day = date_moc.getDate();
                            var date_month = date_moc.getMonth() + 1;
                            var date_year = date_moc.getFullYear();


                            var $button = '';
                            if (valid === null || valid === '' || valid === undefined) {
                                $button = '';
                            }
                            else {
                                $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:green"></i>');
                                $button.click(function () {
                                    if (CL.Status == 4) {
                                        XFunction.RenderMessage("error", "Bạn không có quyền upload hình ảnh 1 !"); return;
                                    }
                                    //alert(check_quyen_Old + '-' + check_sender)
                                    if (CL.StepNo == 2 && (check_quyen_Old == true && check_sender == false)) {
                                        XFunction.RenderMessage("error", "Bạn không có quyền upload hình ảnh!"); return;
                                    }
                                    //if (CL.StepNo == 2 && check_sender == false)
                                    //{
                                    //    XFunction.RenderMessage("error", "Bạn không có quyền upload hình ảnh  3!"); return;
                                    //}


                                    var rowline = $(this).attr('data-value');

                                    $('#UpAnhTrehan').val(rowline);
                                    //▼  Add - LuanNT44 - 05/06/2018 - Loại 201 - Kiểm hàng online edit status
                                    if ((date_year === datecreate_year && date_month === datecreate_month && date_day > datecreate_day) || (date_year === datecreate_year && date_month > datecreate_month) || (date_year > datecreate_year) || (date_year === datecreate_year && date_month === datecreate_month && date_day === datecreate_day && date_hours > hour_timekiemke) || (date_year === datecreate_year && date_month === datecreate_month && date_day === datecreate_day && date_hours === hour_timekiemke && date_minutes > minutes_timekiemke)) {
                                        check_trehan_uphinh = 1;
                                        $('#Mymodal_kiemhangonline').modal('show');
                                        //▲  Add - LuanNT44 - 05/06/2018 - Loại 201 - Kiểm hàng online edit status
                                    }
                                    else {
                                        var row = $(this).attr('data-value');
                                        $('#uploadDetails').attr('data-value', row).attr('data-id', 'UploadHinh');
                                        $('#uploadDetails').val('');
                                        $('#uploadDetails').trigger('click');
                                        //alert(3)
                                    }



                                });
                            }
                            $button != '' ?
                                $(td).empty().append($button) :
                                $(td).empty().append('');

                        }

                        else {
                            $(td).empty().append('');
                        }
                    };


                    var checkData_old = $.grep(l_Data_Handsontable, function (item) {
                        return item.RequestDID !== null || item.RequestDID !== '' || item.RequestDID !== undefined;// Edit - LuanNT44 - 14/04/2018 - Loại 201 - Thêm điều kiện
                    });
                    //console.log(check_trehan_uphinh)

                    $('#uploadDetails').on('change', function () {
                        if (CL.StepNo == 1 && checkData_old.length == 0) {
                            var rowline = $(this).attr('data-value');
                            var selectedFiles = $(this)[0].files;
                            //console.log(selectedFiles)
                            $.each(l_Data_Handsontable, function (index, item) {
                                if (rowline == index) {
                                    var dataFiles = [];

                                    if (item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles !== '' && item.DataFiles.length > 0) {
                                        dataFiles = item.DataFiles;
                                    }
                                    var listHtml = [];
                                    var lisDataFilesName = [];

                                    //var listHtml = item.ColHtmlArray;
                                    //var lisDataFilesName = item.ListNameFileArray;

                                    $.each(selectedFiles, function (index, item) {

                                        var d = new Date();
                                        var n = d.getTime();
                                        selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;

                                        //console.log(selectedFiles[index], selectedFiles[index].name);

                                        dataFiles.push(selectedFiles[index]);
                                        lisDataFilesName.push(selectedFiles[index].nameNew);
                                        var tmppath = URL.createObjectURL(selectedFiles[index]);
                                        if (endFile(selectedFiles[index].nameNew)) {
                                            //listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            listHtml.push('<div class="ULH"><img class="IMG" src="' + tmppath + '"height="42" width="42" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" onclick="myFunction_201(this)"><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                        }
                                        //else
                                        //{
                                        //    listHtml.push('<div class="ULH" style ="vertical-align: middle; padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                        //}
                                    });
                                    item.DataFiles = dataFiles;
                                    item.ColHtmlArray = listHtml;
                                    item.ListNameFileArray = lisDataFilesName;
                                    item.ColHtml = listHtml.join(' ');
                                    item.ListNameFile = lisDataFilesName.join(',');
                                    if (check_trehan_uphinh == 0) {
                                        item.check_trehan = '0';
                                    }
                                    else {
                                        item.check_trehan = '1';
                                    }
                                }
                            });
                            hot.render();
                            $(this).val('');
                            //console.log(rowline, rowCol);
                        }
                        else if (CL.StepNo == 1 && checkData_old.length > 0) {
                            var rowline = $(this).attr('data-value');
                            var selectedFiles = $(this)[0].files;
                            //console.log(selectedFiles)
                            $.each(l_Data_Handsontable, function (index, item) {
                                if (rowline == index) {
                                    var dataFiles = [];

                                    if (item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles !== '' && item.DataFiles.length > 0) {
                                        dataFiles = item.DataFiles;
                                    }

                                    var listHtml = [];
                                    var lisDataFilesName = [];

                                    if (item.ColHtmlArray.length > 0 && item.ListNameFileArray.length > 0) {
                                        listHtml = item.ColHtmlArray;
                                        lisDataFilesName = item.ListNameFileArray;
                                    }


                                    $.each(selectedFiles, function (index, item) {

                                        var d = new Date();
                                        var n = d.getTime();
                                        selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;

                                        //console.log(selectedFiles[index], selectedFiles[index].name);

                                        dataFiles.push(selectedFiles[index]);
                                        lisDataFilesName.push(selectedFiles[index].nameNew);
                                        var tmppath = URL.createObjectURL(selectedFiles[index]);
                                        if (endFile(selectedFiles[index].nameNew)) {
                                            //listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            listHtml.push('<div class="ULH"><img class="IMG" src="' + tmppath + '"height="42" width="42" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" onclick="myFunction_201(this)"><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                        }
                                        //else {
                                        //    listHtml.push('<div class="ULH" style ="vertical-align: middle; padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                        //}
                                    });
                                    item.DataFiles = dataFiles;
                                    item.ColHtmlArray = listHtml;
                                    item.ListNameFileArray = lisDataFilesName;
                                    item.ColHtml = listHtml.join(' ');
                                    item.ListNameFile = lisDataFilesName.join(',');
                                    if (check_trehan_uphinh == 0) {
                                        item.check_trehan = '0';
                                    }
                                    else {
                                        item.check_trehan = '1';
                                    }
                                }
                            });
                            //console.log(listHtml);
                            hot.render();
                            $(this).val('');
                            //console.log(rowline, rowCol);
                        }
                        else {
                            var rowline = $(this).attr('data-value');
                            var selectedFiles = $(this)[0].files;
                            //console.log(selectedFiles)
                            $.each(l_Data_Handsontable, function (index, item) {
                                if (rowline == index) {
                                    var dataFiles = [];

                                    if (item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles !== '' && item.DataFiles.length > 0) {
                                        dataFiles = item.DataFiles;
                                    }

                                    //var listHtml = item.ColHtmlArray;
                                    //var lisDataFilesName = item.ListNameFileArray;
                                    var listHtml = [];
                                    var lisDataFilesName = [];

                                    if (item.ColHtmlArray.length > 0 && item.ListNameFileArray.length > 0) {
                                        listHtml = item.ColHtmlArray;
                                        lisDataFilesName = item.ListNameFileArray;
                                    }

                                    $.each(selectedFiles, function (index, item) {

                                        var d = new Date();
                                        var n = d.getTime();
                                        selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;

                                        //console.log(selectedFiles[index], selectedFiles[index].name);

                                        dataFiles.push(selectedFiles[index]);
                                        lisDataFilesName.push(selectedFiles[index].nameNew);
                                        var tmppath = URL.createObjectURL(selectedFiles[index]);
                                        if (endFile(selectedFiles[index].nameNew)) {
                                            //listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            listHtml.push('<div class="ULH"><img class="IMG" src="' + tmppath + '"height="42" width="42" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" onclick="myFunction_201(this)"><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                        }
                                        //else {
                                        //    listHtml.push('<div class="ULH" style ="vertical-align: middle; padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                        //}
                                    });
                                    item.DataFiles = dataFiles;
                                    item.ColHtmlArray = listHtml;
                                    item.ListNameFileArray = lisDataFilesName;
                                    item.ColHtml = listHtml.join(' ');
                                    item.ListNameFile = lisDataFilesName.join(',');
                                    if (check_trehan_uphinh == 0) {
                                        item.check_trehan = '0';
                                    }
                                    else {
                                        item.check_trehan = '1';
                                    }
                                }
                            });
                            hot.render();
                            $(this).val('');
                            //console.log(rowline, rowCol);
                        }
                    });
                    function strip_tags(input, allowed) {
                        var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                            commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                        // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                        allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                        return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                            return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                        });
                    }
                    function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                        var escaped = Handsontable.helper.stringify(value);
                        escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                        td.innerHTML = escaped;
                        td.style.textAlign = 'left';
                        return td;
                    }

                    //console.log(l_Data_Handsontable)

                    $('#UpAnhTrehan').click(function () { // xử lý nút oke form up hình trễ hạn
                        var row = $(this).val();
                        //alert(row);
                        $('#uploadDetails').attr('data-value', row).attr('data-id', 'UploadHinh');
                        $('#uploadDetails').val('');
                        $('#uploadDetails').trigger('click');
                        $('#Mymodal_kiemhangonline').modal('hide');

                    });

                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: l_Data_Handsontable,
                            //================================Cols=======
                            //maxCols: 8,
                            //minCols: 8,
                            startCols: 8,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 8,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 8,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 1,
                            startRows: 5,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: true,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: true,
                            //hiddenColumns: {
                            //    columns: [5],
                            //    indicators: true
                            //},
                            //mergeCells: [
                            //  { row: 0, col: 6, rowspan: respone.length, colspan: 1 },
                            //  { row: 0, col: 7, rowspan: respone.length, colspan: 1 }
                            //],
                            //====================================Oder ==============================================
                            colHeaders:
                                [
                                    'Mã shop inside',
                                    'Tên shop ',
                                    'Người kiểm kê',
                                    'Ngày kiểm kê',
                                    'Model kiểm',
                                    //'SL tồn kho',
                                    'Shop nhập SL model kiểm',//Edit đổi tên - LuanNT44 - 19/05/2018 - 201 - Kiểm hàng online
                                    'Up tất cả hình ảnh model',
                                    'Hình ảnh đính kèm'
                                ],
                            columns: [

                                { data: "MaShop", type: 'text', className: 'htLeft', width: 200, readOnly: true },
                                { data: "TenShop", type: 'text', className: 'htLeft', width: 300, readOnly: true },
                                { data: "NguoiKiemKe", type: 'autocomplete', source: arrNameEmp, strict: false, className: 'htLeft', width: 300, readOnly: check_quyen },
                                {
                                    data: "NgayKiemKe", type: 'date',
                                    dateFormat: 'DD/MM/YYYY',
                                    width: 300,
                                    correctFormat: true,
                                    readOnly: check_quyen
                                },
                                { data: "ModelKiem", type: 'autocomplete', source: arrmodelkiem, strict: false, width: 210, className: 'htLeft', readOnly: check_quyen, },//Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                //{ data: "SLtonkho", type: 'numeric', className: 'htLeft', readOnly: true },
                                { data: "SoLuongModelKiem", type: 'numeric', className: 'htLeft', width: 200, readOnly: check_quyen },
                                { data: "UploadHinh", type: 'text', editor: false, renderer: actionRendererUpload_201, width: 200, className: 'htLeft' },
                                { data: "ColHtml", editor: false, type: 'text', className: 'htLeft', renderer: safeHtmlRenderer, width: 470 } // Edit - LuanNT44 - Thay đổi độ rộng khung hình
                            ],
                            afterChange: function (changes, source) {
                                if (changes == null) {
                                    return;
                                }
                                else (changes != null)
                                {
                                    $.each(changes, function (index, item) {
                                        if (item[1] == 'NguoiKiemKe') {

                                            //console.log(1, WarehouseCodeData, 2, WarehouseNameData)

                                            var Tam = hot.getDataAtRowProp(item[0], 'NguoiKiemKe');
                                            if (Tam !== null && Tam !== '' && Tam !== undefined) {
                                                hot.setDataAtRowProp(item[0], 'MaShop', WarehouseCodeData)
                                                hot.setDataAtRowProp(item[0], 'TenShop', WarehouseNameData)
                                                hot.setDataAtRowProp(item[0], 'NgayKiemKe', date)
                                            }
                                            else {
                                                hot.alter('remove_row', item[0]);
                                            }

                                            hot.render();
                                        }
                                        if (item[1] === 'NgayKiemKe') {
                                            var d = new Date()
                                            var dateHT = new Date(d.getFullYear() + '/' + (d.getMonth() + 1) + '/' + d.getDate())
                                            var dateCh = new Date(item[3].split("/")[2] + '/' + item[3].split("/")[1] + '/' + item[3].split("/")[0])
                                            if (dateCh < dateHT) {
                                                XFunction.RenderMessage('error', 'Không thể chọn ngày trong quá khứ, <br>Hệ thống tự chọn ngày hiện tại');
                                                hot.setDataAtRowProp(item[0], 'NgayKiemKe', dateHT);
                                            };
                                        }
                                        //if (item[1] === 'ModelKiem')
                                        //{
                                        //    var dataAll2 = $.grep(hot.getSettings().data, function (item, index) { // lấy tất cả các dòng trên lưới có 1 trường có dữ liệu
                                        //        return ((item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined));
                                        //    });

                                        //    $.each(dataAll2, function (index, item) {

                                        //        var TenModel = item.ModelKiem;

                                        //        var modelkiem = $.grep(l_Data_Handsontable_2, function (item1) {
                                        //            if (item1.TenModel === TenModel) {
                                        //                return item;
                                        //            }
                                        //        });

                                        //        var sum_modelkiem = 0;
                                        //        $.each(modelkiem, function (index, item2) {
                                        //            sum_modelkiem += item2.SLTonKhoImei;
                                        //        });

                                        //        if(modelkiem.length > 0)
                                        //        {
                                        //            hot.setDataAtRowProp(item[0], 'SoLuongModelKiem', sum_modelkiem);
                                        //        }
                                        //    });
                                        // }

                                        //if (item[1] === 'ModelKiem')
                                        //{
                                        //    var Tam = hot.getDataAtRowProp(item[0], 'ModelKiem');
                                        //    var imei = Tam.split('--')[1];
                                        //    var SL = $.grep(l_Data_Handsontable_2, function (item) {
                                        //        if(item.ImeiSP === imei)
                                        //        {
                                        //            return item;
                                        //        }
                                        //    });
                                        //    var SL_tonkho = 0;
                                        //    if (SL.length > 0)
                                        //    {
                                        //        SL_tonkho = SL[0].SLTonKhoImei;
                                        //    }

                                        //    //alert(SL_tonkho)
                                        //    hot.setDataAtRowProp(item[0], 'SLtonkho', SL_tonkho);

                                        //}

                                        //var Dem = hot.getData().length
                                        ////hot.mergeCells([{ row: 0, col: 6, rowspan: Dem, colspan: 1 }])

                                        //hot.mergeCells = new Handsontable.MergeCells([{ row: 0, col: 6, rowspan: Dem - 3, colspan: 1 },{ row: 0, col: 7, rowspan: Dem - 3, colspan: 1 }]);
                                        hot.render();
                                    });
                                }
                            },
                        };
                    };

                    hot = new Handsontable(container, setting());

                    if (CL.StepNo != 1) {
                        myFunction_201 = function (data) {        //gọi modal slide ảnh
                            $(".carousel-inner").empty();
                            var NameIMG = $(data).context.dataset.lisdatafilesname; // lấy tên từ html (data-...)
                            var indexL = $(data).context.dataset.id;
                            var NameValue = $(data).context.dataset.value;

                            var dataSlideAnh = [];
                            dataSlideAnh = hot.getSettings().data; // lấy all dữ liệu

                            var RowSlideAnh = $.grep(dataSlideAnh, function (item, index) {// lấy line có ảnh click
                                if (index == indexL) {
                                    return item;
                                }
                            });
                            var ListImageArrSlide = RowSlideAnh[0].ListNameFileArray;
                            var ListImageArrSlide_2 = $.grep(ListImageArrSlide, function (item_img) { // chỉ lấy file có đuôi ảnh
                                return endFile(item_img);
                            });
                            //console.log(ListImageArrSlide_2)
                            // console.log(RowSlideAnh[0].ListNameFileArray.length)


                            $('.carousel-inner').append('<div class="active item"><img src="/Uploads/FileAttachs/' + NameIMG + '" style="width:100%" /></div>')
                            for (var i = 0; i < ListImageArrSlide_2.length; i++) {
                                $('.carousel-inner').append('<div class="item"><img src="/Uploads/FileAttachs/' + ListImageArrSlide_2[i] + '" style="width:100%" /></div>')
                            }
                            $('#Mymodal_slideKiemhangOnline').modal('show');
                        }
                    }

                    //hot.selectCell(0, 0, 0, 0);               

                    var captionHot2 = '<div id="downloadEX" >Xuất file Exel</div>';

                    //$('#captionHot2').html(captionHot2).css('font-weight', 'bold').css('color', 'blue').css('cursor', 'pointer').css('margin-top', '10px').css('display', 'block');

                    var getData = (function () {
                        var data = [];
                        data = l_Data_Handsontable_2;
                        return function () {
                            var page = parseInt(window.location.hash.replace('#', ''), 10) || 1,
                                limit = 20,
                                row = (page - 1) * limit,
                                count = page * limit,
                                part = [];
                            for (; row < count; row++) {
                                part.push(data[row]);
                            }
                            return part;
                        }
                    })();

                    var $$ = function (id) { return document.getElementById(id); },
                        container2 = $$('handsontableEx2'), hot2;

                    var setting2 = function () {
                        return {
                            //=================================Data=======
                            data: getData(),
                            //================================Cols=======
                            //maxCols: 16,
                            //minCols: 16,
                            //startCols: 16,
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: false,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 16,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 16,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            //startRows: 10,
                            //viewportRowRenderingOffset : 'auto',
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: false,

                            //====================================Oder ==============================================
                            colHeaders:
                                [
                                    'Mã sản phẩm ',
                                    'Tên model',    //Add - LuanNT44 - 31/05/2018 - 201 - thêm cột báo cáo detail
                                    'Tên sản phẩm',
                                    'Imei SP',
                                    'Số lượng tồn kho của Model' //Edit đổi tên - LuanNT44 - 19/05/2018 - 201 - Kiểm hàng online
                                ],
                            columns: [

                                { data: "MaSP", type: 'text', className: 'htLeft', readOnly: true },
                                { data: "TenModel", type: 'text', className: 'htLeft', readOnly: true },//Add - LuanNT44 - 31/05/2018 - 201 - thêm cột báo cáo detail
                                { data: "TenSP", type: 'text', className: 'htLeft', readOnly: true },
                                { data: "ImeiSP", type: 'text', className: 'htLeft', readOnly: true },
                                { data: "SLTonKhoImei", type: 'text', className: 'htLeft', readOnly: true }
                            ],
                        };
                    };

                    if (l_Data_Handsontable_2.length > 0) {
                        $('#captionHot2').html(captionHot2).css('font-weight', 'bold').css('color', 'blue').css('cursor', 'pointer').css('margin-top', '10px').css('display', 'block');
                        hot2 = new Handsontable(container2, setting2());
                    }


                    $("#handsontableEx2").addClass('htColumnHeaders');

                    var KQ = l_Data_Handsontable_2.length / 20;
                    var SoTrang = Math.ceil(KQ);
                    for (var i = 1; i <= SoTrang; i++) {
                        if (i == window.location.hash.replace('#', '')) {
                            $('.pagination').append('<a class="Trang TrangAction" href="#' + i + '">' + i + '</a>')
                        }
                        else {
                            $('.pagination').append('<a class="Trang" href="#' + i + '">' + i + '</a>')
                        }

                    }
                    $('.Trang').click(function (index, item) {
                        var data = [];
                        data = l_Data_Handsontable_2;
                        var limit = 20,
                            row = (this.hash.substr(1) - 1) * limit,
                            count = this.hash.substr(1) * limit,
                            part = [];
                        for (; row < count; row++) {
                            part.push(data[row]);
                        }
                        hot2.loadData(part);
                        console.log()
                        hot2.render();
                        $('.Trang').removeClass('TrangAction')
                        $(this).addClass('TrangAction');
                    });


                    //var captionHot3 = '<div class="pagination" style="display:block;margin-top:5px;margin-bottom:5px"><a href="#1">1</a> <a href="#2">2</a><a href="#3">3</a><a href="#4">4</a><a href="#5">5</a><a href="#6">6</a></div>';

                    //$('#captionHot3').html(captionHot3).css('color', 'blue');

                    //Handsontable.dom.addEvent(window, 'hashchange', function (event) {
                    //    hot2.loadData(getData());
                    //});


                    //var IdRequest = respone[0].RequestId;
                    var IdRequest = CL.Id;

                    //console.log(hot.getSettings().data)
                    //console.log(hot.getData())

                    $btnComment.on('click', function () {
                        //console.log(l_Data_Handsontable)
                        //return;
                        var data = new FormData();
                        var dataReturn = [];

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });
                        var myData = hot.getSettings().data == undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                            return item.RequestDID !== null && item.RequestDID !== undefined && item.RequestDID !== ''
                        });

                        var message = $('#Message').val();

                        if (message.length == 0) {
                            XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                        }
                        else {

                            if (check_quyen_Old == false) {
                                var check_SLupload = 0;
                                //console.log(dataAll2)
                                $.each(myData, function (index, item) {
                                    //▼ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                    var flag = 0;
                                    var TenModel = item.ModelKiem;

                                    var modelkiem = $.grep(l_Data_Handsontable_2, function (item1) {
                                        if (item1.TenModel === TenModel) {
                                            return item;
                                        }
                                    });
                                    //console.log(modelkiem); return;
                                    var sum_modelkiem = 0;
                                    $.each(modelkiem, function (index, item2) {
                                        sum_modelkiem += item2.SLTonKhoImei;
                                    });

                                    //console.log(sum_modelkiem); return;

                                    var LisNameImageArr = $.grep(item.ListNameFileArray, function (item_img) {
                                        return endFile(item_img);
                                    });

                                    if (modelkiem.length == 0) {
                                        if (LisNameImageArr.length < item.SoLuongModelKiem) {
                                            check_SLupload++;
                                        }
                                    }
                                    else {
                                        if (LisNameImageArr.length < sum_modelkiem) {
                                            check_SLupload++;
                                        }
                                    }

                                    //▲ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                });
                                //alert(check_SLupload)
                                //return;
                                if (check_SLupload > 0) {
                                    XFunction.RenderMessage('error', 'Vui lòng upload số lượng hình bằng số lượng tồn kho sản phẩm!'); return;
                                }
                                else {


                                    $.each(myData, function (index, item) {
                                        var NguoiKiemKe = item.NguoiKiemKe.split('-')[0];
                                        dataReturn.push({
                                            Row: index,
                                            RequestId: IdRequest,
                                            RequestDId: item.RequestDID,
                                            MaShop: item.MaShop,
                                            TenShop: item.TenShop,
                                            NguoiKiemKe: NguoiKiemKe,
                                            ModelKiem: item.ModelKiem,
                                            NgayKiemKe: item.NgayKiemKe,
                                            SoLuongModelKiem: item.SoLuongModelKiem,
                                            ListNameFile: item.ListNameFile,
                                            check_trehan: item.check_trehan,
                                        });
                                        if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                                            $.each(item.DataFiles, function (cout, element) {
                                                data.append(element.nameNew, element);
                                            });
                                        }
                                    });


                                    $('#Details').val(JSON.stringify(dataReturn));
                                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                                    data.append("Details", $('#Details').val());
                                    data.append("DetailsCc", $('#DetailsCc').val());
                                    data.append("RequestId", $('#RequestId').val());
                                    data.append("Message", $('#Message').val());
                                    data.append("ImageValidate", $('#ImageValidate').val());
                                    data.append("fileUpload", $('#fileUpload').val());

                                    //var form = $("form#form-detail");
                                    //form.attr("action", "/Requests/ChangeStep");
                                    //form.submit();
                                    $.ajax({
                                        type: "POST",
                                        url: "/Requests/SaveUploadedFileDetailMultiple_201",
                                        contentType: false,
                                        processData: false,
                                        data: data,
                                        success: function (result) {
                                            if (result.error === 0) {
                                                var form = $("form#form-detail");
                                                form.attr("action", "/Requests/Conversation");
                                                form.submit();
                                            }
                                            else {
                                                $('#myModalWatting').modal('hide');
                                                XFunction.RenderMessage('error', 'Lưu file không thành công');
                                                return;
                                            }
                                        },
                                        error: function () {
                                            $('#myModalWatting').modal('hide');
                                            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                            return;
                                        }
                                    });
                                }
                            }
                            else if (CL.StepNo == 1) {
                                if (myData.length == 0) {
                                    var data2 = new FormData();
                                    var dataReturn2 = [];

                                    var dataAll2 = $.grep(hot.getSettings().data, function (item, index) { // lấy tất cả các dòng trên lưới có 1 trường có dữ liệu
                                        return ((item.NguoiKiemKe !== null && item.NguoiKiemKe !== '' && item.NguoiKiemKe !== undefined)
                                            || (item.NgayKiemKe !== null && item.NgayKiemKe !== '' && item.NgayKiemKe !== undefined)
                                            || (item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined)
                                            || (item.SoLuongModelKiem !== null && item.SoLuongModelKiem !== '' && item.SoLuongModelKiem !== undefined)
                                            || (item.ColHtml !== null && item.ColHtml !== '' && item.ColHtml !== undefined));
                                    });
                                    var check2 = $.grep(hot.getSettings().data, function (item, index) { // lấy các dòng trên lưới có đầy đủ dữ liệu
                                        return ((item.NguoiKiemKe !== null && item.NguoiKiemKe !== '' && item.NguoiKiemKe !== undefined)
                                            && (item.NgayKiemKe !== null && item.NgayKiemKe !== '' && item.NgayKiemKe !== undefined)
                                            && (item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined)
                                            && (item.SoLuongModelKiem !== null && item.SoLuongModelKiem !== '' && item.SoLuongModelKiem !== undefined)
                                            && (item.ColHtml !== null && item.ColHtml !== '' && item.ColHtml !== undefined));
                                    });

                                    if (check2.length != dataAll2.length || dataAll2 === null || dataAll2.length == 0) {
                                        XFunction.RenderMessage('error', 'Dữ liệu chi tiết chưa đầy đủ! Vui lòng nhập đầy đủ chi tiết!'); return;
                                    }
                                    else {

                                        var check_SLupload = 0;
                                        //console.log(hot.getSettings().data)
                                        $.each(dataAll2, function (index, item) {
                                            //▼ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                            var flag = 0;
                                            var TenModel = item.ModelKiem;

                                            var modelkiem = $.grep(l_Data_Handsontable_2, function (item1) {
                                                if (item1.TenModel === TenModel) {
                                                    return item;
                                                }
                                            });
                                            //console.log(modelkiem); return;
                                            var sum_modelkiem = 0;
                                            $.each(modelkiem, function (index, item2) {
                                                sum_modelkiem += item2.SLTonKhoImei;
                                            });

                                            //console.log(sum_modelkiem); return;

                                            //console.log(item.ListNameFileArray)
                                            var LisNameImageArr = $.grep(item.ListNameFileArray, function (item_img) {
                                                return endFile(item_img);
                                            });

                                            if (modelkiem.length == 0) {
                                                if (LisNameImageArr.length < item.SoLuongModelKiem) {
                                                    check_SLupload++;
                                                }
                                            }
                                            else {
                                                if (LisNameImageArr.length < sum_modelkiem) {
                                                    check_SLupload++;
                                                }
                                            }

                                            //▲ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                        });
                                        //alert(check_SLupload)
                                        //return;
                                        if (check_SLupload > 0) {
                                            XFunction.RenderMessage('error', 'Vui lòng upload số lượng hình bằng số lượng tồn kho sản phẩm!'); return;
                                        }
                                        else {

                                            $('#myModal').modal('show');

                                            $.each(dataAll2, function (index, item) {
                                                var NguoiKiemKe = item.NguoiKiemKe.split('-')[0];
                                                dataReturn2.push({
                                                    Row: index,
                                                    RequestId: IdRequest,
                                                    RequestDId: item.RequestDID,
                                                    MaShop: item.MaShop,
                                                    TenShop: item.TenShop,
                                                    NguoiKiemKe: NguoiKiemKe,
                                                    ModelKiem: item.ModelKiem,
                                                    NgayKiemKe: item.NgayKiemKe,
                                                    SoLuongModelKiem: item.SoLuongModelKiem,
                                                    ListNameFile: item.ListNameFile,
                                                    check_trehan: item.check_trehan,
                                                });
                                                if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                                                    $.each(item.DataFiles, function (cout, element) {
                                                        data2.append(element.nameNew, element);
                                                    });
                                                }
                                            });


                                            $('#Details').val(JSON.stringify(dataReturn2));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            data2.append("Details", $('#Details').val());
                                            data2.append("DetailsCc", $('#DetailsCc').val());
                                            data2.append("RequestId", $('#RequestId').val());
                                            data2.append("Message", $('#Message').val());
                                            data2.append("ImageValidate", $('#ImageValidate').val());
                                            data2.append("fileUpload", $('#fileUpload').val());

                                            $.ajax({
                                                type: "POST",
                                                url: "/Requests/CreateCalllogKiemHang_Uphinh_Step",
                                                contentType: false,
                                                processData: false,
                                                data: data2,
                                                success: function (result) {
                                                    if (result.error === 0) {
                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/Conversation");
                                                        form.submit();
                                                    }
                                                    else {
                                                        $('#myModalWatting').modal('hide');
                                                        XFunction.RenderMessage('error', 'Lưu file không thành công');
                                                        return;
                                                    }
                                                },
                                                error: function (jqXHR, exception) {
                                                    $('#myModalWatting').modal('hide');
                                                    XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                                    var msg = '';
                                                    if (jqXHR.status === 0) {
                                                        msg = 'Not connect.\n Verify Network.';
                                                    } else if (jqXHR.status == 404) {
                                                        msg = 'Requested page not found. [404]';
                                                    } else if (jqXHR.status == 500) {
                                                        msg = 'Internal Server Error [500].';
                                                    } else if (exception === 'parsererror') {
                                                        msg = 'Requested JSON parse failed.';
                                                    } else if (exception === 'timeout') {
                                                        msg = 'Time out error.';
                                                    } else if (exception === 'abort') {
                                                        msg = 'Ajax request aborted.';
                                                    } else {
                                                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                                    }
                                                    alert(msg);

                                                    return;
                                                }
                                            });
                                        }
                                    };
                                }
                                else {
                                    // bản đã có dữ liệu trao đổi trước đó

                                    var data3 = new FormData();
                                    var dataReturn3 = [];
                                    var data4 = new FormData();
                                    var dataReturn4 = [];


                                    var dataAll3 = $.grep(hot.getSettings().data, function (item, index) { // lấy tất cả các dòng trên lưới có 1 trường có dữ liệu
                                        return ((item.NguoiKiemKe !== null && item.NguoiKiemKe !== '' && item.NguoiKiemKe !== undefined)
                                            || (item.NgayKiemKe !== null && item.NgayKiemKe !== '' && item.NgayKiemKe !== undefined)
                                            || (item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined)
                                            || (item.SoLuongModelKiem !== null && item.SoLuongModelKiem !== '' && item.SoLuongModelKiem !== undefined)
                                            || (item.ColHtml !== null && item.ColHtml !== '' && item.ColHtml !== undefined));
                                    });
                                    var check3 = $.grep(hot.getSettings().data, function (item, index) { // lấy các dòng trên lưới có đầy đủ dữ liệu
                                        return ((item.NguoiKiemKe !== null && item.NguoiKiemKe !== '' && item.NguoiKiemKe !== undefined)
                                            && (item.NgayKiemKe !== null && item.NgayKiemKe !== '' && item.NgayKiemKe !== undefined)
                                            && (item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined)
                                            && (item.SoLuongModelKiem !== null && item.SoLuongModelKiem !== '' && item.SoLuongModelKiem !== undefined)
                                            && (item.ColHtml !== null && item.ColHtml !== '' && item.ColHtml !== undefined));
                                    });

                                    if (check3.length != dataAll3.length || dataAll3 === null || dataAll3.length == 0) {
                                        XFunction.RenderMessage('error', 'Dữ liệu chi tiết chưa đầy đủ! Vui lòng nhập đầy đủ chi tiết!'); return;
                                    }
                                    else {

                                        var check_SLupload = 0;
                                        //console.log(dataAll2)
                                        $.each(dataAll3, function (index, item) {
                                            //▼ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                            var flag = 0;
                                            var TenModel = item.ModelKiem;

                                            var modelkiem = $.grep(l_Data_Handsontable_2, function (item1) {
                                                if (item1.TenModel === TenModel) {
                                                    return item;
                                                }
                                            });
                                            //console.log(modelkiem); return;
                                            var sum_modelkiem = 0;
                                            $.each(modelkiem, function (index, item2) {
                                                sum_modelkiem += item2.SLTonKhoImei;
                                            });

                                            //console.log(sum_modelkiem); return;
                                            var LisNameImageArr = $.grep(item.ListNameFileArray, function (item_img) {
                                                return endFile(item_img);
                                            });

                                            if (modelkiem.length == 0) {
                                                if (LisNameImageArr.length < item.SoLuongModelKiem) {
                                                    check_SLupload++;
                                                }
                                            }
                                            else {
                                                if (LisNameImageArr.length < sum_modelkiem) {
                                                    check_SLupload++;
                                                }
                                            }

                                            //▲ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                        });
                                        //alert(check_SLupload)
                                        //return;
                                        if (check_SLupload > 0) {
                                            XFunction.RenderMessage('error', 'Vui lòng upload số lượng hình bằng số lượng tồn kho sản phẩm!'); return;
                                        }
                                        else {
                                            $('#myModal').modal('show');
                                            //console.log(dataAll3);

                                            var data_old = $.grep(dataAll3, function (item) { // lấy dữ liệu cũ load từ database
                                                return item.RequestDID !== null && item.RequestDID !== '' && item.RequestDID !== undefined;
                                            });
                                            var data_new = $.grep(dataAll3, function (item) { // lấy dữ liệu mới nhập
                                                return item.RequestDID === null || item.RequestDID === '' || item.RequestDID === undefined;
                                            });

                                            //console.log(data_old);
                                            // console.log(data_new);

                                            // return;

                                            $.each(data_old, function (index, item) { // Dữ liệu đã có
                                                var NguoiKiemKe = item.NguoiKiemKe.split('-')[0];
                                                dataReturn3.push({
                                                    Row: index,
                                                    RequestId: item.RequestId,
                                                    RequestDId: item.RequestDID,
                                                    MaShop: item.MaShop,
                                                    TenShop: item.TenShop,
                                                    NguoiKiemKe: NguoiKiemKe,
                                                    ModelKiem: item.ModelKiem,
                                                    NgayKiemKe: item.NgayKiemKe,
                                                    SoLuongModelKiem: item.SoLuongModelKiem,
                                                    ListNameFile: item.ListNameFile,
                                                    check_trehan: item.check_trehan,
                                                });
                                                if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                                                    $.each(item.DataFiles, function (cout, element) {
                                                        data3.append(element.nameNew, element);
                                                    });
                                                }
                                            });

                                            $.each(data_new, function (index, item) { // Dữ liệu mới nhập
                                                var NguoiKiemKe = item.NguoiKiemKe.split('-')[0];
                                                dataReturn4.push({
                                                    Row: index,
                                                    RequestId: IdRequest,
                                                    RequestDId: item.RequestDID,
                                                    MaShop: item.MaShop,
                                                    TenShop: item.TenShop,
                                                    NguoiKiemKe: NguoiKiemKe,
                                                    ModelKiem: item.ModelKiem,
                                                    NgayKiemKe: item.NgayKiemKe,
                                                    SoLuongModelKiem: item.SoLuongModelKiem,
                                                    ListNameFile: item.ListNameFile,
                                                    check_trehan: item.check_trehan,
                                                });
                                                if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                                                    $.each(item.DataFiles, function (cout, element) {
                                                        data4.append(element.nameNew, element);
                                                    });
                                                }
                                            });

                                            // up hình cũ

                                            $('#Details').val(JSON.stringify(dataReturn3));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            data3.append("Details", $('#Details').val());
                                            data3.append("DetailsCc", $('#DetailsCc').val());
                                            data3.append("RequestId", $('#RequestId').val());
                                            data3.append("Message", $('#Message').val());
                                            data3.append("ImageValidate", $('#ImageValidate').val());
                                            data3.append("fileUpload", $('#fileUpload').val());

                                            $.ajax({
                                                type: "POST",
                                                url: "/Requests/SaveUploadedFileDetailMultiple_201",
                                                contentType: false,
                                                processData: false,
                                                data: data3,
                                                success: function (result) {
                                                    if (result.error === 0) {
                                                        var form = $("form#form-detail");
                                                        form.attr("action", "/Requests/Conversation");
                                                        form.submit();
                                                    }
                                                    else {
                                                        $('#myModalWatting').modal('hide');
                                                        XFunction.RenderMessage('error', 'Lưu file không thành công');
                                                        return;
                                                    }
                                                },
                                                error: function () {
                                                    $('#myModalWatting').modal('hide');
                                                    XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                                    return;
                                                }
                                            });

                                            // up hình mới

                                            // $('#Details').val(JSON.stringify(dataReturn4));
                                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                                            // data4.append("Details", $('#Details').val());
                                            data4.append("Details", JSON.stringify(dataReturn4));
                                            data4.append("DetailsCc", $('#DetailsCc').val());
                                            data4.append("RequestId", $('#RequestId').val());
                                            data4.append("Message", $('#Message').val());
                                            data4.append("ImageValidate", $('#ImageValidate').val());
                                            data4.append("fileUpload", $('#fileUpload').val());

                                            $.ajax({
                                                type: "POST",
                                                url: "/Requests/CreateCalllogKiemHang_Uphinh_Step", // up hinh mới 
                                                contentType: false,
                                                processData: false,
                                                data: data4,
                                                success: function (result) {
                                                    if (result.error === 0) {
                                                        //var form = $("form#form-detail");
                                                        //form.attr("action", "/Requests/Conversation");
                                                        //form.submit();
                                                    }
                                                    else {
                                                        $('#myModalWatting').modal('hide');
                                                        XFunction.RenderMessage('error', 'Lưu file không thành công');
                                                        return;
                                                    }
                                                },
                                                error: function () {
                                                    $('#myModalWatting').modal('hide');
                                                    XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                                    return;
                                                }
                                            });
                                        }
                                    };


                                }

                            }
                            else {
                                //alert(2)
                                $('#Details').val(JSON.stringify(myData));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Conversation");
                                form.submit();
                            }

                        }

                    });

                    $btnChangeStep.on('click', function () {


                        var myData = hot.getSettings().data == undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                            return item.RequestDID !== null && item.RequestDID !== undefined && item.RequestDID !== ''
                        });
                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        if (myData.length == 0) {
                            var data2 = new FormData();
                            var dataReturn2 = [];

                            var dataAll2 = $.grep(hot.getSettings().data, function (item, index) { // lấy tất cả các dòng trên lưới có 1 trường có dữ liệu
                                return ((item.NguoiKiemKe !== null && item.NguoiKiemKe !== '' && item.NguoiKiemKe !== undefined)
                                    || (item.NgayKiemKe !== null && item.NgayKiemKe !== '' && item.NgayKiemKe !== undefined)
                                    || (item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined)
                                    || (item.SoLuongModelKiem !== null && item.SoLuongModelKiem !== '' && item.SoLuongModelKiem !== undefined)
                                    || (item.ColHtml !== null && item.ColHtml !== '' && item.ColHtml !== undefined));
                            });
                            var check2 = $.grep(hot.getSettings().data, function (item, index) { // lấy các dòng trên lưới có đầy đủ dữ liệu
                                return ((item.NguoiKiemKe !== null && item.NguoiKiemKe !== '' && item.NguoiKiemKe !== undefined)
                                    && (item.NgayKiemKe !== null && item.NgayKiemKe !== '' && item.NgayKiemKe !== undefined)
                                    && (item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined)
                                    && (item.SoLuongModelKiem !== null && item.SoLuongModelKiem !== '' && item.SoLuongModelKiem !== undefined)
                                    && (item.ColHtml !== null && item.ColHtml !== '' && item.ColHtml !== undefined));
                            });



                            if (check2.length != dataAll2.length || dataAll2 === null || dataAll2.length == 0) {
                                XFunction.RenderMessage('error', 'Dữ liệu chi tiết chưa đầy đủ! Vui lòng nhập đầy đủ chi tiết!'); return;
                            }
                            else {

                                var check_SLupload = 0;
                                //console.log(dataAll2)
                                $.each(dataAll2, function (index, item) {
                                    //▼ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                    var flag = 0;
                                    var TenModel = item.ModelKiem;

                                    var modelkiem = $.grep(l_Data_Handsontable_2, function (item1) {
                                        if (item1.TenModel === TenModel) {
                                            return item;
                                        }
                                    });
                                    //console.log(modelkiem); return;
                                    var sum_modelkiem = 0;
                                    $.each(modelkiem, function (index, item2) {
                                        sum_modelkiem += item2.SLTonKhoImei;
                                    });

                                    //console.log(sum_modelkiem); return;
                                    var LisNameImageArr = $.grep(item.ListNameFileArray, function (item_img) {
                                        return endFile(item_img);
                                    });

                                    if (modelkiem.length == 0) {
                                        if (LisNameImageArr.length < item.SoLuongModelKiem) {
                                            check_SLupload++;
                                        }
                                    }
                                    else {
                                        if (LisNameImageArr.length < sum_modelkiem) {
                                            check_SLupload++;
                                        }
                                    }


                                    //▲ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                });


                                if (check_SLupload > 0) {
                                    XFunction.RenderMessage('error', 'Vui lòng upload số lượng hình bằng số lượng tồn kho sản phẩm!'); return;
                                }


                                $('#myModal').modal('show');

                                $.each(dataAll2, function (index, item) {
                                    var NguoiKiemKe = item.NguoiKiemKe.split('-')[0];
                                    dataReturn2.push({
                                        Row: index,
                                        RequestId: IdRequest,
                                        RequestDId: item.RequestDID,
                                        MaShop: item.MaShop,
                                        TenShop: item.TenShop,
                                        NguoiKiemKe: NguoiKiemKe,
                                        ModelKiem: item.ModelKiem,
                                        NgayKiemKe: item.NgayKiemKe,
                                        SoLuongModelKiem: item.SoLuongModelKiem,
                                        ListNameFile: item.ListNameFile,
                                        check_trehan: item.check_trehan,
                                    });
                                    if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                                        $.each(item.DataFiles, function (cout, element) {
                                            data2.append(element.nameNew, element);
                                        });
                                    }
                                });


                                $('#Details').val(JSON.stringify(dataReturn2));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                data2.append("Details", $('#Details').val());
                                data2.append("DetailsCc", $('#DetailsCc').val());
                                data2.append("RequestId", $('#RequestId').val());
                                data2.append("Message", $('#Message').val());
                                data2.append("ImageValidate", $('#ImageValidate').val());
                                data2.append("fileUpload", $('#fileUpload').val());

                                $.ajax({
                                    type: "POST",
                                    url: "/Requests/CreateCalllogKiemHang_Uphinh_Step",
                                    contentType: false,
                                    processData: false,
                                    data: data2,
                                    success: function (result) {
                                        if (result.error === 0) {
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/ChangeStep");
                                            form.submit();
                                        }
                                        else {
                                            $('#myModalWatting').modal('hide');
                                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                                            return;
                                        }
                                    },
                                    error: function () {
                                        $('#myModalWatting').modal('hide');
                                        XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                        return;
                                    }
                                });
                            };
                        }
                        else {
                            // bản đã có dữ liệu trao đổi trước đó

                            var data3 = new FormData();
                            var dataReturn3 = [];
                            var data4 = new FormData();
                            var dataReturn4 = [];


                            var dataAll3 = $.grep(hot.getSettings().data, function (item, index) { // lấy tất cả các dòng trên lưới có 1 trường có dữ liệu
                                return ((item.NguoiKiemKe !== null && item.NguoiKiemKe !== '' && item.NguoiKiemKe !== undefined)
                                    || (item.NgayKiemKe !== null && item.NgayKiemKe !== '' && item.NgayKiemKe !== undefined)
                                    || (item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined)
                                    || (item.SoLuongModelKiem !== null && item.SoLuongModelKiem !== '' && item.SoLuongModelKiem !== undefined)
                                    || (item.ColHtml !== null && item.ColHtml !== '' && item.ColHtml !== undefined));
                            });
                            var check3 = $.grep(hot.getSettings().data, function (item, index) { // lấy các dòng trên lưới có đầy đủ dữ liệu
                                return ((item.NguoiKiemKe !== null && item.NguoiKiemKe !== '' && item.NguoiKiemKe !== undefined)
                                    && (item.NgayKiemKe !== null && item.NgayKiemKe !== '' && item.NgayKiemKe !== undefined)
                                    && (item.ModelKiem !== null && item.ModelKiem !== '' && item.ModelKiem !== undefined)
                                    && (item.SoLuongModelKiem !== null && item.SoLuongModelKiem !== '' && item.SoLuongModelKiem !== undefined)
                                    && (item.ColHtml !== null && item.ColHtml !== '' && item.ColHtml !== undefined));
                            });

                            if (check3.length != dataAll3.length || dataAll3 === null || dataAll3.length == 0) {
                                XFunction.RenderMessage('error', 'Dữ liệu chi tiết chưa đầy đủ! Vui lòng nhập đầy đủ chi tiết!'); return;
                            }
                            else {

                                var check_SLupload = 0;
                                //console.log(dataAll2)
                                $.each(dataAll3, function (index, item) {
                                    //▼ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                    var flag = 0;
                                    var TenModel = item.ModelKiem;

                                    var modelkiem = $.grep(l_Data_Handsontable_2, function (item1) {
                                        if (item1.TenModel === TenModel) {
                                            return item;
                                        }
                                    });
                                    //console.log(modelkiem); return;
                                    var sum_modelkiem = 0;
                                    $.each(modelkiem, function (index, item2) {
                                        sum_modelkiem += item2.SLTonKhoImei;
                                    });

                                    //console.log(sum_modelkiem); return;
                                    var LisNameImageArr = $.grep(item.ListNameFileArray, function (item_img) {
                                        return endFile(item_img);
                                    });

                                    if (modelkiem.length == 0) {
                                        if (LisNameImageArr.length < item.SoLuongModelKiem) {
                                            check_SLupload++;
                                        }
                                    }
                                    else {
                                        if (LisNameImageArr.length < sum_modelkiem) {
                                            check_SLupload++;
                                        }
                                    }
                                    //▲ Edit - LuanNT44 - 31/05/2018 - Loại: 201 - Edit số lượng tồn kho KH online
                                });
                                //alert(check_SLupload)
                                if (check_SLupload > 0) {
                                    XFunction.RenderMessage('error', 'Vui lòng upload số lượng hình bằng số lượng tồn kho sản phẩm!'); return;
                                }


                                $('#myModal').modal('show');
                                //console.log(dataAll3);

                                var data_old = $.grep(dataAll3, function (item) { // lấy dữ liệu cũ load từ database
                                    return item.RequestDID !== null && item.RequestDID !== '' && item.RequestDID !== undefined;
                                });
                                var data_new = $.grep(dataAll3, function (item) { // lấy dữ liệu mới nhập
                                    return item.RequestDID === null || item.RequestDID === '' || item.RequestDID === undefined;
                                });

                                //console.log(data_old);
                                //console.log(data_new);

                                //return;

                                $.each(data_old, function (index, item) { // Dữ liệu đã có
                                    var NguoiKiemKe = item.NguoiKiemKe.split('-')[0];
                                    dataReturn3.push({
                                        Row: index,
                                        RequestId: item.RequestId,
                                        RequestDId: item.RequestDID,
                                        MaShop: item.MaShop,
                                        TenShop: item.TenShop,
                                        NguoiKiemKe: NguoiKiemKe,
                                        ModelKiem: item.ModelKiem,
                                        NgayKiemKe: item.NgayKiemKe,
                                        SoLuongModelKiem: item.SoLuongModelKiem,
                                        ListNameFile: item.ListNameFile,
                                        check_trehan: item.check_trehan,
                                    });
                                    if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                                        $.each(item.DataFiles, function (cout, element) {
                                            data3.append(element.nameNew, element);
                                        });
                                    }
                                });

                                $.each(data_new, function (index, item) { // Dữ liệu mới nhập
                                    var NguoiKiemKe = item.NguoiKiemKe.split('-')[0];
                                    dataReturn4.push({
                                        Row: index,
                                        RequestId: IdRequest,
                                        RequestDId: item.RequestDID,
                                        MaShop: item.MaShop,
                                        TenShop: item.TenShop,
                                        NguoiKiemKe: NguoiKiemKe,
                                        ModelKiem: item.ModelKiem,
                                        NgayKiemKe: item.NgayKiemKe,
                                        SoLuongModelKiem: item.SoLuongModelKiem,
                                        ListNameFile: item.ListNameFile,
                                        check_trehan: item.check_trehan,
                                    });
                                    if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                                        $.each(item.DataFiles, function (cout, element) {
                                            data4.append(element.nameNew, element);
                                        });
                                    }
                                });
                                //console.log(dataReturn3);
                                //console.log(dataReturn4);
                                //return;
                                // up hình cũ

                                $('#Details').val(JSON.stringify(dataReturn3));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                data3.append("Details", $('#Details').val());
                                data3.append("DetailsCc", $('#DetailsCc').val());
                                data3.append("RequestId", $('#RequestId').val());
                                data3.append("Message", $('#Message').val());
                                data3.append("ImageValidate", $('#ImageValidate').val());
                                data3.append("fileUpload", $('#fileUpload').val());

                                $.ajax({
                                    type: "POST",
                                    url: "/Requests/SaveUploadedFileDetailMultiple_201",
                                    contentType: false,
                                    processData: false,
                                    data: data3,
                                    success: function (result) {
                                        if (result.error === 0) {
                                            var form = $("form#form-detail");
                                            form.attr("action", "/Requests/ChangeStep");
                                            form.submit();
                                        }
                                        else {
                                            $('#myModalWatting').modal('hide');
                                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                                            return;
                                        }
                                    },
                                    error: function () {
                                        $('#myModalWatting').modal('hide');
                                        XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                        return;
                                    }
                                });

                                // up hình mới

                                //$('#Details').val(JSON.stringify(dataReturn4));
                                $('#DetailsCc').val(JSON.stringify(myDataCc));
                                //data4.append("Details", $('#Details').val());
                                data4.append("Details", JSON.stringify(dataReturn4));
                                data4.append("DetailsCc", $('#DetailsCc').val());
                                data4.append("RequestId", $('#RequestId').val());
                                data4.append("Message", $('#Message').val());
                                data4.append("ImageValidate", $('#ImageValidate').val());
                                data4.append("fileUpload", $('#fileUpload').val());

                                $.ajax({
                                    type: "POST",
                                    url: "/Requests/CreateCalllogKiemHang_Uphinh_Step", // up hinh mới 
                                    contentType: false,
                                    processData: false,
                                    data: data4,
                                    success: function (result) {
                                        if (result.error === 0) {
                                            //var form = $("form#form-detail");
                                            //form.attr("action", "/Requests/ChangeStep");
                                            //form.submit();
                                        }
                                        else {
                                            $('#myModalWatting').modal('hide');
                                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                                            return;
                                        }
                                    },
                                    error: function () {
                                        $('#myModalWatting').modal('hide');
                                        XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                        return;
                                    }
                                });
                            };


                        }

                    });

                    $btnComplete.on('click', function () {
                        var data = new FormData();
                        var dataReturn = [];

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        var myData = hot.getSettings().data == undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                            return item.RequestDId !== null && item.RequestDId !== undefined && item.RequestDId !== ''
                        });

                        $('#myModal').modal('show');
                        $.each(myData, function (index, item) {
                            var NguoiKiemKe = item.NguoiKiemKe.split('-')[0];
                            dataReturn.push({
                                Row: index,
                                RequestId: IdRequest,
                                RequestDId: item.RequestDID,
                                MaShop: item.MaShop,
                                TenShop: item.TenShop,
                                NguoiKiemKe: NguoiKiemKe,
                                ModelKiem: item.ModelKiem,
                                NgayKiemKe: item.NgayKiemKe,
                                SoLuongModelKiem: item.SoLuongModelKiem,
                                ListNameFile: item.ListNameFile,
                                check_trehan: item.check_trehan,
                            });
                            if (item.DataFiles !== '' && item.DataFiles !== null && item.DataFiles !== undefined && item.DataFiles.length > 0) {
                                $.each(item.DataFiles, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            }
                        });

                        $('#Details').val(JSON.stringify(dataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        data.append("Details", $('#Details').val());
                        data.append("DetailsCc", $('#DetailsCc').val());
                        data.append("RequestId", $('#RequestId').val());
                        data.append("Message", $('#Message').val());
                        data.append("ImageValidate", $('#ImageValidate').val());
                        $.ajax({
                            type: "POST",
                            url: "/Requests/SaveUploadedFileDetailMultiple_201", // up hinh mới 
                            contentType: false,
                            processData: false,
                            data: data,
                            success: function (result) {
                                if (result.error === 0) {
                                    var form = $("form#form-detail");
                                    form.attr("action", "/Requests/Complete");
                                    form.submit();
                                }
                                else {
                                    $('#myModalWatting').modal('hide');
                                    XFunction.RenderMessage('error', 'Lưu file không thành công');
                                    return;
                                }
                            },
                            error: function () {
                                $('#myModalWatting').modal('hide');
                                XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                                return;
                            }
                        });


                    });

                    $('#downloadEX').on('click', function () {
                        var myData = hot.getSettings().data == undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                            return item.Id !== null && item.Id !== undefined && item.Id !== ''
                        });
                        $('#Details').val(JSON.stringify(myData));
                        var form = $("form#form-detail");
                        form.attr("action", "/Report/GetReportDetailsExcel_KiemhangOnline");
                        form.submit();
                    });

                });
            });
        });
    };
    //▲  Add - LuanNT44 - 09/04/2018 - Loại 201 - Kiểm hàng online

    //▼ Add - NghiaTV5 -26/01/2018 - Bảo Hành Máy Củ
    function contruct_198() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [], Note = [], Status = [];//HisNoiDungGiaiTrinh;
            Note.push('Chưa liên hệ KH', 'Đã liên hệ KH'); Status.push('Không trễ hạn', 'Trễ hạn ')
            dataHandsontable = respone;

            //$.each(respone, function (index, item) {
            //    HisNoiDungGiaiTrinh = item.NoiDungGiaiTrinh.split(":")
            // });
            //console.log(HisNoiDungGiaiTrinh.length);
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            if (CL.StepNo == '1') {
                check = false;
            }
            //▼ Add - NghiaTV5 -31/01/2018 - Bảo Hành Máy Củ 198
            var checkgiaitrinh = true;
            if (CL.StepNo == '2' && Ass == CL.Assigner) {
                checkgiaitrinh = false;
            }
            //▲ Add - NghiaTV5 -31/01/2018 - Bảo Hành Máy Củ 198
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        [
                            'Duyệt',
                            'Không duyệt',
                            'Nhập giải trình',
                            'Nội dung giải trình',
                            'Số phiếu BH',
                            'Tên sản phẩm',
                            'Imei',
                            'Phí sửa chữa',
                            'Nội dung',
                            'Hạn phản hồi'// Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ
                        ],
                    columns: [
                        {
                            data: 'Duyet', type: 'checkbox', width: 100, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: !check,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (g_FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            } // duyệt/ không duyệt
                        },
                        {
                            data: 'KhongDuyet', type: 'checkbox', width: 100, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: !check,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (g_FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);

                            } // duyệt/ không duyệt
                        },
                        { data: "NhapGiaiTrinh", type: 'text', className: 'htLeft', readOnly: !checkgiaitrinh },// giải trình
                        {
                            data: "NoiDungGiaiTrinh", type: 'text', className: 'htLeft', readOnly: true,
                            renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                var Idpro = instance.getDataAtRowProp(row, 'Id');
                                var Status = instance.getDataAtRowProp(row, 'Status');
                                var HaveConvertation = instance.getDataAtRowProp(row, 'HaveConvertation');
                                var $btnnoidunggiaitrinh = '';
                                if (HaveConvertation == '1') {
                                    $btnnoidunggiaitrinh = $('<i style="cursor: pointer; color:red; margin-left: 10px;" id="Pro" data-value="' + Idpro + '" class="fa  fa-comments-o" aria-hidden="true" ></i>');// Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ
                                }
                                else {
                                    $btnnoidunggiaitrinh = $('<i style="cursor: pointer; color:Green; margin-left: 10px;" id="Pro" data-value="' + Idpro + '" class="fa  fa-comments-o" aria-hidden="true" ></i>');// Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ
                                }

                                $btnnoidunggiaitrinh.click(function () {
                                    $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: Idpro }, function (responedetail) {
                                        console.log(responedetail);
                                        if (Idpro !== null && Idpro !== undefined && Idpro !== '') {

                                            if (responedetail.length > 0) {
                                                var html = ''; var dem = 0;
                                                $.each(responedetail, function (index, item) {
                                                    if (item.Message !== "" && item.Message !== undefined && item.Message !== null) {
                                                        dem = dem + 1;
                                                        html += '<tr>';
                                                        html += '<td>' + item.Message + '</td>';
                                                        html += '</tr>';
                                                    }
                                                });

                                                $('#noi-dung-198').html(html);
                                                $('#modal198').modal('show');
                                            }
                                            else {
                                                XFunction.RenderMessage("error", "không có lịch sử giải trình "); return;
                                            }
                                        }
                                        else {
                                            XFunction.RenderMessage("error", "Mã calllog này không tồn tại !"); return;
                                            return;
                                        }
                                    });
                                });
                                $(td).empty().append($btnnoidunggiaitrinh);
                            }
                        },// nội dung giải trình 
                        { data: "Property1", type: 'text', className: 'htLeft', readOnly: true },// Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ
                        { data: 'ProductName', type: 'text', className: 'htLeft', readOnly: true },// tên sản phẩm 
                        { data: 'Property2', type: 'text', className: 'htLeft', readOnly: true },// số Imei
                        {
                            data: 'Money1', type: 'numeric', format: '0,0 ', className: 'htLeft', readOnly: true
                        },// chi phí sữa chữa 
                        { data: "NoiDung", type: 'text', className: 'htLeft', readOnly: true, },// nội dung 
                        { data: "HanPhanHoi", type: 'text', className: 'htLeft', readOnly: true, },// Add - NghiaTV5 - 30/01/2018 - Bảo Hành Máy Củ
                    ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            if (col === 'Duyet' && newValue === 1) {
                                hot.setDataAtRowProp(row, 'KhongDuyet', 0, 'not');
                            }
                            if (col === 'KhongDuyet' && newValue === 1) {
                                hot.setDataAtRowProp(row, 'Duyet', 0, 'not');
                            }
                        });
                    },
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== ''
                });
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return;
                }
                var dataGiaiTrinh = [];
                var dem = 0;
                //if (CL.StepNo == '2')
                //{
                //    $.each(myData, function (index, item) {
                //            if (item.Duyet !== 1 && item.KhongDuyet !== 1) {
                //                dem++;
                //            }
                //        });
                //    if (dem > 0) {
                //        XFunction.RenderMessage('error', 'Vui lòng chọn <b>"Duyệt"</b> hoặc <b>"Không Duyệt"</b> !'); return;
                //    }
                //}

                if (CL.Status === '4') {// Edit - NghiaTV5 - 01/02/2018 - CL.Status === '4' 198
                    XFunction.RenderMessage('error', 'Callog đã hoàn tất thao tác thất bại !'); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Duyet: (!!item.Duyet && item.Duyet == 1) ? true : false,
                        GiaiTrinh: item.NhapGiaiTrinh == null ? '' : item.NhapGiaiTrinh
                    });
                });
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });

            $btnChangeStep.on('click', function () {
                var giaitrinh = 0;//nghiatv5  - giaitrinh
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== ''
                });
                //nghiatv5  - giaitrinh
                $.each(myData, function (index, item) {
                    if (item.NhapGiaiTrinh === '' || item.NhapGiaiTrinh === null || item.NhapGiaiTrinh === undefined) {
                        giaitrinh++;
                    }
                });
                if (giaitrinh > 0) {
                    XFunction.RenderMessage('error', 'Vui lòng nhập giải trình  !'); return;
                }
                //nghiatv5  - giaitrinh
                var dem = 0;
                if (CL.StepNo == '2') {
                    $.each(myData, function (index, item) {
                        if (item.Duyet !== 1 && item.KhongDuyet !== 1) {
                            dem++;
                        }
                    });
                    if (dem > 0) {
                        XFunction.RenderMessage('error', 'Vui lòng chọn <b>"Duyệt"</b> hoặc <b>"Không Duyệt"</b> !'); return;
                    }
                }
                if (CL.Status === '4') { // Edit - NghiaTV5 - 01/02/2018 - CL.Status === '4' 198
                    XFunction.RenderMessage('error', 'Callog đã hoàn tất thao tác thất bại !'); return;
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Duyet: (!!item.Duyet && item.Duyet == 1) ? true : false,
                        GiaiTrinh: item.NhapGiaiTrinh == null ? '' : item.NhapGiaiTrinh
                    });
                });
                console.log(datareturn);
                //return false; 
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();


            });


            $btnComplete.on('click', function () {

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== ''
                });
                var Validation = [], dem = 0;
                if (CL.StepNo == 2) {
                    $.each(myData, function (index, item) {
                        if (item.Duyet !== 1 && item.KhongDuyet !== 1) {
                            dem++;
                        }
                    }); console.log(myData);
                    if (dem > 0) {
                        XFunction.RenderMessage('error', 'Vui lòng chọn <b>"Duyệt"</b> hoặc <b>"Không Duyệt"</b> !'); return;
                    }
                }
                var datareturn = [];
                $.each(myData, function (index, item) {
                    datareturn.push({
                        Id: item.Id,
                        Duyet: (!!item.Duyet && item.Duyet == 1) ? true : false,
                        GiaiTrinh: item.NhapGiaiTrinh == null ? '' : item.NhapGiaiTrinh
                    });
                });
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    };
    //▲ Add - NghiaTV5 -26/01/2018 - Bảo Hành Máy Củ
    //▼  Add - LuanNT44 - 22/01/2018 - Loại 199 - Danh sách Imei cần gỡ Knox 
    function contruct_199() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        [
                            'Imei cần gỡ Knox',
                            'Số SO POS',
                            'Số điện thoại',
                            'Ngày thực hiện',
                            'Tên shop',
                            'Số phiếu BH',
                            'Lý do gỡ'
                        ],
                    columns: [

                        { data: "Imei", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "SO_POS", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "SDT", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "NgayThucHien", type: 'text', className: 'htLeft', readOnly: true, },
                        { data: "TenShop", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "SoPhieuBH", type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'LyDoGo', type: 'text', className: 'htLeft', readOnly: true }
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);

            //▼  Add - LuanNT44 - 26/01/2018 - Loại 199 - Thêm comment và complete 
            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
        //▲  Add - LuanNT44 - 26/01/2018 - Loại 199 - Thêm comment và complete
    };
    //▲  Add - LuanNT44 - 22/01/2018 - Loại 199 - Danh sách Imei cần gỡ Knox   
    //▼  Add - LuanNT44 - 27/01/2018 - Loại 200 - Chuyển cọc đơn hàng ecom 
    function contruct_200() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 16,
                    minCols: 16,
                    startCols: 16,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        [
                            'Số Ecom cũ',
                            'Số SO cũ',
                            'Tên sản phẩm ',
                            'Số tiền thanh toán online',
                            'Số Ecom mới'
                        ],
                    columns: [

                        { data: "Ecom_old", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "SO_old", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "TenSanPham", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "TienThanhToanOnline", type: 'text', className: 'htLeft', readOnly: true },
                        { data: "Ecom_new", type: 'text', className: 'htLeft' }
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);


            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.RequestDId !== null && item.RequestDId !== undefined && item.RequestDId !== ''
                });
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });



            //if (CL.Status == "4") {
            //    XFunction.RenderMessage("error", "Calllog hoàn tất không trao đổi được ! "); return false;
            //}      


            $btnComplete.on('click', function () {

                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.RequestDId !== null && item.RequestDId !== undefined && item.RequestDId !== ''
                });

                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();

            });
        });
    };
    //▲  Add - LuanNT44 - 27/01/2018 - Loại 200 - Chuyển cọc đơn hàng ecom

    //▼ Add - NghiaTV5 - 06/03/2018 - We Love nội bộ
    function contruct_203() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            $.each(dataHandsontable, function (index, item) {
                if (item.Id != null && item.Id != undefined && item.Id != '') {
                    document.getElementById('Loai203').innerHTML = item.Name == '' ? "Không" : item.Name;
                    document.getElementById('BoPhanDuocDanhGia203').innerHTML = item.BoPhan == '' ? "Không" : item.BoPhan;
                    document.getElementById('TieuChiDanhGia203').innerHTML = item.DanhGia == '' ? "Không" : item.DanhGia;
                    document.getElementById('MoTaChiTiet203').innerHTML = item.MoTa == '' ? "Không" : item.MoTa;
                }

            });
            //var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            //$.each(permissons, function (index, item) {
            //    if (item == 'sender')
            //        permisstion.isSender = true;
            //    if (item == 'assigner')
            //        permisstion.isAssiner = true;
            //    if (item == 'groupAssigner')
            //        permisstion.isGroupAssiner = true;
            //});
            //var check = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            //if (CL.StepNo == '1') {
            //    check = false;
            //}
            $btnComment.on('click', function () {

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :("); return;
                }
                var datareturn = [];

                datareturn.push({
                    Id: CL.Id,
                    Status: "4"
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                $('#Details').val(JSON.stringify(datareturn));
                console.log(datareturn)
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    };
    //▲ Add - NghiaTV5 - 06/03/2018 - We Love nội bộ
    function contruct_204() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $.get('/Requests/Get_PhongBan_ChotCR', function (phongban) {
                $.get('/Requests/GetCatagoryTree', { type: 204 }, function (hethong) {
                    var arr_HeThong = [];
                    $.each(hethong, function (index, item) { //Lấy hệ thống
                        arr_HeThong.push(item.Name);
                    });

                    var phong = $.grep(phongban, function (item) {
                        if (item.parent == '#') {
                            return item;
                        }
                    });

                    var arrPhongBan = [];
                    var arrNhomHT = [];
                    $.each(phong, function (index, item) { //lấy danh sách phòng ban
                        arrPhongBan.push(item.codename)
                    });

                    function addDays(dateObj, numDays) { // hàm tính cộng ngày                  
                        var dateHT = dateObj;
                        dateHT.setDate(dateObj.getDate() + numDays);
                        return dateHT;
                    }

                    var dataHandsontable = [];
                    dataHandsontable = respone;

                    var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };

                    $.each(permissons, function (index, item) {
                        if (item == 'sender')
                            permisstion.isSender = true;
                        if (item == 'assigner')
                            permisstion.isAssiner = true;
                        if (item == 'groupAssigner')
                            permisstion.isGroupAssiner = true;
                    });

                    var check_sender = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;

                    var check_step_1 = true; //Kiểm tra bước Calllog bước 1
                    if (CL.StepNo == 1) {
                        if (check_sender == true) {
                            check_step_1 = false;
                        }

                    }

                    var check_step_2 = true; //Kiểm tra bước Calllog
                    if (CL.StepNo == 2) {
                        if (check_sender == true) {
                            check_step_2 = false;
                        }

                    }

                    var check_step_3 = true; //Kiểm tra bước Calllog
                    if (CL.StepNo == 3) {
                        if (check_sender == true) {
                            check_step_3 = false;
                        }
                    }

                    var check_step1_Uutien = true;
                    if (check_step_1 == false || check_step_3 == false) {
                        check_step1_Uutien = false;
                    }

                    var check_step_2_ngaychotYC = true;
                    if (check_step_2 == false || check_step_3 == false) {
                        check_step_2_ngaychotYC = false;
                    }

                    var datatrangthai = ['Chốt YC', 'Nhận YC', 'GOLIVE CANCEL', 'PENDING', 'UAT']; //trạng thái

                    var list_KPI = ['ĐẠT', 'KHÔNG ĐẠT'];                                           // list KPI

                    var list_Uutien = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: dataHandsontable,
                            //================================Cols=======
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: false,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 16,
                            currentColClassName: 'currentCol',
                            fixedColumnsLeft: 2,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 16,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: false,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: false,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: true,
                            //====================================Oder ==============================================
                            colHeaders:
                                [
                                    'Mã ID',
                                    'Phòng ban',
                                    'Nhóm hệ thống',
                                    'Người yêu cầu',
                                    'Hệ thống',
                                    'Nội dung yêu cầu',
                                    'Mô tả yêu cầu',
                                    'Ngày yêu cầu',
                                    'Ngày chốt YC',
                                    'Ngày dự kiến UAT',
                                    'Ngày dự kiến GoLive',
                                    'Ngày thực tế UAT',
                                    'Ngày thực tế GoLive',
                                    'Trạng thái',
                                    'KPI',
                                    'Ưu tiên',
                                    'Ghi chú',
                                    'Tháng tính KPI',
                                    'Tháng làm CR'
                                ],
                            columns: [
                                { data: "MaID", type: 'text', className: 'htCenter', readOnly: check_step_3 },
                                { data: "PhongBan", type: 'autocomplete', width: 300, source: arrPhongBan, strict: true, allowInvalid: false, className: 'htCenter', readOnly: check_step_3 },
                                { data: "NhomHeThong", type: 'autocomplete', strict: true, allowInvalid: false, width: 200, className: 'htCenter', readOnly: check_step_3 },
                                { data: "NguoiYC", type: 'text', className: 'htCenter', readOnly: true },
                                { data: "He_Thong", type: 'autocomplete', width: 100, source: arr_HeThong, strict: true, allowInvalid: false, className: 'htCenter', readOnly: check_step_3 },
                                { data: "NoiDungYC", type: 'text', width: 300, className: 'htLeft', readOnly: true },
                                { data: "MoTaYC", type: 'text', width: 300, className: 'htLeft', readOnly: true },
                                { data: "NgayYC", type: 'date', dateFormat: 'DD/MM/YYYY', correctFormat: true, readOnly: true },
                                { data: "NgayChotYC", type: 'date', dateFormat: 'DD/MM/YYYY', correctFormat: true, readOnly: check_step_2_ngaychotYC },
                                { data: "NgayDuKienUAT", type: 'date', dateFormat: 'DD/MM/YYYY', correctFormat: true, readOnly: check_step_3 },
                                { data: "NgayDuKienGoLive", type: 'date', dateFormat: 'DD/MM/YYYY', correctFormat: true, readOnly: check_step_3 },
                                { data: "NgayThucTeUAT", type: 'date', dateFormat: 'DD/MM/YYYY', correctFormat: true, readOnly: check_step_2_ngaychotYC },
                                { data: "NgayThucTeGoLive", type: 'date', dateFormat: 'DD/MM/YYYY', correctFormat: true, readOnly: check_step_2_ngaychotYC },
                                { data: "TrangThai", type: 'autocomplete', width: 200, className: 'htCenter', source: datatrangthai, strict: true, allowInvalid: false, readOnly: check_step_3 },
                                { data: "KPI", type: 'autocomplete', width: 150, className: 'htCenter', source: list_KPI, strict: true, allowInvalid: false, readOnly: check_step_3 },
                                {
                                    data: "Uutien",
                                    type: 'autocomplete', width: 100, className: 'htCenter', source: list_Uutien, strict: true, allowInvalid: false, readOnly: check_step1_Uutien
                                },
                                { data: "GhiChu", type: 'text', className: 'htLeft', readOnly: check_step_3 },
                                { data: "ThangTinhKPI", type: 'numeric', className: 'htCenter', readOnly: check_step_3 },
                                { data: "ThangLamCR", type: 'numeric', className: 'htCenter', readOnly: check_step_3 }
                            ],
                            afterChange: function (changes, source) {
                                if (changes == null) {
                                    return;
                                }
                                else (changes != null)
                                {
                                    var instance = this;
                                    $.each(changes, function (index, item) {
                                        if (item[1] == 'ThangTinhKPI') {
                                            if (item[3] < 1 || item[3] > 12) {
                                                XFunction.RenderMessage("error", "Bạn phải nhập tháng 1->12 ! :("); return;
                                            }
                                        }

                                        if (item[1] == 'ThangLamCR') {
                                            if (item[3] < 1 || item[3] > 12) {
                                                XFunction.RenderMessage("error", "Bạn phải nhập tháng 1->12 ! :("); return;
                                            }
                                        }
                                        if (item[1] == 'Uutien') {
                                            if (isNaN(item[3]) == true) {
                                                XFunction.RenderMessage('error', 'Dữ liệu nhập không phải số !! Bạn vui lòng chọn lại !!');
                                                hot.setDataAtRowProp(item[0], 'Uutien', '');
                                            }
                                            else {
                                                var GetDS_uutien = [];

                                                GetDS_uutien = $.grep(hot.getDataAtCol(15), function (item) {
                                                    return item !== null && item !== '' && item !== undefined;
                                                });  // lấy danh sách ưu tiên nhập vào
                                                var check_uutien = 0;

                                                for (var i = 0; i < GetDS_uutien.length; i++) {
                                                    //alert(item[3] + '-' + Get_DSid[i]);
                                                    if (item[3] == GetDS_uutien[i])      // so sánh ưu tiên mới nhập với danh sách ưu tiên
                                                    {
                                                        check_uutien++;
                                                    }
                                                }
                                                if (check_uutien > 1) // giá trị mới nhập vào sẽ bị trùng
                                                {
                                                    XFunction.RenderMessage('error', 'Trùng ưu tiên !! Bạn vui lòng chọn lại !!');
                                                    hot.setDataAtRowProp(item[0], 'Uutien', '');
                                                }
                                                hot.render();
                                            }
                                        }
                                        if (item[1] == 'MaID') {

                                            var Get_DSid = [];

                                            Get_DSid = $.grep(hot.getDataAtCol(0), function (item) {
                                                return item !== null && item !== '' && item !== undefined;
                                            });  // lấy danh sách mã ID nhập vào khác null

                                            var check_MaId = 0;

                                            for (var i = 0; i < Get_DSid.length; i++) {
                                                //alert(item[3] + '-' + Get_DSid[i]);
                                                if (item[3] == Get_DSid[i])      // so sánh mã ID mới nhập với danh sách mã ID
                                                {
                                                    check_MaId++;
                                                }
                                            }
                                            if (check_MaId > 1) // giá trị mới nhập vào sẽ bị trùng
                                            {
                                                XFunction.RenderMessage('error', 'Trùng mã ID !! Bạn vui lòng nhập lại !!');
                                                hot.setDataAtRowProp(item[0], 'MaID', '');
                                            }

                                            hot.render();
                                        }
                                        if (item[1] == 'PhongBan') {
                                            var PhongBanGoc = hot.getDataAtRowProp(0, 'PhongBan');
                                            var data = $.grep(hot.getData(), function (item, index) {
                                                return item.PhongBan !== null && item.PhongBan !== '' && item.PhongBan !== undefined
                                            });

                                            if (data.length > 1 && item[0] == 0) //hàng đầu tiên
                                            {
                                                for (var i = 1; i <= data.length - 1; i++) {
                                                    hot.setDataAtRowProp(i, 'PhongBan', item[3]); //set giá trị tất cả các hàng giống hàng đầu tiên
                                                }
                                                for (var j = 0; j < data.length; j++) {
                                                    hot.setDataAtRowProp(j, 'NhomHeThong', '');
                                                }
                                            }

                                            if (data.length == 1) //hàng đầu tiên
                                            {
                                                hot.setDataAtRowProp(0, 'NhomHeThong', '');
                                            }

                                            if (item[0] > 0 && item[3] !== PhongBanGoc)  // các hàng tiếp theo
                                            {
                                                hot.setDataAtRowProp(item[0], 'PhongBan', PhongBanGoc);
                                                XFunction.RenderMessage('error', 'Thay đổi vui lòng chọn hàng đầu tiên');
                                            }
                                            var MaPhongBan = item[3].split('-')[0].toString();
                                            var nhomht = $.grep(phongban, function (item) {
                                                if (item.parent == MaPhongBan) {
                                                    return item;
                                                }
                                            });

                                            var arrNhomHT1 = [];
                                            $.each(nhomht, function (index, item) {
                                                arrNhomHT1.push(item.codename)
                                            })
                                            if (arrNhomHT1.length > 0) {
                                                cellProperties = instance.getCellMeta(item[0], 2);
                                                cellProperties.source = arrNhomHT1;
                                            }
                                            hot.render();
                                        }
                                        if (item[1] == 'NhomHeThong') {
                                            var NhomHeThongGoc = hot.getDataAtRowProp(0, 'NhomHeThong');
                                            var data = $.grep(hot.getData(), function (item, index) {
                                                return item.NhomHeThong !== null && item.NhomHeThong !== '' && item.NhomHeThong !== undefined
                                            });

                                            if (data.length > 1 && item[0] == 0) //hàng đầu tiên
                                            {
                                                for (var i = 1; i <= data.length - 1; i++) {
                                                    hot.setDataAtRowProp(i, 'NhomHeThong', item[3]);
                                                }
                                            }

                                            if (item[0] > 0 && item[3] !== NhomHeThongGoc)  // các hàng tiếp theo
                                            {
                                                hot.setDataAtRowProp(item[0], 'NhomHeThong', NhomHeThongGoc);
                                                XFunction.RenderMessage('error', 'Thay đổi vui lòng chọn hàng đầu tiên');
                                            }
                                            hot.render();
                                        }
                                        if (item[1] == 'NgayChotYC') {
                                            var ngaychot = hot.getDataAtRowProp(item[0], 'NgayChotYC');
                                            var ngaychot_day = ngaychot.split('/')[0];
                                            var ngaychot_month = ngaychot.split('/')[1];
                                            var ngaychot_year = ngaychot.split('/')[2];

                                            var dt_chot = new Date(ngaychot_year, ngaychot_month - 1, ngaychot_day); // khởi tạo ngày chốt yêu cầu
                                            var dt_chot1 = new Date(ngaychot_year, ngaychot_month - 1, ngaychot_day); // khởi tạo ngày chốt yêu cầu

                                            var dateUAT = addDays(dt_chot, 27);
                                            var dateGoLive = addDays(dt_chot1, 30);

                                            var date_UAT = (dateUAT.getDate() < 10 ? "0" + dateUAT.getDate() : dateUAT.getDate()) + '/' + ((dateUAT.getMonth() + 1) < 10 ? "0" + (dateUAT.getMonth() + 1) : (dateUAT.getMonth() + 1)) + '/' + dateUAT.getFullYear();
                                            var date_GoLive = (dateGoLive.getDate() < 10 ? "0" + dateGoLive.getDate() : dateGoLive.getDate()) + '/' + ((dateGoLive.getMonth() + 1) < 10 ? "0" + (dateGoLive.getMonth() + 1) : (dateGoLive.getMonth() + 1)) + '/' + dateGoLive.getFullYear();

                                            if (ngaychot !== null || ngaychot !== '' || ngaychot !== undefined) {
                                                hot.setDataAtRowProp(item[0], 'NgayDuKienUAT', date_UAT);
                                                hot.setDataAtRowProp(item[0], 'NgayDuKienGoLive', date_GoLive);
                                            }
                                            hot.render();
                                        }
                                        if (item[1] == 'NgayThucTeGoLive') {
                                            var ngayDKGolive = hot.getDataAtRowProp(item[0], 'NgayDuKienGoLive');
                                            var ngayDK_day = ngayDKGolive.split('/')[0];
                                            var ngayDK_month = ngayDKGolive.split('/')[1];
                                            var ngayDK_year = ngayDKGolive.split('/')[2];

                                            var ngayThucGolive = hot.getDataAtRowProp(item[0], 'NgayThucTeGoLive');
                                            var ngayThuc_day = ngayThucGolive.split('/')[0];
                                            var ngayThuc_month = ngayThucGolive.split('/')[1];
                                            var ngaythuc_year = ngayThucGolive.split('/')[2];
                                            if (ngaythuc_year > ngayDK_year || (ngaythuc_year == ngayDK_year && ngayThuc_month > ngayDK_month) || (ngaythuc_year == ngayDK_year && ngayThuc_month == ngayDK_month && ngayThuc_day > ngayDK_day)) {
                                                hot.setDataAtRowProp(item[0], 'KPI', 'KHÔNG ĐẠT');
                                            }
                                            else {
                                                hot.setDataAtRowProp(item[0], 'KPI', 'ĐẠT');
                                            }
                                            hot.render();
                                        }
                                    });
                                }
                            },
                        };
                    };
                    hot = new Handsontable(container, setting());
                    hot.selectCell(0, 0, 0, 0);

                    $btnComment.on('click', function () {
                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });
                        var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                            return item.Id !== null && item.Id !== undefined && item.Id !== ''
                        });

                        var message = $('#Message').val();
                        if (message.length == 0) {
                            XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                        }

                        var returntable = [];
                        $.each(myData, function (index, item) {
                            var PhongBan = item.PhongBan.split('-')[0];
                            var NguoiYC = item.NguoiYC.split('-')[0];
                            var NhomHeThong = item.NhomHeThong.split('-')[0];
                            var Ghichu = '';
                            if (item.GhiChu !== null && item.GhiChu !== undefined && item.GhiChu !== '') {
                                Ghichu = item.GhiChu
                            }
                            var mota = '';
                            if (item.MoTaYC !== null && item.MoTaYC !== undefined && item.MoTaYC !== '') {
                                mota = item.MoTaYC
                            }
                            returntable.push({
                                Row: index,
                                Id: item.Id,
                                MaID: item.MaID,
                                PhongBan: PhongBan,
                                NhomHeThong: NhomHeThong,
                                NguoiYC: NguoiYC,
                                He_Thong: item.He_Thong,
                                NoiDungYC: item.NoiDungYC,
                                MoTaYC: mota,
                                NgayChotYC: item.NgayChotYC,
                                NgayDuKienUAT: item.NgayDuKienUAT,
                                NgayDuKienGoLive: item.NgayDuKienGoLive,
                                NgayThucTeUAT: item.NgayThucTeUAT,
                                NgayThucTeGoLive: item.NgayThucTeGoLive,
                                TrangThai: item.TrangThai,
                                KPI: item.KPI,
                                Uutien: item.Uutien,
                                GhiChu: Ghichu,
                                ThangTinhKPI: item.ThangTinhKPI,
                                ThangLamCR: item.ThangLamCR
                            });
                        });

                        $('#Details').val(JSON.stringify(returntable));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    });
                    $btnChangeStep.on('click', function () {
                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));
                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });
                        var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                            return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                        });

                        var checkUTien = $.grep(myData, function (item, index) { //kiểm tra đã chọn trạng thái ưu tiên chưa
                            return (item.Uutien == 0 || item.Uutien == '' || item.Uutien === undefined || item.Uutien == null);
                        });

                        var checkUAT = $.grep(myData, function (item, index) { //kiểm tra đã chọn ngày thực tế UAT và ngày thực tế golive
                            return (item.NgayThucTeUAT == null || item.NgayThucTeUAT == '' || item.NgayThucTeUAT == undefined) || (item.NgayThucTeGoLive == null || item.NgayThucTeGoLive == '' || item.NgayThucTeGoLive == undefined)
                        });

                        if (checkUTien.length > 0) {
                            XFunction.RenderMessage("error", "Bạn chưa chọn trạng thái ưu tiên ! :("); return;
                        }
                        else if (checkUAT.length > 0 && check_step_2 == false) {
                            XFunction.RenderMessage("error", "Bạn phải chọn ngày thực tế UAT và Golive ! :("); return;
                        }
                        else {
                            var message = $("#Message").val();
                            $('#Details').val(JSON.stringify(myData));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/ChangeStep");
                            form.submit();
                        }
                    });
                    $btnReply.on('click', function () {
                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        var message = $("#Message").val();

                        var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                        });
                        var check_trangthai = $.grep(myData, function (item, index) { //kiểm tra đã chọn trạng thái,KPI, tháng KPI, tháng CR
                            return (item.TrangThai == null || item.TrangThai == '' || item.TrangThai == undefined) || (item.KPI == null || item.KPI == '' || item.KPI == undefined) ||
                                (item.ThangTinhKPI == null || item.ThangTinhKPI == '' || item.ThangTinhKPI == undefined) || (item.ThangLamCR == null || item.ThangLamCR == '' || item.ThangLamCR == undefined) ||
                                (item.MaID == null || item.MaID == '' || item.MaID == undefined) || (item.PhongBan == null || item.PhongBan == '' || item.PhongBan == undefined) ||
                                (item.He_Thong == null || item.He_Thong == '' || item.He_Thong == undefined) || (item.NgayChotYC == null || item.NgayChotYC == '' || item.NgayChotYC == undefined) ||
                                (item.Uutien == 0 || item.Uutien == '' || item.Uutien === undefined || item.Uutien == null) || (item.NgayThucTeUAT == null || item.NgayThucTeUAT == '' || item.NgayThucTeUAT == undefined) ||
                                (item.NgayThucTeGoLive == null || item.NgayThucTeGoLive == '' || item.NgayThucTeGoLive == undefined) || (item.NgayDuKienUAT == null || item.NgayDuKienUAT == '' || item.NgayDuKienUAT == undefined) ||
                                (item.NgayDuKienGoLive == null || item.NgayDuKienGoLive == '' || item.NgayDuKienGoLive == undefined)
                        });
                        if (check_trangthai.length > 0) {
                            XFunction.RenderMessage("error", "Bạn phải chọn đầy đủ thông tin trên lưới ! :("); return;
                        }
                        if (myData[0].ThangTinhKPI < 1 || myData[0].ThangTinhKPI > 12) {

                            XFunction.RenderMessage("error", "Bạn phải chọn tháng 1->12 ! :("); return;
                        }
                        if (myData[0].ThangLamCR < 1 || myData[0].ThangLamCR > 12) {
                            XFunction.RenderMessage("error", "Bạn phải chọn tháng 1->12 ! :("); return;
                        }

                        if (message.length == 0) {
                            XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                            return false;
                        } else {
                            var returntable = [];
                            $.each(myData, function (index, item) {
                                var PhongBan = item.PhongBan.split('-')[0];
                                var NguoiYC = item.NguoiYC.split('-')[0];
                                var NhomHeThong = item.NhomHeThong.split('-')[0];
                                var Ghichu = '';
                                if (item.GhiChu !== null && item.GhiChu !== undefined && item.GhiChu !== '') {
                                    Ghichu = item.GhiChu
                                }
                                var mota = '';
                                if (item.MoTaYC !== null && item.MoTaYC !== undefined && item.MoTaYC !== '') {
                                    mota = item.MoTaYC
                                }
                                returntable.push({
                                    Row: index,
                                    Id: item.Id,
                                    MaID: item.MaID,
                                    PhongBan: PhongBan,
                                    NhomHeThong: NhomHeThong,
                                    NguoiYC: NguoiYC,
                                    He_Thong: item.He_Thong,
                                    NoiDungYC: item.NoiDungYC,
                                    MoTaYC: mota,
                                    NgayChotYC: item.NgayChotYC,
                                    NgayDuKienUAT: item.NgayDuKienUAT,
                                    NgayDuKienGoLive: item.NgayDuKienGoLive,
                                    NgayThucTeUAT: item.NgayThucTeUAT,
                                    NgayThucTeGoLive: item.NgayThucTeGoLive,
                                    TrangThai: item.TrangThai,
                                    KPI: item.KPI,
                                    Uutien: item.Uutien,
                                    GhiChu: Ghichu,
                                    ThangTinhKPI: item.ThangTinhKPI,
                                    ThangLamCR: item.ThangLamCR
                                });
                            });
                            $('#Details').val(JSON.stringify(returntable));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Reply");
                            form.submit();
                        }
                    });
                    $btnComplete.on('click', function () {
                        var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                        $('#ImageValidate').val(checkedVals.join(","));

                        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                        });

                        var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                            return item.Id !== null && item.Id !== undefined && item.Id !== ''
                        });

                        var check_trangthai = $.grep(myData, function (item, index) { //kiểm tra đã chọn trạng thái,KPI, tháng KPI, tháng CR
                            return (item.TrangThai == null || item.TrangThai == '' || item.TrangThai == undefined) || (item.KPI == null || item.KPI == '' || item.KPI == undefined) ||
                                (item.ThangTinhKPI == null || item.ThangTinhKPI == '' || item.ThangTinhKPI == undefined) || (item.ThangLamCR == null || item.ThangLamCR == '' || item.ThangLamCR == undefined) ||
                                (item.MaID == null || item.MaID == '' || item.MaID == undefined) || (item.PhongBan == null || item.PhongBan == '' || item.PhongBan == undefined) ||
                                (item.He_Thong == null || item.He_Thong == '' || item.He_Thong == undefined) || (item.NgayChotYC == null || item.NgayChotYC == '' || item.NgayChotYC == undefined) ||
                                (item.Uutien == 0 || item.Uutien == '' || item.Uutien === undefined || item.Uutien == null) || (item.NgayThucTeUAT == null || item.NgayThucTeUAT == '' || item.NgayThucTeUAT == undefined) ||
                                (item.NgayThucTeGoLive == null || item.NgayThucTeGoLive == '' || item.NgayThucTeGoLive == undefined) || (item.NgayDuKienUAT == null || item.NgayDuKienUAT == '' || item.NgayDuKienUAT == undefined) ||
                                (item.NgayDuKienGoLive == null || item.NgayDuKienGoLive == '' || item.NgayDuKienGoLive == undefined)
                        });

                        if (check_trangthai.length > 0) {
                            XFunction.RenderMessage("error", "Bạn phải chọn đầy đủ các thông tin trên lưới ! :("); return;
                        }
                        if (myData[0].ThangTinhKPI < 1 || myData[0].ThangTinhKPI > 12) {
                            XFunction.RenderMessage("error", "Bạn phải chọn tháng 1->12 ! :("); return;
                        }
                        if (myData[0].ThangLamCR < 1 || myData[0].ThangLamCR > 12) {
                            XFunction.RenderMessage("error", "Bạn phải chọn tháng 1->12 ! :("); return;
                        }

                        var returntable = [];
                        $.each(myData, function (index, item) {
                            var PhongBan = item.PhongBan.split('-')[0];
                            var NguoiYC = item.NguoiYC.split('-')[0];
                            var NhomHeThong = item.NhomHeThong.split('-')[0];
                            var Ghichu = '';
                            if (item.GhiChu !== null && item.GhiChu !== undefined && item.GhiChu !== '') {
                                Ghichu = item.GhiChu
                            }
                            var mota = '';
                            if (item.MoTaYC !== null && item.MoTaYC !== undefined && item.MoTaYC !== '') {
                                mota = item.MoTaYC
                            }
                            returntable.push({
                                Row: index,
                                Id: item.Id,
                                MaID: item.MaID,
                                PhongBan: PhongBan,
                                NhomHeThong: NhomHeThong,
                                NguoiYC: NguoiYC,
                                He_Thong: item.He_Thong,
                                NoiDungYC: item.NoiDungYC,
                                MoTaYC: mota,
                                NgayChotYC: item.NgayChotYC,
                                NgayDuKienUAT: item.NgayDuKienUAT,
                                NgayDuKienGoLive: item.NgayDuKienGoLive,
                                NgayThucTeUAT: item.NgayThucTeUAT,
                                NgayThucTeGoLive: item.NgayThucTeGoLive,
                                TrangThai: item.TrangThai,
                                KPI: item.KPI,
                                Uutien: item.Uutien,
                                GhiChu: Ghichu,
                                ThangTinhKPI: item.ThangTinhKPI,
                                ThangLamCR: item.ThangLamCR
                            });
                        });

                        var message = $("#Message").val();
                        $('#Details').val(JSON.stringify(returntable));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Complete");
                        form.submit();
                    });
                });
            });
        });
    };

    //▼ChuongNT3 - 21/06/2018 - loại 205
    function contruct_205() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var l_Data_Handsontable = [];
            l_Data_Handsontable = respone;
            var idreqd = [];
            $.each(l_Data_Handsontable, function (index, item) {
                idreqd.push(l_Data_Handsontable[index].Id)
            })
            var rowf = '';
            var rowm = '';
            var rowsl = '';
            var cols = '';
            var rowline = 0;
            var optionsList = ['Hàng hóa có thể sửa chữa', 'Hàng hóa Mất, hư hỏng hoàn toàn', 'Hư hỏng Nhà cửa, vật kiến trúc, nội thất, biển hiệu', 'Thiệt hại gây ra cho bên thứ 3'];
            function readURL(input) {
                var tmppath = URL.createObjectURL(input);
                var win = window.open(tmppath, '_blank');
                if (win) {
                    win.focus();
                } else {
                    alert('Please allow popups for this site');
                }
            }
            function rendererFile_205(x, y, z) {
                if (endFile_205(x.split('/')[3]) == 1) {
                    y.push('<a href="' + x + '" target="_blank" class="renderlink" data-id="' + z + '" data-value="' + x.split('/')[3] + '"><img class="IMG" style="margin-bottom: 25px;" src="' + x + '" height="42" width="42"></a>')
                }
                else if (endFile_205(x.split('/')[3]) == 2) {
                    y.push('<a class="IMG fa fa-file-excel-o" style="font-size: 3em;" href="' + x + '" target="_blank" class="renderlink" data-id="' + z + '" data-value="' + x.split('/')[3] + '"></a>')
                }
                else if (endFile_205(x.split('/')[3]) == 3) {
                    y.push('<a class="IMG fa fa-file-zip-o" style="font-size: 3em;" href="' + x + '" target="_blank" class="renderlink" data-id="' + z + '" data-value="' + x.split('/')[3] + '"></a>')
                }
                else if (endFile_205(x.split('/')[3]) == 4) {
                    y.push('<a class="IMG fa fa-file-word-o" style="font-size: 3em;" href="' + x + '" target="_blank" class="renderlink" data-id="' + z + '" data-value="' + x.split('/')[3] + '"></a>')
                }
                else if (endFile_205(x.split('/')[3]) == 5) {
                    y.push('<a class="IMG fa fa-file-powerpoint-o" style="font-size: 3em;" href="' + x + '" target="_blank" class="renderlink" data-id="' + z + '" data-value="' + x.split('/')[3] + '"></a>')
                }
                else if (endFile_205(x.split('/')[3]) == 6) {
                    y.push('<a class="IMG fa fa-file-pdf-o" style="font-size: 3em;" href="' + x + '" target="_blank" class="renderlink" data-id="' + z + '" data-value="' + x.split('/')[3] + '"></a>')
                }
                else if (endFile_205(x.split('/')[3]) == 7) {
                    y.push('<a class="IMG fa fa-file-o" style="font-size: 3em;" href="' + x + '" target="_blank" class="renderlink" data-id="' + z + '" data-value="' + x.split('/')[3] + '"></a>')
                }
            }
            function endFile_205(name) {
                var extension = name.split('.').pop().toLowerCase();
                if ($.inArray(extension, ['jpg', 'png', 'gif', 'jpeg']) != -1) {        //file ảnh
                    return 1;
                }
                else if ($.inArray(extension, ['xls', 'xlsx']) != -1) {                         //excel
                    return 2;
                }
                else if ($.inArray(extension, ['rar', 'zip']) != -1) {                           // file nén
                    return 3;
                }
                else if ($.inArray(extension, ['doc', 'docx', 'txt']) != -1) {           // file word. text
                    return 4;
                }
                else if ($.inArray(extension, ['ppsx', 'ppsx']) != -1) {         // file powerpoint
                    return 5;
                }
                else if ($.inArray(extension, ['pdf']) != -1) {                        //file pdf
                    return 6;
                }
                else if ($.inArray(extension, ['bmp', 'csv']) != -1) {                        //file khác
                    return 7;
                }
                else {
                    return 0;
                }
            }
            DeleteIMG = function (data) {
                var NameIMG = $(data).context.dataset.lisdatafilesname;
                var rowline = $(data).context.dataset.id.split('-')[1];
                var indexL = $(data).context.dataset.id.split('-')[0];
                var html = $(data).context.dataset.id.split('-')[2];
                var a = $(data)
                if (indexL == 3) {
                    var indexDelete = [];

                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFilesFileVuViec !== null && item.DataFilesFileVuViec !== '' && item.DataFilesFileVuViec !== undefined)
                            $.each(item.DataFilesFileVuViec, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index);
                                }

                            });

                    })
                    if (indexDelete.length > 0) {
                        $.each(hot.getSettings().data, function (index1, item1) {
                            $.each(indexDelete, function (index, item) {
                                if (index1 == rowline) {
                                    item1.DataFilesFileVuViec.splice(item.toString(), 1);
                                    item1.ColHtmlArray_2.splice(item + 1, 1);// mảng html 3 
                                    item1.ListNameFileVuViec.splice(item.toString(), 1);
                                    item1.ColHtml_2 = item1.ColHtmlArray_2.join(' ');
                                    item1.ListNameFileFileVuViec = item1.ListNameFileVuViec.join(',');
                                }
                            })
                        });
                    }

                }
                else if (indexL == 5) {
                    var indexDelete = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFilesFileSuCo !== null && item.DataFilesFileSuCo !== '' && item.DataFilesFileSuCo !== undefined)
                            $.each(item.DataFilesFileSuCo, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index); // vị trí hình cần xóa 
                                }
                            });
                    })
                    if (indexDelete.length > 0) {
                        $.each(hot.getSettings().data, function (index1, item1) {
                            $.each(indexDelete, function (index, item) {
                                if (index1 == rowline) {
                                    item1.DataFilesFileSuCo.splice(item.toString(), 1);
                                    item1.ColHtmlArrayFileSuCo.splice(item.toString(), 1);
                                    item1.ListNameFileSuCo.splice(item.toString(), 1);
                                    item1.FileHinhSuCo = item1.ColHtmlArrayFileSuCo.join(' ');
                                    item1.ListNameFileFileSuCo = item1.ListNameFileSuCo.join(',');
                                }
                            })
                        });
                    }
                }
                else if (indexL == 7) {
                    var indexDelete = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFilesFileSuCoKemChuKy !== null && item.DataFilesFileSuCoKemChuKy !== '' && item.DataFilesFileSuCoKemChuKy !== undefined)
                            $.each(item.DataFilesFileSuCoKemChuKy, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index); // vị trí hình cần xóa 
                                }
                            });
                    })
                    if (indexDelete.length > 0) {
                        $.each(hot.getSettings().data, function (index1, item1) {
                            $.each(indexDelete, function (index, item) {
                                if (index1 == rowline) {
                                    item1.DataFilesFileSuCoKemChuKy.splice(item.toString(), 1);
                                    item1.ColHtmlArrayFileSuCoKemChuKy.splice(item.toString(), 1);
                                    item1.ListNameFileSuCoKemChuKy.splice(item.toString(), 1);
                                    item1.FileHinhKemChuKy = item1.ColHtmlArrayFileSuCoKemChuKy.join(' ');
                                    item1.ListNameFileFileSuCoKemChuKy = item1.ListNameFileSuCoKemChuKy.join(',');
                                }
                            })
                        });
                    }
                }
                else if (indexL == 9) {
                    var indexDelete = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFilesFileBangKeChiTietGiaTriThietHai !== null && item.DataFilesFileBangKeChiTietGiaTriThietHai !== '' && item.DataFilesFileBangKeChiTietGiaTriThietHai !== undefined)
                            $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index); // vị trí hình cần xóa 
                                }
                            });
                    })
                    if (indexDelete.length > 0) {
                        $.each(hot.getSettings().data, function (index1, item1) {
                            $.each(indexDelete, function (index, item) {
                                if (index1 == rowline) {
                                    item1.DataFilesFileBangKeChiTietGiaTriThietHai.splice(item.toString(), 1);
                                    item1.ColHtmlArrayFileBangKeChiTietGiaTriThietHai.splice(item.toString(), 1);
                                    item1.ListNameFileBangKeChiTietGiaTriThietHai.splice(item.toString(), 1);
                                    item1.FileHinhBangKeChiTietGiaTriThietHai = item1.ColHtmlArrayFileBangKeChiTietGiaTriThietHai.join(' ');
                                    item1.ListNameFileFileBangKeChiTietGiaTriThietHai = item1.ListNameFileBangKeChiTietGiaTriThietHai.join(',');
                                }
                            })
                        });
                    }
                }
                else if (indexL == 11) {
                    var indexDelete = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy !== null && item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy !== '' && item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy !== undefined)
                            $.each(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index); // vị trí hình cần xóa 
                                }
                            });
                    })
                    if (indexDelete.length > 0) {
                        $.each(hot.getSettings().data, function (index1, item1) {
                            $.each(indexDelete, function (index, item) {
                                if (index1 == rowline) {
                                    item1.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy.splice(item.toString(), 1);
                                    item1.ColHtmlArrayFileBangKeChiTietGiaTriThietHaiCoChuKy.splice(item.toString(), 1);
                                    item1.ListNameFileBangKeChiTietGiaTriThietHaiCoChuKy.splice(item.toString(), 1);
                                    item1.FileHinhBangKeChiTietGiaTriThietHaiCoChuKy = item1.ColHtmlArrayFileBangKeChiTietGiaTriThietHaiCoChuKy.join(' ');
                                    item1.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy = item1.ListNameFileBangKeChiTietGiaTriThietHaiCoChuKy.join(',');
                                }
                            })
                        });
                    }
                }
                else if (indexL == 13) {
                    var indexDelete = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFilesAnhXacNhanTrinhBaoCongAn !== null && item.DataFilesAnhXacNhanTrinhBaoCongAn !== '' && item.DataFilesAnhXacNhanTrinhBaoCongAn !== undefined)
                            $.each(item.DataFilesAnhXacNhanTrinhBaoCongAn, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index); // vị trí hình cần xóa 
                                }
                            });
                    })
                    if (indexDelete.length > 0) {
                        $.each(hot.getSettings().data, function (index1, item1) {
                            $.each(indexDelete, function (index, item) {
                                if (index1 == rowline) {
                                    item1.DataFilesAnhXacNhanTrinhBaoCongAn.splice(item.toString(), 1);
                                    item1.ColHtmlArrayFileAnhXacNhanTrinhBaoCongAn.splice(item.toString(), 1);
                                    item1.ListNameFileAnhXacNhanTrinhBaoCongAn.splice(item.toString(), 1);
                                    item1.FileHinhXacNhanTrinhBaoCongAn = item1.ColHtmlArrayFileAnhXacNhanTrinhBaoCongAn.join(' ');
                                    item1.ListNameFileFileAnhXacNhanTrinhBaoCongAn = item1.ListNameFileAnhXacNhanTrinhBaoCongAn.join(',');
                                }
                            })

                        });
                    }
                }
                else if (indexL == 15) {
                    var indexDelete = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFilesFileHinhChungTuChungMinhThietHai !== null && item.DataFilesFileHinhChungTuChungMinhThietHai !== '' && item.DataFilesFileHinhChungTuChungMinhThietHai !== undefined)
                            $.each(item.DataFilesFileHinhChungTuChungMinhThietHai, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index); // vị trí hình cần xóa 
                                }
                            });
                    })
                    if (indexDelete.length > 0) {
                        $.each(hot.getSettings().data, function (index1, item1) {
                            $.each(indexDelete, function (index, item) {
                                if (index1 == rowline) {
                                    item1.DataFilesFileHinhChungTuChungMinhThietHai.splice(item.toString(), 1);
                                    item1.ColHtmlArrayFileChungTuChungMinhThietHai.splice(item.toString(), 1);
                                    item1.ListNameFileChungTuChungMinhThietHai.splice(item.toString(), 1);
                                    item1.FileHinhChungTuChungMinhThietHai = item1.ColHtmlArrayFileChungTuChungMinhThietHai.join(' ');
                                    item1.ListNameFileFileHinhChungTuChungMinhThietHai = item1.ListNameFileChungTuChungMinhThietHai.join(',');
                                }
                            })
                        });
                    }
                }
                else if (indexL == 17) {
                    var indexDelete = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.DataFileBienBanBoiThuong !== null && item.DataFileBienBanBoiThuong !== '' && item.DataFileBienBanBoiThuong !== undefined)
                            $.each(item.DataFileBienBanBoiThuong, function (index, item) {
                                if (item.nameNew == NameIMG) {
                                    indexDelete.push(index); // vị trí hình cần xóa 
                                }
                            });
                    })
                    if (indexDelete.length > 0) {
                        $.each(hot.getSettings().data, function (index1, item1) {
                            $.each(indexDelete, function (index, item) {
                                if (index1 == rowline) {
                                    item1.DataFileBienBanBoiThuong.splice(item.toString(), 1);
                                    item1.ColHtmlArrayFileBienBanBoiThuong.splice(item.toString(), 1);
                                    item1.ListNameFileBienBanBoiThuong.splice(item.toString(), 1);
                                    item1.FileBienBanBoiThuong = item1.ColHtmlArrayFileBienBanBoiThuong.join(' ');
                                    item1.ListNameFileFileBienBanBoiThuong = item1.ListNameFileBienBanBoiThuong.join(',');
                                }
                            })
                        });
                    }
                }
                $(data).parent().remove();
            }
            //Kiểm tra quyền
            //ChuongNT3 - 25/05/2018 - Sửa ngươi xử lý
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isOldAssiner: false, isGroupOldStepAssigner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                //ChuongNT3 - 25/05/2018 - Sửa ngươi xử lý
                if (item == 'oldStepAssigner')
                    permisstion.isOldAssiner = true;
                if (item == 'groupOldStepAssigner')
                    permisstion.isGroupOldStepAssigner = true;
            });
            console.log(permisstion.isGroupOldStepAssigner)
            var check_isAssiner = permisstion.isAssiner == true || permisstion.isOldAssiner == true || permisstion.isGroupOldStepAssigner == true ? true : false;
            var check_isSender = permisstion.isSender == true ? true : false;
            var CheckLoadLuoiChiTiet = 0, checkTop1NoiDungTraoDoi = "", ngXuLy = "";
            var ArrayHinh_2 = [];
            var ArrayHinh_4 = [];
            var ArrayHinh_6 = [];
            var ArrayHinh_8 = [];
            var ArrayHinh_10 = [];
            var ArrayHinh_12 = [];
            var ArrayHinh_14 = [];
            var ArrayHinh_16 = [];
            var actionRendererUpload = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop == 'FileVuViec' && (CL.StepNo != 1)) {
                    var $button = '';
                    $button = $('<div class="fileUpload205 btn"><span class="fa fa-cloud-upload"></span><input type="file" id="FileVuViec_' + row + '" multiple class="upload" /></div>');
                    $button.click(function () {
                        if (check_isSender == true) {
                            $('#FileVuViec_' + row + '').on('change', function () {
                                var selectedFiles = $(this)[0].files;
                                var dataFiles = [];
                                var a = '';
                                var d = new Date();
                                var n = d.getTime();
                                var ten_file_khong_up = '';
                                $.each(l_Data_Handsontable, function (index, item1) {
                                    var lisDataFilesName = [];
                                    var listHtml = [];
                                    listHtml.push(ArrayHinh_2.join(' '));
                                    if (index == row) {
                                        $.each(selectedFiles, function (index, item) {
                                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                            dataFiles.push(selectedFiles[index]);
                                            lisDataFilesName.push(selectedFiles[index].nameNew);
                                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                                            if (endFile_205(selectedFiles[index].nameNew) == 0) {
                                                ten_file_khong_up = ten_file_khong_up + selectedFiles[index].name;
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 1) {
                                                var x = '<a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42" style="margin-bottom: 25px;"></a>';
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;">' + x + '<button class="BTN" style="margin-top: -69px;" type="button" class="btn btn-success" data-id="' + 3 + '-' + row + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 2) {
                                                var y = '<a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a>';
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;">' + y + '<button class="BTN" type="button" class="btn btn-success" data-id="' + 3 + '-' + row + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 3) {
                                                var y = '<a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-zip-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a>';
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;">' + y + '<button class="BTN" type="button" class="btn btn-success" data-id="' + 3 + '-' + row + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 4) {
                                                var y = '<a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-word-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a>';
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;">' + y + '<button class="BTN" type="button" class="btn btn-success" data-id="' + 3 + '-' + row + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 5) {
                                                var y = '<a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-powerpoint-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a>';
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;">' + y + '<button class="BTN" type="button" class="btn btn-success" data-id="' + 3 + '-' + row + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 6) {
                                                var y = '<a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-pdf-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a>';
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;">' + y + '<button class="BTN" type="button" class="btn btn-success" data-id="' + 3 + '-' + row + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 7) {
                                                var y = '<a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a>';
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;">' + y + '<button class="BTN" type="button" class="btn btn-success" data-id="' + 3 + '-' + row + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            item1.ColHtmlArray_2 = listHtml;//danh sách hình mới
                                            item1.ColHtml_2 = listHtml.join(' ');//hiển thị hình 
                                            item1.DataFilesFileVuViec = dataFiles;//mới
                                            item1.ListNameFileVuViec = lisDataFilesName;// tên hình mới 
                                            item1.ListNameFileFileVuViec = lisDataFilesName.join(',');//mảng tên hình hình

                                        });
                                    }
                                })
                                hot.render();
                                $(this).val('');
                                if (ten_file_khong_up != '') {
                                    XFunction.RenderMessage("error", "Bạn không thể tải lên các file: " + ten_file_khong_up + " do định dạng không hỗ trợ");
                                }
                            });
                        }
                        else {
                            XFunction.RenderMessage("error", "Người tạo mới được úp hình bước này ! ");
                            return false;
                        }
                    });
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');

                }
                else if (prop == 'FileSuCo' && (CL.StepNo != 1)) {
                    var $button = '';
                    $button = $('<div class="fileUpload205 btn"><span class="fa fa-cloud-upload"></span><input type="file" id="FileSuCo' + row + '" multiple class="upload" /></div>');
                    $button.click(function () {
                        if (check_isSender == true) {
                            $('#FileSuCo' + row + '').on('change', function () {
                                var selectedFiles = $(this)[0].files;
                                var dataFiles = [];
                                var ten_file_khong_up = '';
                                $.each(l_Data_Handsontable, function (index, item1) {
                                    var lisDataFilesName = [];
                                    var listHtml = [];
                                    listHtml.push(ArrayHinh_4.join(' '));
                                    if (index == row) {
                                        $.each(selectedFiles, function (index, item) {
                                            var d = new Date();
                                            var n = d.getTime();
                                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                            dataFiles.push(selectedFiles[index]);
                                            lisDataFilesName.push(selectedFiles[index].nameNew);
                                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                                            if (endFile_205(selectedFiles[index].nameNew) == 0) {
                                                ten_file_khong_up = ten_file_khong_up + selectedFiles[index].name;
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 1) {
                                                listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42" style="margin-bottom: 25px;"></a><button class="BTN" style="margin-top: -69px;" type="button" class="btn btn-success" data-id="' + 5 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 2) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 5 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 3) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-zip-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 5 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 4) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-word-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 5 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 5) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-powerpoint-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 5 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 6) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-pdf-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 5 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 7) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 5 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            item1.DataFilesFileSuCo = dataFiles;
                                            item1.ColHtmlArray_4 = listHtml;
                                            item1.ListNameFileSuCo = lisDataFilesName;
                                            item1.ColHtml_4 = listHtml.join(' ');
                                            item1.ListNameFileFileSuCo = lisDataFilesName.join(',');
                                        });
                                    }
                                })
                                hot.render();
                                $(this).val('');
                                if (ten_file_khong_up != '') {
                                    XFunction.RenderMessage("error", "Bạn không thể tải lên các file: " + ten_file_khong_up + " do định dạng không hỗ trợ");
                                }
                            });
                        }
                        else {
                            XFunction.RenderMessage("error", "Người tạo mới được úp hình bước này ! ");
                            return false;
                        }
                    });
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                }
                else if (prop == 'FileSuCoKemChuKy' && (CL.StepNo != 1)) {
                    var $button = '';
                    $button = $('<div class="fileUpload205 btn"><span class="fa fa-cloud-upload"></span><input type="file" id="FileSuCoKemChuKy' + row + '" multiple class="upload" /></div>');

                    $button.click(function () {
                        if (check_isSender == true) {
                            $('#FileSuCoKemChuKy' + row + '').on('change', function () {
                                var selectedFiles = $(this)[0].files;
                                var dataFiles = [];
                                var ten_file_khong_up = '';
                                $.each(l_Data_Handsontable, function (index, item1) {
                                    var listHtml = [];
                                    listHtml.push(ArrayHinh_6.join(" "));
                                    var lisDataFilesName = [];
                                    if (index == row) {
                                        $.each(selectedFiles, function (index, item) {
                                            var d = new Date();
                                            var n = d.getTime();
                                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                            dataFiles.push(selectedFiles[index]);
                                            lisDataFilesName.push(selectedFiles[index].nameNew);
                                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                                            if (endFile_205(selectedFiles[index].nameNew) == 0) {
                                                ten_file_khong_up = ten_file_khong_up + selectedFiles[index].name;
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 1) {
                                                listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 7 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 2) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 7 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 3) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-zip-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 7 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 4) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-word-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 7 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 5) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-powerpoint-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 7 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 6) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-pdf-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 7 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 7) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 7 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            item1.DataFilesFileSuCoKemChuKy = dataFiles;
                                            item1.ColHtmlArray_6 = listHtml;
                                            item1.ListNameFileSuCoKemChuKy = lisDataFilesName;
                                            item1.ColHtml_6 = listHtml.join(' ');
                                            item1.ListNameFileFileSuCoKemChuKy = lisDataFilesName.join(',');
                                        });
                                    }
                                })
                                hot.render();
                                $(this).val('');
                                if (ten_file_khong_up != '') {
                                    XFunction.RenderMessage("error", "Bạn không thể tải lên các file: " + ten_file_khong_up + " do định dạng không hỗ trợ");
                                }
                            });
                        }
                        else {
                            XFunction.RenderMessage("error", "Người tạo mới được úp hình bước này ! ");
                            return false;
                        }

                    });
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                }
                else if (prop == 'FileBangKeChiTietGiaTriThietHai' && (CL.StepNo != 1)) {
                    var $button = '';
                    $button = $('<div class="fileUpload205 btn"><span class="fa fa-cloud-upload"></span><input type="file" id="FileBangKeChiTietGiaTriThietHai' + row + '" multiple class="upload" /></div>');
                    $button.click(function () {
                        if (check_isSender == true) {
                            $('#FileBangKeChiTietGiaTriThietHai' + row + '').on('change', function () {
                                var selectedFiles = $(this)[0].files;
                                var dataFiles = [];
                                $.each(l_Data_Handsontable, function (index, item1) {
                                    var listHtml = [];
                                    listHtml.push(ArrayHinh_8.join(" "));
                                    var lisDataFilesName = [];
                                    var ten_file_khong_up = '';
                                    if (index == row) {
                                        $.each(selectedFiles, function (index, item) {
                                            var d = new Date();
                                            var n = d.getTime();
                                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                            dataFiles.push(selectedFiles[index]);
                                            lisDataFilesName.push(selectedFiles[index].nameNew);
                                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                                            if (endFile_205(selectedFiles[index].nameNew) == 0) {
                                                ten_file_khong_up = ten_file_khong_up + selectedFiles[index].name;
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 1) {
                                                listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42" style="margin-bottom: 25px;"></a><button class="BTN" style="margin-top: -69px;"  type="button" class="btn btn-success" data-id="' + 9 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 2) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 9 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 3) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-zip-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 9 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 4) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-word-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 9 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 5) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-powerpoint-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 9 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 6) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-pdf-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 9 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 7) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 9 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            item1.DataFilesFileBangKeChiTietGiaTriThietHai = dataFiles;
                                            item1.ColHtmlArray_8 = listHtml;
                                            item1.ListNameFileBangKeChiTietGiaTriThietHai = lisDataFilesName;
                                            item1.ColHtml_8 = listHtml.join(' ');
                                            item1.ListNameFileFileBangKeChiTietGiaTriThietHai = lisDataFilesName.join(',');
                                        });

                                    }
                                })

                                hot.render();
                                $(this).val('');
                                if (ten_file_khong_up != '') {
                                    XFunction.RenderMessage("error", "Bạn không thể tải lên các file: " + ten_file_khong_up + " do định dạng không hỗ trợ");
                                }
                            });
                        }
                        else {
                            XFunction.RenderMessage("error", "Người tạo mới được úp hình bước này ! ");
                            return false;
                        }
                    });
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                }
                else if (prop == 'FileBangKeChiTietGiaTriThietHaiCoChuKy' && (CL.StepNo != 1)) {
                    var $button = '';
                    $button = $('<div class="fileUpload205 btn"><span class="fa fa-cloud-upload"></span><input type="file" id="FileBangKeChiTietGiaTriThietHaiCoChuKy' + row + '" multiple class="upload" /></div>');
                    $button.click(function () {
                        if (check_isSender == true) {
                            $('#FileBangKeChiTietGiaTriThietHaiCoChuKy' + row + '').on('change', function () {
                                var selectedFiles = $(this)[0].files;
                                var dataFiles = [];
                                var ten_file_khong_up = '';
                                $.each(l_Data_Handsontable, function (index, item1) {
                                    var listHtml = [];
                                    listHtml.push(ArrayHinh_10.join(" "));
                                    var lisDataFilesName = [];
                                    if (index == row) {
                                        $.each(selectedFiles, function (index, item) {
                                            var d = new Date();
                                            var n = d.getTime();
                                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                            dataFiles.push(selectedFiles[index]);
                                            lisDataFilesName.push(selectedFiles[index].nameNew);
                                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                                            if (endFile_205(selectedFiles[index].nameNew) == 0) {
                                                ten_file_khong_up = ten_file_khong_up + selectedFiles[index].name;
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 1) {
                                                listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 11 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 2) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 11 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 3) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-zip-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 11 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 4) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-word-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 11 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 5) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-powerpoint-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 11 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 6) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-pdf-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 11 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 7) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 11 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            item1.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy = dataFiles;
                                            item1.ColHtmlArray_10 = listHtml;
                                            item1.ListNameFileBangKeChiTietGiaTriThietHaiCoChuKy = lisDataFilesName;
                                            item1.ColHtml_10 = listHtml.join(' ');
                                            item1.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy = lisDataFilesName.join(',');
                                        });
                                    }
                                })

                                hot.render();
                                $(this).val('');
                                if (ten_file_khong_up != '') {
                                    XFunction.RenderMessage("error", "Bạn không thể tải lên các file: " + ten_file_khong_up + " do định dạng không hỗ trợ");
                                }
                            });
                        }
                        else {
                            XFunction.RenderMessage("error", "Người tạo mới được úp hình bước này ! ");
                            return false;
                        }
                    });
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                }
                else if (prop == 'FileAnhXacNhanTrinhBaoCongAn' && (CL.StepNo != 1)) {
                    var $button = '';
                    $button = $('<div class="fileUpload205 btn"><span class="fa fa-cloud-upload"></span><input type="file" id="FileAnhXacNhanTrinhBaoCongAn' + row + '" multiple class="upload" /></div>');
                    $button.click(function () {
                        if (check_isSender == true) {
                            $('#FileAnhXacNhanTrinhBaoCongAn' + row + '').on('change', function () {
                                var selectedFiles = $(this)[0].files;
                                var dataFiles = [];
                                var ten_file_khong_up = '';
                                $.each(l_Data_Handsontable, function (index, item1) {
                                    var listHtml = [];
                                    listHtml.push(ArrayHinh_12.join(" "));
                                    var lisDataFilesName = [];
                                    if (index == row) {
                                        $.each(selectedFiles, function (index, item) {
                                            var d = new Date();
                                            var n = d.getTime();
                                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                            dataFiles.push(selectedFiles[index]);
                                            lisDataFilesName.push(selectedFiles[index].nameNew);
                                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                                            if (endFile_205(selectedFiles[index].nameNew) == 0) {
                                                ten_file_khong_up = ten_file_khong_up + selectedFiles[index].name;
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 1) {
                                                listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 13 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 2) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 13 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 3) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-zip-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 13 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 4) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-word-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 13 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 5) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-powerpoint-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 13 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 6) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-pdf-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 13 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 7) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 13 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            item1.DataFilesFileAnhXacNhanTrinhBaoCongAn = dataFiles;
                                            item1.ColHtmlArray_12 = listHtml;
                                            item1.ListNameFileAnhXacNhanTrinhBaoCongAn = lisDataFilesName;
                                            item1.ColHtml_12 = listHtml.join(' ');
                                            item1.ListNameFileFileAnhXacNhanTrinhBaoCongAn = lisDataFilesName.join(',');
                                        });
                                    }
                                })
                                hot.render();
                                $(this).val('');
                                if (ten_file_khong_up != '') {
                                    XFunction.RenderMessage("error", "Bạn không thể tải lên các file: " + ten_file_khong_up + " do định dạng không hỗ trợ");
                                }
                            });
                        }
                        else {
                            XFunction.RenderMessage("error", "Người tạo mới được úp hình bước này ! ");
                            return false;
                        }
                    });
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                }
                else if (prop == 'FileChungTuChungMinhThietHai' && (CL.StepNo != 1)) {
                    var $button = '';
                    $button = $('<div class="fileUpload205 btn"><span class="fa fa-cloud-upload"></span><input type="file" id="FileChungTuChungMinhThietHai' + row + '" multiple class="upload" /></div>');
                    $button.click(function () {
                        if (check_isSender == true) {
                            $('#FileChungTuChungMinhThietHai' + row + '').on('change', function () {
                                var selectedFiles = $(this)[0].files;
                                var dataFiles = [];
                                var ten_file_khong_up = '';
                                $.each(l_Data_Handsontable, function (index, item1) {
                                    var listHtml = [];
                                    listHtml.push(ArrayHinh_14.join(" "));
                                    var lisDataFilesName = [];
                                    if (index == row) {
                                        $.each(selectedFiles, function (index, item) {
                                            var d = new Date();
                                            var n = d.getTime();
                                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                            dataFiles.push(selectedFiles[index]);
                                            lisDataFilesName.push(selectedFiles[index].nameNew);
                                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                                            if (endFile_205(selectedFiles[index].nameNew) == 0) {
                                                ten_file_khong_up = ten_file_khong_up + selectedFiles[index].name;
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 1) {
                                                listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 15 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 2) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 15 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 3) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-zip-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 15 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 4) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-word-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 15 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 5) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-powerpoint-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 15 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 6) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-pdf-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 15 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 7) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 15 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            item1.DataFilesFileHinhChungTuChungMinhThietHai = dataFiles;
                                            item1.ColHtmlArray_14 = listHtml;
                                            item1.ListNameFileChungTuChungMinhThietHai = lisDataFilesName;
                                            item1.ColHtml_14 = listHtml.join(' ');
                                            item1.ListNameFileFileHinhChungTuChungMinhThietHai = lisDataFilesName.join(',');
                                        });
                                    }
                                })
                                hot.render();
                                $(this).val('');
                                if (ten_file_khong_up != '') {
                                    XFunction.RenderMessage("error", "Bạn không thể tải lên các file: " + ten_file_khong_up + " do định dạng không hỗ trợ");
                                }
                            });
                        }
                        else {
                            XFunction.RenderMessage("error", "Người tạo mới được úp hình bước này ! ");
                            return false;
                        }
                    });
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                }
                else if (prop == 'FileBienBanBoiThuong' && CL.StepNo == 4) {
                    var $button = '';
                    $button = $('<div class="fileUpload205 btn"><span class="fa fa-cloud-upload"></span><input type="file" id="FileBienBanBoiThuong' + row + '" multiple class="upload" /></div>');
                    $button.click(function () {
                        if (check_isAssiner == true && CL.StepNo == 4) {
                            $('#FileBienBanBoiThuong' + row + '').on('change', function () {
                                var selectedFiles = $(this)[0].files;
                                var dataFiles = [];
                                var ten_file_khong_up = '';
                                $.each(l_Data_Handsontable, function (index, item1) {
                                    var listHtml = [];
                                    listHtml.push(ArrayHinh_16.join(" "));
                                    var lisDataFilesName = [];
                                    if (index == row) {
                                        $.each(selectedFiles, function (index, item) {
                                            var d = new Date();
                                            var n = d.getTime();
                                            selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;
                                            dataFiles.push(selectedFiles[index]);
                                            lisDataFilesName.push(selectedFiles[index].nameNew);
                                            var tmppath = URL.createObjectURL(selectedFiles[index]);
                                            if (endFile_205(selectedFiles[index].nameNew) == 0) {
                                                ten_file_khong_up = ten_file_khong_up + selectedFiles[index].name;
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 1) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42" style="margin-bottom: 25px;"></a><button class="BTN" style="margin-top: -69px;" type="button" class="btn btn-success" data-id="' + 17 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 2) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-excel-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 17 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 3) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-zip-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 17 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 4) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-word-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 17 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 5) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-powerpoint-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 17 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 6) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-pdf-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 17 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            else if (endFile_205(selectedFiles[index].nameNew) == 7) {
                                                listHtml.push('<div class="ULH" style ="padding-left:3px;"><a href="' + tmppath + '" target="_blank" class="IMG fa fa-file-o"  style="font-size: 3em;" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a><button class="BTN" type="button" class="btn btn-success" data-id="' + 17 + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                            }
                                            item1.DataFileBienBanBoiThuong = dataFiles;
                                            item1.ColHtmlArray_16 = listHtml;
                                            item1.ListNameFileBienBanBoiThuong = lisDataFilesName;
                                            item1.ColHtml_16 = listHtml.join(' ');
                                            item1.ListNameFileBienBanBoiThuong = lisDataFilesName.join(',');
                                        });
                                    }
                                })
                                hot.render();
                                $(this).val('');
                                if (ten_file_khong_up != '') {
                                    XFunction.RenderMessage("error", "Bạn không thể tải lên các file: " + ten_file_khong_up + " do định dạng không hỗ trợ");
                                }
                            });
                        }
                        else {
                            XFunction.RenderMessage("error", "Người xử lý mới được up hình này");
                            return false;
                        }
                    });
                    $button != '' ?
                        $(td).empty().append($button) :
                        $(td).empty().append('');
                }
                else {
                    $(td).empty().append('');
                }
            };
            function checkvaluedata(value) {
                if (value !== null && value !== '' && value !== undefined && value.length > 0) {
                    return true;
                }
                else {
                    return false;
                }
            }
            $.each(l_Data_Handsontable, function (index1, item) {

                if (item.CheckXN == 1) {
                    $("#XNOK_205").prop("checked", true);
                    $("#XNOK_205").parent().addClass('checked');

                    $("#XNNO_205").prop("checked", false);
                    $("#XNNO_205").parent().removeClass('checked');
                }
                if (item.CheckNXN == 1) {
                    $("#XNNO_205").prop("checked", true);
                    $("#XNNO_205").parent().addClass('checked');

                    $("#XNOK_205").prop("checked", false);
                    $("#XNOK_205").parent().removeClass('checked');
                }
                if (CL.Status == 4 && CL.StepNo == 3) {
                    $('#XNOK_205').attr('disabled', true);
                    $('#XNNO_205').attr('disabled', true);
                }
                checkTop1NoiDungTraoDoi = item.Top1NoiDungTraoDoi;
                ngXuLy = item.NguoiXuLy;
                if (CL.StepNo == 1) {
                    if (item.Uri_String_IMG_4 !== null && item.Uri_String_IMG_4 !== '' && item.Uri_String_IMG_4 !== undefined) {
                        var ColHTML_2 = null, ColHTML_4 = null, ColHTML_6 = null, ColHTML_8 = null,
                            ColHTML_10 = null, ColHTML_12 = null, ColHTML_14 = null

                        if (checkvaluedata(item.Uri_String_IMG_2) === true) {
                            ColHTML_2 = item.Uri_String_IMG_2.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_4) === true) {
                            ColHTML_4 = item.Uri_String_IMG_4.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_6) === true) {
                            ColHTML_6 = item.Uri_String_IMG_6.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_8) === true) {
                            ColHTML_8 = item.Uri_String_IMG_8.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_10) === true) {
                            ColHTML_10 = item.Uri_String_IMG_10.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_12) === true) {
                            ColHTML_12 = item.Uri_String_IMG_12.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_14) === true) {
                            ColHTML_14 = item.Uri_String_IMG_14.split(',');
                        }
                        var ColHtmlArray_2 = [];
                        var ColHtmlArray_4 = [];
                        var ColHtmlArray_6 = [];
                        var ColHtmlArray_8 = [];
                        var ColHtmlArray_10 = [];
                        var ColHtmlArray_12 = [];
                        var ColHtmlArray_14 = [];

                        var lisDataFilesName_2 = [];
                        var lisDataFilesName_4 = [];
                        var lisDataFilesName_6 = [];
                        var lisDataFilesName_8 = [];
                        var lisDataFilesName_10 = [];
                        var lisDataFilesName_12 = [];
                        var lisDataFilesName_14 = [];
                        if (checkvaluedata(ColHTML_2) === true)
                            $.each(ColHTML_2, function (index, item1) {
                                lisDataFilesName_2.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_2, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_4) === true)
                            $.each(ColHTML_4, function (index, item1) {
                                lisDataFilesName_4.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_4, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_6) === true)
                            $.each(ColHTML_6, function (index, item1) {
                                lisDataFilesName_6.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_6, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_8) === true)
                            $.each(ColHTML_8, function (index, item1) {
                                lisDataFilesName_8.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_8, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_10) === true)
                            $.each(ColHTML_10, function (index, item1) {
                                lisDataFilesName_10.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_10, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_12) === true)
                            $.each(ColHTML_12, function (index, item1) {
                                lisDataFilesName_12.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_12, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_14) === true)
                            $.each(ColHTML_14, function (index, item1) {
                                lisDataFilesName_14.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_14, item.RequestId);
                            });

                        if (ColHtmlArray_2.length > 0) {
                            item.ColHtmlArray_2 = ColHtmlArray_2; // mảng tên hình 
                            item.ColHtml_2 = ColHtmlArray_2.join(' '); // hiển thị hình lên lưới 
                            ArrayHinh_2 = item.ColHtmlArray_2; // lấy mảng html hình ban đầu của dữ liệu dưới store 
                        }
                        if (ColHtmlArray_4.length > 0) {
                            item.ColHtmlArray_4 = ColHtmlArray_4;
                            item.ColHtml_4 = ColHtmlArray_4.join(' ');
                            ArrayHinh_4 = item.ColHtmlArray_4;
                        }
                        if (ColHtmlArray_6.length > 0) {
                            item.ColHtmlArray_6 = ColHtmlArray_6;
                            item.ColHtml_6 = ColHtmlArray_6.join(' ');
                            ArrayHinh_6 = item.ColHtmlArray_6;
                        }
                        if (ColHtmlArray_8.length > 0) {
                            item.ColHtmlArray_8 = ColHtmlArray_8;
                            item.ColHtml_8 = ColHtmlArray_8.join(' ');
                            ArrayHinh_8 = item.ColHtmlArray_8;
                        }
                        if (ColHtmlArray_10.length > 0) {
                            item.ColHtmlArray_10 = ColHtmlArray_10;
                            item.ColHtml_10 = ColHtmlArray_10.join(' ');
                            ArrayHinh_10 = item.ColHtmlArray_10;
                        }
                        if (ColHtmlArray_12.length > 0) {
                            item.ColHtmlArray_12 = ColHtmlArray_12;
                            item.ColHtml_12 = ColHtmlArray_12.join(' ');
                            ArrayHinh_12 = item.ColHtmlArray_12;
                        }
                        if (ColHtmlArray_14.length > 0) {
                            item.ColHtmlArray_14 = ColHtmlArray_14;
                            item.ColHtml_14 = ColHtmlArray_14.join(' ');
                            ArrayHinh_14 = item.ColHtmlArray_14;
                        }
                    }
                }
                else if (CL.StepNo == 2) {
                    if (item.Uri_String_IMG_4 !== null && item.Uri_String_IMG_4 !== '' && item.Uri_String_IMG_4 !== undefined
                    ) {
                        var ColHTML_2 = null, ColHTML_4 = null, ColHTML_6 = null, ColHTML_8 = null,
                            ColHTML_10 = null, ColHTML_12 = null, ColHTML_14 = null

                        if (checkvaluedata(item.Uri_String_IMG_2) === true) {
                            ColHTML_2 = item.Uri_String_IMG_2.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_4) === true) {
                            ColHTML_4 = item.Uri_String_IMG_4.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_6) === true) {
                            ColHTML_6 = item.Uri_String_IMG_6.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_8) === true) {
                            ColHTML_8 = item.Uri_String_IMG_8.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_10) === true) {
                            ColHTML_10 = item.Uri_String_IMG_10.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_12) === true) {
                            ColHTML_12 = item.Uri_String_IMG_12.split(',');
                        }
                        if (checkvaluedata(item.Uri_String_IMG_14) === true) {
                            ColHTML_14 = item.Uri_String_IMG_14.split(',');
                        }
                        var ColHtmlArray_2 = [];
                        var ColHtmlArray_4 = [];
                        var ColHtmlArray_6 = [];
                        var ColHtmlArray_8 = [];
                        var ColHtmlArray_10 = [];
                        var ColHtmlArray_12 = [];
                        var ColHtmlArray_14 = [];

                        var lisDataFilesName_2 = [];
                        var lisDataFilesName_4 = [];
                        var lisDataFilesName_6 = [];
                        var lisDataFilesName_8 = [];
                        var lisDataFilesName_10 = [];
                        var lisDataFilesName_12 = [];
                        var lisDataFilesName_14 = [];
                        if (checkvaluedata(ColHTML_2) === true)
                            $.each(ColHTML_2, function (index, item1) {
                                lisDataFilesName_2.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_2, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_4) === true)
                            $.each(ColHTML_4, function (index, item1) {
                                lisDataFilesName_4.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_4, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_6) === true)
                            $.each(ColHTML_6, function (index, item1) {
                                lisDataFilesName_6.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_6, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_8) === true)
                            $.each(ColHTML_8, function (index, item1) {
                                lisDataFilesName_8.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_8, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_10) === true)
                            $.each(ColHTML_10, function (index, item1) {
                                lisDataFilesName_10.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_10, item.RequestId);
                            });
                        if (checkvaluedata(ColHTML_12) === true)
                            $.each(ColHTML_12, function (index, item1) {
                                lisDataFilesName_12.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_12, item.RequestId);

                            });
                        if (checkvaluedata(ColHTML_14) === true)
                            $.each(ColHTML_14, function (index, item1) {
                                lisDataFilesName_14.push(item1.split('/')[3]);
                                rendererFile_205(item1, ColHtmlArray_14, item.RequestId);
                            });
                        if (ColHtmlArray_2.length > 0) {
                            item.ColHtmlArray_2 = ColHtmlArray_2; // mảng tên hình 
                            item.ColHtml_2 = ColHtmlArray_2.join(' '); // hiển thị hình lên lưới 
                            ArrayHinh_2 = item.ColHtmlArray_2; // lấy mảng html hình ban đầu của dữ liệu dưới store 
                        }
                        if (ColHtmlArray_4.length > 0) {
                            item.ColHtmlArray_4 = ColHtmlArray_4;
                            item.ColHtml_4 = ColHtmlArray_4.join(' ');
                            ArrayHinh_4 = item.ColHtmlArray_4;
                        }
                        if (ColHtmlArray_6.length > 0) {
                            item.ColHtmlArray_6 = ColHtmlArray_6;
                            item.ColHtml_6 = ColHtmlArray_6.join(' ');
                            ArrayHinh_6 = item.ColHtmlArray_6;
                        }
                        if (ColHtmlArray_8.length > 0) {
                            item.ColHtmlArray_8 = ColHtmlArray_8;
                            item.ColHtml_8 = ColHtmlArray_8.join(' ');
                            ArrayHinh_8 = item.ColHtmlArray_8;
                        }
                        if (ColHtmlArray_10.length > 0) {
                            item.ColHtmlArray_10 = ColHtmlArray_10;
                            item.ColHtml_10 = ColHtmlArray_10.join(' ');
                            ArrayHinh_10 = item.ColHtmlArray_10;
                        }
                        if (ColHtmlArray_12.length > 0) {
                            item.ColHtmlArray_12 = ColHtmlArray_12;
                            item.ColHtml_12 = ColHtmlArray_12.join(' ');
                            ArrayHinh_12 = item.ColHtmlArray_12;
                        }
                        if (ColHtmlArray_14.length > 0) {
                            item.ColHtmlArray_14 = ColHtmlArray_14;
                            item.ColHtml_14 = ColHtmlArray_14.join(' ');
                            ArrayHinh_14 = item.ColHtmlArray_14;
                        }
                    }
                }
                else {
                    if (item.Quantity == 1) {
                        CheckLoadLuoiChiTiet = item.Quantity;
                        if (item.Uri_String_IMG_4 !== null && item.Uri_String_IMG_4 !== '' && item.Uri_String_IMG_4 !== undefined
                        ) {
                            var ColHTML_2 = null, ColHTML_4 = null, ColHTML_6 = null, ColHTML_8 = null, ColHTML_10 = null, ColHTML_16 = null;

                            if (checkvaluedata(item.Uri_String_IMG_2) == true) {
                                ColHTML_2 = item.Uri_String_IMG_2.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_4) == true) {
                                ColHTML_4 = item.Uri_String_IMG_4.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_6) == true) {
                                ColHTML_6 = item.Uri_String_IMG_6.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_8) == true) {
                                ColHTML_8 = item.Uri_String_IMG_8.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_10) == true) {
                                ColHTML_10 = item.Uri_String_IMG_10.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_16) == true) {
                                ColHTML_16 = item.Uri_String_IMG_16.split(',');
                            }
                            var ColHtmlArray_2 = [];
                            var ColHtmlArray_4 = [];
                            var ColHtmlArray_6 = [];
                            var ColHtmlArray_8 = [];
                            var ColHtmlArray_10 = [];
                            var ColHtmlArray_16 = [];
                            var lisDataFilesName_2 = [];
                            var lisDataFilesName_4 = [];
                            var lisDataFilesName_6 = [];
                            var lisDataFilesName_8 = [];
                            var lisDataFilesName_10 = [];
                            var lisDataFilesName_16 = [];
                            if (ColHTML_2 != null) {
                                $.each(ColHTML_2, function (index, item1) {
                                    lisDataFilesName_2.push(item1.split('/')[3]) // đổ vào mảng là tên hình 
                                    rendererFile_205(item1, ColHtmlArray_2, item.RequestId);
                                });
                            }
                            if (ColHTML_4 != null) {
                                $.each(ColHTML_4, function (index, item1) {
                                    lisDataFilesName_4.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_4, item.RequestId);
                                });
                            }

                            if (ColHTML_6 !== null) {
                                $.each(ColHTML_6, function (index, item1) {
                                    lisDataFilesName_6.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_6, item.RequestId);
                                });
                            }
                            if (ColHTML_8 != null) {
                                $.each(ColHTML_8, function (index, item1) {
                                    lisDataFilesName_8.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_8, item.RequestId);
                                });
                            }
                            if (ColHTML_10 != null) {
                                $.each(ColHTML_10, function (index, item1) {
                                    lisDataFilesName_10.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_10, item.RequestId);
                                });
                            } if (ColHTML_16 != null) {
                                $.each(ColHTML_16, function (index, item1) {
                                    lisDataFilesName_16.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_16, item.RequestId);
                                });
                            }
                            if (ColHtmlArray_2.length > 0) {
                                item.ColHtmlArray_2 = ColHtmlArray_2; // mảng tên hình 
                                item.ColHtml_2 = ColHtmlArray_2.join(' '); // hiển thị hình lên lưới 
                                ArrayHinh_2 = item.ColHtmlArray_2; // lấy mảng html hình ban đầu của dữ liệu dưới store 
                            }

                            if (ColHtmlArray_4.length > 0) {
                                item.ColHtmlArray_4 = ColHtmlArray_4;
                                item.ColHtml_4 = ColHtmlArray_4.join(' ');
                                ArrayHinh_4 = item.ColHtmlArray_4;
                            }

                            if (ColHtmlArray_6.length > 0) {
                                item.ColHtmlArray_6 = ColHtmlArray_6;
                                item.ColHtml_6 = ColHtmlArray_6.join(' ');
                                ArrayHinh_6 = item.ColHtmlArray_6;
                            }
                            if (ColHtmlArray_8.length > 0) {
                                item.ColHtmlArray_8 = ColHtmlArray_8;
                                item.ColHtml_8 = ColHtmlArray_8.join(' ');
                                ArrayHinh_8 = item.ColHtmlArray_8;
                            }

                            if (ColHtmlArray_10.length > 0) {
                                item.ColHtmlArray_10 = ColHtmlArray_10;
                                item.ColHtml_10 = ColHtmlArray_10.join(' ');
                                ArrayHinh_10 = item.ColHtmlArray_10;
                            }
                            if (ColHtmlArray_16.length > 0) {
                                item.ColHtmlArray_16 = ColHtmlArray_16;
                                item.ColHtml_16 = ColHtmlArray_16.join(' ');
                                ArrayHinh_16 = item.ColHtmlArray_16;
                            }

                        }

                    }
                    else if (item.Quantity == 2) // phân loại 2 sẽ lấy cột 2,4,6,8,10,12 col html cũng vậy 
                    {
                        CheckLoadLuoiChiTiet = item.Quantity;
                        if (item.Uri_String_IMG_4 !== null && item.Uri_String_IMG_4 !== '' && item.Uri_String_IMG_4 !== undefined
                        ) {
                            var ColHTML_2 = null, ColHTML_4 = null, ColHTML_6 = null, ColHTML_8 = null, ColHTML_10 = null, ColHTML_12 = null, ColHTML_16 = null;

                            if (checkvaluedata(item.Uri_String_IMG_2) == true) {
                                ColHTML_2 = item.Uri_String_IMG_2.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_4) == true) {
                                ColHTML_4 = item.Uri_String_IMG_4.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_6) == true) {
                                ColHTML_6 = item.Uri_String_IMG_6.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_8) == true) {
                                ColHTML_8 = item.Uri_String_IMG_8.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_10) == true) {
                                ColHTML_10 = item.Uri_String_IMG_10.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_12) == true) {
                                ColHTML_12 = item.Uri_String_IMG_12.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_16) == true) {
                                ColHTML_16 = item.Uri_String_IMG_16.split(',');
                            }
                            var ColHtmlArray_2 = [];
                            var ColHtmlArray_4 = [];
                            var ColHtmlArray_6 = [];
                            var ColHtmlArray_8 = [];
                            var ColHtmlArray_10 = [];
                            var ColHtmlArray_12 = [];
                            var ColHtmlArray_16 = [];

                            var lisDataFilesName_2 = [];
                            var lisDataFilesName_4 = [];
                            var lisDataFilesName_6 = [];
                            var lisDataFilesName_8 = [];
                            var lisDataFilesName_10 = [];
                            var lisDataFilesName_12 = [];
                            var lisDataFilesName_16 = [];
                            if (ColHTML_2 != null) {
                                $.each(ColHTML_2, function (index, item1) {
                                    lisDataFilesName_2.push(item1.split('/')[3]) // đổ vào mảng là tên hình 
                                    rendererFile_205(item1, ColHtmlArray_2, item.RequestId);
                                });
                            }
                            if (ColHTML_4 != null) {
                                $.each(ColHTML_4, function (index, item1) {
                                    lisDataFilesName_4.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_4, item.RequestId);
                                });
                            }

                            if (ColHTML_6 !== null) {
                                $.each(ColHTML_6, function (index, item1) {
                                    rendererFile_205(item1, ColHtmlArray_6, item.RequestId);
                                });
                            }
                            if (ColHTML_8 != null) {
                                $.each(ColHTML_8, function (index, item1) {
                                    lisDataFilesName_8.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_8, item.RequestId);
                                });
                            }
                            if (ColHTML_10 != null) {
                                $.each(ColHTML_10, function (index, item1) {
                                    lisDataFilesName_10.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_10, item.RequestId);
                                });
                            }
                            if (ColHTML_12 != null) {
                                $.each(ColHTML_12, function (index, item1) {
                                    lisDataFilesName_12.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_12, item.RequestId);
                                });
                            }
                            if (ColHTML_16 != null) {
                                $.each(ColHTML_16, function (index, item1) {
                                    lisDataFilesName_16.push(item1.split('/')[3]) // mảng tên hình 
                                    rendererFile_205(item1, ColHtmlArray_16, item.RequestId);
                                });
                            }
                            if (ColHtmlArray_2.length > 0) {
                                item.ColHtmlArray_2 = ColHtmlArray_2; // mảng tên hình 
                                item.ColHtml_2 = ColHtmlArray_2.join(' '); // hiển thị hình lên lưới 
                                ArrayHinh_2 = item.ColHtmlArray_2; // lấy mảng html hình ban đầu của dữ liệu dưới store 
                            }

                            if (ColHtmlArray_4.length > 0) {
                                item.ColHtmlArray_4 = ColHtmlArray_4;
                                item.ColHtml_4 = ColHtmlArray_4.join(' ');
                                ArrayHinh_4 = item.ColHtmlArray_4;
                            }

                            if (ColHtmlArray_6.length > 0) {
                                item.ColHtmlArray_6 = ColHtmlArray_6;
                                item.ColHtml_6 = ColHtmlArray_6.join(' ');
                                ArrayHinh_6 = item.ColHtmlArray_6;
                            }
                            if (ColHtmlArray_8.length > 0) {
                                item.ColHtmlArray_8 = ColHtmlArray_8;
                                item.ColHtml_8 = ColHtmlArray_8.join(' ');
                                ArrayHinh_8 = item.ColHtmlArray_8;
                            }

                            if (ColHtmlArray_10.length > 0) {
                                item.ColHtmlArray_10 = ColHtmlArray_10;
                                item.ColHtml_10 = ColHtmlArray_10.join(' ');
                                ArrayHinh_10 = item.ColHtmlArray_10;
                            }
                            if (ColHtmlArray_12.length > 0) {
                                item.ColHtmlArray_12 = ColHtmlArray_12;
                                item.ColHtml_12 = ColHtmlArray_12.join(' ');
                                ArrayHinh_12 = item.ColHtmlArray_12;
                            }
                            if (ColHtmlArray_16.length > 0) {
                                item.ColHtmlArray_16 = ColHtmlArray_16;
                                item.ColHtml_16 = ColHtmlArray_16.join(' ');
                                ArrayHinh_16 = item.ColHtmlArray_16;
                            }
                        }

                    }
                    else if (item.Quantity == 3) // phân loại 2 sẽ lấy cột 2,4,6,8,10,12 col html cũng vậy 
                    {
                        CheckLoadLuoiChiTiet = item.Quantity;
                        if (item.Uri_String_IMG_4 !== null && item.Uri_String_IMG_4 !== '' && item.Uri_String_IMG_4 !== undefined
                        ) {
                            var ColHTML_2 = null, ColHTML_4 = null, ColHTML_6 = null, ColHTML_8 = null, ColHTML_10 = null, ColHTML_12 = null, ColHTML_16 = null

                            if (checkvaluedata(item.Uri_String_IMG_2) === true) {
                                ColHTML_2 = item.Uri_String_IMG_2.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_4) === true) {
                                ColHTML_4 = item.Uri_String_IMG_4.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_6) === true) {
                                ColHTML_6 = item.Uri_String_IMG_6.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_8) === true) {
                                ColHTML_8 = item.Uri_String_IMG_8.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_10) === true) {
                                ColHTML_10 = item.Uri_String_IMG_10.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_12) === true) {
                                ColHTML_12 = item.Uri_String_IMG_12.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_16) === true) {
                                ColHTML_16 = item.Uri_String_IMG_16.split(',');
                            }
                            var ColHtmlArray_2 = [];
                            var ColHtmlArray_4 = [];
                            var ColHtmlArray_6 = [];
                            var ColHtmlArray_8 = [];
                            var ColHtmlArray_10 = [];
                            var ColHtmlArray_12 = [];
                            var ColHtmlArray_16 = [];
                            var lisDataFilesName_2 = [];
                            var lisDataFilesName_4 = [];
                            var lisDataFilesName_6 = [];
                            var lisDataFilesName_8 = [];
                            var lisDataFilesName_10 = [];
                            var lisDataFilesName_12 = [];
                            var lisDataFilesName_16 = [];
                            if (checkvaluedata(ColHTML_2) === true)
                                $.each(ColHTML_2, function (index, item1) {
                                    lisDataFilesName_2.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_2, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_4) === true)
                                $.each(ColHTML_4, function (index, item1) {
                                    lisDataFilesName_4.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_4, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_6) === true)
                                $.each(ColHTML_6, function (index, item1) {
                                    lisDataFilesName_6.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_6, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_8) === true)
                                $.each(ColHTML_8, function (index, item1) {
                                    lisDataFilesName_8.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_8, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_10) === true)
                                $.each(ColHTML_10, function (index, item1) {
                                    lisDataFilesName_10.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_10, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_12) === true)
                                $.each(ColHTML_12, function (index, item1) {
                                    lisDataFilesName_12.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_12, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_16) === true)
                                $.each(ColHTML_16, function (index, item1) {
                                    lisDataFilesName_16.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_16, item.RequestId);
                                });
                            if (ColHtmlArray_2.length > 0) {
                                item.ColHtmlArray_2 = ColHtmlArray_2; // mảng tên hình 
                                item.ColHtml_2 = ColHtmlArray_2.join(' '); // hiển thị hình lên lưới 
                                ArrayHinh_2 = item.ColHtmlArray_2; // lấy mảng html hình ban đầu của dữ liệu dưới store 
                            }

                            if (ColHtmlArray_4.length > 0) {
                                item.ColHtmlArray_4 = ColHtmlArray_4;
                                item.ColHtml_4 = ColHtmlArray_4.join(' ');
                                ArrayHinh_4 = item.ColHtmlArray_4;
                            }

                            if (ColHtmlArray_6.length > 0) {
                                item.ColHtmlArray_6 = ColHtmlArray_6;
                                item.ColHtml_6 = ColHtmlArray_6.join(' ');
                                ArrayHinh_6 = item.ColHtmlArray_6;
                            }
                            if (ColHtmlArray_8.length > 0) {
                                item.ColHtmlArray_8 = ColHtmlArray_8;
                                item.ColHtml_8 = ColHtmlArray_8.join(' ');
                                ArrayHinh_8 = item.ColHtmlArray_8;
                            }

                            if (ColHtmlArray_10.length > 0) {
                                item.ColHtmlArray_10 = ColHtmlArray_10;
                                item.ColHtml_10 = ColHtmlArray_10.join(' ');
                                ArrayHinh_10 = item.ColHtmlArray_10;
                            }
                            if (ColHtmlArray_12.length > 0) {
                                item.ColHtmlArray_12 = ColHtmlArray_12;
                                item.ColHtml_12 = ColHtmlArray_12.join(' ');
                                ArrayHinh_12 = item.ColHtmlArray_12;
                            }
                            if (ColHtmlArray_16.length > 0) {
                                item.ColHtmlArray_16 = ColHtmlArray_16;
                                item.ColHtml_16 = ColHtmlArray_16.join(' ');
                                ArrayHinh_16 = item.ColHtmlArray_16;
                            }
                        }

                    }
                    else if (item.Quantity == 4) // phân loại 2 sẽ lấy cột 2,4,6,8,10,12,14 col html cũng vậy 
                    {
                        CheckLoadLuoiChiTiet = item.Quantity;
                        if (
                            item.Uri_String_IMG_4 !== null && item.Uri_String_IMG_4 !== '' && item.Uri_String_IMG_4 !== undefined
                        ) {
                            var ColHTML_2 = null, ColHTML_4 = null, ColHTML_6 = null, ColHTML_8 = null,
                                ColHTML_10 = null, ColHTML_12 = null, ColHTML_14 = null

                            if (checkvaluedata(item.Uri_String_IMG_2) === true) {
                                ColHTML_2 = item.Uri_String_IMG_2.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_4) === true) {
                                ColHTML_4 = item.Uri_String_IMG_4.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_6) === true) {
                                ColHTML_6 = item.Uri_String_IMG_6.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_8) === true) {
                                ColHTML_8 = item.Uri_String_IMG_8.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_10) === true) {
                                ColHTML_10 = item.Uri_String_IMG_10.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_12) === true) {
                                ColHTML_12 = item.Uri_String_IMG_12.split(',');
                            }
                            if (checkvaluedata(item.Uri_String_IMG_14) === true) {
                                ColHTML_14 = item.Uri_String_IMG_14.split(',');
                            }
                            var ColHtmlArray_2 = [];
                            var ColHtmlArray_4 = [];
                            var ColHtmlArray_6 = [];
                            var ColHtmlArray_8 = [];
                            var ColHtmlArray_10 = [];
                            var ColHtmlArray_12 = [];
                            var ColHtmlArray_14 = [];

                            var lisDataFilesName_2 = [];
                            var lisDataFilesName_4 = [];
                            var lisDataFilesName_6 = [];
                            var lisDataFilesName_8 = [];
                            var lisDataFilesName_10 = [];
                            var lisDataFilesName_12 = [];
                            var lisDataFilesName_14 = [];

                            if (checkvaluedata(ColHTML_2) === true)
                                $.each(ColHTML_2, function (index, item1) {
                                    lisDataFilesName_2.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_2, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_4) === true)
                                $.each(ColHTML_4, function (index, item1) {
                                    lisDataFilesName_4.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_4, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_6) === true)
                                $.each(ColHTML_6, function (index, item1) {
                                    lisDataFilesName_6.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_6, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_8) === true)
                                $.each(ColHTML_8, function (index, item1) {
                                    lisDataFilesName_8.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_8, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_10) === true)
                                $.each(ColHTML_10, function (index, item1) {
                                    lisDataFilesName_10.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_10, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_12) === true)
                                $.each(ColHTML_12, function (index, item1) {
                                    lisDataFilesName_12.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_12, item.RequestId);
                                });
                            if (checkvaluedata(ColHTML_14) === true)
                                $.each(ColHTML_14, function (index, item1) {
                                    lisDataFilesName_14.push(item1.split('/')[3]);
                                    rendererFile_205(item1, ColHtmlArray_14, item.RequestId);
                                });
                            if (ColHtmlArray_2.length > 0) {
                                item.ColHtmlArray_2 = ColHtmlArray_2; // mảng tên hình 
                                item.ColHtml_2 = ColHtmlArray_2.join(' '); // hiển thị hình lên lưới 
                                ArrayHinh_2 = item.ColHtmlArray_2; // lấy mảng html hình ban đầu của dữ liệu dưới store 
                            }

                            if (ColHtmlArray_4.length > 0) {
                                item.ColHtmlArray_4 = ColHtmlArray_4;
                                item.ColHtml_4 = ColHtmlArray_4.join(' ');
                                ArrayHinh_4 = item.ColHtmlArray_4;
                            }

                            if (ColHtmlArray_6.length > 0) {
                                item.ColHtmlArray_6 = ColHtmlArray_6;
                                item.ColHtml_6 = ColHtmlArray_6.join(' ');
                                ArrayHinh_6 = item.ColHtmlArray_6;
                            }
                            if (ColHtmlArray_8.length > 0) {
                                item.ColHtmlArray_8 = ColHtmlArray_8;
                                item.ColHtml_8 = ColHtmlArray_8.join(' ');
                                ArrayHinh_8 = item.ColHtmlArray_8;
                            }

                            if (ColHtmlArray_10.length > 0) {
                                item.ColHtmlArray_10 = ColHtmlArray_10;
                                item.ColHtml_10 = ColHtmlArray_10.join(' ');
                                ArrayHinh_10 = item.ColHtmlArray_10;
                            }
                            if (ColHtmlArray_12.length > 0) {
                                item.ColHtmlArray_12 = ColHtmlArray_12;
                                item.ColHtml_12 = ColHtmlArray_12.join(' ');
                                ArrayHinh_12 = item.ColHtmlArray_12;
                            }
                            if (ColHtmlArray_14.length > 0) {
                                item.ColHtmlArray_14 = ColHtmlArray_14;
                                item.ColHtml_14 = ColHtmlArray_14.join(' ');
                                ArrayHinh_14 = item.ColHtmlArray_14;
                            }
                        }

                    }
                }
            })
            //▲ =================================================
            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                td.innerHTML = escaped;
                td.style.textAlign = 'left';
                return td;
            }
            var actionRendererLink = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {//▶ Edit - TrongNM3 - 19/12/2018 - Loai 205 - claim nha bao hiem
                    return index == row && prop == 'NoiDungTraoDoi' && item.NoiDungTraoDoi !== null && item.NoiDungTraoDoi !== '' && item.NoiDungTraoDoi !== undefined;
                });
                var string = ''
                if (data.length > 0) {
                    var IDDetail = 0;
                    if (data[0].NoiDungTraoDoi !== '' && data[0].NoiDungTraoDoi !== null && data[0].NoiDungTraoDoi !== undefined && data[0].NoiDungTraoDoi !== 0) {
                        IDDetail = data[0].NoiDungTraoDoi;
                    }
                    if (IDDetail != 0) {
                        var Tam = IDDetail.split('^/')
                        $.each(Tam, function (index, item) {
                            string = string + item + '<br>'
                        })
                    }

                }
                $(td).empty().append(string);
            };
            var actionRendererLinkCamera205 = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'CapNhatLinkCamera' && item.CapNhatLinkCamera !== null && item.CapNhatLinkCamera !== '' && item.CapNhatLinkCamera !== undefined;
                });
                var $button = ''
                if (data.length > 0) {
                    var Link = 0;
                    if (data[0].CapNhatLinkCamera !== '' && data[0].CapNhatLinkCamera !== null && data[0].CapNhatLinkCamera !== undefined && data[0].CapNhatLinkCamera !== 0) {
                        Link = data[0].CapNhatLinkCamera;
                    }
                    if (Link != 0) {
                        $button = $('<a target="_blank"  href="' + Link + '">' + Link + '</a>');
                    }
                }
                $(td).empty().append($button);
            };
            var requestdetailId = 0;
            var actionRendererconversation = function (instance, td, row, col, prop, value, cellProperties) {
                var $button = '';
                var exitsConvasation = instance.getDataAtRowProp(row, 'NoiDungTraoDoi');//▶ Edit - TrongNM3 - 19/12/2018 - Loai 205 - claim nha bao hiem
                if (value !== null && value !== '' && value !== undefined && value != 0 && exitsConvasation != null && exitsConvasation != '' && exitsConvasation != undefined) {
                    $button = $('<i style="cursor: pointer; color:red; margin-left: 10px;" id="Pro_' + row + '" data-value="' + idreqd[row] + '" class="fa  fa-comments-o" aria-hidden="true" ></i>');
                }
                else {
                    $button = $('<i style="cursor: pointer; color:Green; margin-left: 10px;" id="Pro_' + row + '" data-value="' + idreqd[row] + '" class="fa  fa-comments-o" aria-hidden="true" ></i>');
                }
                $button.click(function () {
                    requestdetailId = $(this).attr('data-value');
                    if (CL.Status === "4") {
                        XFunction.RenderMessage("error", "Callog đã hoàn tất không thể trao đổi ! "); return false;
                    }
                    if (check_isAssiner === true || check_isSender === true) {
                        $('#modal205').modal('show')
                    }
                    else {
                        XFunction.RenderMessage("error", "Trao đổi chỉ người tạo và người xử lý calllog ! "); return false;
                    }
                });
                $button != '' ? $(td).empty().append($button) : $(td).empty().append('');
            }
            if (CL.StepNo == 1) {
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: l_Data_Handsontable,
                        //================================Cols=======
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: true,
                        columnSorting: false,
                        colWidths: 'undefined',
                        copyColsLimit: 8,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 0,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 8,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: true,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 0,
                        minRows: 1,
                        startRows: 1,
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: true,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: true,
                        hiddenColumns: {
                            indicators: true
                        },
                        //====================================Oder ==============================================
                        colHeaders:
                            [
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;"> Nội dung yêu cầu hổ trợ </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm file Bản tường trình</strong> <br> <strong style="font-size: 11px;">chi tiết sự cố </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">File ảnh bản tường trình </strong> <br><strong style="font-size: 11px; > chi tiết sự cố </strong> </div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết giá trị thiệt hại</strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết giá trị thiệt hại</strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;"> Cập nhập link camera </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Ghi chú </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Trao đổi </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Nội dung trao đổi </strong></div>'
                            ],
                        columns: [
                            { data: "Property1", type: 'text', className: 'htMiddle', width: 160, readOnly: true },
                            { data: "FileSuCo", type: 'text', className: 'htLeft', width: 180, renderer: actionRendererUpload, readOnly: true },
                            { data: "ColHtml_4", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                            { data: "FileBangKeChiTietGiaTriThietHai", type: 'text', className: 'htLeft', width: 160, renderer: actionRendererUpload, readOnly: true },
                            { data: "ColHtml_8", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                            { data: "FileAnhXacNhanTrinhBaoCongAn", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererUpload, readOnly: true },
                            { data: "ColHtml_12", type: 'text', className: 'htLeft', width: 220, renderer: safeHtmlRenderer, readOnly: true },
                            { data: "CapNhatLinkCamera", type: 'text', className: 'htMiddle', width: 200, readOnly: false },
                            { data: "Property2", type: 'text', className: 'htMiddle', width: 250, readOnly: true },
                            { data: "Conversation", type: 'text', className: 'htLeft', width: 70, readOnly: true, renderer: actionRendererconversation },
                            {
                                data: "NoiDungTraoDoi", type: 'text', className: 'htMiddle', width: 300, readOnly: true
                                , renderer: actionRendererLink
                            },
                        ],
                    };
                };
                hot = new Handsontable(container, setting());
                hot.selectCell(0, 0, 0, 0);
            }
            else if (CL.StepNo == 2) {
                var setting = function () {
                    return {
                        //=================================Data=======
                        data: l_Data_Handsontable,
                        //================================Cols=======
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: true,
                        columnSorting: false,
                        colWidths: 'undefined',
                        copyColsLimit: 8,
                        currentColClassName: 'currentCol',
                        fixedColumnsLeft: 0,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 8,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: true,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,//▶ Edit - TrongNM3 - 17/12/2018 - Loai 205 - claim nha bao hiem
                        minRows: 1,
                        startRows: 1,
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: true,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: true,
                        hiddenColumns: {
                            indicators: true
                        },
                        //====================================Oder ==============================================
                        colHeaders:
                            [
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Phân loại yêu cầu </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;"> Nội dung yêu cầu hổ trợ </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm file Bản tường trình</strong> <br> <strong style="font-size: 11px;">chi tiết sự cố </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">File ảnh bản tường trình </strong> <br><strong style="font-size: 11px; > chi tiết sự cố </strong> </div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết giá trị thiệt hại</strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết giá trị thiệt hại</strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;"> Cập nhập link camera </strong></div>',
                                //▶ Edit - TrongNM3 - 19/12/2018 - Loai 205 - claim nha bao hiem
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Ghi chú </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Trao đổi </strong></div>',
                                '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Nội dung trao đổi </strong></div>',

                            ],
                        columns: [
                            {
                                data: "PhanLoai", type: 'autocomplete', width: 300, source: optionsList, strict: true, allowInvalid: false
                            },
                            { data: "Property1", type: 'text', className: 'htLeft', width: 160, readOnly: true },
                            { data: "FileSuCo", type: 'text', className: 'htLeft', width: 180, renderer: actionRendererUpload, readOnly: true },
                            { data: "ColHtml_4", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                            { data: "FileBangKeChiTietGiaTriThietHai", type: 'text', className: 'htLeft', width: 160, renderer: actionRendererUpload, readOnly: true },
                            { data: "ColHtml_8", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                            { data: "FileAnhXacNhanTrinhBaoCongAn", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererUpload, readOnly: true },
                            { data: "ColHtml_12", type: 'text', className: 'htLeft', width: 220, renderer: safeHtmlRenderer, readOnly: true },
                            { data: "CapNhatLinkCamera", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererLinkCamera205, readOnly: true },
                            //▶ Edit - TrongNM3 - 19/12/2018 - Loai 205 - claim nha bao hiem { data: "Property2", type: 'text', className: 'htLeft', width: 250, readOnly: true },
                            { data: "Conversation", type: 'text', className: 'htLeft', width: 70, readOnly: true, renderer: actionRendererconversation },
                            {
                                data: "NoiDungTraoDoi", type: 'text', className: 'htLeft', width: 300, readOnly: true, renderer: actionRendererLink
                            },
                        ],
                    };
                };
                hot = new Handsontable(container, setting());
                hot.selectCell(0, 0, 0, 0);
            }
            else {
                if (CheckLoadLuoiChiTiet == 1) {
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: l_Data_Handsontable,
                            //================================Cols=======
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 8,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 8,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            minRows: 1,
                            startRows: 1,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: true,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: false,
                            hiddenColumns: {
                                indicators: true
                            },
                            //====================================Oder ==============================================
                            colHeaders:
                                [
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Nội dung yêu cầu hổ trợ </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Phân loại yêu cầu </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm file Bản tường trình</strong> <br> <strong style="font-size: 11px;">chi tiết sự cố </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">File ảnh bản tường trình </strong> <br><strong style="font-size: 11px; > chi tiết sự cố </strong> </div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết giá trị thiệt hại</strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết giá trị thiệt hại</strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Cập nhập link camera </strong></div>',
                                    '',
                                    '',
                                    '',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">File biên bản bồi thường </strong></div>',
                                    '<div style=""><strong style="font-size: 11px;">File biên bản bồi thường </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Ghi chú </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Trao đổi </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Nội dung trao đổi </strong></div>',

                                ],
                            columns: [
                                { data: "Property1", type: 'text', className: 'htLeft', width: 160, readOnly: true },
                                { data: "PhanLoai", width: 170, readOnly: true, type: 'text' },
                                { data: "FileSuCo", type: 'text', className: 'htLeft', width: 180, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_4", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "FileBangKeChiTietGiaTriThietHai", type: 'text', className: 'htLeft', width: 160, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_8", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "CapNhatLinkCamera", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererLinkCamera205, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "FileBienBanBoiThuong", type: 'text', className: 'htLeft', width: 270, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_16", type: 'text', className: 'htLeft', width: 270, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "Property2", type: 'text', className: 'htLeft', width: 250, readOnly: true },
                                { data: "Conversation", type: 'text', className: 'htLeft', width: 70, readOnly: true, renderer: actionRendererconversation },
                                {
                                    data: "NoiDungTraoDoi", type: 'text', className: 'htLeft', width: 300, readOnly: true
                                    , renderer: actionRendererLink
                                },
                            ],
                        };
                    };
                    hot = new Handsontable(container, setting());
                    hot.selectCell(0, 0, 0, 0);
                }
                else if (CheckLoadLuoiChiTiet == 2) {
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: l_Data_Handsontable,
                            //================================Cols=======
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 8,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 8,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            minRows: 1,
                            startRows: 1,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: true,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: true,
                            hiddenColumns: {
                                indicators: true
                            },
                            //====================================Oder ==============================================
                            colHeaders:
                                [
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Nội dung yêu cầu hổ trợ </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Phân loại yêu cầu </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm file Bản tường trình chi tiết sự cố </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">File Bản tường trình chi tiết sự cố </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết <br> giá trị thiệt hại</strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết  <br> giá trị thiệt hại</strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Cập nhập link camera </strong></div>',
                                    '',
                                    '',
                                    '',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> File biên bản bồi thường </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">  File biên bản bồi thường </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Ghi chú </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Trao đổi </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> Nội dung trao đổi </strong></div>',

                                ],
                            columns: [

                                { data: "Property1", type: 'text', className: 'htLeft', width: 180, readOnly: true },
                                { data: "PhanLoai", width: 170, readOnly: true, type: 'text' },
                                { data: "FileSuCo", type: 'text', className: 'htLeft', width: 280, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_4", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "FileBangKeChiTietGiaTriThietHai", type: 'text', className: 'htLeft', width: 190, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_8", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "FileAnhXacNhanTrinhBaoCongAn", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_12", type: 'text', className: 'htLeft', width: 220, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "CapNhatLinkCamera", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererLinkCamera205, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "FileBienBanBoiThuong", type: 'text', className: 'htLeft', width: 270, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_16", type: 'text', className: 'htLeft', width: 270, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "Property2", type: 'text', className: 'htLeft', width: 250, readOnly: true },
                                { data: "Conversation", type: 'text', className: 'htLeft', width: 70, readOnly: true, renderer: actionRendererconversation },// Edit - NghiaTV5 - 31/03/2018 - 205 claim bảo hiểm

                                {
                                    data: "NoiDungTraoDoi", type: 'text', className: 'htLeft', width: 300, readOnly: true
                                    , renderer: actionRendererLink
                                },
                            ],
                        };
                    };
                    hot = new Handsontable(container, setting());
                    hot.selectCell(0, 0, 0, 0);
                }
                else if (CheckLoadLuoiChiTiet == 3) {
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: l_Data_Handsontable,
                            //================================Cols=======
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 8,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 8,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            minRows: 1,
                            startRows: 1,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: true,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: true,
                            hiddenColumns: {
                                indicators: true
                            },
                            //====================================Oder ==============================================
                            colHeaders:
                                [
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Nội dung yêu cầu hổ trợ </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Phân loại yêu cầu </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm file Bản tường trình chi tiết sự cố </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">File Bản tường trình chi tiết sự cố </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết <br> giá trị thiệt hại</strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết  <br> giá trị thiệt hại</strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Cập nhập link camera </strong></div>',
                                    '',
                                    '',
                                    '',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> File biên bản bồi thường </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">  File biên bản bồi thường </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Ghi chú </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Trao đổi </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> Nội dung trao đổi </strong></div>',


                                ],
                            columns: [

                                { data: "Property1", type: 'text', className: 'htLeft', width: 180, readOnly: true },
                                { data: "PhanLoai", width: 170, readOnly: true, type: 'text' },
                                { data: "FileSuCo", type: 'text', className: 'htLeft', width: 280, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_4", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "FileBangKeChiTietGiaTriThietHai", type: 'text', className: 'htLeft', width: 190, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_8", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "FileAnhXacNhanTrinhBaoCongAn", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_12", type: 'text', className: 'htLeft', width: 220, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "CapNhatLinkCamera", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererLinkCamera205, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "FileBienBanBoiThuong", type: 'text', className: 'htLeft', width: 270, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_16", type: 'text', className: 'htLeft', width: 270, renderer: safeHtmlRenderer, readOnly: true },

                                { data: "Property2", type: 'text', className: 'htLeft', width: 250, readOnly: true },
                                { data: "Conversation", type: 'text', className: 'htLeft', width: 70, readOnly: true, renderer: actionRendererconversation },// Edit - NghiaTV5 - 31/03/2018 - 205 claim bảo hiểm
                                {
                                    data: "NoiDungTraoDoi", type: 'text', className: 'htLeft', width: 300, readOnly: true
                                    , renderer: actionRendererLink
                                },

                            ],
                        };
                    };
                    hot = new Handsontable(container, setting());
                    hot.selectCell(0, 0, 0, 0);

                }
                else if (CheckLoadLuoiChiTiet == 4) {
                    var setting = function () {
                        return {
                            //=================================Data=======
                            data: l_Data_Handsontable,
                            //================================Cols=======
                            minSpareCols: 0,
                            allowInsertColumn: false,
                            allowRemoveColumn: false,
                            autoColumnSize: true,
                            autoWrapCol: true,
                            columnSorting: false,
                            colWidths: 'undefined',
                            copyColsLimit: 8,
                            currentColClassName: 'currentCol', //currentCol
                            fixedColumnsLeft: 0,
                            manualColumnMove: false,
                            manualColumnResize: true,
                            viewportColumnRenderingOffset: 8,
                            sortIndicator: true,
                            //================================Rows=======
                            allowInsertRow: true,
                            allowRemoveRow: true,
                            autoRowSize: true,
                            autoWrapRow: true,
                            copyRowsLimit: 1000,
                            currentRowClassName: 'currentRow',
                            fixedRowsTop: 0,
                            manualRowMove: false,
                            manualRowResize: true,
                            rowHeaders: true,
                            minSpareRows: 0,
                            minRows: 1,
                            startRows: 1,
                            //================================Oder=======
                            allowInvalid: false,
                            stretchH: 'all',
                            commentedCellClassName: 'htCommentCell',
                            comments: true,
                            contextMenu: true,
                            copyable: true,
                            customBorders: false,
                            debug: false,
                            disableVisualSelection: true,
                            enterBeginsEditingBoolean: true,
                            fillHandle: true,
                            outsideClickDeselects: true,
                            fragmentSelection: false,
                            groups: false,
                            invalidCellClassName: 'htInvalid',
                            mergeCells: false,
                            multiSelect: true,
                            noWordWrapClassName: 'htNoWrap',
                            placeholder: false,
                            placeholderCellClassName: 'htPlaceholder',
                            readOnlyCellClassName: 'htDimmed',
                            search: false,
                            trimWhitespace: true,
                            undo: true,
                            formulas: true,
                            wordWrap: true,
                            hiddenColumns: {
                                indicators: true
                            },
                            //====================================Oder ==============================================
                            colHeaders:
                                [
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Nội dung yêu cầu hổ trợ </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Phân loại yêu cầu </strong></div>',
                                    ' <div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm file Bản tường trình chi tiết sự cố </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">File Bản tường trình chi tiết sự cố </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết <br> giá trị thiệt hại</strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Đính kèm bảng kê chi tiết  <br> giá trị thiệt hại</strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> File ảnh xác nhận trình báo công an </strong></div>',
                                    '<div style="padding-top: 5px;"><strong style="font-size: 11px;">Cập nhập link camera </strong></div>',
                                    '',
                                    '',
                                    '',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Ghi chú </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;">Trao đổi </strong></div>',
                                    '<div style="padding-top: 20px;"><strong style="font-size: 11px;"> Nội dung trao đổi </strong></div>'
                                ],
                            columns: [

                                { data: "Property1", type: 'text', className: 'htLeft', width: 180, readOnly: true },
                                { data: "PhanLoai", width: 170, readOnly: true, type: 'text' },
                                { data: "FileSuCo", type: 'text', className: 'htLeft', width: 280, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_4", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "FileBangKeChiTietGiaTriThietHai", type: 'text', className: 'htLeft', width: 190, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_8", type: 'text', className: 'htLeft', width: 200, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "FileAnhXacNhanTrinhBaoCongAn", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererUpload, readOnly: true },
                                { data: "ColHtml_12", type: 'text', className: 'htLeft', width: 220, renderer: safeHtmlRenderer, readOnly: true },
                                { data: "CapNhatLinkCamera", type: 'text', className: 'htLeft', width: 200, renderer: actionRendererLinkCamera205, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "", type: 'text', className: 'htLeft', width: 0.1, readOnly: true },
                                { data: "Property2", type: 'text', className: 'htLeft', width: 250, readOnly: true },
                                { data: "Conversation", type: 'text', className: 'htLeft', width: 70, readOnly: true, renderer: actionRendererconversation },

                                {
                                    data: "NoiDungTraoDoi", type: 'text', className: 'htLeft', width: 300, readOnly: true
                                    , renderer: actionRendererLink
                                }
                            ],
                        };
                    };
                    hot = new Handsontable(container, setting());
                    hot.selectCell(0, 0, 0, 0);
                }
                else {
                    alert("Không tồn tại lưới chi tiết");
                }
            }

            if (CheckLoadLuoiChiTiet == 4) {
                $btnReply.remove();
            }
            if (CL.StepNo == "4") {
                $('#ShowDiv205').show();
                if (permisstion.isAssiner == false) {
                    $('#XNOK_205').attr('disabled', true);
                    $('#XNNO_205').attr('disabled', true);
                }
                $('#XNOK_205').on('change', function () {
                    if ($('#XNOK_205').is(':checked') === true) {
                        $("#XNOK_205").prop("checked", true);
                        $("#XNOK_205").parent().addClass('checked');

                        $("#XNNO_205").prop("checked", false);
                        $("#XNNO_205").parent().removeClass('checked');
                    }
                    else {
                        //$("#XNNO_205").prop("checked", true);
                        //$("#XNNO_205").parent().addClass('checked');

                        //$("#XNOK_205").prop("checked", false);
                        //$("#XNOK_205").parent().removeClass('checked');
                    }
                })
                $('#XNNO_205').on('change', function () {
                    if ($('#XNNO_205').is(':checked') === true) {
                        $("#XNNO_205").prop("checked", true);
                        $("#XNNO_205").parent().addClass('checked');

                        $("#XNOK_205").prop("checked", false);
                        $("#XNOK_205").parent().removeClass('checked');
                    }
                })
            }

            $btnComment.on('click', function () {
                if (CL.Status === "4") {
                    XFunction.RenderMessage("error", "Callog đã hoàn tất ! "); return false;
                }
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myDataLink = $.grep(hot.getSettings().data, function (item, index) {
                    return item.CapNhatLinkCamera !== null && item.CapNhatLinkCamera !== '' && item.CapNhatLinkCamera !== undefined;
                });
                if (myDataLink.length == 0 && CL.StepNo == 1) {
                    XFunction.RenderMessage("error", "Cập Nhật link camera trước khi trao đổi!"); return false;
                }
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn !"); return false;
                }
                if (Ass != checkTop1NoiDungTraoDoi) {
                    if ((CL.StepNo == 2)) {
                        if (Ass == ngXuLy) {
                            XFunction.RenderMessage("error", "Người tạo phải nhập trao đổi trên lưới"); return false;
                        }
                        else {
                            XFunction.RenderMessage("error", "Nhân viên hành chính phải nhập trao đổi trên lưới"); return false;
                        }
                    }
                    else if (CL.StepNo == 3 || CL.StepNo == 1) {
                        XFunction.RenderMessage("error", "Phải nhập trao đổi trên lưới"); return false;
                    }
                }

                if (CL.StepNo == 1 && check_isAssiner == true) {
                    $('#myModal').modal('show');
                    var data = new FormData();
                    var dataReturn = [];
                    $.each(myDataLink, function (index, item) {
                        dataReturn.push({
                            LinkCamera: item.CapNhatLinkCamera,
                            Id: (item.Id === null || item.Id === "" || item.Id === undefined) ? 0 : item.Id,
                            RequestId: item.RequestId
                        });
                    });
                    data.append("Details", JSON.stringify(dataReturn));
                    data.append("fileUpload", $('#fileUpload').val());
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#TextArea205').val('');
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
                else if (CL.StepNo == 2 && (check_isSender == true || check_isAssiner == true)) { //▶ Edit - TrongNM3 - 18/12/2018 - Loai 205 - claim nha bao hiem
                    $('#myModal').modal('show');
                    var data = new FormData();
                    var dataReturn = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.Quantity == null || item.Quantity == '' || item.Quantity == undefined) {
                            var PhanLoai = 0;
                            if (item.PhanLoai === 'Hàng hóa có thể sửa chữa') {
                                PhanLoai = 1;
                            }
                            else if (item.PhanLoai === 'Hàng hóa Mất, hư hỏng hoàn toàn') {
                                PhanLoai = 2;
                            }
                            else if (item.PhanLoai === 'Hư hỏng Nhà cửa, vật kiến trúc, nội thất, biển hiệu') {
                                PhanLoai = 3;
                            }
                            else if (item.PhanLoai === 'Thiệt hại gây ra cho bên thứ 3') {
                                PhanLoai = 4;
                            }
                            dataReturn.push({
                                colFileSuCo: 4,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                colFileAnhXacNhanTrinhBaoCongAn: 12,
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileAnhXacNhanTrinhBaoCongAn: checkvaluedata(item.ListNameFileFileAnhXacNhanTrinhBaoCongAn) === true ? item.ListNameFileFileAnhXacNhanTrinhBaoCongAn : "",
                                PhanLoai: PhanLoai,
                                Id: (item.Id === null || item.Id === "" || item.Id === undefined) ? 0 : item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });

                            if (checkvaluedata(item.DataFilesFileAnhXacNhanTrinhBaoCongAn) === true)
                                $.each(item.DataFilesFileAnhXacNhanTrinhBaoCongAn, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });

                        }
                        else if (item.Quantity == 1) {
                            dataReturn.push({
                                colFileSuCo: 4,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy : "",
                                PhanLoai: 1,
                                Id: (item.Id === null || item.Id === "" || item.Id === undefined) ? 0 : item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });

                        }
                        else if (item.Quantity == 2) {
                            dataReturn.push({
                                colFileSuCo: 4,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                colFileAnhXacNhanTrinhBaoCongAn: 12,
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileAnhXacNhanTrinhBaoCongAn: checkvaluedata(item.ListNameFileFileAnhXacNhanTrinhBaoCongAn) === true ? item.ListNameFileFileAnhXacNhanTrinhBaoCongAn : "",
                                PhanLoai: 2,
                                Id: item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileVuViec) === true)
                                $.each(item.DataFilesFileVuViec, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCoKemChuKy) === true)
                                $.each(item.DataFilesFileSuCoKemChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy) == true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileAnhXacNhanTrinhBaoCongAn) === true)
                                $.each(item.DataFilesFileAnhXacNhanTrinhBaoCongAn, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                        }
                        else if (item.Quantity == 3) {
                            dataReturn.push({
                                colFileSuCo: 4,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                colFileAnhXacNhanTrinhBaoCongAn: 12,
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileAnhXacNhanTrinhBaoCongAn: checkvaluedata(item.ListNameFileFileAnhXacNhanTrinhBaoCongAn) === true ? item.ListNameFileFileAnhXacNhanTrinhBaoCongAn : "",
                                PhanLoai: 3,
                                Id: item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileAnhXacNhanTrinhBaoCongAn) === true)
                                $.each(item.DataFilesFileAnhXacNhanTrinhBaoCongAn, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                        }
                        else if (item.Quantity == 4) {
                            dataReturn.push({
                                colFileSuCo: 4,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                colFileAnhXacNhanTrinhBaoCongAn: 12,
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileAnhXacNhanTrinhBaoCongAn: checkvaluedata(item.ListNameFileFileAnhXacNhanTrinhBaoCongAn) === true ? item.ListNameFileFileAnhXacNhanTrinhBaoCongAn : "",
                                PhanLoai: 4,
                                Id: item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileAnhXacNhanTrinhBaoCongAn) === true)
                                $.each(item.DataFilesFileAnhXacNhanTrinhBaoCongAn, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                        }
                    });
                    data.append("Details", JSON.stringify(dataReturn));
                    data.append("fileUpload", $('#fileUpload').val());
                    $.ajax({
                        type: "POST",
                        url: "/Requests/AddPictureInDetailCalllog",
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            $('#Details').val(JSON.stringify(dataReturn));
                            $('#TextArea205').val('');
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();

                        },
                        error: function () {
                            $('#myModal').modal('hide');
                            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                            return;
                            //var win = window.open('/Home', '_self');
                        }
                    });
                }
                else {
                    $('#myModal').modal('show');
                    var datareturn = [];
                    datareturn.push({
                        Id: CL.Id,
                        TypeId: CL.TypeId,
                        StepNo: CL.StepNo,
                        GroupId: CL.GroupId,
                        Status: CL.Status,
                        Assigner: CL.Assigner,
                        FromShop: CL.FromShop,
                    })
                    $('#Details').val(JSON.stringify(datareturn));
                    //$('#messageLuoi205').val(messageLuoi);//▼ Delete - NghiaTV5 - 16/04/2018 - 205 claim bảo hiểm
                    $('#TextArea205').val('');
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
            });
            $btnComplete.on('click', function () {
                var RadioValue = 0;
                if (CL.StepNo == 4) {
                    var RadioValue = $('input[name=HC_205]:checked').val();
                    if ($('#XNOK_205').is(':checked') === true)
                        RadioValue = 1;
                    if ($('#XNNO_205').is(':checked') === true)
                        RadioValue = 2;
                    if (RadioValue === undefined || RadioValue === null || RadioValue === '')
                        RadioValue = 0;
                }

                if (CL.Status === "4") {
                    XFunction.RenderMessage("error", "Callog đã hoàn tất ! "); return false;
                }
                if (Ass != checkTop1NoiDungTraoDoi) {
                    if (CL.StepNo == 2) {
                        XFunction.RenderMessage("error", "Nhân viên hành chính phải nhập trao đổi trên lưới"); return false;
                    }
                    else if (CL.StepNo == 3 || CL.StepNo == 1) {
                        XFunction.RenderMessage("error", "Phải nhập trao đổi trên lưới"); return false;
                    }
                }
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                if (CL.StepNo == 2 && check_isSender == true) {
                    $('#myModal').modal('show');
                    var data = new FormData();
                    var dataReturn = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        var PhanLoai = 0;
                        if (item.PhanLoai === 'Hàng hóa có thể sửa chữa') {
                            PhanLoai = 1;
                        }
                        else if (item.PhanLoai === 'Hàng hóa Mất, hư hỏng hoàn toàn') {
                            PhanLoai = 2;
                        }
                        else if (item.PhanLoai === 'Hư hỏng Nhà cửa, vật kiến trúc, nội thất, biển hiệu') {
                            PhanLoai = 3;
                        }
                        else if (item.PhanLoai === 'Thiệt hại gây ra cho bên thứ 3') {
                            PhanLoai = 4;
                        }

                        dataReturn.push({
                            colFileVuViec: 2,
                            colFileSuCo: 4,
                            colFileSuCoKemChuKy: 6,
                            colFileBangKeChiTietGiaTriThietHai: 8,
                            colFileBangKeChiTietGiaTriThietHaiCoChuKy: 10,
                            colFileAnhXacNhanTrinhBaoCongAn: 12,
                            colFileHinhChungTuChungMinhThietHai: 14,

                            ListNameFileFileVuViec: checkvaluedata(item.ListNameFileFileVuViec) === true ? item.ListNameFileFileVuViec : "",
                            ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                            ListNameFileFileSuCoKemChuKy: checkvaluedata(item.ListNameFileFileSuCoKemChuKy) === true ? item.ListNameFileFileSuCoKemChuKy : "",
                            ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                            ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy : "",
                            ListNameFileFileAnhXacNhanTrinhBaoCongAn: checkvaluedata(item.ListNameFileFileAnhXacNhanTrinhBaoCongAn) === true ? item.ListNameFileFileAnhXacNhanTrinhBaoCongAn : "",
                            ListNameFileFileHinhChungTuChungMinhThietHai: checkvaluedata(item.ListNameFileFileHinhChungTuChungMinhThietHai) === true ? item.ListNameFileFileHinhChungTuChungMinhThietHai : "",
                            PhanLoai: PhanLoai,
                            Id: item.Id,
                            RequestId: item.RequestId
                        });
                        if (checkvaluedata(item.DataFilesFileVuViec) === true)
                            $.each(item.DataFilesFileVuViec, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        if (checkvaluedata(item.DataFilesFileSuCo) === true)
                            $.each(item.DataFilesFileSuCo, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        if (checkvaluedata(item.DataFilesFileSuCoKemChuKy) === true)
                            $.each(item.DataFilesFileSuCoKemChuKy, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                            $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy) === true)
                            $.each(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        if (checkvaluedata(item.DataFilesFileAnhXacNhanTrinhBaoCongAn) === true)
                            $.each(item.DataFilesFileAnhXacNhanTrinhBaoCongAn, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                        if (checkvaluedata(item.DataFilesFileHinhChungTuChungMinhThietHai) === true)
                            $.each(item.DataFilesFileHinhChungTuChungMinhThietHai, function (cout, element) {
                                data.append(element.nameNew, element);
                            });
                    });
                    data.append("Details", JSON.stringify(dataReturn));
                    data.append("fileUpload", $('#fileUpload').val());
                    $.ajax({
                        type: "POST",
                        url: "/Requests/AddPictureInDetailCalllog",
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            $('#Details').val(JSON.stringify(dataReturn));
                            $('#TextArea205').val('');
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();

                        },
                        error: function () {
                            $('#myModal').modal('hide');
                            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                            return;
                            //var win = window.open('/Home', '_self');
                        }
                    });
                }
                //FileBienBanBoiThuong
                else {
                    if (CL.StepNo == 4) {
                        $('#myModal').modal('show');
                        var data = new FormData();
                        var dataReturn = [];
                        var checkFile = [];
                        $.each(hot.getSettings().data, function (index, item) {
                            if (item.DataFileBienBanBoiThuong == null || item.DataFileBienBanBoiThuong == '' || item.DataFileBienBanBoiThuong == undefined) {
                                checkFile.push(index + 1);
                            }
                            dataReturn.push({
                                colFileBienBanBoiThuong: 16,
                                ListNameFileFileBienBanBoiThuong: checkvaluedata(item.ListNameFileBienBanBoiThuong) === true ? item.ListNameFileBienBanBoiThuong : "",
                                PhanLoai: item.Quantity,
                                Id: item.Id,
                                RequestId: item.RequestId,
                                filename: item.name
                            });
                            if (checkvaluedata(item.DataFileBienBanBoiThuong) === true)
                                $.each(item.DataFileBienBanBoiThuong, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                        });
                        data.append("Details", JSON.stringify(dataReturn));
                        data.append("fileUpload", $('#fileUpload').val());
                        if (checkFile.length == 0) {
                            $.ajax({
                                type: "POST",
                                url: "/Requests/AddPictureInDetailCalllog",
                                contentType: false,
                                processData: false,
                                data: data,
                                success: function (result) {
                                    console.log('success: ' + result);
                                },
                                error: function () {
                                    console.log('error');
                                }
                            });
                        }
                        else {
                            $('#myModal').modal('hide');
                            XFunction.RenderMessage("error", "Chưa up hình file biên bản bồi thường"); return false;
                        }
                    }
                    $('#myModal').modal('show');
                    var datareturn = [];
                    datareturn.push({
                        Id: CL.Id,
                        TypeId: CL.TypeId,
                        StepNo: CL.StepNo,
                        GroupId: CL.GroupId,
                        Status: CL.Status,
                        Assigner: CL.Assigner,
                        FromShop: CL.FromShop
                        , XacNhan: RadioValue
                        , CheckXN: $('#XNOK_205').is(':checked') === true ? 1 : 0
                        , CheckNXN: $('#XNNO_205').is(':checked') === true ? 1 : 0
                    })
                    $('#Details').val(JSON.stringify(datareturn));
                    var message = $("#Message").val();
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                }
            });
            $btnReply.on('click', function () {

                if (CL.Status === "4") {
                    XFunction.RenderMessage("error", "Callog đã hoàn tất ! "); return false;
                }
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var message = $("#Message").val();
                if (Ass != checkTop1NoiDungTraoDoi) {
                    if ((CL.StepNo == 2)) {
                        if (Ass == ngXuLy) {
                            XFunction.RenderMessage("error", "Người tạo phải nhập trao đổi trên lưới"); return false;
                        }
                        else {
                            XFunction.RenderMessage("error", "Nhân viên hành chính phải nhập trao đổi trên lưới"); return false;
                        }
                    }
                    else if (CL.StepNo == 3) {
                        XFunction.RenderMessage("error", "Phải nhập trao đổi trên lưới"); return false;
                    }
                    else if (CL.StepNo == 1) {
                        XFunction.RenderMessage("error", "Nhân viên IT phải nhập trao đổi trên lưới"); return false;
                    }
                }
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trả lời phải nhập tin nhắn :(");
                    return false;
                }
                if (CL.StepNo == 1 && check_isSender == true) {
                    var data = new FormData();
                    var dataReturn = [];
                    $.each(hot.getSettings().data, function (index, item) {
                        if (item.Quantity == 1) {
                            dataReturn.push({
                                colFileVuViec: 2,
                                colFileSuCo: 4,
                                colFileSuCoKemChuKy: 6,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                colFileBangKeChiTietGiaTriThietHaiCoChuKy: 10,

                                ListNameFileFileVuViec: checkvaluedata(item.ListNameFileFileVuViec) === true ? item.ListNameFileFileVuViec : "",
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileSuCoKemChuKy: checkvaluedata(item.ListNameFileFileSuCoKemChuKy) === true ? item.ListNameFileFileSuCoKemChuKy : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy : "",

                                PhanLoai: item.Quantity,
                                Id: (item.Id === null || item.Id === "" || item.Id === undefined) ? 0 : item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileVuViec) === true)
                                $.each(item.DataFilesFileVuViec, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCoKemChuKy) === true)
                                $.each(item.DataFilesFileSuCoKemChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });

                        }
                        else if (item.Quantity == 2) {
                            dataReturn.push({
                                colFileVuViec: 2,
                                colFileSuCo: 4,
                                colFileSuCoKemChuKy: 6,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                colFileBangKeChiTietGiaTriThietHaiCoChuKy: 10,
                                colFileAnhXacNhanTrinhBaoCongAn: 12,


                                ListNameFileFileVuViec: checkvaluedata(item.ListNameFileFileVuViec) === true ? item.ListNameFileFileVuViec : "",
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileSuCoKemChuKy: checkvaluedata(item.ListNameFileFileSuCoKemChuKy) === true ? item.ListNameFileFileSuCoKemChuKy : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy : "",
                                ListNameFileFileAnhXacNhanTrinhBaoCongAn: checkvaluedata(item.ListNameFileFileAnhXacNhanTrinhBaoCongAn) === true ? item.ListNameFileFileAnhXacNhanTrinhBaoCongAn : "",

                                PhanLoai: item.Quantity,
                                Id: item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileVuViec) === true)
                                $.each(item.DataFilesFileVuViec, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCoKemChuKy) === true)
                                $.each(item.DataFilesFileSuCoKemChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy) == true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileAnhXacNhanTrinhBaoCongAn) === true)
                                $.each(item.DataFilesFileAnhXacNhanTrinhBaoCongAn, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                        }
                        else if (item.Quantity == 3) {
                            dataReturn.push({
                                colFileVuViec: 2,
                                colFileSuCo: 4,
                                colFileSuCoKemChuKy: 6,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                colFileBangKeChiTietGiaTriThietHaiCoChuKy: 10,
                                colFileAnhXacNhanTrinhBaoCongAn: 12,

                                ListNameFileFileVuViec: checkvaluedata(item.ListNameFileFileVuViec) === true ? item.ListNameFileFileVuViec : "",
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileSuCoKemChuKy: checkvaluedata(item.ListNameFileFileSuCoKemChuKy) === true ? item.ListNameFileFileSuCoKemChuKy : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy : "",
                                ListNameFileFileAnhXacNhanTrinhBaoCongAn: checkvaluedata(item.ListNameFileFileAnhXacNhanTrinhBaoCongAn) === true ? item.ListNameFileFileAnhXacNhanTrinhBaoCongAn : "",

                                PhanLoai: item.Quantity,
                                Id: item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileVuViec) === true)
                                $.each(item.DataFilesFileVuViec, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCoKemChuKy) === true)
                                $.each(item.DataFilesFileSuCoKemChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileAnhXacNhanTrinhBaoCongAn) === true)
                                $.each(item.DataFilesFileAnhXacNhanTrinhBaoCongAn, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                        }
                        else if (item.Quantity == 4) {
                            dataReturn.push({
                                colFileVuViec: 2,
                                colFileSuCo: 4,
                                colFileSuCoKemChuKy: 6,
                                colFileBangKeChiTietGiaTriThietHai: 8,
                                colFileBangKeChiTietGiaTriThietHaiCoChuKy: 10,
                                colFileAnhXacNhanTrinhBaoCongAn: 12,
                                colFileHinhChungTuChungMinhThietHai: 14,

                                ListNameFileFileVuViec: checkvaluedata(item.ListNameFileFileVuViec) === true ? item.ListNameFileFileVuViec : "",
                                ListNameFileFileSuCo: checkvaluedata(item.ListNameFileFileSuCo) === true ? item.ListNameFileFileSuCo : "",
                                ListNameFileFileSuCoKemChuKy: checkvaluedata(item.ListNameFileFileSuCoKemChuKy) === true ? item.ListNameFileFileSuCoKemChuKy : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHai: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHai) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHai : "",
                                ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy: checkvaluedata(item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy) === true ? item.ListNameFileFileBangKeChiTietGiaTriThietHaiCoChuKy : "",
                                ListNameFileFileAnhXacNhanTrinhBaoCongAn: checkvaluedata(item.ListNameFileFileAnhXacNhanTrinhBaoCongAn) === true ? item.ListNameFileFileAnhXacNhanTrinhBaoCongAn : "",
                                ListNameFileFileHinhChungTuChungMinhThietHai: checkvaluedata(item.ListNameFileFileHinhChungTuChungMinhThietHai) === true ? item.ListNameFileFileHinhChungTuChungMinhThietHai : "",

                                PhanLoai: item.Quantity,
                                Id: item.Id,
                                RequestId: item.RequestId
                            });
                            if (checkvaluedata(item.DataFilesFileVuViec) === true)
                                $.each(item.DataFilesFileVuViec, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCo) === true)
                                $.each(item.DataFilesFileSuCo, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileSuCoKemChuKy) === true)
                                $.each(item.DataFilesFileSuCoKemChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHai) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy) === true)
                                $.each(item.DataFilesFileBangKeChiTietGiaTriThietHaiCoChuKy, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileAnhXacNhanTrinhBaoCongAn) === true)
                                $.each(item.DataFilesFileAnhXacNhanTrinhBaoCongAn, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                            if (checkvaluedata(item.DataFilesFileHinhChungTuChungMinhThietHai) === true)
                                $.each(item.DataFilesFileHinhChungTuChungMinhThietHai, function (cout, element) {
                                    data.append(element.nameNew, element);
                                });
                        }


                    });
                    data.append("Details", JSON.stringify(dataReturn));
                    data.append("fileUpload", $('#fileUpload').val());
                    $.ajax({
                        type: "POST",
                        url: "/Requests/AddPictureInDetailCalllog",
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            $('#Details').val(JSON.stringify(dataReturn));
                            $('#TextArea205').val('');
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Conversation");
                            form.submit();

                        },
                        error: function () {
                            $('#myModal').modal('hide');
                            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                            return;
                            //var win = window.open('/Home', '_self');
                        }
                    });
                }
                else {
                    $('#myModal').modal('show');
                    var datareturn = [];
                    datareturn.push({
                        Id: CL.Id,
                        TypeId: CL.TypeId,
                        StepNo: CL.StepNo,
                        GroupId: CL.GroupId,
                        Status: CL.Status,
                        Assigner: CL.Assigner,
                        FromShop: CL.FromShop
                    })
                    $('#Details').val(JSON.stringify(datareturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    //$('#messageLuoi205').val(messageLuoi);// Delete - NghiaTV5 - 13/04/2018 - 205 claim bảo hiểm
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Reply");
                    form.submit();
                }

            });
            $btnChangeStep.on('click', function () {
                //▶ Edit - TrongNM3 - 17/12/2018 - Loai 205 - claim nha bao hiem -1
                var checkXacNhan = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.CapNhatLinkCamera == null || item.CapNhatLinkCamera == '' || item.CapNhatLinkCamera == undefined;
                });
                console.log(checkXacNhan);
                if (checkXacNhan.length > 0 && (CL.StepNo == 1) && (checkXacNhan !== '' || checkXacNhan !== null || checkXacNhan !== undefined)) {
                    XFunction.RenderMessage('error', 'Cập Nhật link camera trước khi chuyển bước!'); return;
                }
                var checkPhanLoai = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.PhanLoai == null || item.PhanLoai == '' || item.PhanLoai == undefined;
                });
                console.log(checkPhanLoai);
                if (checkPhanLoai.length > 0 && (CL.StepNo == 2) && (checkPhanLoai !== '' || checkPhanLoai !== null || checkPhanLoai !== undefined)) {
                    XFunction.RenderMessage('error', 'Phải chọn loại yêu cầu!'); return;
                }
                if (Ass != checkTop1NoiDungTraoDoi) {
                    if (CL.StepNo == 2) {
                        XFunction.RenderMessage("error", "Nhân viên hành chính phải nhập trao đổi trên lưới"); return false;
                    }
                    else if (CL.StepNo == 3 || CL.StepNo == 1) {
                        XFunction.RenderMessage("error", "Phải nhập trao đổi trên lưới"); return false;
                    }
                }
                var myData = hot == undefined ? "" : $.grep(hot.getData(), function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                $('#myModal').modal('show');
                var datareturn = [];
                //▶ Edit - TrongNM3 - 17/12/2018 - Loai 205 - claim nha bao hiem
                if (CL.StepNo == 1 && check_isAssiner == true) {
                    $.each(myData, function (index, item) {
                        datareturn.push({
                            LinkCamera: item.CapNhatLinkCamera,
                            Id: item.RequestId,
                            RdID: item.Id,
                        });
                    });
                }
                else {
                    $.each(myData, function (index, item) {
                        var PhanLoai = 0;
                        if (item.PhanLoai === 'Hàng hóa có thể sửa chữa') {
                            PhanLoai = 1;
                        }
                        else if (item.PhanLoai === 'Hàng hóa Mất, hư hỏng hoàn toàn') {
                            PhanLoai = 2;
                        }
                        else if (item.PhanLoai === 'Hư hỏng Nhà cửa, vật kiến trúc, nội thất, biển hiệu') {
                            PhanLoai = 3;
                        }
                        else if (item.PhanLoai === 'Thiệt hại gây ra cho bên thứ 3') {
                            PhanLoai = 4;
                        }
                        datareturn.push({
                            Id: item.RequestId,
                            RdID: item.Id,
                            PhanLoai: PhanLoai,
                        })
                    })
                }
                console.log(datareturn);
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(datareturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.submit();
            });
            $('#btncomfirm205').click(function () {
                var message = $('#TextArea205').val();
                if (message.length !== "" && message.length !== null && message.length !== undefined) {
                    $.ajax({
                        url: '/Requests/Conversationall',
                        type: 'POST',
                        async: false,
                        data: { Id: CL.Id, message: message, requestdetailId: requestdetailId },
                        success: function (data) {
                            if (data.length === 0) {
                                XFunction.RenderMessage("error", "không tìm thấy mã calllog  :(");
                            }
                            else {
                                $('#modal205').modal('hide');
                                l_Data_Handsontable = data;
                                $.each(hot.getData(), function (index, item) {
                                    $.each(l_Data_Handsontable, function (index1, item1) {
                                        if (index == index1) {
                                            checkTop1NoiDungTraoDoi = item1.Top1NoiDungTraoDoi
                                            item.NoiDungTraoDoi = item1.NoiDungTraoDoi
                                            item.Conversation = item1.Conversation
                                        }
                                    })
                                })
                                hot.render();
                                $('#TextArea205').val('');
                                XFunction.RenderMessage("success", "Gửi trao đổi thành công ! ")
                            }
                        }
                    });
                }
                else {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập nội dung ! "); return false;
                }
            })
        });
    };
    //▲ ChuongNT3 - 21/06/2018 - loại 205
    //▲ Add - NghiaTV5 - 08/05/2018 - 205 claim bảo hiểm 

    //▼ Add - ThuongNM2 - 02/08/2018 - Loại 207 Chiến giá đại bàng
    function contruct_207() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (p_Response) {
            var DataFiles = [], checkAssiner = true;
            var dataCheckDuyet_true = false, data_false = false, dataCheckDuyet_false = false;
            var l_Data_Handsontable = p_Response;
            $.each(l_Data_Handsontable, function (index, item) {
                if (item.Images_1 !== '' && item.Images_2 !== '') {
                    var l_Url_1 = '';
                    $.ajax({
                        async: false,
                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                        type: "GET",
                        data: { Url: item.Images_1 },
                        success: function (p_ActionResult) {
                            l_Url_1 = p_ActionResult;
                        }
                    });
                    item.Images_1 = '<a href="' + l_Url_1 + '" target="_blank"><img width="30" height="30" src="' + l_Url_1 + '"></a> ';
                    var l_Url_2 = '';
                    $.ajax({
                        async: false,
                        url: "/Uploads/Get_Url_Uploads_FileAttachs",
                        type: "GET",
                        data: { Url: item.Images_2 },
                        success: function (p_ActionResult) {
                            l_Url_2 = p_ActionResult;
                        }
                    });
                    item.Images_2 = '<a href="' + l_Url_2 + '" target="_blank"><img width="30" height="30" src="' + l_Url_2 + '"></a> '
                }
            });
            var Title = ''
            var sourceCommpetitor = []
            var ListName = []
            var checkReadonly = false;
            if (CL.Status == 4) {
                checkReadonly = true;
            }
            if (l_Data_Handsontable.length > 0) {
                $.get('/Requests/GetListCompetitorOfWarehouse', { warehouse: l_Data_Handsontable[0].ShopCode, type: l_Data_Handsontable[0].Type }, function (result) {
                    sourceCommpetitor = result
                    if (sourceCommpetitor != null && sourceCommpetitor.length > 0) {
                        $.each(sourceCommpetitor, function (index, item) {
                            ListName.push(item.Name)
                        })
                    }
                })
            }
            var dataimg = [];
            var dataReturn = [];
            var actionRendererUploadPicture = function (instance, td, row, col, prop, value, cellProperties) {
                if (prop === 'Picture') {
                    var Status1 = instance.getDataAtRowProp(row, 'Approved');
                    var $btnupload = '';
                    $btnupload = $('<div class="fileUpload btn"><span class="color fa fa-upload"></span><input type="file" id="FileName" class="upload" /></div>');
                    $btnupload.click(function () {
                        if (CL.Status == 4) {
                            XFunction.RenderMessage("error", "Lỗi Calllog này đã hoàn tất !:("); return false;
                        }
                        checkAssiner = false;
                        $.each(permissons, function (index, item) {
                            if (item == 'assigner' || item == 'groupAssigner')
                                checkAssiner = true
                        });
                        if (checkAssiner == false) {
                            XFunction.RenderMessage("error", "Bạn không có quyền úp hình ảnh "); return false;
                        }
                        $('#FileName').on('change', function () {
                            var IdRequestDetail = instance.getDataAtRowProp(row, 'IdRequestDetail');
                            var selectedFiles = $('#FileName')[0].files;
                            selectedFiles[0].nameNew = new Date().getTime().toString() + '_' + selectedFiles[0].name; //▶  Edit - ThuongNM2 - 25/03/2019 - Fix up trùng file=====
                            var inValid = /\s/;
                            var tmppath = URL.createObjectURL(selectedFiles[0]);
                            var str = $('#FileName')[0].files[0].name.replace('.', '');
                            if (/^[\w ]*$/.test(str) === false) {
                                alert('Cảnh báo : Tên file phải không dấu, không khoảng trắng và không có kí tự đặc biệt!');
                                $('#FileName').val('')
                                return false;
                            }
                            else if (endFile(selectedFiles[0].name) === false) {
                                $('#FileName').val('')
                                XFunction.RenderMessage("error", "File hình ảnh phải có định dạng đuôi ['jpeg', 'jpg', 'png', 'gif', 'bmp']!");
                                $('#FileName').val('')
                                return false;
                            }
                            else if (inValid.test(selectedFiles[0].name)) {
                                alert('Cảnh báo : Tên file hình không chứa khoảng trắng');
                                $('#FileName').val('')
                                return false;
                            }
                            else {
                                $.each(hot.getData(), function (index, item) {
                                    if (index == row) {
                                        item.DataFiles1 = selectedFiles[0].nameNew; //▶  Edit - ThuongNM2 - 25/03/2019 - Fix up trùng file=====
                                        dataimg.push(selectedFiles[0]);
                                    }
                                })
                                if (selectedFiles[0].name) {
                                    hot.setDataAtRowProp(row, 'Images_1', '<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink center" data-id="' + row + '" data-value="' + selectedFiles[0].name + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a></div>');// Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                                }
                            }
                            //▼ Add - ThuongNM2 - 22/04/2019 - Notification 
                            var image_Data1 = hot.getData()
                            if (image_Data1.length > 0 && image_Data1[0].DataFiles2 != null && image_Data1[0].DataFiles2 != '' && image_Data1[0].DataFiles2 != undefined
                                && image_Data1[0].DataFiles1 != null && image_Data1[0].DataFiles1 != '' && image_Data1[0].DataFiles1 != undefined) {
                                $('#myModalNotification207').modal('show')
                            }
                            //▲ Add - ThuongNM2 - 22/04/2019 - Notification
                        })
                    })
                    $(td).empty().append($btnupload);
                }
                if (prop === 'Picture1') {
                    var IdRequestDetail = instance.getDataAtRowProp(row, 'IdRequestDetail');
                    var Status1 = instance.getDataAtRowProp(row, 'Approved');
                    var $btnupload = '';
                    $btnupload = $('<div class="fileUpload btn"><span class="color fa fa-upload"></span><input type="file" id="FileNamePicture1" class="upload" /></div>');
                    $btnupload.click(function () {
                        if (CL.Status == 4) {
                            XFunction.RenderMessage("error", "Lỗi Calllog này đã hoàn tất !:("); return false;
                        }
                        checkAssiner = false;
                        $.each(permissons, function (index, item) {
                            if (item == 'assigner' || item == 'groupAssigner')
                                checkAssiner = true;
                        });
                        if (checkAssiner == false) {
                            XFunction.RenderMessage("error", "Bạn không có quyền úp hình ảnh "); return false;
                        }
                        $('#FileNamePicture1').on('change', function () {
                            var selectedFiles = $('#FileNamePicture1')[0].files;
                            selectedFiles[0].nameNew = new Date().getTime().toString() + '_' + selectedFiles[0].name; //▶  Edit - ThuongNM2 - 25/03/2019 - Fix up trùng file=====
                            var inValid = /\s/;
                            var tmppath = URL.createObjectURL(selectedFiles[0]);
                            var str = $('#FileNamePicture1')[0].files[0].name.replace('.', '');

                            if (/^[\w ]*$/.test(str) === false) {
                                alert('Cảnh báo : Tên file phải không dấu, không khoảng trắng và không có kí tự đặc biệt!');
                                $('#FileNamePicture1').val('')
                                return false;
                            }
                            else if (endFile(selectedFiles[0].name) === false) {
                                $('#FileNamePicture1').val('')
                                XFunction.RenderMessage("error", "File hình ảnh phải có định dạng đuôi ['jpeg', 'jpg', 'png', 'gif', 'bmp']!");
                                $('#FileNamePicture1').val('')
                                return false;
                            }
                            else if (inValid.test(selectedFiles[0].name)) {
                                alert('Cảnh báo : Tên file hình không chứa khoảng trắng');
                                $('#FileNamePicture1').val('')
                                return false;
                            }
                            else {
                                $.each(hot.getData(), function (index, item) {
                                    if (index == row) {
                                        item.DataFiles2 = selectedFiles[0].nameNew; //▶  Edit - ThuongNM2 - 25/03/2019 - Fix up trùng file=====
                                        dataimg.push(selectedFiles[0]);
                                    }
                                })
                                if (selectedFiles[0].name) {
                                    hot.setDataAtRowProp(row, 'Images_2', '<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink center1" data-id="' + row + '" data-value="' + selectedFiles[0].name + '" ><img class="IMG"  src="' + tmppath + '"height="42" width="42"></a></div>');// Edit - NghiaTV5 - 29/01/2018 - bỏ duyệt không duyệt 
                                }
                            }
                            //▼ Add - ThuongNM2 - 22/04/2019 - Notification
                            var image_Data2 = hot.getData()
                            if (image_Data2.length > 0 && image_Data2[0].DataFiles2 != null && image_Data2[0].DataFiles2 != '' && image_Data2[0].DataFiles2 != undefined
                                && image_Data2[0].DataFiles1 != null && image_Data2[0].DataFiles1 != '' && image_Data2[0].DataFiles1 != undefined) {
                                $('#myModalNotification207').modal('show')
                            }
                            //▲ Add - ThuongNM2 - 22/04/2019 - Notification
                        })
                    })
                    $(td).empty().append($btnupload);
                }
            };
            function endFile(name) {
                var extension = name.split('.').pop().toLowerCase();
                if (extension === 'jpg' || extension === 'png' || extension === 'gif' || extension === 'jpeg') {
                    return true;
                }
                else {
                    return false
                }
            }
            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                td.innerHTML = escaped;
                td.style.textAlign = 'left';
                return td;
            }
            var l_Setting = function () {
                return {
                    data: l_Data_Handsontable,
                    stretchH: 'all',    //  Dãn cột
                    disableVisualSelection: true,   //  Ẩn Scroll dọc
                    colHeaders:
                        [
                            'Số đơn hàng ',
                            'Số hóa đơn ',
                            'Ngày xuất',
                            'Mã sản phẩm ',
                            'Tên sản phẩm',
                            'Imei',
                            'Số lượng',
                            '% Chiếc khấu',
                            'Chiếc khấu',
                            'Shop chiến giá',
                            'Up hình ảnh giá SP đối thủ',
                            'Hình ảnh giá SP đối thủ',
                            'Upload hình ảnh giá SP FRT',
                            'Hình ảnh giá SP FRT',
                        ],
                    columns: [
                        { data: 'Quantity1', type: 'text', className: 'htCenter', readOnly: true },//số đơn hàng
                        { data: 'Quantity2', type: 'text', className: 'htCenter', readOnly: true },// số hóa đơn 
                        { data: "Time3", className: 'htLeft', readOnly: true, type: 'text' },//ngày xuất
                        { data: 'ProductCode', type: 'text', className: 'htCenter', readOnly: true },//mã sản phẩm 
                        { data: 'ProductName', type: 'text', className: 'htCenter', readOnly: true },//tên sản phẩm 
                        { data: 'Imei', type: 'text', className: 'htCenter', readOnly: true },// cột Imei
                        { data: 'Quantity', type: 'text', className: 'htCenter', readOnly: true },//số lượng
                        { data: 'Property1', type: 'text', className: 'htCenter', readOnly: true },//% Chiếc khấu
                        { data: 'Money1', type: 'text', className: 'htCenter', readOnly: true },//chiếc khấu
                        {
                            data: "Competitor", className: 'htLeft', type: 'autocomplete', source: ListName, readOnly: checkReadonly, width: 200
                        },
                        {
                            data: 'Picture', type: 'text', className: 'htCenter', readOnly: true, renderer: actionRendererUploadPicture
                        },
                        { data: 'Images_1', type: 'text', className: 'htCenter', readOnly: true, renderer: safeHtmlRenderer },//Hình ảnh giá SP đối thủ
                        {
                            data: 'Picture1', type: 'text', className: 'htCenter', readOnly: true, renderer: actionRendererUploadPicture
                        },
                        { data: 'Images_2', type: 'text', className: 'htCenter', readOnly: true, renderer: safeHtmlRenderer },//Hình ảnh giá SP FRT
                    ],
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        var checkautocomplete = []
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            if (col == 'Competitor' && newValue != '' && newValue != undefined && newValue != null) {
                                $.each(ListName, function (index, item) {
                                    if (item === newValue) {
                                        checkautocomplete.push(item)
                                    }
                                })
                                if (checkautocomplete.length === 0) {
                                    hot.setDataAtRowProp(row, col, null, ListName);
                                    XFunction.RenderMessage("error", "Shop chiến giá không hợp lệ!");
                                    l_Data_Handsontable[row].CompetitorCode = null
                                    return false;
                                }
                                else {
                                    $.each(sourceCommpetitor, function (index, item) {
                                        if (item.Name == newValue) {
                                            l_Data_Handsontable[row].CompetitorCode = item.CompetitorCode
                                        }
                                    })
                                }
                            }
                            if (col == 'Competitor' && (newValue == '' || newValue == undefined || newValue == null)) {
                                l_Data_Handsontable[row].CompetitorCode = null
                            }
                        });
                    },
                };
            };
            hot = new Handsontable(container, l_Setting());
            hot.selectCell(0, 0, 0, 0);
            hot.render();
            $btnComment.on('click', function () {
                var data = new FormData();
                var dataReturn = [], checkAssiner = false;
                $.each(permissons, function (index, item) {
                    if (item == 'assigner' || item == 'groupAssigner' || item == 'cc' || item == 'sender')
                        checkAssiner = true;
                });
                if (checkAssiner == false) {
                    XFunction.RenderMessage("error", "Bạn không có quyền trao đổi Calllog!"); return false;
                }
                if (CL.Status == 4) {
                    XFunction.RenderMessage("error", " Lỗi Calllog này đã hoàn tất !:("); return false;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.IdRequestDetail != undefined && item.IdRequestDetail != '' && item.IdRequestDetail != null && item.IdRequestDetail != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.IdRequestDetail !== null && item.IdRequestDetail !== undefined && item.IdRequestDetail !== '';
                });

                var message = $('#Message').val();

                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }

            });// trao đổi
            $btnComplete.on('click', function () {
                checkAssiner = false;
                $.each(permissons, function (index, item) {
                    if (item == 'assigner' || item == 'groupAssigner')
                        checkAssiner = true;
                });
                if (checkAssiner == false) {
                    XFunction.RenderMessage("error", "Bạn không có quyền hoàn tất Calllog!"); return false;
                } else if (CL.Status == 4) {
                    XFunction.RenderMessage("error", "Calllog đã hoàn tất! "); return false;
                }
                var checkImg = true, checkComp = true;
                $.each(hot.getData(), function (index, item) {
                    //console.log(item)
                    if (item.Images_1 == null || item.Images_1 == '' || item.Images_1 == undefined || item.Images_2 == null || item.Images_2 == '' || item.Images_2 == undefined) {
                        checkImg = false;
                    }
                    if (item.Competitor === null || item.Competitor === '' || item.Competitor === undefined) {
                        checkComp = false;
                    }
                })
                if (checkComp == false) {
                    XFunction.RenderMessage("error", "Vui lòng chọn shop chiến giá trước khi hoàn tất CL."); return false;
                }
                if (checkImg == false) {
                    XFunction.RenderMessage("error", "Yêu cầu úp hình Hình ảnh giá SP đối thủ & Hình ảnh giá SP FRT."); return false;
                }
                var data = new FormData();
                var dataReturn2 = [];

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.IdRequestDetail !== null && item.IdRequestDetail !== undefined && item.IdRequestDetail !== '';
                });
                if (myData.length == 0) {
                    XFunction.RenderMessage("error", "Dữ liệu chưa hợp lệ"); return false;
                }
                else {
                    $.each(myData, function (index, item) {

                        dataReturn2.push({
                            Images_1: item.Images_1
                            , Images_2: item.Images_2
                            , IdRequestDetail: item.IdRequestDetail
                            , DataFiles1: item.DataFiles1
                            , DataFiles2: item.DataFiles2
                            , CompetitorCode: item.CompetitorCode
                            , Competitor: item.Competitor
                        });
                    })
                    if (dataimg != '' && dataimg != null && dataimg != undefined && dataimg.length > 0) {
                        $.each(dataimg, function (cout, element) {
                            data.append(element.nameNew, element, element.nameNew); //▶  Edit - ThuongNM2 - 25/03/2019 - Fix up trùng file=====
                        });
                    }
                    $('#Details').val(JSON.stringify(dataReturn2));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));

                    data.append("Details", $('#Details').val());
                    data.append("DetailsCc", $('#DetailsCc').val());
                    data.append("RequestId", $('#RequestId').val());
                    data.append("Message", $('#Message').val());
                    data.append("ImageValidate", $('#ImageValidate').val());
                    //console.log(dataimg)
                    $.ajax({
                        type: "POST",
                        url: "/Requests/UploadedFileDetailByCol",
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            if (result.error === 0) {
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Complete");
                                form.submit();
                            }
                            else {
                                $('#myModalWatting').modal('hide');
                                XFunction.RenderMessage('error', 'Lưu file không thành công');
                                return;
                            }
                        },
                        error: function () {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                            return;
                        }
                    });
                };
            });//hoàn tất 
            //$("#btnPrint").click(function (e) {
            //    window.open('data:application/vnd.ms-excel,' + $('#tableDetails').html());
            //    e.preventDefault();
            //});
        });
    };
    //▲ Add - ThuongNM2 - 02/08/2018 - Loại 207 Chiến giá đại bàng

    //▼ Add - TuanNA89 - 02/08/2018 - Loại 208 Check CIC khách hàng
    function contruct_208() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            $('#cmnd_208').html(respone[0].CMND);
            $('#ghichu_208').html(respone[0].GhiChu);

            trangThaiDuyet = respone[0].TrangThaiDuyet;

            if (CL.Status == "4") {
                $btnComment.hide();
                $btnComplete.hide();
            }

            if (trangThaiDuyet != null) {
                var $radios = $('input:radio[name=approve_208]');
                console.log($radios);
                if (trangThaiDuyet == 1) {
                    jQuery.uniform.update(jQuery("#approve_208_1").prop('checked', true));
                    $('#approve_208_1').prop('checked', true);
                }
                if (trangThaiDuyet == 0) {
                    jQuery.uniform.update(jQuery("#approve_208_0").prop('checked', true));
                    $('#approve_208_0').prop('checked', true);
                }
            }

            $btnComment.on('click', function () {
                var data = new FormData();
                var dataReturn = [], checkAssiner = false;
                $.each(permissons, function (index, item) {
                    if (item == 'assigner' || item == 'groupAssigner' || item == 'cc' || item == 'sender')
                        checkAssiner = true;
                });
                if (checkAssiner == false) {
                    XFunction.RenderMessage("error", "Bạn không có quyền trao đổi Calllog!"); return false;
                }
                if (CL.Status == 4) {
                    XFunction.RenderMessage("error", " Lỗi Calllog này đã hoàn tất !:("); return false;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.IdRequestDetail != undefined && item.IdRequestDetail != '' && item.IdRequestDetail != null && item.IdRequestDetail != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return false;
                }
                else {
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
            });// trao đổi
            $btnComplete.on('click', function () {
                checkAssiner = false;
                $('#myModalWatting').modal('show');
                $.each(permissons, function (index, item) {
                    if (item == 'assigner' || item == 'groupAssigner')
                        checkAssiner = true;
                });
                if (checkAssiner == false) {
                    XFunction.RenderMessage("error", "Bạn không có quyền hoàn tất Calllog!"); return false;
                } else if (CL.Status == 4) {
                    XFunction.RenderMessage("error", "Calllog đã hoàn tất! "); return false;
                }
                var status = $('input[type="radio"]:checked');
                var note = $('#ghichu_208');

                var duyet = status[0];
                if ((duyet == null) || (duyet == 'undefined')) {
                    XFunction.RenderMessage('error', "Bắt buộc phải chọn duyệt/ không duyệt trước khi hoàn tất calllog!");
                    $('#myModalWatting').modal('hide');
                }

                var data = new FormData();
                var myData = [];
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                myData.push({
                    requestId: $('#RequestId').val(),
                    typeId: 208,
                    trangThaiDuyet: duyet.value,
                    ghiChu: note[0].value,
                    user: ''
                });
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));

                var sdtKH = $('#cmnd_208').text();
                var msg_Duyet = "KH Số CMND " + sdtKH + " đủ điều kiện mua hàng subsidy. Mời anh/chị tiếp tục bán subsidy cho KH",
                    msg_KhongDuyet = "KH Số CMND " + sdtKH + " KHÔNG đủ điều kiện mua hàng subsidy. Anh/chị tư vấn KH hình thức mua hàng khác!";
                var msg = (duyet.value == "1") ? msg_Duyet : msg_KhongDuyet;
                $("#Message").val(msg);

                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });//hoàn tất
        });
    };
    //▲ Add - TuanNA89 - 02/08/2018 - Loại 208 Check CIC khách hàng

    //▼ ChuongNT3 - 20/02/2019 - hủy cọc cà thẻ
    function contruct_209() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            dataHandsontable = respone;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    currentColClassName: 'currentCol', //currentCol
                    //fixedColumnsLeft: 1,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: false,
                    //====================================Oder ==============================================
                    colHeaders:
                        [
                            'Số đơn hàng',
                            'Tên TK',
                            'Tên chủ thẻ',
                            'Tên chi nhánh ngân hàng',
                            'Số tiền sẽ chuyển khoản',
                        ],
                    columns: [
                        { data: 'SoDonHang', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'SoTK', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TenChuThe', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'TenChiNhanh', type: 'text', className: 'htLeft', readOnly: true },
                        { data: 'SoTienChuyenKhoan', type: 'numeric', className: 'htLeft', readOnly: true, format: '0,0' },
                    ],
                };
            };

            hot = new Handsontable(container, setting());

            $btnComment.on('click', function () {
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var datareturn = []
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                $('#Details').val(JSON.stringify(datareturn));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    };
    //▲  ChuongNT3 - 20/02/2019 - hủy cọc cà thẻ

    //▼ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210
    function contruct_210() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            //var l_GetProductPosAll = [];
            //$.get('/DirectionAction/GetProductPosAll', null, function (respone) {
            //    l_GetProductPosAll = respone;
            //});
            var dataHandsontable = [];
            dataHandsontable = respone;

            $.each(dataHandsontable, function (index, item) {
                if (item.Images != null && item.Images != undefined && item.Images != '') {
                    var images = item.Images.toString().split(',');
                    var stringImage = '';
                    $.each(images, function (index1, item1) {
                        var duoi = item1.split('.')[1].toLowerCase();
                        if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                            stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-picture-o"></i>' + (index1 + 1) + '</a>  ||';
                        } else if ($.inArray(duoi, ['zip', 'rar']) !== -1) {
                            stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-file-archive-o"></i>' + (index1 + 1) + '</a>  ||';
                        } else {
                            stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i>' + (index1 + 1) + '</a>   ||';
                        }
                    });
                    item.Images = stringImage;
                } else {
                    item.Images = '';
                }
            });
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isoldStepAssigner: false };
            var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (data[0].HaveConvertation == 1) {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:red"></i>');
                } else {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                }
                $button.click(function () {
                    $('#MessageGiaiTrinh').val('');
                    $('#modalBodyGiaitrinh').empty();
                    var requestdatailId = hot.getDataAtRowProp($(this).attr('data-value'), 'Id');
                    $('#btnSendGiaiTrinh').attr('data-value', requestdatailId).attr('data-id', $(this).attr('data-value'));
                    if (requestdatailId != null && requestdatailId !== '' && requestdatailId !== undefined) {
                        $.get('/Requests/GetRequestDetailConvertation', { requestdatailId: requestdatailId }, function (respone) {
                            if (respone !== undefined && respone !== '' && respone !== null) {
                                var inner = '';
                                $.each(respone, function (index, item) {
                                    inner +=
                                        '<div class="timeline-comment">' +
                                        '   <div class="timeline-comment-header">' +
                                        '       <img src="/assets/images/people.png" />' +
                                        '       <p>' + item.Column1 + '</p>' +
                                        '   </div>' +
                                        '   <p class="timeline-comment-text">' + item.Message + '</p>' +
                                        '</div>';
                                });
                                $('#modalBodyGiaitrinh').html(inner);
                                $('#modalBodyGiaitrinh').show();
                            } else {
                                $('#modalBodyGiaitrinh').hide();
                            }
                            $('#modalGiaiTrinh').modal('show');
                        });
                    }
                });
                $(td).empty().append($button);
            };
            var actionRendererUpload = function (instance, td, row, col, prop, value, cellProperties) {
                var data = $.grep(instance.getData(), function (item, index) {
                    return index == row && prop == 'button';
                });
                var $button = ''
                if (value == '65') {
                    $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-upload" style="color:green"></i>');
                    $button.click(function () {
                        if (!check) {
                            XFunction.RenderMessage('error', 'Bạn không có quyền upload hình ảnh trên yêu cầu này'); return;
                        } else {
                            var row = $(this).attr('data-value');
                            $('#btnuploadDetails').attr('data-value', hot.getDataAtRowProp(row, 'Id')).attr('data-id', row);
                            $('#uploadDetails').val('');
                            $('#myModalUpload').modal('show');
                        }
                    });
                }
                $(td).empty().append($button);
            };
            var actionPaging = function () {
                var pages = Math.ceil(parseInt(dataHandsontable.length / pageSize)) + 1;
                if (pages > 1) {
                    for (i = 1; i <= pages; i++) {
                        $('#captionHot1').append('<a class="PageMX" id="PageM' + (i) + '" style="cursor:pointer" data-value="' + (i) + '">' + (i) + '</a> ' + ' || ');
                        $('#PageM' + (i)).on('click', function () {
                            $('.PageMX').removeClass('clickPage');
                            $(this).addClass('clickPage');
                            var page = $(this).attr('data-value') - 1;
                            var start = page * pageSize;
                            var data = $.grep(dataHandsontable, function (item, index) {
                                return index >= start && index < (start + pageSize)
                            });
                            hot.loadData(data);
                        });
                    }
                }
            };
            var actionRendererCheck = function (instance, td, row, col, prop, value, cellProperties) {

                isChecked = '';
                if (value === 1) {
                    isChecked = 'checked';
                }
                else {
                    isChecked = '';
                }
                $checkbox = $("<input type='checkbox' disabled " + isChecked + " >");

                $(td).empty().append($checkbox);
            }
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isoldStepAssigner = true;
            });
            var check = permisstion.isAssiner == true ||
                permisstion.isGroupAssiner == true ||
                permisstion.isoldStepAssigner == true
                ? true : false;

            //======== Ẩn các nút nếu CL không có người xử lý
            if (Assign == 'Chưa có người xử lý' && CL.StepNo == 1) {
                $btnComment.hide();
            }
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    maxCols: 12,
                    minCols: 12,
                    startCols: 12,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 21,
                    currentColClassName: 'currentCol',
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 12,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    maxRows: dataHandsontable.length,
                    minRows: dataHandsontable.length,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders: ["Mã dòng", "Loại yêu cầu", "Xác nhận hoàn thành", "Mã hàng", "Tên hàng", "Serial/Imei máy", "Màu sắc", "Số lượng", "Lý do", "Up hình ảnh", "Hình ảnh đính kèm theo line"],
                    columns: [
                        { data: 'Id_STT', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'LoaiYeuCau', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'XacNhanHoanTat', renderer: actionRendererCheck },
                        { data: 'ProductCode', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'ProductName', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Serial', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Color', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'Quantity', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: 'LyDo', type: 'text', readOnly: true, className: 'htLeft' },
                        { data: "TypeId_Line", renderer: actionRendererUpload },
                        { data: "Images", renderer: "html", className: 'htLeft', editor: false },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.selectCell(0, 0, 0, 0);
            $('#btnSendGiaiTrinh').on('click', function () {
                if (!check) {
                    XFunction.RenderMessage('error', 'Bạn không có quyền giải trình trên yêu cầu này');
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                    return;
                }
                var message = $('#MessageGiaiTrinh').val();
                var id = $(this).attr('data-value');
                var row = $(this).attr('data-id');
                if (message === null || message === undefined || message.trim() === '') {
                    XFunction.RenderMessage('error', 'Chưa nhập nội dung');
                    return false;
                }
                $.get('/Requests/CreateNewRequestDetailConvertation', { request: requestInfo.Id, requestDetail: id, step: requestInfo.StepNo, message: message }, function (respone) {
                    if (respone == 1) {
                        hot.setDataAtRowProp(row, 'HaveConvertation', 1, 'edit');
                        $('#r' + row).removeClass('fa-comments-o').addClass('fa-comments').css('color', 'red');
                        XFunction.RenderMessage('success', 'Gửi giải trình thành công');
                    } else {
                        $('#r' + row).removeClass('fa-comments').addClass('fa-comments-o').css('color', 'green');;
                        XFunction.RenderMessage('error', 'Gửi giải trình không thành công')
                    }
                    $('#MessageGiaiTrinh').val('');
                    $('#modalGiaiTrinh').modal('hide');
                });
            });
            $("#UploadForm").submit(function (e) {
                var data = new FormData();
                var selectedFiles = $("#uploadDetails")[0].files;
                if (selectedFiles.length == 0) {
                    e.preventDefault();
                    $('#myModalUpload').modal('hide');
                    XFunction.RenderMessage('error', 'Không có file để lưu');
                    return;
                }
                var fileExtension = ['jpeg', 'jpg', 'png', 'gif', 'bmp'];
                var Error = [];
                $.each(selectedFiles, function (index, item) {
                    var fileNameExt = selectedFiles[index].name.substr(selectedFiles[index].name.lastIndexOf('.') + 1);
                    if ($.inArray(fileNameExt.toLowerCase(), fileExtension) == -1) {
                        Error.push(index + 1);
                    }
                });
                if (Error.length > 0) {
                    alert("File hình ảnh phải có định dạng đuôi ['jpeg', 'jpg', 'png', 'gif', 'bmp']!");
                    return false;
                }
                else {
                    $.each(selectedFiles, function (index, item) {
                        data.append(selectedFiles[index].name, selectedFiles[index]);
                    });
                    var requestdetailId = $('#btnuploadDetails').attr('data-value');
                    var rowline = $('#btnuploadDetails').attr('data-id');
                    $.ajax({
                        type: "POST",
                        url: "/Requests/SaveUploadedFileDetail?RequsetDetailId=" + requestdetailId,
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            $('#myModalUpload').modal('hide');
                            if (result.error == 0) {
                                var fileNames = $.parseJSON(result.Message);
                                var stringImage = '';
                                $.each(fileNames, function (index1, item1) {
                                    var duoi = item1.split('.')[1].toLowerCase();
                                    if ($.inArray(duoi, ['jpg', 'png', 'jpeg', 'gif']) !== -1) {
                                        stringImage += '<a href="' + item1 + '" target="_blank"><i class="fa fa-picture-o"></i>new' + (index1 + 1) + '   </a>   ||';
                                    }
                                    else if ($.inArray(duoi, ['zip', 'rar']) !== -1) {
                                        stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-archive-o"></i>new' + (index1 + 1) + '    </a>   ||';
                                    } else {
                                        stringImage += '<a href="' + item1 + '" dowload><i class="fa fa-file-excel-o"></i>new' + (index1 + 1) + '    </a>   ||';
                                    }
                                });
                                var dataRow = hot.getDataAtRowProp(rowline, 'Images');
                                hot.setDataAtRowProp(rowline, 'Images', dataRow + stringImage, 'not');
                                XFunction.RenderMessage('success', 'Lưu ' + fileNames.length + ' file thành công');
                            } else {
                                XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                            }
                        },
                        error: function () {
                            $('#myModalUpload').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công xem lại file upload');
                        }
                    });
                }
                e.preventDefault();
            });
            $btnComment.on('click', function () {
                if (Assign == 'Chưa có người xử lý' && CL.StepNo == 1) {
                    return false;
                }
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Property1 === '' || item.Property1 === undefined || item.Property1 === null ? '' : item.Property1;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });

                    if (permisstion.isSender == true) {
                        //  Không bắt đính kèm Image
                    }
                    else if (permisstion.isAssiner == true || permisstion.isGroupAssiner == true || permisstion.isoldStepAssigner == true) {
                        if (!item.Images || item.Images === '') {
                            dataImgesInvalid.push(index + 1);
                        }
                    }
                });

                if (dataImgesInvalid.length > 0 && CL.StepNo == 2) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
            });
            $btnReply.on('click', function () {
                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                }
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];
                $.each(myData, function (index, item) {
                    var stringImei = item.Serial === '' || item.Serial === undefined || item.Serial === null ? '' : item.Serial;
                    var slpitImeis = stringImei.split(',');
                    var splitImeisValid = $.grep(slpitImeis, function (element, count) {
                        return element !== '' && element !== undefined && element !== null && element.trim().length > 0
                    });
                    dataReturn.push({ 'Id': item.Id, 'Imeis': splitImeisValid.join(',') });
                    if (item.TypeId_Line == '65') {
                        if (item.Images === '' || item.Images === null || item.Images === undefined) {
                            dataImgesInvalid.push(index + 1);
                        }
                    }
                });

                if (dataImgesInvalid.length > 0 && CL.StepNo == 1) {
                    XFunction.RenderMessage("error", "Chưa đính kèm hình ảnh cho dòng : " + dataImgesInvalid.join(','));
                    return false;
                }

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Reply");
                form.submit();
                //}
            });

        });
    };
    //▲ Add - TuanNA89 - 29/04/2019 - Gộp calllog loại 65 và 114 lại thành loại mới 210

    //▼  Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA 
    function contruct_213() {
        $('#uploadDetails').removeAttr('multiple');
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var shop = '';
            $.each(respone, function (index, item) {
                shop = item.ShopCode
            });
            $.get('/Requests/CheckSM_PSMShop', { shopcode: shop }, function (res) {
                var FunctionDefaultValueEmty = function (p_Value) { // hàm set giá trị checkbox hansontable
                    var l_ValueReturn = '';
                    if (p_Value == '' || p_Value == null || p_Value == undefined) {
                        l_ValueReturn = '';
                    } else {
                        l_ValueReturn = p_Value;
                    }
                    if (p_Value instanceof Array) {
                        l_ValueReturn = p_Value.length == 0 ? "" : p_Value.join(",");
                    }
                    return l_ValueReturn;
                }

                function readURL(input) {
                    var tmppath = URL.createObjectURL(input);
                    var win = window.open(tmppath, '_blank');
                    if (win) {
                        win.focus();
                    } else {
                        alert('Please allow popups for this site');
                    }
                }
                function endFile(name) {
                    var extension = name.split('.').pop().toLowerCase();
                    if ($.inArray(extension, ['jpg', 'png', 'gif', 'jpeg']) == -1) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }

                function strip_tags(input, allowed) {
                    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                        commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                    // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                    allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                    return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                        return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                    });
                }
                function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                    var escaped = Handsontable.helper.stringify(value);
                    escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                    td.innerHTML = escaped;
                    td.style.textAlign = 'left';
                    return td;
                }

                var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };

                $.each(permissons, function (index, item) {
                    if (item == 'sender')
                        permisstion.isSender = true;
                    if (item == 'assigner')
                        permisstion.isAssiner = true;
                    if (item == 'groupAssigner')
                        permisstion.isGroupAssiner = true;
                });
                var check_assigner = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
                var flagassigner = false;
                if (CL.Status == 4 || check_assigner == false) {
                    flagassigner = true;
                }

                var FlagCheckKhongduyet = 0;
                //console.log(respone)
                $.each(respone, function (index1, item) {
                    if (item.Uri_String_IMG1 !== null && item.Uri_String_IMG1 !== '' && item.Uri_String_IMG1 !== undefined) {
                        //hình upload ngân hàng sm/psm
                        var arrColHTML = item.Uri_String_IMG1.split(',')
                        var ColHtmlArray3 = [];
                        var ListNameFileArray3 = [];

                        $.each(arrColHTML, function (index, item1) {
                            if (endFile(item1)) {
                                ColHtmlArray3.push('<div class="ULH"><a href="' + item1 + '" target="_blank" class="renderlink" data-id="' + index1 + '" data-value="' + item1.split('/')[3] + '" ><img class="IMG" src="' + item1 + '" height="42" width="42"  data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '"></a></div>')
                                ListNameFileArray3.push(item1.split('/')[3])
                            }
                        });

                        item.ColHtml1 = ColHtmlArray3.join(' ');
                        item.ListNameFile1 = ListNameFileArray3.join(',');
                    }
                    if (item.Uri_String_IMG2 !== null && item.Uri_String_IMG2 !== '' && item.Uri_String_IMG2 !== undefined) {
                        //hình upload nộp tiền sm/psm
                        var arrColHTML = item.Uri_String_IMG2.split(',')
                        var ColHtmlArray4 = [];
                        var ListNameFileArray4 = [];

                        $.each(arrColHTML, function (index, item1) {
                            if (endFile(item1)) {
                                ColHtmlArray4.push('<div class="ULH"><a href="' + item1 + '" target="_blank" class="renderlink" data-id="' + index1 + '" data-value="' + item1.split('/')[3] + '" ><img class="IMG"  src="' + item1 + '" height="42" width="42" data-id="' + index1 + '" data-lisDataFilesName="' + item1.split('/')[3] + '"></a></div>')
                                ListNameFileArray4.push(item1.split('/')[3])
                            }
                        });

                        item.ColHtml2 = ColHtmlArray4.join(' ');
                        item.ListNameFile2 = ListNameFileArray4.join(',');
                    }
                })

                var FlagReadonly = true;
                var FlagSM_PSM = 0;

                $.each(res, function (index, item) {
                    FlagSM_PSM = item.Resutl
                });

                if (CL.Status != 4 && FlagSM_PSM == 1 && check_assigner == true) // check trạng thái CL và SM/PSM
                {
                    FlagReadonly = false;
                }
                //console.log(FlagReadonly)
                var actionRendererUpload_213 = function (instance, td, row, col, prop, value, cellProperties) {

                    if (prop == 'UploadHinh1') {   // nút up load hình ảnh tại ngân hàng
                        var valid = instance.getDataAtRowProp(row, 'SoDonHang');
                        var $button = '';
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        }
                        else {
                            $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:green; font-size: 150%; margin-top: 10%;"></i>');

                            $button.click(function () {
                                if (CL.Status == 4 || FlagReadonly == true) {
                                    XFunction.RenderMessage("error", "Bạn không có quyền upload hình ảnh !"); return;
                                }
                                var rowline = $(this).attr('data-value');
                                var row = $(this).attr('data-value');
                                $('#uploadDetails').attr('data-value', row).attr('data-id', 'UploadHinh1');
                                $('#uploadDetails').val('');
                                $('#uploadDetails').trigger('click');
                            });
                        }
                        $button != '' ?
                            $(td).empty().append($button) :
                            $(td).empty().append('');
                    }
                    else if (prop == 'UploadHinh2') {   // nút up load hình ảnh nộp tiền

                        var valid = instance.getDataAtRowProp(row, 'SoDonHang');
                        var $button = '';
                        if (valid === null || valid === '' || valid === undefined) {
                            $button = '';
                        }
                        else {
                            $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-cloud-upload" aria-hidden="true" style="color:green; font-size: 150%; margin-top: 10%;"></i>');
                            $button.click(function () {
                                if (CL.Status == 4 || FlagReadonly == true) {
                                    XFunction.RenderMessage("error", "Bạn không có quyền upload hình ảnh !"); return;
                                }
                                var rowline = $(this).attr('data-value');
                                var row = $(this).attr('data-value');
                                $('#uploadDetails').attr('data-value', row).attr('data-id', 'UploadHinh2');
                                $('#uploadDetails').val('');
                                $('#uploadDetails').trigger('click');
                            });
                        }
                        $button != '' ?
                            $(td).empty().append($button) :
                            $(td).empty().append('');
                    }
                    else {
                        $(td).empty().append('');
                    }
                    td.style.textAlign = 'center';
                };


                $('#uploadDetails').on('change', function () {
                    var colline = $(this).attr('data-id'); //console.log(colline)
                    if (colline == 'UploadHinh1') {

                        var rowline = $(this).attr('data-value');
                        var selectedFiles = $(this)[0].files;
                        //console.log(selectedFiles)
                        $.each(respone, function (index, item) {
                            if (rowline == index) {
                                var dataFiles = [];

                                if (item.DataFiles1 !== null && item.DataFiles1 !== undefined && item.DataFiles1 !== '' && item.DataFiles1.length > 0) {
                                    dataFiles = item.DataFiles1;
                                }
                                var listHtml = [];
                                var lisDataFilesName = [];

                                //var listHtml = item.ColHtmlArray;
                                //var lisDataFilesName = item.ListNameFileArray;

                                $.each(selectedFiles, function (index, item) {

                                    var d = new Date();
                                    var n = d.getTime();
                                    selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;

                                    //console.log(selectedFiles[index], selectedFiles[index].name);

                                    dataFiles.push(selectedFiles[index]);
                                    lisDataFilesName.push(selectedFiles[index].nameNew);
                                    var tmppath = URL.createObjectURL(selectedFiles[index]);
                                    if (endFile(selectedFiles[index].nameNew)) {
                                        //listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                        listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a></div>');
                                    }
                                });
                                item.DataFiles1 = dataFiles;
                                item.ColHtml1 = listHtml.join(' ');
                                item.ListNameFile1 = lisDataFilesName.join(',');
                            }
                        });
                        hot.render();
                        $(this).val('');
                        //console.log(rowline, rowCol);
                        var NotemyData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                            return item.Id !== null && item.Id !== undefined && item.Id !== ''
                        });
                        var FlagNotification = 0;
                        $.each(NotemyData, function (index, item) {
                            if ((item.ColHtml1 !== '' && item.ColHtml1 !== null && item.ColHtml1 !== undefined) && (item.ColHtml2 !== '' && item.ColHtml2 !== null && item.ColHtml2 !== undefined)) {
                                FlagNotification += 1;
                            }
                        })
                        //console.log(FlagNotification)
                        if (FlagNotification > 0) {
                            XFunction.RenderMessage("success", " Nhấn Hoàn tất để hoàn tất calllog :(");
                        }
                    }
                    if (colline == 'UploadHinh2') {

                        var rowline = $(this).attr('data-value');
                        var selectedFiles = $(this)[0].files;
                        //console.log(selectedFiles)
                        $.each(respone, function (index, item) {
                            if (rowline == index) {
                                var dataFiles = [];

                                if (item.DataFiles2 !== null && item.DataFiles2 !== undefined && item.DataFiles2 !== '' && item.DataFiles2.length > 0) {
                                    dataFiles = item.DataFiles2;
                                }
                                var listHtml = [];
                                var lisDataFilesName = [];

                                //var listHtml = item.ColHtmlArray;
                                //var lisDataFilesName = item.ListNameFileArray;

                                $.each(selectedFiles, function (index, item) {

                                    var d = new Date();
                                    var n = d.getTime();
                                    selectedFiles[index].nameNew = n.toString() + '_' + selectedFiles[index].name;

                                    //console.log(selectedFiles[index], selectedFiles[index].name);

                                    dataFiles.push(selectedFiles[index]);
                                    lisDataFilesName.push(selectedFiles[index].nameNew);
                                    var tmppath = URL.createObjectURL(selectedFiles[index]);
                                    if (endFile(selectedFiles[index].nameNew)) {
                                        //listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a><button class="BTN" type="button" class="btn btn-success" data-id="' + rowline + '" data-lisDataFilesName="' + selectedFiles[index].nameNew + '" onclick="DeleteIMG(this)">X</button></div>');
                                        listHtml.push('<div class="ULH"><a href="' + tmppath + '" target="_blank" class="renderlink" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42" data-id="' + rowline + '" data-value="' + selectedFiles[index].nameNew + '" ></a></div>');
                                    }
                                });
                                item.DataFiles2 = dataFiles;
                                item.ColHtml2 = listHtml.join(' ');
                                item.ListNameFile2 = lisDataFilesName.join(',');
                            }
                        });
                        hot.render();
                        $(this).val('');
                        //console.log(rowline, rowCol);
                        var NotemyData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                            return item.Id !== null && item.Id !== undefined && item.Id !== ''
                        });
                        var FlagNotification = 0;
                        $.each(NotemyData, function (index, item) {
                            if ((item.ColHtml1 !== '' && item.ColHtml1 !== null && item.ColHtml1 !== undefined) && (item.ColHtml2 !== '' && item.ColHtml2 !== null && item.ColHtml2 !== undefined)) {
                                FlagNotification += 1;
                            }
                        })
                        //console.log(FlagNotification)
                        if (FlagNotification > 0) {
                            XFunction.RenderMessage("success", " Nhấn Hoàn tất để hoàn tất calllog :(");
                        }
                    }
                });

                var setting = function () {
                    return {
                        //=================================Data=======
                        data: respone,
                        //================================Cols=======
                        minSpareCols: 0,
                        allowInsertColumn: false,
                        allowRemoveColumn: false,
                        autoColumnSize: true,
                        autoWrapCol: false,
                        columnSorting: false,
                        colWidths: 'undefined',
                        copyColsLimit: 16,
                        currentColClassName: 'currentCol', //currentCol
                        fixedColumnsLeft: 2,
                        manualColumnMove: false,
                        manualColumnResize: true,
                        viewportColumnRenderingOffset: 16,
                        sortIndicator: true,
                        //================================Rows=======
                        allowInsertRow: true,
                        allowRemoveRow: true,
                        autoRowSize: true,
                        autoWrapRow: false,
                        copyRowsLimit: 1000,
                        currentRowClassName: 'currentRow',
                        fixedRowsTop: 0,
                        manualRowMove: false,
                        manualRowResize: true,
                        rowHeaders: true,
                        minSpareRows: 3,
                        //startRows: 4,
                        //viewportRowRenderingOffset : 'auto',
                        //================================Oder=======
                        allowInvalid: false,
                        stretchH: 'all',
                        commentedCellClassName: 'htCommentCell',
                        comments: true,
                        contextMenu: false,
                        copyable: true,
                        customBorders: false,
                        debug: false,
                        disableVisualSelection: true,
                        enterBeginsEditingBoolean: true,
                        fillHandle: true,
                        outsideClickDeselects: true,
                        fragmentSelection: false,
                        groups: false,
                        invalidCellClassName: 'htInvalid',
                        mergeCells: false,
                        multiSelect: true,
                        noWordWrapClassName: 'htNoWrap',
                        placeholder: false,
                        placeholderCellClassName: 'htPlaceholder',
                        readOnlyCellClassName: 'htDimmed',
                        search: false,
                        trimWhitespace: true,
                        undo: true,
                        formulas: true,
                        wordWrap: true,
                        //====================================Oder ==============================================
                        colHeaders:
                            [
                                'Số đơn hàng',
                                'Số hóa đơn',
                                'Ngày xuất',
                                'Mã sản phẩm',
                                'Tên sản phẩm',
                                'Imei',
                                'Giá trị sản phẩm',
                                'Số lượng',
                                'Tiêu chí tính phí',
                                'Tình trạng máy',
                                'Up hình máy lỗi',
                                'Hình ảnh chứng minh máy lỗi',
                                'Up hình vỏ hộp',
                                'Hình ảnh vỏ hộp kèm máy'
                            ],
                        columns: [
                            { data: "SoDonHang", type: 'text', width: 200, className: 'htCenter', readOnly: true },
                            { data: "SoHoaDon", type: 'text', width: 150, className: 'htCenter', readOnly: true },
                            { data: "NgayXuat", type: 'text', width: 150, className: 'htCenter', readOnly: true },
                            { data: "MaSanPham", type: 'text', width: 200, className: 'htLeft', readOnly: true },
                            { data: "TenSanPham", type: 'text', className: 'htLeft', readOnly: true },
                            { data: "Imei", type: 'text', width: 200, className: 'htLeft', readOnly: true },
                            { data: "GiaSanPham", type: 'text', width: 200, className: 'htLeft', readOnly: true },
                            { data: "SoLuong", type: 'text', width: 200, className: 'htCenter', readOnly: true },
                            { data: "TieuChi", type: 'text', width: 150, className: 'htCenter', readOnly: true },
                            { data: "TinhTrang", type: 'text', width: 150, className: 'htCenter', readOnly: true },
                            { data: "UploadHinh1", type: 'text', editor: false, renderer: actionRendererUpload_213, width: 100, className: 'htCenter' },
                            { data: "ColHtml1", editor: false, type: 'text', className: 'htCenter', renderer: safeHtmlRenderer, width: 200 },
                            { data: "UploadHinh2", type: 'text', editor: false, renderer: actionRendererUpload_213, width: 100, className: 'htCenter' },
                            { data: "ColHtml2", editor: false, type: 'text', className: 'htCenter', renderer: safeHtmlRenderer, width: 200 }

                        ],
                        beforeChange: function (changes, source) {
                            if (source == 'not') return;
                            //console.log(changes)
                            for (i = 0; i < changes.length; i++) {
                                var row = changes[i][0], col = changes[i][1];
                                //console.log(col)

                            }
                        },
                    };
                };
                hot = new Handsontable(container, setting());
                hot.selectCell(0, 0, 0, 0);

                $btnComment.on('click', function () {
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== ''
                    });

                    var message = $('#Message').val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                    }
                    $('#Details').val(JSON.stringify(''));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();

                });
                $btnComplete.on('click', function () {
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                        return item.Id !== null && item.Id !== undefined && item.Id !== ''
                    });
                    if (FlagReadonly == true) {
                        XFunction.RenderMessage("error", "Bạn không được phép hoàn tất :("); return;
                    }
                    var flagImage = 0;
                    $.each(myData, function (index, item) {
                        if ((item.ColHtml1 == '' || item.ColHtml1 == null || item.ColHtml1 == undefined) || (item.ColHtml2 == '' || item.ColHtml2 == null || item.ColHtml2 == undefined)) {
                            flagImage += 1;
                        }
                    });
                    if (flagImage > 0) {
                        XFunction.RenderMessage("error", "Bạn chưa up hình đầy đủ :("); return;
                    }
                    var dataForm = new FormData();
                    var dataReturn = [];
                    $.each(myData, function (index, item) {
                        dataReturn.push({
                            Row: index,
                            RequestId: item.RequestId,
                            Id: item.Id,
                            ListNameFile1: item.ListNameFile1,
                            ListNameFile2: item.ListNameFile2
                        });
                        if (item.DataFiles1 !== '' && item.DataFiles1 !== null && item.DataFiles1 !== undefined && item.DataFiles1.length > 0) {
                            $.each(item.DataFiles1, function (cout, element) {
                                dataForm.append(element.nameNew, element);
                            });
                        }
                        if (item.DataFiles2 !== '' && item.DataFiles2 !== null && item.DataFiles2 !== undefined && item.DataFiles2.length > 0) {
                            $.each(item.DataFiles2, function (cout, element) {
                                dataForm.append(element.nameNew, element);
                            });
                        }
                    });
                    //console.log(dataReturn); return;
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    dataForm.append("Details", $('#Details').val());
                    dataForm.append("DetailsCc", $('#DetailsCc').val());
                    dataForm.append("RequestId", $('#RequestId').val());
                    dataForm.append("Message", $('#Message').val());
                    dataForm.append("fileUpload", $('#fileUpload').val());
                    $.ajax({
                        type: "POST",
                        url: "/Requests/SaveUploadedFileDetailMultipleCol_213",
                        contentType: false,
                        processData: false,
                        async: false,
                        cache: false,
                        data: dataForm,
                        success: function (result) {
                            if (result.error === 0) {
                                var form = $("form#form-detail");
                                form.attr("action", "/Requests/Complete");
                                form.submit();
                            }
                            else {
                                $('#myModalWatting').modal('hide');
                                XFunction.RenderMessage('error', 'Lưu file không thành công');
                                return;
                            }
                        },
                        error: function () {
                            XFunction.RenderMessage('error', 'Dung lượng file upload quá lớn');
                            return;
                        }
                    });
                });
            });
        });
    };
    //▲  Add - LuanNT44 - 15/07/2019 - Loại 213 - Duyệt lỗi DOA

    function contruct_214() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            dataHandsontable = respone;
            var isReadonly_SoLuong = true,
                isReadonly_TrongLuong = true,
                isReadonly_ShopDaNhanHangMoi = true,
                isReadonly_KhoDaNhanHangLoi = true,
                isReadonly_KhoDaChuyenHangMoi = true,
                isReadonly_GhiChu = true
            var hot;

            var stepNo = CL.StepNo;
            var status = CL.Status;

            if (status < 4) {
                if (stepNo == 1) {
                    isReadonly_SoLuong = false;
                    isReadonly_TrongLuong = false;
                    isReadonly_GhiChu = false;
                }
                else if (stepNo == 2) {
                    isReadonly_KhoDaNhanHangLoi = false;
                    isReadonly_KhoDaChuyenHangMoi = false;
                }
                else if (stepNo == 3) {
                    isReadonly_KhoDaChuyenHangMoi = false;
                }
                else if (stepNo == 4) {
                    isReadonly_ShopDaNhanHangMoi = false;
                }
            }
            var actionRendererCheck = function (instance, td, row, col, prop, value, cellProperties) {
                var isChecked = '';
                if (g_FunctionDefaultValueEmty(value) == '' || value == 0) {
                    isChecked = '';
                }
                else {
                    isChecked = 'checked';
                }

                var isDisabled = '';
                if ((prop == 'ShopDaNhanHangMoi' && isReadonly_ShopDaNhanHangMoi == true)
                    || (prop == 'KhoDaChuyenHangMoi' && isReadonly_KhoDaChuyenHangMoi == true)
                    || (prop == 'KhoDaNhanHangLoi' && isReadonly_KhoDaNhanHangLoi == true)) {
                    isDisabled = 'disabled';
                }

                $btncheck = $("<input type='checkbox' value='" + value + "' " + isDisabled + " " + isChecked + " >");
                $(td).empty().append($btncheck);
                $btncheck.click(function () {
                    var l_value = dataHandsontable[row][prop];
                    if (l_value == 1) l_value = 0;
                    else l_value = 1;
                    hot.setDataAtCell(row, col, l_value, 'not');
                });
            }

            var setting_214 = function () {
                return {
                    data: dataHandsontable,
                    stretchH: 'all',
                    rowHeaders: true,
                    colHeaders: true,
                    formulas: true,
                    comments: true,
                    autoColumnSize: true,
                    currentRowClassName: '',
                    currentColClassName: 'currentCol',
                    contextMenu: true,
                    multiSelect: true,
                    undo: true,
                    formulas: true,
                    allowInvalid: false,
                    wordWrap: true,
                    copyPaste: true,
                    fixedColumnsLeft: 8,
                    nestedHeaders: [
                        [
                            { label: 'Thông tin sản phẩm', colspan: 8 },
                            'Shop đã nhận ',
                            { label: 'Kho tổng', colspan: 2 },
                            "Ghi chú"
                        ],
                        [
                            "Mã shop", "Tên shop", "Số SO", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Số kiện", "Trọng lượng (gr)",
                            "hàng mới",
                            "Kho CXL HO đã nhận hàng lỗi", "Kho CXL đã chuyển hàng mới",
                            ""
                        ]
                    ],
                    columns: [
                        { data: "MaShop", readOnly: true, className: 'htCenter', width: 80 },
                        { data: "TenShop", readOnly: true, className: 'htCenter', width: 200 },
                        { data: "SoSO_POS", readOnly: true, className: 'htCenter', width: 80 },
                        { data: "MaSP", readOnly: true, className: 'htCenter', width: 90 },
                        { data: "TenSP", readOnly: true, className: 'htCenter', width: 200 },
                        { data: "SoLuong", type: 'numeric', readOnly: isReadonly_SoLuong, className: 'htCenter', width: 70 },
                        { data: "SoKien", readOnly: true, className: 'htCenter', width: 70 },
                        { data: "TrongLuong", type: 'numeric', format: '0.00', readOnly: isReadonly_TrongLuong, className: 'htCenter', width: 110 },//Edit - TuanNA89 - 23/09/2019 - Loại 214 - Duyệt chuyển hàng phụ kiện bảo hành
                        { data: "ShopDaNhanHangMoi", readOnly: true, checkedTemplate: 1, uncheckedTemplate: 0, width: 100, className: 'htCenter', renderer: actionRendererCheck },
                        { data: "KhoDaNhanHangLoi", readOnly: true, checkedTemplate: 1, uncheckedTemplate: 0, width: 200, className: 'htCenter', renderer: actionRendererCheck },
                        { data: "KhoDaChuyenHangMoi", readOnly: true, checkedTemplate: 1, uncheckedTemplate: 0, width: 200, className: 'htCenter', renderer: actionRendererCheck },
                        { data: 'GhiChu', type: 'text', readOnly: isReadonly_GhiChu, className: 'htLeft', width: 70 },
                    ],
                };
            };

            hot = new Handsontable(container, setting_214());
            hot.render();

            $btnComment.on('click', function () {
                if (Assign == 'Chưa có người xử lý' && CL.StepNo == 1) {
                    return false;
                }

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var myData = hot.getData() === undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var dataReturn = [];
                var dataImgesInvalid = [];

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#Details').val(JSON.stringify(dataReturn));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
            });
            $btnChangeStep.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot === undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var message = $("#Message").val();
                var error = true;
                var chuyenBuoc3 = true;
                $.each(myData, function (index, item) {
                    if (stepNo == 1) {
                        item.SoLuong = Math.round(item.SoLuong);
                        item.SoKien = Math.round(item.SoKien);
                    }
                    else if (stepNo == 2) {
                        if (item.KhoDaNhanHangLoi != '1' && (message == null || message == '')) {
                            XFunction.RenderMessage("error", 'Line ' + item.STT + ' chưa check "Kho CXL HO đã nhận hàng lỗi". User bắt buộc phải nhập trao đổi');
                            error = true;
                            return false;
                        }

                        if (item.KhoDaChuyenHangMoi != '1') {
                            chuyenBuoc3 = false;
                        }
                    }
                    else if (stepNo == 3) {
                        if (item.KhoDaChuyenHangMoi != '1' && (message == null || message == '')) {
                            XFunction.RenderMessage("error", 'Line ' + item.STT + ' chưa check "Kho CXL đã chuyển hàng mới". User bắt buộc phải nhập trao đổi');
                            error = true;
                            return false;
                        }
                    }
                    else if (stepNo == 4) {
                        if (item.ShopDaNhanHangMoi != '1' && (message == null || message == '')) {
                            XFunction.RenderMessage("error", 'Line ' + item.STT + ' chưa check "Shop đã nhận hàng mới". User bắt buộc phải nhập trao đổi');
                            error = true;
                            return false;
                        }
                    }

                    error = false;
                });
                if (error) {
                    return;
                }

                //if((stepNo == 1 && myData[0].CL_VC_Buoc1 == '') || (chuyenBuoc3 && myData[0].CL_VC_Buoc3 == ''))
                //{
                //    if(stepNo > 1 && chuyenBuoc3) stepNo = 3
                //    XFunction.RenderMessage("error", 'Calllog chưa tạo Calllog Bill vận chuyển bước '+stepNo+' . Tự động chuyển sang tạo Bill vận chuyển');
                //}

                $('#myModalWatting').modal('show');

                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/ChangeStep");
                form.attr("target", "");
                form.submit();
            });
            $btnComplete.on('click', function () {
                $('#myModal214').modal('show');
            });

            $('#Ok214').on('click', function () {
                $('#myModal214').modal('hide');
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot === undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var message = $("#Message").val();
                var error = true;
                $.each(myData, function (index, item) {
                    if (stepNo == 4) {
                        if (item.ShopDaNhanHangMoi != '1' && (message == null || message == '')) {
                            XFunction.RenderMessage("error", 'Line ' + item.STT + ' chưa check "Shop đã nhận hàng mới". User bắt buộc phải nhập trao đổi');
                            error = true;
                            return false;
                        }
                    }

                    error = false;
                });
                if (error) {
                    return;
                }

                $('#myModalWatting').modal('show');
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                console.log('Hoàn tất');
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
            $('#Cancel214').on('click', function () {
                $('#myModal214').modal('hide');
            });
        });
    };

    function contruct_216() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [],
                isReadOnly = false,
                isDisable = '',
                p__GhiChu = '';

            if (CL.Status == 4 && CL.Status == 5) {
                $btnComment.hide();
                $btnComplete.hide();
                isReadOnly = true;
                isDisable = 'disabled';
            }

            var dataHandsontable = respone;
            var setting = function () {
                return {
                    //=================================Data=======
                    data: dataHandsontable,
                    //================================Cols=======
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol',
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    //minSpareRows: 3,
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    //====================================Oder ==============================================
                    colHeaders:
                        [
                            'Duyệt',
                            'Không duyệt',
                            'Lý do không duyệt',
                            'Tên shop',
                            'Tên nhân viên trực đêm',
                            'Ngày trực',
                            'Lý do'
                        ],
                    columns: [
                        {
                            data: 'TrangThaiDuyet', readOnly: true, checkedTemplate: 1, uncheckedTemplate: 0, width: 70, className: 'htCenter',
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                isChecked = '';
                                if (!p_Value) {
                                    isChecked = '';
                                }
                                else {
                                    isChecked = 'checked';
                                }
                                $button1 = $("<input type='radio' name='approve" + p_Row + "' value='1' " + isChecked + " " + isDisable + " >");
                                $button1.click(function () {
                                    dataHandsontable[p_Row]['TrangThaiDuyet'] = 1;
                                });
                                $(p_td).empty().append($button1);
                            }
                        },
                        {
                            data: 'TrangThaiDuyet', readOnly: true, checkedTemplate: 1, uncheckedTemplate: 0, width: 70, className: 'htCenter',
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                isChecked = '';
                                if (p_Value != null && !p_Value) {
                                    isChecked = 'checked';
                                }
                                else {
                                    isChecked = '';
                                }
                                $button2 = $("<input type='radio' name='approve" + p_Row + "' value='0' " + isChecked + " " + isDisable + " >");
                                $button2.click(function () {
                                    dataHandsontable[p_Row]['TrangThaiDuyet'] = 0;
                                });
                                $(p_td).empty().append($button2);
                            }
                        },
                        { data: "LyDoKhongDuyet", type: 'text', width: 150, className: 'htCenter', readOnly: isReadOnly },
                        { data: "TenShop", type: 'text', width: 200, className: 'htLeft', readOnly: true },
                        { data: "TenNV", type: 'text', width: 200, className: 'htLeft', readOnly: true },
                        { data: "NgayTruc", type: 'text', width: 100, className: 'htLeft', readOnly: true },
                        { data: "LyDo", type: 'text', width: 200, className: 'htLeft', readOnly: true },
                    ],
                };
            };
            hot = new Handsontable(container, setting());
            hot.loadData(dataHandsontable);

            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== ''
                });
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();

            });
            $btnComplete.on('click', function () {
                var l__return = false;
                $.each(dataHandsontable, function (index, item) {
                    if (item.TrangThaiDuyet == null || item.TrangThaiDuyet == undefined) {
                        l__return = true;
                        XFunction.RenderMessage("error", "Bắt buộc chọn Duyệt/ Không duyệt");
                        return;
                    }
                    else if (item.TrangThaiDuyet == 0 && (item.LyDoKhongDuyet == null || item.LyDoKhongDuyet == '' || item.LyDoKhongDuyet == undefined)) {
                        l__return = true;
                        XFunction.RenderMessage("error", "Bắt buộc nhập lý do không duyệt");
                        return;
                    }
                });
                if (l__return) return;

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                $('#pop__WaitDialog').modal('show');
                $('#Details').val(JSON.stringify(dataHandsontable));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    };

    //▼  Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218
    function contruct_218() {
        var isReadonlyData = true;
        var isDisable = 'disabled';
        var isSender = false;
        var arrNameProducts = [], dataProducts = [];
        if (CL.StepNo == 1) {
            isReadonlyData = false;
        }

        if (CL.Status >= 4) {
            $btnComplete.hide();
            $btnChangeStep.hide();
        }

        function strip_tags(input, allowed) {
            var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

            // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
            allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

            return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
            });
        }
        function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
            td.className = 'htMiddle';
            var escaped = Handsontable.helper.stringify(value);
            escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
            td.innerHTML = escaped;
            td.style.textAlign = 'center';
            return td;
        }
        function onChange(changes, source) {
            if (!changes) {
                return;
            }
            var instance = this;
            console.log(changes);
            changes.forEach(function (change) {
                var row = change[0];
                var col = change[1];
                var newValue = change[3];
                var cellProperties, options;
                console.log(col);
                if (col == 'Shop') {
                    if (newValue) {
                        var wahouseCode = $.grep(dataShop_218, function (item, index) {
                            return item.TextSearch == newValue;
                        });
                        cellProperties = instance.getCellMeta(row, 1);
                        instance.getSettings().data[row]['ShopCode'] = wahouseCode[0].WarehouseCode;
                        instance.getSettings().data[row]['ShopCodeB1'] = wahouseCode[0].WarehouseCodeB1;
                        instance.getSettings().data[row]['ShopName'] = wahouseCode[0].WarehouseName;
                        instance.render();

                    }
                } else if (col == 'Product') {
                    if (newValue) {
                        var filterProduct = $.grep(dataProducts, function (item, index) {
                            return item.TextSearch == newValue;
                        });
                        cellProperties = instance.getCellMeta(row, 1);
                        if (filterProduct != null && filterProduct.length > 0) {
                            instance.getSettings().data[row]['ItemCode'] = filterProduct[0].ItemCode;
                            instance.getSettings().data[row]['ItemName'] = filterProduct[0].ItemName;

                        }
                        else {
                            instance.getSettings().data[row]['Product'] = '';
                            instance.getSettings().data[row]['ItemCode'] = '';
                            instance.getSettings().data[row]['ItemName'] = '';
                        }
                        instance.render();
                    }
                }
            });
        }
        function checkDuplicateData(arrData) {
            console.log('checkDuplicateData.arrData', arrData);
            var result = "";
            var Dups = {};
            arrData.forEach((item, index) => {
                if (item.Product && item.SoLuong) {
                    var itemArr = item.ShopCode + '|' + item.ItemCode + '|' + item.Imei + '|' + item.MaKhoXuat;
                    Dups[itemArr] = Dups[itemArr] || [];
                    Dups[itemArr].push(index + 1);
                }
            });
            for (let name in Dups) {
                if (Dups[name].length > 1)
                    result = Dups[name];
            }
            if (result.length > 0) {
                result = 'Dữ liệu dòng ' + result + ' bị trùng. vui lòng kiểm tra lại!'
            }
            else result = '';

            console.log('checkDuplicateData.result', result);
            return result;
        }
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];
            $.each(respone, function (index, item) {
                var listHinhAnh = [];
                if (item.Uri) {
                    var listUri = item.Uri.split(',');
                    $.each(listUri, function (indexUri, itemUri) {
                        listHinhAnh.push('<a href="' + item.Domain + itemUri + '" target="_blank" class="renderlink"><img width="30" height="30" src="' + item.Domain + itemUri + '"></a>');
                    });
                    if (listHinhAnh && listHinhAnh.length > 0) {
                        item.HinhAnh = listHinhAnh.join('|');
                    }
                }
            })

            dataHandsontable = respone;
            $.get('/Requests/GetProducts_218', function (dataP) {
                $.each(dataP, function (index, item) {
                    dataProducts.push({
                        'ItemCode': item.ItemCode,
                        'ItemName': item.ItemName,
                        'TextSearch': item.ItemCode + ' - ' + item.ItemName
                    });
                    arrNameProducts.push(item.ItemCode + ' - ' + item.ItemName);
                });
                console.log(dataHandsontable);
                var setting_218 = function () {
                    return {
                        data: dataHandsontable,
                        stretchH: 'all',
                        rowHeaders: true,
                        colHeaders: true,
                        formulas: true,
                        comments: true,
                        autoColumnSize: true,
                        currentRowClassName: 'currentRow',
                        currentColClassName: 'currentCol',
                        contextMenu: true,
                        multiSelect: true,
                        undo: true,
                        formulas: true,
                        allowInvalid: false,
                        wordWrap: true,
                        copyPaste: true,
                        fixedColumnsLeft: 8,
                        colHeaders: [
                            'Duyệt',
                            'Không duyệt',
                            'Mã shop',
                            'Mã hàng cần xuất',
                            'Imei máy cũ (nếu có)',
                            'Mã kho',
                            'Số lượng',
                            'Lý do',
                            'Hình ảnh đính kèm'
                        ],
                        columns: [
                            {
                                data: 'Duyet', readOnly: true, width: 100, className: 'htCenter htMiddle',
                                renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                    p_td.className = 'htMiddle';
                                    isChecked = '';
                                    if (p_Value == 1) {
                                        isChecked = 'checked';
                                    }
                                    else {
                                        isChecked = '';
                                    }
                                    if (CL.StepNo == 1 && CL.Status < 4) isDisable = '';
                                    else isDisable = 'disabled';

                                    var $button2 = $('<label class="radio"><input type="radio" name="approve' + p_Row + '" value="1" ' + isChecked + ' ' + isDisable + ' > Duyệt</label>');
                                    $button2.click(function () {
                                        hot.getSettings().data[p_Row]['TrangThaiDuyet'] = 1;
                                        hot.getSettings().data[p_Row]['Duyet'] = 1;
                                    });
                                    $(p_td).empty().append($button2);
                                }
                            },
                            {
                                data: 'TuChoi', readOnly: true, width: 100, className: 'htCenter htMiddle',
                                renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                    p_td.className = 'htMiddle';
                                    isChecked = '';
                                    if (p_Value == 1) {
                                        isChecked = 'checked';
                                    }
                                    else {
                                        isChecked = '';
                                    }
                                    if (CL.StepNo == 1 && CL.Status < 4) isDisable = '';
                                    else isDisable = 'disabled';

                                    var $button1 = $('<label class="radio align-middle"><input type="radio" name="approve' + p_Row + '" value="0" ' + isChecked + ' ' + isDisable + ' > Từ chối</label>');
                                    $button1.click(function () {
                                        hot.getSettings().data[p_Row]['TrangThaiDuyet'] = 0;
                                        hot.getSettings().data[p_Row]['TuChoi'] = 1;
                                    });
                                    $(p_td).empty().append($button1);
                                }
                            },
                            { data: "MaShop", type: 'text', readOnly: true, className: 'htCenter htMiddle', width: 80 },
                            { data: "Product", type: 'autocomplete', source: arrNameProducts, width: 150, readOnly: isReadonlyData },
                            {
                                data: "Imei", type: 'text', readOnly: isReadonlyData, className: 'htCenter htMiddle', width: 80, validator: function (value, callback) {
                                    var maxlength = 32;
                                    if (value.length > maxlength) {
                                        alert('Imei máy cũ chỉ được phép nhập ' + maxlength + ' ký tự. Số ký tự dư sẽ bị xoá!!');
                                        this.instance.setDataAtCell(this.row, this.col, value.substring(0, maxlength), null);
                                    }
                                    callback(true);
                                }
                            },
                            { data: "MaKhoXuat", type: 'text', readOnly: true, className: 'htCenter htMiddle', width: 80 },
                            { data: "SoLuong", type: 'numeric', readOnly: isReadonlyData, className: 'htCenter htMiddle', width: 80 },
                            { data: "LyDo", type: 'text', readOnly: isReadonlyData, className: 'htCenter htMiddle', width: 80 },
                            { data: "HinhAnh", type: 'text', width: 100, readOnly: true, className: 'htMiddle', renderer: safeHtmlRenderer },
                        ],
                        afterChange: onChange,
                    };
                };

                hot = new Handsontable(container, setting_218());
                hot.render();

                $btnComment.on('click', function () {
                    if (Assign == 'Chưa có người xử lý') {
                        return false;
                    }

                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });

                    var dataReturn = [];
                    if (CL.StepNo == 1 && !isReadonlyData) {
                        var myData = hot == undefined ? "" : $.grep(hot.getSettings().data, function (item, index) {
                            return item.Id != undefined && item.Id != '' && item.Id != null && item.Id > 0;
                        });

                        // Check dữ liệu
                        var l_CheckDoubleData = [];
                        var is_Error = false, error_Msg = '';
                        $.each(myData, function (index1, item1) {
                            if (!is_Error) {
                                if (!item1.Product) {
                                    is_Error = true;
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập mã hàng';
                                    return false;
                                }
                                else if (!item1.SoLuong) {
                                    is_Error = true;
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập số lượng';
                                    return false;
                                }
                                //▼ Add - TuanNA89 - 29/11/2019 - Thêm điều kiện bắt buộc nhập Lý do
                                else if (!item1.LyDo || $.trim(item1.LyDo) == '') {
                                    is_Error = true;
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' bạn vui lòng nhập rõ thông tin sản phẩm dùng cho chương trình KM nào, sử dụng vào ngày nào tại cột Lý do.';
                                    return false;
                                }
                                //▲ Add - TuanNA89 - 29/11/2019 - Thêm điều kiện bắt buộc nhập Lý do

                                if (is_Error) return false;
                            }
                        });
                        if (!is_Error) {
                            error_Msg = checkDuplicateData(myData);
                        }
                        if (error_Msg) is_Error = true;

                        if (is_Error) {
                            XFunction.RenderMessage('error', error_Msg);
                            return;
                        }
                        dataReturn = myData;
                    }

                    var message = $("#Message").val();
                    if (message.length == 0) {
                        XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                        return false;
                    } else {
                        $('#Details').val(JSON.stringify(dataReturn));
                        $('#DetailsCc').val(JSON.stringify(myDataCc));
                        var form = $("form#form-detail");
                        form.attr("action", "/Requests/Conversation");
                        form.submit();
                    }
                });
                $btnChangeStep.on('click', function () {
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var myData = hot == undefined ? "" : $.grep(hot.getSettings().data, function (item, index) {
                        return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                    });
                    var error = false;
                    if (myData == null) {
                        XFunction.RenderMessage("error", 'Không tìm thấy dữ liệu');
                        error = true;
                    }
                    // Check dữ liệu
                    var l_CheckDoubleData = [];
                    var is_Error = false, error_Msg = '';
                    $.each(myData, function (index1, item1) {
                        if (!is_Error) {
                            if (!item1.Product) {
                                is_Error = true;
                                error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập mã hàng';
                                return false;
                            }
                            else if (!item1.SoLuong) {
                                is_Error = true;
                                error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập số lượng';
                                return false;
                            }
                            //▼ Add - TuanNA89 - 29/11/2019 - Thêm điều kiện bắt buộc nhập Lý do
                            else if (!item1.LyDo || $.trim(item1.LyDo) == '') {
                                is_Error = true;
                                error_Msg = 'Dòng ' + (index1 + 1) + ' bạn vui lòng nhập rõ thông tin sản phẩm dùng cho chương trình KM nào, sử dụng vào ngày nào tại cột Lý do.';
                                return false;
                            }
                            //▲ Add - TuanNA89 - 29/11/2019 - Thêm điều kiện bắt buộc nhập Lý do

                            if (is_Error) return false;
                            else l_CheckDoubleData.push(item1);
                        }
                    });
                    //▼ Add - TuanNA89 - 29/11/2019 - Thêm điều kiện bắt buộc nhập Lý do
                    if (!is_Error) {
                        error_Msg = checkDuplicateData(myData);
                    }
                    //▲ Add - TuanNA89 - 29/11/2019 - Thêm điều kiện bắt buộc nhập Lý do
                    if (error_Msg) is_Error = true;
                    if (is_Error) {
                        XFunction.RenderMessage('error', error_Msg);
                        return;
                    }

                    $.each(myData, function (index, item) {
                        if (item.TrangThaiDuyet == null) {
                            XFunction.RenderMessage("error", 'Line ' + (index + 1) + ' chưa duyệt');
                            error = true;
                            return false;
                        }
                    });

                    if (error) {
                        return;
                    }

                    $('#myModalWatting').modal('show');
                    var message = $("#Message").val();
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/ChangeStep");
                    form.submit();
                });
                $btnComplete.on('click', function () {
                    var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                        return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                    });
                    var myData = hot === undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                        return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                    });

                    $('#myModalWatting').modal('show');
                    var message = $("#Message").val();
                    $('#Details').val(JSON.stringify([]));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                });
            });
        });
    };
    //▲  Add - TuanNA89 - 15/10/2019 - Calllog Xuất sử dụng VPKM cho Khai trương & Hoạt náo - Loại 218

    function contruct_221() {
        var isReadonlyData = true;
        if (CL.StepNo == 1) {
            isReadonlyData = false;
        }
        function strip_tags(input, allowed) {
            var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

            // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
            allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

            return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
            });
        }

        function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
            td.className = 'htMiddle';
            var escaped = Handsontable.helper.stringify(value);
            escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
            td.innerHTML = escaped;
            td.style.textAlign = 'center';
            return td;
        }

        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];

            dataHandsontable = respone;

            $.each(dataHandsontable, function (index, item) {
                item.HinhDonDatHang = '<a href="' + item.HinhDonDatHang + '" target="_blank" class="renderlink"><img width="30" height="30" src="' + item.HinhDonDatHang + '"></a>';
                item.HinhCMNDMatTruoc = '<a href="' + item.HinhCMNDMatTruoc + '" target="_blank" class="renderlink"><img width="30" height="30" src="' + item.HinhCMNDMatTruoc + '"></a>';
                item.HinhCMNDMatSau = '<a href="' + item.HinhCMNDMatSau + '" target="_blank" class="renderlink"><img width="30" height="30" src="' + item.HinhCMNDMatSau + '"></a>';
                item.HinhSanPham = '<a href="' + item.HinhSanPham + '" target="_blank" class="renderlink"><img width="30" height="30" src="' + item.HinhSanPham + '"></a>';
            });

            var setting_221 = function () {
                return {
                    data: dataHandsontable,
                    stretchH: 'all',
                    rowHeaders: true,
                    colHeaders: true,
                    formulas: true,
                    comments: true,
                    autoColumnSize: true,
                    //currentRowClassName: 'currentRow',
                    currentColClassName: 'currentCol',
                    contextMenu: true,
                    multiSelect: true,
                    undo: true,
                    formulas: true,
                    allowInvalid: false,
                    wordWrap: true,
                    copyPaste: true,
                    colHeaders: [
                        'Duyệt',
                        'Không duyệt',
                        'Lý do từ chối',
                        'Tên khách hàng',
                        'CMND',
                        'Giám đốc chi nhánh',
                        'Số điện thoại nhận OTP',
                        'Tổng tiền đơn hàng(VAT)',
                        'Hình đơn đặt hàng',
                        'Hình CMND mặt trước',
                        'Hình CMND mặt sau',
                        'Hình sản phẩm',
                    ],
                    columns: [
                        {
                            data: 'Duyet', readOnly: true, width: 100, className: 'htCenter htMiddle',
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                p_td.className = 'htMiddle';
                                isChecked = '';
                                var isDisable;
                                if (p_Value == 1) {
                                    isChecked = 'checked';
                                }
                                else {
                                    isChecked = '';
                                }
                                if (CL.StepNo == 1 && CL.Status < 4) isDisable = '';
                                else isDisable = 'disabled';

                                var $button2 = $('<label class="radio"><input type="radio" name="approve' + p_Row + '" value="1" ' + isChecked + ' ' + isDisable + ' > Duyệt</label>');
                                $button2.click(function () {
                                    hot.getSettings().data[p_Row]['TrangThaiDuyet'] = 1;
                                    hot.getSettings().data[p_Row]['Duyet'] = 1;
                                    hot.getSettings().data[p_Row]['KhongDuyet'] = 0;
                                });
                                $(p_td).empty().append($button2);
                            }
                        },
                        {
                            data: 'KhongDuyet', readOnly: true, width: 100, className: 'htCenter htMiddle',
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                p_td.className = 'htMiddle';
                                isChecked = '';
                                var isDisable;
                                if (p_Value == 1) {
                                    isChecked = 'checked';
                                }
                                else {
                                    isChecked = '';
                                }
                                if (CL.StepNo == 1 && CL.Status < 4) isDisable = '';
                                else isDisable = 'disabled';

                                var $button1 = $('<label class="radio align-middle"><input type="radio" name="approve' + p_Row + '" value="0" ' + isChecked + ' ' + isDisable + ' > Từ chối</label>');
                                $button1.click(function () {
                                    hot.getSettings().data[p_Row]['TrangThaiDuyet'] = 0;
                                    hot.getSettings().data[p_Row]['Duyet'] = 0;
                                    hot.getSettings().data[p_Row]['KhongDuyet'] = 1;
                                });
                                $(p_td).empty().append($button1);
                            }
                        },
                        { data: "LyDoTuChoi", type: 'text', readOnly: isReadonlyData, className: 'htLeft', width: 250 },
                        { data: "HoTenKH", type: 'text', readOnly: true, className: 'htLeft' },
                        { data: "CMND", type: 'text', readOnly: true, className: 'htLeft', width: 80 },
                        { data: "TenGDCN", type: 'text', readOnly: true, className: 'htLeft' },
                        { data: "SDT", type: 'text', readOnly: true, className: 'htLeft', width: 150 },
                        { data: "TongTienDonHang", type: 'text', readOnly: true, className: 'htLeft', width: 150 },
                        { data: "HinhDonDatHang", type: 'text', readOnly: true, className: 'htLeft', width: 150, renderer: safeHtmlRenderer },
                        { data: "HinhCMNDMatTruoc", type: 'text', readOnly: true, className: 'htLeft', width: 150, renderer: safeHtmlRenderer },
                        { data: "HinhCMNDMatSau", type: 'text', readOnly: true, className: 'htLeft', width: 150, renderer: safeHtmlRenderer },
                        { data: "HinhSanPham", type: 'text', readOnly: true, className: 'htLeft', width: 150, renderer: safeHtmlRenderer },
                    ],
                };
            };

            hot = new Handsontable(container, setting_221());
            hot.render();

            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot === undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null && item.Id != 0;
                });

                console.log(myData);
                if (myData.length > 0) {
                    var isError = false;
                    var msg_Error = '';
                    $.each(myData, function (index, item) {
                        console.log(item.Duyet);
                        console.log(item.KhongDuyet);
                        if ((!item.Duyet || item.Duyet == 0) && (!item.KhongDuyet || item.KhongDuyet == 0)) {
                            msg_Error = "Vui lòng chọn duyệt/ không duyệt";
                            isError = true;
                            return false;
                        }
                        else if (item.KhongDuyet == 1) {
                            if (!item.LyDoTuChoi || $.trim(item.LyDoTuChoi).length == 0) {
                                msg_Error = "Vui lòng nhập lý do từ chối";
                                isError = true;
                                return false;
                            }
                        }
                    });
                }

                if (isError) {
                    XFunction.RenderMessage("error", msg_Error);
                    return false;
                }

                $('#myModalWatting').modal('show');
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });

        });
    };

    //▼ Add - TuanNA89 - 26/11/2019 - Calllog Duyệt hình ảnh chứng từ hồ sơ Mirae - Loại 222
    function contruct_222() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = [];

            dataHandsontable = respone;

            var isReadonlyData = true;
            if (CL.StepNo == 1) {
                isReadonlyData = false;
            }

            if (CL.Status > 3) {
                $btnComplete.hide();
            }

            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }

            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                td.className = 'htMiddle';
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                td.innerHTML = escaped;
                td.style.textAlign = 'center';
                return td;
            }
            function ImageRenderer(instance, td, row, col, prop, value, cellProperties) {
                var image = '';
                var domain = instance.getDataAtRowProp(row, 'Domain');
                if (value !== null && value !== '' && value !== undefined) {
                    var arr = value.split(',')
                    var listimage = ''
                    $.each(arr, function (index, item) {
                        item = domain + item;
                        listimage +=
                            '<a class="sample" target="_blank" data-height="60" data-lighter="' + item + '" data-width="60" href="' + item + '">' +
                            '<img  style="width:50px" src="' + item + '">' +
                            '</a>'

                    })
                    image = $('<div class="dropzone dz-clickable dz-started">' +
                        '<div class="dz-preview dz-processing dz-image-preview dz-error dz-complete">' +
                        '<div class="dz-image">'
                        + listimage +
                        '</div>' +
                        '</div>' +
                        '</div>');
                }

                $(td).empty().append(image);
            };
            function CheckBoxRenderer(instance, td, row, col, prop, value, cellProperties) {
                var $td = $(td);
                if (value == 1 || value == true)
                    value = true;
                else
                    value = false;

                $td.addClass('htCenter htMiddle');

                Handsontable.CheckboxCell.renderer.apply(this, arguments);
            };

            var setting_222 = function () {
                return {
                    data: dataHandsontable,
                    stretchH: 'all',
                    rowHeaders: true,
                    colHeaders: true,
                    formulas: true,
                    comments: true,
                    autoColumnSize: true,
                    //currentRowClassName: 'currentRow',
                    currentColClassName: 'currentCol',
                    contextMenu: true,
                    multiSelect: true,
                    undo: true,
                    formulas: true,
                    allowInvalid: false,
                    wordWrap: true,
                    copyPaste: true,
                    nestedHeaders: [
                        [
                            'Mã xác nhận',
                            'Số hợp đồng',
                            'Mã SO',
                            'Nhân viên làm hồ sơ',
                            { label: 'HĐTD trang 1', colspan: 2 },
                            { label: 'HĐTD trang 2', colspan: 2 },
                            { label: 'HĐTD trang 3', colspan: 2 },
                            { label: 'HĐTD trang 4', colspan: 2 },
                            ////////{ label: 'HĐTD trang 5', colspan: 2 },
                            ////////{ label: 'HĐTD trang 6', colspan: 2 },
                            { label: 'Hình biên bản xác nhận', colspan: 2 },
                            { label: 'Ảnh khách hàng cầm máy', colspan: 2 },
                        ]
                    ],
                    columns: [
                        { data: "MaXacNhan", type: 'text', readOnly: true, className: 'htCenter', width: 100 },
                        { data: "SoHopDong", type: 'text', readOnly: true, className: 'htCenter', width: 100 },
                        { data: "SoSO", type: 'text', readOnly: true, className: 'htCenter', width: 150 },
                        { data: "UserName", type: 'text', readOnly: true, className: 'htCenter', width: 200 },
                        { data: "appr_HDTD1", type: 'checkbox', renderer: CheckBoxRenderer },
                        { data: "url_HDTD1", type: 'text', readOnly: true, className: 'htCenter', width: 100, renderer: ImageRenderer },
                        { data: "appr_HDTD2", type: 'checkbox', renderer: CheckBoxRenderer },
                        { data: "url_HDTD2", type: 'text', readOnly: true, className: 'htCenter', width: 100, renderer: ImageRenderer },
                        { data: "appr_HDTD3", type: 'checkbox', renderer: CheckBoxRenderer },
                        { data: "url_HDTD3", type: 'text', readOnly: true, className: 'htCenter', width: 100, renderer: ImageRenderer },
                        { data: "appr_HDTD4", type: 'checkbox', renderer: CheckBoxRenderer },
                        { data: "url_HDTD4", type: 'text', readOnly: true, className: 'htCenter', width: 100, renderer: ImageRenderer },
                        ////////{ data: "appr_HDTD5", type:'checkbox', renderer: CheckBoxRenderer},
                        ////////{ data: "url_HDTD5", type:'text',readOnly: true, className: 'htCenter', width: 100,renderer: ImageRenderer},
                        ////////{ data: "appr_HDTD6", type:'checkbox', renderer: CheckBoxRenderer},
                        ////////{ data: "url_HDTD6", type:'text',readOnly: true, className: 'htCenter', width: 100,renderer: ImageRenderer},
                        { data: "appr_BienBanXacNhan", type: 'checkbox', renderer: CheckBoxRenderer },
                        { data: "url_BienBanXacNhan", type: 'text', readOnly: true, className: 'htCenter', width: 100, renderer: ImageRenderer },
                        { data: "appr_AnhKhachHang", type: 'checkbox', renderer: CheckBoxRenderer },
                        { data: "url_AnhKhachHang", type: 'text', readOnly: true, className: 'htCenter', width: 100, renderer: ImageRenderer },
                    ],
                };
            };

            hot = new Handsontable(container, setting_222());
            hot.render();

            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot === undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null && item.Id != 0;
                });
                //▼ Edit - TuanNA89 - 06/01/2019 - Fix loại CL 222
                if (confirm("Những trường hình ảnh bạn không tick chọn hệ thống sẽ default là không duyệt. Bạn có muốn tiếp tục duyệt calllog?")) {
                    $('#myModalWatting').modal('show');
                    var message = $("#Message").val();
                    $('#Details').val(JSON.stringify(myData));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Complete");
                    form.submit();
                }
                //▲ Edit - TuanNA89 - 06/01/2019 - Fix loại CL 222
            });
        });
    };
    //▲ Add - TuanNA89 - 26/11/2019 - Calllog Duyệt hình ảnh chứng từ hồ sơ Mirae - Loại 222

    function contruct_223() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var isReadonlyData = true, allowApprove = false;
            var dataShop_223 = [], arrNameShop_223 = [];

            function endFile(name) {
                var extension = name.split('.').pop().toLowerCase();
                if (extension === 'jpg' || extension === 'png' || extension === 'gif' || extension === 'jpeg') {
                    return 1;
                }
                else if ($.inArray(extension, ['xls', 'xlsx']) != -1) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                //td.className = 'htMiddle';
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                td.innerHTML = escaped;
                td.style.textAlign = 'left';
                return td;
            }
            function DefaultValueStringEmpty(Value, Type) {
                if (Type == 'string')
                    return (!!Value) ? Value : '';
                else if (Type == 'number')
                    return (!isNaN(Value)) ? Value : 0;
            };
            function convertStringToLink(strUrl) {
                return '<a href="' + strUrl + '" target="_blank" class="renderlink">' + strUrl + '</a>';
            }
            function convertStringToImg(strUrl) {
                return '<a href="' + strUrl + '" target="_blank" class="renderlink"><img class="IMG" src="' + strUrl + '"height="42" width="42"></a>';
            }
            function onChange(changes, source) {
                var instance = this;
                if (!changes || source == 'not') {
                    return;
                }
                changes.forEach(function (change) {
                    var row = change[0];
                    var col = change[1];
                    var oldValue = change[2];
                    var newValue = change[3];
                    var cellProperties, options;
                    if (oldValue != newValue) {
                        hot.setDataAtRowProp(row, 'isChanged', 1, 'not');

                        if (col == 'LinkTaiFileInAn') {
                            var arrlinkTaiFileInAn = [], convertlinkTaiFileInAn = [],
                                linkTaiFileInAn = '';
                            linkTaiFileInAn = newValue;
                            arrlinkTaiFileInAn = linkTaiFileInAn.split(',');
                            $.each(arrlinkTaiFileInAn, function (index, item) {
                                convertlinkTaiFileInAn.push(convertStringToLink(item));
                            });
                            var linkView = (!convertlinkTaiFileInAn) ? '' : convertlinkTaiFileInAn.join('<br>');
                            hot.setDataAtRowProp(row, 'LinkView', linkView, 'not');
                        }
                        else if (col == 'DonGia' || col == 'SoLuong') {
                            var dongia = 0;
                            var soluong = 0;
                            var thanhtien = 0;

                            dongia = (col == 'DonGia') ? parseFloat(newValue) : parseFloat(hot.getDataAtRowProp(row, 'DonGia'));
                            soluong = (col == 'SoLuong') ? parseFloat(newValue) : parseFloat(hot.getDataAtRowProp(row, 'SoLuong'));
                            thanhtien = dongia * soluong;
                            hot.setDataAtRowProp(row, 'ThanhTien', thanhtien, 'not');
                        }
                    }
                });
            }
            function checkDuplicateData(arrData) {
                console.log('checkDuplicateData.arrData', arrData);
                var result = "";
                var Dups = {};
                $.each(arrData, function (index, item) {
                    if (item.Product && item.SoLuong) {
                        var itemArr = (DefaultValueStringEmpty(item.ShopCode, 'string'))
                            + '|' + (DefaultValueStringEmpty(item.LoaiInAn, 'string'))
                            + '|' + (DefaultValueStringEmpty(item.NoiDung, 'string'))
                            + '|' + (DefaultValueStringEmpty(item.ChatLieu, 'string'))
                            + '|' + (DefaultValueStringEmpty(item.Width, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.Height, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.SoLuong, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.DienTich, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.DonGia, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.ThanhTien, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.LinkTaiFileInAn, 'string'));

                        Dups[itemArr] = Dups[itemArr] || [];
                        Dups[itemArr].push(index + 1);
                    }
                });
                console.log('Dups', Dups);
                for (let name in Dups) {
                    if (Dups[name].length > 1)
                        result = Dups[name];
                }
                if (result.length > 0) {
                    result = 'Dữ liệu dòng ' + result + ' bị trùng. Vui lòng kiểm tra lại!'
                }
                else result = '';

                console.log('checkDuplicateData.result', result);
                return result;
            }

            var dataHandsontable = [];

            dataHandsontable = respone;
            console.log(permissons);
            $.each(dataHandsontable, function (index, item) {
                if (item.LinkTaiFileInAn) {
                    var arrLink = [], arrLinkConvert = [], strLink = '';
                    arrLink = item.LinkTaiFileInAn.split(',');
                    $.each(arrLink, function (index1, item1) {
                        arrLinkConvert.push(convertStringToLink(item1));
                    });
                    item.LinkView = (!arrLinkConvert) ? '' : arrLinkConvert.join('<br>');
                }
                if (item.Url) {
                    var arrLink = [], arrLinkConvert = [], strLink = '';
                    arrLink = item.Url.split(',');
                    $.each(arrLink, function (index1, item1) {
                        arrLinkConvert.push(convertStringToImg(item.Domain + item1));
                    });
                    item.ViewUpload = (!arrLinkConvert) ? '' : arrLinkConvert.join('<br>');
                }
            });

            if (CL.Status < 4) {
                if ((permissons.indexOf("assigner") > -1) || (permissons.indexOf("groupAssigner") > -1)) {
                    $('#form-Approved').show();
                    isReadonlyData = false;
                    allowApprove = true;
                }
                else if (permissons.indexOf("sender") > -1) {
                    isReadonlyData = false;
                }
                //dataHandsontable[0]['Sender'])

            }
            $('#btn-Approved-All').click(function () {
                var data = hot.getSettings().data;

                var checkDuyetAll = ($("input[id='btn-Approved-All']:checked").length > 0) ? 1 : 0;
                console.log($("input[id='btn-Approved-All']:checked"))
                if (checkDuyetAll > 0) {
                    $.each(data, function (index, item) {
                        item.TinhTrangDuyet = 1;
                        item.Duyet = 1;
                        item.KhongDuyet = 0;
                    });
                    $("#btn-Approved-Remove").prop("checked", false);
                    $('#btn-Approved-Remove').closest('span').removeClass();
                    hot.loadData(data);
                }
            });
            $('#btn-Approved-Remove').click(function () {
                var data = hot.getSettings().data;

                var checkDuyetAll = ($("input[id='btn-Approved-Remove']:checked").length > 0) ? 1 : 0;
                console.log($("input[id='btn-Approved-Remove']:checked"))
                if (checkDuyetAll > 0) {
                    $.each(data, function (index, item) {
                        item.TinhTrangDuyet = 0;
                        item.Duyet = 0;
                        item.KhongDuyet = 1;
                    });
                    $("#btn-Approved-All").prop("checked", false);
                    $('#btn-Approved-All').closest('span').removeClass();
                    hot.loadData(data);
                }
            });

            var setting = function () {
                return {
                    data: dataHandsontable,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    stretchH: 'all',
                    currentColClassName: 'currentCol',
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 8,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minRows: 1,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: true,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    //noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    colHeaders: function (col) {
                        switch (col) {
                            case 0: return '<label class="radio">Duyệt</label>';
                            case 1: return '<label class="radio">Từ chối</label>';
                            case 2: return '<label class="radio">Tên shop</label>';
                            case 3: return '<label class="radio">Loại in ấn</label>';
                            case 4: return '<label class="radio">Nội dung</label>';
                            case 5: return '<label class="radio">Chất liệu</label>';
                            case 6: return '<label class="radio">Kích thước<br>(Dài-Ngang)cm</label>';
                            case 7: return '<label class="radio">Kích thước<br>(Rộng-Cao)cm</label>';
                            case 8: return '<label class="radio">Diện tích (m2)</label>';
                            case 9: return '<label class="radio">Đơn giá</label>';
                            case 10: return '<label class="radio">Số lượng</label>';
                            case 11: return '<label class="radio">Thành tiền</label>';
                            case 12: return '<label class="radio">Link tải file in ấn</label>';
                            case 13: return '<label class="radio">Xem Link</label>';
                            case 14: return '<label class="radio">Ghi chú</label>';
                        }
                    },
                    columns: [
                        {
                            data: 'Duyet', readOnly: true, width: 130, className: 'htCenter htMiddle',
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                p_td.className = 'htMiddle';
                                isChecked = '';
                                var isDisable;
                                if (p_Value == 1) {
                                    isChecked = 'checked';
                                }
                                else {
                                    isChecked = '';
                                }
                                if (CL.StepNo == 1 && CL.Status < 4 && allowApprove) isDisable = '';
                                else isDisable = 'disabled';

                                var $button2 = $('<label class="radio"><input type="radio" name="approve' + p_Row + '" value="1" ' + isChecked + ' ' + isDisable + ' > Duyệt</label>');
                                $button2.click(function () {
                                    hot.getSettings().data[p_Row]['TinhTrangDuyet'] = 1;
                                    hot.getSettings().data[p_Row]['Duyet'] = 1;
                                    hot.getSettings().data[p_Row]['KhongDuyet'] = 0;
                                    $("#btn-Approved-All").prop("checked", false);
                                    $('#btn-Approved-All').closest('span').removeClass();
                                    $("#btn-Approved-Remove").prop("checked", false);
                                    $('#btn-Approved-Remove').closest('span').removeClass();
                                });
                                $(p_td).empty().append($button2);
                            }
                        },
                        {
                            data: 'KhongDuyet', readOnly: true, width: 130, className: 'htCenter htMiddle',
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                p_td.className = 'htMiddle';
                                isChecked = '';
                                var isDisable;
                                if (p_Value == 1) {
                                    isChecked = 'checked';
                                }
                                else {
                                    isChecked = '';
                                }
                                if (CL.StepNo == 1 && CL.Status < 4 && allowApprove) isDisable = '';
                                else isDisable = 'disabled';

                                var $button1 = $('<label class="radio align-middle"><input type="radio" name="approve' + p_Row + '" value="0" ' + isChecked + ' ' + isDisable + ' > Từ chối</label>');
                                $button1.click(function () {
                                    hot.getSettings().data[p_Row]['TinhTrangDuyet'] = 0;
                                    hot.getSettings().data[p_Row]['Duyet'] = 0;
                                    hot.getSettings().data[p_Row]['KhongDuyet'] = 1;
                                    $("#btn-Approved-All").prop("checked", false);
                                    $('#btn-Approved-All').closest('span').removeClass();
                                    $("#btn-Approved-Remove").prop("checked", false);
                                    $('#btn-Approved-Remove').closest('span').removeClass();
                                });
                                $(p_td).empty().append($button1);
                            }
                        },
                        { data: "TenShop", type: 'text', width: 180, readOnly: true },
                        { data: "LoaiInAn", type: 'text', width: 100, readOnly: isReadonlyData },
                        { data: "NoiDung", type: 'text', width: 100, readOnly: isReadonlyData },
                        { data: "ChatLieu", type: 'text', width: 100, readOnly: isReadonlyData },
                        { data: "Width", type: 'numeric', format: '0,0', width: 100, readOnly: isReadonlyData, className: 'htCenter', },
                        { data: "Height", type: 'numeric', format: '0,0', width: 100, readOnly: isReadonlyData, className: 'htCenter', },
                        { data: "DienTich", type: 'numeric', format: '0,0', width: 100, readOnly: isReadonlyData, className: 'htCenter', },
                        { data: "DonGia", type: 'numeric', format: '0,0', width: 100, readOnly: isReadonlyData, className: 'htCenter', },
                        { data: "SoLuong", type: 'numeric', format: '0,0', width: 80, readOnly: isReadonlyData, className: 'htCenter', },
                        { data: "ThanhTien", type: 'numeric', format: '0,0', width: 100, readOnly: true, className: 'htCenter', },
                        { data: "LinkTaiFileInAn", type: 'text', width: 200, wordWrap: true, readOnly: isReadonlyData },
                        { data: "LinkView", type: 'text', readOnly: true, renderer: safeHtmlRenderer },
                        { data: "GhiChu", type: 'text', width: 100, readOnly: isReadonlyData },
                    ],
                    afterChange: onChange,
                };
            }

            hot = new Handsontable(container, setting());
            hot.render();
            hot.loadData(dataHandsontable);

            $btnComment.on('click', function () {
                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                }
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot === undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null && item.Id != 0 && item.isChanged == 1;
                });
                if (CL.StepNo == 1 && isReadonlyData == false) {
                    var l_UniqueData = [], l_DuplicateData = [];
                    var error_Msg = '';
                    error_Msg = checkDuplicateData(myData);

                    if (!error_Msg) {
                        myData = $.grep(hot.getSettings().data, function (item, index) {
                            return (!jQuery.isEmptyObject(item)) && (item.ShopCode);
                        });

                        if (myData.length == 0) {
                            error_Msg = 'Dữ liệu chưa đầy đủ! Vui lòng nhập đầy đủ dữ liệu !';
                        }
                        if (!error_Msg) {
                            $.each(myData, function (index1, item1) {
                                if (!error_Msg) {
                                    if (!DefaultValueStringEmpty(item1.LoaiInAn, 'string')) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập in ấn';
                                        return false;
                                    }
                                    else if (!DefaultValueStringEmpty(item1.NoiDung, 'string')) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập nội dung';
                                        return false;
                                    }
                                    else if (!DefaultValueStringEmpty(item1.ChatLieu, 'string')) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập chất liệu';
                                        return false;
                                    }
                                    else if (DefaultValueStringEmpty(item1.Width, 'number') <= 0) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập chiều dài';
                                        return false;
                                    }
                                    else if (DefaultValueStringEmpty(item1.Height, 'number') <= 0) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập chiều rộng';
                                        return false;
                                    }
                                    else if (DefaultValueStringEmpty(item1.SoLuong, 'number') <= 0) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập số lượng';
                                        return false;
                                    }
                                    else if (DefaultValueStringEmpty(item1.DienTich, 'number') <= 0) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập diện tích';
                                        return false;
                                    }
                                    else if (DefaultValueStringEmpty(item1.DonGia, 'number') <= 0) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập đơn giá';
                                        return false;
                                    }
                                    else if (DefaultValueStringEmpty(item1.ThanhTien, 'number') <= 0) {
                                        error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập thành tiền';
                                        return false;
                                    }

                                    if (error_Msg) return false;
                                }
                            });
                        }
                    }

                    if (error_Msg) {
                        XFunction.RenderMessage('error', error_Msg);
                        return;
                    }
                }
                else {
                    myData = [];
                }
                console.log(myData);

                $('#myModalWatting').modal('show');
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot == undefined ? "" : $.grep(hot.getSettings().data, function (item, index) {
                    return item.Id != undefined && item.Id != '' && item.Id != null && item.Id != 0;
                });

                var l_UniqueData = [], l_DuplicateData = [];
                var error_Msg = '';
                error_Msg = checkDuplicateData(myData);

                if (!error_Msg) {
                    myData = $.grep(hot.getSettings().data, function (item, index) {
                        return (!jQuery.isEmptyObject(item)) && (item.ShopCode);
                    });

                    if (myData.length == 0) {
                        error_Msg = 'Dữ liệu chưa đầy đủ! Vui lòng nhập đầy đủ dữ liệu !';
                    }
                    if (!error_Msg) {
                        $.each(myData, function (index1, item1) {
                            if (!error_Msg) {
                                if (item1.TinhTrangDuyet == null) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa chọn Duyệt/Không duyệt';
                                    return false;
                                }
                                else if (!DefaultValueStringEmpty(item1.LoaiInAn, 'string')) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập in ấn';
                                    return false;
                                }
                                else if (!DefaultValueStringEmpty(item1.NoiDung, 'string')) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập nội dung';
                                    return false;
                                }
                                else if (!DefaultValueStringEmpty(item1.ChatLieu, 'string')) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập chất liệu';
                                    return false;
                                }
                                else if (DefaultValueStringEmpty(item1.Width, 'number') <= 0) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập chiều dài';
                                    return false;
                                }
                                else if (DefaultValueStringEmpty(item1.Height, 'number') <= 0) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập chiều rộng';
                                    return false;
                                }
                                else if (DefaultValueStringEmpty(item1.SoLuong, 'number') <= 0) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập số lượng';
                                    return false;
                                }
                                else if (DefaultValueStringEmpty(item1.DienTich, 'number') <= 0) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập diện tích';
                                    return false;
                                }
                                else if (DefaultValueStringEmpty(item1.DonGia, 'number') <= 0) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập đơn giá';
                                    return false;
                                }
                                else if (DefaultValueStringEmpty(item1.ThanhTien, 'number') <= 0) {
                                    error_Msg = 'Dòng ' + (index1 + 1) + ' chưa nhập thành tiền';
                                    return false;
                                }

                                if (error_Msg) return false;
                            }
                        });
                    }
                }

                if (error_Msg) {
                    XFunction.RenderMessage('error', error_Msg);
                    return;
                }

                $('#myModalWatting').modal('show');
                var message = $("#Message").val();
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });

        });
    };
    function contruct_224() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var isReadonlyData = true;
            function endFile(name) {
                var extension = name.split('.').pop().toLowerCase();
                if (extension === 'jpg' || extension === 'png' || extension === 'gif' || extension === 'jpeg') {
                    return 1;
                }
                else if ($.inArray(extension, ['xls', 'xlsx']) != -1) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
            function strip_tags(input, allowed) {
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
                    commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;

                // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
                allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');

                return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            }
            function safeHtmlRenderer(instance, td, row, col, prop, value, cellProperties) {
                td.className = '';
                var escaped = Handsontable.helper.stringify(value);
                escaped = strip_tags(escaped, '<em><b><strong><a><big><i><br><img><button><div>');
                td.innerHTML = escaped;
                td.style.textAlign = 'left';
                return td;
            }
            function DefaultValueStringEmpty(Value, Type) {
                if (Type == 'string')
                    return (!!Value) ? Value : '';
                else if (Type == 'number')
                    return (!isNaN(Value)) ? Value : 0;
            };
            function convertStringToLink(strUrl) {
                return '<a href="' + strUrl + '" target="_blank" class="renderlink">' + strUrl + '</a>';
            }
            function convertStringToImg(strUrl) {
                return '<a href="' + strUrl + '" target="_blank" class="renderlink"><img class="IMG" src="' + strUrl + '"height="42" width="42"></a>';
            }
            function onChange(changes, source) {
                if (!changes) {
                    return;
                }
                var instance = this;
                changes.forEach(function (change) {
                    var row = change[0];
                    var col = change[1];
                    var oldValue = change[2];
                    var newValue = change[3];
                    var cellProperties, options;
                    if (oldValue != newValue) {
                        instance.getSettings().data[row]['isChanged'] = 1;

                        if (col == 'LinkTaiFileInAn') {
                            var arrlinkTaiFileInAn = [], convertlinkTaiFileInAn = [],
                                linkTaiFileInAn = '';
                            linkTaiFileInAn = newValue;
                            arrlinkTaiFileInAn = linkTaiFileInAn.split(',');
                            $.each(arrlinkTaiFileInAn, function (index, item) {
                                convertlinkTaiFileInAn.push(convertStringToLink(item));
                            });
                            console.log(convertlinkTaiFileInAn);
                            instance.getSettings().data[row]['LinkView'] = (!convertlinkTaiFileInAn) ? '' : convertlinkTaiFileInAn.join(',');
                            instance.render();
                        }
                    }
                });
            }
            function checkDuplicateData(arrData) {
                console.log('checkDuplicateData.arrData', arrData);
                var result = "";
                var Dups = {};
                $.each(arrData, function (index, item) {
                    if (item.Product && item.SoLuong) {
                        var itemArr = (DefaultValueStringEmpty(item.ShopCode, 'string'))
                            + '|' + (DefaultValueStringEmpty(item.LoaiInAn, 'string'))
                            + '|' + (DefaultValueStringEmpty(item.NoiDung, 'string'))
                            + '|' + (DefaultValueStringEmpty(item.ChatLieu, 'string'))
                            + '|' + (DefaultValueStringEmpty(item.Width, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.Height, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.SoLuong, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.DienTich, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.DonGia, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.ThanhTien, 'number'))
                            + '|' + (DefaultValueStringEmpty(item.LinkTaiFileInAn, 'string'));

                        Dups[itemArr] = Dups[itemArr] || [];
                        Dups[itemArr].push(index + 1);
                    }
                });
                console.log('Dups', Dups);
                for (let name in Dups) {
                    if (Dups[name].length > 1)
                        result = Dups[name];
                }
                if (result.length > 0) {
                    result = 'Dữ liệu dòng ' + result + ' bị trùng. Vui lòng kiểm tra lại!'
                }
                else result = '';

                console.log('checkDuplicateData.result', result);
                return result;
            }
            var actionRendererUploadPicture = function (instance, td, row, col, prop, value, cellProperties) {
                $btnupload = $('<div class="fileUpload btn"><span id="s218_' + row + '" class="fa fa-cloud-upload"></span><input type="file" multiple id="FileUpload224_' + row + '" class="upload" /></div>');
                var buttongId = 'FileUpload224_' + row;
                var error = false;
                var index_Img = 0;
                $btnupload.click(function () {
                    $('#' + buttongId).on('change', function () {
                        var selectedFiles = $('#' + buttongId)[0].files;
                        var objImgs = {};
                        objImgs['Row'] = row;
                        var dataItemImg = [];
                        var ListImg = [];
                        $.each(selectedFiles, function (indexFile, itemFile) {
                            var l__SelectedFile_Name = itemFile.name;
                            var inValid = /\s/;
                            var str = l__SelectedFile_Name.replace('.', '');
                            if (/^[\w ]*$/.test(str) === false) {
                                alert('Cảnh báo : Tên file phải không dấu, không khoảng trắng và không có kí tự đặc biệt!');
                                $('#' + buttongId).val('');
                                error = true;
                                return false;
                            }
                            else if (endFile(l__SelectedFile_Name) !== 1) {
                                $('#' + buttongId).val('')
                                XFunction.RenderMessage("error", "File hình ảnh phải có định dạng đuôi ['jpeg', 'jpg', 'png', 'gif', 'bmp']!");
                                error = true;
                                return false;
                            }
                            else if (inValid.test(l__SelectedFile_Name)) {
                                XFunction.RenderMessage("error", "Cảnh báo : Tên file hình không chứa khoảng trắng");
                                $('#' + buttongId).val('');
                                error = true;
                                return false;
                            }
                            else {
                                var l__SelectedFile_Ext = (l__SelectedFile_Name != '') ? l__SelectedFile_Name.split('.')[1].toLowerCase() : '';
                                var tmppath = URL.createObjectURL(itemFile);
                                itemFile.fileName = 'file-' + index_Img;
                                index_Img++;
                                dataItemImg.push(itemFile);
                                var strHTML = '<a href="' + tmppath + '" target="_blank" data-id="' + row + '" data-value="' + itemFile.name + '" ><img class="IMG" src="' + tmppath + '"height="42" width="42"></a>';
                                ListImg.push(strHTML);
                            }
                        });
                        if (error) return;
                        if (dataItemImg) {
                            objImgs["ListData"] = dataItemImg;
                            instance.getSettings().data[row]['FileUpload'] = objImgs;
                            instance.render();
                            if (ListImg) {
                                hot.setDataAtRowProp(row, 'ViewUpload', ListImg.join('|'));
                            }
                        }
                    });
                })
                $(td).empty().append($btnupload);
            };

            var dataHandsontable = [];

            dataHandsontable = respone;

            $.each(dataHandsontable, function (index, item) {
                if (item.LinkTaiFileInAn) {
                    var arrLink = [], arrLinkConvert = [], strLink = '';
                    arrLink = item.LinkTaiFileInAn.split(',');
                    $.each(arrLink, function (index1, item1) {
                        arrLinkConvert.push(convertStringToLink(item1));
                    });
                    item.LinkView = (!arrLinkConvert) ? '' : arrLinkConvert.join('<br>');
                }
                if (item.Url) {
                    var arrLink = [], arrLinkConvert = [], strLink = '';
                    arrLink = item.Url.split(',');
                    $.each(arrLink, function (index1, item1) {
                        arrLinkConvert.push(convertStringToImg(item.Domain + item1));
                    });
                    item.ViewUpload = (!arrLinkConvert) ? '' : arrLinkConvert.join('<br>');
                }
            });

            var setting = function () {
                return {
                    data: dataHandsontable,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: true,
                    columnSorting: false,
                    //colWidths: 'undefined',
                    currentColClassName: 'currentCol',
                    fixedColumnsLeft: 0,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 8,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: true,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minRows: 1,
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: true,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    mergeCells: false,
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    colHeaders: function (col) {
                        switch (col) {
                            case 0: return '<label class="radio">Tên shop</label>';
                            case 1: return '<label class="radio">Loại in ấn</label>';
                            case 2: return '<label class="radio">Nội dung</label>';
                            case 3: return '<label class="radio">Chất liệu</label>';
                            case 4: return '<label class="radio">Kích thước<br>(Dài-Ngang)cm</label>';
                            case 5: return '<label class="radio">Kích thước<br>(Rộng-Cao)cm</label>';
                            case 6: return '<label class="radio">Diện tích (m2)</label>';
                            case 7: return '<label class="radio">Đơn giá</label>';
                            case 8: return '<label class="radio">Số lượng</label>';
                            case 9: return '<label class="radio">Thành tiền</label>';
                            case 10: return '<label class="radio">Link tải file in ấn</label>';
                            case 11: return '<label class="radio">Ghi chú</label>';
                            case 12: return '<label class="radio">Đính kèm<br> hình ảnh</label>';
                            case 13: return '<label class="radio">Hình ảnh<br> đính kèm</label>';
                        }
                    },
                    columns: [
                        { data: "TenShop", type: 'text', width: 180, readOnly: true },
                        { data: "LoaiInAn", type: 'text', width: 100, readOnly: true },
                        { data: "NoiDung", type: 'text', width: 100, readOnly: true },
                        { data: "ChatLieu", type: 'text', width: 100, readOnly: true },
                        { data: "Width", type: 'numeric', format: '0,0', width: 100, readOnly: true, className: 'htCenter', },
                        { data: "Height", type: 'numeric', format: '0,0', width: 100, readOnly: true, className: 'htCenter', },
                        { data: "DienTich", type: 'numeric', format: '0,0', width: 100, readOnly: true, className: 'htCenter', },
                        { data: "DonGia", type: 'numeric', format: '0,0', width: 100, readOnly: true, className: 'htCenter', },
                        { data: "SoLuong", type: 'numeric', format: '0,0', width: 80, readOnly: true, className: 'htCenter', },
                        { data: "ThanhTien", type: 'numeric', format: '0,0', width: 100, readOnly: true, className: 'htCenter', },
                        { data: "LinkView", type: 'text', readOnly: true, renderer: safeHtmlRenderer },
                        { data: "GhiChu", type: 'text', width: 100, readOnly: true },
                        { data: "FileUpload", type: 'text', width: 100, readOnly: true, renderer: actionRendererUploadPicture },
                        { data: "ViewUpload", type: 'text', width: 100, readOnly: true, renderer: safeHtmlRenderer },
                    ],
                };
            }

            hot = new Handsontable(container, setting());
            hot.render();

            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :(");
                    return false;
                } else {
                    $('#myModalWatting').modal('show');
                    $('#Details').val(JSON.stringify([]));
                    $('#DetailsCc').val(JSON.stringify(myDataCc));
                    var form = $("form#form-detail");
                    form.attr("action", "/Requests/Conversation");
                    form.submit();
                }
            });
            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSettings().data, function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot === undefined ? [] : $.grep(hot.getSettings().data, function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null && item.Id != 0;
                });

                console.log(myData);
                var msgError = '';
                if (myData.length == 0) {
                    msgError = 'Chi tiết yêu cầu bị mất. Không thể hoàn tất';
                }
                else {
                    $.each(myData, function (index, item) {
                        console.log(item.ViewUpload)
                        if (!item.ViewUpload || item.ViewUpload.length <= 0) {
                            msgError = 'Dòng ' + (index + 1) + ' chưa upload hình';
                            return false;
                        }
                    });
                }
                console.log(msgError);
                if (msgError.length > 0) {
                    XFunction.RenderMessage("error", msgError);
                    return false;
                }
                $('#myModalWatting').modal('show');
                data = new FormData();
                for (var i = 0; i < myData.length; i++) {
                    var DetailId = myData[i].Id;
                    var Imgs = myData[i].FileUpload.ListData;
                    for (var j = 0; j < Imgs.length; j++) {
                        data.append(DetailId + "_" + j, Imgs[j]);
                    }
                }
                data.append("RequestId", $('#RequestId').val());
                $.ajax({
                    type: "POST",
                    url: "/Requests/UploadImages_Type224",
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        if (result.error === 0) {
                            $('#Details').val(JSON.stringify([]));
                            $('#DetailsCc').val(JSON.stringify(myDataCc));
                            var form = $("form#form-detail");
                            form.attr("action", "/Requests/Complete");
                            form.submit();
                        }
                        else {
                            $('#myModalWatting').modal('hide');
                            XFunction.RenderMessage('error', 'Lưu file không thành công');
                            return;
                        }
                    },
                    error: function () {
                        $('#myModalWatting').modal('hide');
                        XFunction.RenderMessage('error', 'Lỗi hoàn tất yêu cầu');
                        return;
                        //var win = window.open('/Home', '_self');
                    }
                });
            });
        });
    };

    function contruct_225() {
        //▼	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var dataHandsontable = respone;
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false, isOldStepAssigner: false, isGroupOldStepAssigner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
                if (item == 'oldStepAssigner')
                    permisstion.isOldStepAssigner = true;
                if (item == 'groupOldStepAssigner')
                    permisstion.isGroupOldStepAssigner = true;
            });
            var l__Permission = { Is_Assiner_Step1: false, Is_Allow_XemNVVP: false, Is_Allow_XemNoiDungGiaiTrinh: false };
            if (permisstion.isAssiner == true || permisstion.isGroupAssiner == true) {
                switch (CL.StepNo) {
                    case 1:
                        if (CL.Status < 4) {
                            l__Permission.Is_Assiner_Step1 = true;
                        }
                        l__Permission.Is_Allow_XemNVVP = true;
                        l__Permission.Is_Allow_XemNoiDungGiaiTrinh = true;
                        break;
                    default:
                        break;
                }
            }

            var l__Data__LoaiLoi = [], l__Data__LoaiLoi__Name = [''];
            var f__Get__LoaiLoi = function () {
                $.ajax({
                    async: false,
                    url: "/Requests/Details__XNVPQuy__LayLoaiLoi",
                    type: "GET",
                    data: null,
                    error: function () {
                        XFunction.RenderMessage("error", "Lỗi: /Requests/Details__XNVPQuy__LayLoaiLoi!");
                    },
                    success: function (p_ActionResult) {
                        if (!!p_ActionResult && p_ActionResult.length > 0) {
                            p_ActionResult.forEach(function (p_Item) {
                                l__Data__LoaiLoi.push({
                                    Code: p_Item.Code,
                                    Name: p_Item.Name
                                });
                                l__Data__LoaiLoi__Name.push(p_Item.Name);
                            });
                        }
                    }
                });
            };
            f__Get__LoaiLoi();

            var l__ColHeaders__Arr = [
                ////'Id', 
                'XNLoi_CoLoi', 'XNLoi_KhongLoi', 'NVViPham', 'SoTienTruyThu', 'LoaiLoi', 'SoTienQuyTrenHT', 'TienTrenSoPhuNH',
                'NguyenNhanChenhLech', 'NoiDungGiaiTrinh', 'HuongXLCuaKTHO', 'SoTienChoXL', 'SoSO', 'HinhAnhPhieuNopTien',
                'GhiChu'
            ];
            var setting = function () {
                var l__Data__NVShop = [], l__Data__NVViPham = [];
                var f__Load__Cbo__NVShop = function (p__ShopCodeInside) {
                    l__Data__NVShop = [];
                    if (!!p__ShopCodeInside) {
                        $.ajax({
                            async: false,
                            url: "/Requests/Details__XNVPQuy__LayNVShop",
                            type: "GET",
                            data: { MaShopInside: p__ShopCodeInside },
                            error: function () {
                                XFunction.RenderMessage("error", "Lỗi: /Requests/Details__XNVPQuy__LayNVShop!");
                            },
                            success: function (p_ActionResult) {
                                if (!!p_ActionResult && p_ActionResult.length > 0) {
                                    l__Data__NVShop = p_ActionResult;
                                }
                            }
                        });
                    }
                    $('#cbo__225__NVShop').multiselect({
                        nonSelectedText: 'Chọn nhân viên',
                        enableCaseInsensitiveFiltering: true,
                        includeSelectAllOption: true,
                        selectAllText: 'Tất cả',
                        buttonWidth: '100%',
                        maxHeight: 300,
                    });
                    $('#cbo__225__NVShop').multiselect('dataprovider', l__Data__NVShop);
                }
                var f__Load__Tbl__NVViPham = function (p__Data__NVViPham) {
                    if (p__Data__NVViPham.length > 0) {
                        $('#tbl__225__NVViPham').DataTable({
                            data: p__Data__NVViPham,
                            columns: [
                                { data: 'MaNV' },
                                { data: 'TenNV' },
                                { data: 'IdRemove' }
                            ],
                            destroy: true,
                            //searching: false,
                            //paging: false
                        });
                    }
                    else {
                        $('#tbl__225__NVViPham').DataTable({
                            data: [],
                            columns: [
                                { data: 'MaNV' },
                                { data: 'TenNV' },
                                { data: 'IdRemove' }
                            ],
                            destroy: true,
                            //searching: false,
                            //paging: false
                        });
                    }
                }

                $(document).on('click', '.cls__Remove__NVVP', function () {
                    if (l__Permission.Is_Assiner_Step1) {
                        var l__RowIndex = $(this).parents('tr');
                        if (!!l__RowIndex) {
                            var l__DataTable = $('#tbl__225__NVViPham').DataTable();
                            l__DataTable.row(l__RowIndex).remove().draw();
                        }
                    }
                    else {
                        XFunction.RenderMessage('error', 'User không có quyền thao tác này!');
                    }
                });

                $('#btn__225__ChonNV').on('click', function () {
                    if (l__Permission.Is_Assiner_Step1) {
                        var l__ChonNV__NVShop = $('#cbo__225__NVShop').val();
                        $.each(l__ChonNV__NVShop, function (p__Index, p__Item) {
                            var l__TrungNV = $.grep(l__Data__NVViPham, function (p__Item1, p__Index1) {
                                return p__Item1.MaNV == p__Item;
                            });
                            if (!!l__TrungNV && l__TrungNV.length > 0) {
                                //  Trùng => Do nothing
                            }
                            else {
                                //  Không trùng => Add
                                var l__TenNV = '';
                                var l__NVShop = $.grep(l__Data__NVShop, function (p__Item1, p__Index1) {
                                    return p__Item1.value == p__Item;
                                });
                                if (!!l__NVShop && l__NVShop.length > 0) {
                                    l__TenNV = l__NVShop[0].EmpName;
                                }
                                l__Data__NVViPham.push({ MaNV: p__Item, TenNV: l__TenNV, IdRemove: '<i style="style="color:green;font-size:20px" class="fa fa-trash cls__Remove__NVVP" aria-hidden="true"></i>' });
                            }
                        });
                        f__Load__Tbl__NVViPham(l__Data__NVViPham);
                        XFunction.RenderMessage('error', 'Vui lòng nhấn "Xác nhận" Nhân viên vi phạm!');
                    }
                    else {
                        XFunction.RenderMessage('error', 'User không có quyền thao tác này!');
                    }
                });
                $('#btn__225__Confirm').on('click', function () {
                    if (l__Permission.Is_Assiner_Step1) {
                        var l__DataTable = $('#tbl__225__NVViPham').DataTable();
                        var l__DataTable__Data = l__DataTable.rows().data();
                        var l__Data__NVViPham = [];
                        $.each(l__DataTable__Data, function (p__Index, p__Item) {
                            if (!!p__Item.MaNV) {
                                l__Data__NVViPham.push(p__Item.MaNV);
                            }
                        });
                        var l__RowIndex = $('#hid__225__RowIndex').val();
                        hot.setDataAtRowProp(l__RowIndex, 'NVViPham', l__Data__NVViPham.join('|'), 'not');
                        $('#pop__225__NVVP').modal('hide');
                    }
                    else {
                        XFunction.RenderMessage('error', 'User không có quyền thao tác này!');
                    }
                });
                $('#btn__225__Close').on('click', function () {
                    $('#pop__225__NVVP').modal('hide');
                });

                var f__renderer__checkbox = function () {
                    return function (instance, td, row, col, prop, value, cellProperties) {
                        var l__Id = instance.getDataAtRowProp(row, 'Id');
                        if (!!l__Id && l__Id > 0) {
                            cellProperties.checkedTemplate = 1;
                            cellProperties.uncheckedTemplate = 0;
                            if (!!value) {
                                value = 1;
                            }
                            else {
                                value = 0;
                            }
                            Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            if (l__Permission.Is_Assiner_Step1) {
                                cellProperties.readOnly = false;
                                td.style.background = 'lightyellow';
                            }
                        }
                        else {
                            Handsontable.renderers.TextRenderer.apply(this, arguments);
                        }
                    }
                };
                var f__renderer__numeric = function (p__AllowEdit) {
                    return function (instance, td, row, col, prop, value, cellProperties) {
                        var l__Id = instance.getDataAtRowProp(row, 'Id');
                        if (!!l__Id && l__Id > 0) {
                            Handsontable.NumericRenderer.apply(this, arguments);
                            if (p__AllowEdit) {
                                if (l__Permission.Is_Assiner_Step1) {
                                    cellProperties.readOnly = false;
                                    td.style.background = 'lightyellow';
                                }
                            }
                        }
                        else {
                            Handsontable.renderers.TextRenderer.apply(this, arguments);
                        }
                    }
                };
                var f__renderer__dropdown__LoaiLoi = function () {
                    return function (instance, td, row, col, prop, value, cellProperties) {
                        Handsontable.AutocompleteCell.renderer.apply(this, arguments);
                        if (l__Permission.Is_Assiner_Step1) {
                            cellProperties.readOnly = false;
                            td.style.background = 'lightyellow';
                        }
                    }
                };
                var f__renderer__button__NVViPham = function () {
                    return function (instance, td, row, col, prop, value, cellProperties) {
                        var l__Data = $.grep(instance.getSourceData(), function (item, index) {
                            return index == row;
                        });
                        var $button = '';
                        var l__NVViPham = l__Data[0].NVViPham;
                        if (!!l__NVViPham) {
                            $button = $('<i id="rNV_' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:green"></i>');
                        } else {
                            $button = $('<i id="rNV_' + row + '" data-value="' + row + '" class="fa  fa-comments-o" style="color:green"></i>');
                        }
                        if ($button !== '') {
                            if (l__Permission.Is_Allow_XemNVVP) {
                                $button.click(function () {
                                    f__Load__Cbo__NVShop(CL.ToShop);
                                    l__Data__NVViPham = [];
                                    if (!!l__NVViPham) {
                                        var l__NVViPham__Split = l__NVViPham.split('|');
                                        $.each(l__NVViPham__Split, function (p__Index, p__Item) {
                                            var l__MaNV = '', l__TenNV = '';
                                            var l__NV__Split = p__Item.split(' - ');
                                            if (!!l__NV__Split[0]) {
                                                l__MaNV = l__NV__Split[0];
                                                if (!!l__NV__Split[1]) {
                                                    l__TenNV = l__NV__Split[1];
                                                } else {
                                                    var l__NVShop = $.grep(l__Data__NVShop, function (p__Item1, p__Index1) {
                                                        return p__Item1.value == l__MaNV;
                                                    });
                                                    if (!!l__NVShop && l__NVShop.length > 0) {
                                                        if (!!l__NVShop[0].EmpName) {
                                                            l__TenNV = l__NVShop[0].EmpName;
                                                        }
                                                    }
                                                }
                                            }
                                            l__Data__NVViPham.push({ MaNV: l__MaNV, TenNV: l__TenNV, IdRemove: '<i style="style="color:green;font-size:20px" class="fa fa-trash cls__Remove__NVVP" aria-hidden="true"></i>' });
                                        });
                                    }
                                    f__Load__Tbl__NVViPham(l__Data__NVViPham);
                                    $('#hid__225__RowIndex').val(row);
                                    $('#pop__225__NVVP').modal('show');
                                });
                                if (l__Permission.Is_Assiner_Step1) {
                                    td.style.background = 'lightyellow';
                                }
                            } else {
                                $button.click(function () {
                                    XFunction.RenderMessage('error', 'User không có quyền thao tác này!');
                                });
                            }
                        }
                        $(td).empty().append($button);
                    };
                };
                var f__renderer__button__NoiDungGiaiTrinh = function () {
                    return function (instance, td, row, col, prop, value, cellProperties) {
                        var data = $.grep(instance.getSourceData(), function (item, index) {
                            return index == row;
                        });
                        var $button = $('<i id="r' + row + '" data-value="' + row + '" class="fa fa-comments" style="color:green"></i>');
                        if ($button !== '') {
                            if (l__Permission.Is_Allow_XemNoiDungGiaiTrinh) {
                                $button.click(function () {
                                    $('#MessageGiaiTrinh').hide(); // Ẩn nút "Nội dung giải trình"
                                    $('#MessageGiaiTrinh').val('');
                                    $('#btnSendGiaiTrinh').hide(); // Ẩn nút "Gửi" giải trình
                                    $('#modalBodyGiaitrinh').empty();
                                    var l__Quy__ReqId = hot.getDataAtRowProp($(this).attr('data-value'), 'Quy__ReqId');
                                    if (l__Quy__ReqId != null && l__Quy__ReqId !== '' && l__Quy__ReqId !== undefined) {
                                        $.get('/Requests/Details__XNVPQuy__LayGiaiTrinhQuy', { Quy__ReqId: l__Quy__ReqId }, function (respone) {
                                            if (respone !== undefined && respone !== '' && respone !== null) {
                                                var inner = '';
                                                $.each(respone, function (index, item) {
                                                    inner += ' <div class="timeline-comment"><div class="timeline-comment-header">' +
                                                        '<img src="/assets/images/people.png" /><p>' + item.Column1 + '</p></div>' +
                                                        ' <p class="timeline-comment-text">' + item.Message + '</p> </div>';
                                                });
                                                $('#modalBodyGiaitrinh').html(inner);
                                                $('#modalBodyGiaitrinh').show();
                                            } else {
                                                $('#modalBodyGiaitrinh').hide();
                                            }
                                            $('#modalGiaiTrinh').modal('show');
                                        });
                                    }
                                });
                            } else {
                                $button.click(function () {
                                    XFunction.RenderMessage('error', 'User không có quyền thao tác này!');
                                });
                            }
                        }
                        $(td).empty().append($button);
                    };
                };
                var f__renderer__button__HinhAnhPhieuNopTien = function () {
                    return function (instance, td, row, col, prop, value, cellProperties) {
                        var $image = '';
                        var l__HinhAnhPhieuNopTien = instance.getDataAtRowProp(row, 'HinhAnhPhieuNopTien');
                        if (!!l__HinhAnhPhieuNopTien) {
                            $image = $('<i class="fa fa-picture-o" style="cursor: pointer; color:Green;" title="Xem Hình ảnh Phiếu nộp tiền"></i>');
                            $image.click(function () {
                                $('#pop__WaitDialog').modal('show');

                                window.open(l__HinhAnhPhieuNopTien, '_blank');

                                $('#pop__WaitDialog').modal('hide');
                            });
                        }
                        $(td).empty().append(($image != '') ? ($image) : (''));
                    };
                };
                var f__renderer__text__GhiChu = function () {
                    return function (instance, td, row, col, prop, value, cellProperties) {
                        Handsontable.renderers.TextRenderer.apply(this, arguments);
                        if (l__Permission.Is_Assiner_Step1) {
                            cellProperties.readOnly = false;
                            td.style.background = 'lightyellow';
                        }
                        var l__GhiChu = instance.getDataAtRowProp(row, 'GhiChu');
                        if (!l__GhiChu) {
                            cellProperties.width = 150;
                        }
                    };
                };

                var l_ViewportColumnRenderingOffset = (!!l__ColHeaders__Arr && l__ColHeaders__Arr.length > 0) ? l__ColHeaders__Arr.length : 10;
                return {
                    //  ==========Data==========
                    data: dataHandsontable,
                    //  ==========Cols==========
                    columnHeaderHeight: 50,
                    viewportColumnRenderingOffset: l_ViewportColumnRenderingOffset, //  Thêm thuộc tính này để khỏi lệch "nestedHeaders" khi di chuyển con trỏ
                    //  ==========colHeaders==========
                    colHeaders: [
                        ////'Id', 
                        'Có<br>lỗi', 'Không<br>lỗi', 'Nhân viên<br>vi phạm', 'Số tiền<br>truy thu', 'Loại lỗi', 'Số tiền quỹ<br>trên hệ thống', 'Tiền trên<br>sổ phụ ngân hàng',
                        'Nguyên nhân<br>chênh lệch', 'Nội dung<br>giải trình', 'Hướng xử lý<br>của KTHO', 'Số tiền<br>chờ xử lý', 'Số SO hoặc<br>Số phiếu thu', 'Hình ảnh<br>Phiếu nộp tiền',
                        'Ghi<br>chú'
                    ],
                    //  ==========columns==========
                    columns: [
                        ////{ data: 'Id', type: 'text', readOnly: true },  
                        {
                            data: 'XNLoi_CoLoi', type: 'checkbox', width: 50, className: 'htCenter', readOnly: true,
                            renderer: f__renderer__checkbox()
                        },
                        {
                            data: 'XNLoi_KhongLoi', type: 'checkbox', width: 50, className: 'htCenter', readOnly: true,
                            renderer: f__renderer__checkbox()
                        },
                        {
                            data: 'NVViPham', width: 75, readOnly: true,
                            renderer: f__renderer__button__NVViPham()
                        },
                        {
                            data: 'SoTienTruyThu', type: 'numeric', width: 120, format: '0,0', readOnly: true,
                            renderer: f__renderer__numeric(true)
                        },
                        {
                            data: 'LoaiLoi', type: 'dropdown', source: l__Data__LoaiLoi__Name, width: 320, className: 'htLeft', readOnly: true,
                            renderer: f__renderer__dropdown__LoaiLoi()
                        },
                        {
                            data: 'SoTienQuyTrenHT', type: 'numeric', width: 120, format: '0,0', readOnly: true,
                            renderer: f__renderer__numeric(false)
                        },
                        {
                            data: 'TienTrenSoPhuNH', type: 'numeric', width: 120, format: '0,0', readOnly: true,
                            renderer: f__renderer__numeric(false)
                        },
                        { data: 'NguyenNhanChenhLech', type: 'text', readOnly: true },
                        {
                            data: 'NoiDungGiaiTrinh', width: 75, readOnly: true,
                            renderer: f__renderer__button__NoiDungGiaiTrinh()
                        },
                        { data: 'HuongXLCuaKTHO', type: 'text', readOnly: true },
                        {
                            data: 'SoTienChoXL', type: 'numeric', width: 120, format: '0,0', readOnly: true,
                            renderer: f__renderer__numeric(false)
                        },
                        { data: 'SoSO', type: 'text', readOnly: true },
                        {
                            data: 'HinhAnhPhieuNopTien', type: 'text', readOnly: true,
                            renderer: f__renderer__button__HinhAnhPhieuNopTien()
                        },
                        {
                            data: 'GhiChu', type: 'text', readOnly: true,
                            renderer: f__renderer__text__GhiChu()
                        },
                    ],
                    beforeChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        for (i = 0; i < changes.length; i++) {
                            var row = changes[i][0], col = changes[i][1], value = changes[i][3];
                            switch (col) {
                                case 'XNLoi_CoLoi':
                                    if (value == true) {
                                        hot.setDataAtRowProp(row, 'XNLoi_KhongLoi', 0, 'not');
                                    }
                                    break;
                                case 'XNLoi_KhongLoi':
                                    if (value == true) {
                                        hot.setDataAtRowProp(row, 'XNLoi_CoLoi', 0, 'not');
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                    },
                    afterChange: function (changes, source) {
                        if (!changes || source == 'not') {
                            return;
                        }
                        changes.forEach(function (change) {
                            var row = change[0], col = change[1], newValue = change[3];
                            var cellProperties = {};
                            switch (col) {
                                case 'XNLoi_CoLoi':
                                    if (newValue == true) {
                                        hot.setDataAtRowProp(row, 'XNLoi_KhongLoi', 0, 'not');
                                    }
                                    break;
                                case 'XNLoi_KhongLoi':
                                    if (newValue == true) {
                                        hot.setDataAtRowProp(row, 'XNLoi_CoLoi', 0, 'not');
                                    }
                                    break;
                                default:
                                    break;
                            }
                        });
                    },
                };
            };
            hot = new Handsontable(container, setting());

            $btnComment.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return !!item.id && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var message = $("#Message").val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }

                var dataReturn = [];
                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                $.each(myData, function (index, item) {
                    dataReturn.push({
                        Id: item.Id,
                        XNLoi: (!!item.XNLoi_CoLoi && item.XNLoi_CoLoi == 1) ? (1) : ((!!item.XNLoi_KhongLoi && item.XNLoi_KhongLoi == 1) ? 0 : null),
                        NVViPham: (!!item.NVViPham ? item.NVViPham : null),
                        SoTienTruyThu: (!!item.SoTienTruyThu ? item.SoTienTruyThu : null),
                        GhiChu: (!!item.GhiChu ? item.GhiChu : null),
                    });
                });

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var checkedVals = $('.file1:checkbox:checked').map(function () { return this.value; }).get();
                $('#ImageValidate').val(checkedVals.join(","));

                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getSourceData(), function (item, index) {
                    return !!item.id && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });

                var dataReturn = [];
                var myData = hot.getSourceData() === undefined ? [] : $.grep(hot.getSourceData(), function (item, index) {
                    return item.Id !== undefined && item.Id !== '' && item.Id !== null;
                });
                var l__Data__XNLoi_CoLoi__NotHaveNVViPham = [], l__Data__NotHaveXNLoi = [], l__Data__NotHaveLoaiLoi = [];
                $.each(myData, function (index, item) {
                    var l__XNLoi = (!!item.XNLoi_CoLoi && item.XNLoi_CoLoi == 1) ? (1) : ((!!item.XNLoi_KhongLoi && item.XNLoi_KhongLoi == 1) ? 0 : null);
                    var l__NVViPham = (!!item.NVViPham ? item.NVViPham : null);
                    var l__LoaiLoi = null;
                    if (!!item.LoaiLoi) {
                        var l__Data__LoaiLoi__ByName = $.grep(l__Data__LoaiLoi, function (p_Item, p_Index) {
                            return p_Item.Name == item.LoaiLoi
                        });
                        if (!!l__Data__LoaiLoi__ByName && l__Data__LoaiLoi__ByName.length > 0) {
                            l__LoaiLoi = (!!l__Data__LoaiLoi__ByName[0].Code ? l__Data__LoaiLoi__ByName[0].Code : null);
                        }
                    }
                    dataReturn.push({
                        Id: item.Id,
                        XNLoi: l__XNLoi,
                        NVViPham: l__NVViPham,
                        SoTienTruyThu: (!!item.SoTienTruyThu ? item.SoTienTruyThu : null),
                        LoaiLoi: l__LoaiLoi,
                        GhiChu: (!!item.GhiChu ? item.GhiChu : null),
                    });
                    if (l__XNLoi == 1) {
                        if (!l__NVViPham) {
                            l__Data__XNLoi_CoLoi__NotHaveNVViPham.push(index);
                        }
                    } else if (l__XNLoi == 0) {
                        //  Do nothing
                    } else {
                        l__Data__NotHaveXNLoi.push(index);
                    }
                    if (!!l__LoaiLoi) { }
                    else {
                        if (l__XNLoi == 1) {
                            l__Data__NotHaveLoaiLoi.push(index);
                        } else if (l__XNLoi == 0) {
                            //  Do nothing
                        } else {
                            l__Data__NotHaveLoaiLoi.push(index);
                        }
                    }
                });

                if (l__Data__XNLoi_CoLoi__NotHaveNVViPham.length > 0) {
                    XFunction.RenderMessage("error", "Xác nhận \"Có lỗi\", bắc buộc nhập thông tin \"Nhân viên vi phạm\"!"); return;
                }
                if (l__Data__NotHaveXNLoi.length > 0) {
                    XFunction.RenderMessage("error", "Xác nhận lỗi trước khi Hoàn tất!"); return;
                }
                if (l__Data__NotHaveLoaiLoi.length > 0) {
                    XFunction.RenderMessage("error", "Vui lòng chọn \"Loại lỗi\" trước khi Hoàn tất!"); return;
                }

                $('#Details').val(JSON.stringify(dataReturn));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
        //▲	Edit - VietMXH - 13/12/2019 - CL XNVP Quỹ==================================================
    };

    function contruct_226() {
        $.get('/Requests/GetAllRequestDetails', { id: CL.Id }, function (respone) {
            var FunctionDefaultValueEmty = function (p_Value) { // hàm set giá trị checkbox hansontable
                var l_ValueReturn = '';
                if (p_Value == '' || p_Value == null || p_Value == undefined) {
                    l_ValueReturn = '';
                } else {
                    l_ValueReturn = p_Value;
                }
                if (p_Value instanceof Array) {
                    l_ValueReturn = p_Value.length == 0 ? "" : p_Value.join(",");
                }
                return l_ValueReturn;
            }
            var permisstion = { isSender: false, isAssiner: false, isGroupAssiner: false };
            $.each(permissons, function (index, item) {
                if (item == 'sender')
                    permisstion.isSender = true;
                if (item == 'assigner')
                    permisstion.isAssiner = true;
                if (item == 'groupAssigner')
                    permisstion.isGroupAssiner = true;
            });
            var check_assigner = permisstion.isAssiner == true || permisstion.isGroupAssiner == true ? true : false;
            var flagassigner1 = true;
            if (CL.Status < 4 && check_assigner == true && CL.StepNo == 1) {
                flagassigner1 = false;
            }
            var l_Setting = function () {
                return {
                    data: respone,
                    minSpareCols: 0,
                    allowInsertColumn: false,
                    allowRemoveColumn: false,
                    autoColumnSize: true,
                    autoWrapCol: false,
                    columnSorting: false,
                    colWidths: 'undefined',
                    copyColsLimit: 16,
                    currentColClassName: 'currentCol', //currentCol
                    fixedColumnsLeft: 2,
                    manualColumnMove: false,
                    manualColumnResize: true,
                    viewportColumnRenderingOffset: 16,
                    sortIndicator: true,
                    //================================Rows=======
                    allowInsertRow: true,
                    allowRemoveRow: true,
                    autoRowSize: true,
                    autoWrapRow: false,
                    copyRowsLimit: 1000,
                    currentRowClassName: 'currentRow',
                    fixedRowsTop: 0,
                    manualRowMove: false,
                    manualRowResize: true,
                    rowHeaders: true,
                    minSpareRows: 0,
                    //startRows: 4,
                    //viewportRowRenderingOffset : 'auto',
                    //================================Oder=======
                    allowInvalid: false,
                    stretchH: 'all',
                    commentedCellClassName: 'htCommentCell',
                    comments: true,
                    contextMenu: false,
                    copyable: true,
                    customBorders: false,
                    debug: false,
                    disableVisualSelection: true,
                    enterBeginsEditingBoolean: true,
                    fillHandle: true,
                    outsideClickDeselects: true,
                    fragmentSelection: false,
                    groups: false,
                    invalidCellClassName: 'htInvalid',
                    multiSelect: true,
                    noWordWrapClassName: 'htNoWrap',
                    placeholder: false,
                    placeholderCellClassName: 'htPlaceholder',
                    readOnlyCellClassName: 'htDimmed',
                    search: false,
                    trimWhitespace: true,
                    undo: true,
                    formulas: true,
                    wordWrap: true,
                    colHeaders:
                        [
                            'Duyệt',
                            'Không duyệt',
                            'Hạn mức mới',
                            'Hạn mức hiện tại của shop'
                        ],
                    columns: [
                        {
                            data: 'Duyet', type: 'checkbox', width: 150, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: flagassigner1,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                        },
                        {
                            data: 'KhongDuyet', type: 'checkbox', width: 150, className: 'htCenter', checkedTemplate: 1, uncheckedTemplate: 0, readOnly: flagassigner1,
                            renderer: function (p_Instance, p_td, p_Row, p_Col, p_Prop, p_Value, p_CellProperties) {
                                if (FunctionDefaultValueEmty(p_Value) === '' || p_Value === 0) {
                                    p_Value = 0;
                                }
                                else {
                                    p_Value = 1;
                                }
                                Handsontable.CheckboxCell.renderer.apply(this, arguments);
                            }
                        },
                        { data: 'HanMuc_New', type: 'numeric', format: '0,00', className: 'htCenter', width: 250, readOnly: flagassigner1 },
                        { data: 'HanMuc_Current', type: 'numeric', format: '0,00', className: 'htCenter', width: 250, readOnly: true },
                    ],
                    afterChange: function (changes, source) {
                        var instance = this;
                        if (!changes || source == 'not') {
                            return;
                        }
                        changes.forEach(function (change) {
                            var row = change[0];
                            var col = change[1];
                            var newValue = change[3];
                            var cellProperties = {}, options;
                            if (col === 'Duyet' && newValue === 1) {
                                hot.setDataAtRowProp(row, 'KhongDuyet', 0, 'not');
                            }
                            if (col === 'KhongDuyet' && newValue === 1) {
                                hot.setDataAtRowProp(row, 'Duyet', 0, 'not');
                            }
                        });
                    },
                };
            };
            hot = new Handsontable(container, l_Setting());
            hot.selectCell(0, 0, 0, 0);
            $btnComment.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'To' || item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== ''
                });
                var message = $('#Message').val();
                if (message.length == 0) {
                    XFunction.RenderMessage("error", "Trao đổi phải nhập tin nhắn :("); return;
                }
                $('#Details').val(JSON.stringify(''));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Conversation");
                form.submit();
            });
            $btnComplete.on('click', function () {
                var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
                    return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
                });
                var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
                    return item.Id !== null && item.Id !== undefined && item.Id !== ''
                });
                if ((myData[0].Duyet == 0 || myData[0].Duyet == '' || myData[0].Duyet == undefined || myData[0].Duyet == null) && (myData[0].KhongDuyet == 0 || myData[0].KhongDuyet == '' || myData[0].KhongDuyet == undefined || myData[0].KhongDuyet == null)) {
                    XFunction.RenderMessage("error", "Chưa chọn trạng thái duyệt hay không duyệt !"); return;
                }
                if ((myData[0].Duyet == 1) && (myData[0].HanMuc_New == '' || myData[0].HanMuc_New == undefined || myData[0].HanMuc_New == null)) {
                    XFunction.RenderMessage("error", "Duyệt phải nhập hạn mức mới !"); return;
                }
                $.each(myData, function (index, item) {
                    if (item.HanMuc_New == '' || item.HanMuc_New == undefined || item.HanMuc_New == null) {
                        item.HanMuc_New = 0;
                    }
                })
                //console.log(myData); return;
                $('#Details').val(JSON.stringify(myData));
                $('#DetailsCc').val(JSON.stringify(myDataCc));
                var form = $("form#form-detail");
                form.attr("action", "/Requests/Complete");
                form.submit();
            });
        });
    };

    /*__________________*/
    function bindDumpButton() {
        if (typeof Handsontable === "undefined") {
            return;
        }

        Handsontable.Dom.addEvent(document.body, 'click', function (e) {
            var element = e.target || e.srcElement;

            if (element.nodeName == "BUTTON" && element.name == 'dump') {
                var name = element.getAttribute('data-dump');
                var instance = element.getAttribute('data-instance');
                var hot = window[instance];
            }
        });
    }
    bindDumpButton();
    $('#btnDuyetYCDC').click(function () {
        var datareturn = [];
        if ($('#showNotiNoteYCDC').is(":visible")) {
            XFunction.RenderMessage("error", "Vui lòng cập nhật ghi chú nếu duyệt các line được đánh dấu");
            $('#modalDuyetYCDC').modal('hide');
            return;
        }
        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
        });
        var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
            return item.Id !== null && item.Id !== undefined && item.Id !== '';
        });

        $.each(myData, function (index, item) {
            datareturn.push({
                Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                Quantity: item.QuantityNew,
                Note: item.Note
            });
        });

        var message = $("#Message").val();
        $('#Details').val(JSON.stringify(datareturn));
        $('#DetailsCc').val(JSON.stringify(myDataCc));
        var form = $("form#form-detail");
        form.attr("action", "/Requests/Complete");
        form.submit();
        $('#modalDuyetYCDC').modal('hide');
    });
    $('#btnTuChoiYCDC').click(function () {
        var myDataCc = hotCc == undefined ? "" : $.grep(hotCc.getData(), function (item, index) {
            return item.id != undefined && item.id != '' && item.id != null && item.id != 0 && (item.type == 'Cc' || item.type == 'GroupMail' || item.type == 'Group Mail Cc');
        });
        var myData = hot.getData() == undefined ? [] : $.grep(hot.getData(), function (item, index) {
            return item.Id !== null && item.Id !== undefined && item.Id !== '';
        });
        var datareturn = [];

        $.each(myData, function (index, item) {
            $.each(datareturnApprovedYCDC, function (index_r, item_r) {
                if (item_r.Id == item.Id)
                    item.Approved1 = 0;
            });
            datareturn.push({
                Id: item.Id, Approved: item.Approved1 == null || item.Approved1 == undefined || item.Approved1 == '' || item.Approved1 == 0 ? false : true,
                Quantity: item.QuantityNew,
                Note: item.Note
            });
        });

        var message = $("#Message").val();
        $('#Details').val(JSON.stringify(datareturn));
        $('#DetailsCc').val(JSON.stringify(myDataCc));
        var form = $("form#form-detail");
        form.attr("action", "/Requests/Complete");
        form.submit();
        $('#modalDuyetYCDC').modal('hide');
    });
    //===============================================================================
});

Date.prototype.toDateInputValue = (function () {
    var local = new Date(this);
    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
    return local.toJSON().slice(0, 10);
});

function checkFileUpload(f) {
    //▼	Edit - VietMXH - 02/08/2018 - Check đuôi file==================================================
    var l_File_Size = f.files[0].size;
    if (l_File_Size > 10485760) {
        $(f).val('');
        alert('Cảnh báo: Chỉ cho upload file có dung lượng <10MB! (' + l_File_Size + ' bytes)');
        return;
    }
    var l_File_Name = f.files[0].name;
    var l_File_Name_Str = l_File_Name.replace('.', '');
    if (/^[\w ]*$/.test(l_File_Name_Str) == false) {
        $(f).val('');
        alert('Cảnh báo: Tên file phải không dấu, không khoảng trắng và không có kí tự đặc biệt!');
        return;
    }
    else {
        var inValid = /\s/;
        if (inValid.test(l_File_Name_Str)) {
            $(f).val('');
            alert('Cảnh báo: Tên file không để khoảng trắng!');
            return;
        }
    }

    var l_FileExt = l_File_Name.split('.')[1];
    if (!!l_FileExt && l_FileExt != '') {
        var l_Allow_FileExt_Str = g_Allow_FileExt_Str;
        if (!!l_Allow_FileExt_Str && l_Allow_FileExt_Str != '') {
            var l_Allow_FileExt_Str__SplitToArr = l_Allow_FileExt_Str.split(',');
            if ($.inArray(l_FileExt.toLowerCase(), l_Allow_FileExt_Str__SplitToArr) < 0) {
                $(f).val('');
                alert('Cảnh báo: Đuôi file không hỗ trợ! (*.' + l_FileExt.toLowerCase() + ')');
                return;
            }
        }
        else {
            $(f).val('');
            alert('Cảnh báo: Hệ thống không cho up file!');
            return;
        }
    }
    else {
        $(f).val('');
        alert('Cảnh báo: Đuôi file không hợp lệ! (*.?)');
        return;
    }
    //▲	Edit - VietMXH - 02/08/2018 - Check đuôi file==================================================
};
function checkFileUploads(f) {
    $.each(f.files, function (index, item) {
        //▼	Edit - VietMXH - 02/08/2018 - Check đuôi file==================================================
        var l_File_Size = f.files[index].size;
        if (l_File_Size > 10485760) {
            $(f).val('');
            alert('Cảnh báo: Chỉ cho upload file có dung lượng <10MB! (' + l_File_Size + ' bytes)');
            return;
        }
        var l_File_Name = f.files[index].name;
        var l_File_Name_Str = l_File_Name.replace('.', '');
        if (/^[\w ]*$/.test(l_File_Name_Str) == false) {
            $(f).val('');
            alert('Cảnh báo: Tên file phải không dấu, không khoảng trắng và không có kí tự đặc biệt!');
            return;
        }
        else {
            var inValid = /\s/;
            if (inValid.test(l_File_Name_Str)) {
                $(f).val('');
                alert('Cảnh báo: Tên file không để khoảng trắng!');
                return;
            }
        }

        var l_FileExt = l_File_Name.split('.')[1];
        if (!!l_FileExt && l_FileExt != '') {
            var l_Allow_FileExt_Str = g_Allow_FileExt_Str;
            if (!!l_Allow_FileExt_Str && l_Allow_FileExt_Str != '') {
                var l_Allow_FileExt_Str__SplitToArr = l_Allow_FileExt_Str.split(',');
                if ($.inArray(l_FileExt.toLowerCase(), l_Allow_FileExt_Str__SplitToArr) < 0) {
                    $(f).val('');
                    alert('Cảnh báo: Đuôi file không hỗ trợ! (*.' + l_FileExt.toLowerCase() + ')');
                    return;
                }
            }
            else {
                $(f).val('');
                alert('Cảnh báo: Hệ thống không cho up file!');
                return;
            }
        }
        else {
            $(f).val('');
            alert('Cảnh báo: Đuôi file không hợp lệ! (*.?)');
            return;
        }
        //▲	Edit - VietMXH - 02/08/2018 - Check đuôi file==================================================
    });
};
